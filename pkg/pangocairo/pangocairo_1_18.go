// Code generated by girgen. DO NOT EDIT.

package pangocairo

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <pango/pangocairo.h>
// extern void callbackDelete(gpointer);
// extern void _gotk4_pangocairo1_ShapeRendererFunc(cairo_t*, PangoAttrShape*, gboolean, gpointer);
import "C"

// GType values.
var (
	GTypeFont = coreglib.Type(C.pango_cairo_font_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFont, F: marshalFont},
	})
}

// ContextSetShapeRenderer sets callback function for context to use for
// rendering attributes of type PANGO_ATTR_SHAPE.
//
// See PangoCairoShapeRendererFunc for details.
//
// The function takes the following parameters:
//
//    - context: PangoContext, from a pangocairo font map.
//    - fn (optional): callback function for rendering attributes of type
//      PANGO_ATTR_SHAPE, or NULL to disable shape rendering.
//
func ContextSetShapeRenderer(context *pango.Context, fn ShapeRendererFunc) {
	var _arg1 *C.PangoContext               // out
	var _arg2 C.PangoCairoShapeRendererFunc // out
	var _arg3 C.gpointer
	var _arg4 C.GDestroyNotify

	_arg1 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if fn != nil {
		_arg2 = (*[0]byte)(C._gotk4_pangocairo1_ShapeRendererFunc)
		_arg3 = C.gpointer(gbox.Assign(fn))
		_arg4 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	C.pango_cairo_context_set_shape_renderer(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(fn)
}

// Font: PangoCairoFont is an interface exported by fonts for use with Cairo.
//
// The actual type of the font will depend on the particular font technology
// Cairo was compiled to use.
//
// Font wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Font struct {
	_ [0]func() // equal guard
	pango.Font
}

var (
	_ pango.Fonter = (*Font)(nil)
)

// Fonter describes Font's interface methods.
type Fonter interface {
	coreglib.Objector

	baseFont() *Font
}

var _ Fonter = (*Font)(nil)

func wrapFont(obj *coreglib.Object) *Font {
	return &Font{
		Font: pango.Font{
			Object: obj,
		},
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	return wrapFont(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Font) baseFont() *Font {
	return v
}

// BaseFont returns the underlying base object.
func BaseFont(obj Fonter) *Font {
	return obj.baseFont()
}
