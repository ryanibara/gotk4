// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeCairoRenderer returns the GType for the type CairoRenderer.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeCairoRenderer() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gsk", "CairoRenderer").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalCairoRenderer)
	return gtype
}

// CairoRenderer: GSK renderer that is using cairo.
//
// Since it is using cairo, this renderer cannot support 3D transformations.
type CairoRenderer struct {
	_ [0]func() // equal guard
	Renderer
}

var (
	_ Rendererer = (*CairoRenderer)(nil)
)

func wrapCairoRenderer(obj *coreglib.Object) *CairoRenderer {
	return &CairoRenderer{
		Renderer: Renderer{
			Object: obj,
		},
	}
}

func marshalCairoRenderer(p uintptr) (interface{}, error) {
	return wrapCairoRenderer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCairoRenderer creates a new Cairo renderer.
//
// The Cairo renderer is the fallback renderer drawing in ways similar to how
// GTK 3 drew its content. Its primary use is as comparison tool.
//
// The Cairo renderer is incomplete. It cannot render 3D transformed content and
// will instead render an error marker. Its usage should be avoided.
//
// The function returns the following values:
//
//    - cairoRenderer: new Cairo renderer.
//
func NewCairoRenderer() *CairoRenderer {
	_info := girepository.MustFind("Gsk", "CairoRenderer")
	_gret := _info.InvokeClassMethod("new_CairoRenderer", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _cairoRenderer *CairoRenderer // out

	_cairoRenderer = wrapCairoRenderer(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _cairoRenderer
}
