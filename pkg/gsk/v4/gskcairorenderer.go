// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gskcairorenderer.go.
var GTypeCairoRenderer = coreglib.Type(C.gsk_cairo_renderer_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCairoRenderer, F: marshalCairoRenderer},
	})
}

// CairoRendererOverrider contains methods that are overridable.
type CairoRendererOverrider interface {
}

// CairoRenderer: GSK renderer that is using cairo.
//
// Since it is using cairo, this renderer cannot support 3D transformations.
type CairoRenderer struct {
	_ [0]func() // equal guard
	Renderer
}

var (
	_ Rendererer = (*CairoRenderer)(nil)
)

func classInitCairoRendererer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCairoRenderer(obj *coreglib.Object) *CairoRenderer {
	return &CairoRenderer{
		Renderer: Renderer{
			Object: obj,
		},
	}
}

func marshalCairoRenderer(p uintptr) (interface{}, error) {
	return wrapCairoRenderer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCairoRenderer creates a new Cairo renderer.
//
// The Cairo renderer is the fallback renderer drawing in ways similar to how
// GTK 3 drew its content. Its primary use is as comparison tool.
//
// The Cairo renderer is incomplete. It cannot render 3D transformed content and
// will instead render an error marker. Its usage should be avoided.
//
// The function returns the following values:
//
//    - cairoRenderer: new Cairo renderer.
//
func NewCairoRenderer() *CairoRenderer {
	_gret := girepository.MustFind("Gsk", "CairoRenderer").InvokeMethod("new_CairoRenderer", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _cairoRenderer *CairoRenderer // out

	_cairoRenderer = wrapCairoRenderer(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cairoRenderer
}
