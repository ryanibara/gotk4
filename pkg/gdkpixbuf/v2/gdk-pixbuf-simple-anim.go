// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
// #include <glib-object.h>
import "C"

// GTypePixbufSimpleAnim returns the GType for the type PixbufSimpleAnim.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypePixbufSimpleAnim() coreglib.Type {
	gtype := coreglib.Type(C.gdk_pixbuf_simple_anim_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalPixbufSimpleAnim)
	return gtype
}

// PixbufSimpleAnimOverrider contains methods that are overridable.
type PixbufSimpleAnimOverrider interface {
}

// PixbufSimpleAnim: opaque struct representing a simple animation.
type PixbufSimpleAnim struct {
	_ [0]func() // equal guard
	PixbufAnimation
}

var (
	_ coreglib.Objector = (*PixbufSimpleAnim)(nil)
)

func classInitPixbufSimpleAnimmer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapPixbufSimpleAnim(obj *coreglib.Object) *PixbufSimpleAnim {
	return &PixbufSimpleAnim{
		PixbufAnimation: PixbufAnimation{
			Object: obj,
		},
	}
}

func marshalPixbufSimpleAnim(p uintptr) (interface{}, error) {
	return wrapPixbufSimpleAnim(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPixbufSimpleAnim creates a new, empty animation.
//
// The function takes the following parameters:
//
//    - width of the animation.
//    - height of the animation.
//    - rate: speed of the animation, in frames per second.
//
// The function returns the following values:
//
//    - pixbufSimpleAnim: newly allocated PixbufSimpleAnim.
//
func NewPixbufSimpleAnim(width, height int32, rate float32) *PixbufSimpleAnim {
	var _arg1 C.gint                 // out
	var _arg2 C.gint                 // out
	var _arg3 C.gfloat               // out
	var _cret *C.GdkPixbufSimpleAnim // in

	_arg1 = C.gint(width)
	_arg2 = C.gint(height)
	_arg3 = C.gfloat(rate)

	_cret = C.gdk_pixbuf_simple_anim_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(rate)

	var _pixbufSimpleAnim *PixbufSimpleAnim // out

	_pixbufSimpleAnim = wrapPixbufSimpleAnim(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _pixbufSimpleAnim
}

// AddFrame adds a new frame to animation. The pixbuf must have the dimensions
// specified when the animation was constructed.
//
// The function takes the following parameters:
//
//    - pixbuf to add.
//
func (animation *PixbufSimpleAnim) AddFrame(pixbuf *Pixbuf) {
	var _arg0 *C.GdkPixbufSimpleAnim // out
	var _arg1 *C.GdkPixbuf           // out

	_arg0 = (*C.GdkPixbufSimpleAnim)(unsafe.Pointer(coreglib.InternObject(animation).Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	C.gdk_pixbuf_simple_anim_add_frame(_arg0, _arg1)
	runtime.KeepAlive(animation)
	runtime.KeepAlive(pixbuf)
}

// Loop gets whether animation should loop indefinitely when it reaches the end.
//
// The function returns the following values:
//
//    - ok: TRUE if the animation loops forever, FALSE otherwise.
//
func (animation *PixbufSimpleAnim) Loop() bool {
	var _arg0 *C.GdkPixbufSimpleAnim // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GdkPixbufSimpleAnim)(unsafe.Pointer(coreglib.InternObject(animation).Native()))

	_cret = C.gdk_pixbuf_simple_anim_get_loop(_arg0)
	runtime.KeepAlive(animation)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetLoop sets whether animation should loop indefinitely when it reaches the
// end.
//
// The function takes the following parameters:
//
//    - loop: whether to loop the animation.
//
func (animation *PixbufSimpleAnim) SetLoop(loop bool) {
	var _arg0 *C.GdkPixbufSimpleAnim // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GdkPixbufSimpleAnim)(unsafe.Pointer(coreglib.InternObject(animation).Native()))
	if loop {
		_arg1 = C.TRUE
	}

	C.gdk_pixbuf_simple_anim_set_loop(_arg0, _arg1)
	runtime.KeepAlive(animation)
	runtime.KeepAlive(loop)
}
