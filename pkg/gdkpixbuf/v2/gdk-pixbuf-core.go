// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeColorspace      = coreglib.Type(C.gdk_colorspace_get_type())
	GTypePixbufAlphaMode = coreglib.Type(C.gdk_pixbuf_alpha_mode_get_type())
	GTypePixbufError     = coreglib.Type(C.gdk_pixbuf_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeColorspace, F: marshalColorspace},
		coreglib.TypeMarshaler{T: GTypePixbufAlphaMode, F: marshalPixbufAlphaMode},
		coreglib.TypeMarshaler{T: GTypePixbufError, F: marshalPixbufError},
	})
}

// Colorspace: this enumeration defines the color spaces that are supported by
// the gdk-pixbuf library.
//
// Currently only RGB is supported.
type Colorspace C.gint

const (
	// ColorspaceRGB indicates a red/green/blue additive color space.
	ColorspaceRGB Colorspace = iota
)

func marshalColorspace(p uintptr) (interface{}, error) {
	return Colorspace(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Colorspace.
func (c Colorspace) String() string {
	switch c {
	case ColorspaceRGB:
		return "RGB"
	default:
		return fmt.Sprintf("Colorspace(%d)", c)
	}
}

// PixbufAlphaMode: control the alpha channel for drawables.
//
// These values can be passed to gdk_pixbuf_xlib_render_to_drawable_alpha()
// in gdk-pixbuf-xlib to control how the alpha channel of an image should be
// handled.
//
// This function can create a bilevel clipping mask (black and white) and use it
// while painting the image.
//
// In the future, when the X Window System gets an alpha channel extension,
// it will be possible to do full alpha compositing onto arbitrary drawables.
// For now both cases fall back to a bilevel clipping mask.
//
// Deprecated: There is no user of GdkPixbufAlphaMode in GdkPixbuf, and the Xlib
// utility functions have been split out to their own library, gdk-pixbuf-xlib.
type PixbufAlphaMode C.gint

const (
	// PixbufAlphaBilevel: bilevel clipping mask (black and white) will be
	// created and used to draw the image. Pixels below 0.5 opacity will be
	// considered fully transparent, and all others will be considered fully
	// opaque.
	PixbufAlphaBilevel PixbufAlphaMode = iota
	// PixbufAlphaFull: for now falls back to K_PIXBUF_ALPHA_BILEVEL. In the
	// future it will do full alpha compositing.
	PixbufAlphaFull
)

func marshalPixbufAlphaMode(p uintptr) (interface{}, error) {
	return PixbufAlphaMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PixbufAlphaMode.
func (p PixbufAlphaMode) String() string {
	switch p {
	case PixbufAlphaBilevel:
		return "Bilevel"
	case PixbufAlphaFull:
		return "Full"
	default:
		return fmt.Sprintf("PixbufAlphaMode(%d)", p)
	}
}

// PixbufError: error code in the GDK_PIXBUF_ERROR domain.
//
// Many gdk-pixbuf operations can cause errors in this domain, or in the
// G_FILE_ERROR domain.
type PixbufError C.gint

const (
	// PixbufErrorCorruptImage: image file was broken somehow.
	PixbufErrorCorruptImage PixbufError = iota
	// PixbufErrorInsufficientMemory: not enough memory.
	PixbufErrorInsufficientMemory
	// PixbufErrorBadOption: bad option was passed to a pixbuf save module.
	PixbufErrorBadOption
	// PixbufErrorUnknownType: unknown image type.
	PixbufErrorUnknownType
	// PixbufErrorUnsupportedOperation: don't know how to perform the given
	// operation on the type of image at hand.
	PixbufErrorUnsupportedOperation
	// PixbufErrorFailed: generic failure code, something went wrong.
	PixbufErrorFailed
	// PixbufErrorIncompleteAnimation: only part of the animation was loaded.
	PixbufErrorIncompleteAnimation
)

func marshalPixbufError(p uintptr) (interface{}, error) {
	return PixbufError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PixbufError.
func (p PixbufError) String() string {
	switch p {
	case PixbufErrorCorruptImage:
		return "CorruptImage"
	case PixbufErrorInsufficientMemory:
		return "InsufficientMemory"
	case PixbufErrorBadOption:
		return "BadOption"
	case PixbufErrorUnknownType:
		return "UnknownType"
	case PixbufErrorUnsupportedOperation:
		return "UnsupportedOperation"
	case PixbufErrorFailed:
		return "Failed"
	case PixbufErrorIncompleteAnimation:
		return "IncompleteAnimation"
	default:
		return fmt.Sprintf("PixbufError(%d)", p)
	}
}
