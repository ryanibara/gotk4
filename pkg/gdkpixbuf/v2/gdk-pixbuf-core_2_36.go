// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern void _gotk4_gdkpixbuf2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// CopyOptions copies the key/value pair options attached to a GdkPixbuf to
// another GdkPixbuf.
//
// This is useful to keep original metadata after having manipulated a file.
// However be careful to remove metadata which you've already applied, such as
// the "orientation" option after rotating the image.
//
// The function takes the following parameters:
//
//    - destPixbuf: destination pixbuf.
//
// The function returns the following values:
//
//    - ok: TRUE on success.
//
func (srcPixbuf *Pixbuf) CopyOptions(destPixbuf *Pixbuf) bool {
	var _arg0 *C.GdkPixbuf // out
	var _arg1 *C.GdkPixbuf // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(srcPixbuf).Native()))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(destPixbuf).Native()))

	_cret = C.gdk_pixbuf_copy_options(_arg0, _arg1)
	runtime.KeepAlive(srcPixbuf)
	runtime.KeepAlive(destPixbuf)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveOption removes the key/value pair option attached to a GdkPixbuf.
//
// The function takes the following parameters:
//
//    - key: nul-terminated string representing the key to remove.
//
// The function returns the following values:
//
//    - ok: TRUE if an option was removed, FALSE if not.
//
func (pixbuf *Pixbuf) RemoveOption(key string) bool {
	var _arg0 *C.GdkPixbuf // out
	var _arg1 *C.gchar     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_pixbuf_remove_option(_arg0, _arg1)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SaveToStreamv saves pixbuf to an output stream.
//
// Supported file formats are currently "jpeg", "tiff", "png", "ico" or "bmp".
//
// See gdkpixbuf.Pixbuf.SaveToStream() for more details.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - stream: GOutputStream to save the pixbuf to.
//    - typ: name of file format.
//    - optionKeys (optional): name of options to set.
//    - optionValues (optional) values for named options.
//
func (pixbuf *Pixbuf) SaveToStreamv(ctx context.Context, stream gio.OutputStreamer, typ string, optionKeys, optionValues []string) error {
	var _arg0 *C.GdkPixbuf     // out
	var _arg5 *C.GCancellable  // out
	var _arg1 *C.GOutputStream // out
	var _arg2 *C.char          // out
	var _arg3 **C.char         // out
	var _arg4 **C.char         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GOutputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		_arg3 = (**C.char)(C.calloc(C.size_t((len(optionKeys) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg3))
		{
			out := unsafe.Slice(_arg3, len(optionKeys)+1)
			var zero *C.char
			out[len(optionKeys)] = zero
			for i := range optionKeys {
				out[i] = (*C.char)(unsafe.Pointer(C.CString(optionKeys[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	{
		_arg4 = (**C.char)(C.calloc(C.size_t((len(optionValues) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg4))
		{
			out := unsafe.Slice(_arg4, len(optionValues)+1)
			var zero *C.char
			out[len(optionValues)] = zero
			for i := range optionValues {
				out[i] = (*C.char)(unsafe.Pointer(C.CString(optionValues[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	C.gdk_pixbuf_save_to_streamv(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(optionKeys)
	runtime.KeepAlive(optionValues)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SaveToStreamvAsync saves pixbuf to an output stream asynchronously.
//
// For more details see gdk_pixbuf_save_to_streamv(), which is the synchronous
// version of this function.
//
// When the operation is finished, callback will be called in the main thread.
//
// You can then call gdk_pixbuf_save_to_stream_finish() to get the result of the
// operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - stream: GOutputStream to which to save the pixbuf.
//    - typ: name of file format.
//    - optionKeys (optional): name of options to set.
//    - optionValues (optional) values for named options.
//    - callback (optional): GAsyncReadyCallback to call when the pixbuf is
//      saved.
//
func (pixbuf *Pixbuf) SaveToStreamvAsync(ctx context.Context, stream gio.OutputStreamer, typ string, optionKeys, optionValues []string, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkPixbuf          // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.GOutputStream      // out
	var _arg2 *C.gchar              // out
	var _arg3 **C.gchar             // out
	var _arg4 **C.gchar             // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GOutputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		_arg3 = (**C.gchar)(C.calloc(C.size_t((len(optionKeys) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg3))
		{
			out := unsafe.Slice(_arg3, len(optionKeys)+1)
			var zero *C.gchar
			out[len(optionKeys)] = zero
			for i := range optionKeys {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(optionKeys[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	{
		_arg4 = (**C.gchar)(C.calloc(C.size_t((len(optionValues) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg4))
		{
			out := unsafe.Slice(_arg4, len(optionValues)+1)
			var zero *C.gchar
			out[len(optionValues)] = zero
			for i := range optionValues {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(optionValues[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gdk_pixbuf_save_to_streamv_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(optionKeys)
	runtime.KeepAlive(optionValues)
	runtime.KeepAlive(callback)
}
