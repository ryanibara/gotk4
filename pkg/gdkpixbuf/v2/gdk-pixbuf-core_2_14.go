// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

// NewPixbufFromStream creates a new pixbuf by loading an image from an input
// stream.
//
// The file format is detected automatically.
//
// If NULL is returned, then error will be set.
//
// The cancellable can be used to abort the operation from another thread. If
// the operation was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
// Other possible errors are in the GDK_PIXBUF_ERROR and G_IO_ERROR domains.
//
// The stream is not closed.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - stream: GInputStream to load the pixbuf from.
//
// The function returns the following values:
//
//    - pixbuf (optional): newly-created pixbuf.
//
func NewPixbufFromStream(ctx context.Context, stream gio.InputStreamer) (*Pixbuf, error) {
	var _arg2 *C.GCancellable // out
	var _arg1 *C.GInputStream // out
	var _cret *C.GdkPixbuf    // in
	var _cerr *C.GError       // in

	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))

	_cret = C.gdk_pixbuf_new_from_stream(_arg1, _arg2, &_cerr)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)

	var _pixbuf *Pixbuf // out
	var _goerr error    // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}

// NewPixbufFromStreamAtScale creates a new pixbuf by loading an image from an
// input stream.
//
// The file format is detected automatically. If NULL is returned, then error
// will be set. The cancellable can be used to abort the operation from another
// thread. If the operation was cancelled, the error G_IO_ERROR_CANCELLED will
// be returned. Other possible errors are in the GDK_PIXBUF_ERROR and G_IO_ERROR
// domains.
//
// The image will be scaled to fit in the requested size, optionally preserving
// the image's aspect ratio.
//
// When preserving the aspect ratio, a width of -1 will cause the image to be
// scaled to the exact given height, and a height of -1 will cause the image to
// be scaled to the exact given width. If both width and height are given, this
// function will behave as if the smaller of the two values is passed as -1.
//
// When not preserving aspect ratio, a width or height of -1 means to not scale
// the image at all in that dimension.
//
// The stream is not closed.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - stream: GInputStream to load the pixbuf from.
//    - width the image should have or -1 to not constrain the width.
//    - height the image should have or -1 to not constrain the height.
//    - preserveAspectRatio: TRUE to preserve the image's aspect ratio.
//
// The function returns the following values:
//
//    - pixbuf (optional): newly-created pixbuf.
//
func NewPixbufFromStreamAtScale(ctx context.Context, stream gio.InputStreamer, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
	var _arg5 *C.GCancellable // out
	var _arg1 *C.GInputStream // out
	var _arg2 C.gint          // out
	var _arg3 C.gint          // out
	var _arg4 C.gboolean      // out
	var _cret *C.GdkPixbuf    // in
	var _cerr *C.GError       // in

	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg2 = C.gint(width)
	_arg3 = C.gint(height)
	if preserveAspectRatio {
		_arg4 = C.TRUE
	}

	_cret = C.gdk_pixbuf_new_from_stream_at_scale(_arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(preserveAspectRatio)

	var _pixbuf *Pixbuf // out
	var _goerr error    // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}
