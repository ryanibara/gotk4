// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

// Flip flips a pixbuf horizontally or vertically and returns the result in a
// new pixbuf.
//
// The function takes the following parameters:
//
//    - horizontal: TRUE to flip horizontally, FALSE to flip vertically.
//
// The function returns the following values:
//
//    - pixbuf (optional): new pixbuf.
//
func (src *Pixbuf) Flip(horizontal bool) *Pixbuf {
	var _arg0 *C.GdkPixbuf // out
	var _arg1 C.gboolean   // out
	var _cret *C.GdkPixbuf // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(src).Native()))
	if horizontal {
		_arg1 = C.TRUE
	}

	_cret = C.gdk_pixbuf_flip(_arg0, _arg1)
	runtime.KeepAlive(src)
	runtime.KeepAlive(horizontal)

	var _pixbuf *Pixbuf // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _pixbuf
}

// RotateSimple rotates a pixbuf by a multiple of 90 degrees, and returns the
// result in a new pixbuf.
//
// If angle is 0, this function will return a copy of src.
//
// The function takes the following parameters:
//
//    - angle to rotate by.
//
// The function returns the following values:
//
//    - pixbuf (optional): new pixbuf.
//
func (src *Pixbuf) RotateSimple(angle PixbufRotation) *Pixbuf {
	var _arg0 *C.GdkPixbuf        // out
	var _arg1 C.GdkPixbufRotation // out
	var _cret *C.GdkPixbuf        // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(src).Native()))
	_arg1 = C.GdkPixbufRotation(angle)

	_cret = C.gdk_pixbuf_rotate_simple(_arg0, _arg1)
	runtime.KeepAlive(src)
	runtime.KeepAlive(angle)

	var _pixbuf *Pixbuf // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _pixbuf
}
