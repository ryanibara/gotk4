// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

// NewPixbufFromResource creates a new pixbuf by loading an image from an
// resource.
//
// The file format is detected automatically. If NULL is returned, then error
// will be set.
//
// The function takes the following parameters:
//
//    - resourcePath: path of the resource file.
//
// The function returns the following values:
//
//    - pixbuf (optional): newly-created pixbuf.
//
func NewPixbufFromResource(resourcePath string) (*Pixbuf, error) {
	var _arg1 *C.char      // out
	var _cret *C.GdkPixbuf // in
	var _cerr *C.GError    // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(resourcePath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gdk_pixbuf_new_from_resource(_arg1, &_cerr)
	runtime.KeepAlive(resourcePath)

	var _pixbuf *Pixbuf // out
	var _goerr error    // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}

// NewPixbufFromResourceAtScale creates a new pixbuf by loading an image from an
// resource.
//
// The file format is detected automatically. If NULL is returned, then error
// will be set.
//
// The image will be scaled to fit in the requested size, optionally preserving
// the image's aspect ratio. When preserving the aspect ratio, a width of -1
// will cause the image to be scaled to the exact given height, and a height of
// -1 will cause the image to be scaled to the exact given width. When not
// preserving aspect ratio, a width or height of -1 means to not scale the image
// at all in that dimension.
//
// The stream is not closed.
//
// The function takes the following parameters:
//
//    - resourcePath: path of the resource file.
//    - width the image should have or -1 to not constrain the width.
//    - height the image should have or -1 to not constrain the height.
//    - preserveAspectRatio: TRUE to preserve the image's aspect ratio.
//
// The function returns the following values:
//
//    - pixbuf (optional): newly-created pixbuf.
//
func NewPixbufFromResourceAtScale(resourcePath string, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
	var _arg1 *C.char      // out
	var _arg2 C.int        // out
	var _arg3 C.int        // out
	var _arg4 C.gboolean   // out
	var _cret *C.GdkPixbuf // in
	var _cerr *C.GError    // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(resourcePath)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(width)
	_arg3 = C.int(height)
	if preserveAspectRatio {
		_arg4 = C.TRUE
	}

	_cret = C.gdk_pixbuf_new_from_resource_at_scale(_arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(resourcePath)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(preserveAspectRatio)

	var _pixbuf *Pixbuf // out
	var _goerr error    // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}

// ByteLength returns the length of the pixel data, in bytes.
//
// The function returns the following values:
//
//    - gsize: length of the pixel data.
//
func (pixbuf *Pixbuf) ByteLength() uint {
	var _arg0 *C.GdkPixbuf // out
	var _cret C.gsize      // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	_cret = C.gdk_pixbuf_get_byte_length(_arg0)
	runtime.KeepAlive(pixbuf)

	var _gsize uint // out

	_gsize = uint(_cret)

	return _gsize
}

// Pixels queries a pointer to the pixel data of a pixbuf.
//
// This function will cause an implicit copy of the pixbuf data if the pixbuf
// was created from read-only data.
//
// Please see the section on image data (#image-data) for information about how
// the pixel data is stored in memory.
//
// The function returns the following values:
//
//    - guint8s: pointer to the pixbuf's pixel data.
//
func (pixbuf *Pixbuf) Pixels() []byte {
	var _arg0 *C.GdkPixbuf // out
	var _cret *C.guchar    // in
	var _arg1 C.guint      // in

	_arg0 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	_cret = C.gdk_pixbuf_get_pixels_with_length(_arg0, &_arg1)
	runtime.KeepAlive(pixbuf)

	var _guint8s []byte // out

	_guint8s = make([]byte, _arg1)
	copy(_guint8s, unsafe.Slice((*byte)(unsafe.Pointer(_cret)), _arg1))

	return _guint8s
}
