// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern void _gotk4_gdkpixbuf2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// PixbufGetFileInfoAsync: asynchronously parses an image file far enough to
// determine its format and size.
//
// For more details see gdk_pixbuf_get_file_info(), which is the synchronous
// version of this function.
//
// When the operation is finished, callback will be called in the main thread.
// You can then call gdk_pixbuf_get_file_info_finish() to get the result of the
// operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - filename: name of the file to identify.
//    - callback (optional): GAsyncReadyCallback to call when the file info is
//      available.
//
func PixbufGetFileInfoAsync(ctx context.Context, filename string, callback gio.AsyncReadyCallback) {
	var _arg2 *C.GCancellable       // out
	var _arg1 *C.gchar              // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gdk_pixbuf_get_file_info_async(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(callback)
}

// PixbufGetFileInfoFinish finishes an asynchronous pixbuf parsing operation
// started with gdk_pixbuf_get_file_info_async().
//
// The function takes the following parameters:
//
//    - asyncResult: GAsyncResult.
//
// The function returns the following values:
//
//    - width: return location for the width of the image, or NULL.
//    - height: return location for the height of the image, or NULL.
//    - pixbufFormat (optional): GdkPixbufFormat describing the image format of
//      the file.
//
func PixbufGetFileInfoFinish(asyncResult gio.AsyncResulter) (width, height int, pixbufFormat *PixbufFormat, goerr error) {
	var _arg1 *C.GAsyncResult    // out
	var _arg2 C.gint             // in
	var _arg3 C.gint             // in
	var _cret *C.GdkPixbufFormat // in
	var _cerr *C.GError          // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(asyncResult).Native()))

	_cret = C.gdk_pixbuf_get_file_info_finish(_arg1, &_arg2, &_arg3, &_cerr)
	runtime.KeepAlive(asyncResult)

	var _width int                  // out
	var _height int                 // out
	var _pixbufFormat *PixbufFormat // out
	var _goerr error                // out

	_width = int(_arg2)
	_height = int(_arg3)
	if _cret != nil {
		_pixbufFormat = (*PixbufFormat)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _width, _height, _pixbufFormat, _goerr
}
