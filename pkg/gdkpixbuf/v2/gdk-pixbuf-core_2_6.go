// Code generated by girgen. DO NOT EDIT.

package gdkpixbuf

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk-pixbuf/gdk-pixbuf.h>
import "C"

// NewPixbufFromFileAtScale creates a new pixbuf by loading an image from a
// file.
//
// The file format is detected automatically.
//
// If NULL is returned, then error will be set. Possible errors are:
//
//    - the file could not be opened
//    - there is no loader for the file's format
//    - there is not enough memory to allocate the image buffer
//    - the image buffer contains invalid data
//
// The error domains are GDK_PIXBUF_ERROR and G_FILE_ERROR.
//
// The image will be scaled to fit in the requested size, optionally preserving
// the image's aspect ratio.
//
// When preserving the aspect ratio, a width of -1 will cause the image to be
// scaled to the exact given height, and a height of -1 will cause the image to
// be scaled to the exact given width. When not preserving aspect ratio, a width
// or height of -1 means to not scale the image at all in that dimension.
// Negative values for width and height are allowed since 2.8.
//
// The function takes the following parameters:
//
//    - filename: name of file to load, in the GLib file name encoding.
//    - width the image should have or -1 to not constrain the width.
//    - height the image should have or -1 to not constrain the height.
//    - preserveAspectRatio: TRUE to preserve the image's aspect ratio.
//
// The function returns the following values:
//
//    - pixbuf (optional): newly-created pixbuf.
//
func NewPixbufFromFileAtScale(filename string, width, height int, preserveAspectRatio bool) (*Pixbuf, error) {
	var _arg1 *C.char      // out
	var _arg2 C.int        // out
	var _arg3 C.int        // out
	var _arg4 C.gboolean   // out
	var _cret *C.GdkPixbuf // in
	var _cerr *C.GError    // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(width)
	_arg3 = C.int(height)
	if preserveAspectRatio {
		_arg4 = C.TRUE
	}

	_cret = C.gdk_pixbuf_new_from_file_at_scale(_arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(preserveAspectRatio)

	var _pixbuf *Pixbuf // out
	var _goerr error    // out

	if _cret != nil {
		_pixbuf = wrapPixbuf(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}
