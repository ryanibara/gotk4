// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeX11DeviceManagerXI2 returns the GType for the type X11DeviceManagerXI2.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeX11DeviceManagerXI2() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("GdkX11", "X11DeviceManagerXI2").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalX11DeviceManagerXI2)
	return gtype
}

type X11DeviceManagerXI2 struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*X11DeviceManagerXI2)(nil)
)

func wrapX11DeviceManagerXI2(obj *coreglib.Object) *X11DeviceManagerXI2 {
	return &X11DeviceManagerXI2{
		Object: obj,
	}
}

func marshalX11DeviceManagerXI2(p uintptr) (interface{}, error) {
	return wrapX11DeviceManagerXI2(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
