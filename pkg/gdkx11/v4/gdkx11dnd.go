// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <gdk/x11/gdkx.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeX11Drag = coreglib.Type(C.gdk_x11_drag_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11Drag, F: marshalX11Drag},
	})
}

// X11DragOverrider contains methods that are overridable.
type X11DragOverrider interface {
}

type X11Drag struct {
	_ [0]func() // equal guard
	gdk.Drag
}

var (
	_ gdk.Dragger = (*X11Drag)(nil)
)

func classInitX11Dragger(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapX11Drag(obj *coreglib.Object) *X11Drag {
	return &X11Drag{
		Drag: gdk.Drag{
			Object: obj,
		},
	}
}

func marshalX11Drag(p uintptr) (interface{}, error) {
	return wrapX11Drag(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
