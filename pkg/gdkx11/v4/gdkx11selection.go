// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// X11FreeCompoundText frees the data returned from
// gdk_x11_display_string_to_compound_text().
//
// The function takes the following parameters:
//
//    - ctext: pointer stored in ctext from a call to
//      gdk_x11_display_string_to_compound_text().
//
func X11FreeCompoundText(ctext *byte) {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(ctext))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("GdkX11", "x11_free_compound_text").Invoke(_args[:], nil)

	runtime.KeepAlive(ctext)
}

// StringToCompoundText: convert a string from the encoding of the current
// locale into a form suitable for storing in a window property.
//
// The function takes the following parameters:
//
//    - str: nul-terminated string.
//
// The function returns the following values:
//
//    - encoding: location to store the encoding (to be used as the type for the
//      property).
//    - format: location to store the format of the property.
//    - ctext: location to store newly allocated data for the property.
//    - gint: 0 upon success, non-zero upon failure.
//
func (display *X11Display) StringToCompoundText(str string) (encoding string, format int32, ctext []byte, gint int32) {
	var _args [2]girepository.Argument
	var _outs [4]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _out0 *C.void   // in
	var _out1 *C.void   // in
	var _out2 *C.guchar // in
	var _out3 *C.void   // in
	var _cret C.int     // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("GdkX11", "X11Display").InvokeMethod("string_to_compound_text", _args[:], _outs[:])
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(display)
	runtime.KeepAlive(str)

	var _encoding string // out
	var _format int32    // out
	var _ctext []byte    // out
	var _gint int32      // out
	_out0 = *(**C.void)(unsafe.Pointer(&_outs[0]))
	_out1 = *(**C.void)(unsafe.Pointer(&_outs[1]))
	_out2 = *(**C.guchar)(unsafe.Pointer(&_outs[2]))
	_out3 = *(*C.int)(unsafe.Pointer(&_outs[3]))

	_encoding = C.GoString((*C.gchar)(unsafe.Pointer(_out0)))
	_format = *(*int32)(unsafe.Pointer(_out1))
	defer C.free(unsafe.Pointer(_out2))
	_ctext = make([]byte, _out3)
	copy(_ctext, unsafe.Slice((*byte)(unsafe.Pointer(_out2)), _out3))
	_gint = int32(_cret)

	return _encoding, _format, _ctext, _gint
}

// UTF8ToCompoundText converts from UTF-8 to compound text.
//
// The function takes the following parameters:
//
//    - str: UTF-8 string.
//
// The function returns the following values:
//
//    - encoding: location to store resulting encoding.
//    - format: location to store format of the result.
//    - ctext: location to store the data of the result.
//    - ok: TRUE if the conversion succeeded, otherwise FALSE.
//
func (display *X11Display) UTF8ToCompoundText(str string) (string, int32, []byte, bool) {
	var _args [2]girepository.Argument
	var _outs [4]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _out0 *C.void    // in
	var _out1 *C.void    // in
	var _out2 *C.guchar  // in
	var _out3 *C.void    // in
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("GdkX11", "X11Display").InvokeMethod("utf8_to_compound_text", _args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(display)
	runtime.KeepAlive(str)

	var _encoding string // out
	var _format int32    // out
	var _ctext []byte    // out
	var _ok bool         // out
	_out0 = *(**C.void)(unsafe.Pointer(&_outs[0]))
	_out1 = *(**C.void)(unsafe.Pointer(&_outs[1]))
	_out2 = *(**C.guchar)(unsafe.Pointer(&_outs[2]))
	_out3 = *(*C.gboolean)(unsafe.Pointer(&_outs[3]))

	_encoding = C.GoString((*C.gchar)(unsafe.Pointer(_out0)))
	_format = *(*int32)(unsafe.Pointer(_out1))
	defer C.free(unsafe.Pointer(_out2))
	_ctext = make([]byte, _out3)
	copy(_ctext, unsafe.Slice((*byte)(unsafe.Pointer(_out2)), _out3))
	if _cret != 0 {
		_ok = true
	}

	return _encoding, _format, _ctext, _ok
}
