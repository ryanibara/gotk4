// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"fmt"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <gdk/x11/gdkx.h>
// #include <glib-object.h>
import "C"

// glib.Type values for gdkx11device-xi2.go.
var GTypeX11DeviceXI2 = externglib.Type(C.gdk_x11_device_xi2_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeX11DeviceXI2, F: marshalX11DeviceXI2},
	})
}

type X11DeviceType C.gint

const (
	X11DeviceTypeLogical X11DeviceType = iota
	X11DeviceTypePhysical
	X11DeviceTypeFloating
)

// String returns the name in string for X11DeviceType.
func (x X11DeviceType) String() string {
	switch x {
	case X11DeviceTypeLogical:
		return "Logical"
	case X11DeviceTypePhysical:
		return "Physical"
	case X11DeviceTypeFloating:
		return "Floating"
	default:
		return fmt.Sprintf("X11DeviceType(%d)", x)
	}
}

// X11DeviceXI2Overrider contains methods that are overridable.
type X11DeviceXI2Overrider interface {
	externglib.Objector
}

// WrapX11DeviceXI2Overrider wraps the X11DeviceXI2Overrider
// interface implementation to access the instance methods.
func WrapX11DeviceXI2Overrider(obj X11DeviceXI2Overrider) *X11DeviceXI2 {
	return wrapX11DeviceXI2(externglib.BaseObject(obj))
}

type X11DeviceXI2 struct {
	_ [0]func() // equal guard
	gdk.Device
}

var (
	_ gdk.Devicer = (*X11DeviceXI2)(nil)
)

func classInitX11DeviceXI2er(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapX11DeviceXI2(obj *externglib.Object) *X11DeviceXI2 {
	return &X11DeviceXI2{
		Device: gdk.Device{
			Object: obj,
		},
	}
}

func marshalX11DeviceXI2(p uintptr) (interface{}, error) {
	return wrapX11DeviceXI2(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
