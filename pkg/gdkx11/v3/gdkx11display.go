// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeX11Display returns the GType for the type X11Display.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeX11Display() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("GdkX11", "X11Display").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalX11Display)
	return gtype
}

// X11RegisterStandardEventType registers interest in receiving extension events
// with type codes between event_base and event_base + n_events - 1. The
// registered events must have the window field in the same place as core X
// events (this is not the case for e.g. XKB extension events).
//
// If an event type is registered, events of this type will go through global
// and window-specific filters (see gdk_window_add_filter()). Unregistered
// events will only go through global filters. GDK may register the events of
// some X extensions on its own.
//
// This function should only be needed in unusual circumstances, e.g. when
// filtering XInput extension events on the root window.
//
// The function takes the following parameters:
//
//    - display: Display.
//    - eventBase: first event type code to register.
//    - nEvents: number of event type codes to register.
//
func X11RegisterStandardEventType(display *X11Display, eventBase, nEvents int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(eventBase)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(nEvents)

	_info := girepository.MustFind("GdkX11", "x11_register_standard_event_type")
	_info.Invoke(_args[:], nil)

	runtime.KeepAlive(display)
	runtime.KeepAlive(eventBase)
	runtime.KeepAlive(nEvents)
}

// X11SetSmClientID sets the SM_CLIENT_ID property on the application’s leader
// window so that the window manager can save the application’s state using the
// X11R6 ICCCM session management protocol.
//
// See the X Session Management Library documentation for more information on
// session management and the Inter-Client Communication Conventions Manual.
//
// The function takes the following parameters:
//
//    - smClientId (optional): client id assigned by the session manager when the
//      connection was opened, or NULL to remove the property.
//
func X11SetSmClientID(smClientId string) {
	var _args [1]girepository.Argument

	if smClientId != "" {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(smClientId)))
		defer C.free(unsafe.Pointer(_args[0]))
	}

	_info := girepository.MustFind("GdkX11", "x11_set_sm_client_id")
	_info.Invoke(_args[:], nil)

	runtime.KeepAlive(smClientId)
}

type X11Display struct {
	_ [0]func() // equal guard
	gdk.Display
}

var (
	_ coreglib.Objector = (*X11Display)(nil)
)

func wrapX11Display(obj *coreglib.Object) *X11Display {
	return &X11Display{
		Display: gdk.Display{
			Object: obj,
		},
	}
}

func marshalX11Display(p uintptr) (interface{}, error) {
	return wrapX11Display(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ErrorTrapPop pops the error trap pushed by gdk_x11_display_error_trap_push().
// Will XSync() if necessary and will always block until the error is known to
// have occurred or not occurred, so the error code can be returned.
//
// If you don’t need to use the return value,
// gdk_x11_display_error_trap_pop_ignored() would be more efficient.
//
// See gdk_error_trap_pop() for the all-displays-at-once equivalent.
//
// The function returns the following values:
//
//    - gint: x error code or 0 on success.
//
func (display *X11Display) ErrorTrapPop() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_gret := _info.InvokeClassMethod("error_trap_pop", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(display)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ErrorTrapPopIgnored pops the error trap pushed by
// gdk_x11_display_error_trap_push(). Does not block to see if an error
// occurred; merely records the range of requests to ignore errors for, and
// ignores those errors if they arrive asynchronously.
//
// See gdk_error_trap_pop_ignored() for the all-displays-at-once equivalent.
func (display *X11Display) ErrorTrapPopIgnored() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("error_trap_pop_ignored", _args[:], nil)

	runtime.KeepAlive(display)
}

// ErrorTrapPush begins a range of X requests on display for which X error
// events will be ignored. Unignored errors (when no trap is pushed) will abort
// the application. Use gdk_x11_display_error_trap_pop() or
// gdk_x11_display_error_trap_pop_ignored()to lift a trap pushed with this
// function.
//
// See also gdk_error_trap_push() to push a trap on all displays.
func (display *X11Display) ErrorTrapPush() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("error_trap_push", _args[:], nil)

	runtime.KeepAlive(display)
}

// StartupNotificationID gets the startup notification ID for a display.
//
// The function returns the following values:
//
//    - utf8: startup notification ID for display.
//
func (display *X11Display) StartupNotificationID() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_gret := _info.InvokeClassMethod("get_startup_notification_id", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(display)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UserTime returns the timestamp of the last user interaction on display. The
// timestamp is taken from events caused by user interaction such as key presses
// or pointer movements. See gdk_x11_window_set_user_time().
//
// The function returns the following values:
//
//    - guint32: timestamp of the last user interaction.
//
func (display *X11Display) UserTime() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_gret := _info.InvokeClassMethod("get_user_time", _args[:], nil)
	_cret := *(*C.guint32)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(display)

	var _guint32 uint32 // out

	_guint32 = uint32(*(*C.guint32)(unsafe.Pointer(&_cret)))

	return _guint32
}

// Grab: call XGrabServer() on display. To ungrab the display again, use
// gdk_x11_display_ungrab().
//
// gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.
func (display *X11Display) Grab() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("grab", _args[:], nil)

	runtime.KeepAlive(display)
}

// SetCursorTheme sets the cursor theme from which the images for cursor should
// be taken.
//
// If the windowing system supports it, existing cursors created with
// gdk_cursor_new(), gdk_cursor_new_for_display() and gdk_cursor_new_from_name()
// are updated to reflect the theme change. Custom cursors constructed with
// gdk_cursor_new_from_pixbuf() will have to be handled by the application (GTK+
// applications can learn about cursor theme changes by listening for change
// notification for the corresponding Setting).
//
// The function takes the following parameters:
//
//    - theme (optional): name of the cursor theme to use, or NULL to unset a
//      previously set value.
//    - size: cursor size to use, or 0 to keep the previous size.
//
func (display *X11Display) SetCursorTheme(theme string, size int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	if theme != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(theme)))
		defer C.free(unsafe.Pointer(_args[1]))
	}
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(size)

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("set_cursor_theme", _args[:], nil)

	runtime.KeepAlive(display)
	runtime.KeepAlive(theme)
	runtime.KeepAlive(size)
}

// SetStartupNotificationID sets the startup notification ID for a display.
//
// This is usually taken from the value of the DESKTOP_STARTUP_ID environment
// variable, but in some cases (such as the application not being launched using
// exec()) it can come from other sources.
//
// If the ID contains the string "_TIME" then the portion following that string
// is taken to be the X11 timestamp of the event that triggered the application
// to be launched and the GDK current event time is set accordingly.
//
// The startup ID is also what is used to signal that the startup is complete
// (for example, when opening a window or when calling
// gdk_notify_startup_complete()).
//
// The function takes the following parameters:
//
//    - startupId: startup notification ID (must be valid utf8).
//
func (display *X11Display) SetStartupNotificationID(startupId string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(startupId)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("set_startup_notification_id", _args[:], nil)

	runtime.KeepAlive(display)
	runtime.KeepAlive(startupId)
}

// SetWindowScale forces a specific window scale for all windows on this
// display, instead of using the default or user configured scale. This is can
// be used to disable scaling support by setting scale to 1, or to
// programmatically set the window scale.
//
// Once the scale is set by this call it will not change in response to later
// user configuration changes.
//
// The function takes the following parameters:
//
//    - scale: new scale value.
//
func (display *X11Display) SetWindowScale(scale int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(scale)

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("set_window_scale", _args[:], nil)

	runtime.KeepAlive(display)
	runtime.KeepAlive(scale)
}

// Ungrab display after it has been grabbed with gdk_x11_display_grab().
func (display *X11Display) Ungrab() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_info := girepository.MustFind("GdkX11", "X11Display")
	_info.InvokeClassMethod("ungrab", _args[:], nil)

	runtime.KeepAlive(display)
}
