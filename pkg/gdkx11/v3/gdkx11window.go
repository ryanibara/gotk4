// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeX11Window = coreglib.Type(C.gdk_x11_window_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11Window, F: marshalX11Window},
	})
}

// X11GetServerTime: routine to get the current X server time stamp.
//
// The function takes the following parameters:
//
//    - window used for communication with the server. The window must have
//      GDK_PROPERTY_CHANGE_MASK in its events mask or a hang will result.
//
// The function returns the following values:
//
//    - guint32: time stamp.
//
func X11GetServerTime(window *X11Window) uint32 {
	var _arg1 *C.GdkWindow // out
	var _cret C.guint32    // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_x11_get_server_time(_arg1)
	runtime.KeepAlive(window)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

type X11Window struct {
	_ [0]func() // equal guard
	gdk.Window
}

var (
	_ gdk.Windower = (*X11Window)(nil)
)

func wrapX11Window(obj *coreglib.Object) *X11Window {
	return &X11Window{
		Window: gdk.Window{
			Object: obj,
		},
	}
}

func marshalX11Window(p uintptr) (interface{}, error) {
	return wrapX11Window(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
