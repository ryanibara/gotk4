// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gdk/gdkx.h>
// #include <glib-object.h>
// extern void _gotk4_gdkx113_X11Screen_ConnectWindowManagerChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeX11Screen = coreglib.Type(C.gdk_x11_screen_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11Screen, F: marshalX11Screen},
	})
}

// X11GetDefaultScreen gets the default GTK+ screen number.
//
// The function returns the following values:
//
//    - gint returns the screen number specified by the --display command line
//      option or the DISPLAY environment variable when gdk_init() calls
//      XOpenDisplay().
//
func X11GetDefaultScreen() int {
	var _cret C.gint // in

	_cret = C.gdk_x11_get_default_screen()

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

type X11Screen struct {
	_ [0]func() // equal guard
	gdk.Screen
}

var (
	_ coreglib.Objector = (*X11Screen)(nil)
)

func wrapX11Screen(obj *coreglib.Object) *X11Screen {
	return &X11Screen{
		Screen: gdk.Screen{
			Object: obj,
		},
	}
}

func marshalX11Screen(p uintptr) (interface{}, error) {
	return wrapX11Screen(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (screen *X11Screen) ConnectWindowManagerChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(screen, "window-manager-changed", false, unsafe.Pointer(C._gotk4_gdkx113_X11Screen_ConnectWindowManagerChanged), f)
}
