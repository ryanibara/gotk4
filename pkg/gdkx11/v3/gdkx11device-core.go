// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"sync"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gdk-x11-3.0 gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_x11_device_core_get_type()), F: marshalX11DeviceCorer},
	})
}

type X11DeviceCore struct {
	gdk.Device

	_ [0]func()     // equal guard
	_ [0]sync.Mutex // copy guard
}

var (
	_ gdk.Devicer = (*X11DeviceCore)(nil)
)

func wrapX11DeviceCore(obj *externglib.Object) *X11DeviceCore {
	return &X11DeviceCore{
		Device: gdk.Device{
			Object: obj,
		},
	}
}

func marshalX11DeviceCorer(p uintptr) (interface{}, error) {
	return wrapX11DeviceCore(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
