// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeX11DeviceManagerCore = coreglib.Type(C.gdk_x11_device_manager_core_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11DeviceManagerCore, F: marshalX11DeviceManagerCore},
	})
}

// X11DeviceManagerCoreOverrider contains methods that are overridable.
type X11DeviceManagerCoreOverrider interface {
}

type X11DeviceManagerCore struct {
	_ [0]func() // equal guard
	gdk.DeviceManager
}

var (
	_ gdk.DeviceManagerer = (*X11DeviceManagerCore)(nil)
)

func initClassX11DeviceManagerCore(gclass unsafe.Pointer, goval any) {
}

func wrapX11DeviceManagerCore(obj *coreglib.Object) *X11DeviceManagerCore {
	return &X11DeviceManagerCore{
		DeviceManager: gdk.DeviceManager{
			Object: obj,
		},
	}
}

func marshalX11DeviceManagerCore(p uintptr) (interface{}, error) {
	return wrapX11DeviceManagerCore(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
