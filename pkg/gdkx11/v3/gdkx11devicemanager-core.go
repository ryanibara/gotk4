// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gdk/gdkx.h>
// #include <glib-object.h>
import "C"

// glib.Type values for gdkx11devicemanager-core.go.
var GTypeX11DeviceManagerCore = externglib.Type(C.gdk_x11_device_manager_core_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeX11DeviceManagerCore, F: marshalX11DeviceManagerCore},
	})
}

// X11DeviceManagerCoreOverrider contains methods that are overridable.
type X11DeviceManagerCoreOverrider interface {
	externglib.Objector
}

// WrapX11DeviceManagerCoreOverrider wraps the X11DeviceManagerCoreOverrider
// interface implementation to access the instance methods.
func WrapX11DeviceManagerCoreOverrider(obj X11DeviceManagerCoreOverrider) *X11DeviceManagerCore {
	return wrapX11DeviceManagerCore(externglib.BaseObject(obj))
}

type X11DeviceManagerCore struct {
	_ [0]func() // equal guard
	gdk.DeviceManager
}

var (
	_ gdk.DeviceManagerer = (*X11DeviceManagerCore)(nil)
)

func classInitX11DeviceManagerCorer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapX11DeviceManagerCore(obj *externglib.Object) *X11DeviceManagerCore {
	return &X11DeviceManagerCore{
		DeviceManager: gdk.DeviceManager{
			Object: obj,
		},
	}
}

func marshalX11DeviceManagerCore(p uintptr) (interface{}, error) {
	return wrapX11DeviceManagerCore(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
