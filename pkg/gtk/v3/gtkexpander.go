// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Expander_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk3_ExpanderClass_activate(GtkExpander*);
// void _gotk4_gtk3_Expander_virtual_activate(void* fnptr, GtkExpander* arg0) {
//   ((void (*)(GtkExpander*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeExpander = coreglib.Type(C.gtk_expander_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeExpander, F: marshalExpander},
	})
}

// ExpanderOverrides contains methods that are overridable.
type ExpanderOverrides struct {
	Activate func()
}

func defaultExpanderOverrides(v *Expander) ExpanderOverrides {
	return ExpanderOverrides{
		Activate: v.activate,
	}
}

// Expander allows the user to hide or show its child by clicking on an expander
// triangle similar to the triangles used in a TreeView.
//
// Normally you use an expander as you would use any other descendant of Bin;
// you create the child widget and use gtk_container_add() to add it to the
// expander. When the expander is toggled, it will take care of showing and
// hiding the child automatically.
//
//
// Special Usage
//
// There are situations in which you may prefer to show and hide the expanded
// widget yourself, such as when you want to actually create the widget at
// expansion time. In this case, create a Expander but do not add a child to it.
// The expander widget has an Expander:expanded property which can be used to
// monitor its expansion state. You should watch this property with a signal
// connection as follows:
//
//    expander
//    ├── title
//    │   ├── arrow
//    │   ╰── <label widget>
//    ╰── <child>
//
// GtkExpander has three CSS nodes, the main node with the name expander, a
// subnode with name title and node below it with name arrow. The arrow of an
// expander that is showing its child gets the :checked pseudoclass added to it.
type Expander struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*Expander)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Expander, *ExpanderClass, ExpanderOverrides](
		GTypeExpander,
		initExpanderClass,
		wrapExpander,
		defaultExpanderOverrides,
	)
}

func initExpanderClass(gclass unsafe.Pointer, overrides ExpanderOverrides, classInitFunc func(*ExpanderClass)) {
	pclass := (*C.GtkExpanderClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeExpander))))

	if overrides.Activate != nil {
		pclass.activate = (*[0]byte)(C._gotk4_gtk3_ExpanderClass_activate)
	}

	if classInitFunc != nil {
		class := (*ExpanderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapExpander(obj *coreglib.Object) *Expander {
	return &Expander{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalExpander(p uintptr) (interface{}, error) {
	return wrapExpander(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (expander *Expander) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(expander, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Expander_ConnectActivate), f)
}

func (expander *Expander) activate() {
	gclass := (*C.GtkExpanderClass)(coreglib.PeekParentClass(expander))
	fnarg := gclass.activate

	var _arg0 *C.GtkExpander // out

	_arg0 = (*C.GtkExpander)(unsafe.Pointer(coreglib.InternObject(expander).Native()))

	C._gotk4_gtk3_Expander_virtual_activate(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(expander)
}

// ExpanderClass: instance of this type is always passed by reference.
type ExpanderClass struct {
	*expanderClass
}

// expanderClass is the struct that's finalized.
type expanderClass struct {
	native *C.GtkExpanderClass
}

// ParentClass: parent class.
func (e *ExpanderClass) ParentClass() *BinClass {
	valptr := &e.native.parent_class
	var _v *BinClass // out
	_v = (*BinClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
