// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkstacksidebar.go.
var GTypeStackSidebar = coreglib.Type(C.gtk_stack_sidebar_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeStackSidebar, F: marshalStackSidebar},
	})
}

// StackSidebarOverrider contains methods that are overridable.
type StackSidebarOverrider interface {
}

// StackSidebar enables you to quickly and easily provide a consistent "sidebar"
// object for your user interface.
//
// In order to use a GtkStackSidebar, you simply use a GtkStack to organize your
// UI flow, and add the sidebar to your sidebar area. You can use
// gtk_stack_sidebar_set_stack() to connect the StackSidebar to the Stack.
//
//
// CSS nodes
//
// GtkStackSidebar has a single CSS node with name stacksidebar and style class
// .sidebar.
//
// When circumstances require it, GtkStackSidebar adds the .needs-attention
// style class to the widgets representing the stack pages.
type StackSidebar struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*StackSidebar)(nil)
)

func classInitStackSidebarrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStackSidebar(obj *coreglib.Object) *StackSidebar {
	return &StackSidebar{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalStackSidebar(p uintptr) (interface{}, error) {
	return wrapStackSidebar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewStackSidebar creates a new sidebar.
//
// The function returns the following values:
//
//    - stackSidebar: new StackSidebar.
//
func NewStackSidebar() *StackSidebar {
	_gret := girepository.MustFind("Gtk", "StackSidebar").InvokeMethod("new_StackSidebar", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _stackSidebar *StackSidebar // out

	_stackSidebar = wrapStackSidebar(coreglib.Take(unsafe.Pointer(_cret)))

	return _stackSidebar
}

// Stack retrieves the stack. See gtk_stack_sidebar_set_stack().
//
// The function returns the following values:
//
//    - stack (optional): associated Stack or NULL if none has been set
//      explicitly.
//
func (sidebar *StackSidebar) Stack() *Stack {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))

	_gret := girepository.MustFind("Gtk", "StackSidebar").InvokeMethod("get_stack", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _stack *Stack // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_stack = wrapStack(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _stack
}

// SetStack: set the Stack associated with this StackSidebar.
//
// The sidebar widget will automatically update according to the order (packing)
// and items within the given Stack.
//
// The function takes the following parameters:
//
//    - stack: Stack.
//
func (sidebar *StackSidebar) SetStack(stack *Stack) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(stack).Native()))

	girepository.MustFind("Gtk", "StackSidebar").InvokeMethod("set_stack", _args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(stack)
}
