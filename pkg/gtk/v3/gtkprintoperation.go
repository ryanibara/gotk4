// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_PrintOperation_ConnectUpdateCustomWidget(gpointer, GtkWidget*, GtkPageSetup*, GtkPrintSettings*, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectStatusChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectRequestPageSetup(gpointer, GtkPrintContext*, gint, GtkPageSetup*, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectEndPrint(gpointer, GtkPrintContext*, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectDrawPage(gpointer, GtkPrintContext*, gint, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectDone(gpointer, GtkPrintOperationResult, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectCustomWidgetApply(gpointer, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_PrintOperation_ConnectBeginPrint(gpointer, GtkPrintContext*, guintptr);
// extern void _gotk4_gtk3_PrintOperationClass_update_custom_widget(GtkPrintOperation*, GtkWidget*, GtkPageSetup*, GtkPrintSettings*);
// extern void _gotk4_gtk3_PrintOperationClass_status_changed(GtkPrintOperation*);
// extern void _gotk4_gtk3_PrintOperationClass_request_page_setup(GtkPrintOperation*, GtkPrintContext*, gint, GtkPageSetup*);
// extern void _gotk4_gtk3_PrintOperationClass_end_print(GtkPrintOperation*, GtkPrintContext*);
// extern void _gotk4_gtk3_PrintOperationClass_draw_page(GtkPrintOperation*, GtkPrintContext*, gint);
// extern void _gotk4_gtk3_PrintOperationClass_done(GtkPrintOperation*, GtkPrintOperationResult);
// extern void _gotk4_gtk3_PrintOperationClass_custom_widget_apply(GtkPrintOperation*, GtkWidget*);
// extern void _gotk4_gtk3_PrintOperationClass_begin_print(GtkPrintOperation*, GtkPrintContext*);
// extern gboolean _gotk4_gtk3_PrintOperation_ConnectPreview(gpointer, GtkPrintOperationPreview*, GtkPrintContext*, GtkWindow*, guintptr);
// extern gboolean _gotk4_gtk3_PrintOperation_ConnectPaginate(gpointer, GtkPrintContext*, guintptr);
// extern gboolean _gotk4_gtk3_PrintOperationClass_preview(GtkPrintOperation*, GtkPrintOperationPreview*, GtkPrintContext*, GtkWindow*);
// extern gboolean _gotk4_gtk3_PrintOperationClass_paginate(GtkPrintOperation*, GtkPrintContext*);
// extern GObject _gotk4_gtk3_PrintOperation_ConnectCreateCustomWidget(gpointer, guintptr);
// gboolean _gotk4_gtk3_PrintOperation_virtual_paginate(void* fnptr, GtkPrintOperation* arg0, GtkPrintContext* arg1) {
//   return ((gboolean (*)(GtkPrintOperation*, GtkPrintContext*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gtk3_PrintOperation_virtual_preview(void* fnptr, GtkPrintOperation* arg0, GtkPrintOperationPreview* arg1, GtkPrintContext* arg2, GtkWindow* arg3) {
//   return ((gboolean (*)(GtkPrintOperation*, GtkPrintOperationPreview*, GtkPrintContext*, GtkWindow*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_PrintOperation_virtual_begin_print(void* fnptr, GtkPrintOperation* arg0, GtkPrintContext* arg1) {
//   ((void (*)(GtkPrintOperation*, GtkPrintContext*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_PrintOperation_virtual_custom_widget_apply(void* fnptr, GtkPrintOperation* arg0, GtkWidget* arg1) {
//   ((void (*)(GtkPrintOperation*, GtkWidget*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_PrintOperation_virtual_done(void* fnptr, GtkPrintOperation* arg0, GtkPrintOperationResult arg1) {
//   ((void (*)(GtkPrintOperation*, GtkPrintOperationResult))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_PrintOperation_virtual_draw_page(void* fnptr, GtkPrintOperation* arg0, GtkPrintContext* arg1, gint arg2) {
//   ((void (*)(GtkPrintOperation*, GtkPrintContext*, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_PrintOperation_virtual_end_print(void* fnptr, GtkPrintOperation* arg0, GtkPrintContext* arg1) {
//   ((void (*)(GtkPrintOperation*, GtkPrintContext*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_PrintOperation_virtual_request_page_setup(void* fnptr, GtkPrintOperation* arg0, GtkPrintContext* arg1, gint arg2, GtkPageSetup* arg3) {
//   ((void (*)(GtkPrintOperation*, GtkPrintContext*, gint, GtkPageSetup*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_PrintOperation_virtual_status_changed(void* fnptr, GtkPrintOperation* arg0) {
//   ((void (*)(GtkPrintOperation*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_PrintOperation_virtual_update_custom_widget(void* fnptr, GtkPrintOperation* arg0, GtkWidget* arg1, GtkPageSetup* arg2, GtkPrintSettings* arg3) {
//   ((void (*)(GtkPrintOperation*, GtkWidget*, GtkPageSetup*, GtkPrintSettings*))(fnptr))(arg0, arg1, arg2, arg3);
// };
import "C"

// GType values.
var (
	GTypePrintError           = coreglib.Type(C.gtk_print_error_get_type())
	GTypePrintOperationAction = coreglib.Type(C.gtk_print_operation_action_get_type())
	GTypePrintOperationResult = coreglib.Type(C.gtk_print_operation_result_get_type())
	GTypePrintStatus          = coreglib.Type(C.gtk_print_status_get_type())
	GTypePrintOperation       = coreglib.Type(C.gtk_print_operation_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePrintError, F: marshalPrintError},
		coreglib.TypeMarshaler{T: GTypePrintOperationAction, F: marshalPrintOperationAction},
		coreglib.TypeMarshaler{T: GTypePrintOperationResult, F: marshalPrintOperationResult},
		coreglib.TypeMarshaler{T: GTypePrintStatus, F: marshalPrintStatus},
		coreglib.TypeMarshaler{T: GTypePrintOperation, F: marshalPrintOperation},
	})
}

// PrintError: error codes that identify various errors that can occur while
// using the GTK+ printing support.
type PrintError C.gint

const (
	// PrintErrorGeneral: unspecified error occurred.
	PrintErrorGeneral PrintError = iota
	// PrintErrorInternalError: internal error occurred.
	PrintErrorInternalError
	// PrintErrorNOMEM: memory allocation failed.
	PrintErrorNOMEM
	// PrintErrorInvalidFile: error occurred while loading a page setup or paper
	// size from a key file.
	PrintErrorInvalidFile
)

func marshalPrintError(p uintptr) (interface{}, error) {
	return PrintError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintError.
func (p PrintError) String() string {
	switch p {
	case PrintErrorGeneral:
		return "General"
	case PrintErrorInternalError:
		return "InternalError"
	case PrintErrorNOMEM:
		return "NOMEM"
	case PrintErrorInvalidFile:
		return "InvalidFile"
	default:
		return fmt.Sprintf("PrintError(%d)", p)
	}
}

// PrintOperationAction: action parameter to gtk_print_operation_run()
// determines what action the print operation should perform.
type PrintOperationAction C.gint

const (
	// PrintOperationActionPrintDialog: show the print dialog.
	PrintOperationActionPrintDialog PrintOperationAction = iota
	// PrintOperationActionPrint: start to print without showing the print
	// dialog, based on the current print settings.
	PrintOperationActionPrint
	// PrintOperationActionPreview: show the print preview.
	PrintOperationActionPreview
	// PrintOperationActionExport: export to a file. This requires the
	// export-filename property to be set.
	PrintOperationActionExport
)

func marshalPrintOperationAction(p uintptr) (interface{}, error) {
	return PrintOperationAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintOperationAction.
func (p PrintOperationAction) String() string {
	switch p {
	case PrintOperationActionPrintDialog:
		return "PrintDialog"
	case PrintOperationActionPrint:
		return "Print"
	case PrintOperationActionPreview:
		return "Preview"
	case PrintOperationActionExport:
		return "Export"
	default:
		return fmt.Sprintf("PrintOperationAction(%d)", p)
	}
}

// PrintOperationResult: value of this type is returned by
// gtk_print_operation_run().
type PrintOperationResult C.gint

const (
	// PrintOperationResultError: error has occurred.
	PrintOperationResultError PrintOperationResult = iota
	// PrintOperationResultApply: print settings should be stored.
	PrintOperationResultApply
	// PrintOperationResultCancel: print operation has been canceled, the print
	// settings should not be stored.
	PrintOperationResultCancel
	// PrintOperationResultInProgress: print operation is not complete yet. This
	// value will only be returned when running asynchronously.
	PrintOperationResultInProgress
)

func marshalPrintOperationResult(p uintptr) (interface{}, error) {
	return PrintOperationResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintOperationResult.
func (p PrintOperationResult) String() string {
	switch p {
	case PrintOperationResultError:
		return "Error"
	case PrintOperationResultApply:
		return "Apply"
	case PrintOperationResultCancel:
		return "Cancel"
	case PrintOperationResultInProgress:
		return "InProgress"
	default:
		return fmt.Sprintf("PrintOperationResult(%d)", p)
	}
}

// PrintStatus status gives a rough indication of the completion of a running
// print operation.
type PrintStatus C.gint

const (
	// PrintStatusInitial: printing has not started yet; this status is set
	// initially, and while the print dialog is shown.
	PrintStatusInitial PrintStatus = iota
	// PrintStatusPreparing: this status is set while the begin-print signal is
	// emitted and during pagination.
	PrintStatusPreparing
	// PrintStatusGeneratingData: this status is set while the pages are being
	// rendered.
	PrintStatusGeneratingData
	// PrintStatusSendingData: print job is being sent off to the printer.
	PrintStatusSendingData
	// PrintStatusPending: print job has been sent to the printer, but is not
	// printed for some reason, e.g. the printer may be stopped.
	PrintStatusPending
	// PrintStatusPendingIssue: some problem has occurred during printing, e.g.
	// a paper jam.
	PrintStatusPendingIssue
	// PrintStatusPrinting: printer is processing the print job.
	PrintStatusPrinting
	// PrintStatusFinished: printing has been completed successfully.
	PrintStatusFinished
	// PrintStatusFinishedAborted: printing has been aborted.
	PrintStatusFinishedAborted
)

func marshalPrintStatus(p uintptr) (interface{}, error) {
	return PrintStatus(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintStatus.
func (p PrintStatus) String() string {
	switch p {
	case PrintStatusInitial:
		return "Initial"
	case PrintStatusPreparing:
		return "Preparing"
	case PrintStatusGeneratingData:
		return "GeneratingData"
	case PrintStatusSendingData:
		return "SendingData"
	case PrintStatusPending:
		return "Pending"
	case PrintStatusPendingIssue:
		return "PendingIssue"
	case PrintStatusPrinting:
		return "Printing"
	case PrintStatusFinished:
		return "Finished"
	case PrintStatusFinishedAborted:
		return "FinishedAborted"
	default:
		return fmt.Sprintf("PrintStatus(%d)", p)
	}
}

// PageSetupDoneFunc: type of function that is passed to
// gtk_print_run_page_setup_dialog_async().
//
// This function will be called when the page setup dialog is dismissed, and
// also serves as destroy notify for data.
type PageSetupDoneFunc func(pageSetup *PageSetup)

// PrintOperationOverrides contains methods that are overridable.
type PrintOperationOverrides struct {
	// The function takes the following parameters:
	//
	BeginPrint func(context *PrintContext)
	// The function takes the following parameters:
	//
	CustomWidgetApply func(widget Widgetter)
	// The function takes the following parameters:
	//
	Done func(result PrintOperationResult)
	// The function takes the following parameters:
	//
	//    - context
	//    - pageNr
	//
	DrawPage func(context *PrintContext, pageNr int)
	// The function takes the following parameters:
	//
	EndPrint func(context *PrintContext)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	Paginate func(context *PrintContext) bool
	// The function takes the following parameters:
	//
	//    - preview
	//    - context
	//    - parent
	//
	// The function returns the following values:
	//
	Preview func(preview PrintOperationPreviewer, context *PrintContext, parent *Window) bool
	// The function takes the following parameters:
	//
	//    - context
	//    - pageNr
	//    - setup
	//
	RequestPageSetup func(context *PrintContext, pageNr int, setup *PageSetup)
	StatusChanged    func()
	// The function takes the following parameters:
	//
	//    - widget
	//    - setup
	//    - settings
	//
	UpdateCustomWidget func(widget Widgetter, setup *PageSetup, settings *PrintSettings)
}

func defaultPrintOperationOverrides(v *PrintOperation) PrintOperationOverrides {
	return PrintOperationOverrides{
		BeginPrint:         v.beginPrint,
		CustomWidgetApply:  v.customWidgetApply,
		Done:               v.done,
		DrawPage:           v.drawPage,
		EndPrint:           v.endPrint,
		Paginate:           v.paginate,
		Preview:            v.preview,
		RequestPageSetup:   v.requestPageSetup,
		StatusChanged:      v.statusChanged,
		UpdateCustomWidget: v.updateCustomWidget,
	}
}

// PrintOperation is the high-level, portable printing API. It looks a bit
// different than other GTK+ dialogs such as the FileChooser, since some
// platforms don’t expose enough infrastructure to implement a good print
// dialog. On such platforms, GtkPrintOperation uses the native print dialog. On
// platforms which do not provide a native print dialog, GTK+ uses its own, see
// PrintUnixDialog.
//
// The typical way to use the high-level printing API is to create a
// GtkPrintOperation object with gtk_print_operation_new() when the user selects
// to print. Then you set some properties on it, e.g. the page size, any
// PrintSettings from previous print operations, the number of pages, the
// current page, etc.
//
// Then you start the print operation by calling gtk_print_operation_run(). It
// will then show a dialog, let the user select a printer and options. When the
// user finished the dialog various signals will be emitted on the
// PrintOperation, the main one being PrintOperation::draw-page, which you are
// supposed to catch and render the page on the provided PrintContext using
// Cairo.
//
// The high-level printing API
//
//    static GtkPrintSettings *settings = NULL;
//
//    static void
//    do_print (void)
//    {
//      GtkPrintOperation *print;
//      GtkPrintOperationResult res;
//
//      print = gtk_print_operation_new ();
//
//      if (settings != NULL)
//        gtk_print_operation_set_print_settings (print, settings);
//
//      g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
//      g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);
//
//      res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
//                                     GTK_WINDOW (main_window), NULL);
//
//      if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
//        {
//          if (settings != NULL)
//            g_object_unref (settings);
//          settings = g_object_ref (gtk_print_operation_get_print_settings (print));
//        }
//
//      g_object_unref (print);
//    }
//
// By default GtkPrintOperation uses an external application to do print
// preview. To implement a custom print preview, an application must connect to
// the preview signal. The functions gtk_print_operation_preview_render_page(),
// gtk_print_operation_preview_end_preview() and
// gtk_print_operation_preview_is_selected() are useful when implementing a
// print preview.
type PrintOperation struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PrintOperationPreview
}

var (
	_ coreglib.Objector = (*PrintOperation)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PrintOperation, *PrintOperationClass, PrintOperationOverrides](
		GTypePrintOperation,
		initPrintOperationClass,
		wrapPrintOperation,
		defaultPrintOperationOverrides,
	)
}

func initPrintOperationClass(gclass unsafe.Pointer, overrides PrintOperationOverrides, classInitFunc func(*PrintOperationClass)) {
	pclass := (*C.GtkPrintOperationClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypePrintOperation))))

	if overrides.BeginPrint != nil {
		pclass.begin_print = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_begin_print)
	}

	if overrides.CustomWidgetApply != nil {
		pclass.custom_widget_apply = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_custom_widget_apply)
	}

	if overrides.Done != nil {
		pclass.done = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_done)
	}

	if overrides.DrawPage != nil {
		pclass.draw_page = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_draw_page)
	}

	if overrides.EndPrint != nil {
		pclass.end_print = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_end_print)
	}

	if overrides.Paginate != nil {
		pclass.paginate = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_paginate)
	}

	if overrides.Preview != nil {
		pclass.preview = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_preview)
	}

	if overrides.RequestPageSetup != nil {
		pclass.request_page_setup = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_request_page_setup)
	}

	if overrides.StatusChanged != nil {
		pclass.status_changed = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_status_changed)
	}

	if overrides.UpdateCustomWidget != nil {
		pclass.update_custom_widget = (*[0]byte)(C._gotk4_gtk3_PrintOperationClass_update_custom_widget)
	}

	if classInitFunc != nil {
		class := (*PrintOperationClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPrintOperation(obj *coreglib.Object) *PrintOperation {
	return &PrintOperation{
		Object: obj,
		PrintOperationPreview: PrintOperationPreview{
			Object: obj,
		},
	}
}

func marshalPrintOperation(p uintptr) (interface{}, error) {
	return wrapPrintOperation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectBeginPrint is emitted after the user has finished changing print
// settings in the dialog, before the actual rendering starts.
//
// A typical use for ::begin-print is to use the parameters from the
// PrintContext and paginate the document accordingly, and then set the number
// of pages with gtk_print_operation_set_n_pages().
func (op *PrintOperation) ConnectBeginPrint(f func(context *PrintContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "begin-print", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectBeginPrint), f)
}

// ConnectCreateCustomWidget is emitted when displaying the print dialog. If you
// return a widget in a handler for this signal it will be added to a custom tab
// in the print dialog. You typically return a container widget with multiple
// widgets in it.
//
// The print dialog owns the returned widget, and its lifetime is not controlled
// by the application. However, the widget is guaranteed to stay around until
// the PrintOperation::custom-widget-apply signal is emitted on the operation.
// Then you can read out any information you need from the widgets.
func (op *PrintOperation) ConnectCreateCustomWidget(f func() (object *coreglib.Object)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "create-custom-widget", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectCreateCustomWidget), f)
}

// ConnectCustomWidgetApply is emitted right before PrintOperation::begin-print
// if you added a custom widget in the PrintOperation::create-custom-widget
// handler. When you get this signal you should read the information from the
// custom widgets, as the widgets are not guaraneed to be around at a later
// time.
func (op *PrintOperation) ConnectCustomWidgetApply(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "custom-widget-apply", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectCustomWidgetApply), f)
}

// ConnectDone is emitted when the print operation run has finished doing
// everything required for printing.
//
// result gives you information about what happened during the run. If result is
// GTK_PRINT_OPERATION_RESULT_ERROR then you can call
// gtk_print_operation_get_error() for more information.
//
// If you enabled print status tracking then gtk_print_operation_is_finished()
// may still return FALSE after PrintOperation::done was emitted.
func (op *PrintOperation) ConnectDone(f func(result PrintOperationResult)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "done", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectDone), f)
}

// ConnectDrawPage is emitted for every page that is printed. The signal handler
// must render the page_nr's page onto the cairo context obtained from context
// using gtk_print_context_get_cairo_context().
//
//    static void
//    draw_page (GtkPrintOperation *operation,
//               GtkPrintContext   *context,
//               gint               page_nr,
//               gpointer           user_data)
//    {
//      cairo_t *cr;
//      PangoLayout *layout;
//      gdouble width, text_height;
//      gint layout_height;
//      PangoFontDescription *desc;
//
//      cr = gtk_print_context_get_cairo_context (context);
//      width = gtk_print_context_get_width (context);
//
//      cairo_rectangle (cr, 0, 0, width, HEADER_HEIGHT);
//
//      cairo_set_source_rgb (cr, 0.8, 0.8, 0.8);
//      cairo_fill (cr);
//
//      layout = gtk_print_context_create_pango_layout (context);
//
//      desc = pango_font_description_from_string ("sans 14");
//      pango_layout_set_font_description (layout, desc);
//      pango_font_description_free (desc);
//
//      pango_layout_set_text (layout, "some text", -1);
//      pango_layout_set_width (layout, width * PANGO_SCALE);
//      pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
//
//      pango_layout_get_size (layout, NULL, &layout_height);
//      text_height = (gdouble)layout_height / PANGO_SCALE;
//
//      cairo_move_to (cr, width / 2,  (HEADER_HEIGHT - text_height) / 2);
//      pango_cairo_show_layout (cr, layout);
//
//      g_object_unref (layout);
//    }
//
// Use gtk_print_operation_set_use_full_page() and
// gtk_print_operation_set_unit() before starting the print operation to set up
// the transformation of the cairo context according to your needs.
func (op *PrintOperation) ConnectDrawPage(f func(context *PrintContext, pageNr int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "draw-page", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectDrawPage), f)
}

// ConnectEndPrint is emitted after all pages have been rendered. A handler for
// this signal can clean up any resources that have been allocated in the
// PrintOperation::begin-print handler.
func (op *PrintOperation) ConnectEndPrint(f func(context *PrintContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "end-print", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectEndPrint), f)
}

// ConnectPaginate is emitted after the PrintOperation::begin-print signal, but
// before the actual rendering starts. It keeps getting emitted until a
// connected signal handler returns TRUE.
//
// The ::paginate signal is intended to be used for paginating a document in
// small chunks, to avoid blocking the user interface for a long time. The
// signal handler should update the number of pages using
// gtk_print_operation_set_n_pages(), and return TRUE if the document has been
// completely paginated.
//
// If you don't need to do pagination in chunks, you can simply do it all in the
// ::begin-print handler, and set the number of pages from there.
func (op *PrintOperation) ConnectPaginate(f func(context *PrintContext) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "paginate", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectPaginate), f)
}

// ConnectPreview gets emitted when a preview is requested from the native
// dialog.
//
// The default handler for this signal uses an external viewer application to
// preview.
//
// To implement a custom print preview, an application must return TRUE from its
// handler for this signal. In order to use the provided context for the preview
// implementation, it must be given a suitable cairo context with
// gtk_print_context_set_cairo_context().
//
// The custom preview implementation can use
// gtk_print_operation_preview_is_selected() and
// gtk_print_operation_preview_render_page() to find pages which are selected
// for print and render them. The preview must be finished by calling
// gtk_print_operation_preview_end_preview() (typically in response to the user
// clicking a close button).
func (op *PrintOperation) ConnectPreview(f func(preview PrintOperationPreviewer, context *PrintContext, parent *Window) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "preview", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectPreview), f)
}

// ConnectRequestPageSetup is emitted once for every page that is printed, to
// give the application a chance to modify the page setup. Any changes done to
// setup will be in force only for printing this page.
func (op *PrintOperation) ConnectRequestPageSetup(f func(context *PrintContext, pageNr int, setup *PageSetup)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "request-page-setup", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectRequestPageSetup), f)
}

// ConnectStatusChanged is emitted at between the various phases of the print
// operation. See PrintStatus for the phases that are being discriminated. Use
// gtk_print_operation_get_status() to find out the current status.
func (op *PrintOperation) ConnectStatusChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "status-changed", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectStatusChanged), f)
}

// ConnectUpdateCustomWidget is emitted after change of selected printer. The
// actual page setup and print settings are passed to the custom widget, which
// can actualize itself according to this change.
func (op *PrintOperation) ConnectUpdateCustomWidget(f func(widget Widgetter, setup *PageSetup, settings *PrintSettings)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "update-custom-widget", false, unsafe.Pointer(C._gotk4_gtk3_PrintOperation_ConnectUpdateCustomWidget), f)
}

// NewPrintOperation creates a new PrintOperation.
//
// The function returns the following values:
//
//    - printOperation: new PrintOperation.
//
func NewPrintOperation() *PrintOperation {
	var _cret *C.GtkPrintOperation // in

	_cret = C.gtk_print_operation_new()

	var _printOperation *PrintOperation // out

	_printOperation = wrapPrintOperation(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printOperation
}

// Cancel cancels a running print operation. This function may be called from a
// PrintOperation::begin-print, PrintOperation::paginate or
// PrintOperation::draw-page signal handler to stop the currently running print
// operation.
func (op *PrintOperation) Cancel() {
	var _arg0 *C.GtkPrintOperation // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	C.gtk_print_operation_cancel(_arg0)
	runtime.KeepAlive(op)
}

// DrawPageFinish: signalize that drawing of particular page is complete.
//
// It is called after completion of page drawing (e.g. drawing in another
// thread). If gtk_print_operation_set_defer_drawing() was called before, then
// this function has to be called by application. In another case it is called
// by the library itself.
func (op *PrintOperation) DrawPageFinish() {
	var _arg0 *C.GtkPrintOperation // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	C.gtk_print_operation_draw_page_finish(_arg0)
	runtime.KeepAlive(op)
}

// DefaultPageSetup returns the default page setup, see
// gtk_print_operation_set_default_page_setup().
//
// The function returns the following values:
//
//    - pageSetup: default page setup.
//
func (op *PrintOperation) DefaultPageSetup() *PageSetup {
	var _arg0 *C.GtkPrintOperation // out
	var _cret *C.GtkPageSetup      // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_default_page_setup(_arg0)
	runtime.KeepAlive(op)

	var _pageSetup *PageSetup // out

	_pageSetup = wrapPageSetup(coreglib.Take(unsafe.Pointer(_cret)))

	return _pageSetup
}

// EmbedPageSetup gets the value of PrintOperation:embed-page-setup property.
//
// The function returns the following values:
//
//    - ok: whether page setup selection combos are embedded.
//
func (op *PrintOperation) EmbedPageSetup() bool {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_embed_page_setup(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Error: call this when the result of a print operation is
// GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by
// gtk_print_operation_run(), or in the PrintOperation::done signal handler. The
// returned #GError will contain more details on what went wrong.
func (op *PrintOperation) Error() error {
	var _arg0 *C.GtkPrintOperation // out
	var _cerr *C.GError            // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	C.gtk_print_operation_get_error(_arg0, &_cerr)
	runtime.KeepAlive(op)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// HasSelection gets the value of PrintOperation:has-selection property.
//
// The function returns the following values:
//
//    - ok: whether there is a selection.
//
func (op *PrintOperation) HasSelection() bool {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_has_selection(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NPagesToPrint returns the number of pages that will be printed.
//
// Note that this value is set during print preparation phase
// (GTK_PRINT_STATUS_PREPARING), so this function should never be called before
// the data generation phase (GTK_PRINT_STATUS_GENERATING_DATA). You can connect
// to the PrintOperation::status-changed signal and call
// gtk_print_operation_get_n_pages_to_print() when print status is
// GTK_PRINT_STATUS_GENERATING_DATA. This is typically used to track the
// progress of print operation.
//
// The function returns the following values:
//
//    - gint: number of pages that will be printed.
//
func (op *PrintOperation) NPagesToPrint() int {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.gint               // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_n_pages_to_print(_arg0)
	runtime.KeepAlive(op)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PrintSettings returns the current print settings.
//
// Note that the return value is NULL until either
// gtk_print_operation_set_print_settings() or gtk_print_operation_run() have
// been called.
//
// The function returns the following values:
//
//    - printSettings: current print settings of op.
//
func (op *PrintOperation) PrintSettings() *PrintSettings {
	var _arg0 *C.GtkPrintOperation // out
	var _cret *C.GtkPrintSettings  // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_print_settings(_arg0)
	runtime.KeepAlive(op)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.Take(unsafe.Pointer(_cret)))

	return _printSettings
}

// Status returns the status of the print operation. Also see
// gtk_print_operation_get_status_string().
//
// The function returns the following values:
//
//    - printStatus status of the print operation.
//
func (op *PrintOperation) Status() PrintStatus {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.GtkPrintStatus     // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_status(_arg0)
	runtime.KeepAlive(op)

	var _printStatus PrintStatus // out

	_printStatus = PrintStatus(_cret)

	return _printStatus
}

// StatusString returns a string representation of the status of the print
// operation. The string is translated and suitable for displaying the print
// status e.g. in a Statusbar.
//
// Use gtk_print_operation_get_status() to obtain a status value that is
// suitable for programmatic use.
//
// The function returns the following values:
//
//    - utf8: string representation of the status of the print operation.
//
func (op *PrintOperation) StatusString() string {
	var _arg0 *C.GtkPrintOperation // out
	var _cret *C.gchar             // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_status_string(_arg0)
	runtime.KeepAlive(op)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SupportSelection gets the value of PrintOperation:support-selection property.
//
// The function returns the following values:
//
//    - ok: whether the application supports print of selection.
//
func (op *PrintOperation) SupportSelection() bool {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_get_support_selection(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsFinished: convenience function to find out if the print operation is
// finished, either successfully (GTK_PRINT_STATUS_FINISHED) or unsuccessfully
// (GTK_PRINT_STATUS_FINISHED_ABORTED).
//
// Note: when you enable print status tracking the print operation can be in a
// non-finished state even after done has been called, as the operation status
// then tracks the print job status on the printer.
//
// The function returns the following values:
//
//    - ok: TRUE, if the print operation is finished.
//
func (op *PrintOperation) IsFinished() bool {
	var _arg0 *C.GtkPrintOperation // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.gtk_print_operation_is_finished(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Run runs the print operation, by first letting the user modify print settings
// in the print dialog, and then print the document.
//
// Normally that this function does not return until the rendering of all pages
// is complete. You can connect to the PrintOperation::status-changed signal on
// op to obtain some information about the progress of the print operation.
// Furthermore, it may use a recursive mainloop to show the print dialog.
//
// If you call gtk_print_operation_set_allow_async() or set the
// PrintOperation:allow-async property the operation will run asynchronously if
// this is supported on the platform. The PrintOperation::done signal will be
// emitted with the result of the operation when the it is done (i.e. when the
// dialog is canceled, or when the print succeeds or fails).
//
//    if (settings != NULL)
//      gtk_print_operation_set_print_settings (print, settings);
//
//    if (page_setup != NULL)
//      gtk_print_operation_set_default_page_setup (print, page_setup);
//
//    g_signal_connect (print, "begin-print",
//                      G_CALLBACK (begin_print), &data);
//    g_signal_connect (print, "draw-page",
//                      G_CALLBACK (draw_page), &data);
//
//    res = gtk_print_operation_run (print,
//                                   GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
//                                   parent,
//                                   &error);
//
//    if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
//     {
//       error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
//      			                     GTK_DIALOG_DESTROY_WITH_PARENT,
//    					     GTK_MESSAGE_ERROR,
//    					     GTK_BUTTONS_CLOSE,
//    					     "Error printing file:\ns",
//    					     error->message);
//       g_signal_connect (error_dialog, "response",
//                         G_CALLBACK (gtk_widget_destroy), NULL);
//       gtk_widget_show (error_dialog);
//       g_error_free (error);
//     }
//    else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
//     {
//       if (settings != NULL)
//    g_object_unref (settings);
//       settings = g_object_ref (gtk_print_operation_get_print_settings (print));
//     }
//
// Note that gtk_print_operation_run() can only be called once on a given
// PrintOperation.
//
// The function takes the following parameters:
//
//    - action to start.
//    - parent (optional): transient parent of the dialog.
//
// The function returns the following values:
//
//    - printOperationResult: result of the print operation. A return value of
//      GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was
//      completed successfully. In this case, it is a good idea to obtain the
//      used print settings with gtk_print_operation_get_print_settings() and
//      store them for reuse with the next print operation. A value of
//      GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running
//      asynchronously, and will emit the PrintOperation::done signal when done.
//
func (op *PrintOperation) Run(action PrintOperationAction, parent *Window) (PrintOperationResult, error) {
	var _arg0 *C.GtkPrintOperation      // out
	var _arg1 C.GtkPrintOperationAction // out
	var _arg2 *C.GtkWindow              // out
	var _cret C.GtkPrintOperationResult // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = C.GtkPrintOperationAction(action)
	if parent != nil {
		_arg2 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	}

	_cret = C.gtk_print_operation_run(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(op)
	runtime.KeepAlive(action)
	runtime.KeepAlive(parent)

	var _printOperationResult PrintOperationResult // out
	var _goerr error                               // out

	_printOperationResult = PrintOperationResult(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _printOperationResult, _goerr
}

// SetAllowAsync sets whether the gtk_print_operation_run() may return before
// the print operation is completed. Note that some platforms may not allow
// asynchronous operation.
//
// The function takes the following parameters:
//
//    - allowAsync: TRUE to allow asynchronous operation.
//
func (op *PrintOperation) SetAllowAsync(allowAsync bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if allowAsync {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_allow_async(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(allowAsync)
}

// SetCurrentPage sets the current page.
//
// If this is called before gtk_print_operation_run(), the user will be able to
// select to print only the current page.
//
// Note that this only makes sense for pre-paginated documents.
//
// The function takes the following parameters:
//
//    - currentPage: current page, 0-based.
//
func (op *PrintOperation) SetCurrentPage(currentPage int) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gint               // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = C.gint(currentPage)

	C.gtk_print_operation_set_current_page(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(currentPage)
}

// SetCustomTabLabel sets the label for the tab holding custom widgets.
//
// The function takes the following parameters:
//
//    - label (optional) to use, or NULL to use the default label.
//
func (op *PrintOperation) SetCustomTabLabel(label string) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if label != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_print_operation_set_custom_tab_label(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(label)
}

// SetDefaultPageSetup makes default_page_setup the default page setup for op.
//
// This page setup will be used by gtk_print_operation_run(), but it can be
// overridden on a per-page basis by connecting to the
// PrintOperation::request-page-setup signal.
//
// The function takes the following parameters:
//
//    - defaultPageSetup (optional) or NULL.
//
func (op *PrintOperation) SetDefaultPageSetup(defaultPageSetup *PageSetup) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPageSetup      // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if defaultPageSetup != nil {
		_arg1 = (*C.GtkPageSetup)(unsafe.Pointer(coreglib.InternObject(defaultPageSetup).Native()))
	}

	C.gtk_print_operation_set_default_page_setup(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(defaultPageSetup)
}

// SetDeferDrawing sets up the PrintOperation to wait for calling of
// gtk_print_operation_draw_page_finish() from application. It can be used for
// drawing page in another thread.
//
// This function must be called in the callback of “draw-page” signal.
func (op *PrintOperation) SetDeferDrawing() {
	var _arg0 *C.GtkPrintOperation // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	C.gtk_print_operation_set_defer_drawing(_arg0)
	runtime.KeepAlive(op)
}

// SetEmbedPageSetup: embed page size combo box and orientation combo box into
// page setup page. Selected page setup is stored as default page setup in
// PrintOperation.
//
// The function takes the following parameters:
//
//    - embed: TRUE to embed page setup selection in the PrintUnixDialog.
//
func (op *PrintOperation) SetEmbedPageSetup(embed bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if embed {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_embed_page_setup(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(embed)
}

// SetExportFilename sets up the PrintOperation to generate a file instead of
// showing the print dialog. The indended use of this function is for
// implementing “Export to PDF” actions. Currently, PDF is the only supported
// format.
//
// “Print to PDF” support is independent of this and is done by letting the user
// pick the “Print to PDF” item from the list of printers in the print dialog.
//
// The function takes the following parameters:
//
//    - filename for the exported file.
//
func (op *PrintOperation) SetExportFilename(filename string) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_operation_set_export_filename(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(filename)
}

// SetHasSelection sets whether there is a selection to print.
//
// Application has to set number of pages to which the selection will draw by
// gtk_print_operation_set_n_pages() in a callback of
// PrintOperation::begin-print.
//
// The function takes the following parameters:
//
//    - hasSelection: TRUE indicates that a selection exists.
//
func (op *PrintOperation) SetHasSelection(hasSelection bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if hasSelection {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_has_selection(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(hasSelection)
}

// SetJobName sets the name of the print job. The name is used to identify the
// job (e.g. in monitoring applications like eggcups).
//
// If you don’t set a job name, GTK+ picks a default one by numbering successive
// print jobs.
//
// The function takes the following parameters:
//
//    - jobName: string that identifies the print job.
//
func (op *PrintOperation) SetJobName(jobName string) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(jobName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_operation_set_job_name(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(jobName)
}

// SetNPages sets the number of pages in the document.
//
// This must be set to a positive number before the rendering starts. It may be
// set in a PrintOperation::begin-print signal hander.
//
// Note that the page numbers passed to the PrintOperation::request-page-setup
// and PrintOperation::draw-page signals are 0-based, i.e. if the user chooses
// to print all pages, the last ::draw-page signal will be for page n_pages - 1.
//
// The function takes the following parameters:
//
//    - nPages: number of pages.
//
func (op *PrintOperation) SetNPages(nPages int) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gint               // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = C.gint(nPages)

	C.gtk_print_operation_set_n_pages(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(nPages)
}

// SetPrintSettings sets the print settings for op. This is typically used to
// re-establish print settings from a previous print operation, see
// gtk_print_operation_run().
//
// The function takes the following parameters:
//
//    - printSettings (optional): PrintSettings.
//
func (op *PrintOperation) SetPrintSettings(printSettings *PrintSettings) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintSettings  // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if printSettings != nil {
		_arg1 = (*C.GtkPrintSettings)(unsafe.Pointer(coreglib.InternObject(printSettings).Native()))
	}

	C.gtk_print_operation_set_print_settings(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(printSettings)
}

// SetShowProgress: if show_progress is TRUE, the print operation will show a
// progress dialog during the print operation.
//
// The function takes the following parameters:
//
//    - showProgress: TRUE to show a progress dialog.
//
func (op *PrintOperation) SetShowProgress(showProgress bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if showProgress {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_show_progress(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(showProgress)
}

// SetSupportSelection sets whether selection is supported by PrintOperation.
//
// The function takes the following parameters:
//
//    - supportSelection: TRUE to support selection.
//
func (op *PrintOperation) SetSupportSelection(supportSelection bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if supportSelection {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_support_selection(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(supportSelection)
}

// SetTrackPrintStatus: if track_status is TRUE, the print operation will try to
// continue report on the status of the print job in the printer queues and
// printer. This can allow your application to show things like “out of paper”
// issues, and when the print job actually reaches the printer.
//
// This function is often implemented using some form of polling, so it should
// not be enabled unless needed.
//
// The function takes the following parameters:
//
//    - trackStatus: TRUE to track status after printing.
//
func (op *PrintOperation) SetTrackPrintStatus(trackStatus bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if trackStatus {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_track_print_status(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(trackStatus)
}

// SetUnit sets up the transformation for the cairo context obtained from
// PrintContext in such a way that distances are measured in units of unit.
//
// The function takes the following parameters:
//
//    - unit to use.
//
func (op *PrintOperation) SetUnit(unit Unit) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.GtkUnit            // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = C.GtkUnit(unit)

	C.gtk_print_operation_set_unit(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(unit)
}

// SetUseFullPage: if full_page is TRUE, the transformation for the cairo
// context obtained from PrintContext puts the origin at the top left corner of
// the page (which may not be the top left corner of the sheet, depending on
// page orientation and the number of pages per sheet). Otherwise, the origin is
// at the top left corner of the imageable area (i.e. inside the margins).
//
// The function takes the following parameters:
//
//    - fullPage: TRUE to set up the PrintContext for the full page.
//
func (op *PrintOperation) SetUseFullPage(fullPage bool) {
	var _arg0 *C.GtkPrintOperation // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if fullPage {
		_arg1 = C.TRUE
	}

	C.gtk_print_operation_set_use_full_page(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(fullPage)
}

// The function takes the following parameters:
//
func (operation *PrintOperation) beginPrint(context *PrintContext) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.begin_print

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintContext   // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_begin_print(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(context)
}

// The function takes the following parameters:
//
func (operation *PrintOperation) customWidgetApply(widget Widgetter) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.custom_widget_apply

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkWidget         // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_custom_widget_apply(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(widget)
}

// The function takes the following parameters:
//
func (operation *PrintOperation) done(result PrintOperationResult) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.done

	var _arg0 *C.GtkPrintOperation      // out
	var _arg1 C.GtkPrintOperationResult // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = C.GtkPrintOperationResult(result)

	C._gotk4_gtk3_PrintOperation_virtual_done(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(result)
}

// The function takes the following parameters:
//
//    - context
//    - pageNr
//
func (operation *PrintOperation) drawPage(context *PrintContext, pageNr int) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.draw_page

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintContext   // out
	var _arg2 C.gint               // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.gint(pageNr)

	C._gotk4_gtk3_PrintOperation_virtual_draw_page(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(context)
	runtime.KeepAlive(pageNr)
}

// The function takes the following parameters:
//
func (operation *PrintOperation) endPrint(context *PrintContext) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.end_print

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintContext   // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_end_print(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(context)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (operation *PrintOperation) paginate(context *PrintContext) bool {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.paginate

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintContext   // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C._gotk4_gtk3_PrintOperation_virtual_paginate(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(context)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - preview
//    - context
//    - parent
//
// The function returns the following values:
//
func (operation *PrintOperation) preview(preview PrintOperationPreviewer, context *PrintContext, parent *Window) bool {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.preview

	var _arg0 *C.GtkPrintOperation        // out
	var _arg1 *C.GtkPrintOperationPreview // out
	var _arg2 *C.GtkPrintContext          // out
	var _arg3 *C.GtkWindow                // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintOperationPreview)(unsafe.Pointer(coreglib.InternObject(preview).Native()))
	_arg2 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg3 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(parent).Native()))

	_cret = C._gotk4_gtk3_PrintOperation_virtual_preview(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(preview)
	runtime.KeepAlive(context)
	runtime.KeepAlive(parent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - context
//    - pageNr
//    - setup
//
func (operation *PrintOperation) requestPageSetup(context *PrintContext, pageNr int, setup *PageSetup) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.request_page_setup

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkPrintContext   // out
	var _arg2 C.gint               // out
	var _arg3 *C.GtkPageSetup      // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkPrintContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.gint(pageNr)
	_arg3 = (*C.GtkPageSetup)(unsafe.Pointer(coreglib.InternObject(setup).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_request_page_setup(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(context)
	runtime.KeepAlive(pageNr)
	runtime.KeepAlive(setup)
}

func (operation *PrintOperation) statusChanged() {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.status_changed

	var _arg0 *C.GtkPrintOperation // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_status_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(operation)
}

// The function takes the following parameters:
//
//    - widget
//    - setup
//    - settings
//
func (operation *PrintOperation) updateCustomWidget(widget Widgetter, setup *PageSetup, settings *PrintSettings) {
	gclass := (*C.GtkPrintOperationClass)(coreglib.PeekParentClass(operation))
	fnarg := gclass.update_custom_widget

	var _arg0 *C.GtkPrintOperation // out
	var _arg1 *C.GtkWidget         // out
	var _arg2 *C.GtkPageSetup      // out
	var _arg3 *C.GtkPrintSettings  // out

	_arg0 = (*C.GtkPrintOperation)(unsafe.Pointer(coreglib.InternObject(operation).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = (*C.GtkPageSetup)(unsafe.Pointer(coreglib.InternObject(setup).Native()))
	_arg3 = (*C.GtkPrintSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	C._gotk4_gtk3_PrintOperation_virtual_update_custom_widget(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(operation)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(setup)
	runtime.KeepAlive(settings)
}

// PrintOperationClass: instance of this type is always passed by reference.
type PrintOperationClass struct {
	*printOperationClass
}

// printOperationClass is the struct that's finalized.
type printOperationClass struct {
	native *C.GtkPrintOperationClass
}
