// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GtkWidget* _gotk4_gtk3_FlowBoxCreateWidgetFunc(gpointer, gpointer);
// extern gboolean _gotk4_gtk3_FlowBoxFilterFunc(void*, gpointer);
// extern gint _gotk4_gtk3_FlowBoxSortFunc(void*, void*, gpointer);
// extern void _gotk4_gtk3_FlowBoxChildClass_activate(void*);
// extern void _gotk4_gtk3_FlowBoxChild_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBoxClass_activate_cursor_child(void*);
// extern void _gotk4_gtk3_FlowBoxClass_child_activated(void*, void*);
// extern void _gotk4_gtk3_FlowBoxClass_select_all(void*);
// extern void _gotk4_gtk3_FlowBoxClass_selected_children_changed(void*);
// extern void _gotk4_gtk3_FlowBoxClass_toggle_cursor_child(void*);
// extern void _gotk4_gtk3_FlowBoxClass_unselect_all(void*);
// extern void _gotk4_gtk3_FlowBoxForEachFunc(void*, void*, gpointer);
// extern void _gotk4_gtk3_FlowBox_ConnectActivateCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectChildActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectToggleCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectUnselectAll(gpointer, guintptr);
// extern void callbackDelete(gpointer);
import "C"

// GTypeFlowBox returns the GType for the type FlowBox.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFlowBox() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "FlowBox").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFlowBox)
	return gtype
}

// GTypeFlowBoxChild returns the GType for the type FlowBoxChild.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFlowBoxChild() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "FlowBoxChild").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFlowBoxChild)
	return gtype
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a Model with
// gtk_flow_box_bind_model() for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func(item *coreglib.Object) (widget Widgetter)

//export _gotk4_gtk3_FlowBoxCreateWidgetFunc
func _gotk4_gtk3_FlowBoxCreateWidgetFunc(arg1 C.gpointer, arg2 C.gpointer) (cret *C.GtkWidget) {
	var fn FlowBoxCreateWidgetFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxCreateWidgetFunc)
	}

	var _item *coreglib.Object // out

	_item = coreglib.Take(unsafe.Pointer(arg1))

	widget := fn(_item)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(widget).Native()))

	return cret
}

// FlowBoxFilterFunc: function that will be called whenrever a child changes or
// is added. It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func(child *FlowBoxChild) (ok bool)

//export _gotk4_gtk3_FlowBoxFilterFunc
func _gotk4_gtk3_FlowBoxFilterFunc(arg1 *C.void, arg2 C.gpointer) (cret C.gboolean) {
	var fn FlowBoxFilterFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxFilterFunc)
	}

	var _child *FlowBoxChild // out

	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))

	ok := fn(_child)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// FlowBoxForEachFunc: function used by gtk_flow_box_selected_foreach(). It will
// be called on every selected child of the box.
type FlowBoxForEachFunc func(box *FlowBox, child *FlowBoxChild)

//export _gotk4_gtk3_FlowBoxForEachFunc
func _gotk4_gtk3_FlowBoxForEachFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) {
	var fn FlowBoxForEachFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxForEachFunc)
	}

	var _box *FlowBox        // out
	var _child *FlowBoxChild // out

	_box = wrapFlowBox(coreglib.Take(unsafe.Pointer(arg1)))
	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg2)))

	fn(_box, _child)
}

// FlowBoxSortFunc: function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func(child1, child2 *FlowBoxChild) (gint int32)

//export _gotk4_gtk3_FlowBoxSortFunc
func _gotk4_gtk3_FlowBoxSortFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) (cret C.gint) {
	var fn FlowBoxSortFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxSortFunc)
	}

	var _child1 *FlowBoxChild // out
	var _child2 *FlowBoxChild // out

	_child1 = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))
	_child2 = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg2)))

	gint := fn(_child1, _child2)

	cret = C.gint(gint)

	return cret
}

// FlowBoxOverrider contains methods that are overridable.
type FlowBoxOverrider interface {
	ActivateCursorChild()
	// The function takes the following parameters:
	//
	ChildActivated(child *FlowBoxChild)
	// SelectAll: select all children of box, if the selection mode allows it.
	SelectAll()
	SelectedChildrenChanged()
	ToggleCursorChild()
	// UnselectAll: unselect all children of box, if the selection mode allows
	// it.
	UnselectAll()
}

// FlowBox positions child widgets in sequence according to its orientation.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a ScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only FlowBoxChild children, you can add any
// kind of widget to it via gtk_container_add(), and a GtkFlowBoxChild widget
// will automatically be inserted between the box and the widget.
//
// Also see ListBox.
//
// GtkFlowBox was added in GTK+ 3.12.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
type FlowBox struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Orientable
}

var (
	_ Containerer       = (*FlowBox)(nil)
	_ coreglib.Objector = (*FlowBox)(nil)
)

func classInitFlowBoxer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "FlowBoxClass")

	if _, ok := goval.(interface{ ActivateCursorChild() }); ok {
		o := pclass.StructFieldOffset("activate_cursor_child")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_activate_cursor_child)
	}

	if _, ok := goval.(interface{ ChildActivated(child *FlowBoxChild) }); ok {
		o := pclass.StructFieldOffset("child_activated")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_child_activated)
	}

	if _, ok := goval.(interface{ SelectAll() }); ok {
		o := pclass.StructFieldOffset("select_all")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_select_all)
	}

	if _, ok := goval.(interface{ SelectedChildrenChanged() }); ok {
		o := pclass.StructFieldOffset("selected_children_changed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_selected_children_changed)
	}

	if _, ok := goval.(interface{ ToggleCursorChild() }); ok {
		o := pclass.StructFieldOffset("toggle_cursor_child")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_toggle_cursor_child)
	}

	if _, ok := goval.(interface{ UnselectAll() }); ok {
		o := pclass.StructFieldOffset("unselect_all")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxClass_unselect_all)
	}
}

//export _gotk4_gtk3_FlowBoxClass_activate_cursor_child
func _gotk4_gtk3_FlowBoxClass_activate_cursor_child(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ActivateCursorChild() })

	iface.ActivateCursorChild()
}

//export _gotk4_gtk3_FlowBoxClass_child_activated
func _gotk4_gtk3_FlowBoxClass_child_activated(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ChildActivated(child *FlowBoxChild) })

	var _child *FlowBoxChild // out

	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))

	iface.ChildActivated(_child)
}

//export _gotk4_gtk3_FlowBoxClass_select_all
func _gotk4_gtk3_FlowBoxClass_select_all(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SelectAll() })

	iface.SelectAll()
}

//export _gotk4_gtk3_FlowBoxClass_selected_children_changed
func _gotk4_gtk3_FlowBoxClass_selected_children_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SelectedChildrenChanged() })

	iface.SelectedChildrenChanged()
}

//export _gotk4_gtk3_FlowBoxClass_toggle_cursor_child
func _gotk4_gtk3_FlowBoxClass_toggle_cursor_child(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ToggleCursorChild() })

	iface.ToggleCursorChild()
}

//export _gotk4_gtk3_FlowBoxClass_unselect_all
func _gotk4_gtk3_FlowBoxClass_unselect_all(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ UnselectAll() })

	iface.UnselectAll()
}

func wrapFlowBox(obj *coreglib.Object) *FlowBox {
	return &FlowBox{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	return wrapFlowBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_FlowBox_ConnectActivateCursorChild
func _gotk4_gtk3_FlowBox_ConnectActivateCursorChild(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivateCursorChild signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted when the user activates the box.
func (box *FlowBox) ConnectActivateCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "activate-cursor-child", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectActivateCursorChild), f)
}

//export _gotk4_gtk3_FlowBox_ConnectChildActivated
func _gotk4_gtk3_FlowBox_ConnectChildActivated(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(child *FlowBoxChild)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(child *FlowBoxChild))
	}

	var _child *FlowBoxChild // out

	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))

	f(_child)
}

// ConnectChildActivated signal is emitted when a child has been activated by
// the user.
func (box *FlowBox) ConnectChildActivated(f func(child *FlowBoxChild)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "child-activated", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectChildActivated), f)
}

//export _gotk4_gtk3_FlowBox_ConnectSelectAll
func _gotk4_gtk3_FlowBox_ConnectSelectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectAll signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted to select all children of the box, if the selection mode permits it.
//
// The default bindings for this signal is Ctrl-a.
func (box *FlowBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectSelectAll), f)
}

//export _gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged
func _gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectedChildrenChanged signal is emitted when the set of selected
// children changes.
//
// Use gtk_flow_box_selected_foreach() or gtk_flow_box_get_selected_children()
// to obtain the selected children.
func (box *FlowBox) ConnectSelectedChildrenChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "selected-children-changed", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged), f)
}

//export _gotk4_gtk3_FlowBox_ConnectToggleCursorChild
func _gotk4_gtk3_FlowBox_ConnectToggleCursorChild(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggleCursorChild signal is a [keybinding signal][GtkBindingSignal]
// which toggles the selection of the child that has the focus.
//
// The default binding for this signal is Ctrl-Space.
func (box *FlowBox) ConnectToggleCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "toggle-cursor-child", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectToggleCursorChild), f)
}

//export _gotk4_gtk3_FlowBox_ConnectUnselectAll
func _gotk4_gtk3_FlowBox_ConnectUnselectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnselectAll signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to unselect all children of the box, if the selection mode
// permits it.
//
// The default bindings for this signal is Ctrl-Shift-a.
func (box *FlowBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectUnselectAll), f)
}

// NewFlowBox creates a GtkFlowBox.
//
// The function returns the following values:
//
//    - flowBox: new FlowBox container.
//
func NewFlowBox() *FlowBox {
	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("new_FlowBox", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _flowBox *FlowBox // out

	_flowBox = wrapFlowBox(coreglib.Take(unsafe.Pointer(_cret)))

	return _flowBox
}

// BindModel binds model to box.
//
// If box was already bound to a model, that previous binding is destroyed.
//
// The contents of box are cleared and then filled with widgets that represent
// items from model. box is updated whenever model changes. If model is NULL,
// box is left empty.
//
// It is undefined to add or remove widgets directly (for example, with
// gtk_flow_box_insert() or gtk_container_add()) while box is bound to a model.
//
// Note that using a model is incompatible with the filtering and sorting
// functionality in GtkFlowBox. When using a model, filtering and sorting should
// be implemented by the model.
//
// The function takes the following parameters:
//
//    - model (optional) to be bound to box.
//    - createWidgetFunc: function that creates widgets for items.
//
func (box *FlowBox) BindModel(model gio.ListModeller, createWidgetFunc FlowBoxCreateWidgetFunc) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if model != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}
	*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gtk3_FlowBoxCreateWidgetFunc)
	_args[3] = C.gpointer(gbox.Assign(createWidgetFunc))
	_args[4] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("bind_model", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(model)
	runtime.KeepAlive(createWidgetFunc)
}

// ActivateOnSingleClick returns whether children activate on single clicks.
//
// The function returns the following values:
//
//    - ok: TRUE if children are activated on single click, FALSE otherwise.
//
func (box *FlowBox) ActivateOnSingleClick() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_activate_on_single_click", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ChildAtIndex gets the nth child in the box.
//
// The function takes the following parameters:
//
//    - idx: position of the child.
//
// The function returns the following values:
//
//    - flowBoxChild (optional): child widget, which will always be a
//      FlowBoxChild or NULL in case no child widget with the given index exists.
//
func (box *FlowBox) ChildAtIndex(idx int32) *FlowBoxChild {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(idx)

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_child_at_index", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(idx)

	var _flowBoxChild *FlowBoxChild // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _flowBoxChild
}

// ChildAtPos gets the child in the (x, y) position.
//
// The function takes the following parameters:
//
//    - x coordinate of the child.
//    - y coordinate of the child.
//
// The function returns the following values:
//
//    - flowBoxChild (optional): child widget, which will always be a
//      FlowBoxChild or NULL in case no child widget exists for the given x and y
//      coordinates.
//
func (box *FlowBox) ChildAtPos(x, y int32) *FlowBoxChild {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(x)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(y)

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_child_at_pos", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _flowBoxChild *FlowBoxChild // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _flowBoxChild
}

// ColumnSpacing gets the horizontal spacing.
//
// The function returns the following values:
//
//    - guint: horizontal spacing.
//
func (box *FlowBox) ColumnSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_column_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// Homogeneous returns whether the box is homogeneous (all children are the same
// size). See gtk_box_set_homogeneous().
//
// The function returns the following values:
//
//    - ok: TRUE if the box is homogeneous.
//
func (box *FlowBox) Homogeneous() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_homogeneous", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// MaxChildrenPerLine gets the maximum number of children per line.
//
// The function returns the following values:
//
//    - guint: maximum number of children per line.
//
func (box *FlowBox) MaxChildrenPerLine() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_max_children_per_line", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// MinChildrenPerLine gets the minimum number of children per line.
//
// The function returns the following values:
//
//    - guint: minimum number of children per line.
//
func (box *FlowBox) MinChildrenPerLine() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_min_children_per_line", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// RowSpacing gets the vertical spacing.
//
// The function returns the following values:
//
//    - guint: vertical spacing.
//
func (box *FlowBox) RowSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_row_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// SelectedChildren creates a list of all selected children.
//
// The function returns the following values:
//
//    - list: A #GList containing the Widget for each selected child. Free with
//      g_list_free() when done.
//
func (box *FlowBox) SelectedChildren() []*FlowBoxChild {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_selected_children", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _list []*FlowBoxChild // out

	_list = make([]*FlowBoxChild, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *FlowBoxChild // out
		dst = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Insert inserts the widget into box at position.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position and this function has the same effect as
// gtk_container_add().
//
// If position is -1, or larger than the total number of children in the box,
// then the widget will be appended to the end.
//
// The function takes the following parameters:
//
//    - widget to add.
//    - position to insert child in.
//
func (box *FlowBox) Insert(widget Widgetter, position int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(position)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("insert", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(position)
}

// InvalidateFilter updates the filtering for all children.
//
// Call this function when the result of the filter function on the box is
// changed due ot an external factor. For instance, this would be used if the
// filter function just looked for a specific search term, and the entry with
// the string has changed.
func (box *FlowBox) InvalidateFilter() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("invalidate_filter", _args[:], nil)

	runtime.KeepAlive(box)
}

// InvalidateSort updates the sorting for all children.
//
// Call this when the result of the sort function on box is changed due to an
// external factor.
func (box *FlowBox) InvalidateSort() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("invalidate_sort", _args[:], nil)

	runtime.KeepAlive(box)
}

// SelectAll: select all children of box, if the selection mode allows it.
func (box *FlowBox) SelectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("select_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// SelectChild selects a single child of box, if the selection mode allows it.
//
// The function takes the following parameters:
//
//    - child of box.
//
func (box *FlowBox) SelectChild(child *FlowBoxChild) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("select_child", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// SelectedForEach calls a function for each selected child.
//
// Note that the selection cannot be modified from within this function.
//
// The function takes the following parameters:
//
//    - fn: function to call for each selected child.
//
func (box *FlowBox) SelectedForEach(fn FlowBoxForEachFunc) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_FlowBoxForEachFunc)
	_args[2] = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_args[2]))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("selected_foreach", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(fn)
}

// SetActivateOnSingleClick: if single is TRUE, children will be activated when
// you click on them, otherwise you need to double-click.
//
// The function takes the following parameters:
//
//    - single: TRUE to emit child-activated on a single click.
//
func (box *FlowBox) SetActivateOnSingleClick(single bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if single {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_activate_on_single_click", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(single)
}

// SetColumnSpacing sets the horizontal space to add between children. See the
// FlowBox:column-spacing property.
//
// The function takes the following parameters:
//
//    - spacing to use.
//
func (box *FlowBox) SetColumnSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_column_spacing", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(spacing)
}

// SetFilterFunc: by setting a filter function on the box one can decide
// dynamically which of the children to show. For instance, to implement a
// search function that only shows the children matching the search terms.
//
// The filter_func will be called for each child after the call, and it will
// continue to be called each time a child changes (via
// gtk_flow_box_child_changed()) or when gtk_flow_box_invalidate_filter() is
// called.
//
// Note that using a filter function is incompatible with using a model (see
// gtk_flow_box_bind_model()).
//
// The function takes the following parameters:
//
//    - filterFunc (optional): callback that lets you filter which children to
//      show.
//
func (box *FlowBox) SetFilterFunc(filterFunc FlowBoxFilterFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if filterFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_FlowBoxFilterFunc)
		_args[2] = C.gpointer(gbox.Assign(filterFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_filter_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(filterFunc)
}

// SetHAdjustment hooks up an adjustment to focus handling in box. The
// adjustment is also used for autoscrolling during rubberband selection. See
// gtk_scrolled_window_get_hadjustment() for a typical way of obtaining the
// adjustment, and gtk_flow_box_set_vadjustment()for setting the vertical
// adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate system
// as the allocation for immediate children of the box.
//
// The function takes the following parameters:
//
//    - adjustment which should be adjusted when the focus is moved among the
//      descendents of container.
//
func (box *FlowBox) SetHAdjustment(adjustment *Adjustment) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_hadjustment", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(adjustment)
}

// SetHomogeneous sets the FlowBox:homogeneous property of box, controlling
// whether or not all children of box are given equal space in the box.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to create equal allotments, FALSE for variable
//      allotments.
//
func (box *FlowBox) SetHomogeneous(homogeneous bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if homogeneous {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_homogeneous", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(homogeneous)
}

// SetMaxChildrenPerLine sets the maximum number of children to request and
// allocate space for in box’s orientation.
//
// Setting the maximum number of children per line limits the overall natural
// size request to be no more than n_children children long in the given
// orientation.
//
// The function takes the following parameters:
//
//    - nChildren: maximum number of children per line.
//
func (box *FlowBox) SetMaxChildrenPerLine(nChildren uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(nChildren)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_max_children_per_line", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(nChildren)
}

// SetMinChildrenPerLine sets the minimum number of children to line up in box’s
// orientation before flowing.
//
// The function takes the following parameters:
//
//    - nChildren: minimum number of children per line.
//
func (box *FlowBox) SetMinChildrenPerLine(nChildren uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(nChildren)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_min_children_per_line", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(nChildren)
}

// SetRowSpacing sets the vertical space to add between children. See the
// FlowBox:row-spacing property.
//
// The function takes the following parameters:
//
//    - spacing to use.
//
func (box *FlowBox) SetRowSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_row_spacing", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(spacing)
}

// SetSortFunc: by setting a sort function on the box, one can dynamically
// reorder the children of the box, based on the contents of the children.
//
// The sort_func will be called for each child after the call, and will continue
// to be called each time a child changes (via gtk_flow_box_child_changed()) and
// when gtk_flow_box_invalidate_sort() is called.
//
// Note that using a sort function is incompatible with using a model (see
// gtk_flow_box_bind_model()).
//
// The function takes the following parameters:
//
//    - sortFunc (optional): sort function.
//
func (box *FlowBox) SetSortFunc(sortFunc FlowBoxSortFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if sortFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_FlowBoxSortFunc)
		_args[2] = C.gpointer(gbox.Assign(sortFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_sort_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(sortFunc)
}

// SetVAdjustment hooks up an adjustment to focus handling in box. The
// adjustment is also used for autoscrolling during rubberband selection. See
// gtk_scrolled_window_get_vadjustment() for a typical way of obtaining the
// adjustment, and gtk_flow_box_set_hadjustment()for setting the horizontal
// adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate system
// as the allocation for immediate children of the box.
//
// The function takes the following parameters:
//
//    - adjustment which should be adjusted when the focus is moved among the
//      descendents of container.
//
func (box *FlowBox) SetVAdjustment(adjustment *Adjustment) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_vadjustment", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(adjustment)
}

// UnselectAll: unselect all children of box, if the selection mode allows it.
func (box *FlowBox) UnselectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("unselect_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// UnselectChild unselects a single child of box, if the selection mode allows
// it.
//
// The function takes the following parameters:
//
//    - child of box.
//
func (box *FlowBox) UnselectChild(child *FlowBoxChild) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("unselect_child", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// FlowBoxChildOverrider contains methods that are overridable.
type FlowBoxChildOverrider interface {
	Activate()
}

type FlowBoxChild struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*FlowBoxChild)(nil)
)

func classInitFlowBoxChilder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "FlowBoxChildClass")

	if _, ok := goval.(interface{ Activate() }); ok {
		o := pclass.StructFieldOffset("activate")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_FlowBoxChildClass_activate)
	}
}

//export _gotk4_gtk3_FlowBoxChildClass_activate
func _gotk4_gtk3_FlowBoxChildClass_activate(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Activate() })

	iface.Activate()
}

func wrapFlowBoxChild(obj *coreglib.Object) *FlowBoxChild {
	return &FlowBoxChild{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	return wrapFlowBoxChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_FlowBoxChild_ConnectActivate
func _gotk4_gtk3_FlowBoxChild_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate signal is emitted when the user activates a child widget in a
// FlowBox, either by clicking or double-clicking, or by using the Space or
// Enter key.
//
// While this signal is used as a [keybinding signal][GtkBindingSignal], it can
// be used by applications for their own purposes.
func (child *FlowBoxChild) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(child, "activate", false, unsafe.Pointer(C._gotk4_gtk3_FlowBoxChild_ConnectActivate), f)
}

// NewFlowBoxChild creates a new FlowBoxChild, to be used as a child of a
// FlowBox.
//
// The function returns the following values:
//
//    - flowBoxChild: new FlowBoxChild.
//
func NewFlowBoxChild() *FlowBoxChild {
	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("new_FlowBoxChild", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _flowBoxChild *FlowBoxChild // out

	_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))

	return _flowBoxChild
}

// Changed marks child as changed, causing any state that depends on this to be
// updated. This affects sorting and filtering.
//
// Note that calls to this method must be in sync with the data used for the
// sorting and filtering functions. For instance, if the list is mirroring some
// external data set, and *two* children changed in the external data set when
// you call gtk_flow_box_child_changed() on the first child, the sort function
// must only read the new data for the first of the two changed children,
// otherwise the resorting of the children will be wrong.
//
// This generally means that if you don’t fully control the data model, you have
// to duplicate the data that affects the sorting and filtering functions into
// the widgets themselves. Another alternative is to call
// gtk_flow_box_invalidate_sort() on any model change, but that is more
// expensive.
func (child *FlowBoxChild) Changed() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("changed", _args[:], nil)

	runtime.KeepAlive(child)
}

// Index gets the current index of the child in its FlowBox container.
//
// The function returns the following values:
//
//    - gint: index of the child, or -1 if the child is not in a flow box.
//
func (child *FlowBoxChild) Index() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("get_index", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(child)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// IsSelected returns whether the child is currently selected in its FlowBox
// container.
//
// The function returns the following values:
//
//    - ok: TRUE if child is selected.
//
func (child *FlowBoxChild) IsSelected() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("is_selected", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(child)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
