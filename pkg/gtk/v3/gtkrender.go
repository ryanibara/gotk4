// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// RenderActivity renders an activity indicator (such as in Spinner). The state
// GTK_STATE_FLAG_CHECKED determines whether there is activity going on.
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderActivity(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_activity").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderArrow renders an arrow pointing to angle.
//
// Typical arrow rendering at 0, 1⁄2 π;, π; and 3⁄2 π:
//
// ! (arrows.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - angle: arrow angle from 0 to 2 * G_PI, being 0 the arrow pointing to the
//      north.
//    - x: x origin of the render area.
//    - y: y origin of the render area.
//    - size: square side for render area.
//
func RenderArrow(context *StyleContext, cr *cairo.Context, angle, x, y, size float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(angle)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(size)

	girepository.MustFind("Gtk", "render_arrow").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(angle)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(size)
}

// RenderBackground renders the background of an element.
//
// Typical background rendering, showing the effect of background-image,
// border-width and border-radius:
//
// ! (background.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderBackground(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_background").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderBackgroundGetClip returns the area that will be affected (i.e. drawn
// to) when calling gtk_render_background() for the given context and rectangle.
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
// The function returns the following values:
//
//    - outClip: return location for the clip.
//
func RenderBackgroundGetClip(context *StyleContext, x, y, width, height float64) *gdk.Rectangle {
	var _args [5]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_background_get_clip").Invoke(_args[:], _outs[:])

	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _outClip *gdk.Rectangle // out

	_outClip = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _outClip
}

// RenderCheck renders a checkmark (as in a CheckButton).
//
// The GTK_STATE_FLAG_CHECKED state determines whether the check is on or off,
// and GTK_STATE_FLAG_INCONSISTENT determines whether it should be marked as
// undefined.
//
// Typical checkmark rendering:
//
// ! (checks.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderCheck(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_check").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderExpander renders an expander (as used in TreeView and Expander) in the
// area defined by x, y, width, height. The state GTK_STATE_FLAG_CHECKED
// determines whether the expander is collapsed or expanded.
//
// Typical expander rendering:
//
// ! (expanders.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderExpander(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_expander").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderFocus renders a focus indicator on the rectangle determined by x, y,
// width, height.
//
// Typical focus rendering:
//
// ! (focus.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderFocus(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_focus").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderFrame renders a frame around the rectangle defined by x, y, width,
// height.
//
// Examples of frame rendering, showing the effect of border-image,
// border-color, border-width, border-radius and junctions:
//
// ! (frames.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderFrame(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_frame").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderHandle renders a handle (as in HandleBox, Paned and Window’s resize
// grip), in the rectangle determined by x, y, width, height.
//
// Handles rendered for the paned and grip classes:
//
// ! (handles.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderHandle(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_handle").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderIcon renders the icon in pixbuf at the specified x and y coordinates.
//
// This function will render the icon in pixbuf at exactly its size, regardless
// of scaling factors, which may not be appropriate when drawing on displays
// with high pixel densities.
//
// You probably want to use gtk_render_icon_surface() instead, if you already
// have a Cairo surface.
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - pixbuf containing the icon to draw.
//    - x: x position for the pixbuf.
//    - y: y position for the pixbuf.
//
func RenderIcon(context *StyleContext, cr *cairo.Context, pixbuf *gdkpixbuf.Pixbuf, x, y float64) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(y)

	girepository.MustFind("Gtk", "render_icon").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// RenderIconSurface renders the icon in surface at the specified x and y
// coordinates.
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - surface containing the icon to draw.
//    - x: x position for the icon.
//    - y: y position for the incon.
//
func RenderIconSurface(context *StyleContext, cr *cairo.Context, surface *cairo.Surface, x, y float64) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(surface.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(y)

	girepository.MustFind("Gtk", "render_icon_surface").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(surface)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// RenderLayout renders layout on the coordinates x, y.
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin.
//    - y: y origin.
//    - layout to render.
//
func RenderLayout(context *StyleContext, cr *cairo.Context, x, y float64, layout *pango.Layout) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(**C.void)(unsafe.Pointer(&_args[4])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(layout).Native()))

	girepository.MustFind("Gtk", "render_layout").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(layout)
}

// RenderLine renders a line from (x0, y0) to (x1, y1).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x0: x coordinate for the origin of the line.
//    - y0: y coordinate for the origin of the line.
//    - x1: x coordinate for the end of the line.
//    - y1: y coordinate for the end of the line.
//
func RenderLine(context *StyleContext, cr *cairo.Context, x0, y0, x1, y1 float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x0)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y0)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(x1)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(y1)

	girepository.MustFind("Gtk", "render_line").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x0)
	runtime.KeepAlive(y0)
	runtime.KeepAlive(x1)
	runtime.KeepAlive(y1)
}

// RenderOption renders an option mark (as in a RadioButton), the
// GTK_STATE_FLAG_CHECKED state will determine whether the option is on or off,
// and GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.
//
// Typical option mark rendering:
//
// ! (options.png).
//
// The function takes the following parameters:
//
//    - context: StyleContext.
//    - cr: #cairo_t.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func RenderOption(context *StyleContext, cr *cairo.Context, x, y, width, height float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(x)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(y)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(width)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(height)

	girepository.MustFind("Gtk", "render_option").Invoke(_args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}
