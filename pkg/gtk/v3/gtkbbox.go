// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeButtonBoxStyle returns the GType for the type ButtonBoxStyle.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeButtonBoxStyle() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ButtonBoxStyle").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalButtonBoxStyle)
	return gtype
}

// GTypeButtonBox returns the GType for the type ButtonBox.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeButtonBox() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ButtonBox").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalButtonBox)
	return gtype
}

// ButtonBoxStyle: used to dictate the style that a ButtonBox uses to layout the
// buttons it contains.
type ButtonBoxStyle C.gint

const (
	// ButtonboxSpread buttons are evenly spread across the box.
	ButtonboxSpread ButtonBoxStyle = 1
	// ButtonboxEdge buttons are placed at the edges of the box.
	ButtonboxEdge ButtonBoxStyle = 2
	// ButtonboxStart buttons are grouped towards the start of the box, (on the
	// left for a HBox, or the top for a VBox).
	ButtonboxStart ButtonBoxStyle = 3
	// ButtonboxEnd buttons are grouped towards the end of the box, (on the
	// right for a HBox, or the bottom for a VBox).
	ButtonboxEnd ButtonBoxStyle = 4
	// ButtonboxCenter buttons are centered in the box. Since 2.12.
	ButtonboxCenter ButtonBoxStyle = 5
	// ButtonboxExpand buttons expand to fill the box. This entails giving
	// buttons a "linked" appearance, making button sizes homogeneous, and
	// setting spacing to 0 (same as calling gtk_box_set_homogeneous() and
	// gtk_box_set_spacing() manually). Since 3.12.
	ButtonboxExpand ButtonBoxStyle = 6
)

func marshalButtonBoxStyle(p uintptr) (interface{}, error) {
	return ButtonBoxStyle(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ButtonBoxStyle.
func (b ButtonBoxStyle) String() string {
	switch b {
	case ButtonboxSpread:
		return "Spread"
	case ButtonboxEdge:
		return "Edge"
	case ButtonboxStart:
		return "Start"
	case ButtonboxEnd:
		return "End"
	case ButtonboxCenter:
		return "Center"
	case ButtonboxExpand:
		return "Expand"
	default:
		return fmt.Sprintf("ButtonBoxStyle(%d)", b)
	}
}

// ButtonBoxOverrider contains methods that are overridable.
type ButtonBoxOverrider interface {
}

type ButtonBox struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*ButtonBox)(nil)
	_ coreglib.Objector = (*ButtonBox)(nil)
)

func classInitButtonBoxer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapButtonBox(obj *coreglib.Object) *ButtonBox {
	return &ButtonBox{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalButtonBox(p uintptr) (interface{}, error) {
	return wrapButtonBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ChildNonHomogeneous returns whether the child is exempted from homogenous
// sizing.
//
// The function takes the following parameters:
//
//    - child of widget.
//
// The function returns the following values:
//
//    - ok: TRUE if the child is not subject to homogenous sizing.
//
func (widget *ButtonBox) ChildNonHomogeneous(child Widgetter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "ButtonBox").InvokeMethod("get_child_non_homogeneous", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(child)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ChildSecondary returns whether child should appear in a secondary group of
// children.
//
// The function takes the following parameters:
//
//    - child of widget.
//
// The function returns the following values:
//
//    - ok: whether child should appear in a secondary group of children.
//
func (widget *ButtonBox) ChildSecondary(child Widgetter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "ButtonBox").InvokeMethod("get_child_secondary", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(child)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetChildNonHomogeneous sets whether the child is exempted from homogeous
// sizing.
//
// The function takes the following parameters:
//
//    - child of widget.
//    - nonHomogeneous: new value.
//
func (widget *ButtonBox) SetChildNonHomogeneous(child Widgetter, nonHomogeneous bool) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if nonHomogeneous {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ButtonBox").InvokeMethod("set_child_non_homogeneous", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(child)
	runtime.KeepAlive(nonHomogeneous)
}

// SetChildSecondary sets whether child should appear in a secondary group of
// children. A typical use of a secondary child is the help button in a dialog.
//
// This group appears after the other children if the style is
// GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD or GTK_BUTTONBOX_EDGE, and before
// the other children if the style is GTK_BUTTONBOX_END. For horizontal button
// boxes, the definition of before/after depends on direction of the widget (see
// gtk_widget_set_direction()). If the style is GTK_BUTTONBOX_START or
// GTK_BUTTONBOX_END, then the secondary children are aligned at the other end
// of the button box from the main children. For the other styles, they appear
// immediately next to the main children.
//
// The function takes the following parameters:
//
//    - child of widget.
//    - isSecondary: if TRUE, the child appears in a secondary group of the
//      button box.
//
func (widget *ButtonBox) SetChildSecondary(child Widgetter, isSecondary bool) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if isSecondary {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ButtonBox").InvokeMethod("set_child_secondary", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(child)
	runtime.KeepAlive(isSecondary)
}
