// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Assistant_ConnectPrepare(gpointer, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_Assistant_ConnectEscape(gpointer, guintptr);
// extern void _gotk4_gtk3_Assistant_ConnectClose(gpointer, guintptr);
// extern void _gotk4_gtk3_Assistant_ConnectCancel(gpointer, guintptr);
// extern void _gotk4_gtk3_Assistant_ConnectApply(gpointer, guintptr);
// extern void _gotk4_gtk3_AssistantClass_prepare(GtkAssistant*, GtkWidget*);
// extern void _gotk4_gtk3_AssistantClass_close(GtkAssistant*);
// extern void _gotk4_gtk3_AssistantClass_cancel(GtkAssistant*);
// extern void _gotk4_gtk3_AssistantClass_apply(GtkAssistant*);
// void _gotk4_gtk3_Assistant_virtual_apply(void* fnptr, GtkAssistant* arg0) {
//   ((void (*)(GtkAssistant*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Assistant_virtual_cancel(void* fnptr, GtkAssistant* arg0) {
//   ((void (*)(GtkAssistant*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Assistant_virtual_close(void* fnptr, GtkAssistant* arg0) {
//   ((void (*)(GtkAssistant*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Assistant_virtual_prepare(void* fnptr, GtkAssistant* arg0, GtkWidget* arg1) {
//   ((void (*)(GtkAssistant*, GtkWidget*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeAssistantPageType = coreglib.Type(C.gtk_assistant_page_type_get_type())
	GTypeAssistant         = coreglib.Type(C.gtk_assistant_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAssistantPageType, F: marshalAssistantPageType},
		coreglib.TypeMarshaler{T: GTypeAssistant, F: marshalAssistant},
	})
}

// AssistantPageType: enum for determining the page role inside the Assistant.
// It's used to handle buttons sensitivity and visibility.
//
// Note that an assistant needs to end its page flow with a page of type
// GTK_ASSISTANT_PAGE_CONFIRM, GTK_ASSISTANT_PAGE_SUMMARY or
// GTK_ASSISTANT_PAGE_PROGRESS to be correct.
//
// The Cancel button will only be shown if the page isn’t “committed”. See
// gtk_assistant_commit() for details.
type AssistantPageType C.gint

const (
	// AssistantPageContent: page has regular contents. Both the Back and
	// forward buttons will be shown.
	AssistantPageContent AssistantPageType = iota
	// AssistantPageIntro: page contains an introduction to the assistant task.
	// Only the Forward button will be shown if there is a next page.
	AssistantPageIntro
	// AssistantPageConfirm: page lets the user confirm or deny the changes. The
	// Back and Apply buttons will be shown.
	AssistantPageConfirm
	// AssistantPageSummary: page informs the user of the changes done. Only the
	// Close button will be shown.
	AssistantPageSummary
	// AssistantPageProgress: used for tasks that take a long time to complete,
	// blocks the assistant until the page is marked as complete. Only the back
	// button will be shown.
	AssistantPageProgress
	// AssistantPageCustom: used for when other page types are not appropriate.
	// No buttons will be shown, and the application must add its own buttons
	// through gtk_assistant_add_action_widget().
	AssistantPageCustom
)

func marshalAssistantPageType(p uintptr) (interface{}, error) {
	return AssistantPageType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AssistantPageType.
func (a AssistantPageType) String() string {
	switch a {
	case AssistantPageContent:
		return "Content"
	case AssistantPageIntro:
		return "Intro"
	case AssistantPageConfirm:
		return "Confirm"
	case AssistantPageSummary:
		return "Summary"
	case AssistantPageProgress:
		return "Progress"
	case AssistantPageCustom:
		return "Custom"
	default:
		return fmt.Sprintf("AssistantPageType(%d)", a)
	}
}

// AssistantPageFunc: function used by gtk_assistant_set_forward_page_func() to
// know which is the next page given a current one. It’s called both for
// computing the next page when the user presses the “forward” button and for
// handling the behavior of the “last” button.
type AssistantPageFunc func(currentPage int) (gint int)

// AssistantOverrides contains methods that are overridable.
type AssistantOverrides struct {
	Apply  func()
	Cancel func()
	Close  func()
	// The function takes the following parameters:
	//
	Prepare func(page Widgetter)
}

func defaultAssistantOverrides(v *Assistant) AssistantOverrides {
	return AssistantOverrides{
		Apply:   v.apply,
		Cancel:  v.cancel,
		Close:   v.close,
		Prepare: v.prepare,
	}
}

// Assistant is a widget used to represent a generally complex operation
// splitted in several steps, guiding the user through its pages and controlling
// the page flow to collect the necessary data.
//
// The design of GtkAssistant is that it controls what buttons to show and to
// make sensitive, based on what it knows about the page sequence and the
// [type][GtkAssistantPageType] of each page, in addition to state information
// like the page [completion][gtk-assistant-set-page-complete] and
// [committed][gtk-assistant-commit] status.
//
// If you have a case that doesn’t quite fit in Assistants way of handling
// buttons, you can use the K_ASSISTANT_PAGE_CUSTOM page type and handle buttons
// yourself.
//
//
// GtkAssistant as GtkBuildable
//
// The GtkAssistant implementation of the Buildable interface exposes the
// action_area as internal children with the name “action_area”.
//
// To add pages to an assistant in Builder, simply add it as a child to the
// GtkAssistant object, and set its child properties as necessary.
//
//
// CSS nodes
//
// GtkAssistant has a single CSS node with the name assistant.
type Assistant struct {
	_ [0]func() // equal guard
	Window
}

var (
	_ Binner = (*Assistant)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Assistant, *AssistantClass, AssistantOverrides](
		GTypeAssistant,
		initAssistantClass,
		wrapAssistant,
		defaultAssistantOverrides,
	)
}

func initAssistantClass(gclass unsafe.Pointer, overrides AssistantOverrides, classInitFunc func(*AssistantClass)) {
	pclass := (*C.GtkAssistantClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeAssistant))))

	if overrides.Apply != nil {
		pclass.apply = (*[0]byte)(C._gotk4_gtk3_AssistantClass_apply)
	}

	if overrides.Cancel != nil {
		pclass.cancel = (*[0]byte)(C._gotk4_gtk3_AssistantClass_cancel)
	}

	if overrides.Close != nil {
		pclass.close = (*[0]byte)(C._gotk4_gtk3_AssistantClass_close)
	}

	if overrides.Prepare != nil {
		pclass.prepare = (*[0]byte)(C._gotk4_gtk3_AssistantClass_prepare)
	}

	if classInitFunc != nil {
		class := (*AssistantClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAssistant(obj *coreglib.Object) *Assistant {
	return &Assistant{
		Window: Window{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalAssistant(p uintptr) (interface{}, error) {
	return wrapAssistant(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectApply signal is emitted when the apply button is clicked.
//
// The default behavior of the Assistant is to switch to the page after the
// current page, unless the current page is the last one.
//
// A handler for the ::apply signal should carry out the actions for which the
// wizard has collected data. If the action takes a long time to complete, you
// might consider putting a page of type GTK_ASSISTANT_PAGE_PROGRESS after the
// confirmation page and handle this operation within the Assistant::prepare
// signal of the progress page.
func (assistant *Assistant) ConnectApply(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(assistant, "apply", false, unsafe.Pointer(C._gotk4_gtk3_Assistant_ConnectApply), f)
}

// ConnectCancel signal is emitted when then the cancel button is clicked.
func (assistant *Assistant) ConnectCancel(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(assistant, "cancel", false, unsafe.Pointer(C._gotk4_gtk3_Assistant_ConnectCancel), f)
}

// ConnectClose signal is emitted either when the close button of a summary page
// is clicked, or when the apply button in the last page in the flow (of type
// GTK_ASSISTANT_PAGE_CONFIRM) is clicked.
func (assistant *Assistant) ConnectClose(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(assistant, "close", false, unsafe.Pointer(C._gotk4_gtk3_Assistant_ConnectClose), f)
}

func (assistant *Assistant) ConnectEscape(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(assistant, "escape", false, unsafe.Pointer(C._gotk4_gtk3_Assistant_ConnectEscape), f)
}

// ConnectPrepare signal is emitted when a new page is set as the assistant's
// current page, before making the new page visible.
//
// A handler for this signal can do any preparations which are necessary before
// showing page.
func (assistant *Assistant) ConnectPrepare(f func(page Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(assistant, "prepare", false, unsafe.Pointer(C._gotk4_gtk3_Assistant_ConnectPrepare), f)
}

func (assistant *Assistant) apply() {
	gclass := (*C.GtkAssistantClass)(coreglib.PeekParentClass(assistant))
	fnarg := gclass.apply

	var _arg0 *C.GtkAssistant // out

	_arg0 = (*C.GtkAssistant)(unsafe.Pointer(coreglib.InternObject(assistant).Native()))

	C._gotk4_gtk3_Assistant_virtual_apply(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(assistant)
}

func (assistant *Assistant) cancel() {
	gclass := (*C.GtkAssistantClass)(coreglib.PeekParentClass(assistant))
	fnarg := gclass.cancel

	var _arg0 *C.GtkAssistant // out

	_arg0 = (*C.GtkAssistant)(unsafe.Pointer(coreglib.InternObject(assistant).Native()))

	C._gotk4_gtk3_Assistant_virtual_cancel(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(assistant)
}

func (assistant *Assistant) close() {
	gclass := (*C.GtkAssistantClass)(coreglib.PeekParentClass(assistant))
	fnarg := gclass.close

	var _arg0 *C.GtkAssistant // out

	_arg0 = (*C.GtkAssistant)(unsafe.Pointer(coreglib.InternObject(assistant).Native()))

	C._gotk4_gtk3_Assistant_virtual_close(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(assistant)
}

// The function takes the following parameters:
//
func (assistant *Assistant) prepare(page Widgetter) {
	gclass := (*C.GtkAssistantClass)(coreglib.PeekParentClass(assistant))
	fnarg := gclass.prepare

	var _arg0 *C.GtkAssistant // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.GtkAssistant)(unsafe.Pointer(coreglib.InternObject(assistant).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(page).Native()))

	C._gotk4_gtk3_Assistant_virtual_prepare(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(assistant)
	runtime.KeepAlive(page)
}

// AssistantClass: instance of this type is always passed by reference.
type AssistantClass struct {
	*assistantClass
}

// assistantClass is the struct that's finalized.
type assistantClass struct {
	native *C.GtkAssistantClass
}

// ParentClass: parent class.
func (a *AssistantClass) ParentClass() *WindowClass {
	valptr := &a.native.parent_class
	var _v *WindowClass // out
	_v = (*WindowClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
