// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern AtkObject* _gotk4_gtk3_WidgetClass_get_accessible(void*);
// extern gboolean _gotk4_gtk3_TickCallback(void*, void*, gpointer);
// extern gboolean _gotk4_gtk3_WidgetClass_button_press_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_button_release_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_can_activate_accel(void*, guint);
// extern gboolean _gotk4_gtk3_WidgetClass_configure_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_damage_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_delete_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_destroy_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_drag_drop(void*, void*, gint, gint, guint);
// extern gboolean _gotk4_gtk3_WidgetClass_drag_motion(void*, void*, gint, gint, guint);
// extern gboolean _gotk4_gtk3_WidgetClass_draw(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_enter_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_focus_in_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_focus_out_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_grab_broken_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_key_press_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_key_release_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_leave_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_map_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_mnemonic_activate(void*, gboolean);
// extern gboolean _gotk4_gtk3_WidgetClass_motion_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_popup_menu(void*);
// extern gboolean _gotk4_gtk3_WidgetClass_property_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_proximity_in_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_proximity_out_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_query_tooltip(void*, gint, gint, gboolean, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_scroll_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_selection_clear_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_selection_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_selection_request_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_touch_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_unmap_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_visibility_notify_event(void*, void*);
// extern gboolean _gotk4_gtk3_WidgetClass_window_state_event(void*, void*);
// extern gboolean _gotk4_gtk3_Widget_ConnectButtonPressEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectButtonReleaseEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectCanActivateAccel(gpointer, guint, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectConfigureEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectDamageEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectDragDrop(gpointer, void*, gint, gint, guint, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectDragMotion(gpointer, void*, gint, gint, guint, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectDraw(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectEnterNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectFocusInEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectFocusOutEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectGrabBrokenEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectKeyPressEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectKeyReleaseEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectLeaveNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectMapEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectMnemonicActivate(gpointer, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectMotionNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectPopupMenu(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectPropertyNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectProximityInEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectProximityOutEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectQueryTooltip(gpointer, gint, gint, gboolean, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectScrollEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectSelectionClearEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectSelectionNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectSelectionRequestEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectUnmapEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectVisibilityNotifyEvent(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk3_Widget_ConnectWindowStateEvent(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_WidgetClass_adjust_baseline_allocation(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_adjust_baseline_request(void*, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_composited_changed(void*);
// extern void _gotk4_gtk3_WidgetClass_destroy(void*);
// extern void _gotk4_gtk3_WidgetClass_drag_begin(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_drag_data_delete(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_drag_data_get(void*, void*, void*, guint, guint);
// extern void _gotk4_gtk3_WidgetClass_drag_data_received(void*, void*, gint, gint, void*, guint, guint);
// extern void _gotk4_gtk3_WidgetClass_drag_end(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_drag_leave(void*, void*, guint);
// extern void _gotk4_gtk3_WidgetClass_get_preferred_height(void*, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_get_preferred_height_and_baseline_for_width(void*, gint, void*, void*, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_get_preferred_height_for_width(void*, gint, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_get_preferred_width(void*, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_get_preferred_width_for_height(void*, gint, void*, void*);
// extern void _gotk4_gtk3_WidgetClass_grab_focus(void*);
// extern void _gotk4_gtk3_WidgetClass_grab_notify(void*, gboolean);
// extern void _gotk4_gtk3_WidgetClass_hide(void*);
// extern void _gotk4_gtk3_WidgetClass_hierarchy_changed(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_map(void*);
// extern void _gotk4_gtk3_WidgetClass_parent_set(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_queue_draw_region(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_realize(void*);
// extern void _gotk4_gtk3_WidgetClass_screen_changed(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_selection_get(void*, void*, guint, guint);
// extern void _gotk4_gtk3_WidgetClass_selection_received(void*, void*, guint);
// extern void _gotk4_gtk3_WidgetClass_show(void*);
// extern void _gotk4_gtk3_WidgetClass_show_all(void*);
// extern void _gotk4_gtk3_WidgetClass_size_allocate(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_style_set(void*, void*);
// extern void _gotk4_gtk3_WidgetClass_style_updated(void*);
// extern void _gotk4_gtk3_WidgetClass_unmap(void*);
// extern void _gotk4_gtk3_WidgetClass_unrealize(void*);
// extern void _gotk4_gtk3_Widget_ConnectAccelClosuresChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectCompositedChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDestroy(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragBegin(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragDataDelete(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragDataGet(gpointer, void*, void*, guint, guint, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragDataReceived(gpointer, void*, gint, gint, void*, guint, guint, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragEnd(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectDragLeave(gpointer, void*, guint, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectGrabFocus(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectGrabNotify(gpointer, gboolean, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectHide(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectHierarchyChanged(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectMap(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectParentSet(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectRealize(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectScreenChanged(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectSelectionGet(gpointer, void*, guint, guint, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectSelectionReceived(gpointer, void*, guint, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectShow(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectSizeAllocate(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectStyleSet(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectStyleUpdated(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectUnmap(gpointer, guintptr);
// extern void _gotk4_gtk3_Widget_ConnectUnrealize(gpointer, guintptr);
// extern void callbackDelete(gpointer);
import "C"

// glib.Type values for gtkwidget.go.
var (
	GTypeWidgetHelpType = coreglib.Type(C.gtk_widget_help_type_get_type())
	GTypeWidget         = coreglib.Type(C.gtk_widget_get_type())
	GTypeRequisition    = coreglib.Type(C.gtk_requisition_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeWidgetHelpType, F: marshalWidgetHelpType},
		{T: GTypeWidget, F: marshalWidget},
		{T: GTypeRequisition, F: marshalRequisition},
	})
}

// Allocation of a widget represents region which has been allocated to the
// widget by its parent. It is a subregion of its parents allocation. See
// [GtkWidget’s geometry management section][geometry-management] for more
// information.
type Allocation = gdk.Rectangle

// WidgetHelpType kinds of widget-specific help. Used by the ::show-help signal.
type WidgetHelpType C.gint

const (
	// WidgetHelpTooltip: tooltip.
	WidgetHelpTooltip WidgetHelpType = iota
	// WidgetHelpWhatsThis what’s this.
	WidgetHelpWhatsThis
)

func marshalWidgetHelpType(p uintptr) (interface{}, error) {
	return WidgetHelpType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WidgetHelpType.
func (w WidgetHelpType) String() string {
	switch w {
	case WidgetHelpTooltip:
		return "Tooltip"
	case WidgetHelpWhatsThis:
		return "WhatsThis"
	default:
		return fmt.Sprintf("WidgetHelpType(%d)", w)
	}
}

// Callback: type of the callback functions used for e.g. iterating over the
// children of a container, see gtk_container_foreach().
type Callback func(widget Widgetter)

//export _gotk4_gtk3_Callback
func _gotk4_gtk3_Callback(arg1 *C.void, arg2 C.gpointer) {
	var fn Callback
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(Callback)
	}

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	fn(_widget)
}

// TickCallback: callback type for adding a function to update animations. See
// gtk_widget_add_tick_callback().
type TickCallback func(widget Widgetter, frameClock gdk.FrameClocker) (ok bool)

//export _gotk4_gtk3_TickCallback
func _gotk4_gtk3_TickCallback(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) (cret C.gboolean) {
	var fn TickCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(TickCallback)
	}

	var _widget Widgetter            // out
	var _frameClock gdk.FrameClocker // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gdk.FrameClocker is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.FrameClocker)
			return ok
		})
		rv, ok := casted.(gdk.FrameClocker)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.FrameClocker")
		}
		_frameClock = rv
	}

	ok := fn(_widget, _frameClock)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// CairoShouldDrawWindow: this function is supposed to be called in Widget::draw
// implementations for widgets that support multiple windows. cr must be
// untransformed from invoking of the draw function. This function will return
// TRUE if the contents of the given window are supposed to be drawn and FALSE
// otherwise. Note that when the drawing was not initiated by the windowing
// system this function will return TRUE for all windows, so you need to draw
// the bottommost window first. Also, do not use “else if” statements to check
// which window should be drawn.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - window to check. window may not be an input-only window.
//
// The function returns the following values:
//
//    - ok: TRUE if window should be drawn.
//
func CairoShouldDrawWindow(cr *cairo.Context, window gdk.Windower) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_gret := girepository.MustFind("Gtk", "cairo_should_draw_window").Invoke(_args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(cr)
	runtime.KeepAlive(window)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CairoTransformToWindow transforms the given cairo context cr that from
// widget-relative coordinates to window-relative coordinates. If the widget’s
// window is not an ancestor of window, no modification will be applied.
//
// This is the inverse to the transformation GTK applies when preparing an
// expose event to be emitted with the Widget::draw signal. It is intended to
// help porting multiwindow widgets from GTK+ 2 to the rendering architecture of
// GTK+ 3.
//
// The function takes the following parameters:
//
//    - cr: cairo context to transform.
//    - widget the context is currently centered for.
//    - window to transform the context to.
//
func CairoTransformToWindow(cr *cairo.Context, widget Widgetter, window gdk.Windower) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(cr.Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	girepository.MustFind("Gtk", "cairo_transform_to_window").Invoke(_args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}

// WidgetOverrider contains methods that are overridable.
type WidgetOverrider interface {
	// The function takes the following parameters:
	//
	AdjustBaselineAllocation(baseline *int32)
	// The function takes the following parameters:
	//
	//    - minimumBaseline
	//    - naturalBaseline
	//
	AdjustBaselineRequest(minimumBaseline, naturalBaseline *int32)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ButtonPressEvent(event *gdk.EventButton) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ButtonReleaseEvent(event *gdk.EventButton) bool
	// CanActivateAccel determines whether an accelerator that activates the
	// signal identified by signal_id can currently be activated. This is done
	// by emitting the Widget::can-activate-accel signal on widget; if the
	// signal isn’t overridden by a handler or in a derived widget, then the
	// default check is that the widget must be sensitive, and the widget and
	// all its ancestors mapped.
	//
	// The function takes the following parameters:
	//
	//    - signalId: ID of a signal installed on widget.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the accelerator can be activated.
	//
	CanActivateAccel(signalId uint32) bool
	CompositedChanged()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ConfigureEvent(event *gdk.EventConfigure) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	DamageEvent(event *gdk.EventExpose) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	DeleteEvent(event *gdk.EventAny) bool
	// Destroy destroys a widget.
	//
	// When a widget is destroyed all references it holds on other objects will
	// be released:
	//
	//    - if the widget is inside a container, it will be removed from its
	//    parent
	//    - if the widget is a container, all its children will be destroyed,
	//    recursively
	//    - if the widget is a top level, it will be removed from the list
	//    of top level widgets that GTK+ maintains internally
	//
	// It's expected that all references held on the widget will also be
	// released; you should connect to the Widget::destroy signal if you hold a
	// reference to widget and you wish to remove it when this function is
	// called. It is not necessary to do so if you are implementing a Container,
	// as you'll be able to use the ContainerClass.remove() virtual function for
	// that.
	//
	// It's important to notice that gtk_widget_destroy() will only cause the
	// widget to be finalized if no additional references, acquired using
	// g_object_ref(), are held on it. In case additional references are in
	// place, the widget will be in an "inert" state after calling this
	// function; widget will still point to valid memory, allowing you to
	// release the references you hold, but you may not query the widget's own
	// state.
	//
	// You should typically call this function on top level widgets, and rarely
	// on child widgets.
	//
	// See also: gtk_container_remove().
	Destroy()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	DestroyEvent(event *gdk.EventAny) bool
	// The function takes the following parameters:
	//
	DragBegin(context *gdk.DragContext)
	// The function takes the following parameters:
	//
	DragDataDelete(context *gdk.DragContext)
	// The function takes the following parameters:
	//
	//    - context
	//    - selectionData
	//    - info
	//    - time_
	//
	DragDataGet(context *gdk.DragContext, selectionData *SelectionData, info, time_ uint32)
	// The function takes the following parameters:
	//
	//    - context
	//    - x
	//    - y
	//    - selectionData
	//    - info
	//    - time_
	//
	DragDataReceived(context *gdk.DragContext, x, y int32, selectionData *SelectionData, info, time_ uint32)
	// The function takes the following parameters:
	//
	//    - context
	//    - x
	//    - y
	//    - time_
	//
	// The function returns the following values:
	//
	DragDrop(context *gdk.DragContext, x, y int32, time_ uint32) bool
	// The function takes the following parameters:
	//
	DragEnd(context *gdk.DragContext)
	// The function takes the following parameters:
	//
	//    - context
	//    - time_
	//
	DragLeave(context *gdk.DragContext, time_ uint32)
	// The function takes the following parameters:
	//
	//    - context
	//    - x
	//    - y
	//    - time_
	//
	// The function returns the following values:
	//
	DragMotion(context *gdk.DragContext, x, y int32, time_ uint32) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	Draw(cr *cairo.Context) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	EnterNotifyEvent(event *gdk.EventCrossing) bool
	// Event: rarely-used function. This function is used to emit the event
	// signals on a widget (those signals should never be emitted without using
	// this function to do so). If you want to synthesize an event though, don’t
	// use this function; instead, use gtk_main_do_event() so the event will
	// behave as if it were in the event queue. Don’t synthesize expose events;
	// instead, use gdk_window_invalidate_rect() to invalidate a region of the
	// window.
	//
	// The function takes the following parameters:
	//
	//    - event: Event.
	//
	// The function returns the following values:
	//
	//    - ok: return from the event signal emission (TRUE if the event was
	//      handled).
	//
	Event(event *gdk.Event) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	FocusInEvent(event *gdk.EventFocus) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	FocusOutEvent(event *gdk.EventFocus) bool
	// Accessible returns the accessible object that describes the widget to an
	// assistive technology.
	//
	// If accessibility support is not available, this Object instance may be a
	// no-op. Likewise, if no class-specific Object implementation is available
	// for the widget instance in question, it will inherit an Object
	// implementation from the first ancestor class for which such an
	// implementation is defined.
	//
	// The documentation of the ATK (http://developer.gnome.org/atk/stable/)
	// library contains more information about accessible objects and their
	// uses.
	//
	// The function returns the following values:
	//
	//    - object associated with widget.
	//
	Accessible() *atk.ObjectClass
	// PreferredHeight retrieves a widget’s initial minimum and natural height.
	//
	// This call is specific to width-for-height requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// The function returns the following values:
	//
	//    - minimumHeight (optional): location to store the minimum height, or
	//      NULL.
	//    - naturalHeight (optional): location to store the natural height, or
	//      NULL.
	//
	PreferredHeight() (minimumHeight, naturalHeight int32)
	// PreferredHeightAndBaselineForWidth retrieves a widget’s minimum and
	// natural height and the corresponding baselines if it would be given the
	// specified width, or the default height if width is -1. The baselines may
	// be -1 which means that no baseline is requested for this widget.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request and
	// GtkWidgetClass::adjust_baseline_request virtual methods and by any
	// SizeGroups that have been applied. That is, the returned request is the
	// one that should be used for layout, not necessarily the one returned by
	// the widget itself.
	//
	// The function takes the following parameters:
	//
	//    - width which is available for allocation, or -1 if none.
	//
	// The function returns the following values:
	//
	//    - minimumHeight (optional): location for storing the minimum height, or
	//      NULL.
	//    - naturalHeight (optional): location for storing the natural height, or
	//      NULL.
	//    - minimumBaseline (optional): location for storing the baseline for the
	//      minimum height, or NULL.
	//    - naturalBaseline (optional): location for storing the baseline for the
	//      natural height, or NULL.
	//
	PreferredHeightAndBaselineForWidth(width int32) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int32)
	// PreferredHeightForWidth retrieves a widget’s minimum and natural height
	// if it would be given the specified width.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// The function takes the following parameters:
	//
	//    - width which is available for allocation.
	//
	// The function returns the following values:
	//
	//    - minimumHeight (optional): location for storing the minimum height, or
	//      NULL.
	//    - naturalHeight (optional): location for storing the natural height, or
	//      NULL.
	//
	PreferredHeightForWidth(width int32) (minimumHeight, naturalHeight int32)
	// PreferredWidth retrieves a widget’s initial minimum and natural width.
	//
	// This call is specific to height-for-width requests.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// The function returns the following values:
	//
	//    - minimumWidth (optional): location to store the minimum width, or
	//      NULL.
	//    - naturalWidth (optional): location to store the natural width, or
	//      NULL.
	//
	PreferredWidth() (minimumWidth, naturalWidth int32)
	// PreferredWidthForHeight retrieves a widget’s minimum and natural width if
	// it would be given the specified height.
	//
	// The returned request will be modified by the
	// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups
	// that have been applied. That is, the returned request is the one that
	// should be used for layout, not necessarily the one returned by the widget
	// itself.
	//
	// The function takes the following parameters:
	//
	//    - height which is available for allocation.
	//
	// The function returns the following values:
	//
	//    - minimumWidth (optional): location for storing the minimum width, or
	//      NULL.
	//    - naturalWidth (optional): location for storing the natural width, or
	//      NULL.
	//
	PreferredWidthForHeight(height int32) (minimumWidth, naturalWidth int32)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	GrabBrokenEvent(event *gdk.EventGrabBroken) bool
	// GrabFocus causes widget to have the keyboard focus for the Window it's
	// inside. widget must be a focusable widget, such as a Entry; something
	// like Frame won’t work.
	//
	// More precisely, it must have the GTK_CAN_FOCUS flag set. Use
	// gtk_widget_set_can_focus() to modify that flag.
	//
	// The widget also needs to be realized and mapped. This is indicated by the
	// related signals. Grabbing the focus immediately after creating the widget
	// will likely fail and cause critical warnings.
	GrabFocus()
	// The function takes the following parameters:
	//
	GrabNotify(wasGrabbed bool)
	// Hide reverses the effects of gtk_widget_show(), causing the widget to be
	// hidden (invisible to the user).
	Hide()
	// The function takes the following parameters:
	//
	HierarchyChanged(previousToplevel Widgetter)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	KeyPressEvent(event *gdk.EventKey) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	KeyReleaseEvent(event *gdk.EventKey) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	LeaveNotifyEvent(event *gdk.EventCrossing) bool
	// Map: this function is only for use in widget implementations. Causes a
	// widget to be mapped if it isn’t already.
	Map()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	MapEvent(event *gdk.EventAny) bool
	// MnemonicActivate emits the Widget::mnemonic-activate signal.
	//
	// The function takes the following parameters:
	//
	//    - groupCycling: TRUE if there are other widgets with the same mnemonic.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the signal has been handled.
	//
	MnemonicActivate(groupCycling bool) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	MotionNotifyEvent(event *gdk.EventMotion) bool
	// The function takes the following parameters:
	//
	ParentSet(previousParent Widgetter)
	// The function returns the following values:
	//
	PopupMenu() bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	PropertyNotifyEvent(event *gdk.EventProperty) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ProximityInEvent(event *gdk.EventProximity) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ProximityOutEvent(event *gdk.EventProximity) bool
	// The function takes the following parameters:
	//
	//    - x
	//    - y
	//    - keyboardTooltip
	//    - tooltip
	//
	// The function returns the following values:
	//
	QueryTooltip(x, y int32, keyboardTooltip bool, tooltip *Tooltip) bool
	// QueueDrawRegion invalidates the area of widget defined by region by
	// calling gdk_window_invalidate_region() on the widget’s window and all its
	// child windows. Once the main loop becomes idle (after the current batch
	// of events has been processed, roughly), the window will receive expose
	// events for the union of all regions that have been invalidated.
	//
	// Normally you would only use this function in widget implementations. You
	// might also use it to schedule a redraw of a DrawingArea or some portion
	// thereof.
	//
	// The function takes the following parameters:
	//
	//    - region to draw.
	//
	QueueDrawRegion(region *cairo.Region)
	// Realize creates the GDK (windowing system) resources associated with a
	// widget. For example, widget->window will be created when a widget is
	// realized. Normally realization happens implicitly; if you show a widget
	// and all its parent containers, then the widget will be realized and
	// mapped automatically.
	//
	// Realizing a widget requires all the widget’s parent widgets to be
	// realized; calling gtk_widget_realize() realizes the widget’s parents in
	// addition to widget itself. If a widget is not yet inside a toplevel
	// window when you realize it, bad things will happen.
	//
	// This function is primarily used in widget implementations, and isn’t very
	// useful otherwise. Many times when you think you might need it, a better
	// approach is to connect to a signal that will be called after the widget
	// is realized automatically, such as Widget::draw. Or simply
	// g_signal_connect () to the Widget::realize signal.
	Realize()
	// The function takes the following parameters:
	//
	ScreenChanged(previousScreen *gdk.Screen)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ScrollEvent(event *gdk.EventScroll) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	SelectionClearEvent(event *gdk.EventSelection) bool
	// The function takes the following parameters:
	//
	//    - selectionData
	//    - info
	//    - time_
	//
	SelectionGet(selectionData *SelectionData, info, time_ uint32)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	SelectionNotifyEvent(event *gdk.EventSelection) bool
	// The function takes the following parameters:
	//
	//    - selectionData
	//    - time_
	//
	SelectionReceived(selectionData *SelectionData, time_ uint32)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	SelectionRequestEvent(event *gdk.EventSelection) bool
	// Show flags a widget to be displayed. Any widget that isn’t shown will not
	// appear on the screen. If you want to show all the widgets in a container,
	// it’s easier to call gtk_widget_show_all() on the container, instead of
	// individually showing the widgets.
	//
	// Remember that you have to show the containers containing a widget, in
	// addition to the widget itself, before it will appear onscreen.
	//
	// When a toplevel container is shown, it is immediately realized and
	// mapped; other shown widgets are realized and mapped when their toplevel
	// container is realized and mapped.
	Show()
	// ShowAll: recursively shows a widget, and any child widgets (if the widget
	// is a container).
	ShowAll()
	// SizeAllocate: this function is only used by Container subclasses, to
	// assign a size and position to their child widgets.
	//
	// In this function, the allocation may be adjusted. It will be forced to a
	// 1x1 minimum size, and the adjust_size_allocation virtual method on the
	// child will be used to adjust the allocation. Standard adjustments include
	// removing the widget’s margins, and applying the widget’s Widget:halign
	// and Widget:valign properties.
	//
	// For baseline support in containers you need to use
	// gtk_widget_size_allocate_with_baseline() instead.
	//
	// The function takes the following parameters:
	//
	//    - allocation: position and size to be allocated to widget.
	//
	SizeAllocate(allocation *Allocation)
	// The function takes the following parameters:
	//
	StyleSet(previousStyle *Style)
	StyleUpdated()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	TouchEvent(event *gdk.EventTouch) bool
	// Unmap: this function is only for use in widget implementations. Causes a
	// widget to be unmapped if it’s currently mapped.
	Unmap()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	UnmapEvent(event *gdk.EventAny) bool
	// Unrealize: this function is only useful in widget implementations. Causes
	// a widget to be unrealized (frees all GDK resources associated with the
	// widget, such as widget->window).
	Unrealize()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	VisibilityNotifyEvent(event *gdk.EventVisibility) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	WindowStateEvent(event *gdk.EventWindowState) bool
}

// Widget is the base class all widgets in GTK+ derive from. It manages the
// widget lifecycle, states and style.
//
//
// Height-for-width Geometry Management
//
// GTK+ uses a height-for-width (and width-for-height) geometry management
// system. Height-for-width means that a widget can change how much vertical
// space it needs, depending on the amount of horizontal space that it is given
// (and similar for width-for-height). The most common example is a label that
// reflows to fill up the available width, wraps to fewer lines, and therefore
// needs less height.
//
// Height-for-width geometry management is implemented in GTK+ by way of five
// virtual methods:
//
// - WidgetClass.get_request_mode()
//
// - WidgetClass.get_preferred_width()
//
// - WidgetClass.get_preferred_height()
//
// - WidgetClass.get_preferred_height_for_width()
//
// - WidgetClass.get_preferred_width_for_height()
//
// - WidgetClass.get_preferred_height_and_baseline_for_width()
//
// There are some important things to keep in mind when implementing
// height-for-width and when using it in container implementations.
//
// The geometry management system will query a widget hierarchy in only one
// orientation at a time. When widgets are initially queried for their minimum
// sizes it is generally done in two initial passes in the SizeRequestMode
// chosen by the toplevel.
//
// For example, when queried in the normal GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
// mode: First, the default minimum and natural width for each widget in the
// interface will be computed using gtk_widget_get_preferred_width(). Because
// the preferred widths for each container depend on the preferred widths of
// their children, this information propagates up the hierarchy, and finally a
// minimum and natural width is determined for the entire toplevel. Next, the
// toplevel will use the minimum width to query for the minimum height
// contextual to that width using gtk_widget_get_preferred_height_for_width(),
// which will also be a highly recursive operation. The minimum height for the
// minimum width is normally used to set the minimum size constraint on the
// toplevel (unless gtk_window_set_geometry_hints() is explicitly used instead).
//
// After the toplevel window has initially requested its size in both dimensions
// it can go on to allocate itself a reasonable size (or a size previously
// specified with gtk_window_set_default_size()). During the recursive
// allocation process it’s important to note that request cycles will be
// recursively executed while container widgets allocate their children. Each
// container widget, once allocated a size, will go on to first share the space
// in one orientation among its children and then request each child's height
// for its target allocated width or its width for allocated height, depending.
// In this way a Widget will typically be requested its size a number of times
// before actually being allocated a size. The size a widget is finally
// allocated can of course differ from the size it has requested. For this
// reason, Widget caches a small number of results to avoid re-querying for the
// same sizes in one allocation cycle.
//
// See [GtkContainer’s geometry management
// section][container-geometry-management] to learn more about how
// height-for-width allocations are performed by container widgets.
//
// If a widget does move content around to intelligently use up the allocated
// size then it must support the request in both SizeRequestModes even if the
// widget in question only trades sizes in a single orientation.
//
// For instance, a Label that does height-for-width word wrapping will not
// expect to have WidgetClass.get_preferred_height() called because that call is
// specific to a width-for-height request. In this case the label must return
// the height required for its own minimum possible width. By following this
// rule any widget that handles height-for-width or width-for-height requests
// will always be allocated at least enough space to fit its own content.
//
// Here are some examples of how a GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
// generally deals with width-for-height requests, for
// WidgetClass.get_preferred_height() it will do:
//
//    // the signal handler has the instance and user data swapped
//    // because of the swapped="yes" attribute in the template XML
//    static void
//    hello_button_clicked (FooWidget *self,
//                          GtkButton *button)
//    {
//      g_print ("Hello, world!\n");
//    }
//
//    static void
//    foo_widget_class_init (FooWidgetClass *klass)
//    {
//      // ...
//      gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
//                                                   "/com/example/ui/foowidget.ui");
//      gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
//    }.
type Widget struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned

	*coreglib.Object
	atk.ImplementorIface
	Buildable
}

var (
	_ coreglib.Objector = (*Widget)(nil)
)

// Widgetter describes types inherited from class Widget.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Widgetter interface {
	coreglib.Objector
	baseWidget() *Widget
}

var _ Widgetter = (*Widget)(nil)

func classInitWidgetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkWidgetClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkWidgetClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ AdjustBaselineAllocation(baseline *int32) }); ok {
		pclass.adjust_baseline_allocation = (*[0]byte)(C._gotk4_gtk3_WidgetClass_adjust_baseline_allocation)
	}

	if _, ok := goval.(interface {
		AdjustBaselineRequest(minimumBaseline, naturalBaseline *int32)
	}); ok {
		pclass.adjust_baseline_request = (*[0]byte)(C._gotk4_gtk3_WidgetClass_adjust_baseline_request)
	}

	if _, ok := goval.(interface {
		ButtonPressEvent(event *gdk.EventButton) bool
	}); ok {
		pclass.button_press_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_button_press_event)
	}

	if _, ok := goval.(interface {
		ButtonReleaseEvent(event *gdk.EventButton) bool
	}); ok {
		pclass.button_release_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_button_release_event)
	}

	if _, ok := goval.(interface{ CanActivateAccel(signalId uint32) bool }); ok {
		pclass.can_activate_accel = (*[0]byte)(C._gotk4_gtk3_WidgetClass_can_activate_accel)
	}

	if _, ok := goval.(interface{ CompositedChanged() }); ok {
		pclass.composited_changed = (*[0]byte)(C._gotk4_gtk3_WidgetClass_composited_changed)
	}

	if _, ok := goval.(interface {
		ConfigureEvent(event *gdk.EventConfigure) bool
	}); ok {
		pclass.configure_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_configure_event)
	}

	if _, ok := goval.(interface {
		DamageEvent(event *gdk.EventExpose) bool
	}); ok {
		pclass.damage_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_damage_event)
	}

	if _, ok := goval.(interface {
		DeleteEvent(event *gdk.EventAny) bool
	}); ok {
		pclass.delete_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_delete_event)
	}

	if _, ok := goval.(interface{ Destroy() }); ok {
		pclass.destroy = (*[0]byte)(C._gotk4_gtk3_WidgetClass_destroy)
	}

	if _, ok := goval.(interface {
		DestroyEvent(event *gdk.EventAny) bool
	}); ok {
		pclass.destroy_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_destroy_event)
	}

	if _, ok := goval.(interface {
		DragBegin(context *gdk.DragContext)
	}); ok {
		pclass.drag_begin = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_begin)
	}

	if _, ok := goval.(interface {
		DragDataDelete(context *gdk.DragContext)
	}); ok {
		pclass.drag_data_delete = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_data_delete)
	}

	if _, ok := goval.(interface {
		DragDataGet(context *gdk.DragContext, selectionData *SelectionData, info, time_ uint32)
	}); ok {
		pclass.drag_data_get = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_data_get)
	}

	if _, ok := goval.(interface {
		DragDataReceived(context *gdk.DragContext, x, y int32, selectionData *SelectionData, info, time_ uint32)
	}); ok {
		pclass.drag_data_received = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_data_received)
	}

	if _, ok := goval.(interface {
		DragDrop(context *gdk.DragContext, x, y int32, time_ uint32) bool
	}); ok {
		pclass.drag_drop = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_drop)
	}

	if _, ok := goval.(interface {
		DragEnd(context *gdk.DragContext)
	}); ok {
		pclass.drag_end = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_end)
	}

	if _, ok := goval.(interface {
		DragLeave(context *gdk.DragContext, time_ uint32)
	}); ok {
		pclass.drag_leave = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_leave)
	}

	if _, ok := goval.(interface {
		DragMotion(context *gdk.DragContext, x, y int32, time_ uint32) bool
	}); ok {
		pclass.drag_motion = (*[0]byte)(C._gotk4_gtk3_WidgetClass_drag_motion)
	}

	if _, ok := goval.(interface{ Draw(cr *cairo.Context) bool }); ok {
		pclass.draw = (*[0]byte)(C._gotk4_gtk3_WidgetClass_draw)
	}

	if _, ok := goval.(interface {
		EnterNotifyEvent(event *gdk.EventCrossing) bool
	}); ok {
		pclass.enter_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_enter_notify_event)
	}

	if _, ok := goval.(interface{ Event(event *gdk.Event) bool }); ok {
		pclass.event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_event)
	}

	if _, ok := goval.(interface {
		FocusInEvent(event *gdk.EventFocus) bool
	}); ok {
		pclass.focus_in_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_focus_in_event)
	}

	if _, ok := goval.(interface {
		FocusOutEvent(event *gdk.EventFocus) bool
	}); ok {
		pclass.focus_out_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_focus_out_event)
	}

	if _, ok := goval.(interface{ Accessible() *atk.ObjectClass }); ok {
		pclass.get_accessible = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_accessible)
	}

	if _, ok := goval.(interface {
		PreferredHeight() (minimumHeight, naturalHeight int32)
	}); ok {
		pclass.get_preferred_height = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_preferred_height)
	}

	if _, ok := goval.(interface {
		PreferredHeightAndBaselineForWidth(width int32) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int32)
	}); ok {
		pclass.get_preferred_height_and_baseline_for_width = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_preferred_height_and_baseline_for_width)
	}

	if _, ok := goval.(interface {
		PreferredHeightForWidth(width int32) (minimumHeight, naturalHeight int32)
	}); ok {
		pclass.get_preferred_height_for_width = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_preferred_height_for_width)
	}

	if _, ok := goval.(interface {
		PreferredWidth() (minimumWidth, naturalWidth int32)
	}); ok {
		pclass.get_preferred_width = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_preferred_width)
	}

	if _, ok := goval.(interface {
		PreferredWidthForHeight(height int32) (minimumWidth, naturalWidth int32)
	}); ok {
		pclass.get_preferred_width_for_height = (*[0]byte)(C._gotk4_gtk3_WidgetClass_get_preferred_width_for_height)
	}

	if _, ok := goval.(interface {
		GrabBrokenEvent(event *gdk.EventGrabBroken) bool
	}); ok {
		pclass.grab_broken_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_grab_broken_event)
	}

	if _, ok := goval.(interface{ GrabFocus() }); ok {
		pclass.grab_focus = (*[0]byte)(C._gotk4_gtk3_WidgetClass_grab_focus)
	}

	if _, ok := goval.(interface{ GrabNotify(wasGrabbed bool) }); ok {
		pclass.grab_notify = (*[0]byte)(C._gotk4_gtk3_WidgetClass_grab_notify)
	}

	if _, ok := goval.(interface{ Hide() }); ok {
		pclass.hide = (*[0]byte)(C._gotk4_gtk3_WidgetClass_hide)
	}

	if _, ok := goval.(interface {
		HierarchyChanged(previousToplevel Widgetter)
	}); ok {
		pclass.hierarchy_changed = (*[0]byte)(C._gotk4_gtk3_WidgetClass_hierarchy_changed)
	}

	if _, ok := goval.(interface {
		KeyPressEvent(event *gdk.EventKey) bool
	}); ok {
		pclass.key_press_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_key_press_event)
	}

	if _, ok := goval.(interface {
		KeyReleaseEvent(event *gdk.EventKey) bool
	}); ok {
		pclass.key_release_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_key_release_event)
	}

	if _, ok := goval.(interface {
		LeaveNotifyEvent(event *gdk.EventCrossing) bool
	}); ok {
		pclass.leave_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_leave_notify_event)
	}

	if _, ok := goval.(interface{ Map() }); ok {
		pclass._map = (*[0]byte)(C._gotk4_gtk3_WidgetClass_map)
	}

	if _, ok := goval.(interface {
		MapEvent(event *gdk.EventAny) bool
	}); ok {
		pclass.map_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_map_event)
	}

	if _, ok := goval.(interface{ MnemonicActivate(groupCycling bool) bool }); ok {
		pclass.mnemonic_activate = (*[0]byte)(C._gotk4_gtk3_WidgetClass_mnemonic_activate)
	}

	if _, ok := goval.(interface {
		MotionNotifyEvent(event *gdk.EventMotion) bool
	}); ok {
		pclass.motion_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_motion_notify_event)
	}

	if _, ok := goval.(interface {
		ParentSet(previousParent Widgetter)
	}); ok {
		pclass.parent_set = (*[0]byte)(C._gotk4_gtk3_WidgetClass_parent_set)
	}

	if _, ok := goval.(interface{ PopupMenu() bool }); ok {
		pclass.popup_menu = (*[0]byte)(C._gotk4_gtk3_WidgetClass_popup_menu)
	}

	if _, ok := goval.(interface {
		PropertyNotifyEvent(event *gdk.EventProperty) bool
	}); ok {
		pclass.property_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_property_notify_event)
	}

	if _, ok := goval.(interface {
		ProximityInEvent(event *gdk.EventProximity) bool
	}); ok {
		pclass.proximity_in_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_proximity_in_event)
	}

	if _, ok := goval.(interface {
		ProximityOutEvent(event *gdk.EventProximity) bool
	}); ok {
		pclass.proximity_out_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_proximity_out_event)
	}

	if _, ok := goval.(interface {
		QueryTooltip(x, y int32, keyboardTooltip bool, tooltip *Tooltip) bool
	}); ok {
		pclass.query_tooltip = (*[0]byte)(C._gotk4_gtk3_WidgetClass_query_tooltip)
	}

	if _, ok := goval.(interface{ QueueDrawRegion(region *cairo.Region) }); ok {
		pclass.queue_draw_region = (*[0]byte)(C._gotk4_gtk3_WidgetClass_queue_draw_region)
	}

	if _, ok := goval.(interface{ Realize() }); ok {
		pclass.realize = (*[0]byte)(C._gotk4_gtk3_WidgetClass_realize)
	}

	if _, ok := goval.(interface {
		ScreenChanged(previousScreen *gdk.Screen)
	}); ok {
		pclass.screen_changed = (*[0]byte)(C._gotk4_gtk3_WidgetClass_screen_changed)
	}

	if _, ok := goval.(interface {
		ScrollEvent(event *gdk.EventScroll) bool
	}); ok {
		pclass.scroll_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_scroll_event)
	}

	if _, ok := goval.(interface {
		SelectionClearEvent(event *gdk.EventSelection) bool
	}); ok {
		pclass.selection_clear_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_selection_clear_event)
	}

	if _, ok := goval.(interface {
		SelectionGet(selectionData *SelectionData, info, time_ uint32)
	}); ok {
		pclass.selection_get = (*[0]byte)(C._gotk4_gtk3_WidgetClass_selection_get)
	}

	if _, ok := goval.(interface {
		SelectionNotifyEvent(event *gdk.EventSelection) bool
	}); ok {
		pclass.selection_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_selection_notify_event)
	}

	if _, ok := goval.(interface {
		SelectionReceived(selectionData *SelectionData, time_ uint32)
	}); ok {
		pclass.selection_received = (*[0]byte)(C._gotk4_gtk3_WidgetClass_selection_received)
	}

	if _, ok := goval.(interface {
		SelectionRequestEvent(event *gdk.EventSelection) bool
	}); ok {
		pclass.selection_request_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_selection_request_event)
	}

	if _, ok := goval.(interface{ Show() }); ok {
		pclass.show = (*[0]byte)(C._gotk4_gtk3_WidgetClass_show)
	}

	if _, ok := goval.(interface{ ShowAll() }); ok {
		pclass.show_all = (*[0]byte)(C._gotk4_gtk3_WidgetClass_show_all)
	}

	if _, ok := goval.(interface{ SizeAllocate(allocation *Allocation) }); ok {
		pclass.size_allocate = (*[0]byte)(C._gotk4_gtk3_WidgetClass_size_allocate)
	}

	if _, ok := goval.(interface{ StyleSet(previousStyle *Style) }); ok {
		pclass.style_set = (*[0]byte)(C._gotk4_gtk3_WidgetClass_style_set)
	}

	if _, ok := goval.(interface{ StyleUpdated() }); ok {
		pclass.style_updated = (*[0]byte)(C._gotk4_gtk3_WidgetClass_style_updated)
	}

	if _, ok := goval.(interface {
		TouchEvent(event *gdk.EventTouch) bool
	}); ok {
		pclass.touch_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_touch_event)
	}

	if _, ok := goval.(interface{ Unmap() }); ok {
		pclass.unmap = (*[0]byte)(C._gotk4_gtk3_WidgetClass_unmap)
	}

	if _, ok := goval.(interface {
		UnmapEvent(event *gdk.EventAny) bool
	}); ok {
		pclass.unmap_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_unmap_event)
	}

	if _, ok := goval.(interface{ Unrealize() }); ok {
		pclass.unrealize = (*[0]byte)(C._gotk4_gtk3_WidgetClass_unrealize)
	}

	if _, ok := goval.(interface {
		VisibilityNotifyEvent(event *gdk.EventVisibility) bool
	}); ok {
		pclass.visibility_notify_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_visibility_notify_event)
	}

	if _, ok := goval.(interface {
		WindowStateEvent(event *gdk.EventWindowState) bool
	}); ok {
		pclass.window_state_event = (*[0]byte)(C._gotk4_gtk3_WidgetClass_window_state_event)
	}
}

//export _gotk4_gtk3_WidgetClass_adjust_baseline_allocation
func _gotk4_gtk3_WidgetClass_adjust_baseline_allocation(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ AdjustBaselineAllocation(baseline *int32) })

	var _baseline *int32 // out

	_baseline = (*int32)(unsafe.Pointer(arg1))

	iface.AdjustBaselineAllocation(_baseline)
}

//export _gotk4_gtk3_WidgetClass_adjust_baseline_request
func _gotk4_gtk3_WidgetClass_adjust_baseline_request(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		AdjustBaselineRequest(minimumBaseline, naturalBaseline *int32)
	})

	var _minimumBaseline *int32 // out
	var _naturalBaseline *int32 // out

	_minimumBaseline = (*int32)(unsafe.Pointer(arg1))
	_naturalBaseline = (*int32)(unsafe.Pointer(arg2))

	iface.AdjustBaselineRequest(_minimumBaseline, _naturalBaseline)
}

//export _gotk4_gtk3_WidgetClass_button_press_event
func _gotk4_gtk3_WidgetClass_button_press_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ButtonPressEvent(event *gdk.EventButton) bool
	})

	var _event *gdk.EventButton // out

	_event = (*gdk.EventButton)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ButtonPressEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_button_release_event
func _gotk4_gtk3_WidgetClass_button_release_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ButtonReleaseEvent(event *gdk.EventButton) bool
	})

	var _event *gdk.EventButton // out

	_event = (*gdk.EventButton)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ButtonReleaseEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_can_activate_accel
func _gotk4_gtk3_WidgetClass_can_activate_accel(arg0 *C.void, arg1 C.guint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CanActivateAccel(signalId uint32) bool })

	var _signalId uint32 // out

	_signalId = uint32(arg1)

	ok := iface.CanActivateAccel(_signalId)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_composited_changed
func _gotk4_gtk3_WidgetClass_composited_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CompositedChanged() })

	iface.CompositedChanged()
}

//export _gotk4_gtk3_WidgetClass_configure_event
func _gotk4_gtk3_WidgetClass_configure_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ConfigureEvent(event *gdk.EventConfigure) bool
	})

	var _event *gdk.EventConfigure // out

	_event = (*gdk.EventConfigure)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ConfigureEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_damage_event
func _gotk4_gtk3_WidgetClass_damage_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DamageEvent(event *gdk.EventExpose) bool
	})

	var _event *gdk.EventExpose // out

	_event = (*gdk.EventExpose)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.DamageEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_delete_event
func _gotk4_gtk3_WidgetClass_delete_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DeleteEvent(event *gdk.EventAny) bool
	})

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.DeleteEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_destroy
func _gotk4_gtk3_WidgetClass_destroy(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Destroy() })

	iface.Destroy()
}

//export _gotk4_gtk3_WidgetClass_destroy_event
func _gotk4_gtk3_WidgetClass_destroy_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DestroyEvent(event *gdk.EventAny) bool
	})

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.DestroyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_drag_begin
func _gotk4_gtk3_WidgetClass_drag_begin(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragBegin(context *gdk.DragContext)
	})

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	iface.DragBegin(_context)
}

//export _gotk4_gtk3_WidgetClass_drag_data_delete
func _gotk4_gtk3_WidgetClass_drag_data_delete(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragDataDelete(context *gdk.DragContext)
	})

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	iface.DragDataDelete(_context)
}

//export _gotk4_gtk3_WidgetClass_drag_data_get
func _gotk4_gtk3_WidgetClass_drag_data_get(arg0 *C.void, arg1 *C.void, arg2 *C.void, arg3 C.guint, arg4 C.guint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragDataGet(context *gdk.DragContext, selectionData *SelectionData, info, time_ uint32)
	})

	var _context *gdk.DragContext     // out
	var _selectionData *SelectionData // out
	var _info uint32                  // out
	var _time_ uint32                 // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_selectionData = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_info = uint32(arg3)
	_time_ = uint32(arg4)

	iface.DragDataGet(_context, _selectionData, _info, _time_)
}

//export _gotk4_gtk3_WidgetClass_drag_data_received
func _gotk4_gtk3_WidgetClass_drag_data_received(arg0 *C.void, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 *C.void, arg5 C.guint, arg6 C.guint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragDataReceived(context *gdk.DragContext, x, y int32, selectionData *SelectionData, info, time_ uint32)
	})

	var _context *gdk.DragContext     // out
	var _x int32                      // out
	var _y int32                      // out
	var _selectionData *SelectionData // out
	var _info uint32                  // out
	var _time_ uint32                 // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_selectionData = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_info = uint32(arg5)
	_time_ = uint32(arg6)

	iface.DragDataReceived(_context, _x, _y, _selectionData, _info, _time_)
}

//export _gotk4_gtk3_WidgetClass_drag_drop
func _gotk4_gtk3_WidgetClass_drag_drop(arg0 *C.void, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 C.guint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragDrop(context *gdk.DragContext, x, y int32, time_ uint32) bool
	})

	var _context *gdk.DragContext // out
	var _x int32                  // out
	var _y int32                  // out
	var _time_ uint32             // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_time_ = uint32(arg4)

	ok := iface.DragDrop(_context, _x, _y, _time_)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_drag_end
func _gotk4_gtk3_WidgetClass_drag_end(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragEnd(context *gdk.DragContext)
	})

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	iface.DragEnd(_context)
}

//export _gotk4_gtk3_WidgetClass_drag_leave
func _gotk4_gtk3_WidgetClass_drag_leave(arg0 *C.void, arg1 *C.void, arg2 C.guint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragLeave(context *gdk.DragContext, time_ uint32)
	})

	var _context *gdk.DragContext // out
	var _time_ uint32             // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_time_ = uint32(arg2)

	iface.DragLeave(_context, _time_)
}

//export _gotk4_gtk3_WidgetClass_drag_motion
func _gotk4_gtk3_WidgetClass_drag_motion(arg0 *C.void, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 C.guint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DragMotion(context *gdk.DragContext, x, y int32, time_ uint32) bool
	})

	var _context *gdk.DragContext // out
	var _x int32                  // out
	var _y int32                  // out
	var _time_ uint32             // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_time_ = uint32(arg4)

	ok := iface.DragMotion(_context, _x, _y, _time_)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_draw
func _gotk4_gtk3_WidgetClass_draw(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Draw(cr *cairo.Context) bool })

	var _cr *cairo.Context // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	ok := iface.Draw(_cr)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_enter_notify_event
func _gotk4_gtk3_WidgetClass_enter_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		EnterNotifyEvent(event *gdk.EventCrossing) bool
	})

	var _event *gdk.EventCrossing // out

	_event = (*gdk.EventCrossing)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.EnterNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_event
func _gotk4_gtk3_WidgetClass_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Event(event *gdk.Event) bool })

	var _event *gdk.Event // out

	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer(arg1)))
		v = gdk.CopyEventer(v)
		_event = v
	}

	ok := iface.Event(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_focus_in_event
func _gotk4_gtk3_WidgetClass_focus_in_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FocusInEvent(event *gdk.EventFocus) bool
	})

	var _event *gdk.EventFocus // out

	_event = (*gdk.EventFocus)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.FocusInEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_focus_out_event
func _gotk4_gtk3_WidgetClass_focus_out_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FocusOutEvent(event *gdk.EventFocus) bool
	})

	var _event *gdk.EventFocus // out

	_event = (*gdk.EventFocus)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.FocusOutEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_get_accessible
func _gotk4_gtk3_WidgetClass_get_accessible(arg0 *C.void) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Accessible() *atk.ObjectClass })

	object := iface.Accessible()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	return cret
}

//export _gotk4_gtk3_WidgetClass_get_preferred_height
func _gotk4_gtk3_WidgetClass_get_preferred_height(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreferredHeight() (minimumHeight, naturalHeight int32)
	})

	minimumHeight, naturalHeight := iface.PreferredHeight()

	*arg1 = (*C.void)(unsafe.Pointer(minimumHeight))
	*arg2 = (*C.void)(unsafe.Pointer(naturalHeight))
}

//export _gotk4_gtk3_WidgetClass_get_preferred_height_and_baseline_for_width
func _gotk4_gtk3_WidgetClass_get_preferred_height_and_baseline_for_width(arg0 *C.void, arg1 C.gint, arg2 *C.void, arg3 *C.void, arg4 *C.void, arg5 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreferredHeightAndBaselineForWidth(width int32) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int32)
	})

	var _width int32 // out

	_width = int32(arg1)

	minimumHeight, naturalHeight, minimumBaseline, naturalBaseline := iface.PreferredHeightAndBaselineForWidth(_width)

	*arg2 = (*C.void)(unsafe.Pointer(minimumHeight))
	*arg3 = (*C.void)(unsafe.Pointer(naturalHeight))
	*arg4 = (*C.void)(unsafe.Pointer(minimumBaseline))
	*arg5 = (*C.void)(unsafe.Pointer(naturalBaseline))
}

//export _gotk4_gtk3_WidgetClass_get_preferred_height_for_width
func _gotk4_gtk3_WidgetClass_get_preferred_height_for_width(arg0 *C.void, arg1 C.gint, arg2 *C.void, arg3 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreferredHeightForWidth(width int32) (minimumHeight, naturalHeight int32)
	})

	var _width int32 // out

	_width = int32(arg1)

	minimumHeight, naturalHeight := iface.PreferredHeightForWidth(_width)

	*arg2 = (*C.void)(unsafe.Pointer(minimumHeight))
	*arg3 = (*C.void)(unsafe.Pointer(naturalHeight))
}

//export _gotk4_gtk3_WidgetClass_get_preferred_width
func _gotk4_gtk3_WidgetClass_get_preferred_width(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreferredWidth() (minimumWidth, naturalWidth int32)
	})

	minimumWidth, naturalWidth := iface.PreferredWidth()

	*arg1 = (*C.void)(unsafe.Pointer(minimumWidth))
	*arg2 = (*C.void)(unsafe.Pointer(naturalWidth))
}

//export _gotk4_gtk3_WidgetClass_get_preferred_width_for_height
func _gotk4_gtk3_WidgetClass_get_preferred_width_for_height(arg0 *C.void, arg1 C.gint, arg2 *C.void, arg3 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreferredWidthForHeight(height int32) (minimumWidth, naturalWidth int32)
	})

	var _height int32 // out

	_height = int32(arg1)

	minimumWidth, naturalWidth := iface.PreferredWidthForHeight(_height)

	*arg2 = (*C.void)(unsafe.Pointer(minimumWidth))
	*arg3 = (*C.void)(unsafe.Pointer(naturalWidth))
}

//export _gotk4_gtk3_WidgetClass_grab_broken_event
func _gotk4_gtk3_WidgetClass_grab_broken_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		GrabBrokenEvent(event *gdk.EventGrabBroken) bool
	})

	var _event *gdk.EventGrabBroken // out

	_event = (*gdk.EventGrabBroken)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.GrabBrokenEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_grab_focus
func _gotk4_gtk3_WidgetClass_grab_focus(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ GrabFocus() })

	iface.GrabFocus()
}

//export _gotk4_gtk3_WidgetClass_grab_notify
func _gotk4_gtk3_WidgetClass_grab_notify(arg0 *C.void, arg1 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ GrabNotify(wasGrabbed bool) })

	var _wasGrabbed bool // out

	if arg1 != 0 {
		_wasGrabbed = true
	}

	iface.GrabNotify(_wasGrabbed)
}

//export _gotk4_gtk3_WidgetClass_hide
func _gotk4_gtk3_WidgetClass_hide(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Hide() })

	iface.Hide()
}

//export _gotk4_gtk3_WidgetClass_hierarchy_changed
func _gotk4_gtk3_WidgetClass_hierarchy_changed(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		HierarchyChanged(previousToplevel Widgetter)
	})

	var _previousToplevel Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_previousToplevel = rv
	}

	iface.HierarchyChanged(_previousToplevel)
}

//export _gotk4_gtk3_WidgetClass_key_press_event
func _gotk4_gtk3_WidgetClass_key_press_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		KeyPressEvent(event *gdk.EventKey) bool
	})

	var _event *gdk.EventKey // out

	_event = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.KeyPressEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_key_release_event
func _gotk4_gtk3_WidgetClass_key_release_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		KeyReleaseEvent(event *gdk.EventKey) bool
	})

	var _event *gdk.EventKey // out

	_event = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.KeyReleaseEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_leave_notify_event
func _gotk4_gtk3_WidgetClass_leave_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		LeaveNotifyEvent(event *gdk.EventCrossing) bool
	})

	var _event *gdk.EventCrossing // out

	_event = (*gdk.EventCrossing)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.LeaveNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_map
func _gotk4_gtk3_WidgetClass_map(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Map() })

	iface.Map()
}

//export _gotk4_gtk3_WidgetClass_map_event
func _gotk4_gtk3_WidgetClass_map_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		MapEvent(event *gdk.EventAny) bool
	})

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.MapEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_mnemonic_activate
func _gotk4_gtk3_WidgetClass_mnemonic_activate(arg0 *C.void, arg1 C.gboolean) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ MnemonicActivate(groupCycling bool) bool })

	var _groupCycling bool // out

	if arg1 != 0 {
		_groupCycling = true
	}

	ok := iface.MnemonicActivate(_groupCycling)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_motion_notify_event
func _gotk4_gtk3_WidgetClass_motion_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		MotionNotifyEvent(event *gdk.EventMotion) bool
	})

	var _event *gdk.EventMotion // out

	_event = (*gdk.EventMotion)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.MotionNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_parent_set
func _gotk4_gtk3_WidgetClass_parent_set(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ParentSet(previousParent Widgetter)
	})

	var _previousParent Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_previousParent = rv
	}

	iface.ParentSet(_previousParent)
}

//export _gotk4_gtk3_WidgetClass_popup_menu
func _gotk4_gtk3_WidgetClass_popup_menu(arg0 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PopupMenu() bool })

	ok := iface.PopupMenu()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_property_notify_event
func _gotk4_gtk3_WidgetClass_property_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PropertyNotifyEvent(event *gdk.EventProperty) bool
	})

	var _event *gdk.EventProperty // out

	_event = (*gdk.EventProperty)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.PropertyNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_proximity_in_event
func _gotk4_gtk3_WidgetClass_proximity_in_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ProximityInEvent(event *gdk.EventProximity) bool
	})

	var _event *gdk.EventProximity // out

	_event = (*gdk.EventProximity)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ProximityInEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_proximity_out_event
func _gotk4_gtk3_WidgetClass_proximity_out_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ProximityOutEvent(event *gdk.EventProximity) bool
	})

	var _event *gdk.EventProximity // out

	_event = (*gdk.EventProximity)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ProximityOutEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_query_tooltip
func _gotk4_gtk3_WidgetClass_query_tooltip(arg0 *C.void, arg1 C.gint, arg2 C.gint, arg3 C.gboolean, arg4 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		QueryTooltip(x, y int32, keyboardTooltip bool, tooltip *Tooltip) bool
	})

	var _x int32              // out
	var _y int32              // out
	var _keyboardTooltip bool // out
	var _tooltip *Tooltip     // out

	_x = int32(arg1)
	_y = int32(arg2)
	if arg3 != 0 {
		_keyboardTooltip = true
	}
	_tooltip = wrapTooltip(coreglib.Take(unsafe.Pointer(arg4)))

	ok := iface.QueryTooltip(_x, _y, _keyboardTooltip, _tooltip)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_queue_draw_region
func _gotk4_gtk3_WidgetClass_queue_draw_region(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ QueueDrawRegion(region *cairo.Region) })

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(arg1)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	C.cairo_region_reference(arg1)
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	iface.QueueDrawRegion(_region)
}

//export _gotk4_gtk3_WidgetClass_realize
func _gotk4_gtk3_WidgetClass_realize(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Realize() })

	iface.Realize()
}

//export _gotk4_gtk3_WidgetClass_screen_changed
func _gotk4_gtk3_WidgetClass_screen_changed(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ScreenChanged(previousScreen *gdk.Screen)
	})

	var _previousScreen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_previousScreen = &gdk.Screen{
			Object: obj,
		}
	}

	iface.ScreenChanged(_previousScreen)
}

//export _gotk4_gtk3_WidgetClass_scroll_event
func _gotk4_gtk3_WidgetClass_scroll_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ScrollEvent(event *gdk.EventScroll) bool
	})

	var _event *gdk.EventScroll // out

	_event = (*gdk.EventScroll)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.ScrollEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_selection_clear_event
func _gotk4_gtk3_WidgetClass_selection_clear_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SelectionClearEvent(event *gdk.EventSelection) bool
	})

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.SelectionClearEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_selection_get
func _gotk4_gtk3_WidgetClass_selection_get(arg0 *C.void, arg1 *C.void, arg2 C.guint, arg3 C.guint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SelectionGet(selectionData *SelectionData, info, time_ uint32)
	})

	var _selectionData *SelectionData // out
	var _info uint32                  // out
	var _time_ uint32                 // out

	_selectionData = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_info = uint32(arg2)
	_time_ = uint32(arg3)

	iface.SelectionGet(_selectionData, _info, _time_)
}

//export _gotk4_gtk3_WidgetClass_selection_notify_event
func _gotk4_gtk3_WidgetClass_selection_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SelectionNotifyEvent(event *gdk.EventSelection) bool
	})

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.SelectionNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_selection_received
func _gotk4_gtk3_WidgetClass_selection_received(arg0 *C.void, arg1 *C.void, arg2 C.guint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SelectionReceived(selectionData *SelectionData, time_ uint32)
	})

	var _selectionData *SelectionData // out
	var _time_ uint32                 // out

	_selectionData = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_time_ = uint32(arg2)

	iface.SelectionReceived(_selectionData, _time_)
}

//export _gotk4_gtk3_WidgetClass_selection_request_event
func _gotk4_gtk3_WidgetClass_selection_request_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SelectionRequestEvent(event *gdk.EventSelection) bool
	})

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.SelectionRequestEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_show
func _gotk4_gtk3_WidgetClass_show(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Show() })

	iface.Show()
}

//export _gotk4_gtk3_WidgetClass_show_all
func _gotk4_gtk3_WidgetClass_show_all(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ShowAll() })

	iface.ShowAll()
}

//export _gotk4_gtk3_WidgetClass_size_allocate
func _gotk4_gtk3_WidgetClass_size_allocate(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SizeAllocate(allocation *Allocation) })

	var _allocation *Allocation // out

	_allocation = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.SizeAllocate(_allocation)
}

//export _gotk4_gtk3_WidgetClass_style_set
func _gotk4_gtk3_WidgetClass_style_set(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ StyleSet(previousStyle *Style) })

	var _previousStyle *Style // out

	_previousStyle = wrapStyle(coreglib.Take(unsafe.Pointer(arg1)))

	iface.StyleSet(_previousStyle)
}

//export _gotk4_gtk3_WidgetClass_style_updated
func _gotk4_gtk3_WidgetClass_style_updated(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ StyleUpdated() })

	iface.StyleUpdated()
}

//export _gotk4_gtk3_WidgetClass_touch_event
func _gotk4_gtk3_WidgetClass_touch_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		TouchEvent(event *gdk.EventTouch) bool
	})

	var _event *gdk.EventTouch // out

	_event = (*gdk.EventTouch)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.TouchEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_unmap
func _gotk4_gtk3_WidgetClass_unmap(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Unmap() })

	iface.Unmap()
}

//export _gotk4_gtk3_WidgetClass_unmap_event
func _gotk4_gtk3_WidgetClass_unmap_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		UnmapEvent(event *gdk.EventAny) bool
	})

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.UnmapEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_unrealize
func _gotk4_gtk3_WidgetClass_unrealize(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Unrealize() })

	iface.Unrealize()
}

//export _gotk4_gtk3_WidgetClass_visibility_notify_event
func _gotk4_gtk3_WidgetClass_visibility_notify_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		VisibilityNotifyEvent(event *gdk.EventVisibility) bool
	})

	var _event *gdk.EventVisibility // out

	_event = (*gdk.EventVisibility)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.VisibilityNotifyEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_WidgetClass_window_state_event
func _gotk4_gtk3_WidgetClass_window_state_event(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		WindowStateEvent(event *gdk.EventWindowState) bool
	})

	var _event *gdk.EventWindowState // out

	_event = (*gdk.EventWindowState)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.WindowStateEvent(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func wrapWidget(obj *coreglib.Object) *Widget {
	return &Widget{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Object: obj,
		ImplementorIface: atk.ImplementorIface{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalWidget(p uintptr) (interface{}, error) {
	return wrapWidget(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (widget *Widget) baseWidget() *Widget {
	return widget
}

// BaseWidget returns the underlying base object.
func BaseWidget(obj Widgetter) *Widget {
	return obj.baseWidget()
}

//export _gotk4_gtk3_Widget_ConnectAccelClosuresChanged
func _gotk4_gtk3_Widget_ConnectAccelClosuresChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

func (widget *Widget) ConnectAccelClosuresChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "accel-closures-changed", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectAccelClosuresChanged), f)
}

//export _gotk4_gtk3_Widget_ConnectButtonPressEvent
func _gotk4_gtk3_Widget_ConnectButtonPressEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventButton) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventButton) (ok bool))
	}

	var _event *gdk.EventButton // out

	_event = (*gdk.EventButton)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectButtonPressEvent signal will be emitted when a button (typically from
// a mouse) is pressed.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_BUTTON_PRESS_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectButtonPressEvent(f func(event *gdk.EventButton) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "button-press-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectButtonPressEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectButtonReleaseEvent
func _gotk4_gtk3_Widget_ConnectButtonReleaseEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventButton) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventButton) (ok bool))
	}

	var _event *gdk.EventButton // out

	_event = (*gdk.EventButton)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectButtonReleaseEvent signal will be emitted when a button (typically
// from a mouse) is released.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_BUTTON_RELEASE_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectButtonReleaseEvent(f func(event *gdk.EventButton) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "button-release-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectButtonReleaseEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectCanActivateAccel
func _gotk4_gtk3_Widget_ConnectCanActivateAccel(arg0 C.gpointer, arg1 C.guint, arg2 C.guintptr) (cret C.gboolean) {
	var f func(signalId uint32) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(signalId uint32) (ok bool))
	}

	var _signalId uint32 // out

	_signalId = uint32(arg1)

	ok := f(_signalId)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectCanActivateAccel determines whether an accelerator that activates the
// signal identified by signal_id can currently be activated. This signal is
// present to allow applications and derived widgets to override the default
// Widget handling for determining whether an accelerator can be activated.
func (widget *Widget) ConnectCanActivateAccel(f func(signalId uint32) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "can-activate-accel", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectCanActivateAccel), f)
}

//export _gotk4_gtk3_Widget_ConnectCompositedChanged
func _gotk4_gtk3_Widget_ConnectCompositedChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCompositedChanged signal is emitted when the composited status of
// widgets screen changes. See gdk_screen_is_composited().
func (widget *Widget) ConnectCompositedChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "composited-changed", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectCompositedChanged), f)
}

//export _gotk4_gtk3_Widget_ConnectConfigureEvent
func _gotk4_gtk3_Widget_ConnectConfigureEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventConfigure) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventConfigure) (ok bool))
	}

	var _event *gdk.EventConfigure // out

	_event = (*gdk.EventConfigure)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectConfigureEvent signal will be emitted when the size, position or
// stacking of the widget's window has changed.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_STRUCTURE_MASK mask. GDK will enable this mask automatically for all
// new windows.
func (widget *Widget) ConnectConfigureEvent(f func(event *gdk.EventConfigure) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "configure-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectConfigureEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectDamageEvent
func _gotk4_gtk3_Widget_ConnectDamageEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventExpose) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventExpose) (ok bool))
	}

	var _event *gdk.EventExpose // out

	_event = (*gdk.EventExpose)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDamageEvent is emitted when a redirected window belonging to widget
// gets drawn into. The region/area members of the event shows what area of the
// redirected drawable was drawn into.
func (widget *Widget) ConnectDamageEvent(f func(event *gdk.EventExpose) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "damage-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDamageEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectDestroy
func _gotk4_gtk3_Widget_ConnectDestroy(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectDestroy signals that all holders of a reference to the widget should
// release the reference that they hold. May result in finalization of the
// widget if all references are released.
//
// This signal is not suitable for saving widget state.
func (widget *Widget) ConnectDestroy(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "destroy", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDestroy), f)
}

//export _gotk4_gtk3_Widget_ConnectDragBegin
func _gotk4_gtk3_Widget_ConnectDragBegin(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(context *gdk.DragContext)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext))
	}

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	f(_context)
}

// ConnectDragBegin signal is emitted on the drag source when a drag is started.
// A typical reason to connect to this signal is to set up a custom drag icon
// with e.g. gtk_drag_source_set_icon_pixbuf().
//
// Note that some widgets set up a drag icon in the default handler of this
// signal, so you may have to use g_signal_connect_after() to override what the
// default handler did.
func (widget *Widget) ConnectDragBegin(f func(context *gdk.DragContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-begin", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragBegin), f)
}

//export _gotk4_gtk3_Widget_ConnectDragDataDelete
func _gotk4_gtk3_Widget_ConnectDragDataDelete(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(context *gdk.DragContext)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext))
	}

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	f(_context)
}

// ConnectDragDataDelete signal is emitted on the drag source when a drag with
// the action GDK_ACTION_MOVE is successfully completed. The signal handler is
// responsible for deleting the data that has been dropped. What "delete" means
// depends on the context of the drag operation.
func (widget *Widget) ConnectDragDataDelete(f func(context *gdk.DragContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-data-delete", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragDataDelete), f)
}

//export _gotk4_gtk3_Widget_ConnectDragDataGet
func _gotk4_gtk3_Widget_ConnectDragDataGet(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.guint, arg4 C.guint, arg5 C.guintptr) {
	var f func(context *gdk.DragContext, data *SelectionData, info, time uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext, data *SelectionData, info, time uint32))
	}

	var _context *gdk.DragContext // out
	var _data *SelectionData      // out
	var _info uint32              // out
	var _time uint32              // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_data = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_info = uint32(arg3)
	_time = uint32(arg4)

	f(_context, _data, _info, _time)
}

// ConnectDragDataGet signal is emitted on the drag source when the drop site
// requests the data which is dragged. It is the responsibility of the signal
// handler to fill data with the data in the format which is indicated by info.
// See gtk_selection_data_set() and gtk_selection_data_set_text().
func (widget *Widget) ConnectDragDataGet(f func(context *gdk.DragContext, data *SelectionData, info, time uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-data-get", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragDataGet), f)
}

//export _gotk4_gtk3_Widget_ConnectDragDataReceived
func _gotk4_gtk3_Widget_ConnectDragDataReceived(arg0 C.gpointer, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 *C.void, arg5 C.guint, arg6 C.guint, arg7 C.guintptr) {
	var f func(context *gdk.DragContext, x, y int32, data *SelectionData, info, time uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg7))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext, x, y int32, data *SelectionData, info, time uint32))
	}

	var _context *gdk.DragContext // out
	var _x int32                  // out
	var _y int32                  // out
	var _data *SelectionData      // out
	var _info uint32              // out
	var _time uint32              // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_data = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_info = uint32(arg5)
	_time = uint32(arg6)

	f(_context, _x, _y, _data, _info, _time)
}

// ConnectDragDataReceived signal is emitted on the drop site when the dragged
// data has been received. If the data was received in order to determine
// whether the drop will be accepted, the handler is expected to call
// gdk_drag_status() and not finish the drag. If the data was received in
// response to a Widget::drag-drop signal (and this is the last target to be
// received), the handler for this signal is expected to process the received
// data and then call gtk_drag_finish(), setting the success parameter depending
// on whether the data was processed successfully.
//
// Applications must create some means to determine why the signal was emitted
// and therefore whether to call gdk_drag_status() or gtk_drag_finish().
//
// The handler may inspect the selected action with
// gdk_drag_context_get_selected_action() before calling gtk_drag_finish(), e.g.
// to implement GDK_ACTION_ASK as shown in the following example:
//
//    void
//    drag_data_received (GtkWidget          *widget,
//                        GdkDragContext     *context,
//                        gint                x,
//                        gint                y,
//                        GtkSelectionData   *data,
//                        guint               info,
//                        guint               time)
//    {
//      if ((data->length >= 0) && (data->format == 8))
//        {
//          GdkDragAction action;
//
//          // handle data here
//
//          action = gdk_drag_context_get_selected_action (context);
//          if (action == GDK_ACTION_ASK)
//            {
//              GtkWidget *dialog;
//              gint response;
//
//              dialog = gtk_message_dialog_new (NULL,
//                                               GTK_DIALOG_MODAL |
//                                               GTK_DIALOG_DESTROY_WITH_PARENT,
//                                               GTK_MESSAGE_INFO,
//                                               GTK_BUTTONS_YES_NO,
//                                               "Move the data ?\n");
//              response = gtk_dialog_run (GTK_DIALOG (dialog));
//              gtk_widget_destroy (dialog);
//
//              if (response == GTK_RESPONSE_YES)
//                action = GDK_ACTION_MOVE;
//              else
//                action = GDK_ACTION_COPY;
//             }
//
//          gtk_drag_finish (context, TRUE, action == GDK_ACTION_MOVE, time);
//        }
//      else
//        gtk_drag_finish (context, FALSE, FALSE, time);
//     }.
func (widget *Widget) ConnectDragDataReceived(f func(context *gdk.DragContext, x, y int32, data *SelectionData, info, time uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-data-received", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragDataReceived), f)
}

//export _gotk4_gtk3_Widget_ConnectDragDrop
func _gotk4_gtk3_Widget_ConnectDragDrop(arg0 C.gpointer, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 C.guint, arg5 C.guintptr) (cret C.gboolean) {
	var f func(context *gdk.DragContext, x, y int32, time uint32) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext, x, y int32, time uint32) (ok bool))
	}

	var _context *gdk.DragContext // out
	var _x int32                  // out
	var _y int32                  // out
	var _time uint32              // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_time = uint32(arg4)

	ok := f(_context, _x, _y, _time)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDragDrop signal is emitted on the drop site when the user drops the
// data onto the widget. The signal handler must determine whether the cursor
// position is in a drop zone or not. If it is not in a drop zone, it returns
// FALSE and no further processing is necessary. Otherwise, the handler returns
// TRUE. In this case, the handler must ensure that gtk_drag_finish() is called
// to let the source know that the drop is done. The call to gtk_drag_finish()
// can be done either directly or in a Widget::drag-data-received handler which
// gets triggered by calling gtk_drag_get_data() to receive the data for one or
// more of the supported targets.
func (widget *Widget) ConnectDragDrop(f func(context *gdk.DragContext, x, y int32, time uint32) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-drop", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragDrop), f)
}

//export _gotk4_gtk3_Widget_ConnectDragEnd
func _gotk4_gtk3_Widget_ConnectDragEnd(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(context *gdk.DragContext)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext))
	}

	var _context *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}

	f(_context)
}

// ConnectDragEnd signal is emitted on the drag source when a drag is finished.
// A typical reason to connect to this signal is to undo things done in
// Widget::drag-begin.
func (widget *Widget) ConnectDragEnd(f func(context *gdk.DragContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-end", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragEnd), f)
}

//export _gotk4_gtk3_Widget_ConnectDragLeave
func _gotk4_gtk3_Widget_ConnectDragLeave(arg0 C.gpointer, arg1 *C.void, arg2 C.guint, arg3 C.guintptr) {
	var f func(context *gdk.DragContext, time uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext, time uint32))
	}

	var _context *gdk.DragContext // out
	var _time uint32              // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_time = uint32(arg2)

	f(_context, _time)
}

// ConnectDragLeave signal is emitted on the drop site when the cursor leaves
// the widget. A typical reason to connect to this signal is to undo things done
// in Widget::drag-motion, e.g. undo highlighting with gtk_drag_unhighlight().
//
//    Likewise, the Widget::drag-leave signal is also emitted before the ::drag-drop signal, for instance to allow cleaning up of a preview item created in the Widget::drag-motion signal handler.
func (widget *Widget) ConnectDragLeave(f func(context *gdk.DragContext, time uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-leave", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragLeave), f)
}

//export _gotk4_gtk3_Widget_ConnectDragMotion
func _gotk4_gtk3_Widget_ConnectDragMotion(arg0 C.gpointer, arg1 *C.void, arg2 C.gint, arg3 C.gint, arg4 C.guint, arg5 C.guintptr) (cret C.gboolean) {
	var f func(context *gdk.DragContext, x, y int32, time uint32) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context *gdk.DragContext, x, y int32, time uint32) (ok bool))
	}

	var _context *gdk.DragContext // out
	var _x int32                  // out
	var _y int32                  // out
	var _time uint32              // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_context = &gdk.DragContext{
			Object: obj,
		}
	}
	_x = int32(arg2)
	_y = int32(arg3)
	_time = uint32(arg4)

	ok := f(_context, _x, _y, _time)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDragMotion signal is emitted on the drop site when the user moves the
// cursor over the widget during a drag. The signal handler must determine
// whether the cursor position is in a drop zone or not. If it is not in a drop
// zone, it returns FALSE and no further processing is necessary. Otherwise, the
// handler returns TRUE. In this case, the handler is responsible for providing
// the necessary information for displaying feedback to the user, by calling
// gdk_drag_status().
//
// If the decision whether the drop will be accepted or rejected can't be made
// based solely on the cursor position and the type of the data, the handler may
// inspect the dragged data by calling gtk_drag_get_data() and defer the
// gdk_drag_status() call to the Widget::drag-data-received handler. Note that
// you must pass K_DEST_DEFAULT_DROP, K_DEST_DEFAULT_MOTION or
// K_DEST_DEFAULT_ALL to gtk_drag_dest_set() when using the drag-motion signal
// that way.
//
// Also note that there is no drag-enter signal. The drag receiver has to keep
// track of whether he has received any drag-motion signals since the last
// Widget::drag-leave and if not, treat the drag-motion signal as an "enter"
// signal. Upon an "enter", the handler will typically highlight the drop site
// with gtk_drag_highlight().
//
//    static void
//    drag_motion (GtkWidget      *widget,
//                 GdkDragContext *context,
//                 gint            x,
//                 gint            y,
//                 guint           time)
//    {
//      GdkAtom target;
//
//      PrivateData *private_data = GET_PRIVATE_DATA (widget);
//
//      if (!private_data->drag_highlight)
//       {
//         private_data->drag_highlight = 1;
//         gtk_drag_highlight (widget);
//       }
//
//      target = gtk_drag_dest_find_target (widget, context, NULL);
//      if (target == GDK_NONE)
//        gdk_drag_status (context, 0, time);
//      else
//       {
//         private_data->pending_status
//            = gdk_drag_context_get_suggested_action (context);
//         gtk_drag_get_data (widget, context, target, time);
//       }
//
//      return TRUE;
//    }
//
//    static void
//    drag_data_received (GtkWidget        *widget,
//                        GdkDragContext   *context,
//                        gint              x,
//                        gint              y,
//                        GtkSelectionData *selection_data,
//                        guint             info,
//                        guint             time)
//    {
//      PrivateData *private_data = GET_PRIVATE_DATA (widget);
//
//      if (private_data->suggested_action)
//       {
//         private_data->suggested_action = 0;
//
//         // We are getting this data due to a request in drag_motion,
//         // rather than due to a request in drag_drop, so we are just
//         // supposed to call gdk_drag_status(), not actually paste in
//         // the data.
//
//         str = gtk_selection_data_get_text (selection_data);
//         if (!data_is_acceptable (str))
//           gdk_drag_status (context, 0, time);
//         else
//           gdk_drag_status (context,
//                            private_data->suggested_action,
//                            time);
//       }
//      else
//       {
//         // accept the drop
//       }
//    }.
func (widget *Widget) ConnectDragMotion(f func(context *gdk.DragContext, x, y int32, time uint32) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "drag-motion", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDragMotion), f)
}

//export _gotk4_gtk3_Widget_ConnectDraw
func _gotk4_gtk3_Widget_ConnectDraw(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(cr *cairo.Context) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(cr *cairo.Context) (ok bool))
	}

	var _cr *cairo.Context // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	ok := f(_cr)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDraw: this signal is emitted when a widget is supposed to render
// itself. The widget's top left corner must be painted at the origin of the
// passed in context and be sized to the values returned by
// gtk_widget_get_allocated_width() and gtk_widget_get_allocated_height().
//
// Signal handlers connected to this signal can modify the cairo context passed
// as cr in any way they like and don't need to restore it. The signal emission
// takes care of calling cairo_save() before and cairo_restore() after invoking
// the handler.
//
// The signal handler will get a cr with a clip region already set to the
// widget's dirty region, i.e. to the area that needs repainting. Complicated
// widgets that want to avoid redrawing themselves completely can get the full
// extents of the clip region with gdk_cairo_get_clip_rectangle(), or they can
// get a finer-grained representation of the dirty region with
// cairo_copy_clip_rectangle_list().
func (widget *Widget) ConnectDraw(f func(cr *cairo.Context) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "draw", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectDraw), f)
}

//export _gotk4_gtk3_Widget_ConnectEnterNotifyEvent
func _gotk4_gtk3_Widget_ConnectEnterNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventCrossing) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventCrossing) (ok bool))
	}

	var _event *gdk.EventCrossing // out

	_event = (*gdk.EventCrossing)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectEnterNotifyEvent will be emitted when the pointer enters the widget's
// window.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_ENTER_NOTIFY_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectEnterNotifyEvent(f func(event *gdk.EventCrossing) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "enter-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectEnterNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectFocusInEvent
func _gotk4_gtk3_Widget_ConnectFocusInEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventFocus) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventFocus) (ok bool))
	}

	var _event *gdk.EventFocus // out

	_event = (*gdk.EventFocus)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectFocusInEvent signal will be emitted when the keyboard focus enters the
// widget's window.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_FOCUS_CHANGE_MASK mask.
func (widget *Widget) ConnectFocusInEvent(f func(event *gdk.EventFocus) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "focus-in-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectFocusInEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectFocusOutEvent
func _gotk4_gtk3_Widget_ConnectFocusOutEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventFocus) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventFocus) (ok bool))
	}

	var _event *gdk.EventFocus // out

	_event = (*gdk.EventFocus)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectFocusOutEvent signal will be emitted when the keyboard focus leaves
// the widget's window.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_FOCUS_CHANGE_MASK mask.
func (widget *Widget) ConnectFocusOutEvent(f func(event *gdk.EventFocus) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "focus-out-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectFocusOutEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectGrabBrokenEvent
func _gotk4_gtk3_Widget_ConnectGrabBrokenEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventGrabBroken) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventGrabBroken) (ok bool))
	}

	var _event *gdk.EventGrabBroken // out

	_event = (*gdk.EventGrabBroken)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectGrabBrokenEvent is emitted when a pointer or keyboard grab on a window
// belonging to widget gets broken.
//
// On X11, this happens when the grab window becomes unviewable (i.e. it or one
// of its ancestors is unmapped), or if the same application grabs the pointer
// or keyboard again.
func (widget *Widget) ConnectGrabBrokenEvent(f func(event *gdk.EventGrabBroken) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "grab-broken-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectGrabBrokenEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectGrabFocus
func _gotk4_gtk3_Widget_ConnectGrabFocus(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

func (widget *Widget) ConnectGrabFocus(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "grab-focus", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectGrabFocus), f)
}

//export _gotk4_gtk3_Widget_ConnectGrabNotify
func _gotk4_gtk3_Widget_ConnectGrabNotify(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(wasGrabbed bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(wasGrabbed bool))
	}

	var _wasGrabbed bool // out

	if arg1 != 0 {
		_wasGrabbed = true
	}

	f(_wasGrabbed)
}

// ConnectGrabNotify signal is emitted when a widget becomes shadowed by a GTK+
// grab (not a pointer or keyboard grab) on another widget, or when it becomes
// unshadowed due to a grab being removed.
//
// A widget is shadowed by a gtk_grab_add() when the topmost grab widget in the
// grab stack of its window group is not its ancestor.
func (widget *Widget) ConnectGrabNotify(f func(wasGrabbed bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "grab-notify", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectGrabNotify), f)
}

//export _gotk4_gtk3_Widget_ConnectHide
func _gotk4_gtk3_Widget_ConnectHide(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectHide signal is emitted when widget is hidden, for example with
// gtk_widget_hide().
func (widget *Widget) ConnectHide(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "hide", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectHide), f)
}

//export _gotk4_gtk3_Widget_ConnectHierarchyChanged
func _gotk4_gtk3_Widget_ConnectHierarchyChanged(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(previousToplevel Widgetter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(previousToplevel Widgetter))
	}

	var _previousToplevel Widgetter // out

	if arg1 != nil {
		{
			objptr := unsafe.Pointer(arg1)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_previousToplevel = rv
		}
	}

	f(_previousToplevel)
}

// ConnectHierarchyChanged signal is emitted when the anchored state of a widget
// changes. A widget is “anchored” when its toplevel ancestor is a Window. This
// signal is emitted when a widget changes from un-anchored to anchored or
// vice-versa.
func (widget *Widget) ConnectHierarchyChanged(f func(previousToplevel Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "hierarchy-changed", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectHierarchyChanged), f)
}

//export _gotk4_gtk3_Widget_ConnectKeyPressEvent
func _gotk4_gtk3_Widget_ConnectKeyPressEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventKey) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventKey) (ok bool))
	}

	var _event *gdk.EventKey // out

	_event = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectKeyPressEvent signal is emitted when a key is pressed. The signal
// emission will reoccur at the key-repeat rate when the key is kept pressed.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_KEY_PRESS_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectKeyPressEvent(f func(event *gdk.EventKey) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "key-press-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectKeyPressEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectKeyReleaseEvent
func _gotk4_gtk3_Widget_ConnectKeyReleaseEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventKey) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventKey) (ok bool))
	}

	var _event *gdk.EventKey // out

	_event = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectKeyReleaseEvent signal is emitted when a key is released.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_KEY_RELEASE_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectKeyReleaseEvent(f func(event *gdk.EventKey) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "key-release-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectKeyReleaseEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectLeaveNotifyEvent
func _gotk4_gtk3_Widget_ConnectLeaveNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventCrossing) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventCrossing) (ok bool))
	}

	var _event *gdk.EventCrossing // out

	_event = (*gdk.EventCrossing)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectLeaveNotifyEvent will be emitted when the pointer leaves the widget's
// window.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_LEAVE_NOTIFY_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectLeaveNotifyEvent(f func(event *gdk.EventCrossing) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "leave-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectLeaveNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectMap
func _gotk4_gtk3_Widget_ConnectMap(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectMap signal is emitted when widget is going to be mapped, that is when
// the widget is visible (which is controlled with gtk_widget_set_visible()) and
// all its parents up to the toplevel widget are also visible. Once the map has
// occurred, Widget::map-event will be emitted.
//
// The ::map signal can be used to determine whether a widget will be drawn, for
// instance it can resume an animation that was stopped during the emission of
// Widget::unmap.
func (widget *Widget) ConnectMap(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "map", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectMap), f)
}

//export _gotk4_gtk3_Widget_ConnectMapEvent
func _gotk4_gtk3_Widget_ConnectMapEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventAny) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventAny) (ok bool))
	}

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectMapEvent signal will be emitted when the widget's window is mapped. A
// window is mapped when it becomes visible on the screen.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_STRUCTURE_MASK mask. GDK will enable this mask automatically for all
// new windows.
func (widget *Widget) ConnectMapEvent(f func(event *gdk.EventAny) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "map-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectMapEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectMnemonicActivate
func _gotk4_gtk3_Widget_ConnectMnemonicActivate(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) (cret C.gboolean) {
	var f func(groupCycling bool) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(groupCycling bool) (ok bool))
	}

	var _groupCycling bool // out

	if arg1 != 0 {
		_groupCycling = true
	}

	ok := f(_groupCycling)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectMnemonicActivate: default handler for this signal activates widget if
// group_cycling is FALSE, or just makes widget grab focus if group_cycling is
// TRUE.
func (widget *Widget) ConnectMnemonicActivate(f func(groupCycling bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "mnemonic-activate", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectMnemonicActivate), f)
}

//export _gotk4_gtk3_Widget_ConnectMotionNotifyEvent
func _gotk4_gtk3_Widget_ConnectMotionNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventMotion) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventMotion) (ok bool))
	}

	var _event *gdk.EventMotion // out

	_event = (*gdk.EventMotion)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectMotionNotifyEvent signal is emitted when the pointer moves over the
// widget's Window.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_POINTER_MOTION_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectMotionNotifyEvent(f func(event *gdk.EventMotion) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "motion-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectMotionNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectParentSet
func _gotk4_gtk3_Widget_ConnectParentSet(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(oldParent Widgetter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(oldParent Widgetter))
	}

	var _oldParent Widgetter // out

	if arg1 != nil {
		{
			objptr := unsafe.Pointer(arg1)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_oldParent = rv
		}
	}

	f(_oldParent)
}

// ConnectParentSet signal is emitted when a new parent has been set on a
// widget.
func (widget *Widget) ConnectParentSet(f func(oldParent Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "parent-set", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectParentSet), f)
}

//export _gotk4_gtk3_Widget_ConnectPopupMenu
func _gotk4_gtk3_Widget_ConnectPopupMenu(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectPopupMenu: this signal gets emitted whenever a widget should pop up a
// context menu. This usually happens through the standard key binding
// mechanism; by pressing a certain key while a widget is focused, the user can
// cause the widget to pop up a menu. For example, the Entry widget creates a
// menu with clipboard commands. See the [Popup Menu Migration
// Checklist][checklist-popup-menu] for an example of how to use this signal.
func (widget *Widget) ConnectPopupMenu(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "popup-menu", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectPopupMenu), f)
}

//export _gotk4_gtk3_Widget_ConnectPropertyNotifyEvent
func _gotk4_gtk3_Widget_ConnectPropertyNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventProperty) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventProperty) (ok bool))
	}

	var _event *gdk.EventProperty // out

	_event = (*gdk.EventProperty)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectPropertyNotifyEvent signal will be emitted when a property on the
// widget's window has been changed or deleted.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_PROPERTY_CHANGE_MASK mask.
func (widget *Widget) ConnectPropertyNotifyEvent(f func(event *gdk.EventProperty) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "property-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectPropertyNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectProximityInEvent
func _gotk4_gtk3_Widget_ConnectProximityInEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventProximity) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventProximity) (ok bool))
	}

	var _event *gdk.EventProximity // out

	_event = (*gdk.EventProximity)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectProximityInEvent: to receive this signal the Window associated to the
// widget needs to enable the K_PROXIMITY_IN_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectProximityInEvent(f func(event *gdk.EventProximity) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "proximity-in-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectProximityInEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectProximityOutEvent
func _gotk4_gtk3_Widget_ConnectProximityOutEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventProximity) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventProximity) (ok bool))
	}

	var _event *gdk.EventProximity // out

	_event = (*gdk.EventProximity)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectProximityOutEvent: to receive this signal the Window associated to the
// widget needs to enable the K_PROXIMITY_OUT_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectProximityOutEvent(f func(event *gdk.EventProximity) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "proximity-out-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectProximityOutEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectQueryTooltip
func _gotk4_gtk3_Widget_ConnectQueryTooltip(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.gboolean, arg4 *C.void, arg5 C.guintptr) (cret C.gboolean) {
	var f func(x, y int32, keyboardMode bool, tooltip *Tooltip) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y int32, keyboardMode bool, tooltip *Tooltip) (ok bool))
	}

	var _x int32           // out
	var _y int32           // out
	var _keyboardMode bool // out
	var _tooltip *Tooltip  // out

	_x = int32(arg1)
	_y = int32(arg2)
	if arg3 != 0 {
		_keyboardMode = true
	}
	_tooltip = wrapTooltip(coreglib.Take(unsafe.Pointer(arg4)))

	ok := f(_x, _y, _keyboardMode, _tooltip)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectQueryTooltip is emitted when Widget:has-tooltip is TRUE and the hover
// timeout has expired with the cursor hovering "above" widget; or emitted when
// widget got focus in keyboard mode.
//
// Using the given coordinates, the signal handler should determine whether a
// tooltip should be shown for widget. If this is the case TRUE should be
// returned, FALSE otherwise. Note that if keyboard_mode is TRUE, the values of
// x and y are undefined and should not be used.
//
// The signal handler is free to manipulate tooltip with the therefore destined
// function calls.
func (widget *Widget) ConnectQueryTooltip(f func(x, y int32, keyboardMode bool, tooltip *Tooltip) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "query-tooltip", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectQueryTooltip), f)
}

//export _gotk4_gtk3_Widget_ConnectRealize
func _gotk4_gtk3_Widget_ConnectRealize(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectRealize signal is emitted when widget is associated with a Window,
// which means that gtk_widget_realize() has been called or the widget has been
// mapped (that is, it is going to be drawn).
func (widget *Widget) ConnectRealize(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "realize", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectRealize), f)
}

//export _gotk4_gtk3_Widget_ConnectScreenChanged
func _gotk4_gtk3_Widget_ConnectScreenChanged(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(previousScreen *gdk.Screen)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(previousScreen *gdk.Screen))
	}

	var _previousScreen *gdk.Screen // out

	if arg1 != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(arg1))
			_previousScreen = &gdk.Screen{
				Object: obj,
			}
		}
	}

	f(_previousScreen)
}

// ConnectScreenChanged signal gets emitted when the screen of a widget has
// changed.
func (widget *Widget) ConnectScreenChanged(f func(previousScreen *gdk.Screen)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "screen-changed", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectScreenChanged), f)
}

//export _gotk4_gtk3_Widget_ConnectScrollEvent
func _gotk4_gtk3_Widget_ConnectScrollEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventScroll) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventScroll) (ok bool))
	}

	var _event *gdk.EventScroll // out

	_event = (*gdk.EventScroll)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectScrollEvent signal is emitted when a button in the 4 to 7 range is
// pressed. Wheel mice are usually configured to generate button press events
// for buttons 4 and 5 when the wheel is turned.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_SCROLL_MASK mask.
//
// This signal will be sent to the grab widget if there is one.
func (widget *Widget) ConnectScrollEvent(f func(event *gdk.EventScroll) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "scroll-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectScrollEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectSelectionClearEvent
func _gotk4_gtk3_Widget_ConnectSelectionClearEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventSelection) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventSelection) (ok bool))
	}

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectSelectionClearEvent signal will be emitted when the the widget's
// window has lost ownership of a selection.
func (widget *Widget) ConnectSelectionClearEvent(f func(event *gdk.EventSelection) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "selection-clear-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSelectionClearEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectSelectionGet
func _gotk4_gtk3_Widget_ConnectSelectionGet(arg0 C.gpointer, arg1 *C.void, arg2 C.guint, arg3 C.guint, arg4 C.guintptr) {
	var f func(data *SelectionData, info, time uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(data *SelectionData, info, time uint32))
	}

	var _data *SelectionData // out
	var _info uint32         // out
	var _time uint32         // out

	_data = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_info = uint32(arg2)
	_time = uint32(arg3)

	f(_data, _info, _time)
}

func (widget *Widget) ConnectSelectionGet(f func(data *SelectionData, info, time uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "selection-get", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSelectionGet), f)
}

//export _gotk4_gtk3_Widget_ConnectSelectionNotifyEvent
func _gotk4_gtk3_Widget_ConnectSelectionNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventSelection) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventSelection) (ok bool))
	}

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func (widget *Widget) ConnectSelectionNotifyEvent(f func(event *gdk.EventSelection) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "selection-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSelectionNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectSelectionReceived
func _gotk4_gtk3_Widget_ConnectSelectionReceived(arg0 C.gpointer, arg1 *C.void, arg2 C.guint, arg3 C.guintptr) {
	var f func(data *SelectionData, time uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(data *SelectionData, time uint32))
	}

	var _data *SelectionData // out
	var _time uint32         // out

	_data = (*SelectionData)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_time = uint32(arg2)

	f(_data, _time)
}

func (widget *Widget) ConnectSelectionReceived(f func(data *SelectionData, time uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "selection-received", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSelectionReceived), f)
}

//export _gotk4_gtk3_Widget_ConnectSelectionRequestEvent
func _gotk4_gtk3_Widget_ConnectSelectionRequestEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventSelection) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventSelection) (ok bool))
	}

	var _event *gdk.EventSelection // out

	_event = (*gdk.EventSelection)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectSelectionRequestEvent signal will be emitted when another client
// requests ownership of the selection owned by the widget's window.
func (widget *Widget) ConnectSelectionRequestEvent(f func(event *gdk.EventSelection) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "selection-request-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSelectionRequestEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectShow
func _gotk4_gtk3_Widget_ConnectShow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectShow signal is emitted when widget is shown, for example with
// gtk_widget_show().
func (widget *Widget) ConnectShow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "show", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectShow), f)
}

//export _gotk4_gtk3_Widget_ConnectSizeAllocate
func _gotk4_gtk3_Widget_ConnectSizeAllocate(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(allocation *Allocation)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(allocation *Allocation))
	}

	var _allocation *Allocation // out

	_allocation = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_allocation)
}

func (widget *Widget) ConnectSizeAllocate(f func(allocation *Allocation)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "size-allocate", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectSizeAllocate), f)
}

//export _gotk4_gtk3_Widget_ConnectStyleSet
func _gotk4_gtk3_Widget_ConnectStyleSet(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(previousStyle *Style)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(previousStyle *Style))
	}

	var _previousStyle *Style // out

	if arg1 != nil {
		_previousStyle = wrapStyle(coreglib.Take(unsafe.Pointer(arg1)))
	}

	f(_previousStyle)
}

// ConnectStyleSet signal is emitted when a new style has been set on a widget.
// Note that style-modifying functions like gtk_widget_modify_base() also cause
// this signal to be emitted.
//
// Note that this signal is emitted for changes to the deprecated Style. To
// track changes to the StyleContext associated with a widget, use the
// Widget::style-updated signal.
func (widget *Widget) ConnectStyleSet(f func(previousStyle *Style)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "style-set", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectStyleSet), f)
}

//export _gotk4_gtk3_Widget_ConnectStyleUpdated
func _gotk4_gtk3_Widget_ConnectStyleUpdated(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectStyleUpdated signal is a convenience signal that is emitted when the
// StyleContext::changed signal is emitted on the widget's associated
// StyleContext as returned by gtk_widget_get_style_context().
//
// Note that style-modifying functions like gtk_widget_override_color() also
// cause this signal to be emitted.
func (widget *Widget) ConnectStyleUpdated(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "style-updated", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectStyleUpdated), f)
}

//export _gotk4_gtk3_Widget_ConnectUnmap
func _gotk4_gtk3_Widget_ConnectUnmap(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnmap signal is emitted when widget is going to be unmapped, which
// means that either it or any of its parents up to the toplevel widget have
// been set as hidden.
//
// As ::unmap indicates that a widget will not be shown any longer, it can be
// used to, for example, stop an animation on the widget.
func (widget *Widget) ConnectUnmap(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "unmap", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectUnmap), f)
}

//export _gotk4_gtk3_Widget_ConnectUnmapEvent
func _gotk4_gtk3_Widget_ConnectUnmapEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventAny) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventAny) (ok bool))
	}

	var _event *gdk.EventAny // out

	_event = (*gdk.EventAny)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectUnmapEvent signal will be emitted when the widget's window is
// unmapped. A window is unmapped when it becomes invisible on the screen.
//
// To receive this signal, the Window associated to the widget needs to enable
// the K_STRUCTURE_MASK mask. GDK will enable this mask automatically for all
// new windows.
func (widget *Widget) ConnectUnmapEvent(f func(event *gdk.EventAny) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "unmap-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectUnmapEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectUnrealize
func _gotk4_gtk3_Widget_ConnectUnrealize(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnrealize signal is emitted when the Window associated with widget is
// destroyed, which means that gtk_widget_unrealize() has been called or the
// widget has been unmapped (that is, it is going to be hidden).
func (widget *Widget) ConnectUnrealize(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "unrealize", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectUnrealize), f)
}

//export _gotk4_gtk3_Widget_ConnectVisibilityNotifyEvent
func _gotk4_gtk3_Widget_ConnectVisibilityNotifyEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventVisibility) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventVisibility) (ok bool))
	}

	var _event *gdk.EventVisibility // out

	_event = (*gdk.EventVisibility)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectVisibilityNotifyEvent will be emitted when the widget's window is
// obscured or unobscured.
//
// To receive this signal the Window associated to the widget needs to enable
// the K_VISIBILITY_NOTIFY_MASK mask.
func (widget *Widget) ConnectVisibilityNotifyEvent(f func(event *gdk.EventVisibility) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "visibility-notify-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectVisibilityNotifyEvent), f)
}

//export _gotk4_gtk3_Widget_ConnectWindowStateEvent
func _gotk4_gtk3_Widget_ConnectWindowStateEvent(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(event *gdk.EventWindowState) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event *gdk.EventWindowState) (ok bool))
	}

	var _event *gdk.EventWindowState // out

	_event = (*gdk.EventWindowState)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := f(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectWindowStateEvent will be emitted when the state of the toplevel window
// associated to the widget changes.
//
// To receive this signal the Window associated to the widget needs to enable
// the K_STRUCTURE_MASK mask. GDK will enable this mask automatically for all
// new windows.
func (widget *Widget) ConnectWindowStateEvent(f func(event *gdk.EventWindowState) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(widget, "window-state-event", false, unsafe.Pointer(C._gotk4_gtk3_Widget_ConnectWindowStateEvent), f)
}

// Activate: for widgets that can be “activated” (buttons, menu items, etc.)
// this function activates them. Activation is what happens when you press Enter
// on a widget during key navigation. If widget isn't activatable, the function
// returns FALSE.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget was activatable.
//
func (widget *Widget) Activate() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("activate", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// AddEvents adds the events in the bitfield events to the event mask for
// widget. See gtk_widget_set_events() and the [input handling
// overview][event-masks] for details.
//
// The function takes the following parameters:
//
//    - events: event mask, see EventMask.
//
func (widget *Widget) AddEvents(events int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(events)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("add_events", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(events)
}

// AddMnemonicLabel adds a widget to the list of mnemonic labels for this
// widget. (See gtk_widget_list_mnemonic_labels()). Note the list of mnemonic
// labels for the widget is cleared when the widget is destroyed, so the caller
// must make sure to update its internal state at this point as well, by using a
// connection to the Widget::destroy signal or a weak notifier.
//
// The function takes the following parameters:
//
//    - label that acts as a mnemonic label for widget.
//
func (widget *Widget) AddMnemonicLabel(label Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("add_mnemonic_label", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(label)
}

// AddTickCallback queues an animation frame update and adds a callback to be
// called before each frame. Until the tick callback is removed, it will be
// called frequently (usually at the frame rate of the output device or as
// quickly as the application can be repainted, whichever is slower). For this
// reason, is most suitable for handling graphics that change every frame or
// every few frames. The tick callback does not automatically imply a relayout
// or repaint. If you want a repaint or relayout, and aren’t changing widget
// properties that would trigger that (for example, changing the text of a
// Label), then you will have to call gtk_widget_queue_resize() or
// gtk_widget_queue_draw_area() yourself.
//
// gdk_frame_clock_get_frame_time() should generally be used for timing
// continuous animations and gdk_frame_timings_get_predicted_presentation_time()
// if you are trying to display isolated frames at particular times.
//
// This is a more convenient alternative to connecting directly to the
// FrameClock::update signal of FrameClock, since you don't have to worry about
// when a FrameClock is assigned to a widget.
//
// The function takes the following parameters:
//
//    - callback: function to call for updating animations.
//
// The function returns the following values:
//
//    - guint: id for the connection of this callback. Remove the callback by
//      passing it to gtk_widget_remove_tick_callback().
//
func (widget *Widget) AddTickCallback(callback TickCallback) uint32 {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_TickCallback)
	_args[2] = C.gpointer(gbox.Assign(callback))
	_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("add_tick_callback", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(callback)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// CanActivateAccel determines whether an accelerator that activates the signal
// identified by signal_id can currently be activated. This is done by emitting
// the Widget::can-activate-accel signal on widget; if the signal isn’t
// overridden by a handler or in a derived widget, then the default check is
// that the widget must be sensitive, and the widget and all its ancestors
// mapped.
//
// The function takes the following parameters:
//
//    - signalId: ID of a signal installed on widget.
//
// The function returns the following values:
//
//    - ok: TRUE if the accelerator can be activated.
//
func (widget *Widget) CanActivateAccel(signalId uint32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(signalId)

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("can_activate_accel", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(signalId)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ChildNotify emits a Widget::child-notify signal for the [child
// property][child-properties] child_property on widget.
//
// This is the analogue of g_object_notify() for child properties.
//
// Also see gtk_container_child_notify().
//
// The function takes the following parameters:
//
//    - childProperty: name of a child property installed on the class of
//      widget’s parent.
//
func (widget *Widget) ChildNotify(childProperty string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(childProperty)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("child_notify", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(childProperty)
}

// CreatePangoContext creates a new Context with the appropriate font map, font
// options, font description, and base direction for drawing text for this
// widget. See also gtk_widget_get_pango_context().
//
// The function returns the following values:
//
//    - context: new Context.
//
func (widget *Widget) CreatePangoContext() *pango.Context {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("create_pango_context", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _context *pango.Context // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_context = &pango.Context{
			Object: obj,
		}
	}

	return _context
}

// CreatePangoLayout creates a new Layout with the appropriate font map, font
// description, and base direction for drawing text for this widget.
//
// If you keep a Layout created in this way around, you need to re-create it
// when the widget Context is replaced. This can be tracked by using the
// Widget::screen-changed signal on the widget.
//
// The function takes the following parameters:
//
//    - text (optional) to set on the layout (can be NULL).
//
// The function returns the following values:
//
//    - layout: new Layout.
//
func (widget *Widget) CreatePangoLayout(text string) *pango.Layout {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if text != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
		defer C.free(unsafe.Pointer(_args[1]))
	}

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("create_pango_layout", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(text)

	var _layout *pango.Layout // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_layout = &pango.Layout{
			Object: obj,
		}
	}

	return _layout
}

// Destroy destroys a widget.
//
// When a widget is destroyed all references it holds on other objects will be
// released:
//
//    - if the widget is inside a container, it will be removed from its
//    parent
//    - if the widget is a container, all its children will be destroyed,
//    recursively
//    - if the widget is a top level, it will be removed from the list
//    of top level widgets that GTK+ maintains internally
//
// It's expected that all references held on the widget will also be released;
// you should connect to the Widget::destroy signal if you hold a reference to
// widget and you wish to remove it when this function is called. It is not
// necessary to do so if you are implementing a Container, as you'll be able to
// use the ContainerClass.remove() virtual function for that.
//
// It's important to notice that gtk_widget_destroy() will only cause the widget
// to be finalized if no additional references, acquired using g_object_ref(),
// are held on it. In case additional references are in place, the widget will
// be in an "inert" state after calling this function; widget will still point
// to valid memory, allowing you to release the references you hold, but you may
// not query the widget's own state.
//
// You should typically call this function on top level widgets, and rarely on
// child widgets.
//
// See also: gtk_container_remove().
func (widget *Widget) Destroy() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("destroy", _args[:], nil)

	runtime.KeepAlive(widget)
}

// DeviceIsShadowed returns TRUE if device has been shadowed by a GTK+ device
// grab on another widget, so it would stop sending events to widget. This may
// be used in the Widget::grab-notify signal to check for specific devices. See
// gtk_device_grab_add().
//
// The function takes the following parameters:
//
//    - device: Device.
//
// The function returns the following values:
//
//    - ok: TRUE if there is an ongoing grab on device by another Widget than
//      widget.
//
func (widget *Widget) DeviceIsShadowed(device gdk.Devicer) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(device).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("device_is_shadowed", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(device)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Draw draws widget to cr. The top left corner of the widget will be drawn to
// the currently set origin point of cr.
//
// You should pass a cairo context as cr argument that is in an original state.
// Otherwise the resulting drawing is undefined. For example changing the
// operator using cairo_set_operator() or the line width using
// cairo_set_line_width() might have unwanted side effects. You may however
// change the context’s transform matrix - like with cairo_scale(),
// cairo_translate() or cairo_set_matrix() and clip region with cairo_clip()
// prior to calling this function. Also, it is fine to modify the context with
// cairo_save() and cairo_push_group() prior to calling this function.
//
// Note that special-purpose widgets may contain special code for rendering to
// the screen and might appear differently on screen and when rendered using
// gtk_widget_draw().
//
// The function takes the following parameters:
//
//    - cr: cairo context to draw to.
//
func (widget *Widget) Draw(cr *cairo.Context) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(cr.Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("draw", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(cr)
}

// ErrorBell notifies the user about an input-related error on this widget. If
// the Settings:gtk-error-bell setting is TRUE, it calls gdk_window_beep(),
// otherwise it does nothing.
//
// Note that the effect of gdk_window_beep() can be configured in many ways,
// depending on the windowing backend and the desktop environment or window
// manager that is used.
func (widget *Widget) ErrorBell() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("error_bell", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Event: rarely-used function. This function is used to emit the event signals
// on a widget (those signals should never be emitted without using this
// function to do so). If you want to synthesize an event though, don’t use this
// function; instead, use gtk_main_do_event() so the event will behave as if it
// were in the event queue. Don’t synthesize expose events; instead, use
// gdk_window_invalidate_rect() to invalidate a region of the window.
//
// The function takes the following parameters:
//
//    - event: Event.
//
// The function returns the following values:
//
//    - ok: return from the event signal emission (TRUE if the event was
//      handled).
//
func (widget *Widget) Event(event *gdk.Event) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(event)))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("event", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(event)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// FreezeChildNotify stops emission of Widget::child-notify signals on widget.
// The signals are queued until gtk_widget_thaw_child_notify() is called on
// widget.
//
// This is the analogue of g_object_freeze_notify() for child properties.
func (widget *Widget) FreezeChildNotify() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("freeze_child_notify", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Accessible returns the accessible object that describes the widget to an
// assistive technology.
//
// If accessibility support is not available, this Object instance may be a
// no-op. Likewise, if no class-specific Object implementation is available for
// the widget instance in question, it will inherit an Object implementation
// from the first ancestor class for which such an implementation is defined.
//
// The documentation of the ATK (http://developer.gnome.org/atk/stable/) library
// contains more information about accessible objects and their uses.
//
// The function returns the following values:
//
//    - object associated with widget.
//
func (widget *Widget) Accessible() *atk.ObjectClass {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_accessible", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _object *atk.ObjectClass // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_object = &atk.ObjectClass{
			Object: obj,
		}
	}

	return _object
}

// ActionGroup retrieves the Group that was registered using prefix. The
// resulting Group may have been registered to widget or any Widget in its
// ancestry.
//
// If no action group was found matching prefix, then NULL is returned.
//
// The function takes the following parameters:
//
//    - prefix: “prefix” of the action group.
//
// The function returns the following values:
//
//    - actionGroup (optional) or NULL.
//
func (widget *Widget) ActionGroup(prefix string) *gio.ActionGroup {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(prefix)))
	defer C.free(unsafe.Pointer(_args[1]))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_action_group", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(prefix)

	var _actionGroup *gio.ActionGroup // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_actionGroup = &gio.ActionGroup{
				Object: obj,
			}
		}
	}

	return _actionGroup
}

// AllocatedBaseline returns the baseline that has currently been allocated to
// widget. This function is intended to be used when implementing handlers for
// the Widget::draw function, and when allocating child widgets in
// Widget::size_allocate.
//
// The function returns the following values:
//
//    - gint: baseline of the widget, or -1 if none.
//
func (widget *Widget) AllocatedBaseline() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_allocated_baseline", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// AllocatedHeight returns the height that has currently been allocated to
// widget. This function is intended to be used when implementing handlers for
// the Widget::draw function.
//
// The function returns the following values:
//
//    - gint: height of the widget.
//
func (widget *Widget) AllocatedHeight() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_allocated_height", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// AllocatedWidth returns the width that has currently been allocated to widget.
// This function is intended to be used when implementing handlers for the
// Widget::draw function.
//
// The function returns the following values:
//
//    - gint: width of the widget.
//
func (widget *Widget) AllocatedWidth() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_allocated_width", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// AppPaintable determines whether the application intends to draw on the widget
// in an Widget::draw handler.
//
// See gtk_widget_set_app_paintable().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is app paintable.
//
func (widget *Widget) AppPaintable() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_app_paintable", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CanDefault determines whether widget can be a default widget. See
// gtk_widget_set_can_default().
//
// The function returns the following values:
//
//    - ok: TRUE if widget can be a default widget, FALSE otherwise.
//
func (widget *Widget) CanDefault() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_can_default", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CanFocus determines whether widget can own the input focus. See
// gtk_widget_set_can_focus().
//
// The function returns the following values:
//
//    - ok: TRUE if widget can own the input focus, FALSE otherwise.
//
func (widget *Widget) CanFocus() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_can_focus", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ChildRequisition: this function is only for use in widget implementations.
// Obtains widget->requisition, unless someone has forced a particular geometry
// on the widget (e.g. with gtk_widget_set_size_request()), in which case it
// returns that geometry instead of the widget's requisition.
//
// This function differs from gtk_widget_size_request() in that it retrieves the
// last size request value from widget->requisition, while
// gtk_widget_size_request() actually calls the "size_request" method on widget
// to compute the size request and fill in widget->requisition, and only then
// returns widget->requisition.
//
// Because this function does not call the “size_request” method, it can only be
// used when you know that widget->requisition is up-to-date, that is,
// gtk_widget_size_request() has been called since the last time a resize was
// queued. In general, only container implementations have this information;
// applications should use gtk_widget_size_request().
//
// Deprecated: Use gtk_widget_get_preferred_size() instead.
//
// The function returns the following values:
//
//    - requisition to be filled in.
//
func (widget *Widget) ChildRequisition() *Requisition {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_child_requisition", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _requisition *Requisition // out

	_requisition = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _requisition
}

// ChildVisible gets the value set with gtk_widget_set_child_visible(). If you
// feel a need to use this function, your code probably needs reorganization.
//
// This function is only useful for container implementations and never should
// be called by an application.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is mapped with the parent.
//
func (widget *Widget) ChildVisible() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_child_visible", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CompositeName obtains the composite name of a widget.
//
// Deprecated: Use gtk_widget_class_set_template(), or don’t use this API at
// all.
//
// The function returns the following values:
//
//    - utf8: composite name of widget, or NULL if widget is not a composite
//      child. The string should be freed when it is no longer needed.
//
func (widget *Widget) CompositeName() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_composite_name", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DeviceEnabled returns whether device can interact with widget and its
// children. See gtk_widget_set_device_enabled().
//
// The function takes the following parameters:
//
//    - device: Device.
//
// The function returns the following values:
//
//    - ok: TRUE is device is enabled for widget.
//
func (widget *Widget) DeviceEnabled(device gdk.Devicer) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(device).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_device_enabled", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(device)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Display: get the Display for the toplevel window associated with this widget.
// This function can only be called after the widget has been added to a widget
// hierarchy with a Window at the top.
//
// In general, you should only create display specific resources when a widget
// has been realized, and you should free those resources when the widget is
// unrealized.
//
// The function returns the following values:
//
//    - display for the toplevel for this widget.
//
func (widget *Widget) Display() *gdk.Display {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_display", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _display *gdk.Display // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_display = &gdk.Display{
			Object: obj,
		}
	}

	return _display
}

// DoubleBuffered determines whether the widget is double buffered.
//
// See gtk_widget_set_double_buffered().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is double buffered.
//
func (widget *Widget) DoubleBuffered() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_double_buffered", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Events returns the event mask (see EventMask) for the widget. These are the
// events that the widget will receive.
//
// Note: Internally, the widget event mask will be the logical OR of the event
// mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
// event mask necessary to cater for every EventController created for the
// widget.
//
// The function returns the following values:
//
//    - gint: event mask for widget.
//
func (widget *Widget) Events() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_events", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// FocusOnClick returns whether the widget should grab focus when it is clicked
// with the mouse. See gtk_widget_set_focus_on_click().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget should grab focus when it is clicked with the
//      mouse.
//
func (widget *Widget) FocusOnClick() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_focus_on_click", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// FontMap gets the font map that has been set with gtk_widget_set_font_map().
//
// The function returns the following values:
//
//    - fontMap (optional) or NULL.
//
func (widget *Widget) FontMap() pango.FontMapper {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_font_map", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _fontMap pango.FontMapper // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(pango.FontMapper)
				return ok
			})
			rv, ok := casted.(pango.FontMapper)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontMapper")
			}
			_fontMap = rv
		}
	}

	return _fontMap
}

// FontOptions returns the #cairo_font_options_t used for Pango rendering. When
// not set, the defaults font options for the Screen will be used.
//
// The function returns the following values:
//
//    - fontOptions (optional) or NULL if not set.
//
func (widget *Widget) FontOptions() *cairo.FontOptions {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_font_options", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _fontOptions *cairo.FontOptions // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_fontOptions = (*cairo.FontOptions)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _fontOptions
}

// FrameClock obtains the frame clock for a widget. The frame clock is a global
// “ticker” that can be used to drive animations and repaints. The most common
// reason to get the frame clock is to call gdk_frame_clock_get_frame_time(), in
// order to get a time to use for animating. For example you might record the
// start of the animation with an initial value from
// gdk_frame_clock_get_frame_time(), and then update the animation by calling
// gdk_frame_clock_get_frame_time() again during each repaint.
//
// gdk_frame_clock_request_phase() will result in a new frame on the clock, but
// won’t necessarily repaint any widgets. To repaint a widget, you have to use
// gtk_widget_queue_draw() which invalidates the widget (thus scheduling it to
// receive a draw on the next frame). gtk_widget_queue_draw() will also end up
// requesting a frame on the appropriate frame clock.
//
// A widget’s frame clock will not change while the widget is mapped.
// Reparenting a widget (which implies a temporary unmap) can change the
// widget’s frame clock.
//
// Unrealized widgets do not have a frame clock.
//
// The function returns the following values:
//
//    - frameClock (optional) NULL if widget is unrealized.
//
func (widget *Widget) FrameClock() gdk.FrameClocker {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_frame_clock", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _frameClock gdk.FrameClocker // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.FrameClocker)
				return ok
			})
			rv, ok := casted.(gdk.FrameClocker)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.FrameClocker")
			}
			_frameClock = rv
		}
	}

	return _frameClock
}

// HasTooltip returns the current value of the has-tooltip property. See
// Widget:has-tooltip for more information.
//
// The function returns the following values:
//
//    - ok: current value of has-tooltip on widget.
//
func (widget *Widget) HasTooltip() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_has_tooltip", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasWindow determines whether widget has a Window of its own. See
// gtk_widget_set_has_window().
//
// The function returns the following values:
//
//    - ok: TRUE if widget has a window, FALSE otherwise.
//
func (widget *Widget) HasWindow() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_has_window", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HExpand gets whether the widget would like any available extra horizontal
// space. When a user resizes a Window, widgets with expand=TRUE generally
// receive the extra space. For example, a list or scrollable area or document
// in your window would often be set to expand.
//
// Containers should use gtk_widget_compute_expand() rather than this function,
// to see whether a widget, or any of its children, has the expand flag set. If
// any child of a widget wants to expand, the parent may ask to expand also.
//
// This function only looks at the widget’s own hexpand flag, rather than
// computing whether the entire widget tree rooted at this widget wants to
// expand.
//
// The function returns the following values:
//
//    - ok: whether hexpand flag is set.
//
func (widget *Widget) HExpand() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_hexpand", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HExpandSet gets whether gtk_widget_set_hexpand() has been used to explicitly
// set the expand flag on this widget.
//
// If hexpand is set, then it overrides any computed expand value based on child
// widgets. If hexpand is not set, then the expand value depends on whether any
// children of the widget would like to expand.
//
// There are few reasons to use this function, but it’s here for completeness
// and consistency.
//
// The function returns the following values:
//
//    - ok: whether hexpand has been explicitly set.
//
func (widget *Widget) HExpandSet() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_hexpand_set", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Mapped: whether the widget is mapped.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is mapped, FALSE otherwise.
//
func (widget *Widget) Mapped() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_mapped", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// MarginBottom gets the value of the Widget:margin-bottom property.
//
// The function returns the following values:
//
//    - gint: bottom margin of widget.
//
func (widget *Widget) MarginBottom() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_bottom", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MarginEnd gets the value of the Widget:margin-end property.
//
// The function returns the following values:
//
//    - gint: end margin of widget.
//
func (widget *Widget) MarginEnd() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_end", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MarginLeft gets the value of the Widget:margin-left property.
//
// Deprecated: Use gtk_widget_get_margin_start() instead.
//
// The function returns the following values:
//
//    - gint: left margin of widget.
//
func (widget *Widget) MarginLeft() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_left", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MarginRight gets the value of the Widget:margin-right property.
//
// Deprecated: Use gtk_widget_get_margin_end() instead.
//
// The function returns the following values:
//
//    - gint: right margin of widget.
//
func (widget *Widget) MarginRight() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_right", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MarginStart gets the value of the Widget:margin-start property.
//
// The function returns the following values:
//
//    - gint: start margin of widget.
//
func (widget *Widget) MarginStart() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_start", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MarginTop gets the value of the Widget:margin-top property.
//
// The function returns the following values:
//
//    - gint: top margin of widget.
//
func (widget *Widget) MarginTop() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_margin_top", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Name retrieves the name of a widget. See gtk_widget_set_name() for the
// significance of widget names.
//
// The function returns the following values:
//
//    - utf8: name of the widget. This string is owned by GTK+ and should not be
//      modified or freed.
//
func (widget *Widget) Name() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_name", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NoShowAll returns the current value of the Widget:no-show-all property, which
// determines whether calls to gtk_widget_show_all() will affect this widget.
//
// The function returns the following values:
//
//    - ok: current value of the “no-show-all” property.
//
func (widget *Widget) NoShowAll() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_no_show_all", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Opacity fetches the requested opacity for this widget. See
// gtk_widget_set_opacity().
//
// The function returns the following values:
//
//    - gdouble: requested opacity for this widget.
//
func (widget *Widget) Opacity() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_opacity", _args[:], nil)
	_cret = *(*C.double)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.double)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// PangoContext gets a Context with the appropriate font map, font description,
// and base direction for this widget. Unlike the context returned by
// gtk_widget_create_pango_context(), this context is owned by the widget (it
// can be used until the screen for the widget changes or the widget is removed
// from its toplevel), and will be updated to match any changes to the widget’s
// attributes. This can be tracked by using the Widget::screen-changed signal on
// the widget.
//
// The function returns the following values:
//
//    - context for the widget.
//
func (widget *Widget) PangoContext() *pango.Context {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_pango_context", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _context *pango.Context // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_context = &pango.Context{
			Object: obj,
		}
	}

	return _context
}

// Parent returns the parent container of widget.
//
// The function returns the following values:
//
//    - ret (optional): parent container of widget, or NULL.
//
func (widget *Widget) Parent() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_parent", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ret Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_ret = rv
		}
	}

	return _ret
}

// ParentWindow gets widget’s parent window, or NULL if it does not have one.
//
// The function returns the following values:
//
//    - window (optional): parent window of widget, or NULL if it does not have a
//      parent window.
//
func (widget *Widget) ParentWindow() gdk.Windower {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_parent_window", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _window gdk.Windower // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.Windower)
				return ok
			})
			rv, ok := casted.(gdk.Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_window = rv
		}
	}

	return _window
}

// GetPath returns the WidgetPath representing widget, if the widget is not
// connected to a toplevel widget, a partial path will be created.
//
// The function returns the following values:
//
//    - widgetPath representing widget.
//
func (widget *Widget) GetPath() *WidgetPath {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_path", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_widgetPath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "WidgetPath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _widgetPath
}

// Pointer obtains the location of the mouse pointer in widget coordinates.
// Widget coordinates are a bit odd; for historical reasons, they are defined as
// widget->window coordinates for widgets that return TRUE for
// gtk_widget_get_has_window(); and are relative to widget->allocation.x,
// widget->allocation.y otherwise.
//
// Deprecated: Use gdk_window_get_device_position() instead.
//
// The function returns the following values:
//
//    - x (optional): return location for the X coordinate, or NULL.
//    - y (optional): return location for the Y coordinate, or NULL.
//
func (widget *Widget) Pointer() (x, y int32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_pointer", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _x int32 // out
	var _y int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_x = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_y = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _x, _y
}

// PreferredHeight retrieves a widget’s initial minimum and natural height.
//
// This call is specific to width-for-height requests.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups that
// have been applied. That is, the returned request is the one that should be
// used for layout, not necessarily the one returned by the widget itself.
//
// The function returns the following values:
//
//    - minimumHeight (optional): location to store the minimum height, or NULL.
//    - naturalHeight (optional): location to store the natural height, or NULL.
//
func (widget *Widget) PreferredHeight() (minimumHeight, naturalHeight int32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_height", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _minimumHeight int32 // out
	var _naturalHeight int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumHeight = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalHeight = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _minimumHeight, _naturalHeight
}

// PreferredHeightAndBaselineForWidth retrieves a widget’s minimum and natural
// height and the corresponding baselines if it would be given the specified
// width, or the default height if width is -1. The baselines may be -1 which
// means that no baseline is requested for this widget.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request and
// GtkWidgetClass::adjust_baseline_request virtual methods and by any SizeGroups
// that have been applied. That is, the returned request is the one that should
// be used for layout, not necessarily the one returned by the widget itself.
//
// The function takes the following parameters:
//
//    - width which is available for allocation, or -1 if none.
//
// The function returns the following values:
//
//    - minimumHeight (optional): location for storing the minimum height, or
//      NULL.
//    - naturalHeight (optional): location for storing the natural height, or
//      NULL.
//    - minimumBaseline (optional): location for storing the baseline for the
//      minimum height, or NULL.
//    - naturalBaseline (optional): location for storing the baseline for the
//      natural height, or NULL.
//
func (widget *Widget) PreferredHeightAndBaselineForWidth(width int32) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int32) {
	var _args [2]girepository.Argument
	var _outs [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(width)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_height_and_baseline_for_width", _args[:], _outs[:])

	runtime.KeepAlive(widget)
	runtime.KeepAlive(width)

	var _minimumHeight int32   // out
	var _naturalHeight int32   // out
	var _minimumBaseline int32 // out
	var _naturalBaseline int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumHeight = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalHeight = *(*int32)(unsafe.Pointer(_outs[1]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[2])) != nil {
		_minimumBaseline = *(*int32)(unsafe.Pointer(_outs[2]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[3])) != nil {
		_naturalBaseline = *(*int32)(unsafe.Pointer(_outs[3]))
	}

	return _minimumHeight, _naturalHeight, _minimumBaseline, _naturalBaseline
}

// PreferredHeightForWidth retrieves a widget’s minimum and natural height if it
// would be given the specified width.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups that
// have been applied. That is, the returned request is the one that should be
// used for layout, not necessarily the one returned by the widget itself.
//
// The function takes the following parameters:
//
//    - width which is available for allocation.
//
// The function returns the following values:
//
//    - minimumHeight (optional): location for storing the minimum height, or
//      NULL.
//    - naturalHeight (optional): location for storing the natural height, or
//      NULL.
//
func (widget *Widget) PreferredHeightForWidth(width int32) (minimumHeight, naturalHeight int32) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(width)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_height_for_width", _args[:], _outs[:])

	runtime.KeepAlive(widget)
	runtime.KeepAlive(width)

	var _minimumHeight int32 // out
	var _naturalHeight int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumHeight = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalHeight = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _minimumHeight, _naturalHeight
}

// PreferredSize retrieves the minimum and natural size of a widget, taking into
// account the widget’s preference for height-for-width management.
//
// This is used to retrieve a suitable size by container widgets which do not
// impose any restrictions on the child placement. It can be used to deduce
// toplevel window and menu sizes as well as child widgets in free-form
// containers such as GtkLayout.
//
// Handle with care. Note that the natural height of a height-for-width widget
// will generally be a smaller size than the minimum height, since the required
// height for the natural width is generally smaller than the required height
// for the minimum width.
//
// Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to
// support baseline alignment.
//
// The function returns the following values:
//
//    - minimumSize (optional): location for storing the minimum size, or NULL.
//    - naturalSize (optional): location for storing the natural size, or NULL.
//
func (widget *Widget) PreferredSize() (minimumSize, naturalSize *Requisition) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_size", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _minimumSize *Requisition // out
	var _naturalSize *Requisition // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumSize = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalSize = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_outs[1])))
	}

	return _minimumSize, _naturalSize
}

// PreferredWidth retrieves a widget’s initial minimum and natural width.
//
// This call is specific to height-for-width requests.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups that
// have been applied. That is, the returned request is the one that should be
// used for layout, not necessarily the one returned by the widget itself.
//
// The function returns the following values:
//
//    - minimumWidth (optional): location to store the minimum width, or NULL.
//    - naturalWidth (optional): location to store the natural width, or NULL.
//
func (widget *Widget) PreferredWidth() (minimumWidth, naturalWidth int32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_width", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _minimumWidth int32 // out
	var _naturalWidth int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumWidth = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalWidth = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _minimumWidth, _naturalWidth
}

// PreferredWidthForHeight retrieves a widget’s minimum and natural width if it
// would be given the specified height.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request virtual method and by any SizeGroups that
// have been applied. That is, the returned request is the one that should be
// used for layout, not necessarily the one returned by the widget itself.
//
// The function takes the following parameters:
//
//    - height which is available for allocation.
//
// The function returns the following values:
//
//    - minimumWidth (optional): location for storing the minimum width, or NULL.
//    - naturalWidth (optional): location for storing the natural width, or NULL.
//
func (widget *Widget) PreferredWidthForHeight(height int32) (minimumWidth, naturalWidth int32) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(height)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_preferred_width_for_height", _args[:], _outs[:])

	runtime.KeepAlive(widget)
	runtime.KeepAlive(height)

	var _minimumWidth int32 // out
	var _naturalWidth int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_minimumWidth = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_naturalWidth = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _minimumWidth, _naturalWidth
}

// Realized determines whether widget is realized.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is realized, FALSE otherwise.
//
func (widget *Widget) Realized() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_realized", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ReceivesDefault determines whether widget is always treated as the default
// widget within its toplevel when it has the focus, even if another widget is
// the default.
//
// See gtk_widget_set_receives_default().
//
// The function returns the following values:
//
//    - ok: TRUE if widget acts as the default widget when focused, FALSE
//      otherwise.
//
func (widget *Widget) ReceivesDefault() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_receives_default", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Requisition retrieves the widget’s requisition.
//
// This function should only be used by widget implementations in order to
// figure whether the widget’s requisition has actually changed after some
// internal state change (so that they can call gtk_widget_queue_resize()
// instead of gtk_widget_queue_draw()).
//
// Normally, gtk_widget_size_request() should be used.
//
// Deprecated: The Requisition cache on the widget was removed, If you need to
// cache sizes across requests and allocations, add an explicit cache to the
// widget in question instead.
//
// The function returns the following values:
//
//    - requisition: pointer to a Requisition to copy to.
//
func (widget *Widget) Requisition() *Requisition {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_requisition", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _requisition *Requisition // out

	_requisition = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _requisition
}

// RootWindow: get the root window where this widget is located. This function
// can only be called after the widget has been added to a widget hierarchy with
// Window at the top.
//
// The root window is useful for such purposes as creating a popup Window
// associated with the window. In general, you should only create display
// specific resources when a widget has been realized, and you should free those
// resources when the widget is unrealized.
//
// Deprecated: Use gdk_screen_get_root_window() instead.
//
// The function returns the following values:
//
//    - window root window for the toplevel for this widget.
//
func (widget *Widget) RootWindow() gdk.Windower {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_root_window", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _window gdk.Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Windower)
			return ok
		})
		rv, ok := casted.(gdk.Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	return _window
}

// ScaleFactor retrieves the internal scale factor that maps from window
// coordinates to the actual device pixels. On traditional systems this is 1, on
// high density outputs, it can be a higher value (typically 2).
//
// See gdk_window_get_scale_factor().
//
// The function returns the following values:
//
//    - gint: scale factor for widget.
//
func (widget *Widget) ScaleFactor() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_scale_factor", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Screen: get the Screen from the toplevel window associated with this widget.
// This function can only be called after the widget has been added to a widget
// hierarchy with a Window at the top.
//
// In general, you should only create screen specific resources when a widget
// has been realized, and you should free those resources when the widget is
// unrealized.
//
// The function returns the following values:
//
//    - screen for the toplevel for this widget.
//
func (widget *Widget) Screen() *gdk.Screen {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_screen", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// Sensitive returns the widget’s sensitivity (in the sense of returning the
// value that has been set using gtk_widget_set_sensitive()).
//
// The effective sensitivity of a widget is however determined by both its own
// and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is sensitive.
//
func (widget *Widget) Sensitive() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_sensitive", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Settings gets the settings object holding the settings used for this widget.
//
// Note that this function can only be called when the Widget is attached to a
// toplevel, since the settings object is specific to a particular Screen.
//
// The function returns the following values:
//
//    - settings: relevant Settings object.
//
func (widget *Widget) Settings() *Settings {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_settings", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _settings *Settings // out

	_settings = wrapSettings(coreglib.Take(unsafe.Pointer(_cret)))

	return _settings
}

// GetSizeRequest gets the size request that was explicitly set for the widget
// using gtk_widget_set_size_request(). A value of -1 stored in width or height
// indicates that that dimension has not been set explicitly and the natural
// requisition of the widget will be used instead. See
// gtk_widget_set_size_request(). To get the size a widget will actually
// request, call gtk_widget_get_preferred_size() instead of this function.
//
// The function returns the following values:
//
//    - width (optional): return location for width, or NULL.
//    - height (optional): return location for height, or NULL.
//
func (widget *Widget) GetSizeRequest() (width, height int32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("get_size_request", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _width int32  // out
	var _height int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_width = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_height = *(*int32)(unsafe.Pointer(_outs[1]))
	}

	return _width, _height
}

// StyleContext returns the style context associated to widget. The returned
// object is guaranteed to be the same for the lifetime of widget.
//
// The function returns the following values:
//
//    - styleContext This memory is owned by widget and must not be freed.
//
func (widget *Widget) StyleContext() *StyleContext {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_style_context", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _styleContext *StyleContext // out

	_styleContext = wrapStyleContext(coreglib.Take(unsafe.Pointer(_cret)))

	return _styleContext
}

// SupportMultidevice returns TRUE if widget is multiple pointer aware. See
// gtk_widget_set_support_multidevice() for more information.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is multidevice aware.
//
func (widget *Widget) SupportMultidevice() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_support_multidevice", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// TooltipMarkup gets the contents of the tooltip for widget.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. You should free the returned
//      string with g_free() when done.
//
func (widget *Widget) TooltipMarkup() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_tooltip_markup", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// TooltipText gets the contents of the tooltip for widget.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. You should free the returned
//      string with g_free() when done.
//
func (widget *Widget) TooltipText() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_tooltip_text", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// TooltipWindow returns the Window of the current tooltip. This can be the
// GtkWindow created by default, or the custom tooltip window set using
// gtk_widget_set_tooltip_window().
//
// The function returns the following values:
//
//    - window of the current tooltip.
//
func (widget *Widget) TooltipWindow() *Window {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_tooltip_window", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _window *Window // out

	_window = wrapWindow(coreglib.Take(unsafe.Pointer(_cret)))

	return _window
}

// Toplevel: this function returns the topmost widget in the container hierarchy
// widget is a part of. If widget has no parent widgets, it will be returned as
// the topmost widget. No reference will be added to the returned widget; it
// should not be unreferenced.
//
// Note the difference in behavior vs. gtk_widget_get_ancestor();
// gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW) would return NULL if widget
// wasn’t inside a toplevel window, and if the window was inside a
// Window-derived widget which was in turn inside the toplevel Window. While the
// second case may seem unlikely, it actually happens when a Plug is embedded
// inside a Socket within the same application.
//
// To reliably find the toplevel Window, use gtk_widget_get_toplevel() and call
// GTK_IS_WINDOW() on the result. For instance, to get the title of a widget's
// toplevel window, one might use:
//
//    static const char *
//    get_widget_toplevel_title (GtkWidget *widget)
//    {
//      GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
//      if (GTK_IS_WINDOW (toplevel))
//        {
//          return gtk_window_get_title (GTK_WINDOW (toplevel));
//        }
//
//      return NULL;
//    }.
//
// The function returns the following values:
//
//    - ret: topmost ancestor of widget, or widget itself if there’s no ancestor.
//
func (widget *Widget) Toplevel() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_toplevel", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ret Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_ret = rv
	}

	return _ret
}

// VExpand gets whether the widget would like any available extra vertical
// space.
//
// See gtk_widget_get_hexpand() for more detail.
//
// The function returns the following values:
//
//    - ok: whether vexpand flag is set.
//
func (widget *Widget) VExpand() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_vexpand", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// VExpandSet gets whether gtk_widget_set_vexpand() has been used to explicitly
// set the expand flag on this widget.
//
// See gtk_widget_get_hexpand_set() for more detail.
//
// The function returns the following values:
//
//    - ok: whether vexpand has been explicitly set.
//
func (widget *Widget) VExpandSet() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_vexpand_set", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Visible determines whether the widget is visible. If you want to take into
// account whether the widget’s parent is also marked as visible, use
// gtk_widget_is_visible() instead.
//
// This function does not check if the widget is obscured in any way.
//
// See gtk_widget_set_visible().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is visible.
//
func (widget *Widget) Visible() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_visible", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Visual gets the visual that will be used to render widget.
//
// The function returns the following values:
//
//    - visual for widget.
//
func (widget *Widget) Visual() *gdk.Visual {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_visual", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _visual *gdk.Visual // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_visual = &gdk.Visual{
			Object: obj,
		}
	}

	return _visual
}

// Window returns the widget’s window if it is realized, NULL otherwise.
//
// The function returns the following values:
//
//    - window (optional) widget’s window.
//
func (widget *Widget) Window() gdk.Windower {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("get_window", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _window gdk.Windower // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.Windower)
				return ok
			})
			rv, ok := casted.(gdk.Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_window = rv
		}
	}

	return _window
}

// GrabDefault causes widget to become the default widget. widget must be able
// to be a default widget; typically you would ensure this yourself by calling
// gtk_widget_set_can_default() with a TRUE value. The default widget is
// activated when the user presses Enter in a window. Default widgets must be
// activatable, that is, gtk_widget_activate() should affect them. Note that
// Entry widgets require the “activates-default” property set to TRUE before
// they activate the default widget when Enter is pressed and the Entry is
// focused.
func (widget *Widget) GrabDefault() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("grab_default", _args[:], nil)

	runtime.KeepAlive(widget)
}

// GrabFocus causes widget to have the keyboard focus for the Window it's
// inside. widget must be a focusable widget, such as a Entry; something like
// Frame won’t work.
//
// More precisely, it must have the GTK_CAN_FOCUS flag set. Use
// gtk_widget_set_can_focus() to modify that flag.
//
// The widget also needs to be realized and mapped. This is indicated by the
// related signals. Grabbing the focus immediately after creating the widget
// will likely fail and cause critical warnings.
func (widget *Widget) GrabFocus() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("grab_focus", _args[:], nil)

	runtime.KeepAlive(widget)
}

// HasDefault determines whether widget is the current default widget within its
// toplevel. See gtk_widget_set_can_default().
//
// The function returns the following values:
//
//    - ok: TRUE if widget is the current default widget within its toplevel,
//      FALSE otherwise.
//
func (widget *Widget) HasDefault() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("has_default", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasFocus determines if the widget has the global input focus. See
// gtk_widget_is_focus() for the difference between having the global input
// focus, and only having the focus within a toplevel.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget has the global input focus.
//
func (widget *Widget) HasFocus() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("has_focus", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasGrab determines whether the widget is currently grabbing events, so it is
// the only widget receiving input events (keyboard and mouse).
//
// See also gtk_grab_add().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is in the grab_widgets stack.
//
func (widget *Widget) HasGrab() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("has_grab", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasScreen checks whether there is a Screen is associated with this widget.
// All toplevel widgets have an associated screen, and all widgets added into a
// hierarchy with a toplevel window at the top.
//
// The function returns the following values:
//
//    - ok: TRUE if there is a Screen associated with the widget.
//
func (widget *Widget) HasScreen() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("has_screen", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasVisibleFocus determines if the widget should show a visible indication
// that it has the global input focus. This is a convenience function for use in
// ::draw handlers that takes into account whether focus indication should
// currently be shown in the toplevel window of widget. See
// gtk_window_get_focus_visible() for more information about focus indication.
//
// To find out if the widget has the global input focus, use
// gtk_widget_has_focus().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget should display a “focus rectangle”.
//
func (widget *Widget) HasVisibleFocus() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("has_visible_focus", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Hide reverses the effects of gtk_widget_show(), causing the widget to be
// hidden (invisible to the user).
func (widget *Widget) Hide() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("hide", _args[:], nil)

	runtime.KeepAlive(widget)
}

// HideOnDelete: utility function; intended to be connected to the
// Widget::delete-event signal on a Window. The function calls gtk_widget_hide()
// on its argument, then returns TRUE. If connected to ::delete-event, the
// result is that clicking the close button for a window (on the window frame,
// top right corner usually) will hide but not destroy the window. By default,
// GTK+ destroys windows when ::delete-event is received.
//
// The function returns the following values:
//
//    - ok: TRUE.
//
func (widget *Widget) HideOnDelete() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("hide_on_delete", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// InDestruction returns whether the widget is currently being destroyed. This
// information can sometimes be used to avoid doing unnecessary work.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is being destroyed.
//
func (widget *Widget) InDestruction() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("in_destruction", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// InitTemplate creates and initializes child widgets defined in templates. This
// function must be called in the instance initializer for any class which
// assigned itself a template using gtk_widget_class_set_template()
//
// It is important to call this function in the instance initializer of a Widget
// subclass and not in #GObject.constructed() or #GObject.constructor() for two
// reasons.
//
// One reason is that generally derived widgets will assume that parent class
// composite widgets have been created in their instance initializers.
//
// Another reason is that when calling g_object_new() on a widget with composite
// templates, it’s important to build the composite widgets before the construct
// properties are set. Properties passed to g_object_new() should take
// precedence over properties set in the private template XML.
func (widget *Widget) InitTemplate() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("init_template", _args[:], nil)

	runtime.KeepAlive(widget)
}

// InputShapeCombineRegion sets an input shape for this widget’s GDK window.
// This allows for windows which react to mouse click in a nonrectangular
// region, see gdk_window_input_shape_combine_region() for more information.
//
// The function takes the following parameters:
//
//    - region (optional): shape to be added, or NULL to remove an existing
//      shape.
//
func (widget *Widget) InputShapeCombineRegion(region *cairo.Region) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if region != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(region.Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("input_shape_combine_region", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(region)
}

// InsertActionGroup inserts group into widget. Children of widget that
// implement Actionable can then be associated with actions in group by setting
// their “action-name” to prefix.action-name.
//
// If group is NULL, a previously inserted group for name is removed from
// widget.
//
// The function takes the following parameters:
//
//    - name: prefix for actions in group.
//    - group (optional) or NULL.
//
func (widget *Widget) InsertActionGroup(name string, group gio.ActionGrouper) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))
	if group != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("insert_action_group", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(name)
	runtime.KeepAlive(group)
}

// Intersect computes the intersection of a widget’s area and area, storing the
// intersection in intersection, and returns TRUE if there was an intersection.
// intersection may be NULL if you’re only interested in whether there was an
// intersection.
//
// The function takes the following parameters:
//
//    - area: rectangle.
//
// The function returns the following values:
//
//    - intersection (optional): rectangle to store intersection of widget and
//      area.
//    - ok: TRUE if there was an intersection.
//
func (widget *Widget) Intersect(area *gdk.Rectangle) (*gdk.Rectangle, bool) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(area)))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("intersect", _args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(area)

	var _intersection *gdk.Rectangle // out
	var _ok bool                     // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_intersection = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	}
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _intersection, _ok
}

// IsAncestor determines whether widget is somewhere inside ancestor, possibly
// with intermediate containers.
//
// The function takes the following parameters:
//
//    - ancestor: another Widget.
//
// The function returns the following values:
//
//    - ok: TRUE if ancestor contains widget as a child, grandchild, great
//      grandchild, etc.
//
func (widget *Widget) IsAncestor(ancestor Widgetter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(ancestor).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_ancestor", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(ancestor)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsComposited: whether widget can rely on having its alpha channel drawn
// correctly. On X11 this function returns whether a compositing manager is
// running for widget’s screen.
//
// Please note that the semantics of this call will change in the future if used
// on a widget that has a composited window in its hierarchy (as set by
// gdk_window_set_composited()).
//
// Deprecated: Use gdk_screen_is_composited() instead.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget can rely on its alpha channel being drawn
//      correctly.
//
func (widget *Widget) IsComposited() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_composited", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsDrawable determines whether widget can be drawn to. A widget can be drawn
// to if it is mapped and visible.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is drawable, FALSE otherwise.
//
func (widget *Widget) IsDrawable() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_drawable", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsFocus determines if the widget is the focus widget within its toplevel.
// (This does not mean that the Widget:has-focus property is necessarily set;
// Widget:has-focus will only be set if the toplevel widget additionally has the
// global input focus.).
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is the focus widget.
//
func (widget *Widget) IsFocus() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_focus", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsSensitive returns the widget’s effective sensitivity, which means it is
// sensitive itself and also its parent widget is sensitive.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is effectively sensitive.
//
func (widget *Widget) IsSensitive() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_sensitive", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsToplevel determines whether widget is a toplevel widget.
//
// Currently only Window and Invisible (and out-of-process Plugs) are toplevel
// widgets. Toplevel widgets have no parent widget.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is a toplevel, FALSE otherwise.
//
func (widget *Widget) IsToplevel() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_toplevel", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsVisible determines whether the widget and all its parents are marked as
// visible.
//
// This function does not check if the widget is obscured in any way.
//
// See also gtk_widget_get_visible() and gtk_widget_set_visible().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget and all its parents are visible.
//
func (widget *Widget) IsVisible() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("is_visible", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ListActionPrefixes retrieves a NULL-terminated array of strings containing
// the prefixes of Group's available to widget.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of strings.
//
func (widget *Widget) ListActionPrefixes() []string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("list_action_prefixes", _args[:], nil)
	_cret = *(***C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// ListMnemonicLabels returns a newly allocated list of the widgets, normally
// labels, for which this widget is the target of a mnemonic (see for example,
// gtk_label_set_mnemonic_widget()).
//
// The widgets in the list are not individually referenced. If you want to
// iterate through the list and perform actions involving callbacks that might
// destroy the widgets, you must call g_list_foreach (result,
// (GFunc)g_object_ref, NULL) first, and then unref all the widgets afterwards.
//
// The function returns the following values:
//
//    - list of mnemonic labels; free this list with g_list_free() when you are
//      done with it.
//
func (widget *Widget) ListMnemonicLabels() []Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("list_mnemonic_labels", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)

	var _list []Widgetter // out

	_list = make([]Widgetter, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst Widgetter // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gtk.Widgetter is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// Map: this function is only for use in widget implementations. Causes a widget
// to be mapped if it isn’t already.
func (widget *Widget) Map() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("map", _args[:], nil)

	runtime.KeepAlive(widget)
}

// MnemonicActivate emits the Widget::mnemonic-activate signal.
//
// The function takes the following parameters:
//
//    - groupCycling: TRUE if there are other widgets with the same mnemonic.
//
// The function returns the following values:
//
//    - ok: TRUE if the signal has been handled.
//
func (widget *Widget) MnemonicActivate(groupCycling bool) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if groupCycling {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("mnemonic_activate", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(groupCycling)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// OverrideCursor sets the cursor color to use in a widget, overriding the
// cursor-color and secondary-cursor-color style properties. All other style
// values are left untouched. See also gtk_widget_modify_style().
//
// Note that the underlying properties have the Color type, so the alpha value
// in primary and secondary will be ignored.
//
// Deprecated: This function is not useful in the context of CSS-based
// rendering. If you wish to change the color used to render the primary and
// secondary cursors you should use a custom CSS style, through an
// application-specific StyleProvider and a CSS style class.
//
// The function takes the following parameters:
//
//    - cursor (optional): color to use for primary cursor (does not need to be
//      allocated), or NULL to undo the effect of previous calls to of
//      gtk_widget_override_cursor().
//    - secondaryCursor (optional): color to use for secondary cursor (does not
//      need to be allocated), or NULL to undo the effect of previous calls to of
//      gtk_widget_override_cursor().
//
func (widget *Widget) OverrideCursor(cursor, secondaryCursor *gdk.RGBA) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if cursor != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(cursor)))
	}
	if secondaryCursor != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(secondaryCursor)))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("override_cursor", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(cursor)
	runtime.KeepAlive(secondaryCursor)
}

// OverrideFont sets the font to use for a widget. All other style values are
// left untouched. See gtk_widget_override_color().
//
// Deprecated: This function is not useful in the context of CSS-based
// rendering. If you wish to change the font a widget uses to render its text
// you should use a custom CSS style, through an application-specific
// StyleProvider and a CSS style class.
//
// The function takes the following parameters:
//
//    - fontDesc (optional): font description to use, or NULL to undo the effect
//      of previous calls to gtk_widget_override_font().
//
func (widget *Widget) OverrideFont(fontDesc *pango.FontDescription) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if fontDesc != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(fontDesc)))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("override_font", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(fontDesc)
}

// OverrideSymbolicColor sets a symbolic color for a widget.
//
// All other style values are left untouched. See gtk_widget_override_color()
// for overriding the foreground or background color.
//
// Deprecated: This function is not useful in the context of CSS-based
// rendering. If you wish to change the color used to render symbolic icons you
// should use a custom CSS style, through an application-specific StyleProvider
// and a CSS style class.
//
// The function takes the following parameters:
//
//    - name of the symbolic color to modify.
//    - color (optional) to assign (does not need to be allocated), or NULL to
//      undo the effect of previous calls to
//      gtk_widget_override_symbolic_color().
//
func (widget *Widget) OverrideSymbolicColor(name string, color *gdk.RGBA) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))
	if color != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("override_symbolic_color", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(name)
	runtime.KeepAlive(color)
}

// QueueAllocate: this function is only for use in widget implementations.
//
// Flags the widget for a rerun of the GtkWidgetClass::size_allocate function.
// Use this function instead of gtk_widget_queue_resize() when the widget's size
// request didn't change but it wants to reposition its contents.
//
// An example user of this function is gtk_widget_set_halign().
func (widget *Widget) QueueAllocate() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_allocate", _args[:], nil)

	runtime.KeepAlive(widget)
}

// QueueComputeExpand: mark widget as needing to recompute its expand flags.
// Call this function when setting legacy expand child properties on the child
// of a container.
//
// See gtk_widget_compute_expand().
func (widget *Widget) QueueComputeExpand() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_compute_expand", _args[:], nil)

	runtime.KeepAlive(widget)
}

// QueueDraw: equivalent to calling gtk_widget_queue_draw_area() for the entire
// area of a widget.
func (widget *Widget) QueueDraw() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_draw", _args[:], nil)

	runtime.KeepAlive(widget)
}

// QueueDrawArea: convenience function that calls gtk_widget_queue_draw_region()
// on the region created from the given coordinates.
//
// The region here is specified in widget coordinates. Widget coordinates are a
// bit odd; for historical reasons, they are defined as widget->window
// coordinates for widgets that return TRUE for gtk_widget_get_has_window(), and
// are relative to widget->allocation.x, widget->allocation.y otherwise.
//
// width or height may be 0, in this case this function does nothing. Negative
// values for width and height are not allowed.
//
// The function takes the following parameters:
//
//    - x coordinate of upper-left corner of rectangle to redraw.
//    - y coordinate of upper-left corner of rectangle to redraw.
//    - width of region to draw.
//    - height of region to draw.
//
func (widget *Widget) QueueDrawArea(x, y, width, height int32) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(x)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(y)
	*(*C.gint)(unsafe.Pointer(&_args[3])) = C.gint(width)
	*(*C.gint)(unsafe.Pointer(&_args[4])) = C.gint(height)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_draw_area", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// QueueDrawRegion invalidates the area of widget defined by region by calling
// gdk_window_invalidate_region() on the widget’s window and all its child
// windows. Once the main loop becomes idle (after the current batch of events
// has been processed, roughly), the window will receive expose events for the
// union of all regions that have been invalidated.
//
// Normally you would only use this function in widget implementations. You
// might also use it to schedule a redraw of a DrawingArea or some portion
// thereof.
//
// The function takes the following parameters:
//
//    - region to draw.
//
func (widget *Widget) QueueDrawRegion(region *cairo.Region) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(region.Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_draw_region", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(region)
}

// QueueResize: this function is only for use in widget implementations. Flags a
// widget to have its size renegotiated; should be called when a widget for some
// reason has a new size request. For example, when you change the text in a
// Label, Label queues a resize to ensure there’s enough space for the new text.
//
// Note that you cannot call gtk_widget_queue_resize() on a widget from inside
// its implementation of the GtkWidgetClass::size_allocate virtual method. Calls
// to gtk_widget_queue_resize() from inside GtkWidgetClass::size_allocate will
// be silently ignored.
func (widget *Widget) QueueResize() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_resize", _args[:], nil)

	runtime.KeepAlive(widget)
}

// QueueResizeNoRedraw: this function works like gtk_widget_queue_resize(),
// except that the widget is not invalidated.
func (widget *Widget) QueueResizeNoRedraw() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("queue_resize_no_redraw", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Realize creates the GDK (windowing system) resources associated with a
// widget. For example, widget->window will be created when a widget is
// realized. Normally realization happens implicitly; if you show a widget and
// all its parent containers, then the widget will be realized and mapped
// automatically.
//
// Realizing a widget requires all the widget’s parent widgets to be realized;
// calling gtk_widget_realize() realizes the widget’s parents in addition to
// widget itself. If a widget is not yet inside a toplevel window when you
// realize it, bad things will happen.
//
// This function is primarily used in widget implementations, and isn’t very
// useful otherwise. Many times when you think you might need it, a better
// approach is to connect to a signal that will be called after the widget is
// realized automatically, such as Widget::draw. Or simply g_signal_connect ()
// to the Widget::realize signal.
func (widget *Widget) Realize() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("realize", _args[:], nil)

	runtime.KeepAlive(widget)
}

// RegionIntersect computes the intersection of a widget’s area and region,
// returning the intersection. The result may be empty, use
// cairo_region_is_empty() to check.
//
// Deprecated: Use gtk_widget_get_allocation() and
// cairo_region_intersect_rectangle() to get the same behavior.
//
// The function takes the following parameters:
//
//    - region in the same coordinate system as widget->allocation. That is,
//      relative to widget->window for widgets which return FALSE from
//      gtk_widget_get_has_window(); relative to the parent window of
//      widget->window otherwise.
//
// The function returns the following values:
//
//    - ret: newly allocated region holding the intersection of widget and
//      region.
//
func (widget *Widget) RegionIntersect(region *cairo.Region) *cairo.Region {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(region.Native()))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("region_intersect", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(region)

	var _ret *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_ret = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_ret, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	return _ret
}

// RegisterWindow registers a Window with the widget and sets it up so that the
// widget receives events for it. Call gtk_widget_unregister_window() when
// destroying the window.
//
// Before 3.8 you needed to call gdk_window_set_user_data() directly to set this
// up. This is now deprecated and you should use gtk_widget_register_window()
// instead. Old code will keep working as is, although some new features like
// transparency might not work perfectly.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (widget *Widget) RegisterWindow(window gdk.Windower) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("register_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}

// RemoveMnemonicLabel removes a widget from the list of mnemonic labels for
// this widget. (See gtk_widget_list_mnemonic_labels()). The widget must have
// previously been added to the list with gtk_widget_add_mnemonic_label().
//
// The function takes the following parameters:
//
//    - label that was previously set as a mnemonic label for widget with
//      gtk_widget_add_mnemonic_label().
//
func (widget *Widget) RemoveMnemonicLabel(label Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("remove_mnemonic_label", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(label)
}

// RemoveTickCallback removes a tick callback previously registered with
// gtk_widget_add_tick_callback().
//
// The function takes the following parameters:
//
//    - id returned by gtk_widget_add_tick_callback().
//
func (widget *Widget) RemoveTickCallback(id uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(id)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("remove_tick_callback", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(id)
}

// Reparent moves a widget from one Container to another, handling reference
// count issues to avoid destroying the widget.
//
// Deprecated: Use gtk_container_remove() and gtk_container_add().
//
// The function takes the following parameters:
//
//    - newParent to move the widget into.
//
func (widget *Widget) Reparent(newParent Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(newParent).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("reparent", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(newParent)
}

// ResetStyle updates the style context of widget and all descendants by
// updating its widget path. Containers may want to use this on a child when
// reordering it in a way that a different style might apply to it. See also
// gtk_container_get_path_for_child().
func (widget *Widget) ResetStyle() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("reset_style", _args[:], nil)

	runtime.KeepAlive(widget)
}

// SendExpose: very rarely-used function. This function is used to emit an
// expose event on a widget. This function is not normally used directly. The
// only time it is used is when propagating an expose event to a windowless
// child widget (gtk_widget_get_has_window() is FALSE), and that is normally
// done using gtk_container_propagate_draw().
//
// If you want to force an area of a window to be redrawn, use
// gdk_window_invalidate_rect() or gdk_window_invalidate_region(). To cause the
// redraw to be done immediately, follow that call with a call to
// gdk_window_process_updates().
//
// Deprecated: Application and widget code should not handle expose events
// directly; invalidation should use the Widget API, and drawing should only
// happen inside Widget::draw implementations.
//
// The function takes the following parameters:
//
//    - event: expose Event.
//
// The function returns the following values:
//
//    - gint: return from the event signal emission (TRUE if the event was
//      handled).
//
func (widget *Widget) SendExpose(event *gdk.Event) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(event)))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("send_expose", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(event)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// SendFocusChange sends the focus change event to widget
//
// This function is not meant to be used by applications. The only time it
// should be used is when it is necessary for a Widget to assign focus to a
// widget that is semantically owned by the first widget even though it’s not a
// direct child - for instance, a search entry in a floating window similar to
// the quick search in TreeView.
//
// An example of its usage is:
//
//      GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
//
//      fevent->focus_change.type = GDK_FOCUS_CHANGE;
//      fevent->focus_change.in = TRUE;
//      fevent->focus_change.window = _gtk_widget_get_window (widget);
//      if (fevent->focus_change.window != NULL)
//        g_object_ref (fevent->focus_change.window);
//
//      gtk_widget_send_focus_change (widget, fevent);
//
//      gdk_event_free (event);.
//
// The function takes the following parameters:
//
//    - event of type GDK_FOCUS_CHANGE.
//
// The function returns the following values:
//
//    - ok: return value from the event signal emission: TRUE if the event was
//      handled, and FALSE otherwise.
//
func (widget *Widget) SendFocusChange(event *gdk.Event) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(event)))

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("send_focus_change", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(widget)
	runtime.KeepAlive(event)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetAccelPath: given an accelerator group, accel_group, and an accelerator
// path, accel_path, sets up an accelerator in accel_group so whenever the key
// binding that is defined for accel_path is pressed, widget will be activated.
// This removes any accelerators (for any accelerator group) installed by
// previous calls to gtk_widget_set_accel_path(). Associating accelerators with
// paths allows them to be modified by the user and the modifications to be
// saved for future use. (See gtk_accel_map_save().)
//
// This function is a low level function that would most likely be used by a
// menu creation system like UIManager. If you use UIManager, setting up
// accelerator paths will be done automatically.
//
// Even when you you aren’t using UIManager, if you only want to set up
// accelerators on menu items gtk_menu_item_set_accel_path() provides a somewhat
// more convenient interface.
//
// Note that accel_path string will be stored in a #GQuark. Therefore, if you
// pass a static string, you can save some memory by interning it first with
// g_intern_static_string().
//
// The function takes the following parameters:
//
//    - accelPath (optional): path used to look up the accelerator.
//    - accelGroup (optional): AccelGroup.
//
func (widget *Widget) SetAccelPath(accelPath string, accelGroup *AccelGroup) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if accelPath != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(accelPath)))
		defer C.free(unsafe.Pointer(_args[1]))
	}
	if accelGroup != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_accel_path", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(accelPath)
	runtime.KeepAlive(accelGroup)
}

// SetAllocation sets the widget’s allocation. This should not be used directly,
// but from within a widget’s size_allocate method.
//
// The allocation set should be the “adjusted” or actual allocation. If you’re
// implementing a Container, you want to use gtk_widget_size_allocate() instead
// of gtk_widget_set_allocation(). The GtkWidgetClass::adjust_size_allocation
// virtual method adjusts the allocation inside gtk_widget_size_allocate() to
// create an adjusted allocation.
//
// The function takes the following parameters:
//
//    - allocation: pointer to a Allocation to copy from.
//
func (widget *Widget) SetAllocation(allocation *Allocation) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(allocation)))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_allocation", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(allocation)
}

// SetAppPaintable sets whether the application intends to draw on the widget in
// an Widget::draw handler.
//
// This is a hint to the widget and does not affect the behavior of the GTK+
// core; many widgets ignore this flag entirely. For widgets that do pay
// attention to the flag, such as EventBox and Window, the effect is to suppress
// default themed drawing of the widget's background. (Children of the widget
// will still be drawn.) The application is then entirely responsible for
// drawing the widget background.
//
// Note that the background is still drawn when the widget is mapped.
//
// The function takes the following parameters:
//
//    - appPaintable: TRUE if the application will paint on the widget.
//
func (widget *Widget) SetAppPaintable(appPaintable bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if appPaintable {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_app_paintable", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(appPaintable)
}

// SetCanDefault specifies whether widget can be a default widget. See
// gtk_widget_grab_default() for details about the meaning of “default”.
//
// The function takes the following parameters:
//
//    - canDefault: whether or not widget can be a default widget.
//
func (widget *Widget) SetCanDefault(canDefault bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if canDefault {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_can_default", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(canDefault)
}

// SetCanFocus specifies whether widget can own the input focus. See
// gtk_widget_grab_focus() for actually setting the input focus on a widget.
//
// The function takes the following parameters:
//
//    - canFocus: whether or not widget can own the input focus.
//
func (widget *Widget) SetCanFocus(canFocus bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if canFocus {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_can_focus", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(canFocus)
}

// SetChildVisible sets whether widget should be mapped along with its when its
// parent is mapped and widget has been shown with gtk_widget_show().
//
// The child visibility can be set for widget before it is added to a container
// with gtk_widget_set_parent(), to avoid mapping children unnecessary before
// immediately unmapping them. However it will be reset to its default state of
// TRUE when the widget is removed from a container.
//
// Note that changing the child visibility of a widget does not queue a resize
// on the widget. Most of the time, the size of a widget is computed from all
// visible children, whether or not they are mapped. If this is not the case,
// the container can queue a resize itself.
//
// This function is only useful for container implementations and never should
// be called by an application.
//
// The function takes the following parameters:
//
//    - isVisible: if TRUE, widget should be mapped along with its parent.
//
func (widget *Widget) SetChildVisible(isVisible bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if isVisible {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_child_visible", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(isVisible)
}

// SetClip sets the widget’s clip. This must not be used directly, but from
// within a widget’s size_allocate method. It must be called after
// gtk_widget_set_allocation() (or after chaining up to the parent class),
// because that function resets the clip.
//
// The clip set should be the area that widget draws on. If widget is a
// Container, the area must contain all children's clips.
//
// If this function is not called by widget during a ::size-allocate handler,
// the clip will be set to widget's allocation.
//
// The function takes the following parameters:
//
//    - clip: pointer to a Allocation to copy from.
//
func (widget *Widget) SetClip(clip *Allocation) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(clip)))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_clip", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(clip)
}

// SetCompositeName sets a widgets composite name. The widget must be a
// composite child of its parent; see gtk_widget_push_composite_child().
//
// Deprecated: Use gtk_widget_class_set_template(), or don’t use this API at
// all.
//
// The function takes the following parameters:
//
//    - name to set.
//
func (widget *Widget) SetCompositeName(name string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_composite_name", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(name)
}

// SetDeviceEnabled enables or disables a Device to interact with widget and all
// its children.
//
// It does so by descending through the Window hierarchy and enabling the same
// mask that is has for core events (i.e. the one that gdk_window_get_events()
// returns).
//
// The function takes the following parameters:
//
//    - device: Device.
//    - enabled: whether to enable the device.
//
func (widget *Widget) SetDeviceEnabled(device gdk.Devicer, enabled bool) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(device).Native()))
	if enabled {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_device_enabled", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(device)
	runtime.KeepAlive(enabled)
}

// SetDoubleBuffered widgets are double buffered by default; you can use this
// function to turn off the buffering. “Double buffered” simply means that
// gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
// automatically around expose events sent to the widget.
// gdk_window_begin_draw_frame() diverts all drawing to a widget's window to an
// offscreen buffer, and gdk_window_end_draw_frame() draws the buffer to the
// screen. The result is that users see the window update in one smooth step,
// and don’t see individual graphics primitives being rendered.
//
// In very simple terms, double buffered widgets don’t flicker, so you would
// only use this function to turn off double buffering if you had special needs
// and really knew what you were doing.
//
// Note: if you turn off double-buffering, you have to handle expose events,
// since even the clearing to the background color or pixmap will not happen
// automatically (as it is done in gdk_window_begin_draw_frame()).
//
// In 3.10 GTK and GDK have been restructured for translucent drawing. Since
// then expose events for double-buffered widgets are culled into a single event
// to the toplevel GDK window. If you now unset double buffering, you will cause
// a separate rendering pass for every widget. This will likely cause rendering
// problems - in particular related to stacking - and usually increases
// rendering times significantly.
//
// Deprecated: This function does not work under non-X11 backends or with
// non-native windows. It should not be used in newly written code.
//
// The function takes the following parameters:
//
//    - doubleBuffered: TRUE to double-buffer a widget.
//
func (widget *Widget) SetDoubleBuffered(doubleBuffered bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if doubleBuffered {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_double_buffered", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(doubleBuffered)
}

// SetEvents sets the event mask (see EventMask) for a widget. The event mask
// determines which events a widget will receive. Keep in mind that different
// widgets have different default event masks, and by changing the event mask
// you may disrupt a widget’s functionality, so be careful. This function must
// be called while a widget is unrealized. Consider gtk_widget_add_events() for
// widgets that are already realized, or if you want to preserve the existing
// event mask. This function can’t be used with widgets that have no window.
// (See gtk_widget_get_has_window()). To get events on those widgets, place them
// inside a EventBox and receive events on the event box.
//
// The function takes the following parameters:
//
//    - events: event mask.
//
func (widget *Widget) SetEvents(events int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(events)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_events", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(events)
}

// SetFocusOnClick sets whether the widget should grab focus when it is clicked
// with the mouse. Making mouse clicks not grab focus is useful in places like
// toolbars where you don’t want the keyboard focus removed from the main area
// of the application.
//
// The function takes the following parameters:
//
//    - focusOnClick: whether the widget should grab focus when clicked with the
//      mouse.
//
func (widget *Widget) SetFocusOnClick(focusOnClick bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if focusOnClick {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_focus_on_click", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(focusOnClick)
}

// SetFontMap sets the font map to use for Pango rendering. When not set, the
// widget will inherit the font map from its parent.
//
// The function takes the following parameters:
//
//    - fontMap (optional) or NULL to unset any previously set font map.
//
func (widget *Widget) SetFontMap(fontMap pango.FontMapper) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if fontMap != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontMap).Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_font_map", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(fontMap)
}

// SetFontOptions sets the #cairo_font_options_t used for Pango rendering in
// this widget. When not set, the default font options for the Screen will be
// used.
//
// The function takes the following parameters:
//
//    - options (optional) or NULL to unset any previously set default font
//      options.
//
func (widget *Widget) SetFontOptions(options *cairo.FontOptions) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if options != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(options)))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_font_options", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(options)
}

// SetHasTooltip sets the has-tooltip property on widget to has_tooltip. See
// Widget:has-tooltip for more information.
//
// The function takes the following parameters:
//
//    - hasTooltip: whether or not widget has a tooltip.
//
func (widget *Widget) SetHasTooltip(hasTooltip bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if hasTooltip {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_has_tooltip", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(hasTooltip)
}

// SetHasWindow specifies whether widget has a Window of its own. Note that all
// realized widgets have a non-NULL “window” pointer (gtk_widget_get_window()
// never returns a NULL window when a widget is realized), but for many of them
// it’s actually the Window of one of its parent widgets. Widgets that do not
// create a window for themselves in Widget::realize must announce this by
// calling this function with has_window = FALSE.
//
// This function should only be called by widget implementations, and they
// should call it in their init() function.
//
// The function takes the following parameters:
//
//    - hasWindow: whether or not widget has a window.
//
func (widget *Widget) SetHasWindow(hasWindow bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if hasWindow {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_has_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(hasWindow)
}

// SetHExpand sets whether the widget would like any available extra horizontal
// space. When a user resizes a Window, widgets with expand=TRUE generally
// receive the extra space. For example, a list or scrollable area or document
// in your window would often be set to expand.
//
// Call this function to set the expand flag if you would like your widget to
// become larger horizontally when the window has extra room.
//
// By default, widgets automatically expand if any of their children want to
// expand. (To see if a widget will automatically expand given its current
// children and state, call gtk_widget_compute_expand(). A container can decide
// how the expandability of children affects the expansion of the container by
// overriding the compute_expand virtual method on Widget.).
//
// Setting hexpand explicitly with this function will override the automatic
// expand behavior.
//
// This function forces the widget to expand or not to expand, regardless of
// children. The override occurs because gtk_widget_set_hexpand() sets the
// hexpand-set property (see gtk_widget_set_hexpand_set()) which causes the
// widget’s hexpand value to be used, rather than looking at children and widget
// state.
//
// The function takes the following parameters:
//
//    - expand: whether to expand.
//
func (widget *Widget) SetHExpand(expand bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if expand {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_hexpand", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(expand)
}

// SetHExpandSet sets whether the hexpand flag (see gtk_widget_get_hexpand())
// will be used.
//
// The hexpand-set property will be set automatically when you call
// gtk_widget_set_hexpand() to set hexpand, so the most likely reason to use
// this function would be to unset an explicit expand flag.
//
// If hexpand is set, then it overrides any computed expand value based on child
// widgets. If hexpand is not set, then the expand value depends on whether any
// children of the widget would like to expand.
//
// There are few reasons to use this function, but it’s here for completeness
// and consistency.
//
// The function takes the following parameters:
//
//    - set: value for hexpand-set property.
//
func (widget *Widget) SetHExpandSet(set bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if set {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_hexpand_set", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(set)
}

// SetMapped marks the widget as being mapped.
//
// This function should only ever be called in a derived widget's “map” or
// “unmap” implementation.
//
// The function takes the following parameters:
//
//    - mapped: TRUE to mark the widget as mapped.
//
func (widget *Widget) SetMapped(mapped bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if mapped {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_mapped", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(mapped)
}

// SetMarginBottom sets the bottom margin of widget. See the
// Widget:margin-bottom property.
//
// The function takes the following parameters:
//
//    - margin: bottom margin.
//
func (widget *Widget) SetMarginBottom(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_bottom", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetMarginEnd sets the end margin of widget. See the Widget:margin-end
// property.
//
// The function takes the following parameters:
//
//    - margin: end margin.
//
func (widget *Widget) SetMarginEnd(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_end", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetMarginLeft sets the left margin of widget. See the Widget:margin-left
// property.
//
// Deprecated: Use gtk_widget_set_margin_start() instead.
//
// The function takes the following parameters:
//
//    - margin: left margin.
//
func (widget *Widget) SetMarginLeft(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_left", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetMarginRight sets the right margin of widget. See the Widget:margin-right
// property.
//
// Deprecated: Use gtk_widget_set_margin_end() instead.
//
// The function takes the following parameters:
//
//    - margin: right margin.
//
func (widget *Widget) SetMarginRight(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_right", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetMarginStart sets the start margin of widget. See the Widget:margin-start
// property.
//
// The function takes the following parameters:
//
//    - margin: start margin.
//
func (widget *Widget) SetMarginStart(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_start", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetMarginTop sets the top margin of widget. See the Widget:margin-top
// property.
//
// The function takes the following parameters:
//
//    - margin: top margin.
//
func (widget *Widget) SetMarginTop(margin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(margin)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_margin_top", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(margin)
}

// SetName widgets can be named, which allows you to refer to them from a CSS
// file. You can apply a style to widgets with a particular name in the CSS
// file. See the documentation for the CSS syntax (on the same page as the docs
// for StyleContext).
//
// Note that the CSS syntax has certain special characters to delimit and
// represent elements in a selector (period, #, >, *...), so using these will
// make your widget impossible to match by name. Any combination of alphanumeric
// symbols, dashes and underscores will suffice.
//
// The function takes the following parameters:
//
//    - name for the widget.
//
func (widget *Widget) SetName(name string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_name", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(name)
}

// SetNoShowAll sets the Widget:no-show-all property, which determines whether
// calls to gtk_widget_show_all() will affect this widget.
//
// This is mostly for use in constructing widget hierarchies with externally
// controlled visibility, see UIManager.
//
// The function takes the following parameters:
//
//    - noShowAll: new value for the “no-show-all” property.
//
func (widget *Widget) SetNoShowAll(noShowAll bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if noShowAll {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_no_show_all", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(noShowAll)
}

// SetOpacity: request the widget to be rendered partially transparent, with
// opacity 0 being fully transparent and 1 fully opaque. (Opacity values are
// clamped to the [0,1] range.). This works on both toplevel widget, and child
// widgets, although there are some limitations:
//
// For toplevel widgets this depends on the capabilities of the windowing
// system. On X11 this has any effect only on X screens with a compositing
// manager running. See gtk_widget_is_composited(). On Windows it should work
// always, although setting a window’s opacity after the window has been shown
// causes it to flicker once on Windows.
//
// For child widgets it doesn’t work if any affected widget has a native window,
// or disables double buffering.
//
// The function takes the following parameters:
//
//    - opacity: desired opacity, between 0 and 1.
//
func (widget *Widget) SetOpacity(opacity float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.double)(unsafe.Pointer(&_args[1])) = C.double(opacity)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_opacity", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(opacity)
}

// SetParent: this function is useful only when implementing subclasses of
// Container. Sets the container as the parent of widget, and takes care of some
// details such as updating the state and style of the child to reflect its new
// location. The opposite function is gtk_widget_unparent().
//
// The function takes the following parameters:
//
//    - parent container.
//
func (widget *Widget) SetParent(parent Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_parent", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(parent)
}

// SetParentWindow sets a non default parent window for widget.
//
// For Window classes, setting a parent_window effects whether the window is a
// toplevel window or can be embedded into other widgets.
//
// For Window classes, this needs to be called before the window is realized.
//
// The function takes the following parameters:
//
//    - parentWindow: new parent window.
//
func (widget *Widget) SetParentWindow(parentWindow gdk.Windower) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parentWindow).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_parent_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(parentWindow)
}

// SetRealized marks the widget as being realized. This function must only be
// called after all Windows for the widget have been created and registered.
//
// This function should only ever be called in a derived widget's “realize” or
// “unrealize” implementation.
//
// The function takes the following parameters:
//
//    - realized: TRUE to mark the widget as realized.
//
func (widget *Widget) SetRealized(realized bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if realized {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_realized", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(realized)
}

// SetReceivesDefault specifies whether widget will be treated as the default
// widget within its toplevel when it has the focus, even if another widget is
// the default.
//
// See gtk_widget_grab_default() for details about the meaning of “default”.
//
// The function takes the following parameters:
//
//    - receivesDefault: whether or not widget can be a default widget.
//
func (widget *Widget) SetReceivesDefault(receivesDefault bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if receivesDefault {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_receives_default", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(receivesDefault)
}

// SetRedrawOnAllocate sets whether the entire widget is queued for drawing when
// its size allocation changes. By default, this setting is TRUE and the entire
// widget is redrawn on every size change. If your widget leaves the upper left
// unchanged when made bigger, turning this setting off will improve
// performance.
//
// Note that for widgets where gtk_widget_get_has_window() is FALSE setting this
// flag to FALSE turns off all allocation on resizing: the widget will not even
// redraw if its position changes; this is to allow containers that don’t draw
// anything to avoid excess invalidations. If you set this flag on a widget with
// no window that does draw on widget->window, you are responsible for
// invalidating both the old and new allocation of the widget when the widget is
// moved and responsible for invalidating regions newly when the widget
// increases size.
//
// The function takes the following parameters:
//
//    - redrawOnAllocate: if TRUE, the entire widget will be redrawn when it is
//      allocated to a new size. Otherwise, only the new portion of the widget
//      will be redrawn.
//
func (widget *Widget) SetRedrawOnAllocate(redrawOnAllocate bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if redrawOnAllocate {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_redraw_on_allocate", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(redrawOnAllocate)
}

// SetSensitive sets the sensitivity of a widget. A widget is sensitive if the
// user can interact with it. Insensitive widgets are “grayed out” and the user
// can’t interact with them. Insensitive widgets are known as “inactive”,
// “disabled”, or “ghosted” in some other toolkits.
//
// The function takes the following parameters:
//
//    - sensitive: TRUE to make the widget sensitive.
//
func (widget *Widget) SetSensitive(sensitive bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if sensitive {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_sensitive", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(sensitive)
}

// SetSizeRequest sets the minimum size of a widget; that is, the widget’s size
// request will be at least width by height. You can use this function to force
// a widget to be larger than it normally would be.
//
// In most cases, gtk_window_set_default_size() is a better choice for toplevel
// windows than this function; setting the default size will still allow users
// to shrink the window. Setting the size request will force them to leave the
// window at least as large as the size request. When dealing with window sizes,
// gtk_window_set_geometry_hints() can be a useful function as well.
//
// Note the inherent danger of setting any fixed size - themes, translations
// into other languages, different fonts, and user action can all change the
// appropriate size for a given widget. So, it's basically impossible to
// hardcode a size that will always be correct.
//
// The size request of a widget is the smallest size a widget can accept while
// still functioning well and drawing itself correctly. However in some strange
// cases a widget may be allocated less than its requested size, and in many
// cases a widget may be allocated more space than it requested.
//
// If the size request in a given direction is -1 (unset), then the “natural”
// size request of the widget will be used instead.
//
// The size request set here does not include any margin from the Widget
// properties margin-left, margin-right, margin-top, and margin-bottom, but it
// does include pretty much all other padding or border properties set by any
// subclass of Widget.
//
// The function takes the following parameters:
//
//    - width widget should request, or -1 to unset.
//    - height widget should request, or -1 to unset.
//
func (widget *Widget) SetSizeRequest(width, height int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(width)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(height)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_size_request", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// SetSupportMultidevice enables or disables multiple pointer awareness. If this
// setting is TRUE, widget will start receiving multiple, per device enter/leave
// events. Note that if custom Windows are created in Widget::realize,
// gdk_window_set_support_multidevice() will have to be called manually on them.
//
// The function takes the following parameters:
//
//    - supportMultidevice: TRUE to support input from multiple devices.
//
func (widget *Widget) SetSupportMultidevice(supportMultidevice bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if supportMultidevice {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_support_multidevice", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(supportMultidevice)
}

// SetTooltipMarkup sets markup as the contents of the tooltip, which is marked
// up with the [Pango text markup language][PangoMarkupFormat].
//
// This function will take care of setting Widget:has-tooltip to TRUE and of the
// default handler for the Widget::query-tooltip signal.
//
// See also the Widget:tooltip-markup property and gtk_tooltip_set_markup().
//
// The function takes the following parameters:
//
//    - markup (optional) contents of the tooltip for widget, or NULL.
//
func (widget *Widget) SetTooltipMarkup(markup string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if markup != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(markup)))
		defer C.free(unsafe.Pointer(_args[1]))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_tooltip_markup", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(markup)
}

// SetTooltipText sets text as the contents of the tooltip. This function will
// take care of setting Widget:has-tooltip to TRUE and of the default handler
// for the Widget::query-tooltip signal.
//
// See also the Widget:tooltip-text property and gtk_tooltip_set_text().
//
// The function takes the following parameters:
//
//    - text (optional) contents of the tooltip for widget.
//
func (widget *Widget) SetTooltipText(text string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if text != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
		defer C.free(unsafe.Pointer(_args[1]))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_tooltip_text", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(text)
}

// SetTooltipWindow replaces the default window used for displaying tooltips
// with custom_window. GTK+ will take care of showing and hiding custom_window
// at the right moment, to behave likewise as the default tooltip window. If
// custom_window is NULL, the default tooltip window will be used.
//
// The function takes the following parameters:
//
//    - customWindow (optional) or NULL.
//
func (widget *Widget) SetTooltipWindow(customWindow *Window) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if customWindow != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(customWindow).Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_tooltip_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(customWindow)
}

// SetVExpand sets whether the widget would like any available extra vertical
// space.
//
// See gtk_widget_set_hexpand() for more detail.
//
// The function takes the following parameters:
//
//    - expand: whether to expand.
//
func (widget *Widget) SetVExpand(expand bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if expand {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_vexpand", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(expand)
}

// SetVExpandSet sets whether the vexpand flag (see gtk_widget_get_vexpand())
// will be used.
//
// See gtk_widget_set_hexpand_set() for more detail.
//
// The function takes the following parameters:
//
//    - set: value for vexpand-set property.
//
func (widget *Widget) SetVExpandSet(set bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if set {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_vexpand_set", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(set)
}

// SetVisible sets the visibility state of widget. Note that setting this to
// TRUE doesn’t mean the widget is actually viewable, see
// gtk_widget_get_visible().
//
// This function simply calls gtk_widget_show() or gtk_widget_hide() but is
// nicer to use when the visibility of the widget depends on some condition.
//
// The function takes the following parameters:
//
//    - visible: whether the widget should be shown or not.
//
func (widget *Widget) SetVisible(visible bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if visible {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_visible", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(visible)
}

// SetVisual sets the visual that should be used for by widget and its children
// for creating Windows. The visual must be on the same Screen as returned by
// gtk_widget_get_screen(), so handling the Widget::screen-changed signal is
// necessary.
//
// Setting a new visual will not cause widget to recreate its windows, so you
// should call this function before widget is realized.
//
// The function takes the following parameters:
//
//    - visual (optional) to be used or NULL to unset a previous one.
//
func (widget *Widget) SetVisual(visual *gdk.Visual) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if visual != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(visual).Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_visual", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(visual)
}

// SetWindow sets a widget’s window. This function should only be used in a
// widget’s Widget::realize implementation. The window passed is usually either
// new window created with gdk_window_new(), or the window of its parent widget
// as returned by gtk_widget_get_parent_window().
//
// Widgets must indicate whether they will create their own Window by calling
// gtk_widget_set_has_window(). This is usually done in the widget’s init()
// function.
//
// Note that this function does not add any reference to window.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (widget *Widget) SetWindow(window gdk.Windower) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(window).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("set_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}

// ShapeCombineRegion sets a shape for this widget’s GDK window. This allows for
// transparent windows etc., see gdk_window_shape_combine_region() for more
// information.
//
// The function takes the following parameters:
//
//    - region (optional): shape to be added, or NULL to remove an existing
//      shape.
//
func (widget *Widget) ShapeCombineRegion(region *cairo.Region) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if region != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(region.Native()))
	}

	girepository.MustFind("Gtk", "Widget").InvokeMethod("shape_combine_region", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(region)
}

// Show flags a widget to be displayed. Any widget that isn’t shown will not
// appear on the screen. If you want to show all the widgets in a container,
// it’s easier to call gtk_widget_show_all() on the container, instead of
// individually showing the widgets.
//
// Remember that you have to show the containers containing a widget, in
// addition to the widget itself, before it will appear onscreen.
//
// When a toplevel container is shown, it is immediately realized and mapped;
// other shown widgets are realized and mapped when their toplevel container is
// realized and mapped.
func (widget *Widget) Show() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("show", _args[:], nil)

	runtime.KeepAlive(widget)
}

// ShowAll: recursively shows a widget, and any child widgets (if the widget is
// a container).
func (widget *Widget) ShowAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("show_all", _args[:], nil)

	runtime.KeepAlive(widget)
}

// ShowNow shows a widget. If the widget is an unmapped toplevel widget (i.e. a
// Window that has not yet been shown), enter the main loop and wait for the
// window to actually be mapped. Be careful; because the main loop is running,
// anything can happen during this function.
func (widget *Widget) ShowNow() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("show_now", _args[:], nil)

	runtime.KeepAlive(widget)
}

// SizeAllocate: this function is only used by Container subclasses, to assign a
// size and position to their child widgets.
//
// In this function, the allocation may be adjusted. It will be forced to a 1x1
// minimum size, and the adjust_size_allocation virtual method on the child will
// be used to adjust the allocation. Standard adjustments include removing the
// widget’s margins, and applying the widget’s Widget:halign and Widget:valign
// properties.
//
// For baseline support in containers you need to use
// gtk_widget_size_allocate_with_baseline() instead.
//
// The function takes the following parameters:
//
//    - allocation: position and size to be allocated to widget.
//
func (widget *Widget) SizeAllocate(allocation *Allocation) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(allocation)))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("size_allocate", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(allocation)
}

// SizeAllocateWithBaseline: this function is only used by Container subclasses,
// to assign a size, position and (optionally) baseline to their child widgets.
//
// In this function, the allocation and baseline may be adjusted. It will be
// forced to a 1x1 minimum size, and the adjust_size_allocation virtual and
// adjust_baseline_allocation methods on the child will be used to adjust the
// allocation and baseline. Standard adjustments include removing the widget's
// margins, and applying the widget’s Widget:halign and Widget:valign
// properties.
//
// If the child widget does not have a valign of GTK_ALIGN_BASELINE the baseline
// argument is ignored and -1 is used instead.
//
// The function takes the following parameters:
//
//    - allocation: position and size to be allocated to widget.
//    - baseline of the child, or -1.
//
func (widget *Widget) SizeAllocateWithBaseline(allocation *Allocation, baseline int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(allocation)))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(baseline)

	girepository.MustFind("Gtk", "Widget").InvokeMethod("size_allocate_with_baseline", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(allocation)
	runtime.KeepAlive(baseline)
}

// SizeRequest: this function is typically used when implementing a Container
// subclass. Obtains the preferred size of a widget. The container uses this
// information to arrange its child widgets and decide what size allocations to
// give them with gtk_widget_size_allocate().
//
// You can also call this function from an application, with some caveats. Most
// notably, getting a size request requires the widget to be associated with a
// screen, because font information may be needed. Multihead-aware applications
// should keep this in mind.
//
// Also remember that the size request is not necessarily the size a widget will
// actually be allocated.
//
// Deprecated: Use gtk_widget_get_preferred_size() instead.
//
// The function returns the following values:
//
//    - requisition to be filled in.
//
func (widget *Widget) SizeRequest() *Requisition {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("size_request", _args[:], _outs[:])

	runtime.KeepAlive(widget)

	var _requisition *Requisition // out

	_requisition = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _requisition
}

// StyleGetProperty gets the value of a style property of widget.
//
// The function takes the following parameters:
//
//    - propertyName: name of a style property.
//    - value: location to return the property value.
//
func (widget *Widget) StyleGetProperty(propertyName string, value *coreglib.Value) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_args[1]))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(value.Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("style_get_property", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(value)
}

// ThawChildNotify reverts the effect of a previous call to
// gtk_widget_freeze_child_notify(). This causes all queued Widget::child-notify
// signals on widget to be emitted.
func (widget *Widget) ThawChildNotify() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("thaw_child_notify", _args[:], nil)

	runtime.KeepAlive(widget)
}

// TranslateCoordinates: translate coordinates relative to src_widget’s
// allocation to coordinates relative to dest_widget’s allocations. In order to
// perform this operation, both widgets must be realized, and must share a
// common toplevel.
//
// The function takes the following parameters:
//
//    - destWidget: Widget.
//    - srcX: x position relative to src_widget.
//    - srcY: y position relative to src_widget.
//
// The function returns the following values:
//
//    - destX (optional): location to store X position relative to dest_widget.
//    - destY (optional): location to store Y position relative to dest_widget.
//    - ok: FALSE if either widget was not realized, or there was no common
//      ancestor. In this case, nothing is stored in *dest_x and *dest_y.
//      Otherwise TRUE.
//
func (srcWidget *Widget) TranslateCoordinates(destWidget Widgetter, srcX, srcY int32) (destX, destY int32, ok bool) {
	var _args [4]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(srcWidget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(destWidget).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(srcX)
	*(*C.gint)(unsafe.Pointer(&_args[3])) = C.gint(srcY)

	_gret := girepository.MustFind("Gtk", "Widget").InvokeMethod("translate_coordinates", _args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(srcWidget)
	runtime.KeepAlive(destWidget)
	runtime.KeepAlive(srcX)
	runtime.KeepAlive(srcY)

	var _destX int32 // out
	var _destY int32 // out
	var _ok bool     // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_destX = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_destY = *(*int32)(unsafe.Pointer(_outs[1]))
	}
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _destX, _destY, _ok
}

// TriggerTooltipQuery triggers a tooltip query on the display where the
// toplevel of widget is located. See gtk_tooltip_trigger_tooltip_query() for
// more information.
func (widget *Widget) TriggerTooltipQuery() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("trigger_tooltip_query", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Unmap: this function is only for use in widget implementations. Causes a
// widget to be unmapped if it’s currently mapped.
func (widget *Widget) Unmap() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("unmap", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Unparent: this function is only for use in widget implementations. Should be
// called by implementations of the remove method on Container, to dissociate a
// child from the container.
func (widget *Widget) Unparent() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("unparent", _args[:], nil)

	runtime.KeepAlive(widget)
}

// Unrealize: this function is only useful in widget implementations. Causes a
// widget to be unrealized (frees all GDK resources associated with the widget,
// such as widget->window).
func (widget *Widget) Unrealize() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("unrealize", _args[:], nil)

	runtime.KeepAlive(widget)
}

// UnregisterWindow unregisters a Window from the widget that was previously set
// up with gtk_widget_register_window(). You need to call this when the window
// is no longer used by the widget, such as when you destroy it.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (widget *Widget) UnregisterWindow(window gdk.Windower) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	girepository.MustFind("Gtk", "Widget").InvokeMethod("unregister_window", _args[:], nil)

	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}

// WidgetPopCompositeChild cancels the effect of a previous call to
// gtk_widget_push_composite_child().
//
// Deprecated: Use gtk_widget_class_set_template(), or don’t use this API at
// all.
func WidgetPopCompositeChild() {
	girepository.MustFind("Gtk", "pop_composite_child").Invoke(nil, nil)
}

// WidgetPushCompositeChild makes all newly-created widgets as composite
// children until the corresponding gtk_widget_pop_composite_child() call.
//
// A composite child is a child that’s an implementation detail of the container
// it’s inside and should not be visible to people using the container.
// Composite children aren’t treated differently by GTK+ (but see
// gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI builders
// might want to treat them in a different way.
//
// Deprecated: This API never really worked well and was mostly unused, now we
// have a more complete mechanism for composite children, see
// gtk_widget_class_set_template().
func WidgetPushCompositeChild() {
	girepository.MustFind("Gtk", "push_composite_child").Invoke(nil, nil)
}

// Requisition represents the desired size of a widget. See [GtkWidget’s
// geometry management section][geometry-management] for more information.
//
// An instance of this type is always passed by reference.
type Requisition struct {
	*requisition
}

// requisition is the struct that's finalized.
type requisition struct {
	native unsafe.Pointer
}

func marshalRequisition(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Requisition{&requisition{(unsafe.Pointer)(b)}}, nil
}

// NewRequisition constructs a struct Requisition.
func NewRequisition() *Requisition {
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _requisition *Requisition // out

	_requisition = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_requisition)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "Requisition").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _requisition
}

// Width widget’s desired width.
func (r *Requisition) Width() int32 {
	offset := girepository.MustFind("Gtk", "Requisition").StructFieldOffset("width")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.gint)(unsafe.Pointer(&valptr)))
	return v
}

// Height widget’s desired height.
func (r *Requisition) Height() int32 {
	offset := girepository.MustFind("Gtk", "Requisition").StructFieldOffset("height")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.gint)(unsafe.Pointer(&valptr)))
	return v
}

// Copy copies a Requisition.
//
// The function returns the following values:
//
//    - ret: copy of requisition.
//
func (requisition *Requisition) Copy() *Requisition {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(requisition)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(requisition)

	var _ret *Requisition // out

	_ret = (*Requisition)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "Requisition").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _ret
}
