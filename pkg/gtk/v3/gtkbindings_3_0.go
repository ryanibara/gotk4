// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// BindingEntryAddSignalFromString parses a signal description from signal_desc
// and incorporates it into binding_set.
//
// Signal descriptions may either bind a key combination to one or more signals:
//
//    bind "key" {
//      "signalname" (param, ...)
//      ...
//    }
//
// Or they may also unbind a key combination:
//
//    unbind "key"
//
// Key combinations must be in a format that can be parsed by
// gtk_accelerator_parse().
//
// The function takes the following parameters:
//
//    - bindingSet: BindingSet.
//    - signalDesc: signal description.
//
// The function returns the following values:
//
//    - tokenType: G_TOKEN_NONE if the signal was successfully parsed and added,
//      the expected token otherwise.
//
func BindingEntryAddSignalFromString(bindingSet *BindingSet, signalDesc string) glib.TokenType {
	var _arg1 *C.GtkBindingSet // out
	var _arg2 *C.gchar         // out
	var _cret C.GTokenType     // in

	_arg1 = (*C.GtkBindingSet)(gextras.StructNative(unsafe.Pointer(bindingSet)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(signalDesc)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_binding_entry_add_signal_from_string(_arg1, _arg2)
	runtime.KeepAlive(bindingSet)
	runtime.KeepAlive(signalDesc)

	var _tokenType glib.TokenType // out

	_tokenType = glib.TokenType(_cret)

	return _tokenType
}
