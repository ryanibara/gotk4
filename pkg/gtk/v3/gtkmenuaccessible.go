// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeMenuAccessible = coreglib.Type(C.gtk_menu_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMenuAccessible, F: marshalMenuAccessible},
	})
}

// MenuAccessibleOverrider contains methods that are overridable.
type MenuAccessibleOverrider interface {
}

type MenuAccessible struct {
	_ [0]func() // equal guard
	MenuShellAccessible
}

var (
	_ coreglib.Objector = (*MenuAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeMenuAccessible,
		GoType:        reflect.TypeOf((*MenuAccessible)(nil)),
		InitClass:     initClassMenuAccessible,
		FinalizeClass: finalizeClassMenuAccessible,
	})
}

func initClassMenuAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitMenuAccessible(*MenuAccessibleClass) }); ok {
		klass := (*MenuAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitMenuAccessible(klass)
	}
}

func finalizeClassMenuAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ FinalizeMenuAccessible(*MenuAccessibleClass) }); ok {
		klass := (*MenuAccessibleClass)(gextras.NewStructNative(gclass))
		goval.FinalizeMenuAccessible(klass)
	}
}

func wrapMenuAccessible(obj *coreglib.Object) *MenuAccessible {
	return &MenuAccessible{
		MenuShellAccessible: MenuShellAccessible{
			ContainerAccessible: ContainerAccessible{
				WidgetAccessible: WidgetAccessible{
					Accessible: Accessible{
						AtkObject: atk.AtkObject{
							Object: obj,
						},
					},
					Component: atk.Component{
						Object: obj,
					},
				},
			},
			Selection: atk.Selection{
				Object: obj,
			},
		},
	}
}

func marshalMenuAccessible(p uintptr) (interface{}, error) {
	return wrapMenuAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MenuAccessibleClass: instance of this type is always passed by reference.
type MenuAccessibleClass struct {
	*menuAccessibleClass
}

// menuAccessibleClass is the struct that's finalized.
type menuAccessibleClass struct {
	native *C.GtkMenuAccessibleClass
}

func (m *MenuAccessibleClass) ParentClass() *MenuShellAccessibleClass {
	valptr := &m.native.parent_class
	var _v *MenuShellAccessibleClass // out
	_v = (*MenuShellAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
