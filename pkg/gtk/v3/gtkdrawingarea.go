// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeDrawingArea returns the GType for the type DrawingArea.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeDrawingArea() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "DrawingArea").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalDrawingArea)
	return gtype
}

// DrawingAreaOverrider contains methods that are overridable.
type DrawingAreaOverrider interface {
}

// DrawingArea widget is used for creating custom user interface elements. It’s
// essentially a blank widget; you can draw on it. After creating a drawing
// area, the application may want to connect to:
//
// - Mouse and button press signals to respond to input from the user. (Use
// gtk_widget_add_events() to enable events you wish to receive.)
//
// - The Widget::realize signal to take any necessary actions when the widget is
// instantiated on a particular display. (Create GDK resources in response to
// this signal.)
//
// - The Widget::size-allocate signal to take any necessary actions when the
// widget changes size.
//
// - The Widget::draw signal to handle redrawing the contents of the widget.
//
// The following code portion demonstrates using a drawing area to display a
// circle in the normal widget foreground color.
//
// Note that GDK automatically clears the exposed area before sending the expose
// event, and that drawing is implicitly clipped to the exposed area. If you
// want to have a theme-provided background, you need to call
// gtk_render_background() in your ::draw method.
//
// Simple GtkDrawingArea usage
//
//    gboolean
//    draw_callback (GtkWidget *widget, cairo_t *cr, gpointer data)
//    {
//      guint width, height;
//      GdkRGBA color;
//      GtkStyleContext *context;
//
//      context = gtk_widget_get_style_context (widget);
//
//      width = gtk_widget_get_allocated_width (widget);
//      height = gtk_widget_get_allocated_height (widget);
//
//      gtk_render_background (context, cr, 0, 0, width, height);
//
//      cairo_arc (cr,
//                 width / 2.0, height / 2.0,
//                 MIN (width, height) / 2.0,
//                 0, 2 * G_PI);
//
//      gtk_style_context_get_color (context,
//                                   gtk_style_context_get_state (context),
//                                   &color);
//      gdk_cairo_set_source_rgba (cr, &color);
//
//      cairo_fill (cr);
//
//     return FALSE;
//    }
//    [...]
//      GtkWidget *drawing_area = gtk_drawing_area_new ();
//      gtk_widget_set_size_request (drawing_area, 100, 100);
//      g_signal_connect (G_OBJECT (drawing_area), "draw",
//                        G_CALLBACK (draw_callback), NULL);
//
// Draw signals are normally delivered when a drawing area first comes onscreen,
// or when it’s covered by another window and then uncovered. You can also force
// an expose event by adding to the “damage region” of the drawing area’s
// window; gtk_widget_queue_draw_area() and gdk_window_invalidate_rect() are
// equally good ways to do this. You’ll then get a draw signal for the invalid
// region.
//
// The available routines for drawing are documented on the [GDK Drawing
// Primitives][gdk3-Cairo-Interaction] page and the cairo documentation.
//
// To receive mouse events on a drawing area, you will need to enable them with
// gtk_widget_add_events(). To receive keyboard events, you will need to set the
// “can-focus” property on the drawing area, and you should probably draw some
// user-visible indication that the drawing area is focused. Use
// gtk_widget_has_focus() in your expose event handler to decide whether to draw
// the focus indicator. See gtk_render_focus() for one way to draw focus.
type DrawingArea struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*DrawingArea)(nil)
)

func classInitDrawingAreaer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapDrawingArea(obj *coreglib.Object) *DrawingArea {
	return &DrawingArea{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalDrawingArea(p uintptr) (interface{}, error) {
	return wrapDrawingArea(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewDrawingArea creates a new drawing area.
//
// The function returns the following values:
//
//    - drawingArea: new DrawingArea.
//
func NewDrawingArea() *DrawingArea {
	_info := girepository.MustFind("Gtk", "DrawingArea")
	_gret := _info.InvokeClassMethod("new_DrawingArea", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _drawingArea *DrawingArea // out

	_drawingArea = wrapDrawingArea(coreglib.Take(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _drawingArea
}
