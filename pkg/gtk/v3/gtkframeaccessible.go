// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeFrameAccessible = coreglib.Type(C.gtk_frame_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFrameAccessible, F: marshalFrameAccessible},
	})
}

// FrameAccessibleOverrider contains methods that are overridable.
type FrameAccessibleOverrider interface {
}

type FrameAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*FrameAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeFrameAccessible,
		GoType:    reflect.TypeOf((*FrameAccessible)(nil)),
		InitClass: initClassFrameAccessible,
	})
}

func initClassFrameAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitFrameAccessible(*FrameAccessibleClass) }); ok {
		klass := (*FrameAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitFrameAccessible(klass)
	}
}

func wrapFrameAccessible(obj *coreglib.Object) *FrameAccessible {
	return &FrameAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalFrameAccessible(p uintptr) (interface{}, error) {
	return wrapFrameAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FrameAccessibleClass: instance of this type is always passed by reference.
type FrameAccessibleClass struct {
	*frameAccessibleClass
}

// frameAccessibleClass is the struct that's finalized.
type frameAccessibleClass struct {
	native *C.GtkFrameAccessibleClass
}

func (f *FrameAccessibleClass) ParentClass() *ContainerAccessibleClass {
	valptr := &f.native.parent_class
	var v *ContainerAccessibleClass // out
	v = (*ContainerAccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
