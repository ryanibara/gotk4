// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// RCParseColorFull parses a color in the format expected in a RC file. If style
// is not NULL, it will be consulted to resolve references to symbolic colors.
//
// Deprecated: Use CssProvider instead.
//
// The function takes the following parameters:
//
//   - scanner: #GScanner.
//   - style (optional) or NULL.
//
// The function returns the following values:
//
//   - color: pointer to a Color in which to store the result.
//   - guint: G_TOKEN_NONE if parsing succeeded, otherwise the token that was
//     expected but not found.
//
func RCParseColorFull(scanner *glib.Scanner, style *RCStyle) (*gdk.Color, uint) {
	var _arg1 *C.GScanner   // out
	var _arg2 *C.GtkRcStyle // out
	var _arg3 C.GdkColor    // in
	var _cret C.guint       // in

	_arg1 = (*C.GScanner)(gextras.StructNative(unsafe.Pointer(scanner)))
	if style != nil {
		_arg2 = (*C.GtkRcStyle)(unsafe.Pointer(coreglib.InternObject(style).Native()))
	}

	_cret = C.gtk_rc_parse_color_full(_arg1, _arg2, &_arg3)
	runtime.KeepAlive(scanner)
	runtime.KeepAlive(style)

	var _color *gdk.Color // out
	var _guint uint       // out

	_color = (*gdk.Color)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))
	_guint = uint(_cret)

	return _color, _guint
}
