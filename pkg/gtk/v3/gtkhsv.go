// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_HSVClass_changed(GtkHSV*);
// extern void _gotk4_gtk3_HSV_ConnectChanged(gpointer, guintptr);
import "C"

// glib.Type values for gtkhsv.go.
var GTypeHSV = coreglib.Type(C.gtk_hsv_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeHSV, F: marshalHSV},
	})
}

// HSVOverrider contains methods that are overridable.
type HSVOverrider interface {
	Changed()
}

// HSV is the “color wheel” part of a complete color selector widget. It allows
// to select a color by determining its HSV components in an intuitive way.
// Moving the selection around the outer ring changes the hue, and moving the
// selection point inside the inner triangle changes value and saturation.
//
// HSV has been deprecated together with ColorSelection, where it was used.
type HSV struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*HSV)(nil)
)

func classInitHSVer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkHSVClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkHSVClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Changed() }); ok {
		pclass.changed = (*[0]byte)(C._gotk4_gtk3_HSVClass_changed)
	}
}

//export _gotk4_gtk3_HSVClass_changed
func _gotk4_gtk3_HSVClass_changed(arg0 *C.GtkHSV) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Changed() })

	iface.Changed()
}

func wrapHSV(obj *coreglib.Object) *HSV {
	return &HSV{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalHSV(p uintptr) (interface{}, error) {
	return wrapHSV(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_HSV_ConnectChanged
func _gotk4_gtk3_HSV_ConnectChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

func (hsv *HSV) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(hsv, "changed", false, unsafe.Pointer(C._gotk4_gtk3_HSV_ConnectChanged), f)
}

// NewHSV creates a new HSV color selector.
//
// The function returns the following values:
//
//    - hsV: newly-created HSV color selector.
//
func NewHSV() *HSV {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "HSV").InvokeMethod("new_HSV", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _hsV *HSV // out

	_hsV = wrapHSV(coreglib.Take(unsafe.Pointer(_cret)))

	return _hsV
}

// IsAdjusting: HSV color selector can be said to be adjusting if multiple rapid
// changes are being made to its value, for example, when the user is adjusting
// the value with the mouse. This function queries whether the HSV color
// selector is being adjusted or not.
//
// The function returns the following values:
//
//    - ok: TRUE if clients can ignore changes to the color value, since they may
//      be transitory, or FALSE if they should consider the color value status to
//      be final.
//
func (hsv *HSV) IsAdjusting() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(hsv).Native()))
	*(**HSV)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "HSV").InvokeMethod("is_adjusting", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(hsv)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetMetrics sets the size and ring width of an HSV color selector.
//
// The function takes the following parameters:
//
//    - size: diameter for the hue ring.
//    - ringWidth: width of the hue ring.
//
func (hsv *HSV) SetMetrics(size, ringWidth int) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.gint  // out
	var _arg2 C.gint  // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(hsv).Native()))
	_arg1 = C.gint(size)
	_arg2 = C.gint(ringWidth)
	*(**HSV)(unsafe.Pointer(&args[1])) = _arg1
	*(*int)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "HSV").InvokeMethod("set_metrics", args[:], nil)

	runtime.KeepAlive(hsv)
	runtime.KeepAlive(size)
	runtime.KeepAlive(ringWidth)
}
