// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_HSV_ConnectMove(gpointer, GtkDirectionType, guintptr);
// extern void _gotk4_gtk3_HSV_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_HSVClass_move(GtkHSV*, GtkDirectionType);
// extern void _gotk4_gtk3_HSVClass_changed(GtkHSV*);
// void _gotk4_gtk3_HSV_virtual_changed(void* fnptr, GtkHSV* arg0) {
//   ((void (*)(GtkHSV*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_HSV_virtual_move(void* fnptr, GtkHSV* arg0, GtkDirectionType arg1) {
//   ((void (*)(GtkHSV*, GtkDirectionType))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeHSV = coreglib.Type(C.gtk_hsv_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHSV, F: marshalHSV},
	})
}

// HSVOverrides contains methods that are overridable.
type HSVOverrides struct {
	Changed func()
	// The function takes the following parameters:
	//
	Move func(typ DirectionType)
}

func defaultHSVOverrides(v *HSV) HSVOverrides {
	return HSVOverrides{
		Changed: v.changed,
		Move:    v.move,
	}
}

// HSV is the “color wheel” part of a complete color selector widget. It allows
// to select a color by determining its HSV components in an intuitive way.
// Moving the selection around the outer ring changes the hue, and moving the
// selection point inside the inner triangle changes value and saturation.
//
// HSV has been deprecated together with ColorSelection, where it was used.
type HSV struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*HSV)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HSV, *HSVClass, HSVOverrides](
		GTypeHSV,
		initHSVClass,
		wrapHSV,
		defaultHSVOverrides,
	)
}

func initHSVClass(gclass unsafe.Pointer, overrides HSVOverrides, classInitFunc func(*HSVClass)) {
	pclass := (*C.GtkHSVClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeHSV))))

	if overrides.Changed != nil {
		pclass.changed = (*[0]byte)(C._gotk4_gtk3_HSVClass_changed)
	}

	if overrides.Move != nil {
		pclass.move = (*[0]byte)(C._gotk4_gtk3_HSVClass_move)
	}

	if classInitFunc != nil {
		class := (*HSVClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHSV(obj *coreglib.Object) *HSV {
	return &HSV{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalHSV(p uintptr) (interface{}, error) {
	return wrapHSV(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (hsv *HSV) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(hsv, "changed", false, unsafe.Pointer(C._gotk4_gtk3_HSV_ConnectChanged), f)
}

func (hsv *HSV) ConnectMove(f func(object DirectionType)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(hsv, "move", false, unsafe.Pointer(C._gotk4_gtk3_HSV_ConnectMove), f)
}

func (hsv *HSV) changed() {
	gclass := (*C.GtkHSVClass)(coreglib.PeekParentClass(hsv))
	fnarg := gclass.changed

	var _arg0 *C.GtkHSV // out

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(coreglib.InternObject(hsv).Native()))

	C._gotk4_gtk3_HSV_virtual_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(hsv)
}

// The function takes the following parameters:
//
func (hsv *HSV) move(typ DirectionType) {
	gclass := (*C.GtkHSVClass)(coreglib.PeekParentClass(hsv))
	fnarg := gclass.move

	var _arg0 *C.GtkHSV          // out
	var _arg1 C.GtkDirectionType // out

	_arg0 = (*C.GtkHSV)(unsafe.Pointer(coreglib.InternObject(hsv).Native()))
	_arg1 = C.GtkDirectionType(typ)

	C._gotk4_gtk3_HSV_virtual_move(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(hsv)
	runtime.KeepAlive(typ)
}

// HSVClass: instance of this type is always passed by reference.
type HSVClass struct {
	*hsvClass
}

// hsvClass is the struct that's finalized.
type hsvClass struct {
	native *C.GtkHSVClass
}

func (h *HSVClass) ParentClass() *WidgetClass {
	valptr := &h.native.parent_class
	var _v *WidgetClass // out
	_v = (*WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
