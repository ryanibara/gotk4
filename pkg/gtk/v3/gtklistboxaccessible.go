// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeListBoxAccessible = coreglib.Type(C.gtk_list_box_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeListBoxAccessible, F: marshalListBoxAccessible},
	})
}

// ListBoxAccessibleOverrides contains methods that are overridable.
type ListBoxAccessibleOverrides struct {
}

func defaultListBoxAccessibleOverrides(v *ListBoxAccessible) ListBoxAccessibleOverrides {
	return ListBoxAccessibleOverrides{}
}

type ListBoxAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible

	atk.Selection
}

var (
	_ coreglib.Objector = (*ListBoxAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ListBoxAccessible, *ListBoxAccessibleClass, ListBoxAccessibleOverrides](
		GTypeListBoxAccessible,
		initListBoxAccessibleClass,
		wrapListBoxAccessible,
		defaultListBoxAccessibleOverrides,
	)
}

func initListBoxAccessibleClass(gclass unsafe.Pointer, overrides ListBoxAccessibleOverrides, classInitFunc func(*ListBoxAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ListBoxAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapListBoxAccessible(obj *coreglib.Object) *ListBoxAccessible {
	return &ListBoxAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
		Selection: atk.Selection{
			Object: obj,
		},
	}
}

func marshalListBoxAccessible(p uintptr) (interface{}, error) {
	return wrapListBoxAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ListBoxAccessibleClass: instance of this type is always passed by reference.
type ListBoxAccessibleClass struct {
	*listBoxAccessibleClass
}

// listBoxAccessibleClass is the struct that's finalized.
type listBoxAccessibleClass struct {
	native *C.GtkListBoxAccessibleClass
}

func (l *ListBoxAccessibleClass) ParentClass() *ContainerAccessibleClass {
	valptr := &l.native.parent_class
	var _v *ContainerAccessibleClass // out
	_v = (*ContainerAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
