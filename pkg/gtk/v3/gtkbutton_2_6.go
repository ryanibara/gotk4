// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Image gets the widget that is currenty set as the image of button. This may
// have been explicitly set by gtk_button_set_image() or constructed by
// gtk_button_new_from_stock().
//
// The function returns the following values:
//
//    - widget (optional) or NULL in case there is no image.
//
func (button *Button) Image() Widgetter {
	var _arg0 *C.GtkButton // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_image(_arg0)
	runtime.KeepAlive(button)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// SetImage: set the image of button to the given widget. The image will be
// displayed if the label text is NULL or if Button:always-show-image is TRUE.
// You donâ€™t have to call gtk_widget_show() on image yourself.
//
// The function takes the following parameters:
//
//    - image (optional): widget to set as the image for the button, or NULL to
//      unset.
//
func (button *Button) SetImage(image Widgetter) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if image != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	}

	C.gtk_button_set_image(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(image)
}
