// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// IsLocked locks are added and removed using gtk_accel_group_lock() and
// gtk_accel_group_unlock().
//
// The function returns the following values:
//
//    - ok: TRUE if there are 1 or more locks on the accel_group, FALSE
//      otherwise.
//
func (accelGroup *AccelGroup) IsLocked() bool {
	var _arg0 *C.GtkAccelGroup // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkAccelGroup)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))

	_cret = C.gtk_accel_group_get_is_locked(_arg0)
	runtime.KeepAlive(accelGroup)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ModifierMask gets a ModifierType representing the mask for this accel_group.
// For example, K_CONTROL_MASK, K_SHIFT_MASK, etc.
//
// The function returns the following values:
//
//    - modifierType: modifier mask for this accel group.
//
func (accelGroup *AccelGroup) ModifierMask() gdk.ModifierType {
	var _arg0 *C.GtkAccelGroup  // out
	var _cret C.GdkModifierType // in

	_arg0 = (*C.GtkAccelGroup)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))

	_cret = C.gtk_accel_group_get_modifier_mask(_arg0)
	runtime.KeepAlive(accelGroup)

	var _modifierType gdk.ModifierType // out

	_modifierType = gdk.ModifierType(_cret)

	return _modifierType
}
