// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeImageMenuItem = coreglib.Type(C.gtk_image_menu_item_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeImageMenuItem, F: marshalImageMenuItem},
	})
}

// ImageMenuItemOverrides contains methods that are overridable.
type ImageMenuItemOverrides struct {
}

func defaultImageMenuItemOverrides(v *ImageMenuItem) ImageMenuItemOverrides {
	return ImageMenuItemOverrides{}
}

// ImageMenuItem is a menu item which has an icon next to the text label.
//
// This is functionally equivalent to:
//
//      GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
//      GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
//      GtkWidget *label = gtk_accel_label_new ("Music");
//      GtkWidget *menu_item = gtk_menu_item_new ();
//      GtkAccelGroup *accel_group = gtk_accel_group_new ();
//
//      gtk_container_add (GTK_CONTAINER (box), icon);
//
//      gtk_label_set_use_underline (GTK_LABEL (label), TRUE);
//      gtk_label_set_xalign (GTK_LABEL (label), 0.0);
//
//      gtk_widget_add_accelerator (menu_item, "activate", accel_group,
//                                  GDK_KEY_m, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
//      gtk_accel_label_set_accel_widget (GTK_ACCEL_LABEL (label), menu_item);
//
//      gtk_box_pack_end (GTK_BOX (box), label, TRUE, TRUE, 0);
//
//      gtk_container_add (GTK_CONTAINER (menu_item), box);
//
//      gtk_widget_show_all (menu_item);.
type ImageMenuItem struct {
	_ [0]func() // equal guard
	MenuItem
}

var (
	_ Binner            = (*ImageMenuItem)(nil)
	_ coreglib.Objector = (*ImageMenuItem)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ImageMenuItem, *ImageMenuItemClass, ImageMenuItemOverrides](
		GTypeImageMenuItem,
		initImageMenuItemClass,
		wrapImageMenuItem,
		defaultImageMenuItemOverrides,
	)
}

func initImageMenuItemClass(gclass unsafe.Pointer, overrides ImageMenuItemOverrides, classInitFunc func(*ImageMenuItemClass)) {
	if classInitFunc != nil {
		class := (*ImageMenuItemClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapImageMenuItem(obj *coreglib.Object) *ImageMenuItem {
	return &ImageMenuItem{
		MenuItem: MenuItem{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
	}
}

func marshalImageMenuItem(p uintptr) (interface{}, error) {
	return wrapImageMenuItem(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewImageMenuItem creates a new ImageMenuItem with an empty label.
//
// Deprecated: Use gtk_menu_item_new() instead.
//
// The function returns the following values:
//
//    - imageMenuItem: new ImageMenuItem.
//
func NewImageMenuItem() *ImageMenuItem {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_image_menu_item_new()

	var _imageMenuItem *ImageMenuItem // out

	_imageMenuItem = wrapImageMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _imageMenuItem
}

// NewImageMenuItemFromStock creates a new ImageMenuItem containing the image
// and text from a stock item. Some stock ids have preprocessor macros like
// K_STOCK_OK and K_STOCK_APPLY.
//
// If you want this menu item to have changeable accelerators, then pass in NULL
// for accel_group. Next call gtk_menu_item_set_accel_path() with an appropriate
// path for the menu item, use gtk_stock_lookup() to look up the standard
// accelerator for the stock item, and if one is found, call
// gtk_accel_map_add_entry() to register it.
//
// Deprecated: Use gtk_menu_item_new_with_mnemonic() instead.
//
// The function takes the following parameters:
//
//    - stockId: name of the stock item.
//    - accelGroup (optional) to add the menu items accelerator to, or NULL.
//
// The function returns the following values:
//
//    - imageMenuItem: new ImageMenuItem.
//
func NewImageMenuItemFromStock(stockId string, accelGroup *AccelGroup) *ImageMenuItem {
	var _arg1 *C.gchar         // out
	var _arg2 *C.GtkAccelGroup // out
	var _cret *C.GtkWidget     // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg1))
	if accelGroup != nil {
		_arg2 = (*C.GtkAccelGroup)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))
	}

	_cret = C.gtk_image_menu_item_new_from_stock(_arg1, _arg2)
	runtime.KeepAlive(stockId)
	runtime.KeepAlive(accelGroup)

	var _imageMenuItem *ImageMenuItem // out

	_imageMenuItem = wrapImageMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _imageMenuItem
}

// NewImageMenuItemWithLabel creates a new ImageMenuItem containing a label.
//
// Deprecated: Use gtk_menu_item_new_with_label() instead.
//
// The function takes the following parameters:
//
//    - label: text of the menu item.
//
// The function returns the following values:
//
//    - imageMenuItem: new ImageMenuItem.
//
func NewImageMenuItemWithLabel(label string) *ImageMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_image_menu_item_new_with_label(_arg1)
	runtime.KeepAlive(label)

	var _imageMenuItem *ImageMenuItem // out

	_imageMenuItem = wrapImageMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _imageMenuItem
}

// NewImageMenuItemWithMnemonic creates a new ImageMenuItem containing a label.
// The label will be created using gtk_label_new_with_mnemonic(), so underscores
// in label indicate the mnemonic for the menu item.
//
// Deprecated: Use gtk_menu_item_new_with_mnemonic() instead.
//
// The function takes the following parameters:
//
//    - label: text of the menu item, with an underscore in front of the mnemonic
//      character.
//
// The function returns the following values:
//
//    - imageMenuItem: new ImageMenuItem.
//
func NewImageMenuItemWithMnemonic(label string) *ImageMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_image_menu_item_new_with_mnemonic(_arg1)
	runtime.KeepAlive(label)

	var _imageMenuItem *ImageMenuItem // out

	_imageMenuItem = wrapImageMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _imageMenuItem
}

// Image gets the widget that is currently set as the image of image_menu_item.
// See gtk_image_menu_item_set_image().
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - widget set as image of image_menu_item.
//
func (imageMenuItem *ImageMenuItem) Image() Widgetter {
	var _arg0 *C.GtkImageMenuItem // out
	var _cret *C.GtkWidget        // in

	_arg0 = (*C.GtkImageMenuItem)(unsafe.Pointer(coreglib.InternObject(imageMenuItem).Native()))

	_cret = C.gtk_image_menu_item_get_image(_arg0)
	runtime.KeepAlive(imageMenuItem)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// SetImage sets the image of image_menu_item to the given widget. Note that it
// depends on the show-menu-images setting whether the image will be displayed
// or not.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - image (optional): widget to set as the image for the menu item.
//
func (imageMenuItem *ImageMenuItem) SetImage(image Widgetter) {
	var _arg0 *C.GtkImageMenuItem // out
	var _arg1 *C.GtkWidget        // out

	_arg0 = (*C.GtkImageMenuItem)(unsafe.Pointer(coreglib.InternObject(imageMenuItem).Native()))
	if image != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	}

	C.gtk_image_menu_item_set_image(_arg0, _arg1)
	runtime.KeepAlive(imageMenuItem)
	runtime.KeepAlive(image)
}

// ImageMenuItemClass: instance of this type is always passed by reference.
type ImageMenuItemClass struct {
	*imageMenuItemClass
}

// imageMenuItemClass is the struct that's finalized.
type imageMenuItemClass struct {
	native *C.GtkImageMenuItemClass
}

// ParentClass: parent class.
func (i *ImageMenuItemClass) ParentClass() *MenuItemClass {
	valptr := &i.native.parent_class
	var _v *MenuItemClass // out
	_v = (*MenuItemClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
