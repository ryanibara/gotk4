// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// PaperSizeGetPaperSizes creates a list of known paper sizes.
//
// The function takes the following parameters:
//
//    - includeCustom: whether to include custom paper sizes as defined in the
//      page setup dialog.
//
// The function returns the following values:
//
//    - list: newly allocated list of newly allocated PaperSize objects.
//
func PaperSizeGetPaperSizes(includeCustom bool) []*PaperSize {
	var _arg1 C.gboolean // out
	var _cret *C.GList   // in

	if includeCustom {
		_arg1 = C.TRUE
	}

	_cret = C.gtk_paper_size_get_paper_sizes(_arg1)
	runtime.KeepAlive(includeCustom)

	var _list []*PaperSize // out

	_list = make([]*PaperSize, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkPaperSize)(v)
		var dst *PaperSize // out
		dst = (*PaperSize)(gextras.NewStructNative(unsafe.Pointer(src)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(dst)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_paper_size_free((*C.GtkPaperSize)(intern.C))
			},
		)
		_list = append(_list, dst)
	})

	return _list
}
