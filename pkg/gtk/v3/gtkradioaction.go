// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_RadioAction_ConnectChanged(gpointer, GtkRadioAction*, guintptr);
// extern void _gotk4_gtk3_RadioActionClass_changed(GtkRadioAction*, GtkRadioAction*);
// void _gotk4_gtk3_RadioAction_virtual_changed(void* fnptr, GtkRadioAction* arg0, GtkRadioAction* arg1) {
//   ((void (*)(GtkRadioAction*, GtkRadioAction*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeRadioAction = coreglib.Type(C.gtk_radio_action_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRadioAction, F: marshalRadioAction},
	})
}

// RadioActionOverrides contains methods that are overridable.
type RadioActionOverrides struct {
	// The function takes the following parameters:
	//
	Changed func(current *RadioAction)
}

func defaultRadioActionOverrides(v *RadioAction) RadioActionOverrides {
	return RadioActionOverrides{
		Changed: v.changed,
	}
}

// RadioAction is similar to RadioMenuItem. A number of radio actions can be
// linked together so that only one may be active at any one time.
type RadioAction struct {
	_ [0]func() // equal guard
	ToggleAction
}

var (
	_ coreglib.Objector = (*RadioAction)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RadioAction, *RadioActionClass, RadioActionOverrides](
		GTypeRadioAction,
		initRadioActionClass,
		wrapRadioAction,
		defaultRadioActionOverrides,
	)
}

func initRadioActionClass(gclass unsafe.Pointer, overrides RadioActionOverrides, classInitFunc func(*RadioActionClass)) {
	pclass := (*C.GtkRadioActionClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRadioAction))))

	if overrides.Changed != nil {
		pclass.changed = (*[0]byte)(C._gotk4_gtk3_RadioActionClass_changed)
	}

	if classInitFunc != nil {
		class := (*RadioActionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRadioAction(obj *coreglib.Object) *RadioAction {
	return &RadioAction{
		ToggleAction: ToggleAction{
			Action: Action{
				Object: obj,
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalRadioAction(p uintptr) (interface{}, error) {
	return wrapRadioAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectChanged signal is emitted on every member of a radio group when the
// active member is changed. The signal gets emitted after the ::activate
// signals for the previous and current active members.
func (action *RadioAction) ConnectChanged(f func(current *RadioAction)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(action, "changed", false, unsafe.Pointer(C._gotk4_gtk3_RadioAction_ConnectChanged), f)
}

// The function takes the following parameters:
//
func (action *RadioAction) changed(current *RadioAction) {
	gclass := (*C.GtkRadioActionClass)(coreglib.PeekParentClass(action))
	fnarg := gclass.changed

	var _arg0 *C.GtkRadioAction // out
	var _arg1 *C.GtkRadioAction // out

	_arg0 = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	_arg1 = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(current).Native()))

	C._gotk4_gtk3_RadioAction_virtual_changed(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(action)
	runtime.KeepAlive(current)
}

// RadioActionClass: instance of this type is always passed by reference.
type RadioActionClass struct {
	*radioActionClass
}

// radioActionClass is the struct that's finalized.
type radioActionClass struct {
	native *C.GtkRadioActionClass
}

func (r *RadioActionClass) ParentClass() *ToggleActionClass {
	valptr := &r.native.parent_class
	var _v *ToggleActionClass // out
	_v = (*ToggleActionClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
