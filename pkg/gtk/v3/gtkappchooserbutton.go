// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_AppChooserButton_ConnectCustomItemActivated(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_AppChooserButtonClass_custom_item_activated(GtkAppChooserButton*, gchar*);
// void _gotk4_gtk3_AppChooserButton_virtual_custom_item_activated(void* fnptr, GtkAppChooserButton* arg0, gchar* arg1) {
//   ((void (*)(GtkAppChooserButton*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeAppChooserButton = coreglib.Type(C.gtk_app_chooser_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAppChooserButton, F: marshalAppChooserButton},
	})
}

// AppChooserButtonOverrides contains methods that are overridable.
type AppChooserButtonOverrides struct {
	// The function takes the following parameters:
	//
	CustomItemActivated func(itemName string)
}

func defaultAppChooserButtonOverrides(v *AppChooserButton) AppChooserButtonOverrides {
	return AppChooserButtonOverrides{
		CustomItemActivated: v.customItemActivated,
	}
}

// AppChooserButton is a widget that lets the user select an application. It
// implements the AppChooser interface.
//
// Initially, a AppChooserButton selects the first application in its list,
// which will either be the most-recently used application or, if
// AppChooserButton:show-default-item is TRUE, the default application.
//
// The list of applications shown in a AppChooserButton includes the recommended
// applications for the given content type. When
// AppChooserButton:show-default-item is set, the default application is also
// included. To let the user chooser other applications, you can set the
// AppChooserButton:show-dialog-item property, which allows to open a full
// AppChooserDialog.
//
// It is possible to add custom items to the list, using
// gtk_app_chooser_button_append_custom_item(). These items cause the
// AppChooserButton::custom-item-activated signal to be emitted when they are
// selected.
//
// To track changes in the selected application, use the ComboBox::changed
// signal.
type AppChooserButton struct {
	_ [0]func() // equal guard
	ComboBox

	*coreglib.Object
	AppChooser
}

var (
	_ coreglib.Objector = (*AppChooserButton)(nil)
	_ Binner            = (*AppChooserButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*AppChooserButton, *AppChooserButtonClass, AppChooserButtonOverrides](
		GTypeAppChooserButton,
		initAppChooserButtonClass,
		wrapAppChooserButton,
		defaultAppChooserButtonOverrides,
	)
}

func initAppChooserButtonClass(gclass unsafe.Pointer, overrides AppChooserButtonOverrides, classInitFunc func(*AppChooserButtonClass)) {
	pclass := (*C.GtkAppChooserButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeAppChooserButton))))

	if overrides.CustomItemActivated != nil {
		pclass.custom_item_activated = (*[0]byte)(C._gotk4_gtk3_AppChooserButtonClass_custom_item_activated)
	}

	if classInitFunc != nil {
		class := (*AppChooserButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAppChooserButton(obj *coreglib.Object) *AppChooserButton {
	return &AppChooserButton{
		ComboBox: ComboBox{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			CellEditable: CellEditable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			CellLayout: CellLayout{
				Object: obj,
			},
		},
		Object: obj,
		AppChooser: AppChooser{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalAppChooserButton(p uintptr) (interface{}, error) {
	return wrapAppChooserButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectCustomItemActivated is emitted when a custom item, previously added
// with gtk_app_chooser_button_append_custom_item(), is activated from the
// dropdown menu.
func (self *AppChooserButton) ConnectCustomItemActivated(f func(itemName string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "custom-item-activated", false, unsafe.Pointer(C._gotk4_gtk3_AppChooserButton_ConnectCustomItemActivated), f)
}

// Heading returns the text to display at the top of the dialog.
//
// The function returns the following values:
//
//    - utf8 (optional): text to display at the top of the dialog, or NULL, in
//      which case a default text is displayed.
//
func (self *AppChooserButton) Heading() string {
	var _arg0 *C.GtkAppChooserButton // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkAppChooserButton)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gtk_app_chooser_button_get_heading(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetHeading sets the text to display at the top of the dialog. If the heading
// is not set, the dialog displays a default text.
//
// The function takes the following parameters:
//
//    - heading: string containing Pango markup.
//
func (self *AppChooserButton) SetHeading(heading string) {
	var _arg0 *C.GtkAppChooserButton // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.GtkAppChooserButton)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(heading)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_app_chooser_button_set_heading(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(heading)
}

// The function takes the following parameters:
//
func (self *AppChooserButton) customItemActivated(itemName string) {
	gclass := (*C.GtkAppChooserButtonClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.custom_item_activated

	var _arg0 *C.GtkAppChooserButton // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.GtkAppChooserButton)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(itemName)))
	defer C.free(unsafe.Pointer(_arg1))

	C._gotk4_gtk3_AppChooserButton_virtual_custom_item_activated(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(itemName)
}

// AppChooserButtonClass: instance of this type is always passed by reference.
type AppChooserButtonClass struct {
	*appChooserButtonClass
}

// appChooserButtonClass is the struct that's finalized.
type appChooserButtonClass struct {
	native *C.GtkAppChooserButtonClass
}

// ParentClass: parent class.
func (a *AppChooserButtonClass) ParentClass() *ComboBoxClass {
	valptr := &a.native.parent_class
	var _v *ComboBoxClass // out
	_v = (*ComboBoxClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
