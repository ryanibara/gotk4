// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeFontSelection       = coreglib.Type(C.gtk_font_selection_get_type())
	GTypeFontSelectionDialog = coreglib.Type(C.gtk_font_selection_dialog_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontSelection, F: marshalFontSelection},
		coreglib.TypeMarshaler{T: GTypeFontSelectionDialog, F: marshalFontSelectionDialog},
	})
}

// FontSelectionOverrides contains methods that are overridable.
type FontSelectionOverrides struct {
}

func defaultFontSelectionOverrides(v *FontSelection) FontSelectionOverrides {
	return FontSelectionOverrides{}
}

type FontSelection struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*FontSelection)(nil)
	_ coreglib.Objector = (*FontSelection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontSelection, *FontSelectionClass, FontSelectionOverrides](
		GTypeFontSelection,
		initFontSelectionClass,
		wrapFontSelection,
		defaultFontSelectionOverrides,
	)
}

func initFontSelectionClass(gclass unsafe.Pointer, overrides FontSelectionOverrides, classInitFunc func(*FontSelectionClass)) {
	if classInitFunc != nil {
		class := (*FontSelectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontSelection(obj *coreglib.Object) *FontSelection {
	return &FontSelection{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalFontSelection(p uintptr) (interface{}, error) {
	return wrapFontSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFontSelection creates a new FontSelection.
//
// Deprecated: Use FontChooserWidget instead.
//
// The function returns the following values:
//
//    - fontSelection: new FontSelection.
//
func NewFontSelection() *FontSelection {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_font_selection_new()

	var _fontSelection *FontSelection // out

	_fontSelection = wrapFontSelection(coreglib.Take(unsafe.Pointer(_cret)))

	return _fontSelection
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_set_font_name(), as the font selection widget may
// normalize font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica Bold
// Italic 12”. Use pango_font_description_equal() if you want to compare two
// font descriptions.
//
// Deprecated: Use FontChooser.
//
// The function returns the following values:
//
//    - utf8: string with the name of the current font, or NULL if no font is
//      selected. You must free this string with g_free().
//
func (fontsel *FontSelection) FontName() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(coreglib.InternObject(fontsel).Native()))

	_cret = C.gtk_font_selection_get_font_name(_arg0)
	runtime.KeepAlive(fontsel)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviewText gets the text displayed in the preview area.
//
// Deprecated: Use FontChooser.
//
// The function returns the following values:
//
//    - utf8: text displayed in the preview area. This string is owned by the
//      widget and should not be modified or freed.
//
func (fontsel *FontSelection) PreviewText() string {
	var _arg0 *C.GtkFontSelection // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(coreglib.InternObject(fontsel).Native()))

	_cret = C.gtk_font_selection_get_preview_text(_arg0)
	runtime.KeepAlive(fontsel)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetFontName sets the currently-selected font.
//
// Note that the fontsel needs to know the screen in which it will appear for
// this to work; this can be guaranteed by simply making sure that the fontsel
// is inserted in a toplevel window before you call this function.
//
// Deprecated: Use FontChooser.
//
// The function takes the following parameters:
//
//    - fontname: font name like “Helvetica 12” or “Times Bold 18”.
//
// The function returns the following values:
//
//    - ok: TRUE if the font could be set successfully; FALSE if no such font
//      exists or if the fontsel doesn’t belong to a particular screen yet.
//
func (fontsel *FontSelection) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(coreglib.InternObject(fontsel).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fontname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_set_font_name(_arg0, _arg1)
	runtime.KeepAlive(fontsel)
	runtime.KeepAlive(fontname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area. The text is used
// to show how the selected font looks.
//
// Deprecated: Use FontChooser.
//
// The function takes the following parameters:
//
//    - text to display in the preview area.
//
func (fontsel *FontSelection) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelection // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkFontSelection)(unsafe.Pointer(coreglib.InternObject(fontsel).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_set_preview_text(_arg0, _arg1)
	runtime.KeepAlive(fontsel)
	runtime.KeepAlive(text)
}

// FontSelectionDialogOverrides contains methods that are overridable.
type FontSelectionDialogOverrides struct {
}

func defaultFontSelectionDialogOverrides(v *FontSelectionDialog) FontSelectionDialogOverrides {
	return FontSelectionDialogOverrides{}
}

type FontSelectionDialog struct {
	_ [0]func() // equal guard
	Dialog
}

var (
	_ Binner = (*FontSelectionDialog)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontSelectionDialog, *FontSelectionDialogClass, FontSelectionDialogOverrides](
		GTypeFontSelectionDialog,
		initFontSelectionDialogClass,
		wrapFontSelectionDialog,
		defaultFontSelectionDialogOverrides,
	)
}

func initFontSelectionDialogClass(gclass unsafe.Pointer, overrides FontSelectionDialogOverrides, classInitFunc func(*FontSelectionDialogClass)) {
	if classInitFunc != nil {
		class := (*FontSelectionDialogClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontSelectionDialog(obj *coreglib.Object) *FontSelectionDialog {
	return &FontSelectionDialog{
		Dialog: Dialog{
			Window: Window{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
			},
		},
	}
}

func marshalFontSelectionDialog(p uintptr) (interface{}, error) {
	return wrapFontSelectionDialog(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFontSelectionDialog creates a new FontSelectionDialog.
//
// Deprecated: Use FontChooserDialog.
//
// The function takes the following parameters:
//
//    - title of the dialog window.
//
// The function returns the following values:
//
//    - fontSelectionDialog: new FontSelectionDialog.
//
func NewFontSelectionDialog(title string) *FontSelectionDialog {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_new(_arg1)
	runtime.KeepAlive(title)

	var _fontSelectionDialog *FontSelectionDialog // out

	_fontSelectionDialog = wrapFontSelectionDialog(coreglib.Take(unsafe.Pointer(_cret)))

	return _fontSelectionDialog
}

// FontName gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// gtk_font_selection_dialog_set_font_name(), as the font selection widget may
// normalize font names and thus return a string with a different structure. For
// example, “Helvetica Italic Bold 12” could be normalized to “Helvetica Bold
// Italic 12”. Use pango_font_description_equal() if you want to compare two
// font descriptions.
//
// Deprecated: Use FontChooserDialog.
//
// The function returns the following values:
//
//    - utf8: string with the name of the current font, or NULL if no font is
//      selected. You must free this string with g_free().
//
func (fsd *FontSelectionDialog) FontName() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(coreglib.InternObject(fsd).Native()))

	_cret = C.gtk_font_selection_dialog_get_font_name(_arg0)
	runtime.KeepAlive(fsd)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviewText gets the text displayed in the preview area.
//
// Deprecated: Use FontChooserDialog.
//
// The function returns the following values:
//
//    - utf8: text displayed in the preview area. This string is owned by the
//      widget and should not be modified or freed.
//
func (fsd *FontSelectionDialog) PreviewText() string {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(coreglib.InternObject(fsd).Native()))

	_cret = C.gtk_font_selection_dialog_get_preview_text(_arg0)
	runtime.KeepAlive(fsd)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetFontName sets the currently selected font.
//
// Deprecated: Use FontChooserDialog.
//
// The function takes the following parameters:
//
//    - fontname: font name like “Helvetica 12” or “Times Bold 18”.
//
// The function returns the following values:
//
//    - ok: TRUE if the font selected in fsd is now the fontname specified, FALSE
//      otherwise.
//
func (fsd *FontSelectionDialog) SetFontName(fontname string) bool {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(coreglib.InternObject(fsd).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fontname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_font_selection_dialog_set_font_name(_arg0, _arg1)
	runtime.KeepAlive(fsd)
	runtime.KeepAlive(fontname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPreviewText sets the text displayed in the preview area.
//
// Deprecated: Use FontChooserDialog.
//
// The function takes the following parameters:
//
//    - text to display in the preview area.
//
func (fsd *FontSelectionDialog) SetPreviewText(text string) {
	var _arg0 *C.GtkFontSelectionDialog // out
	var _arg1 *C.gchar                  // out

	_arg0 = (*C.GtkFontSelectionDialog)(unsafe.Pointer(coreglib.InternObject(fsd).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_font_selection_dialog_set_preview_text(_arg0, _arg1)
	runtime.KeepAlive(fsd)
	runtime.KeepAlive(text)
}

// FontSelectionClass: instance of this type is always passed by reference.
type FontSelectionClass struct {
	*fontSelectionClass
}

// fontSelectionClass is the struct that's finalized.
type fontSelectionClass struct {
	native *C.GtkFontSelectionClass
}

func (f *FontSelectionClass) ParentClass() *BoxClass {
	valptr := &f.native.parent_class
	var _v *BoxClass // out
	_v = (*BoxClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// FontSelectionDialogClass: instance of this type is always passed by
// reference.
type FontSelectionDialogClass struct {
	*fontSelectionDialogClass
}

// fontSelectionDialogClass is the struct that's finalized.
type fontSelectionDialogClass struct {
	native *C.GtkFontSelectionDialogClass
}

func (f *FontSelectionDialogClass) ParentClass() *DialogClass {
	valptr := &f.native.parent_class
	var _v *DialogClass // out
	_v = (*DialogClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
