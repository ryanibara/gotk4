// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkprintcontext.go.
var GTypePrintContext = coreglib.Type(C.gtk_print_context_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypePrintContext, F: marshalPrintContext},
	})
}

// PrintContext encapsulates context information that is required when drawing
// pages for printing, such as the cairo context and important parameters like
// page size and resolution. It also lets you easily create Layout and Context
// objects that match the font metrics of the cairo surface.
//
// GtkPrintContext objects gets passed to the PrintOperation::begin-print,
// PrintOperation::end-print, PrintOperation::request-page-setup and
// PrintOperation::draw-page signals on the PrintOperation.
//
// Using GtkPrintContext in a PrintOperation::draw-page callback
//
//    static void
//    draw_page (GtkPrintOperation *operation,
//    	   GtkPrintContext   *context,
//    	   int                page_nr)
//    {
//      cairo_t *cr;
//      PangoLayout *layout;
//      PangoFontDescription *desc;
//
//      cr = gtk_print_context_get_cairo_context (context);
//
//      // Draw a red rectangle, as wide as the paper (inside the margins)
//      cairo_set_source_rgb (cr, 1.0, 0, 0);
//      cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);
//
//      cairo_fill (cr);
//
//      // Draw some lines
//      cairo_move_to (cr, 20, 10);
//      cairo_line_to (cr, 40, 20);
//      cairo_arc (cr, 60, 60, 20, 0, M_PI);
//      cairo_line_to (cr, 80, 20);
//
//      cairo_set_source_rgb (cr, 0, 0, 0);
//      cairo_set_line_width (cr, 5);
//      cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
//      cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);
//
//      cairo_stroke (cr);
//
//      // Draw some text
//      layout = gtk_print_context_create_pango_layout (context);
//      pango_layout_set_text (layout, "Hello World! Printing is easy", -1);
//      desc = pango_font_description_from_string ("sans 28");
//      pango_layout_set_font_description (layout, desc);
//      pango_font_description_free (desc);
//
//      cairo_move_to (cr, 30, 20);
//      pango_cairo_layout_path (cr, layout);
//
//      // Font Outline
//      cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);
//      cairo_set_line_width (cr, 0.5);
//      cairo_stroke_preserve (cr);
//
//      // Font Fill
//      cairo_set_source_rgb (cr, 0, 0.0, 1.0);
//      cairo_fill (cr);
//
//      g_object_unref (layout);
//    }
//
// Printing support was added in GTK+ 2.10.
type PrintContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*PrintContext)(nil)
)

func wrapPrintContext(obj *coreglib.Object) *PrintContext {
	return &PrintContext{
		Object: obj,
	}
}

func marshalPrintContext(p uintptr) (interface{}, error) {
	return wrapPrintContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CreatePangoContext creates a new Context that can be used with the
// PrintContext.
//
// The function returns the following values:
//
//    - ret: new Pango context for context.
//
func (context *PrintContext) CreatePangoContext() *pango.Context {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("create_pango_context", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _ret *pango.Context // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_ret = &pango.Context{
			Object: obj,
		}
	}

	return _ret
}

// CreatePangoLayout creates a new Layout that is suitable for use with the
// PrintContext.
//
// The function returns the following values:
//
//    - layout: new Pango layout for context.
//
func (context *PrintContext) CreatePangoLayout() *pango.Layout {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("create_pango_layout", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _layout *pango.Layout // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_layout = &pango.Layout{
			Object: obj,
		}
	}

	return _layout
}

// CairoContext obtains the cairo context that is associated with the
// PrintContext.
//
// The function returns the following values:
//
//    - ret: cairo context of context.
//
func (context *PrintContext) CairoContext() *cairo.Context {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_cairo_context", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _ret *cairo.Context // out

	_ret = cairo.WrapContext(uintptr(unsafe.Pointer(_cret)))
	C.cairo_reference(_cret)
	runtime.SetFinalizer(_ret, func(v *cairo.Context) {
		C.cairo_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	return _ret
}

// DPIX obtains the horizontal resolution of the PrintContext, in dots per inch.
//
// The function returns the following values:
//
//    - gdouble: horizontal resolution of context.
//
func (context *PrintContext) DPIX() float64 {
	var args [1]girepository.Argument
	var _arg0 *C.void   // out
	var _cret C.gdouble // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_dpi_x", args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// DPIY obtains the vertical resolution of the PrintContext, in dots per inch.
//
// The function returns the following values:
//
//    - gdouble: vertical resolution of context.
//
func (context *PrintContext) DPIY() float64 {
	var args [1]girepository.Argument
	var _arg0 *C.void   // out
	var _cret C.gdouble // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_dpi_y", args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Height obtains the height of the PrintContext, in pixels.
//
// The function returns the following values:
//
//    - gdouble: height of context.
//
func (context *PrintContext) Height() float64 {
	var args [1]girepository.Argument
	var _arg0 *C.void   // out
	var _cret C.gdouble // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_height", args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// PageSetup obtains the PageSetup that determines the page dimensions of the
// PrintContext.
//
// The function returns the following values:
//
//    - pageSetup: page setup of context.
//
func (context *PrintContext) PageSetup() *PageSetup {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_page_setup", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _pageSetup *PageSetup // out

	_pageSetup = wrapPageSetup(coreglib.Take(unsafe.Pointer(_cret)))

	return _pageSetup
}

// PangoFontmap returns a FontMap that is suitable for use with the
// PrintContext.
//
// The function returns the following values:
//
//    - fontMap: font map of context.
//
func (context *PrintContext) PangoFontmap() pango.FontMapper {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_pango_fontmap", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _fontMap pango.FontMapper // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontMapper is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(pango.FontMapper)
			return ok
		})
		rv, ok := casted.(pango.FontMapper)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontMapper")
		}
		_fontMap = rv
	}

	return _fontMap
}

// Width obtains the width of the PrintContext, in pixels.
//
// The function returns the following values:
//
//    - gdouble: width of context.
//
func (context *PrintContext) Width() float64 {
	var args [1]girepository.Argument
	var _arg0 *C.void   // out
	var _cret C.gdouble // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PrintContext)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintContext").InvokeMethod("get_width", args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}
