// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// GtkCellRendererState _gotk4_gtk3_CellAccessibleParent_virtual_get_renderer_state(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   return ((GtkCellRendererState (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gtk3_CellAccessibleParent_virtual_grab_focus(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   return ((gboolean (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// int _gotk4_gtk3_CellAccessibleParent_virtual_get_child_index(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   return ((int (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_activate(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_edit(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_expand_collapse(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_get_cell_area(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1, GdkRectangle* arg2) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*, GdkRectangle*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_get_cell_extents(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1, gint* arg2, gint* arg3, gint* arg4, gint* arg5, AtkCoordType arg6) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*, gint*, gint*, gint*, gint*, AtkCoordType))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_get_cell_position(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1, gint* arg2, gint* arg3) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*, gint*, gint*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_CellAccessibleParent_virtual_update_relationset(void* fnptr, GtkCellAccessibleParent* arg0, GtkCellAccessible* arg1, AtkRelationSet* arg2) {
//   ((void (*)(GtkCellAccessibleParent*, GtkCellAccessible*, AtkRelationSet*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// GType values.
var (
	GTypeCellAccessibleParent = coreglib.Type(C.gtk_cell_accessible_parent_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellAccessibleParent, F: marshalCellAccessibleParent},
	})
}

//
// CellAccessibleParent wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CellAccessibleParent struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*CellAccessibleParent)(nil)
)

// CellAccessibleParenter describes CellAccessibleParent's interface methods.
type CellAccessibleParenter interface {
	coreglib.Objector

	Activate(cell *CellAccessible)
	Edit(cell *CellAccessible)
	ExpandCollapse(cell *CellAccessible)
	CellArea(cell *CellAccessible) *gdk.Rectangle
	CellExtents(cell *CellAccessible, coordType atk.CoordType) (x, y, width, height int)
	CellPosition(cell *CellAccessible) (row, column int)
	ChildIndex(cell *CellAccessible) int
	RendererState(cell *CellAccessible) CellRendererState
	GrabFocus(cell *CellAccessible) bool
	UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet)
}

var _ CellAccessibleParenter = (*CellAccessibleParent)(nil)

func wrapCellAccessibleParent(obj *coreglib.Object) *CellAccessibleParent {
	return &CellAccessibleParent{
		Object: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	return wrapCellAccessibleParent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Activate(cell *CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C.gtk_cell_accessible_parent_activate(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Edit(cell *CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C.gtk_cell_accessible_parent_edit(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) ExpandCollapse(cell *CellAccessible) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C.gtk_cell_accessible_parent_expand_collapse(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) CellArea(cell *CellAccessible) *gdk.Rectangle {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.GdkRectangle             // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C.gtk_cell_accessible_parent_get_cell_area(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _cellRect *gdk.Rectangle // out

	_cellRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _cellRect
}

// The function takes the following parameters:
//
//   - cell
//   - coordType
//
// The function returns the following values:
//
//   - x
//   - y
//   - width
//   - height
//
func (parent *CellAccessibleParent) CellExtents(cell *CellAccessible, coordType atk.CoordType) (x, y, width, height int) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.gint                     // in
	var _arg3 C.gint                     // in
	var _arg4 C.gint                     // in
	var _arg5 C.gint                     // in
	var _arg6 C.AtkCoordType             // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg6 = C.AtkCoordType(coordType)

	C.gtk_cell_accessible_parent_get_cell_extents(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5, _arg6)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(coordType)

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(_arg2)
	_y = int(_arg3)
	_width = int(_arg4)
	_height = int(_arg5)

	return _x, _y, _width, _height
}

// The function takes the following parameters:
//
// The function returns the following values:
//
//   - row
//   - column
//
func (parent *CellAccessibleParent) CellPosition(cell *CellAccessible) (row, column int) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.gint                     // in
	var _arg3 C.gint                     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C.gtk_cell_accessible_parent_get_cell_position(_arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _row int    // out
	var _column int // out

	_row = int(_arg2)
	_column = int(_arg3)

	return _row, _column
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) ChildIndex(cell *CellAccessible) int {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.int                      // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C.gtk_cell_accessible_parent_get_child_index(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) RendererState(cell *CellAccessible) CellRendererState {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.GtkCellRendererState     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C.gtk_cell_accessible_parent_get_renderer_state(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _cellRendererState CellRendererState // out

	_cellRendererState = CellRendererState(_cret)

	return _cellRendererState
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) GrabFocus(cell *CellAccessible) bool {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C.gtk_cell_accessible_parent_grab_focus(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - cell
//   - relationset
//
func (parent *CellAccessibleParent) UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet) {
	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 *C.AtkRelationSet          // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg2 = (*C.AtkRelationSet)(unsafe.Pointer(coreglib.InternObject(relationset).Native()))

	C.gtk_cell_accessible_parent_update_relationset(_arg0, _arg1, _arg2)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(relationset)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) activate(cell *CellAccessible) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.activate

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_activate(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) edit(cell *CellAccessible) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.edit

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_edit(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) expandCollapse(cell *CellAccessible) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.expand_collapse

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_expand_collapse(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) cellArea(cell *CellAccessible) *gdk.Rectangle {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.get_cell_area

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.GdkRectangle             // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_get_cell_area(unsafe.Pointer(fnarg), _arg0, _arg1, &_arg2)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _cellRect *gdk.Rectangle // out

	_cellRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _cellRect
}

// The function takes the following parameters:
//
//   - cell
//   - coordType
//
// The function returns the following values:
//
//   - x
//   - y
//   - width
//   - height
//
func (parent *CellAccessibleParent) cellExtents(cell *CellAccessible, coordType atk.CoordType) (x, y, width, height int) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.get_cell_extents

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.gint                     // in
	var _arg3 C.gint                     // in
	var _arg4 C.gint                     // in
	var _arg5 C.gint                     // in
	var _arg6 C.AtkCoordType             // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg6 = C.AtkCoordType(coordType)

	C._gotk4_gtk3_CellAccessibleParent_virtual_get_cell_extents(unsafe.Pointer(fnarg), _arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5, _arg6)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(coordType)

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(_arg2)
	_y = int(_arg3)
	_width = int(_arg4)
	_height = int(_arg5)

	return _x, _y, _width, _height
}

// The function takes the following parameters:
//
// The function returns the following values:
//
//   - row
//   - column
//
func (parent *CellAccessibleParent) cellPosition(cell *CellAccessible) (row, column int) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.get_cell_position

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 C.gint                     // in
	var _arg3 C.gint                     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_get_cell_position(unsafe.Pointer(fnarg), _arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _row int    // out
	var _column int // out

	_row = int(_arg2)
	_column = int(_arg3)

	return _row, _column
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) childIndex(cell *CellAccessible) int {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.get_child_index

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.int                      // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C._gotk4_gtk3_CellAccessibleParent_virtual_get_child_index(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) rendererState(cell *CellAccessible) CellRendererState {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.get_renderer_state

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.GtkCellRendererState     // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C._gotk4_gtk3_CellAccessibleParent_virtual_get_renderer_state(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _cellRendererState CellRendererState // out

	_cellRendererState = CellRendererState(_cret)

	return _cellRendererState
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) grabFocus(cell *CellAccessible) bool {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.grab_focus

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = C._gotk4_gtk3_CellAccessibleParent_virtual_grab_focus(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - cell
//   - relationset
//
func (parent *CellAccessibleParent) updateRelationset(cell *CellAccessible, relationset *atk.RelationSet) {
	gclass := (*C.GtkCellAccessibleParentIface)(coreglib.PeekParentClass(parent))
	fnarg := gclass.update_relationset

	var _arg0 *C.GtkCellAccessibleParent // out
	var _arg1 *C.GtkCellAccessible       // out
	var _arg2 *C.AtkRelationSet          // out

	_arg0 = (*C.GtkCellAccessibleParent)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.GtkCellAccessible)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg2 = (*C.AtkRelationSet)(unsafe.Pointer(coreglib.InternObject(relationset).Native()))

	C._gotk4_gtk3_CellAccessibleParent_virtual_update_relationset(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(relationset)
}

// CellAccessibleParentIface: instance of this type is always passed by
// reference.
type CellAccessibleParentIface struct {
	*cellAccessibleParentIface
}

// cellAccessibleParentIface is the struct that's finalized.
type cellAccessibleParentIface struct {
	native *C.GtkCellAccessibleParentIface
}
