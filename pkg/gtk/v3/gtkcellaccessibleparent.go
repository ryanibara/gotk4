// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gtk3_CellAccessibleParentIface_grab_focus(GtkCellAccessibleParent*, GtkCellAccessible*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_activate(GtkCellAccessibleParent*, GtkCellAccessible*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_edit(GtkCellAccessibleParent*, GtkCellAccessible*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_expand_collapse(GtkCellAccessibleParent*, GtkCellAccessible*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_update_relationset(GtkCellAccessibleParent*, GtkCellAccessible*, AtkRelationSet*);
import "C"

// glib.Type values for gtkcellaccessibleparent.go.
var GTypeCellAccessibleParent = coreglib.Type(C.gtk_cell_accessible_parent_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCellAccessibleParent, F: marshalCellAccessibleParent},
	})
}

// CellAccessibleParentOverrider contains methods that are overridable.
type CellAccessibleParentOverrider interface {
	// The function takes the following parameters:
	//
	Activate(cell *CellAccessible)
	// The function takes the following parameters:
	//
	Edit(cell *CellAccessible)
	// The function takes the following parameters:
	//
	ExpandCollapse(cell *CellAccessible)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	GrabFocus(cell *CellAccessible) bool
	// The function takes the following parameters:
	//
	//    - cell
	//    - relationset
	//
	UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet)
}

//
// CellAccessibleParent wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CellAccessibleParent struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*CellAccessibleParent)(nil)
)

// CellAccessibleParenter describes CellAccessibleParent's interface methods.
type CellAccessibleParenter interface {
	coreglib.Objector

	Activate(cell *CellAccessible)
	Edit(cell *CellAccessible)
	ExpandCollapse(cell *CellAccessible)
	GrabFocus(cell *CellAccessible) bool
	UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet)
}

var _ CellAccessibleParenter = (*CellAccessibleParent)(nil)

func ifaceInitCellAccessibleParenter(gifacePtr, data C.gpointer) {
	iface := (*C.GtkCellAccessibleParentIface)(unsafe.Pointer(gifacePtr))
	iface.activate = (*[0]byte)(C._gotk4_gtk3_CellAccessibleParentIface_activate)
	iface.edit = (*[0]byte)(C._gotk4_gtk3_CellAccessibleParentIface_edit)
	iface.expand_collapse = (*[0]byte)(C._gotk4_gtk3_CellAccessibleParentIface_expand_collapse)
	iface.grab_focus = (*[0]byte)(C._gotk4_gtk3_CellAccessibleParentIface_grab_focus)
	iface.update_relationset = (*[0]byte)(C._gotk4_gtk3_CellAccessibleParentIface_update_relationset)
}

//export _gotk4_gtk3_CellAccessibleParentIface_activate
func _gotk4_gtk3_CellAccessibleParentIface_activate(arg0 *C.GtkCellAccessibleParent, arg1 *C.GtkCellAccessible) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.Activate(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_edit
func _gotk4_gtk3_CellAccessibleParentIface_edit(arg0 *C.GtkCellAccessibleParent, arg1 *C.GtkCellAccessible) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.Edit(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_expand_collapse
func _gotk4_gtk3_CellAccessibleParentIface_expand_collapse(arg0 *C.GtkCellAccessibleParent, arg1 *C.GtkCellAccessible) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.ExpandCollapse(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_grab_focus
func _gotk4_gtk3_CellAccessibleParentIface_grab_focus(arg0 *C.GtkCellAccessibleParent, arg1 *C.GtkCellAccessible) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	ok := iface.GrabFocus(_cell)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_CellAccessibleParentIface_update_relationset
func _gotk4_gtk3_CellAccessibleParentIface_update_relationset(arg0 *C.GtkCellAccessibleParent, arg1 *C.GtkCellAccessible, arg2 *C.AtkRelationSet) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible         // out
	var _relationset *atk.RelationSet // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))
	{
		obj := coreglib.Take(unsafe.Pointer(arg2))
		_relationset = &atk.RelationSet{
			Object: obj,
		}
	}

	iface.UpdateRelationset(_cell, _relationset)
}

func wrapCellAccessibleParent(obj *coreglib.Object) *CellAccessibleParent {
	return &CellAccessibleParent{
		Object: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	return wrapCellAccessibleParent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Activate(cell *CellAccessible) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**CellAccessibleParent)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Edit(cell *CellAccessible) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**CellAccessibleParent)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) ExpandCollapse(cell *CellAccessible) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**CellAccessibleParent)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) GrabFocus(cell *CellAccessible) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**CellAccessibleParent)(unsafe.Pointer(&args[1])) = _arg1

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - cell
//    - relationset
//
func (parent *CellAccessibleParent) UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(relationset).Native()))
	*(**CellAccessibleParent)(unsafe.Pointer(&args[1])) = _arg1
	*(**CellAccessible)(unsafe.Pointer(&args[2])) = _arg2

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(relationset)
}
