// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gtk3_CellAccessibleParentIface_grab_focus(void*, void*);
// extern int _gotk4_gtk3_CellAccessibleParentIface_get_child_index(void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_activate(void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_edit(void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_expand_collapse(void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_get_cell_area(void*, void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_get_cell_position(void*, void*, void*, void*);
// extern void _gotk4_gtk3_CellAccessibleParentIface_update_relationset(void*, void*, void*);
import "C"

// GTypeCellAccessibleParent returns the GType for the type CellAccessibleParent.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeCellAccessibleParent() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "CellAccessibleParent").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalCellAccessibleParent)
	return gtype
}

// CellAccessibleParentOverrider contains methods that are overridable.
type CellAccessibleParentOverrider interface {
	// The function takes the following parameters:
	//
	Activate(cell *CellAccessible)
	// The function takes the following parameters:
	//
	Edit(cell *CellAccessible)
	// The function takes the following parameters:
	//
	ExpandCollapse(cell *CellAccessible)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	CellArea(cell *CellAccessible) *gdk.Rectangle
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	//    - row
	//    - column
	//
	CellPosition(cell *CellAccessible) (row, column int32)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ChildIndex(cell *CellAccessible) int32
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	GrabFocus(cell *CellAccessible) bool
	// The function takes the following parameters:
	//
	//    - cell
	//    - relationset
	//
	UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet)
}

//
// CellAccessibleParent wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CellAccessibleParent struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*CellAccessibleParent)(nil)
)

// CellAccessibleParenter describes CellAccessibleParent's interface methods.
type CellAccessibleParenter interface {
	coreglib.Objector

	Activate(cell *CellAccessible)
	Edit(cell *CellAccessible)
	ExpandCollapse(cell *CellAccessible)
	CellArea(cell *CellAccessible) *gdk.Rectangle
	CellPosition(cell *CellAccessible) (row, column int32)
	ChildIndex(cell *CellAccessible) int32
	GrabFocus(cell *CellAccessible) bool
	UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet)
}

var _ CellAccessibleParenter = (*CellAccessibleParent)(nil)

func ifaceInitCellAccessibleParenter(gifacePtr, data C.gpointer) {
	iface := girepository.MustFind("Gtk", "CellAccessibleParentIface")
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("activate"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_activate)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("edit"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_edit)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("expand_collapse"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_expand_collapse)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_cell_area"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_get_cell_area)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_cell_position"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_get_cell_position)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_child_index"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_get_child_index)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("grab_focus"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_grab_focus)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("update_relationset"))) = unsafe.Pointer(C._gotk4_gtk3_CellAccessibleParentIface_update_relationset)
}

//export _gotk4_gtk3_CellAccessibleParentIface_activate
func _gotk4_gtk3_CellAccessibleParentIface_activate(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.Activate(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_edit
func _gotk4_gtk3_CellAccessibleParentIface_edit(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.Edit(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_expand_collapse
func _gotk4_gtk3_CellAccessibleParentIface_expand_collapse(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	iface.ExpandCollapse(_cell)
}

//export _gotk4_gtk3_CellAccessibleParentIface_get_cell_area
func _gotk4_gtk3_CellAccessibleParentIface_get_cell_area(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	cellRect := iface.CellArea(_cell)

	*arg2 = (*C.void)(gextras.StructNative(unsafe.Pointer(cellRect)))
}

//export _gotk4_gtk3_CellAccessibleParentIface_get_cell_position
func _gotk4_gtk3_CellAccessibleParentIface_get_cell_position(arg0 *C.void, arg1 *C.void, arg2 *C.void, arg3 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	row, column := iface.CellPosition(_cell)

	*arg2 = (*C.void)(unsafe.Pointer(row))
	*arg3 = (*C.void)(unsafe.Pointer(column))
}

//export _gotk4_gtk3_CellAccessibleParentIface_get_child_index
func _gotk4_gtk3_CellAccessibleParentIface_get_child_index(arg0 *C.void, arg1 *C.void) (cret C.int) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	gint := iface.ChildIndex(_cell)

	cret = C.int(gint)

	return cret
}

//export _gotk4_gtk3_CellAccessibleParentIface_grab_focus
func _gotk4_gtk3_CellAccessibleParentIface_grab_focus(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))

	ok := iface.GrabFocus(_cell)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_CellAccessibleParentIface_update_relationset
func _gotk4_gtk3_CellAccessibleParentIface_update_relationset(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(CellAccessibleParentOverrider)

	var _cell *CellAccessible         // out
	var _relationset *atk.RelationSet // out

	_cell = wrapCellAccessible(coreglib.Take(unsafe.Pointer(arg1)))
	{
		obj := coreglib.Take(unsafe.Pointer(arg2))
		_relationset = &atk.RelationSet{
			Object: obj,
		}
	}

	iface.UpdateRelationset(_cell, _relationset)
}

func wrapCellAccessibleParent(obj *coreglib.Object) *CellAccessibleParent {
	return &CellAccessibleParent{
		Object: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	return wrapCellAccessibleParent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Activate(cell *CellAccessible) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) Edit(cell *CellAccessible) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
func (parent *CellAccessibleParent) ExpandCollapse(cell *CellAccessible) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) CellArea(cell *CellAccessible) *gdk.Rectangle {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _cellRect *gdk.Rectangle // out

	_cellRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _cellRect
}

// The function takes the following parameters:
//
// The function returns the following values:
//
//    - row
//    - column
//
func (parent *CellAccessibleParent) CellPosition(cell *CellAccessible) (row, column int32) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _row int32    // out
	var _column int32 // out

	_row = *(*int32)(unsafe.Pointer(_outs[0]))
	_column = *(*int32)(unsafe.Pointer(_outs[1]))

	return _row, _column
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) ChildIndex(cell *CellAccessible) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (parent *CellAccessibleParent) GrabFocus(cell *CellAccessible) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - cell
//    - relationset
//
func (parent *CellAccessibleParent) UpdateRelationset(cell *CellAccessible, relationset *atk.RelationSet) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(relationset).Native()))

	runtime.KeepAlive(parent)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(relationset)
}
