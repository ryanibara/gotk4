// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_ColorButton_ConnectColorSet(gpointer, guintptr);
// extern void _gotk4_gtk3_ColorButtonClass_color_set(GtkColorButton*);
// void _gotk4_gtk3_ColorButton_virtual_color_set(void* fnptr, GtkColorButton* arg0) {
//   ((void (*)(GtkColorButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeColorButton = coreglib.Type(C.gtk_color_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeColorButton, F: marshalColorButton},
	})
}

// ColorButtonOverrides contains methods that are overridable.
type ColorButtonOverrides struct {
	ColorSet func()
}

func defaultColorButtonOverrides(v *ColorButton) ColorButtonOverrides {
	return ColorButtonOverrides{
		ColorSet: v.colorSet,
	}
}

// ColorButton is a button which displays the currently selected color and
// allows to open a color selection dialog to change the color. It is suitable
// widget for selecting a color in a preference dialog.
//
//
// CSS nodes
//
// GtkColorButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .color style class.
type ColorButton struct {
	_ [0]func() // equal guard
	Button

	*coreglib.Object
	ColorChooser
}

var (
	_ coreglib.Objector = (*ColorButton)(nil)
	_ Binner            = (*ColorButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ColorButton, *ColorButtonClass, ColorButtonOverrides](
		GTypeColorButton,
		initColorButtonClass,
		wrapColorButton,
		defaultColorButtonOverrides,
	)
}

func initColorButtonClass(gclass unsafe.Pointer, overrides ColorButtonOverrides, classInitFunc func(*ColorButtonClass)) {
	pclass := (*C.GtkColorButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeColorButton))))

	if overrides.ColorSet != nil {
		pclass.color_set = (*[0]byte)(C._gotk4_gtk3_ColorButtonClass_color_set)
	}

	if classInitFunc != nil {
		class := (*ColorButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapColorButton(obj *coreglib.Object) *ColorButton {
	return &ColorButton{
		Button: Button{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
		Object: obj,
		ColorChooser: ColorChooser{
			Object: obj,
		},
	}
}

func marshalColorButton(p uintptr) (interface{}, error) {
	return wrapColorButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectColorSet signal is emitted when the user selects a color. When
// handling this signal, use gtk_color_button_get_rgba() to find out which color
// was just selected.
//
// Note that this signal is only emitted when the user changes the color. If you
// need to react to programmatic color changes as well, use the notify::color
// signal.
func (button *ColorButton) ConnectColorSet(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "color-set", false, unsafe.Pointer(C._gotk4_gtk3_ColorButton_ConnectColorSet), f)
}

func (cp *ColorButton) colorSet() {
	gclass := (*C.GtkColorButtonClass)(coreglib.PeekParentClass(cp))
	fnarg := gclass.color_set

	var _arg0 *C.GtkColorButton // out

	_arg0 = (*C.GtkColorButton)(unsafe.Pointer(coreglib.InternObject(cp).Native()))

	C._gotk4_gtk3_ColorButton_virtual_color_set(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(cp)
}

// ColorButtonClass: instance of this type is always passed by reference.
type ColorButtonClass struct {
	*colorButtonClass
}

// colorButtonClass is the struct that's finalized.
type colorButtonClass struct {
	native *C.GtkColorButtonClass
}

func (c *ColorButtonClass) ParentClass() *ButtonClass {
	valptr := &c.native.parent_class
	var _v *ButtonClass // out
	_v = (*ButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
