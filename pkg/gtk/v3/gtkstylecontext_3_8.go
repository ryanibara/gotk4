// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// FrameClock returns the FrameClock to which context is attached.
//
// The function returns the following values:
//
//    - frameClock (optional) or NULL if context does not have an attached frame
//      clock.
//
func (context *StyleContext) FrameClock() gdk.FrameClocker {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GdkFrameClock   // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_frame_clock(_arg0)
	runtime.KeepAlive(context)

	var _frameClock gdk.FrameClocker // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.FrameClocker)
				return ok
			})
			rv, ok := casted.(gdk.FrameClocker)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.FrameClocker")
			}
			_frameClock = rv
		}
	}

	return _frameClock
}

// SetFrameClock attaches context to the given frame clock.
//
// The frame clock is used for the timing of animations.
//
// If you are using a StyleContext returned from gtk_widget_get_style_context(),
// you do not need to call this yourself.
//
// The function takes the following parameters:
//
//    - frameClock: FrameClock.
//
func (context *StyleContext) SetFrameClock(frameClock gdk.FrameClocker) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkFrameClock   // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkFrameClock)(unsafe.Pointer(coreglib.InternObject(frameClock).Native()))

	C.gtk_style_context_set_frame_clock(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(frameClock)
}
