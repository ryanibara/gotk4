// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_ColorChooserInterface_color_activated(GtkColorChooser*, GdkRGBA*);
// extern void _gotk4_gtk3_ColorChooserInterface_set_rgba(GtkColorChooser*, GdkRGBA*);
// extern void _gotk4_gtk3_ColorChooser_ConnectColorActivated(gpointer, GdkRGBA*, guintptr);
import "C"

// glib.Type values for gtkcolorchooser.go.
var GTypeColorChooser = coreglib.Type(C.gtk_color_chooser_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeColorChooser, F: marshalColorChooser},
	})
}

// ColorChooserOverrider contains methods that are overridable.
type ColorChooserOverrider interface {
	// The function takes the following parameters:
	//
	ColorActivated(color *gdk.RGBA)
	// SetRGBA sets the color.
	//
	// The function takes the following parameters:
	//
	//    - color: new color.
	//
	SetRGBA(color *gdk.RGBA)
}

// ColorChooser is an interface that is implemented by widgets for choosing
// colors. Depending on the situation, colors may be allowed to have alpha
// (translucency).
//
// In GTK+, the main widgets that implement this interface are
// ColorChooserWidget, ColorChooserDialog and ColorButton.
//
// ColorChooser wraps an interface. This means the user can get the
// underlying type by calling Cast().
type ColorChooser struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ColorChooser)(nil)
)

// ColorChooserer describes ColorChooser's interface methods.
type ColorChooserer interface {
	coreglib.Objector

	// UseAlpha returns whether the color chooser shows the alpha channel.
	UseAlpha() bool
	// SetRGBA sets the color.
	SetRGBA(color *gdk.RGBA)
	// SetUseAlpha sets whether or not the color chooser should use the alpha
	// channel.
	SetUseAlpha(useAlpha bool)

	// Color-activated is emitted when a color is activated from the color
	// chooser.
	ConnectColorActivated(func(color *gdk.RGBA)) coreglib.SignalHandle
}

var _ ColorChooserer = (*ColorChooser)(nil)

func ifaceInitColorChooserer(gifacePtr, data C.gpointer) {
	iface := (*C.GtkColorChooserInterface)(unsafe.Pointer(gifacePtr))
	iface.color_activated = (*[0]byte)(C._gotk4_gtk3_ColorChooserInterface_color_activated)
	iface.set_rgba = (*[0]byte)(C._gotk4_gtk3_ColorChooserInterface_set_rgba)
}

//export _gotk4_gtk3_ColorChooserInterface_color_activated
func _gotk4_gtk3_ColorChooserInterface_color_activated(arg0 *C.GtkColorChooser, arg1 *C.GdkRGBA) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ColorChooserOverrider)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.ColorActivated(_color)
}

//export _gotk4_gtk3_ColorChooserInterface_set_rgba
func _gotk4_gtk3_ColorChooserInterface_set_rgba(arg0 *C.GtkColorChooser, arg1 *C.GdkRGBA) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ColorChooserOverrider)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.SetRGBA(_color)
}

func wrapColorChooser(obj *coreglib.Object) *ColorChooser {
	return &ColorChooser{
		Object: obj,
	}
}

func marshalColorChooser(p uintptr) (interface{}, error) {
	return wrapColorChooser(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_ColorChooser_ConnectColorActivated
func _gotk4_gtk3_ColorChooser_ConnectColorActivated(arg0 C.gpointer, arg1 *C.GdkRGBA, arg2 C.guintptr) {
	var f func(color *gdk.RGBA)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(color *gdk.RGBA))
	}

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_color)
}

// ConnectColorActivated is emitted when a color is activated from the color
// chooser. This usually happens when the user clicks a color swatch, or a color
// is selected and the user presses one of the keys Space, Shift+Space, Return
// or Enter.
func (chooser *ColorChooser) ConnectColorActivated(f func(color *gdk.RGBA)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(chooser, "color-activated", false, unsafe.Pointer(C._gotk4_gtk3_ColorChooser_ConnectColorActivated), f)
}

// UseAlpha returns whether the color chooser shows the alpha channel.
//
// The function returns the following values:
//
//    - ok: TRUE if the color chooser uses the alpha channel, FALSE if not.
//
func (chooser *ColorChooser) UseAlpha() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**ColorChooser)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetRGBA sets the color.
//
// The function takes the following parameters:
//
//    - color: new color.
//
func (chooser *ColorChooser) SetRGBA(color *gdk.RGBA) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))
	*(**ColorChooser)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(color)
}

// SetUseAlpha sets whether or not the color chooser should use the alpha
// channel.
//
// The function takes the following parameters:
//
//    - useAlpha: TRUE if color chooser should use alpha channel, FALSE if not.
//
func (chooser *ColorChooser) SetUseAlpha(useAlpha bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if useAlpha {
		_arg1 = C.TRUE
	}
	*(**ColorChooser)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(useAlpha)
}
