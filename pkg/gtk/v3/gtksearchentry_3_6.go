// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_SearchEntry_ConnectStopSearch(gpointer, guintptr);
// extern void _gotk4_gtk3_SearchEntry_ConnectSearchChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_SearchEntry_ConnectPreviousMatch(gpointer, guintptr);
// extern void _gotk4_gtk3_SearchEntry_ConnectNextMatch(gpointer, guintptr);
// extern void _gotk4_gtk3_SearchEntryClass_stop_search(GtkSearchEntry*);
// extern void _gotk4_gtk3_SearchEntryClass_search_changed(GtkSearchEntry*);
// extern void _gotk4_gtk3_SearchEntryClass_previous_match(GtkSearchEntry*);
// extern void _gotk4_gtk3_SearchEntryClass_next_match(GtkSearchEntry*);
import "C"

// GType values.
var (
	GTypeSearchEntry = coreglib.Type(C.gtk_search_entry_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSearchEntry, F: marshalSearchEntry},
	})
}

// SearchEntryOverrides contains methods that are overridable.
type SearchEntryOverrides struct {
	NextMatch     func()
	PreviousMatch func()
	SearchChanged func()
	StopSearch    func()
}

func defaultSearchEntryOverrides(v *SearchEntry) SearchEntryOverrides {
	return SearchEntryOverrides{
		NextMatch:     v.nextMatch,
		PreviousMatch: v.previousMatch,
		SearchChanged: v.searchChanged,
		StopSearch:    v.stopSearch,
	}
}

// SearchEntry is a subclass of Entry that has been tailored for use as a search
// entry.
//
// It will show an inactive symbolic “find” icon when the search entry is empty,
// and a symbolic “clear” icon when there is text. Clicking on the “clear” icon
// will empty the search entry.
//
// Note that the search/clear icon is shown using a secondary icon, and thus
// does not work if you are using the secondary icon position for some other
// purpose.
//
// To make filtering appear more reactive, it is a good idea to not react to
// every change in the entry text immediately, but only after a short delay. To
// support this, SearchEntry emits the SearchEntry::search-changed signal which
// can be used instead of the Editable::changed signal.
//
// The SearchEntry::previous-match, SearchEntry::next-match and
// SearchEntry::stop-search signals can be used to implement moving between
// search results and ending the search.
//
// Often, GtkSearchEntry will be fed events by means of being placed inside a
// SearchBar. If that is not the case, you can use
// gtk_search_entry_handle_event() to pass events.
type SearchEntry struct {
	_ [0]func() // equal guard
	Entry
}

var (
	_ Widgetter         = (*SearchEntry)(nil)
	_ coreglib.Objector = (*SearchEntry)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SearchEntry, *SearchEntryClass, SearchEntryOverrides](
		GTypeSearchEntry,
		initSearchEntryClass,
		wrapSearchEntry,
		defaultSearchEntryOverrides,
	)
}

func initSearchEntryClass(gclass unsafe.Pointer, overrides SearchEntryOverrides, classInitFunc func(*SearchEntryClass)) {
	pclass := (*C.GtkSearchEntryClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeSearchEntry))))

	if overrides.NextMatch != nil {
		pclass.next_match = (*[0]byte)(C._gotk4_gtk3_SearchEntryClass_next_match)
	}

	if overrides.PreviousMatch != nil {
		pclass.previous_match = (*[0]byte)(C._gotk4_gtk3_SearchEntryClass_previous_match)
	}

	if overrides.SearchChanged != nil {
		pclass.search_changed = (*[0]byte)(C._gotk4_gtk3_SearchEntryClass_search_changed)
	}

	if overrides.StopSearch != nil {
		pclass.stop_search = (*[0]byte)(C._gotk4_gtk3_SearchEntryClass_stop_search)
	}

	if classInitFunc != nil {
		class := (*SearchEntryClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSearchEntry(obj *coreglib.Object) *SearchEntry {
	return &SearchEntry{
		Entry: Entry{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Object: obj,
			CellEditable: CellEditable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Editable: Editable{
				Object: obj,
			},
		},
	}
}

func marshalSearchEntry(p uintptr) (interface{}, error) {
	return wrapSearchEntry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectNextMatch signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user initiates a move to the next match for the current
// search string.
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-g.
func (entry *SearchEntry) ConnectNextMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "next-match", false, unsafe.Pointer(C._gotk4_gtk3_SearchEntry_ConnectNextMatch), f)
}

// ConnectPreviousMatch signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user initiates a move to the previous match for the
// current search string.
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-Shift-g.
func (entry *SearchEntry) ConnectPreviousMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "previous-match", false, unsafe.Pointer(C._gotk4_gtk3_SearchEntry_ConnectPreviousMatch), f)
}

// ConnectSearchChanged signal is emitted with a short delay of 150 milliseconds
// after the last change to the entry text.
func (entry *SearchEntry) ConnectSearchChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "search-changed", false, unsafe.Pointer(C._gotk4_gtk3_SearchEntry_ConnectSearchChanged), f)
}

// ConnectStopSearch signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user stops a search via keyboard input.
//
// Applications should connect to it, to implement hiding the search entry in
// this case.
//
// The default bindings for this signal is Escape.
func (entry *SearchEntry) ConnectStopSearch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "stop-search", false, unsafe.Pointer(C._gotk4_gtk3_SearchEntry_ConnectStopSearch), f)
}

// NewSearchEntry creates a SearchEntry, with a find icon when the search field
// is empty, and a clear icon when it isn't.
//
// The function returns the following values:
//
//    - searchEntry: new SearchEntry.
//
func NewSearchEntry() *SearchEntry {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_search_entry_new()

	var _searchEntry *SearchEntry // out

	_searchEntry = wrapSearchEntry(coreglib.Take(unsafe.Pointer(_cret)))

	return _searchEntry
}
