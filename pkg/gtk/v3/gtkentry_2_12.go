// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// CursorHAdjustment retrieves the horizontal cursor adjustment for the entry.
// See gtk_entry_set_cursor_hadjustment().
//
// The function returns the following values:
//
//    - adjustment (optional): horizontal cursor adjustment, or NULL if none has
//      been set.
//
func (entry *Entry) CursorHAdjustment() *Adjustment {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_cursor_hadjustment(_arg0)
	runtime.KeepAlive(entry)

	var _adjustment *Adjustment // out

	if _cret != nil {
		_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _adjustment
}

// SetCursorHAdjustment hooks up an adjustment to the cursor position in an
// entry, so that when the cursor is moved, the adjustment is scrolled to show
// that position. See gtk_scrolled_window_get_hadjustment() for a typical way of
// obtaining the adjustment.
//
// The adjustment has to be in pixel units and in the same coordinate system as
// the entry.
//
// The function takes the following parameters:
//
//    - adjustment (optional) which should be adjusted when the cursor is moved,
//      or NULL.
//
func (entry *Entry) SetCursorHAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if adjustment != nil {
		_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	}

	C.gtk_entry_set_cursor_hadjustment(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(adjustment)
}
