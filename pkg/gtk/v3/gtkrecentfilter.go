// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkrecentfilter.go.
var (
	GTypeRecentFilterFlags = coreglib.Type(C.gtk_recent_filter_flags_get_type())
	GTypeRecentFilter      = coreglib.Type(C.gtk_recent_filter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeRecentFilterFlags, F: marshalRecentFilterFlags},
		{T: GTypeRecentFilter, F: marshalRecentFilter},
	})
}

// RecentFilterFlags: these flags indicate what parts of a RecentFilterInfo
// struct are filled or need to be filled.
type RecentFilterFlags C.guint

const (
	// RecentFilterURI: URI of the file being tested.
	RecentFilterURI RecentFilterFlags = 0b1
	// RecentFilterDisplayName: string that will be used to display the file in
	// the recent chooser.
	RecentFilterDisplayName RecentFilterFlags = 0b10
	// RecentFilterMIMEType: mime type of the file.
	RecentFilterMIMEType RecentFilterFlags = 0b100
	// RecentFilterApplication: list of applications that have registered the
	// file.
	RecentFilterApplication RecentFilterFlags = 0b1000
	// RecentFilterGroup groups to which the file belongs to.
	RecentFilterGroup RecentFilterFlags = 0b10000
	// RecentFilterAge: number of days elapsed since the file has been
	// registered.
	RecentFilterAge RecentFilterFlags = 0b100000
)

func marshalRecentFilterFlags(p uintptr) (interface{}, error) {
	return RecentFilterFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RecentFilterFlags.
func (r RecentFilterFlags) String() string {
	if r == 0 {
		return "RecentFilterFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(118)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RecentFilterURI:
			builder.WriteString("URI|")
		case RecentFilterDisplayName:
			builder.WriteString("DisplayName|")
		case RecentFilterMIMEType:
			builder.WriteString("MIMEType|")
		case RecentFilterApplication:
			builder.WriteString("Application|")
		case RecentFilterGroup:
			builder.WriteString("Group|")
		case RecentFilterAge:
			builder.WriteString("Age|")
		default:
			builder.WriteString(fmt.Sprintf("RecentFilterFlags(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RecentFilterFlags) Has(other RecentFilterFlags) bool {
	return (r & other) == other
}

// RecentFilterFunc: type of function that is used with custom filters, see
// gtk_recent_filter_add_custom().
type RecentFilterFunc func(filterInfo *RecentFilterInfo) (ok bool)

//export _gotk4_gtk3_RecentFilterFunc
func _gotk4_gtk3_RecentFilterFunc(arg1 *C.void, arg2 C.gpointer) (cret C.gboolean) {
	var fn RecentFilterFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(RecentFilterFunc)
	}

	var _filterInfo *RecentFilterInfo // out

	_filterInfo = (*RecentFilterInfo)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := fn(_filterInfo)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// RecentFilter can be used to restrict the files being shown in a
// RecentChooser. Files can be filtered based on their name (with
// gtk_recent_filter_add_pattern()), on their mime type (with
// gtk_file_filter_add_mime_type()), on the application that has registered them
// (with gtk_recent_filter_add_application()), or by a custom filter function
// (with gtk_recent_filter_add_custom()).
//
// Filtering by mime type handles aliasing and subclassing of mime types; e.g. a
// filter for text/plain also matches a file with mime type application/rtf,
// since application/rtf is a subclass of text/plain. Note that RecentFilter
// allows wildcards for the subtype of a mime type, so you can e.g. filter for
// image/\*.
//
// Normally, filters are used by adding them to a RecentChooser, see
// gtk_recent_chooser_add_filter(), but it is also possible to manually use a
// filter on a file with gtk_recent_filter_filter().
//
// Recently used files are supported since GTK+ 2.10.
//
//
// GtkRecentFilter as GtkBuildable
//
// The GtkRecentFilter implementation of the GtkBuildable interface supports
// adding rules using the <mime-types>, <patterns> and <applications> elements
// and listing the rules within. Specifying a <mime-type>, <pattern> or
// <application> has the same effect as calling
// gtk_recent_filter_add_mime_type(), gtk_recent_filter_add_pattern() or
// gtk_recent_filter_add_application().
//
// An example of a UI definition fragment specifying GtkRecentFilter rules:
//
//    <object class="GtkRecentFilter">
//      <mime-types>
//        <mime-type>text/plain</mime-type>
//        <mime-type>image/png</mime-type>
//      </mime-types>
//      <patterns>
//        <pattern>*.txt</pattern>
//        <pattern>*.png</pattern>
//      </patterns>
//      <applications>
//        <application>gimp</application>
//        <application>gedit</application>
//        <application>glade</application>
//      </applications>
//    </object>.
type RecentFilter struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned

	*coreglib.Object
	Buildable
}

var (
	_ coreglib.Objector = (*RecentFilter)(nil)
)

func wrapRecentFilter(obj *coreglib.Object) *RecentFilter {
	return &RecentFilter{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalRecentFilter(p uintptr) (interface{}, error) {
	return wrapRecentFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewRecentFilter creates a new RecentFilter with no rules added to it. Such
// filter does not accept any recently used resources, so is not particularly
// useful until you add rules with gtk_recent_filter_add_pattern(),
// gtk_recent_filter_add_mime_type(), gtk_recent_filter_add_application(),
// gtk_recent_filter_add_age(). To create a filter that accepts any recently
// used resource, use:
//
//    GtkRecentFilter *filter = gtk_recent_filter_new ();
//    gtk_recent_filter_add_pattern (filter, "*");.
//
// The function returns the following values:
//
//    - recentFilter: new RecentFilter.
//
func NewRecentFilter() *RecentFilter {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("new_RecentFilter", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _recentFilter *RecentFilter // out

	_recentFilter = wrapRecentFilter(coreglib.Take(unsafe.Pointer(_cret)))

	return _recentFilter
}

// AddAge adds a rule that allows resources based on their age - that is, the
// number of days elapsed since they were last modified.
//
// The function takes the following parameters:
//
//    - days: number of days.
//
func (filter *RecentFilter) AddAge(days int32) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.gint  // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = C.gint(days)

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gint)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_age", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(days)
}

// AddApplication adds a rule that allows resources based on the name of the
// application that has registered them.
//
// The function takes the following parameters:
//
//    - application name.
//
func (filter *RecentFilter) AddApplication(application string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(application)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_application", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(application)
}

// AddGroup adds a rule that allows resources based on the name of the group to
// which they belong.
//
// The function takes the following parameters:
//
//    - group name.
//
func (filter *RecentFilter) AddGroup(group string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(group)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_group", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(group)
}

// AddMIMEType adds a rule that allows resources based on their registered MIME
// type.
//
// The function takes the following parameters:
//
//    - mimeType: MIME type.
//
func (filter *RecentFilter) AddMIMEType(mimeType string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_mime_type", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(mimeType)
}

// AddPattern adds a rule that allows resources based on a pattern matching
// their display name.
//
// The function takes the following parameters:
//
//    - pattern: file pattern.
//
func (filter *RecentFilter) AddPattern(pattern string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(pattern)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_pattern", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(pattern)
}

// AddPixbufFormats adds a rule allowing image files in the formats supported by
// GdkPixbuf.
func (filter *RecentFilter) AddPixbufFormats() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("add_pixbuf_formats", _args[:], nil)

	runtime.KeepAlive(filter)
}

// Filter tests whether a file should be displayed according to filter. The
// RecentFilterInfo filter_info should include the fields returned from
// gtk_recent_filter_get_needed(), and must set the RecentFilterInfo.contains
// field of filter_info to indicate which fields have been set.
//
// This function will not typically be used by applications; it is intended
// principally for use in the implementation of RecentChooser.
//
// The function takes the following parameters:
//
//    - filterInfo containing information about a recently used resource.
//
// The function returns the following values:
//
//    - ok: TRUE if the file should be displayed.
//
func (filter *RecentFilter) Filter(filterInfo *RecentFilterInfo) bool {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(filterInfo)))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("filter", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(filter)
	runtime.KeepAlive(filterInfo)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Name gets the human-readable name for the filter. See
// gtk_recent_filter_set_name().
//
// The function returns the following values:
//
//    - utf8 (optional): name of the filter, or NULL. The returned string is
//      owned by the filter object and should not be freed.
//
func (filter *RecentFilter) Name() string {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("get_name", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(filter)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetName sets the human-readable name of the filter; this is the string that
// will be displayed in the recently used resources selector user interface if
// there is a selectable list of filters.
//
// The function takes the following parameters:
//
//    - name: then human readable name of filter.
//
func (filter *RecentFilter) SetName(name string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "RecentFilter").InvokeMethod("set_name", _args[:], nil)

	runtime.KeepAlive(filter)
	runtime.KeepAlive(name)
}

// RecentFilterInfo struct is used to pass information about the tested file to
// gtk_recent_filter_filter().
//
// An instance of this type is always passed by reference.
type RecentFilterInfo struct {
	*recentFilterInfo
}

// recentFilterInfo is the struct that's finalized.
type recentFilterInfo struct {
	native *C.GtkRecentFilterInfo
}
