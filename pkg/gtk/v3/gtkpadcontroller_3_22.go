// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewPadController creates a new PadController that will associate events from
// pad to actions. A NULL pad may be provided so the controller manages all pad
// devices generically, it is discouraged to mix PadController objects with NULL
// and non-NULL pad argument on the same window, as execution order is not
// guaranteed.
//
// The PadController is created with no mapped actions. In order to map pad
// events to actions, use gtk_pad_controller_set_action_entries() or
// gtk_pad_controller_set_action().
//
// The function takes the following parameters:
//
//    - window: Window.
//    - group to trigger actions from.
//    - pad (optional): GDK_SOURCE_TABLET_PAD device, or NULL to handle all pads.
//
// The function returns the following values:
//
//    - padController: newly created PadController.
//
func NewPadController(window *Window, group gio.ActionGrouper, pad gdk.Devicer) *PadController {
	var _arg1 *C.GtkWindow        // out
	var _arg2 *C.GActionGroup     // out
	var _arg3 *C.GdkDevice        // out
	var _cret *C.GtkPadController // in

	_arg1 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = (*C.GActionGroup)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	if pad != nil {
		_arg3 = (*C.GdkDevice)(unsafe.Pointer(coreglib.InternObject(pad).Native()))
	}

	_cret = C.gtk_pad_controller_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(window)
	runtime.KeepAlive(group)
	runtime.KeepAlive(pad)

	var _padController *PadController // out

	_padController = wrapPadController(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _padController
}

// SetAction adds an individual action to controller. This action will only be
// activated if the given button/ring/strip number in index is interacted while
// the current mode is mode. -1 may be used for simple cases, so the action is
// triggered on all modes.
//
// The given label should be considered user-visible, so internationalization
// rules apply. Some windowing systems may be able to use those for user
// feedback.
//
// The function takes the following parameters:
//
//    - typ: type of pad feature that will trigger this action.
//    - index: 0-indexed button/ring/strip number that will trigger this action.
//    - mode that will trigger this action, or -1 for all modes.
//    - label: human readable description of this action, this string should be
//      deemed user-visible.
//    - actionName: action name that will be activated in the Group.
//
func (controller *PadController) SetAction(typ PadActionType, index, mode int, label, actionName string) {
	var _arg0 *C.GtkPadController // out
	var _arg1 C.GtkPadActionType  // out
	var _arg2 C.gint              // out
	var _arg3 C.gint              // out
	var _arg4 *C.gchar            // out
	var _arg5 *C.gchar            // out

	_arg0 = (*C.GtkPadController)(unsafe.Pointer(coreglib.InternObject(controller).Native()))
	_arg1 = C.GtkPadActionType(typ)
	_arg2 = C.gint(index)
	_arg3 = C.gint(mode)
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(actionName)))
	defer C.free(unsafe.Pointer(_arg5))

	C.gtk_pad_controller_set_action(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(controller)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(index)
	runtime.KeepAlive(mode)
	runtime.KeepAlive(label)
	runtime.KeepAlive(actionName)
}

// SetActionEntries: this is a convenience function to add a group of action
// entries on controller. See PadActionEntry and
// gtk_pad_controller_set_action().
//
// The function takes the following parameters:
//
//    - entries: action entries to set on controller.
//
func (controller *PadController) SetActionEntries(entries []PadActionEntry) {
	var _arg0 *C.GtkPadController  // out
	var _arg1 *C.GtkPadActionEntry // out
	var _arg2 C.gint

	_arg0 = (*C.GtkPadController)(unsafe.Pointer(coreglib.InternObject(controller).Native()))
	_arg2 = (C.gint)(len(entries))
	_arg1 = (*C.GtkPadActionEntry)(C.calloc(C.size_t(len(entries)), C.size_t(C.sizeof_GtkPadActionEntry)))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice((*C.GtkPadActionEntry)(_arg1), len(entries))
		for i := range entries {
			out[i] = *(*C.GtkPadActionEntry)(gextras.StructNative(unsafe.Pointer((&entries[i]))))
		}
	}

	C.gtk_pad_controller_set_action_entries(_arg0, _arg1, _arg2)
	runtime.KeepAlive(controller)
	runtime.KeepAlive(entries)
}
