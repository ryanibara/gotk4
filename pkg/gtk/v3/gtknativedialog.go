// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_NativeDialog_ConnectResponse(gpointer, gint, guintptr);
// extern void _gotk4_gtk3_NativeDialogClass_show(GtkNativeDialog*);
// extern void _gotk4_gtk3_NativeDialogClass_response(GtkNativeDialog*, gint);
// extern void _gotk4_gtk3_NativeDialogClass_hide(GtkNativeDialog*);
// void _gotk4_gtk3_NativeDialog_virtual_response(void* fnptr, GtkNativeDialog* arg0, gint arg1) {
//   ((void (*)(GtkNativeDialog*, gint))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeNativeDialog = coreglib.Type(C.gtk_native_dialog_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNativeDialog, F: marshalNativeDialog},
	})
}

// NativeDialogOverrides contains methods that are overridable.
type NativeDialogOverrides struct {
	// Hide hides the dialog if it is visilbe, aborting any interaction. Once
	// this is called the NativeDialog::response signal will not be emitted
	// until after the next call to gtk_native_dialog_show().
	//
	// If the dialog is not visible this does nothing.
	Hide func()
	// The function takes the following parameters:
	//
	Response func(responseId int)
	// Show shows the dialog on the display, allowing the user to interact with
	// it. When the user accepts the state of the dialog the dialog will be
	// automatically hidden and the NativeDialog::response signal will be
	// emitted.
	//
	// Multiple calls while the dialog is visible will be ignored.
	Show func()
}

func defaultNativeDialogOverrides(v *NativeDialog) NativeDialogOverrides {
	return NativeDialogOverrides{
		Hide:     v.hide,
		Response: v.response,
		Show:     v.show,
	}
}

// NativeDialog: native dialogs are platform dialogs that don't use Dialog or
// Window. They are used in order to integrate better with a platform, by
// looking the same as other native applications and supporting platform
// specific features.
//
// The Dialog functions cannot be used on such objects, but we need a similar
// API in order to drive them. The NativeDialog object is an API that allows you
// to do this. It allows you to set various common properties on the dialog, as
// well as show and hide it and get a NativeDialog::response signal when the
// user finished with the dialog.
//
// There is also a gtk_native_dialog_run() helper that makes it easy to run any
// native dialog in a modal way with a recursive mainloop, similar to
// gtk_dialog_run().
type NativeDialog struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*NativeDialog)(nil)
)

// NativeDialogger describes types inherited from class NativeDialog.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type NativeDialogger interface {
	coreglib.Objector
	baseNativeDialog() *NativeDialog
}

var _ NativeDialogger = (*NativeDialog)(nil)

func init() {
	coreglib.RegisterClassInfo[*NativeDialog, *NativeDialogClass, NativeDialogOverrides](
		GTypeNativeDialog,
		initNativeDialogClass,
		wrapNativeDialog,
		defaultNativeDialogOverrides,
	)
}

func initNativeDialogClass(gclass unsafe.Pointer, overrides NativeDialogOverrides, classInitFunc func(*NativeDialogClass)) {
	pclass := (*C.GtkNativeDialogClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeNativeDialog))))

	if overrides.Hide != nil {
		pclass.hide = (*[0]byte)(C._gotk4_gtk3_NativeDialogClass_hide)
	}

	if overrides.Response != nil {
		pclass.response = (*[0]byte)(C._gotk4_gtk3_NativeDialogClass_response)
	}

	if overrides.Show != nil {
		pclass.show = (*[0]byte)(C._gotk4_gtk3_NativeDialogClass_show)
	}

	if classInitFunc != nil {
		class := (*NativeDialogClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNativeDialog(obj *coreglib.Object) *NativeDialog {
	return &NativeDialog{
		Object: obj,
	}
}

func marshalNativeDialog(p uintptr) (interface{}, error) {
	return wrapNativeDialog(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *NativeDialog) baseNativeDialog() *NativeDialog {
	return self
}

// BaseNativeDialog returns the underlying base object.
func BaseNativeDialog(obj NativeDialogger) *NativeDialog {
	return obj.baseNativeDialog()
}

// ConnectResponse is emitted when the user responds to the dialog.
//
// When this is called the dialog has been hidden.
//
// If you call gtk_native_dialog_hide() before the user responds to the dialog
// this signal will not be emitted.
func (self *NativeDialog) ConnectResponse(f func(responseId int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "response", false, unsafe.Pointer(C._gotk4_gtk3_NativeDialog_ConnectResponse), f)
}

// The function takes the following parameters:
//
func (self *NativeDialog) response(responseId int) {
	gclass := (*C.GtkNativeDialogClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.response

	var _arg0 *C.GtkNativeDialog // out
	var _arg1 C.gint             // out

	_arg0 = (*C.GtkNativeDialog)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gint(responseId)

	C._gotk4_gtk3_NativeDialog_virtual_response(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(responseId)
}

// NativeDialogClass: instance of this type is always passed by reference.
type NativeDialogClass struct {
	*nativeDialogClass
}

// nativeDialogClass is the struct that's finalized.
type nativeDialogClass struct {
	native *C.GtkNativeDialogClass
}
