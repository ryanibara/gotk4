// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_ToggleToolButtonClass_toggled(GtkToggleToolButton*);
// extern void _gotk4_gtk3_ToggleToolButton_ConnectToggled(gpointer, guintptr);
import "C"

// glib.Type values for gtktoggletoolbutton.go.
var GTypeToggleToolButton = coreglib.Type(C.gtk_toggle_tool_button_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeToggleToolButton, F: marshalToggleToolButton},
	})
}

// ToggleToolButtonOverrider contains methods that are overridable.
type ToggleToolButtonOverrider interface {
	Toggled()
}

// ToggleToolButton is a ToolItem that contains a toggle button.
//
// Use gtk_toggle_tool_button_new() to create a new GtkToggleToolButton.
//
//
// CSS nodes
//
// GtkToggleToolButton has a single CSS node with name togglebutton.
type ToggleToolButton struct {
	_ [0]func() // equal guard
	ToolButton
}

var (
	_ coreglib.Objector = (*ToggleToolButton)(nil)
	_ Binner            = (*ToggleToolButton)(nil)
)

func classInitToggleToolButtonner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkToggleToolButtonClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkToggleToolButtonClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Toggled() }); ok {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk3_ToggleToolButtonClass_toggled)
	}
}

//export _gotk4_gtk3_ToggleToolButtonClass_toggled
func _gotk4_gtk3_ToggleToolButtonClass_toggled(arg0 *C.GtkToggleToolButton) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Toggled() })

	iface.Toggled()
}

func wrapToggleToolButton(obj *coreglib.Object) *ToggleToolButton {
	return &ToggleToolButton{
		ToolButton: ToolButton{
			ToolItem: ToolItem{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Activatable: Activatable{
					Object: obj,
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalToggleToolButton(p uintptr) (interface{}, error) {
	return wrapToggleToolButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_ToggleToolButton_ConnectToggled
func _gotk4_gtk3_ToggleToolButton_ConnectToggled(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggled is emitted whenever the toggle tool button changes state.
func (button *ToggleToolButton) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_ToggleToolButton_ConnectToggled), f)
}

// NewToggleToolButton returns a new ToggleToolButton.
//
// The function returns the following values:
//
//    - toggleToolButton: newly created ToggleToolButton.
//
func NewToggleToolButton() *ToggleToolButton {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "ToggleToolButton").InvokeMethod("new_ToggleToolButton", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _toggleToolButton *ToggleToolButton // out

	_toggleToolButton = wrapToggleToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _toggleToolButton
}

// NewToggleToolButtonFromStock creates a new ToggleToolButton containing the
// image and text from a stock item. Some stock ids have preprocessor macros
// like K_STOCK_OK and K_STOCK_APPLY.
//
// It is an error if stock_id is not a name of a stock item.
//
// Deprecated: Use gtk_toggle_tool_button_new() instead.
//
// The function takes the following parameters:
//
//    - stockId: name of the stock item.
//
// The function returns the following values:
//
//    - toggleToolButton: new ToggleToolButton.
//
func NewToggleToolButtonFromStock(stockId string) *ToggleToolButton {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg0))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "ToggleToolButton").InvokeMethod("new_ToggleToolButton_from_stock", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stockId)

	var _toggleToolButton *ToggleToolButton // out

	_toggleToolButton = wrapToggleToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _toggleToolButton
}

// Active queries a ToggleToolButton and returns its current state. Returns TRUE
// if the toggle button is pressed in and FALSE if it is raised.
//
// The function returns the following values:
//
//    - ok: TRUE if the toggle tool button is pressed in, FALSE if not.
//
func (button *ToggleToolButton) Active() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	*(**ToggleToolButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "ToggleToolButton").InvokeMethod("get_active", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetActive sets the status of the toggle tool button. Set to TRUE if you want
// the GtkToggleButton to be “pressed in”, and FALSE to raise it. This action
// causes the toggled signal to be emitted.
//
// The function takes the following parameters:
//
//    - isActive: whether button should be active.
//
func (button *ToggleToolButton) SetActive(isActive bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if isActive {
		_arg1 = C.TRUE
	}
	*(**ToggleToolButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "ToggleToolButton").InvokeMethod("set_active", args[:], nil)

	runtime.KeepAlive(button)
	runtime.KeepAlive(isActive)
}
