// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_ToggleToolButton_ConnectToggled(gpointer, guintptr);
// extern void _gotk4_gtk3_ToggleToolButtonClass_toggled(GtkToggleToolButton*);
// void _gotk4_gtk3_ToggleToolButton_virtual_toggled(void* fnptr, GtkToggleToolButton* arg0) {
//   ((void (*)(GtkToggleToolButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeToggleToolButton = coreglib.Type(C.gtk_toggle_tool_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToggleToolButton, F: marshalToggleToolButton},
	})
}

// ToggleToolButtonOverrides contains methods that are overridable.
type ToggleToolButtonOverrides struct {
	Toggled func()
}

func defaultToggleToolButtonOverrides(v *ToggleToolButton) ToggleToolButtonOverrides {
	return ToggleToolButtonOverrides{
		Toggled: v.toggled,
	}
}

// ToggleToolButton is a ToolItem that contains a toggle button.
//
// Use gtk_toggle_tool_button_new() to create a new GtkToggleToolButton.
//
//
// CSS nodes
//
// GtkToggleToolButton has a single CSS node with name togglebutton.
type ToggleToolButton struct {
	_ [0]func() // equal guard
	ToolButton
}

var (
	_ coreglib.Objector = (*ToggleToolButton)(nil)
	_ Binner            = (*ToggleToolButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ToggleToolButton, *ToggleToolButtonClass, ToggleToolButtonOverrides](
		GTypeToggleToolButton,
		initToggleToolButtonClass,
		wrapToggleToolButton,
		defaultToggleToolButtonOverrides,
	)
}

func initToggleToolButtonClass(gclass unsafe.Pointer, overrides ToggleToolButtonOverrides, classInitFunc func(*ToggleToolButtonClass)) {
	pclass := (*C.GtkToggleToolButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeToggleToolButton))))

	if overrides.Toggled != nil {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk3_ToggleToolButtonClass_toggled)
	}

	if classInitFunc != nil {
		class := (*ToggleToolButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapToggleToolButton(obj *coreglib.Object) *ToggleToolButton {
	return &ToggleToolButton{
		ToolButton: ToolButton{
			ToolItem: ToolItem{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Activatable: Activatable{
					Object: obj,
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalToggleToolButton(p uintptr) (interface{}, error) {
	return wrapToggleToolButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectToggled is emitted whenever the toggle tool button changes state.
func (button *ToggleToolButton) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_ToggleToolButton_ConnectToggled), f)
}

func (button *ToggleToolButton) toggled() {
	gclass := (*C.GtkToggleToolButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.toggled

	var _arg0 *C.GtkToggleToolButton // out

	_arg0 = (*C.GtkToggleToolButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_ToggleToolButton_virtual_toggled(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// ToggleToolButtonClass: instance of this type is always passed by reference.
type ToggleToolButtonClass struct {
	*toggleToolButtonClass
}

// toggleToolButtonClass is the struct that's finalized.
type toggleToolButtonClass struct {
	native *C.GtkToggleToolButtonClass
}

// ParentClass: parent class.
func (t *ToggleToolButtonClass) ParentClass() *ToolButtonClass {
	valptr := &t.native.parent_class
	var _v *ToolButtonClass // out
	_v = (*ToolButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
