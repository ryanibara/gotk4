// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewRadioAction creates a new RadioAction object. To add the action to a
// ActionGroup and set the accelerator for the action, call
// gtk_action_group_add_action_with_accel().
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - name: unique name for the action.
//    - label (optional) displayed in menu items and on buttons, or NULL.
//    - tooltip (optional) for this action, or NULL.
//    - stockId (optional): stock icon to display in widgets representing this
//      action, or NULL.
//    - value which gtk_radio_action_get_current_value() should return if this
//      action is selected.
//
// The function returns the following values:
//
//    - radioAction: new RadioAction.
//
func NewRadioAction(name, label, tooltip, stockId string, value int) *RadioAction {
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out
	var _arg3 *C.gchar          // out
	var _arg4 *C.gchar          // out
	var _arg5 C.gint            // out
	var _cret *C.GtkRadioAction // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	if label != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if tooltip != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if stockId != "" {
		_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
		defer C.free(unsafe.Pointer(_arg4))
	}
	_arg5 = C.gint(value)

	_cret = C.gtk_radio_action_new(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(name)
	runtime.KeepAlive(label)
	runtime.KeepAlive(tooltip)
	runtime.KeepAlive(stockId)
	runtime.KeepAlive(value)

	var _radioAction *RadioAction // out

	_radioAction = wrapRadioAction(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _radioAction
}

// CurrentValue obtains the value property of the currently active member of the
// group to which action belongs.
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - gint: value of the currently active group member.
//
func (action *RadioAction) CurrentValue() int {
	var _arg0 *C.GtkRadioAction // out
	var _cret C.gint            // in

	_arg0 = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	_cret = C.gtk_radio_action_get_current_value(_arg0)
	runtime.KeepAlive(action)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Group returns the list representing the radio group for this object. Note
// that the returned list is only valid until the next change to the group.
//
// A common way to set up a group of radio group is the following:
//
//     GSList *group = NULL;
//     GtkRadioAction *action;
//
//     while ( ...more actions to add... /)
//       {
//          action = gtk_radio_action_new (...);
//
//          gtk_radio_action_set_group (action, group);
//          group = gtk_radio_action_get_group (action);
//       }
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - sList: list representing the radio group for this object.
//
func (action *RadioAction) Group() []*RadioAction {
	var _arg0 *C.GtkRadioAction // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	_cret = C.gtk_radio_action_get_group(_arg0)
	runtime.KeepAlive(action)

	var _sList []*RadioAction // out

	_sList = make([]*RadioAction, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.GtkRadioAction)(v)
		var dst *RadioAction // out
		dst = wrapRadioAction(coreglib.Take(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// SetGroup sets the radio group for the radio action object.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - group (optional): list representing a radio group, or NULL.
//
func (action *RadioAction) SetGroup(group []*RadioAction) {
	var _arg0 *C.GtkRadioAction // out
	var _arg1 *C.GSList         // out

	_arg0 = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	if group != nil {
		for i := len(group) - 1; i >= 0; i-- {
			src := group[i]
			var dst *C.GtkRadioAction // out
			dst = (*C.GtkRadioAction)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_slist_free(_arg1)
	}

	C.gtk_radio_action_set_group(_arg0, _arg1)
	runtime.KeepAlive(action)
	runtime.KeepAlive(group)
}
