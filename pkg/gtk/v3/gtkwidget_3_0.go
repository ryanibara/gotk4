// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// CairoShouldDrawWindow: this function is supposed to be called in Widget::draw
// implementations for widgets that support multiple windows. cr must be
// untransformed from invoking of the draw function. This function will return
// TRUE if the contents of the given window are supposed to be drawn and FALSE
// otherwise. Note that when the drawing was not initiated by the windowing
// system this function will return TRUE for all windows, so you need to draw
// the bottommost window first. Also, do not use “else if” statements to check
// which window should be drawn.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - window to check. window may not be an input-only window.
//
// The function returns the following values:
//
//    - ok: TRUE if window should be drawn.
//
func CairoShouldDrawWindow(cr *cairo.Context, window gdk.Windower) bool {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gtk_cairo_should_draw_window(_arg1, _arg2)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CairoTransformToWindow transforms the given cairo context cr that from
// widget-relative coordinates to window-relative coordinates. If the widget’s
// window is not an ancestor of window, no modification will be applied.
//
// This is the inverse to the transformation GTK applies when preparing an
// expose event to be emitted with the Widget::draw signal. It is intended to
// help porting multiwindow widgets from GTK+ 2 to the rendering architecture of
// GTK+ 3.
//
// The function takes the following parameters:
//
//    - cr: cairo context to transform.
//    - widget the context is currently centered for.
//    - window to transform the context to.
//
func CairoTransformToWindow(cr *cairo.Context, widget Widgetter, window gdk.Windower) {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GtkWidget // out
	var _arg3 *C.GdkWindow // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg3 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_cairo_transform_to_window(_arg1, _arg2, _arg3)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}
