// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GTypeSeparator returns the GType for the type Separator.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeSeparator() coreglib.Type {
	gtype := coreglib.Type(C.gtk_separator_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalSeparator)
	return gtype
}

// SeparatorOverrider contains methods that are overridable.
type SeparatorOverrider interface {
}

// Separator is a horizontal or vertical separator widget, depending on the
// value of the Orientable:orientation property, used to group the widgets
// within a window. It displays a line with a shadow to make it appear sunken
// into the interface.
//
//
// CSS nodes
//
// GtkSeparator has a single CSS node with name separator. The node gets one of
// the .horizontal or .vertical style classes.
type Separator struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Separator)(nil)
	_ coreglib.Objector = (*Separator)(nil)
)

func classInitSeparatorrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSeparator(obj *coreglib.Object) *Separator {
	return &Separator{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalSeparator(p uintptr) (interface{}, error) {
	return wrapSeparator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSeparator creates a new Separator with the given orientation.
//
// The function takes the following parameters:
//
//    - orientation separatorâ€™s orientation.
//
// The function returns the following values:
//
//    - separator: new Separator.
//
func NewSeparator(orientation Orientation) *Separator {
	var _arg1 C.GtkOrientation // out
	var _cret *C.GtkWidget     // in

	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_separator_new(_arg1)
	runtime.KeepAlive(orientation)

	var _separator *Separator // out

	_separator = wrapSeparator(coreglib.Take(unsafe.Pointer(_cret)))

	return _separator
}
