// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeSeparator = coreglib.Type(C.gtk_separator_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSeparator, F: marshalSeparator},
	})
}

// SeparatorOverrider contains methods that are overridable.
type SeparatorOverrider interface {
}

// Separator is a horizontal or vertical separator widget, depending on the
// value of the Orientable:orientation property, used to group the widgets
// within a window. It displays a line with a shadow to make it appear sunken
// into the interface.
//
//
// CSS nodes
//
// GtkSeparator has a single CSS node with name separator. The node gets one of
// the .horizontal or .vertical style classes.
type Separator struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Separator)(nil)
	_ coreglib.Objector = (*Separator)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeSeparator,
		GoType:    reflect.TypeOf((*Separator)(nil)),
		InitClass: initClassSeparator,
	})
}

func initClassSeparator(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitSeparator(*SeparatorClass) }); ok {
		klass := (*SeparatorClass)(gextras.NewStructNative(gclass))
		goval.InitSeparator(klass)
	}
}

func wrapSeparator(obj *coreglib.Object) *Separator {
	return &Separator{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalSeparator(p uintptr) (interface{}, error) {
	return wrapSeparator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSeparator creates a new Separator with the given orientation.
//
// The function takes the following parameters:
//
//    - orientation separatorâ€™s orientation.
//
// The function returns the following values:
//
//    - separator: new Separator.
//
func NewSeparator(orientation Orientation) *Separator {
	var _arg1 C.GtkOrientation // out
	var _cret *C.GtkWidget     // in

	_arg1 = C.GtkOrientation(orientation)

	_cret = C.gtk_separator_new(_arg1)
	runtime.KeepAlive(orientation)

	var _separator *Separator // out

	_separator = wrapSeparator(coreglib.Take(unsafe.Pointer(_cret)))

	return _separator
}

// SeparatorClass: instance of this type is always passed by reference.
type SeparatorClass struct {
	*separatorClass
}

// separatorClass is the struct that's finalized.
type separatorClass struct {
	native *C.GtkSeparatorClass
}

func (s *SeparatorClass) ParentClass() *WidgetClass {
	valptr := &s.native.parent_class
	var v *WidgetClass // out
	v = (*WidgetClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
