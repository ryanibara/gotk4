// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GObject* _gotk4_gtk3_BuildableIface_construct_child(GtkBuildable*, GtkBuilder*, gchar*);
// extern GObject* _gotk4_gtk3_BuildableIface_get_internal_child(GtkBuildable*, GtkBuilder*, gchar*);
// extern gchar* _gotk4_gtk3_BuildableIface_get_name(GtkBuildable*);
// extern void _gotk4_gtk3_BuildableIface_add_child(GtkBuildable*, GtkBuilder*, GObject*, gchar*);
// extern void _gotk4_gtk3_BuildableIface_parser_finished(GtkBuildable*, GtkBuilder*);
// extern void _gotk4_gtk3_BuildableIface_set_buildable_property(GtkBuildable*, GtkBuilder*, gchar*, GValue*);
// extern void _gotk4_gtk3_BuildableIface_set_name(GtkBuildable*, gchar*);
import "C"

// glib.Type values for gtkbuildable.go.
var GTypeBuildable = coreglib.Type(C.gtk_buildable_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeBuildable, F: marshalBuildable},
	})
}

// BuildableOverrider contains methods that are overridable.
type BuildableOverrider interface {
	// AddChild adds a child to buildable. type is an optional string describing
	// how the child should be added.
	//
	// The function takes the following parameters:
	//
	//    - builder: Builder.
	//    - child to add.
	//    - typ (optional): kind of child or NULL.
	//
	AddChild(builder *Builder, child *coreglib.Object, typ string)
	// ConstructChild constructs a child of buildable with the name name.
	//
	// Builder calls this function if a “constructor” has been specified in the
	// UI definition.
	//
	// The function takes the following parameters:
	//
	//    - builder used to construct this object.
	//    - name of child to construct.
	//
	// The function returns the following values:
	//
	//    - object: constructed child.
	//
	ConstructChild(builder *Builder, name string) *coreglib.Object
	// InternalChild: get the internal child called childname of the buildable
	// object.
	//
	// The function takes the following parameters:
	//
	//    - builder: Builder.
	//    - childname: name of child.
	//
	// The function returns the following values:
	//
	//    - object: internal child of the buildable object.
	//
	InternalChild(builder *Builder, childname string) *coreglib.Object
	// Name gets the name of the buildable object.
	//
	// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
	// used to construct the buildable.
	//
	// The function returns the following values:
	//
	//    - utf8: name set with gtk_buildable_set_name().
	//
	Name() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI]. Note that this will be called
	// once for each time gtk_builder_add_from_file() or
	// gtk_builder_add_from_string() is called on a builder.
	//
	// The function takes the following parameters:
	//
	//    - builder: Builder.
	//
	ParserFinished(builder *Builder)
	// SetBuildableProperty sets the property name name to value on the
	// buildable object.
	//
	// The function takes the following parameters:
	//
	//    - builder: Builder.
	//    - name of property.
	//    - value of property.
	//
	SetBuildableProperty(builder *Builder, name string, value *coreglib.Value)
	// SetName sets the name of the buildable object.
	//
	// The function takes the following parameters:
	//
	//    - name to set.
	//
	SetName(name string)
}

// Buildable allows objects to extend and customize their deserialization from
// [GtkBuilder UI descriptions][BUILDER-UI]. The interface includes methods for
// setting names and properties of objects, parsing custom tags and constructing
// child objects.
//
// The GtkBuildable interface is implemented by all widgets and many of the
// non-widget objects that are provided by GTK+. The main user of this interface
// is Builder. There should be very little need for applications to call any of
// these functions directly.
//
// An object only needs to implement this interface if it needs to extend the
// Builder format or run any extra routines at deserialization time.
//
// Buildable wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Buildable struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Buildable)(nil)
)

// Buildabler describes Buildable's interface methods.
type Buildabler interface {
	coreglib.Objector

	// AddChild adds a child to buildable.
	AddChild(builder *Builder, child *coreglib.Object, typ string)
	// ConstructChild constructs a child of buildable with the name name.
	ConstructChild(builder *Builder, name string) *coreglib.Object
	// InternalChild: get the internal child called childname of the buildable
	// object.
	InternalChild(builder *Builder, childname string) *coreglib.Object
	// Name gets the name of the buildable object.
	Name() string
	// ParserFinished: called when the builder finishes the parsing of a
	// [GtkBuilder UI definition][BUILDER-UI].
	ParserFinished(builder *Builder)
	// SetBuildableProperty sets the property name name to value on the
	// buildable object.
	SetBuildableProperty(builder *Builder, name string, value *coreglib.Value)
	// SetName sets the name of the buildable object.
	SetName(name string)
}

var _ Buildabler = (*Buildable)(nil)

func ifaceInitBuildabler(gifacePtr, data C.gpointer) {
	iface := (*C.GtkBuildableIface)(unsafe.Pointer(gifacePtr))
	iface.add_child = (*[0]byte)(C._gotk4_gtk3_BuildableIface_add_child)
	iface.construct_child = (*[0]byte)(C._gotk4_gtk3_BuildableIface_construct_child)
	iface.get_internal_child = (*[0]byte)(C._gotk4_gtk3_BuildableIface_get_internal_child)
	iface.get_name = (*[0]byte)(C._gotk4_gtk3_BuildableIface_get_name)
	iface.parser_finished = (*[0]byte)(C._gotk4_gtk3_BuildableIface_parser_finished)
	iface.set_buildable_property = (*[0]byte)(C._gotk4_gtk3_BuildableIface_set_buildable_property)
	iface.set_name = (*[0]byte)(C._gotk4_gtk3_BuildableIface_set_name)
}

//export _gotk4_gtk3_BuildableIface_add_child
func _gotk4_gtk3_BuildableIface_add_child(arg0 *C.GtkBuildable, arg1 *C.GtkBuilder, arg2 *C.GObject, arg3 *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _builder *Builder       // out
	var _child *coreglib.Object // out
	var _typ string             // out

	_builder = wrapBuilder(coreglib.Take(unsafe.Pointer(arg1)))
	_child = coreglib.Take(unsafe.Pointer(arg2))
	if arg3 != nil {
		_typ = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	}

	iface.AddChild(_builder, _child, _typ)
}

//export _gotk4_gtk3_BuildableIface_construct_child
func _gotk4_gtk3_BuildableIface_construct_child(arg0 *C.GtkBuildable, arg1 *C.GtkBuilder, arg2 *C.gchar) (cret *C.GObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _builder *Builder // out
	var _name string      // out

	_builder = wrapBuilder(coreglib.Take(unsafe.Pointer(arg1)))
	_name = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	object := iface.ConstructChild(_builder, _name)

	cret = (*C.void)(unsafe.Pointer(object.Native()))
	C.g_object_ref(C.gpointer(object.Native()))

	return cret
}

//export _gotk4_gtk3_BuildableIface_get_internal_child
func _gotk4_gtk3_BuildableIface_get_internal_child(arg0 *C.GtkBuildable, arg1 *C.GtkBuilder, arg2 *C.gchar) (cret *C.GObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _builder *Builder // out
	var _childname string // out

	_builder = wrapBuilder(coreglib.Take(unsafe.Pointer(arg1)))
	_childname = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	object := iface.InternalChild(_builder, _childname)

	cret = (*C.void)(unsafe.Pointer(object.Native()))

	return cret
}

//export _gotk4_gtk3_BuildableIface_get_name
func _gotk4_gtk3_BuildableIface_get_name(arg0 *C.GtkBuildable) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	utf8 := iface.Name()

	cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	defer C.free(unsafe.Pointer(cret))

	return cret
}

//export _gotk4_gtk3_BuildableIface_parser_finished
func _gotk4_gtk3_BuildableIface_parser_finished(arg0 *C.GtkBuildable, arg1 *C.GtkBuilder) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _builder *Builder // out

	_builder = wrapBuilder(coreglib.Take(unsafe.Pointer(arg1)))

	iface.ParserFinished(_builder)
}

//export _gotk4_gtk3_BuildableIface_set_buildable_property
func _gotk4_gtk3_BuildableIface_set_buildable_property(arg0 *C.GtkBuildable, arg1 *C.GtkBuilder, arg2 *C.gchar, arg3 *C.GValue) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _builder *Builder      // out
	var _name string           // out
	var _value *coreglib.Value // out

	_builder = wrapBuilder(coreglib.Take(unsafe.Pointer(arg1)))
	_name = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_value = coreglib.ValueFromNative(unsafe.Pointer(arg3))

	iface.SetBuildableProperty(_builder, _name, _value)
}

//export _gotk4_gtk3_BuildableIface_set_name
func _gotk4_gtk3_BuildableIface_set_name(arg0 *C.GtkBuildable, arg1 *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(BuildableOverrider)

	var _name string // out

	_name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.SetName(_name)
}

func wrapBuildable(obj *coreglib.Object) *Buildable {
	return &Buildable{
		Object: obj,
	}
}

func marshalBuildable(p uintptr) (interface{}, error) {
	return wrapBuildable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddChild adds a child to buildable. type is an optional string describing how
// the child should be added.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - child to add.
//    - typ (optional): kind of child or NULL.
//
func (buildable *Buildable) AddChild(builder *Builder, child *coreglib.Object, typ string) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(child.Native()))
	if typ != "" {
		_arg3 = (*C.void)(unsafe.Pointer(C.CString(typ)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1
	*(**Builder)(unsafe.Pointer(&args[2])) = _arg2
	*(**coreglib.Object)(unsafe.Pointer(&args[3])) = _arg3

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(typ)
}

// ConstructChild constructs a child of buildable with the name name.
//
// Builder calls this function if a “constructor” has been specified in the UI
// definition.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - name of child to construct.
//
// The function returns the following values:
//
//    - object: constructed child.
//
func (buildable *Buildable) ConstructChild(builder *Builder, name string) *coreglib.Object {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1
	*(**Builder)(unsafe.Pointer(&args[2])) = _arg2

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)

	var _object *coreglib.Object // out

	_object = coreglib.AssumeOwnership(unsafe.Pointer(_cret))

	return _object
}

// InternalChild: get the internal child called childname of the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - childname: name of child.
//
// The function returns the following values:
//
//    - object: internal child of the buildable object.
//
func (buildable *Buildable) InternalChild(builder *Builder, childname string) *coreglib.Object {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(childname)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1
	*(**Builder)(unsafe.Pointer(&args[2])) = _arg2

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(childname)

	var _object *coreglib.Object // out

	_object = coreglib.Take(unsafe.Pointer(_cret))

	return _object
}

// Name gets the name of the buildable object.
//
// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
// used to construct the buildable.
//
// The function returns the following values:
//
//    - utf8: name set with gtk_buildable_set_name().
//
func (buildable *Buildable) Name() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	*(**Buildable)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(buildable)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ParserFinished: called when the builder finishes the parsing of a [GtkBuilder
// UI definition][BUILDER-UI]. Note that this will be called once for each time
// gtk_builder_add_from_file() or gtk_builder_add_from_string() is called on a
// builder.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//
func (buildable *Buildable) ParserFinished(builder *Builder) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
}

// SetBuildableProperty sets the property name name to value on the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - name of property.
//    - value of property.
//
func (buildable *Buildable) SetBuildableProperty(builder *Builder, name string, value *coreglib.Value) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.void)(unsafe.Pointer(value.Native()))
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1
	*(**Builder)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetName sets the name of the buildable object.
//
// The function takes the following parameters:
//
//    - name to set.
//
func (buildable *Buildable) SetName(name string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**Buildable)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(buildable)
	runtime.KeepAlive(name)
}
