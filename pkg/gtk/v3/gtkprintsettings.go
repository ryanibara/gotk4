// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gtk+-3.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// void _gotk4_gtk3_PrintSettingsFunc(gchar*, gchar*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_print_settings_get_type()), F: marshalPrintSettingser},
	})
}

const PRINT_SETTINGS_COLLATE = "collate"
const PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
const PRINT_SETTINGS_DITHER = "dither"
const PRINT_SETTINGS_DUPLEX = "duplex"
const PRINT_SETTINGS_FINISHINGS = "finishings"
const PRINT_SETTINGS_MEDIA_TYPE = "media-type"
const PRINT_SETTINGS_NUMBER_UP = "number-up"
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
const PRINT_SETTINGS_N_COPIES = "n-copies"
const PRINT_SETTINGS_ORIENTATION = "orientation"

// PRINT_SETTINGS_OUTPUT_BASENAME: key used by the “Print to file” printer to
// store the file name of the output without the path to the directory and the
// file extension.
const PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
const PRINT_SETTINGS_OUTPUT_BIN = "output-bin"

// PRINT_SETTINGS_OUTPUT_DIR: key used by the “Print to file” printer to store
// the directory to which the output should be written.
const PRINT_SETTINGS_OUTPUT_DIR = "output-dir"

// PRINT_SETTINGS_OUTPUT_FILE_FORMAT: key used by the “Print to file” printer to
// store the format of the output. The supported values are “PS” and “PDF”.
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"

// PRINT_SETTINGS_OUTPUT_URI: key used by the “Print to file” printer to store
// the URI to which the output should be written. GTK+ itself supports only
// “file://” URIs.
const PRINT_SETTINGS_OUTPUT_URI = "output-uri"
const PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
const PRINT_SETTINGS_PAGE_SET = "page-set"
const PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
const PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
const PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
const PRINT_SETTINGS_PRINTER = "printer"
const PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
const PRINT_SETTINGS_PRINT_PAGES = "print-pages"
const PRINT_SETTINGS_QUALITY = "quality"
const PRINT_SETTINGS_RESOLUTION = "resolution"
const PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
const PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
const PRINT_SETTINGS_REVERSE = "reverse"
const PRINT_SETTINGS_SCALE = "scale"
const PRINT_SETTINGS_USE_COLOR = "use-color"
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"

type PrintSettingsFunc func(key, value string)

//export _gotk4_gtk3_PrintSettingsFunc
func _gotk4_gtk3_PrintSettingsFunc(arg0 *C.gchar, arg1 *C.gchar, arg2 C.gpointer) {
	v := gbox.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var key string   // out
	var value string // out

	key = C.GoString((*C.gchar)(unsafe.Pointer(arg0)))
	value = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	fn := v.(PrintSettingsFunc)
	fn(key, value)
}

// PrintSettings object represents the settings of a print dialog in a
// system-independent way. The main use for this object is that once you’ve
// printed you can get a settings object that represents the settings the user
// chose, and the next time you print you can pass that object in so that the
// user doesn’t have to re-set all his settings.
//
// Its also possible to enumerate the settings so that you can easily save the
// settings for the next time your app runs, or even store them in a document.
// The predefined keys try to use shared values as much as possible so that
// moving such a document between systems still works.
//
// Printing support was added in GTK+ 2.10.
type PrintSettings struct {
	*externglib.Object
}

func wrapPrintSettings(obj *externglib.Object) *PrintSettings {
	return &PrintSettings{
		Object: obj,
	}
}

func marshalPrintSettingser(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPrintSettings(obj), nil
}

// NewPrintSettings creates a new PrintSettings object.
func NewPrintSettings() *PrintSettings {
	var _cret *C.GtkPrintSettings // in

	_cret = C.gtk_print_settings_new()

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// NewPrintSettingsFromFile reads the print settings from file_name. Returns a
// new PrintSettings object with the restored settings, or NULL if an error
// occurred. If the file could not be loaded then error is set to either a Error
// or FileError. See gtk_print_settings_to_file().
func NewPrintSettingsFromFile(fileName string) (*PrintSettings, error) {
	var _arg1 *C.gchar            // out
	var _cret *C.GtkPrintSettings // in
	var _cerr *C.GError           // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_new_from_file(_arg1, &_cerr)
	runtime.KeepAlive(fileName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _printSettings, _goerr
}

// NewPrintSettingsFromGVariant: deserialize print settings from an a{sv}
// variant in the format produced by gtk_print_settings_to_gvariant().
func NewPrintSettingsFromGVariant(variant *glib.Variant) *PrintSettings {
	var _arg1 *C.GVariant         // out
	var _cret *C.GtkPrintSettings // in

	_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant)))

	_cret = C.gtk_print_settings_new_from_gvariant(_arg1)
	runtime.KeepAlive(variant)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// NewPrintSettingsFromKeyFile reads the print settings from the group
// group_name in key_file. Returns a new PrintSettings object with the restored
// settings, or NULL if an error occurred. If the file could not be loaded then
// error is set to either a Error or FileError.
func NewPrintSettingsFromKeyFile(keyFile *glib.KeyFile, groupName string) (*PrintSettings, error) {
	var _arg1 *C.GKeyFile         // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkPrintSettings // in
	var _cerr *C.GError           // in

	_arg1 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gtk_print_settings_new_from_key_file(_arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _printSettings, _goerr
}

// Copy copies a PrintSettings object.
func (other *PrintSettings) Copy() *PrintSettings {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.GtkPrintSettings // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(other.Native()))

	_cret = C.gtk_print_settings_copy(_arg0)
	runtime.KeepAlive(other)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// Foreach calls func for each key-value pair of settings.
//
// The function takes the following parameters:
//
//    - fn: function to call.
//
func (settings *PrintSettings) Foreach(fn PrintSettingsFunc) {
	var _arg0 *C.GtkPrintSettings    // out
	var _arg1 C.GtkPrintSettingsFunc // out
	var _arg2 C.gpointer

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*[0]byte)(C._gotk4_gtk3_PrintSettingsFunc)
	_arg2 = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_arg2))

	C.gtk_print_settings_foreach(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fn)
}

// Get looks up the string value associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Get(key string) string {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_get(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Bool returns the boolean represented by the value that is associated with
// key.
//
// The string “true” represents TRUE, any other string FALSE.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Bool(key string) bool {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_get_bool(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Collate gets the value of GTK_PRINT_SETTINGS_COLLATE.
func (settings *PrintSettings) Collate() bool {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_collate(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DefaultSource gets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
func (settings *PrintSettings) DefaultSource() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_default_source(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Dither gets the value of GTK_PRINT_SETTINGS_DITHER.
func (settings *PrintSettings) Dither() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_dither(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Double returns the double value associated with key, or 0.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Double(key string) float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_get_double(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// DoubleWithDefault returns the floating point number represented by the value
// that is associated with key, or default_val if the value does not represent a
// floating point number.
//
// Floating point numbers are parsed with g_ascii_strtod().
//
// The function takes the following parameters:
//
//    - key: key.
//    - def: default value.
//
func (settings *PrintSettings) DoubleWithDefault(key string, def float64) float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gdouble           // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gdouble(def)

	_cret = C.gtk_print_settings_get_double_with_default(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(def)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Duplex gets the value of GTK_PRINT_SETTINGS_DUPLEX.
func (settings *PrintSettings) Duplex() PrintDuplex {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.GtkPrintDuplex    // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_duplex(_arg0)
	runtime.KeepAlive(settings)

	var _printDuplex PrintDuplex // out

	_printDuplex = PrintDuplex(_cret)

	return _printDuplex
}

// Finishings gets the value of GTK_PRINT_SETTINGS_FINISHINGS.
func (settings *PrintSettings) Finishings() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_finishings(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Int returns the integer value of key, or 0.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Int(key string) int {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_get_int(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IntWithDefault returns the value of key, interpreted as an integer, or the
// default value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - def: default value.
//
func (settings *PrintSettings) IntWithDefault(key string, def int) int {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gint              // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(def)

	_cret = C.gtk_print_settings_get_int_with_default(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(def)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Length returns the value associated with key, interpreted as a length. The
// returned value is converted to units.
//
// The function takes the following parameters:
//
//    - key: key.
//    - unit of the return value.
//
func (settings *PrintSettings) Length(key string, unit Unit) float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.GtkUnit           // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkUnit(unit)

	_cret = C.gtk_print_settings_get_length(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(unit)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// MediaType gets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
func (settings *PrintSettings) MediaType() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_media_type(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NCopies gets the value of GTK_PRINT_SETTINGS_N_COPIES.
func (settings *PrintSettings) NCopies() int {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_n_copies(_arg0)
	runtime.KeepAlive(settings)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NumberUp gets the value of GTK_PRINT_SETTINGS_NUMBER_UP.
func (settings *PrintSettings) NumberUp() int {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_number_up(_arg0)
	runtime.KeepAlive(settings)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NumberUpLayout gets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
func (settings *PrintSettings) NumberUpLayout() NumberUpLayout {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.GtkNumberUpLayout // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_number_up_layout(_arg0)
	runtime.KeepAlive(settings)

	var _numberUpLayout NumberUpLayout // out

	_numberUpLayout = NumberUpLayout(_cret)

	return _numberUpLayout
}

// Orientation: get the value of GTK_PRINT_SETTINGS_ORIENTATION, converted to a
// PageOrientation.
func (settings *PrintSettings) Orientation() PageOrientation {
	var _arg0 *C.GtkPrintSettings  // out
	var _cret C.GtkPageOrientation // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_orientation(_arg0)
	runtime.KeepAlive(settings)

	var _pageOrientation PageOrientation // out

	_pageOrientation = PageOrientation(_cret)

	return _pageOrientation
}

// OutputBin gets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
func (settings *PrintSettings) OutputBin() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_output_bin(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PageRanges gets the value of GTK_PRINT_SETTINGS_PAGE_RANGES.
func (settings *PrintSettings) PageRanges() []PageRange {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.GtkPageRange     // in
	var _arg1 C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_page_ranges(_arg0, &_arg1)
	runtime.KeepAlive(settings)

	var _pageRanges []PageRange // out

	defer C.free(unsafe.Pointer(_cret))
	_pageRanges = make([]PageRange, _arg1)
	copy(_pageRanges, unsafe.Slice((*PageRange)(unsafe.Pointer(_cret)), _arg1))

	return _pageRanges
}

// PageSet gets the value of GTK_PRINT_SETTINGS_PAGE_SET.
func (settings *PrintSettings) PageSet() PageSet {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.GtkPageSet        // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_page_set(_arg0)
	runtime.KeepAlive(settings)

	var _pageSet PageSet // out

	_pageSet = PageSet(_cret)

	return _pageSet
}

// PaperHeight gets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT, converted to
// unit.
//
// The function takes the following parameters:
//
//    - unit for the return value.
//
func (settings *PrintSettings) PaperHeight(unit Unit) float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkUnit           // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkUnit(unit)

	_cret = C.gtk_print_settings_get_paper_height(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(unit)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// PaperSize gets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT, converted to a
// PaperSize.
func (settings *PrintSettings) PaperSize() *PaperSize {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.GtkPaperSize     // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_paper_size(_arg0)
	runtime.KeepAlive(settings)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_paperSize)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_paper_size_free((*C.GtkPaperSize)(intern.C))
		},
	)

	return _paperSize
}

// PaperWidth gets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH, converted to
// unit.
//
// The function takes the following parameters:
//
//    - unit for the return value.
//
func (settings *PrintSettings) PaperWidth(unit Unit) float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkUnit           // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkUnit(unit)

	_cret = C.gtk_print_settings_get_paper_width(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(unit)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// PrintPages gets the value of GTK_PRINT_SETTINGS_PRINT_PAGES.
func (settings *PrintSettings) PrintPages() PrintPages {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.GtkPrintPages     // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_print_pages(_arg0)
	runtime.KeepAlive(settings)

	var _printPages PrintPages // out

	_printPages = PrintPages(_cret)

	return _printPages
}

// Printer: convenience function to obtain the value of
// GTK_PRINT_SETTINGS_PRINTER.
func (settings *PrintSettings) Printer() string {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_printer(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PrinterLpi gets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.
func (settings *PrintSettings) PrinterLpi() float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_printer_lpi(_arg0)
	runtime.KeepAlive(settings)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Quality gets the value of GTK_PRINT_SETTINGS_QUALITY.
func (settings *PrintSettings) Quality() PrintQuality {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.GtkPrintQuality   // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_quality(_arg0)
	runtime.KeepAlive(settings)

	var _printQuality PrintQuality // out

	_printQuality = PrintQuality(_cret)

	return _printQuality
}

// Resolution gets the value of GTK_PRINT_SETTINGS_RESOLUTION.
func (settings *PrintSettings) Resolution() int {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_resolution(_arg0)
	runtime.KeepAlive(settings)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ResolutionX gets the value of GTK_PRINT_SETTINGS_RESOLUTION_X.
func (settings *PrintSettings) ResolutionX() int {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_resolution_x(_arg0)
	runtime.KeepAlive(settings)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ResolutionY gets the value of GTK_PRINT_SETTINGS_RESOLUTION_Y.
func (settings *PrintSettings) ResolutionY() int {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gint              // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_resolution_y(_arg0)
	runtime.KeepAlive(settings)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Reverse gets the value of GTK_PRINT_SETTINGS_REVERSE.
func (settings *PrintSettings) Reverse() bool {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_reverse(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Scale gets the value of GTK_PRINT_SETTINGS_SCALE.
func (settings *PrintSettings) Scale() float64 {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gdouble           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_scale(_arg0)
	runtime.KeepAlive(settings)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// UseColor gets the value of GTK_PRINT_SETTINGS_USE_COLOR.
func (settings *PrintSettings) UseColor() bool {
	var _arg0 *C.GtkPrintSettings // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_get_use_color(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasKey returns TRUE, if a value is associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) HasKey(key string) bool {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_print_settings_has_key(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadFile reads the print settings from file_name. If the file could not be
// loaded then error is set to either a Error or FileError. See
// gtk_print_settings_to_file().
//
// The function takes the following parameters:
//
//    - fileName: filename to read the settings from.
//
func (settings *PrintSettings) LoadFile(fileName string) error {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_load_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LoadKeyFile reads the print settings from the group group_name in key_file.
// If the file could not be loaded then error is set to either a Error or
// FileError.
//
// The function takes the following parameters:
//
//    - keyFile to retrieve the settings from.
//    - groupName: name of the group to use, or NULL to use the default “Print
//    Settings”.
//
func (settings *PrintSettings) LoadKeyFile(keyFile *glib.KeyFile, groupName string) error {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.GKeyFile         // out
	var _arg2 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_print_settings_load_key_file(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Set associates value with key.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: string value, or NULL.
//
func (settings *PrintSettings) Set(key, value string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_print_settings_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetBool sets key to a boolean value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: boolean.
//
func (settings *PrintSettings) SetBool(key string, value bool) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gboolean          // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value {
		_arg2 = C.TRUE
	}

	C.gtk_print_settings_set_bool(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetCollate sets the value of GTK_PRINT_SETTINGS_COLLATE.
//
// The function takes the following parameters:
//
//    - collate: whether to collate the output.
//
func (settings *PrintSettings) SetCollate(collate bool) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	if collate {
		_arg1 = C.TRUE
	}

	C.gtk_print_settings_set_collate(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(collate)
}

// SetDefaultSource sets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
//
// The function takes the following parameters:
//
//    - defaultSource: default source.
//
func (settings *PrintSettings) SetDefaultSource(defaultSource string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultSource)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_default_source(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(defaultSource)
}

// SetDither sets the value of GTK_PRINT_SETTINGS_DITHER.
//
// The function takes the following parameters:
//
//    - dither: dithering that is used.
//
func (settings *PrintSettings) SetDither(dither string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(dither)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_dither(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(dither)
}

// SetDouble sets key to a double value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: double value.
//
func (settings *PrintSettings) SetDouble(key string, value float64) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gdouble           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gdouble(value)

	C.gtk_print_settings_set_double(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetDuplex sets the value of GTK_PRINT_SETTINGS_DUPLEX.
//
// The function takes the following parameters:
//
//    - duplex: PrintDuplex value.
//
func (settings *PrintSettings) SetDuplex(duplex PrintDuplex) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkPrintDuplex    // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkPrintDuplex(duplex)

	C.gtk_print_settings_set_duplex(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(duplex)
}

// SetFinishings sets the value of GTK_PRINT_SETTINGS_FINISHINGS.
//
// The function takes the following parameters:
//
//    - finishings: finishings.
//
func (settings *PrintSettings) SetFinishings(finishings string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(finishings)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_finishings(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(finishings)
}

// SetInt sets key to an integer value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: integer.
//
func (settings *PrintSettings) SetInt(key string, value int) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gint              // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(value)

	C.gtk_print_settings_set_int(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetLength associates a length in units of unit with key.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: length.
//    - unit of length.
//
func (settings *PrintSettings) SetLength(key string, value float64, unit Unit) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _arg2 C.gdouble           // out
	var _arg3 C.GtkUnit           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gdouble(value)
	_arg3 = C.GtkUnit(unit)

	C.gtk_print_settings_set_length(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
	runtime.KeepAlive(unit)
}

// SetMediaType sets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
//
// The function takes the following parameters:
//
//    - mediaType: media type.
//
func (settings *PrintSettings) SetMediaType(mediaType string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mediaType)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_media_type(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(mediaType)
}

// SetNCopies sets the value of GTK_PRINT_SETTINGS_N_COPIES.
//
// The function takes the following parameters:
//
//    - numCopies: number of copies.
//
func (settings *PrintSettings) SetNCopies(numCopies int) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gint(numCopies)

	C.gtk_print_settings_set_n_copies(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(numCopies)
}

// SetNumberUp sets the value of GTK_PRINT_SETTINGS_NUMBER_UP.
//
// The function takes the following parameters:
//
//    - numberUp: number of pages per sheet.
//
func (settings *PrintSettings) SetNumberUp(numberUp int) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gint(numberUp)

	C.gtk_print_settings_set_number_up(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(numberUp)
}

// SetNumberUpLayout sets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
//
// The function takes the following parameters:
//
//    - numberUpLayout: NumberUpLayout value.
//
func (settings *PrintSettings) SetNumberUpLayout(numberUpLayout NumberUpLayout) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkNumberUpLayout // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkNumberUpLayout(numberUpLayout)

	C.gtk_print_settings_set_number_up_layout(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(numberUpLayout)
}

// SetOrientation sets the value of GTK_PRINT_SETTINGS_ORIENTATION.
//
// The function takes the following parameters:
//
//    - orientation: page orientation.
//
func (settings *PrintSettings) SetOrientation(orientation PageOrientation) {
	var _arg0 *C.GtkPrintSettings  // out
	var _arg1 C.GtkPageOrientation // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkPageOrientation(orientation)

	C.gtk_print_settings_set_orientation(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(orientation)
}

// SetOutputBin sets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
//
// The function takes the following parameters:
//
//    - outputBin: output bin.
//
func (settings *PrintSettings) SetOutputBin(outputBin string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(outputBin)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_output_bin(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(outputBin)
}

// SetPageRanges sets the value of GTK_PRINT_SETTINGS_PAGE_RANGES.
//
// The function takes the following parameters:
//
//    - pageRanges: array of PageRanges.
//
func (settings *PrintSettings) SetPageRanges(pageRanges []PageRange) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.GtkPageRange     // out
	var _arg2 C.gint

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg2 = (C.gint)(len(pageRanges))
	if len(pageRanges) > 0 {
		_arg1 = (*C.GtkPageRange)(unsafe.Pointer(&pageRanges[0]))
	}

	C.gtk_print_settings_set_page_ranges(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(pageRanges)
}

// SetPageSet sets the value of GTK_PRINT_SETTINGS_PAGE_SET.
//
// The function takes the following parameters:
//
//    - pageSet: PageSet value.
//
func (settings *PrintSettings) SetPageSet(pageSet PageSet) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkPageSet        // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkPageSet(pageSet)

	C.gtk_print_settings_set_page_set(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(pageSet)
}

// SetPaperHeight sets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT.
//
// The function takes the following parameters:
//
//    - height: paper height.
//    - unit units of height.
//
func (settings *PrintSettings) SetPaperHeight(height float64, unit Unit) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gdouble           // out
	var _arg2 C.GtkUnit           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gdouble(height)
	_arg2 = C.GtkUnit(unit)

	C.gtk_print_settings_set_paper_height(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(height)
	runtime.KeepAlive(unit)
}

// SetPaperSize sets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT,
// GTK_PRINT_SETTINGS_PAPER_WIDTH and GTK_PRINT_SETTINGS_PAPER_HEIGHT.
//
// The function takes the following parameters:
//
//    - paperSize: paper size.
//
func (settings *PrintSettings) SetPaperSize(paperSize *PaperSize) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.GtkPaperSize     // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.GtkPaperSize)(gextras.StructNative(unsafe.Pointer(paperSize)))

	C.gtk_print_settings_set_paper_size(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(paperSize)
}

// SetPaperWidth sets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH.
//
// The function takes the following parameters:
//
//    - width: paper width.
//    - unit units of width.
//
func (settings *PrintSettings) SetPaperWidth(width float64, unit Unit) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gdouble           // out
	var _arg2 C.GtkUnit           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gdouble(width)
	_arg2 = C.GtkUnit(unit)

	C.gtk_print_settings_set_paper_width(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(width)
	runtime.KeepAlive(unit)
}

// SetPrintPages sets the value of GTK_PRINT_SETTINGS_PRINT_PAGES.
//
// The function takes the following parameters:
//
//    - pages PrintPages value.
//
func (settings *PrintSettings) SetPrintPages(pages PrintPages) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkPrintPages     // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkPrintPages(pages)

	C.gtk_print_settings_set_print_pages(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(pages)
}

// SetPrinter: convenience function to set GTK_PRINT_SETTINGS_PRINTER to
// printer.
//
// The function takes the following parameters:
//
//    - printer name.
//
func (settings *PrintSettings) SetPrinter(printer string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(printer)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_set_printer(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(printer)
}

// SetPrinterLpi sets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.
//
// The function takes the following parameters:
//
//    - lpi: resolution in lpi (lines per inch).
//
func (settings *PrintSettings) SetPrinterLpi(lpi float64) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gdouble           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gdouble(lpi)

	C.gtk_print_settings_set_printer_lpi(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(lpi)
}

// SetQuality sets the value of GTK_PRINT_SETTINGS_QUALITY.
//
// The function takes the following parameters:
//
//    - quality: PrintQuality value.
//
func (settings *PrintSettings) SetQuality(quality PrintQuality) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.GtkPrintQuality   // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.GtkPrintQuality(quality)

	C.gtk_print_settings_set_quality(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(quality)
}

// SetResolution sets the values of GTK_PRINT_SETTINGS_RESOLUTION,
// GTK_PRINT_SETTINGS_RESOLUTION_X and GTK_PRINT_SETTINGS_RESOLUTION_Y.
//
// The function takes the following parameters:
//
//    - resolution in dpi.
//
func (settings *PrintSettings) SetResolution(resolution int) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gint              // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gint(resolution)

	C.gtk_print_settings_set_resolution(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(resolution)
}

// SetResolutionXY sets the values of GTK_PRINT_SETTINGS_RESOLUTION,
// GTK_PRINT_SETTINGS_RESOLUTION_X and GTK_PRINT_SETTINGS_RESOLUTION_Y.
//
// The function takes the following parameters:
//
//    - resolutionX: horizontal resolution in dpi.
//    - resolutionY: vertical resolution in dpi.
//
func (settings *PrintSettings) SetResolutionXY(resolutionX, resolutionY int) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gint              // out
	var _arg2 C.gint              // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gint(resolutionX)
	_arg2 = C.gint(resolutionY)

	C.gtk_print_settings_set_resolution_xy(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(resolutionX)
	runtime.KeepAlive(resolutionY)
}

// SetReverse sets the value of GTK_PRINT_SETTINGS_REVERSE.
//
// The function takes the following parameters:
//
//    - reverse: whether to reverse the output.
//
func (settings *PrintSettings) SetReverse(reverse bool) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	if reverse {
		_arg1 = C.TRUE
	}

	C.gtk_print_settings_set_reverse(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(reverse)
}

// SetScale sets the value of GTK_PRINT_SETTINGS_SCALE.
//
// The function takes the following parameters:
//
//    - scale in percent.
//
func (settings *PrintSettings) SetScale(scale float64) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gdouble           // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = C.gdouble(scale)

	C.gtk_print_settings_set_scale(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(scale)
}

// SetUseColor sets the value of GTK_PRINT_SETTINGS_USE_COLOR.
//
// The function takes the following parameters:
//
//    - useColor: whether to use color.
//
func (settings *PrintSettings) SetUseColor(useColor bool) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	if useColor {
		_arg1 = C.TRUE
	}

	C.gtk_print_settings_set_use_color(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(useColor)
}

// ToFile: this function saves the print settings from settings to file_name. If
// the file could not be loaded then error is set to either a Error or
// FileError.
//
// The function takes the following parameters:
//
//    - fileName: file to save to.
//
func (settings *PrintSettings) ToFile(fileName string) error {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_to_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ToGVariant: serialize print settings to an a{sv} variant.
func (settings *PrintSettings) ToGVariant() *glib.Variant {
	var _arg0 *C.GtkPrintSettings // out
	var _cret *C.GVariant         // in

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))

	_cret = C.gtk_print_settings_to_gvariant(_arg0)
	runtime.KeepAlive(settings)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	return _variant
}

// ToKeyFile: this function adds the print settings from settings to key_file.
//
// The function takes the following parameters:
//
//    - keyFile to save the print settings to.
//    - groupName: group to add the settings to in key_file, or NULL to use the
//    default “Print Settings”.
//
func (settings *PrintSettings) ToKeyFile(keyFile *glib.KeyFile, groupName string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.GKeyFile         // out
	var _arg2 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_print_settings_to_key_file(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
}

// Unset removes any value associated with key. This has the same effect as
// setting the value to NULL.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Unset(key string) {
	var _arg0 *C.GtkPrintSettings // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.GtkPrintSettings)(unsafe.Pointer(settings.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_print_settings_unset(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
}

// PageRange: see also gtk_print_settings_set_page_ranges().
//
// An instance of this type is always passed by reference.
type PageRange struct {
	*pageRange
}

// pageRange is the struct that's finalized.
type pageRange struct {
	native *C.GtkPageRange
}

// NewPageRange creates a new PageRange instance from the given
// fields.
func NewPageRange(start, end int) PageRange {
	var f0 C.gint // out
	f0 = C.gint(start)
	var f1 C.gint // out
	f1 = C.gint(end)

	v := C.GtkPageRange{
		start: f0,
		end:   f1,
	}

	return *(*PageRange)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Start: start of page range.
func (p *PageRange) Start() int {
	var v int // out
	v = int(p.native.start)
	return v
}

// End: end of page range.
func (p *PageRange) End() int {
	var v int // out
	v = int(p.native.end)
	return v
}
