// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_PrintSettingsFunc(gchar*, gchar*, gpointer);
import "C"

// GTypePrintSettings returns the GType for the type PrintSettings.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypePrintSettings() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "PrintSettings").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalPrintSettings)
	return gtype
}

const PRINT_SETTINGS_COLLATE = "collate"
const PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
const PRINT_SETTINGS_DITHER = "dither"
const PRINT_SETTINGS_DUPLEX = "duplex"
const PRINT_SETTINGS_FINISHINGS = "finishings"
const PRINT_SETTINGS_MEDIA_TYPE = "media-type"
const PRINT_SETTINGS_NUMBER_UP = "number-up"
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
const PRINT_SETTINGS_N_COPIES = "n-copies"
const PRINT_SETTINGS_ORIENTATION = "orientation"

// PRINT_SETTINGS_OUTPUT_BASENAME: key used by the “Print to file” printer to
// store the file name of the output without the path to the directory and the
// file extension.
const PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
const PRINT_SETTINGS_OUTPUT_BIN = "output-bin"

// PRINT_SETTINGS_OUTPUT_DIR: key used by the “Print to file” printer to store
// the directory to which the output should be written.
const PRINT_SETTINGS_OUTPUT_DIR = "output-dir"

// PRINT_SETTINGS_OUTPUT_FILE_FORMAT: key used by the “Print to file” printer to
// store the format of the output. The supported values are “PS” and “PDF”.
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"

// PRINT_SETTINGS_OUTPUT_URI: key used by the “Print to file” printer to store
// the URI to which the output should be written. GTK+ itself supports only
// “file://” URIs.
const PRINT_SETTINGS_OUTPUT_URI = "output-uri"
const PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
const PRINT_SETTINGS_PAGE_SET = "page-set"
const PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
const PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
const PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
const PRINT_SETTINGS_PRINTER = "printer"
const PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
const PRINT_SETTINGS_PRINT_PAGES = "print-pages"
const PRINT_SETTINGS_QUALITY = "quality"
const PRINT_SETTINGS_RESOLUTION = "resolution"
const PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
const PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
const PRINT_SETTINGS_REVERSE = "reverse"
const PRINT_SETTINGS_SCALE = "scale"
const PRINT_SETTINGS_USE_COLOR = "use-color"
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"

type PrintSettingsFunc func(key, value string)

//export _gotk4_gtk3_PrintSettingsFunc
func _gotk4_gtk3_PrintSettingsFunc(arg1 *C.gchar, arg2 *C.gchar, arg3 C.gpointer) {
	var fn PrintSettingsFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PrintSettingsFunc)
	}

	var _key string   // out
	var _value string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_value = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	fn(_key, _value)
}

// PrintSettings object represents the settings of a print dialog in a
// system-independent way. The main use for this object is that once you’ve
// printed you can get a settings object that represents the settings the user
// chose, and the next time you print you can pass that object in so that the
// user doesn’t have to re-set all his settings.
//
// Its also possible to enumerate the settings so that you can easily save the
// settings for the next time your app runs, or even store them in a document.
// The predefined keys try to use shared values as much as possible so that
// moving such a document between systems still works.
//
// Printing support was added in GTK+ 2.10.
type PrintSettings struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*PrintSettings)(nil)
)

func wrapPrintSettings(obj *coreglib.Object) *PrintSettings {
	return &PrintSettings{
		Object: obj,
	}
}

func marshalPrintSettings(p uintptr) (interface{}, error) {
	return wrapPrintSettings(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPrintSettings creates a new PrintSettings object.
//
// The function returns the following values:
//
//    - printSettings: new PrintSettings object.
//
func NewPrintSettings() *PrintSettings {
	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("new_PrintSettings", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _printSettings
}

// NewPrintSettingsFromFile reads the print settings from file_name. Returns a
// new PrintSettings object with the restored settings, or NULL if an error
// occurred. If the file could not be loaded then error is set to either a Error
// or FileError. See gtk_print_settings_to_file().
//
// The function takes the following parameters:
//
//    - fileName: filename to read the settings from.
//
// The function returns the following values:
//
//    - printSettings: restored PrintSettings.
//
func NewPrintSettingsFromFile(fileName string) (*PrintSettings, error) {
	var _args [1]girepository.Argument

	*(**C.gchar)(unsafe.Pointer(&_args[0])) = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[0]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("new_PrintSettings_from_file", _args[:], nil)
	_cret := *(**C.GError)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fileName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _printSettings, _goerr
}

// NewPrintSettingsFromGVariant: deserialize print settings from an a{sv}
// variant in the format produced by gtk_print_settings_to_gvariant().
//
// The function takes the following parameters:
//
//    - variant: a{sv} #GVariant.
//
// The function returns the following values:
//
//    - printSettings: new PrintSettings object.
//
func NewPrintSettingsFromGVariant(variant *glib.Variant) *PrintSettings {
	var _args [1]girepository.Argument

	*(**C.GVariant)(unsafe.Pointer(&_args[0])) = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant)))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("new_PrintSettings_from_gvariant", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(variant)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _printSettings
}

// NewPrintSettingsFromKeyFile reads the print settings from the group
// group_name in key_file. Returns a new PrintSettings object with the restored
// settings, or NULL if an error occurred. If the file could not be loaded then
// error is set to either a Error or FileError.
//
// The function takes the following parameters:
//
//    - keyFile to retrieve the settings from.
//    - groupName (optional): name of the group to use, or NULL to use the
//      default “Print Settings”.
//
// The function returns the following values:
//
//    - printSettings: restored PrintSettings.
//
func NewPrintSettingsFromKeyFile(keyFile *glib.KeyFile, groupName string) (*PrintSettings, error) {
	var _args [2]girepository.Argument

	*(**C.GKeyFile)(unsafe.Pointer(&_args[0])) = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("new_PrintSettings_from_key_file", _args[:], nil)
	_cret := *(**C.GError)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _printSettings, _goerr
}

// Copy copies a PrintSettings object.
//
// The function returns the following values:
//
//    - printSettings: newly allocated copy of other.
//
func (other *PrintSettings) Copy() *PrintSettings {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(other).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("copy", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(other)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _printSettings
}

// ForEach calls func for each key-value pair of settings.
//
// The function takes the following parameters:
//
//    - fn: function to call.
//
func (settings *PrintSettings) ForEach(fn PrintSettingsFunc) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_PrintSettingsFunc)
	_args[2] = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_args[2]))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("foreach", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(fn)
}

// Get looks up the string value associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - utf8: string value for key.
//
func (settings *PrintSettings) Get(key string) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// Bool returns the boolean represented by the value that is associated with
// key.
//
// The string “true” represents TRUE, any other string FALSE.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - ok: TRUE, if key maps to a true value.
//
func (settings *PrintSettings) Bool(key string) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_bool", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Collate gets the value of GTK_PRINT_SETTINGS_COLLATE.
//
// The function returns the following values:
//
//    - ok: whether to collate the printed pages.
//
func (settings *PrintSettings) Collate() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_collate", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// DefaultSource gets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
//
// The function returns the following values:
//
//    - utf8: default source.
//
func (settings *PrintSettings) DefaultSource() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_default_source", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// Dither gets the value of GTK_PRINT_SETTINGS_DITHER.
//
// The function returns the following values:
//
//    - utf8: dithering that is used.
//
func (settings *PrintSettings) Dither() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_dither", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// Double returns the double value associated with key, or 0.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - gdouble: double value of key.
//
func (settings *PrintSettings) Double(key string) float64 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_double", _args[:], nil)
	_cret := *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// DoubleWithDefault returns the floating point number represented by the value
// that is associated with key, or default_val if the value does not represent a
// floating point number.
//
// Floating point numbers are parsed with g_ascii_strtod().
//
// The function takes the following parameters:
//
//    - key: key.
//    - def: default value.
//
// The function returns the following values:
//
//    - gdouble: floating point number associated with key.
//
func (settings *PrintSettings) DoubleWithDefault(key string, def float64) float64 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(def)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_double_with_default", _args[:], nil)
	_cret := *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(def)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// Finishings gets the value of GTK_PRINT_SETTINGS_FINISHINGS.
//
// The function returns the following values:
//
//    - utf8: finishings.
//
func (settings *PrintSettings) Finishings() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_finishings", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// Int returns the integer value of key, or 0.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - gint: integer value of key.
//
func (settings *PrintSettings) Int(key string) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_int", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// IntWithDefault returns the value of key, interpreted as an integer, or the
// default value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - def: default value.
//
// The function returns the following values:
//
//    - gint: integer value of key.
//
func (settings *PrintSettings) IntWithDefault(key string, def int32) int32 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(def)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_int_with_default", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(def)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// MediaType gets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
//
// The function returns the following values:
//
//    - utf8: media type.
//
func (settings *PrintSettings) MediaType() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_media_type", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// NCopies gets the value of GTK_PRINT_SETTINGS_N_COPIES.
//
// The function returns the following values:
//
//    - gint: number of copies to print.
//
func (settings *PrintSettings) NCopies() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_n_copies", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// NumberUp gets the value of GTK_PRINT_SETTINGS_NUMBER_UP.
//
// The function returns the following values:
//
//    - gint: number of pages per sheet.
//
func (settings *PrintSettings) NumberUp() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_number_up", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// OutputBin gets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
//
// The function returns the following values:
//
//    - utf8: output bin.
//
func (settings *PrintSettings) OutputBin() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_output_bin", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// PaperSize gets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT, converted to a
// PaperSize.
//
// The function returns the following values:
//
//    - paperSize: paper size.
//
func (settings *PrintSettings) PaperSize() *PaperSize {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_paper_size", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(gextras.NewStructNative(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_paperSize)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				var args [1]girepository.Argument
				*(*unsafe.Pointer)(unsafe.Pointer(&args[0])) = unsafe.Pointer(intern.C)
				girepository.MustFind("Gtk", "PaperSize").InvokeRecordMethod("free", args[:], nil)
			}
		},
	)

	return _paperSize
}

// Printer: convenience function to obtain the value of
// GTK_PRINT_SETTINGS_PRINTER.
//
// The function returns the following values:
//
//    - utf8: printer name.
//
func (settings *PrintSettings) Printer() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_printer", _args[:], nil)
	_cret := *(**C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_cret)))))

	return _utf8
}

// PrinterLpi gets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.
//
// The function returns the following values:
//
//    - gdouble: resolution in lpi (lines per inch).
//
func (settings *PrintSettings) PrinterLpi() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_printer_lpi", _args[:], nil)
	_cret := *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// Resolution gets the value of GTK_PRINT_SETTINGS_RESOLUTION.
//
// The function returns the following values:
//
//    - gint: resolution in dpi.
//
func (settings *PrintSettings) Resolution() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_resolution", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ResolutionX gets the value of GTK_PRINT_SETTINGS_RESOLUTION_X.
//
// The function returns the following values:
//
//    - gint: horizontal resolution in dpi.
//
func (settings *PrintSettings) ResolutionX() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_resolution_x", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ResolutionY gets the value of GTK_PRINT_SETTINGS_RESOLUTION_Y.
//
// The function returns the following values:
//
//    - gint: vertical resolution in dpi.
//
func (settings *PrintSettings) ResolutionY() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_resolution_y", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Reverse gets the value of GTK_PRINT_SETTINGS_REVERSE.
//
// The function returns the following values:
//
//    - ok: whether to reverse the order of the printed pages.
//
func (settings *PrintSettings) Reverse() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_reverse", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Scale gets the value of GTK_PRINT_SETTINGS_SCALE.
//
// The function returns the following values:
//
//    - gdouble: scale in percent.
//
func (settings *PrintSettings) Scale() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_scale", _args[:], nil)
	_cret := *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// UseColor gets the value of GTK_PRINT_SETTINGS_USE_COLOR.
//
// The function returns the following values:
//
//    - ok: whether to use color.
//
func (settings *PrintSettings) UseColor() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("get_use_color", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HasKey returns TRUE, if a value is associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - ok: TRUE, if key has a value.
//
func (settings *PrintSettings) HasKey(key string) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("has_key", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// LoadFile reads the print settings from file_name. If the file could not be
// loaded then error is set to either a Error or FileError. See
// gtk_print_settings_to_file().
//
// The function takes the following parameters:
//
//    - fileName: filename to read the settings from.
//
func (settings *PrintSettings) LoadFile(fileName string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("load_file", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _goerr
}

// LoadKeyFile reads the print settings from the group group_name in key_file.
// If the file could not be loaded then error is set to either a Error or
// FileError.
//
// The function takes the following parameters:
//
//    - keyFile to retrieve the settings from.
//    - groupName (optional): name of the group to use, or NULL to use the
//      default “Print Settings”.
//
func (settings *PrintSettings) LoadKeyFile(keyFile *glib.KeyFile, groupName string) error {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.GKeyFile)(unsafe.Pointer(&_args[1])) = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		*(**C.gchar)(unsafe.Pointer(&_args[2])) = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[2]))))
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("load_key_file", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _goerr error // out

	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _goerr
}

// Set associates value with key.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value (optional): string value, or NULL.
//
func (settings *PrintSettings) Set(key, value string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	if value != "" {
		*(**C.gchar)(unsafe.Pointer(&_args[2])) = (*C.gchar)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[2]))))
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetBool sets key to a boolean value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: boolean.
//
func (settings *PrintSettings) SetBool(key string, value bool) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	if value {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_bool", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetCollate sets the value of GTK_PRINT_SETTINGS_COLLATE.
//
// The function takes the following parameters:
//
//    - collate: whether to collate the output.
//
func (settings *PrintSettings) SetCollate(collate bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if collate {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_collate", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(collate)
}

// SetDefaultSource sets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
//
// The function takes the following parameters:
//
//    - defaultSource: default source.
//
func (settings *PrintSettings) SetDefaultSource(defaultSource string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(defaultSource)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_default_source", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(defaultSource)
}

// SetDither sets the value of GTK_PRINT_SETTINGS_DITHER.
//
// The function takes the following parameters:
//
//    - dither: dithering that is used.
//
func (settings *PrintSettings) SetDither(dither string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(dither)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_dither", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(dither)
}

// SetDouble sets key to a double value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: double value.
//
func (settings *PrintSettings) SetDouble(key string, value float64) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(value)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_double", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetFinishings sets the value of GTK_PRINT_SETTINGS_FINISHINGS.
//
// The function takes the following parameters:
//
//    - finishings: finishings.
//
func (settings *PrintSettings) SetFinishings(finishings string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(finishings)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_finishings", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(finishings)
}

// SetInt sets key to an integer value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: integer.
//
func (settings *PrintSettings) SetInt(key string, value int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(value)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_int", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetMediaType sets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
//
// The function takes the following parameters:
//
//    - mediaType: media type.
//
func (settings *PrintSettings) SetMediaType(mediaType string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(mediaType)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_media_type", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(mediaType)
}

// SetNCopies sets the value of GTK_PRINT_SETTINGS_N_COPIES.
//
// The function takes the following parameters:
//
//    - numCopies: number of copies.
//
func (settings *PrintSettings) SetNCopies(numCopies int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(numCopies)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_n_copies", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(numCopies)
}

// SetNumberUp sets the value of GTK_PRINT_SETTINGS_NUMBER_UP.
//
// The function takes the following parameters:
//
//    - numberUp: number of pages per sheet.
//
func (settings *PrintSettings) SetNumberUp(numberUp int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(numberUp)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_number_up", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(numberUp)
}

// SetOutputBin sets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
//
// The function takes the following parameters:
//
//    - outputBin: output bin.
//
func (settings *PrintSettings) SetOutputBin(outputBin string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(outputBin)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_output_bin", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(outputBin)
}

// SetPaperSize sets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT,
// GTK_PRINT_SETTINGS_PAPER_WIDTH and GTK_PRINT_SETTINGS_PAPER_HEIGHT.
//
// The function takes the following parameters:
//
//    - paperSize: paper size.
//
func (settings *PrintSettings) SetPaperSize(paperSize *PaperSize) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(paperSize)))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_paper_size", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(paperSize)
}

// SetPrinter: convenience function to set GTK_PRINT_SETTINGS_PRINTER to
// printer.
//
// The function takes the following parameters:
//
//    - printer name.
//
func (settings *PrintSettings) SetPrinter(printer string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(printer)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_printer", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(printer)
}

// SetPrinterLpi sets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.
//
// The function takes the following parameters:
//
//    - lpi: resolution in lpi (lines per inch).
//
func (settings *PrintSettings) SetPrinterLpi(lpi float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(lpi)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_printer_lpi", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(lpi)
}

// SetResolution sets the values of GTK_PRINT_SETTINGS_RESOLUTION,
// GTK_PRINT_SETTINGS_RESOLUTION_X and GTK_PRINT_SETTINGS_RESOLUTION_Y.
//
// The function takes the following parameters:
//
//    - resolution in dpi.
//
func (settings *PrintSettings) SetResolution(resolution int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(resolution)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_resolution", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(resolution)
}

// SetResolutionXY sets the values of GTK_PRINT_SETTINGS_RESOLUTION,
// GTK_PRINT_SETTINGS_RESOLUTION_X and GTK_PRINT_SETTINGS_RESOLUTION_Y.
//
// The function takes the following parameters:
//
//    - resolutionX: horizontal resolution in dpi.
//    - resolutionY: vertical resolution in dpi.
//
func (settings *PrintSettings) SetResolutionXY(resolutionX, resolutionY int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(resolutionX)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(resolutionY)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_resolution_xy", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(resolutionX)
	runtime.KeepAlive(resolutionY)
}

// SetReverse sets the value of GTK_PRINT_SETTINGS_REVERSE.
//
// The function takes the following parameters:
//
//    - reverse: whether to reverse the output.
//
func (settings *PrintSettings) SetReverse(reverse bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if reverse {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_reverse", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(reverse)
}

// SetScale sets the value of GTK_PRINT_SETTINGS_SCALE.
//
// The function takes the following parameters:
//
//    - scale in percent.
//
func (settings *PrintSettings) SetScale(scale float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(scale)

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_scale", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(scale)
}

// SetUseColor sets the value of GTK_PRINT_SETTINGS_USE_COLOR.
//
// The function takes the following parameters:
//
//    - useColor: whether to use color.
//
func (settings *PrintSettings) SetUseColor(useColor bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if useColor {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("set_use_color", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(useColor)
}

// ToFile: this function saves the print settings from settings to file_name. If
// the file could not be loaded then error is set to either a Error or
// FileError.
//
// The function takes the following parameters:
//
//    - fileName: file to save to.
//
func (settings *PrintSettings) ToFile(fileName string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("to_file", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _goerr
}

// ToGVariant: serialize print settings to an a{sv} variant.
//
// The function returns the following values:
//
//    - variant: new, floating, #GVariant.
//
func (settings *PrintSettings) ToGVariant() *glib.Variant {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_gret := _info.InvokeClassMethod("to_gvariant", _args[:], nil)
	_cret := *(**C.GVariant)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(*(**C.GVariant)(unsafe.Pointer(&_cret)))))
	C.g_variant_ref(*(**C.GVariant)(unsafe.Pointer(&_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _variant
}

// ToKeyFile: this function adds the print settings from settings to key_file.
//
// The function takes the following parameters:
//
//    - keyFile to save the print settings to.
//    - groupName (optional): group to add the settings to in key_file, or NULL
//      to use the default “Print Settings”.
//
func (settings *PrintSettings) ToKeyFile(keyFile *glib.KeyFile, groupName string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.GKeyFile)(unsafe.Pointer(&_args[1])) = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		*(**C.gchar)(unsafe.Pointer(&_args[2])) = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[2]))))
	}

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("to_key_file", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
}

// Unset removes any value associated with key. This has the same effect as
// setting the value to NULL.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Unset(key string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**C.gchar)(unsafe.Pointer(&_args[1])) = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[1]))))

	_info := girepository.MustFind("Gtk", "PrintSettings")
	_info.InvokeClassMethod("unset", _args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
}

// PageRange: see also gtk_print_settings_set_page_ranges().
//
// An instance of this type is always passed by reference.
type PageRange struct {
	*pageRange
}

// pageRange is the struct that's finalized.
type pageRange struct {
	native unsafe.Pointer
}

// Start: start of page range.
func (p *PageRange) Start() int32 {
	offset := girepository.MustFind("Gtk", "PageRange").StructFieldOffset("start")
	valptr := (*uintptr)(unsafe.Add(p.native, offset))
	var v int32 // out
	v = int32(*(*C.gint)(unsafe.Pointer(&*valptr)))
	return v
}

// End: end of page range.
func (p *PageRange) End() int32 {
	offset := girepository.MustFind("Gtk", "PageRange").StructFieldOffset("end")
	valptr := (*uintptr)(unsafe.Add(p.native, offset))
	var v int32 // out
	v = int32(*(*C.gint)(unsafe.Pointer(&*valptr)))
	return v
}

// Start: start of page range.
func (p *PageRange) SetStart(start int32) {
	offset := girepository.MustFind("Gtk", "PageRange").StructFieldOffset("start")
	valptr := (*uintptr)(unsafe.Add(p.native, offset))
	*(*C.gint)(unsafe.Pointer(&*valptr)) = C.gint(start)
}

// End: end of page range.
func (p *PageRange) SetEnd(end int32) {
	offset := girepository.MustFind("Gtk", "PageRange").StructFieldOffset("end")
	valptr := (*uintptr)(unsafe.Add(p.native, offset))
	*(*C.gint)(unsafe.Pointer(&*valptr)) = C.gint(end)
}
