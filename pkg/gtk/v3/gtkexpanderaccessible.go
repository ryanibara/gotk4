// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeExpanderAccessible = coreglib.Type(C.gtk_expander_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeExpanderAccessible, F: marshalExpanderAccessible},
	})
}

// ExpanderAccessibleOverrider contains methods that are overridable.
type ExpanderAccessibleOverrider interface {
}

type ExpanderAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible

	atk.Action
}

var (
	_ coreglib.Objector = (*ExpanderAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeExpanderAccessible,
		GoType:    reflect.TypeOf((*ExpanderAccessible)(nil)),
		InitClass: initClassExpanderAccessible,
	})
}

func initClassExpanderAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitExpanderAccessible(*ExpanderAccessibleClass)
	}); ok {
		klass := (*ExpanderAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitExpanderAccessible(klass)
	}
}

func wrapExpanderAccessible(obj *coreglib.Object) *ExpanderAccessible {
	return &ExpanderAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
		Action: atk.Action{
			Object: obj,
		},
	}
}

func marshalExpanderAccessible(p uintptr) (interface{}, error) {
	return wrapExpanderAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ExpanderAccessibleClass: instance of this type is always passed by reference.
type ExpanderAccessibleClass struct {
	*expanderAccessibleClass
}

// expanderAccessibleClass is the struct that's finalized.
type expanderAccessibleClass struct {
	native *C.GtkExpanderAccessibleClass
}

func (e *ExpanderAccessibleClass) ParentClass() *ContainerAccessibleClass {
	valptr := &e.native.parent_class
	var v *ContainerAccessibleClass // out
	v = (*ContainerAccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
