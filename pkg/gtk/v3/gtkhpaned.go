// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GTypeHPaned returns the GType for the type HPaned.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeHPaned() coreglib.Type {
	gtype := coreglib.Type(C.gtk_hpaned_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalHPaned)
	return gtype
}

// HPanedOverrider contains methods that are overridable.
type HPanedOverrider interface {
}

// HPaned widget is a container widget with two children arranged horizontally.
// The division between the two panes is adjustable by the user by dragging a
// handle. See Paned for details.
//
// GtkHPaned has been deprecated, use Paned instead.
type HPaned struct {
	_ [0]func() // equal guard
	Paned
}

var (
	_ Containerer       = (*HPaned)(nil)
	_ coreglib.Objector = (*HPaned)(nil)
)

func classInitHPanedder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapHPaned(obj *coreglib.Object) *HPaned {
	return &HPaned{
		Paned: Paned{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalHPaned(p uintptr) (interface{}, error) {
	return wrapHPaned(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewHPaned: create a new HPaned
//
// Deprecated: Use gtk_paned_new() with GTK_ORIENTATION_HORIZONTAL instead.
//
// The function returns the following values:
//
//    - hPaned: new HPaned.
//
func NewHPaned() *HPaned {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_hpaned_new()

	var _hPaned *HPaned // out

	_hPaned = wrapHPaned(coreglib.Take(unsafe.Pointer(_cret)))

	return _hPaned
}
