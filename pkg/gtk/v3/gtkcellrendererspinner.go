// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeCellRendererSpinner = coreglib.Type(C.gtk_cell_renderer_spinner_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellRendererSpinner, F: marshalCellRendererSpinner},
	})
}

// CellRendererSpinnerOverrider contains methods that are overridable.
type CellRendererSpinnerOverrider interface {
}

// CellRendererSpinner renders a spinning animation in a cell, very similar to
// Spinner. It can often be used as an alternative to a CellRendererProgress for
// displaying indefinite activity, instead of actual progress.
//
// To start the animation in a cell, set the CellRendererSpinner:active property
// to TRUE and increment the CellRendererSpinner:pulse property at regular
// intervals. The usual way to set the cell renderer properties for each cell is
// to bind them to columns in your tree model using e.g.
// gtk_tree_view_column_add_attribute().
type CellRendererSpinner struct {
	_ [0]func() // equal guard
	CellRenderer
}

var (
	_ CellRendererer = (*CellRendererSpinner)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeCellRendererSpinner,
		GoType:    reflect.TypeOf((*CellRendererSpinner)(nil)),
		InitClass: initClassCellRendererSpinner,
	})
}

func initClassCellRendererSpinner(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitCellRendererSpinner(*CellRendererSpinnerClass)
	}); ok {
		klass := (*CellRendererSpinnerClass)(gextras.NewStructNative(gclass))
		goval.InitCellRendererSpinner(klass)
	}
}

func wrapCellRendererSpinner(obj *coreglib.Object) *CellRendererSpinner {
	return &CellRendererSpinner{
		CellRenderer: CellRenderer{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalCellRendererSpinner(p uintptr) (interface{}, error) {
	return wrapCellRendererSpinner(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCellRendererSpinner returns a new cell renderer which will show a spinner
// to indicate activity.
//
// The function returns the following values:
//
//    - cellRendererSpinner: new CellRenderer.
//
func NewCellRendererSpinner() *CellRendererSpinner {
	var _cret *C.GtkCellRenderer // in

	_cret = C.gtk_cell_renderer_spinner_new()

	var _cellRendererSpinner *CellRendererSpinner // out

	_cellRendererSpinner = wrapCellRendererSpinner(coreglib.Take(unsafe.Pointer(_cret)))

	return _cellRendererSpinner
}

// CellRendererSpinnerClass: instance of this type is always passed by
// reference.
type CellRendererSpinnerClass struct {
	*cellRendererSpinnerClass
}

// cellRendererSpinnerClass is the struct that's finalized.
type cellRendererSpinnerClass struct {
	native *C.GtkCellRendererSpinnerClass
}

func (c *CellRendererSpinnerClass) ParentClass() *CellRendererClass {
	valptr := &c.native.parent_class
	var v *CellRendererClass // out
	v = (*CellRendererClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
