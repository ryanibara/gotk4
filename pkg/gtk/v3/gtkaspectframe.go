// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeAspectFrame returns the GType for the type AspectFrame.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeAspectFrame() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "AspectFrame").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalAspectFrame)
	return gtype
}

// AspectFrameOverrider contains methods that are overridable.
type AspectFrameOverrider interface {
}

// AspectFrame is useful when you want pack a widget so that it can resize but
// always retains the same aspect ratio. For instance, one might be drawing a
// small preview of a larger image. AspectFrame derives from Frame, so it can
// draw a label and a frame around the child. The frame will be “shrink-wrapped”
// to the size of the child.
//
//
// CSS nodes
//
// GtkAspectFrame uses a CSS node with name frame.
type AspectFrame struct {
	_ [0]func() // equal guard
	Frame
}

var (
	_ Binner = (*AspectFrame)(nil)
)

func classInitAspectFramer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapAspectFrame(obj *coreglib.Object) *AspectFrame {
	return &AspectFrame{
		Frame: Frame{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalAspectFrame(p uintptr) (interface{}, error) {
	return wrapAspectFrame(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewAspectFrame: create a new AspectFrame.
//
// The function takes the following parameters:
//
//    - label (optional): label text.
//    - xalign: horizontal alignment of the child within the allocation of the
//      AspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned).
//    - yalign: vertical alignment of the child within the allocation of the
//      AspectFrame. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
//    - ratio: desired aspect ratio.
//    - obeyChild: if TRUE, ratio is ignored, and the aspect ratio is taken from
//      the requistion of the child.
//
// The function returns the following values:
//
//    - aspectFrame: new AspectFrame.
//
func NewAspectFrame(label string, xalign, yalign, ratio float32, obeyChild bool) *AspectFrame {
	var _args [5]girepository.Argument

	if label != "" {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_args[0]))
	}
	*(*C.gfloat)(unsafe.Pointer(&_args[1])) = C.gfloat(xalign)
	*(*C.gfloat)(unsafe.Pointer(&_args[2])) = C.gfloat(yalign)
	*(*C.gfloat)(unsafe.Pointer(&_args[3])) = C.gfloat(ratio)
	if obeyChild {
		*(*C.gboolean)(unsafe.Pointer(&_args[4])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "AspectFrame")
	_gret := _info.InvokeClassMethod("new_AspectFrame", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(label)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
	runtime.KeepAlive(ratio)
	runtime.KeepAlive(obeyChild)

	var _aspectFrame *AspectFrame // out

	_aspectFrame = wrapAspectFrame(coreglib.Take(unsafe.Pointer(_cret)))

	return _aspectFrame
}

// Set parameters for an existing AspectFrame.
//
// The function takes the following parameters:
//
//    - xalign: horizontal alignment of the child within the allocation of the
//      AspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned).
//    - yalign: vertical alignment of the child within the allocation of the
//      AspectFrame. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
//    - ratio: desired aspect ratio.
//    - obeyChild: if TRUE, ratio is ignored, and the aspect ratio is taken from
//      the requistion of the child.
//
func (aspectFrame *AspectFrame) Set(xalign, yalign, ratio float32, obeyChild bool) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(aspectFrame).Native()))
	*(*C.gfloat)(unsafe.Pointer(&_args[1])) = C.gfloat(xalign)
	*(*C.gfloat)(unsafe.Pointer(&_args[2])) = C.gfloat(yalign)
	*(*C.gfloat)(unsafe.Pointer(&_args[3])) = C.gfloat(ratio)
	if obeyChild {
		*(*C.gboolean)(unsafe.Pointer(&_args[4])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "AspectFrame")
	_info.InvokeClassMethod("set", _args[:], nil)

	runtime.KeepAlive(aspectFrame)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
	runtime.KeepAlive(ratio)
	runtime.KeepAlive(obeyChild)
}
