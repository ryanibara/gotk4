// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Fullscreen asks to place window in the fullscreen state. Note that you
// shouldn’t assume the window is definitely full screen afterward, because
// other entities (e.g. the user or [window manager][gtk-X11-arch]) could
// unfullscreen it again, and not all window managers honor requests to
// fullscreen windows. But normally the window will end up fullscreen. Just
// don’t write code that crashes if not.
//
// You can track the fullscreen state via the “window-state-event” signal on
// Widget.
func (window *Window) Fullscreen() {
	var _arg0 *C.GtkWindow // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_window_fullscreen(_arg0)
	runtime.KeepAlive(window)
}

// Screen returns the Screen associated with window.
//
// The function returns the following values:
//
//    - screen: Screen.
//
func (window *Window) Screen() *gdk.Screen {
	var _arg0 *C.GtkWindow // out
	var _cret *C.GdkScreen // in

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gtk_window_get_screen(_arg0)
	runtime.KeepAlive(window)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// SkipPagerHint gets the value set by gtk_window_set_skip_pager_hint().
//
// The function returns the following values:
//
//    - ok: TRUE if window shouldn’t be in pager.
//
func (window *Window) SkipPagerHint() bool {
	var _arg0 *C.GtkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gtk_window_get_skip_pager_hint(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SkipTaskbarHint gets the value set by gtk_window_set_skip_taskbar_hint().
//
// The function returns the following values:
//
//    - ok: TRUE if window shouldn’t be in taskbar.
//
func (window *Window) SkipTaskbarHint() bool {
	var _arg0 *C.GtkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gtk_window_get_skip_taskbar_hint(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetIconFromFile sets the icon for window. Warns on failure if err is NULL.
//
// This function is equivalent to calling gtk_window_set_icon() with a pixbuf
// created by loading the image from filename.
//
// The function takes the following parameters:
//
//    - filename: location of icon file.
//
func (window *Window) SetIconFromFile(filename string) error {
	var _arg0 *C.GtkWindow // out
	var _arg1 *C.gchar     // out
	var _cerr *C.GError    // in

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_window_set_icon_from_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(window)
	runtime.KeepAlive(filename)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetScreen sets the Screen where the window is displayed; if the window is
// already mapped, it will be unmapped, and then remapped on the new screen.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func (window *Window) SetScreen(screen *gdk.Screen) {
	var _arg0 *C.GtkWindow // out
	var _arg1 *C.GdkScreen // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	C.gtk_window_set_screen(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(screen)
}

// SetSkipPagerHint windows may set a hint asking the desktop environment not to
// display the window in the pager. This function sets this hint. (A "pager" is
// any desktop navigation tool such as a workspace switcher that displays a
// thumbnail representation of the windows on the screen.).
//
// The function takes the following parameters:
//
//    - setting: TRUE to keep this window from appearing in the pager.
//
func (window *Window) SetSkipPagerHint(setting bool) {
	var _arg0 *C.GtkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_window_set_skip_pager_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(setting)
}

// SetSkipTaskbarHint windows may set a hint asking the desktop environment not
// to display the window in the task bar. This function sets this hint.
//
// The function takes the following parameters:
//
//    - setting: TRUE to keep this window from appearing in the task bar.
//
func (window *Window) SetSkipTaskbarHint(setting bool) {
	var _arg0 *C.GtkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_window_set_skip_taskbar_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(setting)
}

// Unfullscreen asks to toggle off the fullscreen state for window. Note that
// you shouldn’t assume the window is definitely not full screen afterward,
// because other entities (e.g. the user or [window manager][gtk-X11-arch])
// could fullscreen it again, and not all window managers honor requests to
// unfullscreen windows. But normally the window will end up restored to its
// normal state. Just don’t write code that crashes if not.
//
// You can track the fullscreen state via the “window-state-event” signal on
// Widget.
func (window *Window) Unfullscreen() {
	var _arg0 *C.GtkWindow // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_window_unfullscreen(_arg0)
	runtime.KeepAlive(window)
}

// WindowSetAutoStartupNotification: by default, after showing the first Window,
// GTK+ calls gdk_notify_startup_complete(). Call this function to disable the
// automatic startup notification. You might do this if your first window is a
// splash screen, and you want to delay notification until after your real main
// window has been shown, for example.
//
// In that example, you would disable startup notification temporarily, show
// your splash screen, then re-enable it so that showing the main window would
// automatically result in notification.
//
// The function takes the following parameters:
//
//    - setting: TRUE to automatically do startup notification.
//
func WindowSetAutoStartupNotification(setting bool) {
	var _arg1 C.gboolean // out

	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_window_set_auto_startup_notification(_arg1)
	runtime.KeepAlive(setting)
}

// WindowSetDefaultIconFromFile sets an icon to be used as fallback for windows
// that haven't had gtk_window_set_icon_list() called on them from a file on
// disk. Warns on failure if err is NULL.
//
// The function takes the following parameters:
//
//    - filename: location of icon file.
//
func WindowSetDefaultIconFromFile(filename string) error {
	var _arg1 *C.gchar  // out
	var _cerr *C.GError // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_window_set_default_icon_from_file(_arg1, &_cerr)
	runtime.KeepAlive(filename)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
