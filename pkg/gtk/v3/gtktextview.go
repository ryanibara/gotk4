// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_TextViewClass_backspace(void*);
// extern void _gotk4_gtk3_TextViewClass_copy_clipboard(void*);
// extern void _gotk4_gtk3_TextViewClass_cut_clipboard(void*);
// extern void _gotk4_gtk3_TextViewClass_insert_at_cursor(void*, void*);
// extern void _gotk4_gtk3_TextViewClass_insert_emoji(void*);
// extern void _gotk4_gtk3_TextViewClass_paste_clipboard(void*);
// extern void _gotk4_gtk3_TextViewClass_populate_popup(void*, void*);
// extern void _gotk4_gtk3_TextViewClass_set_anchor(void*);
// extern void _gotk4_gtk3_TextViewClass_toggle_overwrite(void*);
// extern void _gotk4_gtk3_TextView_ConnectBackspace(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectCopyClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectCutClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectInsertAtCursor(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectInsertEmoji(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPasteClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPopulatePopup(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPreeditChanged(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectSelectAll(gpointer, gboolean, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectSetAnchor(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectToggleCursorVisible(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectToggleOverwrite(gpointer, guintptr);
import "C"

// GTypeTextExtendSelection returns the GType for the type TextExtendSelection.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTextExtendSelection() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TextExtendSelection").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTextExtendSelection)
	return gtype
}

// GTypeTextViewLayer returns the GType for the type TextViewLayer.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTextViewLayer() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TextViewLayer").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTextViewLayer)
	return gtype
}

// GTypeTextWindowType returns the GType for the type TextWindowType.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTextWindowType() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TextWindowType").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTextWindowType)
	return gtype
}

// GTypeTextView returns the GType for the type TextView.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTextView() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TextView").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTextView)
	return gtype
}

// TEXT_VIEW_PRIORITY_VALIDATE: priority at which the text view validates
// onscreen lines in an idle job in the background.
const TEXT_VIEW_PRIORITY_VALIDATE = 125

// TextExtendSelection: granularity types that extend the text selection. Use
// the TextView::extend-selection signal to customize the selection.
type TextExtendSelection C.gint

const (
	// TextExtendSelectionWord selects the current word. It is triggered by a
	// double-click for example.
	TextExtendSelectionWord TextExtendSelection = iota
	// TextExtendSelectionLine selects the current line. It is triggered by a
	// triple-click for example.
	TextExtendSelectionLine
)

func marshalTextExtendSelection(p uintptr) (interface{}, error) {
	return TextExtendSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextExtendSelection.
func (t TextExtendSelection) String() string {
	switch t {
	case TextExtendSelectionWord:
		return "Word"
	case TextExtendSelectionLine:
		return "Line"
	default:
		return fmt.Sprintf("TextExtendSelection(%d)", t)
	}
}

// TextViewLayer: used to reference the layers of TextView for the purpose of
// customized drawing with the ::draw_layer vfunc.
type TextViewLayer C.gint

const (
	// TextViewLayerBelow: old deprecated layer, use
	// GTK_TEXT_VIEW_LAYER_BELOW_TEXT instead.
	TextViewLayerBelow TextViewLayer = iota
	// TextViewLayerAbove: old deprecated layer, use
	// GTK_TEXT_VIEW_LAYER_ABOVE_TEXT instead.
	TextViewLayerAbove
	// TextViewLayerBelowText: layer rendered below the text (but above the
	// background). Since: 3.20.
	TextViewLayerBelowText
	// TextViewLayerAboveText: layer rendered above the text. Since: 3.20.
	TextViewLayerAboveText
)

func marshalTextViewLayer(p uintptr) (interface{}, error) {
	return TextViewLayer(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextViewLayer.
func (t TextViewLayer) String() string {
	switch t {
	case TextViewLayerBelow:
		return "Below"
	case TextViewLayerAbove:
		return "Above"
	case TextViewLayerBelowText:
		return "BelowText"
	case TextViewLayerAboveText:
		return "AboveText"
	default:
		return fmt.Sprintf("TextViewLayer(%d)", t)
	}
}

// TextWindowType: used to reference the parts of TextView.
type TextWindowType C.gint

const (
	// TextWindowPrivate: invalid value, used as a marker.
	TextWindowPrivate TextWindowType = iota
	// TextWindowWidget: window that floats over scrolling areas.
	TextWindowWidget
	// TextWindowText: scrollable text window.
	TextWindowText
	// TextWindowLeft: left side border window.
	TextWindowLeft
	// TextWindowRight: right side border window.
	TextWindowRight
	// TextWindowTop: top border window.
	TextWindowTop
	// TextWindowBottom: bottom border window.
	TextWindowBottom
)

func marshalTextWindowType(p uintptr) (interface{}, error) {
	return TextWindowType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextWindowType.
func (t TextWindowType) String() string {
	switch t {
	case TextWindowPrivate:
		return "Private"
	case TextWindowWidget:
		return "Widget"
	case TextWindowText:
		return "Text"
	case TextWindowLeft:
		return "Left"
	case TextWindowRight:
		return "Right"
	case TextWindowTop:
		return "Top"
	case TextWindowBottom:
		return "Bottom"
	default:
		return fmt.Sprintf("TextWindowType(%d)", t)
	}
}

// TextViewOverrider contains methods that are overridable.
type TextViewOverrider interface {
	Backspace()
	CopyClipboard()
	CutClipboard()
	// The function takes the following parameters:
	//
	InsertAtCursor(str string)
	InsertEmoji()
	PasteClipboard()
	// The function takes the following parameters:
	//
	PopulatePopup(popup Widgetter)
	SetAnchor()
	ToggleOverwrite()
}

// TextView: you may wish to begin by reading the [text widget conceptual
// overview][TextWidget] which gives an overview of all the objects and data
// types related to the text widget and how they work together.
//
// CSS nodes
//
//    textview.view
//    ├── border.top
//    ├── border.left
//    ├── text
//    │   ╰── [selection]
//    ├── border.right
//    ├── border.bottom
//    ╰── [window.popup]
//
// GtkTextView has a main css node with name textview and style class .view, and
// subnodes for each of the border windows, and the main text area, with names
// border and text, respectively. The border nodes each get one of the style
// classes .left, .right, .top or .bottom.
//
// A node representing the selection will appear below the text node.
//
// If a context menu is opened, the window node will appear as a subnode of the
// main node.
type TextView struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Scrollable
}

var (
	_ Containerer       = (*TextView)(nil)
	_ coreglib.Objector = (*TextView)(nil)
)

func classInitTextViewer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "TextViewClass")

	if _, ok := goval.(interface{ Backspace() }); ok {
		o := pclass.StructFieldOffset("backspace")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_backspace)
	}

	if _, ok := goval.(interface{ CopyClipboard() }); ok {
		o := pclass.StructFieldOffset("copy_clipboard")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_copy_clipboard)
	}

	if _, ok := goval.(interface{ CutClipboard() }); ok {
		o := pclass.StructFieldOffset("cut_clipboard")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_cut_clipboard)
	}

	if _, ok := goval.(interface{ InsertAtCursor(str string) }); ok {
		o := pclass.StructFieldOffset("insert_at_cursor")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_insert_at_cursor)
	}

	if _, ok := goval.(interface{ InsertEmoji() }); ok {
		o := pclass.StructFieldOffset("insert_emoji")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_insert_emoji)
	}

	if _, ok := goval.(interface{ PasteClipboard() }); ok {
		o := pclass.StructFieldOffset("paste_clipboard")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_paste_clipboard)
	}

	if _, ok := goval.(interface{ PopulatePopup(popup Widgetter) }); ok {
		o := pclass.StructFieldOffset("populate_popup")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_populate_popup)
	}

	if _, ok := goval.(interface{ SetAnchor() }); ok {
		o := pclass.StructFieldOffset("set_anchor")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_set_anchor)
	}

	if _, ok := goval.(interface{ ToggleOverwrite() }); ok {
		o := pclass.StructFieldOffset("toggle_overwrite")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_TextViewClass_toggle_overwrite)
	}
}

//export _gotk4_gtk3_TextViewClass_backspace
func _gotk4_gtk3_TextViewClass_backspace(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Backspace() })

	iface.Backspace()
}

//export _gotk4_gtk3_TextViewClass_copy_clipboard
func _gotk4_gtk3_TextViewClass_copy_clipboard(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CopyClipboard() })

	iface.CopyClipboard()
}

//export _gotk4_gtk3_TextViewClass_cut_clipboard
func _gotk4_gtk3_TextViewClass_cut_clipboard(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CutClipboard() })

	iface.CutClipboard()
}

//export _gotk4_gtk3_TextViewClass_insert_at_cursor
func _gotk4_gtk3_TextViewClass_insert_at_cursor(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ InsertAtCursor(str string) })

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.InsertAtCursor(_str)
}

//export _gotk4_gtk3_TextViewClass_insert_emoji
func _gotk4_gtk3_TextViewClass_insert_emoji(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ InsertEmoji() })

	iface.InsertEmoji()
}

//export _gotk4_gtk3_TextViewClass_paste_clipboard
func _gotk4_gtk3_TextViewClass_paste_clipboard(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PasteClipboard() })

	iface.PasteClipboard()
}

//export _gotk4_gtk3_TextViewClass_populate_popup
func _gotk4_gtk3_TextViewClass_populate_popup(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PopulatePopup(popup Widgetter) })

	var _popup Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_popup = rv
	}

	iface.PopulatePopup(_popup)
}

//export _gotk4_gtk3_TextViewClass_set_anchor
func _gotk4_gtk3_TextViewClass_set_anchor(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetAnchor() })

	iface.SetAnchor()
}

//export _gotk4_gtk3_TextViewClass_toggle_overwrite
func _gotk4_gtk3_TextViewClass_toggle_overwrite(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ToggleOverwrite() })

	iface.ToggleOverwrite()
}

func wrapTextView(obj *coreglib.Object) *TextView {
	return &TextView{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalTextView(p uintptr) (interface{}, error) {
	return wrapTextView(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_TextView_ConnectBackspace
func _gotk4_gtk3_TextView_ConnectBackspace(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectBackspace signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user asks for it.
//
// The default bindings for this signal are Backspace and Shift-Backspace.
func (textView *TextView) ConnectBackspace(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "backspace", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectBackspace), f)
}

//export _gotk4_gtk3_TextView_ConnectCopyClipboard
func _gotk4_gtk3_TextView_ConnectCopyClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCopyClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to copy the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-c and Ctrl-Insert.
func (textView *TextView) ConnectCopyClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "copy-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectCopyClipboard), f)
}

//export _gotk4_gtk3_TextView_ConnectCutClipboard
func _gotk4_gtk3_TextView_ConnectCutClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCutClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to cut the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-x and Shift-Delete.
func (textView *TextView) ConnectCutClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "cut-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectCutClipboard), f)
}

//export _gotk4_gtk3_TextView_ConnectInsertAtCursor
func _gotk4_gtk3_TextView_ConnectInsertAtCursor(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(str string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(str string))
	}

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_str)
}

// ConnectInsertAtCursor signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user initiates the insertion of a fixed string at the
// cursor.
//
// This signal has no default bindings.
func (textView *TextView) ConnectInsertAtCursor(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "insert-at-cursor", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectInsertAtCursor), f)
}

//export _gotk4_gtk3_TextView_ConnectInsertEmoji
func _gotk4_gtk3_TextView_ConnectInsertEmoji(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectInsertEmoji signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to present the Emoji chooser for the text_view.
//
// The default bindings for this signal are Ctrl-. and Ctrl-;.
func (textView *TextView) ConnectInsertEmoji(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "insert-emoji", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectInsertEmoji), f)
}

//export _gotk4_gtk3_TextView_ConnectPasteClipboard
func _gotk4_gtk3_TextView_ConnectPasteClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPasteClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to paste the contents of the clipboard into the text view.
//
// The default bindings for this signal are Ctrl-v and Shift-Insert.
func (textView *TextView) ConnectPasteClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "paste-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPasteClipboard), f)
}

//export _gotk4_gtk3_TextView_ConnectPopulatePopup
func _gotk4_gtk3_TextView_ConnectPopulatePopup(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(popup Widgetter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(popup Widgetter))
	}

	var _popup Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_popup = rv
	}

	f(_popup)
}

// ConnectPopulatePopup signal gets emitted before showing the context menu of
// the text view.
//
// If you need to add items to the context menu, connect to this signal and
// append your items to the popup, which will be a Menu in this case.
//
// If TextView:populate-all is TRUE, this signal will also be emitted to
// populate touch popups. In this case, popup will be a different container,
// e.g. a Toolbar.
//
// The signal handler should not make assumptions about the type of widget, but
// check whether popup is a Menu or Toolbar or another kind of container.
func (textView *TextView) ConnectPopulatePopup(f func(popup Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPopulatePopup), f)
}

//export _gotk4_gtk3_TextView_ConnectPreeditChanged
func _gotk4_gtk3_TextView_ConnectPreeditChanged(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(preedit string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(preedit string))
	}

	var _preedit string // out

	_preedit = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_preedit)
}

// ConnectPreeditChanged: if an input method is used, the typed text will not
// immediately be committed to the buffer. So if you are interested in the text,
// connect to this signal.
//
// This signal is only emitted if the text at the given position is actually
// editable.
func (textView *TextView) ConnectPreeditChanged(f func(preedit string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPreeditChanged), f)
}

//export _gotk4_gtk3_TextView_ConnectSelectAll
func _gotk4_gtk3_TextView_ConnectSelectAll(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(sel bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(sel bool))
	}

	var _sel bool // out

	if arg1 != 0 {
		_sel = true
	}

	f(_sel)
}

// ConnectSelectAll signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted to select or unselect the complete contents of the text view.
//
// The default bindings for this signal are Ctrl-a and Ctrl-/ for selecting and
// Shift-Ctrl-a and Ctrl-\ for unselecting.
func (textView *TextView) ConnectSelectAll(f func(sel bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectSelectAll), f)
}

//export _gotk4_gtk3_TextView_ConnectSetAnchor
func _gotk4_gtk3_TextView_ConnectSetAnchor(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSetAnchor signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user initiates setting the "anchor" mark. The "anchor" mark
// gets placed at the same position as the "insert" mark.
//
// This signal has no default bindings.
func (textView *TextView) ConnectSetAnchor(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "set-anchor", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectSetAnchor), f)
}

//export _gotk4_gtk3_TextView_ConnectToggleCursorVisible
func _gotk4_gtk3_TextView_ConnectToggleCursorVisible(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggleCursorVisible signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to toggle the TextView:cursor-visible property.
//
// The default binding for this signal is F7.
func (textView *TextView) ConnectToggleCursorVisible(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "toggle-cursor-visible", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectToggleCursorVisible), f)
}

//export _gotk4_gtk3_TextView_ConnectToggleOverwrite
func _gotk4_gtk3_TextView_ConnectToggleOverwrite(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggleOverwrite signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to toggle the overwrite mode of the text view.
//
// The default bindings for this signal is Insert.
func (textView *TextView) ConnectToggleOverwrite(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(textView, "toggle-overwrite", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectToggleOverwrite), f)
}

// NewTextView creates a new TextView. If you don’t call
// gtk_text_view_set_buffer() before using the text view, an empty default
// buffer will be created for you. Get the buffer with
// gtk_text_view_get_buffer(). If you want to specify your own buffer, consider
// gtk_text_view_new_with_buffer().
//
// The function returns the following values:
//
//    - textView: new TextView.
//
func NewTextView() *TextView {
	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("new_TextView", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _textView *TextView // out

	_textView = wrapTextView(coreglib.Take(unsafe.Pointer(_cret)))

	return _textView
}

// NewTextViewWithBuffer creates a new TextView widget displaying the buffer
// buffer. One buffer can be shared among many widgets. buffer may be NULL to
// create a default buffer, in which case this function is equivalent to
// gtk_text_view_new(). The text view adds its own reference count to the
// buffer; it does not take over an existing reference.
//
// The function takes the following parameters:
//
//    - buffer: TextBuffer.
//
// The function returns the following values:
//
//    - textView: new TextView.
//
func NewTextViewWithBuffer(buffer *TextBuffer) *TextView {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("new_TextView_with_buffer", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(buffer)

	var _textView *TextView // out

	_textView = wrapTextView(coreglib.Take(unsafe.Pointer(_cret)))

	return _textView
}

// AddChildAtAnchor adds a child widget in the text buffer, at the given anchor.
//
// The function takes the following parameters:
//
//    - child: Widget.
//    - anchor in the TextBuffer for text_view.
//
func (textView *TextView) AddChildAtAnchor(child Widgetter, anchor *TextChildAnchor) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(anchor).Native()))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("add_child_at_anchor", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(child)
	runtime.KeepAlive(anchor)
}

// BackwardDisplayLine moves the given iter backward by one display (wrapped)
// line. A display line is different from a paragraph. Paragraphs are separated
// by newlines or other paragraph separator characters. Display lines are
// created by line-wrapping a paragraph. If wrapping is turned off, display
// lines and paragraphs will be the same. Display lines are divided differently
// for each view, since they depend on the view’s width; paragraphs are the same
// in all views, since they depend on the contents of the TextBuffer.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - ok: TRUE if iter was moved and is not on the end iterator.
//
func (textView *TextView) BackwardDisplayLine(iter *TextIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("backward_display_line", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// BackwardDisplayLineStart moves the given iter backward to the next display
// line start. A display line is different from a paragraph. Paragraphs are
// separated by newlines or other paragraph separator characters. Display lines
// are created by line-wrapping a paragraph. If wrapping is turned off, display
// lines and paragraphs will be the same. Display lines are divided differently
// for each view, since they depend on the view’s width; paragraphs are the same
// in all views, since they depend on the contents of the TextBuffer.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - ok: TRUE if iter was moved and is not on the end iterator.
//
func (textView *TextView) BackwardDisplayLineStart(iter *TextIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("backward_display_line_start", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ForwardDisplayLine moves the given iter forward by one display (wrapped)
// line. A display line is different from a paragraph. Paragraphs are separated
// by newlines or other paragraph separator characters. Display lines are
// created by line-wrapping a paragraph. If wrapping is turned off, display
// lines and paragraphs will be the same. Display lines are divided differently
// for each view, since they depend on the view’s width; paragraphs are the same
// in all views, since they depend on the contents of the TextBuffer.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - ok: TRUE if iter was moved and is not on the end iterator.
//
func (textView *TextView) ForwardDisplayLine(iter *TextIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("forward_display_line", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ForwardDisplayLineEnd moves the given iter forward to the next display line
// end. A display line is different from a paragraph. Paragraphs are separated
// by newlines or other paragraph separator characters. Display lines are
// created by line-wrapping a paragraph. If wrapping is turned off, display
// lines and paragraphs will be the same. Display lines are divided differently
// for each view, since they depend on the view’s width; paragraphs are the same
// in all views, since they depend on the contents of the TextBuffer.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - ok: TRUE if iter was moved and is not on the end iterator.
//
func (textView *TextView) ForwardDisplayLineEnd(iter *TextIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("forward_display_line_end", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// AcceptsTab returns whether pressing the Tab key inserts a tab characters.
// gtk_text_view_set_accepts_tab().
//
// The function returns the following values:
//
//    - ok: TRUE if pressing the Tab key inserts a tab character, FALSE if
//      pressing the Tab key moves the keyboard focus.
//
func (textView *TextView) AcceptsTab() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_accepts_tab", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// BottomMargin gets the bottom margin for text in the text_view.
//
// The function returns the following values:
//
//    - gint: bottom margin in pixels.
//
func (textView *TextView) BottomMargin() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_bottom_margin", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Buffer returns the TextBuffer being displayed by this text view. The
// reference count on the buffer is not incremented; the caller of this function
// won’t own a new reference.
//
// The function returns the following values:
//
//    - textBuffer: TextBuffer.
//
func (textView *TextView) Buffer() *TextBuffer {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_buffer", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _textBuffer *TextBuffer // out

	_textBuffer = wrapTextBuffer(coreglib.Take(unsafe.Pointer(_cret)))

	return _textBuffer
}

// CursorLocations: given an iter within a text layout, determine the positions
// of the strong and weak cursors if the insertion point is at that iterator.
// The position of each cursor is stored as a zero-width rectangle. The strong
// cursor location is the location where characters of the directionality equal
// to the base direction of the paragraph are inserted. The weak cursor location
// is the location where characters of the directionality opposite to the base
// direction of the paragraph are inserted.
//
// If iter is NULL, the actual cursor position is used.
//
// Note that if iter happens to be the actual cursor position, and there is
// currently an IM preedit sequence being entered, the returned locations will
// be adjusted to account for the preedit cursor’s offset within the preedit
// sequence.
//
// The rectangle position is in buffer coordinates; use
// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
// coordinates for one of the windows in the text view.
//
// The function takes the following parameters:
//
//    - iter (optional): TextIter.
//
// The function returns the following values:
//
//    - strong (optional): location to store the strong cursor position (may be
//      NULL).
//    - weak (optional): location to store the weak cursor position (may be
//      NULL).
//
func (textView *TextView) CursorLocations(iter *TextIter) (strong, weak *gdk.Rectangle) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if iter != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("get_cursor_locations", _args[:], _outs[:])

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _strong *gdk.Rectangle // out
	var _weak *gdk.Rectangle   // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_strong = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_weak = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[1])))
	}

	return _strong, _weak
}

// CursorVisible: find out whether the cursor should be displayed.
//
// The function returns the following values:
//
//    - ok: whether the insertion mark is visible.
//
func (textView *TextView) CursorVisible() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_cursor_visible", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// DefaultAttributes obtains a copy of the default text attributes. These are
// the attributes used for text unless a tag overrides them. You’d typically
// pass the default attributes in to gtk_text_iter_get_attributes() in order to
// get the attributes in effect at a given text position.
//
// The return value is a copy owned by the caller of this function, and should
// be freed with gtk_text_attributes_unref().
//
// The function returns the following values:
//
//    - textAttributes: new TextAttributes.
//
func (textView *TextView) DefaultAttributes() *TextAttributes {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_default_attributes", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_textAttributes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _textAttributes
}

// Editable returns the default editability of the TextView. Tags in the buffer
// may override this setting for some ranges of text.
//
// The function returns the following values:
//
//    - ok: whether text is editable by default.
//
func (textView *TextView) Editable() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_editable", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// HAdjustment gets the horizontal-scrolling Adjustment.
//
// Deprecated: Use gtk_scrollable_get_hadjustment().
//
// The function returns the following values:
//
//    - adjustment: pointer to the horizontal Adjustment.
//
func (textView *TextView) HAdjustment() *Adjustment {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_hadjustment", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// Indent gets the default indentation of paragraphs in text_view. Tags in the
// view’s buffer may override the default. The indentation may be negative.
//
// The function returns the following values:
//
//    - gint: number of pixels of indentation.
//
func (textView *TextView) Indent() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_indent", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// IterAtLocation retrieves the iterator at buffer coordinates x and y. Buffer
// coordinates are coordinates for the entire buffer, not just the
// currently-displayed portion. If you have coordinates from an event, you have
// to convert those to buffer coordinates with
// gtk_text_view_window_to_buffer_coords().
//
// The function takes the following parameters:
//
//    - x position, in buffer coordinates.
//    - y position, in buffer coordinates.
//
// The function returns the following values:
//
//    - iter: TextIter.
//    - ok: TRUE if the position is over text.
//
func (textView *TextView) IterAtLocation(x, y int32) (*TextIter, bool) {
	var _args [3]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(x)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(y)

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_iter_at_location", _args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _iter *TextIter // out
	var _ok bool        // out

	_iter = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterAtPosition retrieves the iterator pointing to the character at buffer
// coordinates x and y. Buffer coordinates are coordinates for the entire
// buffer, not just the currently-displayed portion. If you have coordinates
// from an event, you have to convert those to buffer coordinates with
// gtk_text_view_window_to_buffer_coords().
//
// Note that this is different from gtk_text_view_get_iter_at_location(), which
// returns cursor locations, i.e. positions between characters.
//
// The function takes the following parameters:
//
//    - x position, in buffer coordinates.
//    - y position, in buffer coordinates.
//
// The function returns the following values:
//
//    - iter: TextIter.
//    - trailing (optional): if non-NULL, location to store an integer indicating
//      where in the grapheme the user clicked. It will either be zero, or the
//      number of characters in the grapheme. 0 represents the trailing edge of
//      the grapheme.
//    - ok: TRUE if the position is over text.
//
func (textView *TextView) IterAtPosition(x, y int32) (*TextIter, int32, bool) {
	var _args [3]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(x)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(y)

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_iter_at_position", _args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _iter *TextIter // out
	var _trailing int32 // out
	var _ok bool        // out

	_iter = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_trailing = *(*int32)(unsafe.Pointer(_outs[1]))
	}
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _trailing, _ok
}

// IterLocation gets a rectangle which roughly contains the character at iter.
// The rectangle position is in buffer coordinates; use
// gtk_text_view_buffer_to_window_coords() to convert these coordinates to
// coordinates for one of the windows in the text view.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - location bounds of the character at iter.
//
func (textView *TextView) IterLocation(iter *TextIter) *gdk.Rectangle {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("get_iter_location", _args[:], _outs[:])

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _location *gdk.Rectangle // out

	_location = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _location
}

// LeftMargin gets the default left margin size of paragraphs in the text_view.
// Tags in the buffer may override the default.
//
// The function returns the following values:
//
//    - gint: left margin in pixels.
//
func (textView *TextView) LeftMargin() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_left_margin", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// LineAtY gets the TextIter at the start of the line containing the coordinate
// y. y is in buffer coordinates, convert from window coordinates with
// gtk_text_view_window_to_buffer_coords(). If non-NULL, line_top will be filled
// with the coordinate of the top edge of the line.
//
// The function takes the following parameters:
//
//    - y coordinate.
//
// The function returns the following values:
//
//    - targetIter: TextIter.
//    - lineTop: return location for top coordinate of the line.
//
func (textView *TextView) LineAtY(y int32) (*TextIter, int32) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(y)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("get_line_at_y", _args[:], _outs[:])

	runtime.KeepAlive(textView)
	runtime.KeepAlive(y)

	var _targetIter *TextIter // out
	var _lineTop int32        // out

	_targetIter = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	_lineTop = *(*int32)(unsafe.Pointer(_outs[1]))

	return _targetIter, _lineTop
}

// LineYrange gets the y coordinate of the top of the line containing iter, and
// the height of the line. The coordinate is a buffer coordinate; convert to
// window coordinates with gtk_text_view_buffer_to_window_coords().
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - y: return location for a y coordinate.
//    - height: return location for a height.
//
func (textView *TextView) LineYrange(iter *TextIter) (y, height int32) {
	var _args [2]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("get_line_yrange", _args[:], _outs[:])

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _y int32      // out
	var _height int32 // out

	_y = *(*int32)(unsafe.Pointer(_outs[0]))
	_height = *(*int32)(unsafe.Pointer(_outs[1]))

	return _y, _height
}

// Monospace gets the value of the TextView:monospace property.
//
// The function returns the following values:
//
//    - ok: TRUE if monospace fonts are desired.
//
func (textView *TextView) Monospace() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_monospace", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Overwrite returns whether the TextView is in overwrite mode or not.
//
// The function returns the following values:
//
//    - ok: whether text_view is in overwrite mode or not.
//
func (textView *TextView) Overwrite() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_overwrite", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// PixelsAboveLines gets the default number of pixels to put above paragraphs.
// Adding this function with gtk_text_view_get_pixels_below_lines() is equal to
// the line space between each paragraph.
//
// The function returns the following values:
//
//    - gint: default number of pixels above paragraphs.
//
func (textView *TextView) PixelsAboveLines() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_pixels_above_lines", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// PixelsBelowLines gets the value set by
// gtk_text_view_set_pixels_below_lines().
//
// The line space is the sum of the value returned by this function and the
// value returned by gtk_text_view_get_pixels_above_lines().
//
// The function returns the following values:
//
//    - gint: default number of blank pixels below paragraphs.
//
func (textView *TextView) PixelsBelowLines() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_pixels_below_lines", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// PixelsInsideWrap gets the value set by
// gtk_text_view_set_pixels_inside_wrap().
//
// The function returns the following values:
//
//    - gint: default number of pixels of blank space between wrapped lines.
//
func (textView *TextView) PixelsInsideWrap() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_pixels_inside_wrap", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// RightMargin gets the default right margin for text in text_view. Tags in the
// buffer may override the default.
//
// The function returns the following values:
//
//    - gint: right margin in pixels.
//
func (textView *TextView) RightMargin() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_right_margin", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Tabs gets the default tabs for text_view. Tags in the buffer may override the
// defaults. The returned array will be NULL if “standard” (8-space) tabs are
// used. Free the return value with pango_tab_array_free().
//
// The function returns the following values:
//
//    - tabArray (optional): copy of default tab array, or NULL if “standard"
//      tabs are used; must be freed with pango_tab_array_free().
//
func (textView *TextView) Tabs() *pango.TabArray {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_tabs", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _tabArray *pango.TabArray // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_tabArray = (*pango.TabArray)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_tabArray)),
			func(intern *struct{ C unsafe.Pointer }) {
				{
					args := [1]girepository.Argument{(*C.void)(intern.C)}
					girepository.MustFind("Pango", "TabArray").InvokeMethod("free", args[:], nil)
				}
			},
		)
	}

	return _tabArray
}

// TopMargin gets the top margin for text in the text_view.
//
// The function returns the following values:
//
//    - gint: top margin in pixels.
//
func (textView *TextView) TopMargin() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_top_margin", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// VAdjustment gets the vertical-scrolling Adjustment.
//
// Deprecated: Use gtk_scrollable_get_vadjustment().
//
// The function returns the following values:
//
//    - adjustment: pointer to the vertical Adjustment.
//
func (textView *TextView) VAdjustment() *Adjustment {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("get_vadjustment", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// VisibleRect fills visible_rect with the currently-visible region of the
// buffer, in buffer coordinates. Convert to window coordinates with
// gtk_text_view_buffer_to_window_coords().
//
// The function returns the following values:
//
//    - visibleRect: rectangle to fill.
//
func (textView *TextView) VisibleRect() *gdk.Rectangle {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("get_visible_rect", _args[:], _outs[:])

	runtime.KeepAlive(textView)

	var _visibleRect *gdk.Rectangle // out

	_visibleRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))

	return _visibleRect
}

// IMContextFilterKeypress: allow the TextView input method to internally handle
// key press and release events. If this function returns TRUE, then no further
// processing should be done for this key event. See
// gtk_im_context_filter_keypress().
//
// Note that you are expected to call this function from your handler when
// overriding key event handling. This is needed in the case when you need to
// insert your own key handling between the input method and the default key
// event handling of the TextView.
//
//    static gboolean
//    gtk_foo_bar_key_press_event (GtkWidget   *widget,
//                                 GdkEventKey *event)
//    {
//      guint keyval;
//
//      gdk_event_get_keyval ((GdkEvent*)event, &keyval);
//
//      if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
//        {
//          if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
//            return TRUE;
//        }
//
//      // Do some stuff
//
//      return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
//    }.
//
// The function takes the following parameters:
//
//    - event: key event.
//
// The function returns the following values:
//
//    - ok: TRUE if the input method handled the key event.
//
func (textView *TextView) IMContextFilterKeypress(event *gdk.EventKey) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(event)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("im_context_filter_keypress", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(event)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// MoveChild updates the position of a child, as for
// gtk_text_view_add_child_in_window().
//
// The function takes the following parameters:
//
//    - child widget already added to the text view.
//    - xpos: new X position in window coordinates.
//    - ypos: new Y position in window coordinates.
//
func (textView *TextView) MoveChild(child Widgetter, xpos, ypos int32) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(xpos)
	*(*C.gint)(unsafe.Pointer(&_args[3])) = C.gint(ypos)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("move_child", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(child)
	runtime.KeepAlive(xpos)
	runtime.KeepAlive(ypos)
}

// MoveMarkOnscreen moves a mark within the buffer so that it's located within
// the currently-visible text area.
//
// The function takes the following parameters:
//
//    - mark: TextMark.
//
// The function returns the following values:
//
//    - ok: TRUE if the mark moved (wasn’t already onscreen).
//
func (textView *TextView) MoveMarkOnscreen(mark *TextMark) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(mark).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("move_mark_onscreen", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(mark)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// MoveVisually: move the iterator a given number of characters visually,
// treating it as the strong cursor position. If count is positive, then the new
// strong cursor position will be count positions to the right of the old cursor
// position. If count is negative then the new strong cursor position will be
// count positions to the left of the old cursor position.
//
// In the presence of bi-directional text, the correspondence between logical
// and visual order will depend on the direction of the current run, and there
// may be jumps when the cursor is moved off of the end of a run.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//    - count: number of characters to move (negative moves left, positive moves
//      right).
//
// The function returns the following values:
//
//    - ok: TRUE if iter moved and is not on the end iterator.
//
func (textView *TextView) MoveVisually(iter *TextIter, count int32) bool {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(count)

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("move_visually", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(count)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// PlaceCursorOnscreen moves the cursor to the currently visible region of the
// buffer, it it isn’t there already.
//
// The function returns the following values:
//
//    - ok: TRUE if the cursor had to be moved.
//
func (textView *TextView) PlaceCursorOnscreen() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("place_cursor_onscreen", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ResetCursorBlink ensures that the cursor is shown (i.e. not in an 'off' blink
// interval) and resets the time that it will stay blinking (or visible, in case
// blinking is disabled).
//
// This function should be called in response to user input (e.g. from derived
// classes that override the textview's Widget::key-press-event handler).
func (textView *TextView) ResetCursorBlink() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("reset_cursor_blink", _args[:], nil)

	runtime.KeepAlive(textView)
}

// ResetIMContext: reset the input method context of the text view if needed.
//
// This can be necessary in the case where modifying the buffer would confuse
// on-going input method behavior.
func (textView *TextView) ResetIMContext() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("reset_im_context", _args[:], nil)

	runtime.KeepAlive(textView)
}

// ScrollMarkOnscreen scrolls text_view the minimum distance such that mark is
// contained within the visible area of the widget.
//
// The function takes the following parameters:
//
//    - mark in the buffer for text_view.
//
func (textView *TextView) ScrollMarkOnscreen(mark *TextMark) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(mark).Native()))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("scroll_mark_onscreen", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(mark)
}

// ScrollToIter scrolls text_view so that iter is on the screen in the position
// indicated by xalign and yalign. An alignment of 0.0 indicates left or top,
// 1.0 indicates right or bottom, 0.5 means center. If use_align is FALSE, the
// text scrolls the minimal distance to get the mark onscreen, possibly not
// scrolling at all. The effective screen for purposes of this function is
// reduced by a margin of size within_margin.
//
// Note that this function uses the currently-computed height of the lines in
// the text buffer. Line heights are computed in an idle handler; so this
// function may not have the desired effect if it’s called before the height
// computations. To avoid oddness, consider using gtk_text_view_scroll_to_mark()
// which saves a point to be scrolled to after line validation.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//    - withinMargin: margin as a [0.0,0.5) fraction of screen size.
//    - useAlign: whether to use alignment arguments (if FALSE, just get the mark
//      onscreen).
//    - xalign: horizontal alignment of mark within visible area.
//    - yalign: vertical alignment of mark within visible area.
//
// The function returns the following values:
//
//    - ok: TRUE if scrolling occurred.
//
func (textView *TextView) ScrollToIter(iter *TextIter, withinMargin float64, useAlign bool, xalign, yalign float64) bool {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(withinMargin)
	if useAlign {
		*(*C.gboolean)(unsafe.Pointer(&_args[3])) = C.TRUE
	}
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(xalign)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(yalign)

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("scroll_to_iter", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(withinMargin)
	runtime.KeepAlive(useAlign)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ScrollToMark scrolls text_view so that mark is on the screen in the position
// indicated by xalign and yalign. An alignment of 0.0 indicates left or top,
// 1.0 indicates right or bottom, 0.5 means center. If use_align is FALSE, the
// text scrolls the minimal distance to get the mark onscreen, possibly not
// scrolling at all. The effective screen for purposes of this function is
// reduced by a margin of size within_margin.
//
// The function takes the following parameters:
//
//    - mark: TextMark.
//    - withinMargin: margin as a [0.0,0.5) fraction of screen size.
//    - useAlign: whether to use alignment arguments (if FALSE, just get the mark
//      onscreen).
//    - xalign: horizontal alignment of mark within visible area.
//    - yalign: vertical alignment of mark within visible area.
//
func (textView *TextView) ScrollToMark(mark *TextMark, withinMargin float64, useAlign bool, xalign, yalign float64) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(mark).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(withinMargin)
	if useAlign {
		*(*C.gboolean)(unsafe.Pointer(&_args[3])) = C.TRUE
	}
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(xalign)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(yalign)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("scroll_to_mark", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(mark)
	runtime.KeepAlive(withinMargin)
	runtime.KeepAlive(useAlign)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
}

// SetAcceptsTab sets the behavior of the text widget when the Tab key is
// pressed. If accepts_tab is TRUE, a tab character is inserted. If accepts_tab
// is FALSE the keyboard focus is moved to the next widget in the focus chain.
//
// The function takes the following parameters:
//
//    - acceptsTab: TRUE if pressing the Tab key should insert a tab character,
//      FALSE, if pressing the Tab key should move the keyboard focus.
//
func (textView *TextView) SetAcceptsTab(acceptsTab bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if acceptsTab {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_accepts_tab", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(acceptsTab)
}

// SetBottomMargin sets the bottom margin for text in text_view.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
//
// The function takes the following parameters:
//
//    - bottomMargin: bottom margin in pixels.
//
func (textView *TextView) SetBottomMargin(bottomMargin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(bottomMargin)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_bottom_margin", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(bottomMargin)
}

// SetBuffer sets buffer as the buffer being displayed by text_view. The
// previous buffer displayed by the text view is unreferenced, and a reference
// is added to buffer. If you owned a reference to buffer before passing it to
// this function, you must remove that reference yourself; TextView will not
// “adopt” it.
//
// The function takes the following parameters:
//
//    - buffer (optional): TextBuffer.
//
func (textView *TextView) SetBuffer(buffer *TextBuffer) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if buffer != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_buffer", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(buffer)
}

// SetCursorVisible toggles whether the insertion point should be displayed. A
// buffer with no editable text probably shouldn’t have a visible cursor, so you
// may want to turn the cursor off.
//
// Note that this property may be overridden by the
// Settings:gtk-keynave-use-caret settings.
//
// The function takes the following parameters:
//
//    - setting: whether to show the insertion cursor.
//
func (textView *TextView) SetCursorVisible(setting bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if setting {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_cursor_visible", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(setting)
}

// SetEditable sets the default editability of the TextView. You can override
// this default setting with tags in the buffer, using the “editable” attribute
// of tags.
//
// The function takes the following parameters:
//
//    - setting: whether it’s editable.
//
func (textView *TextView) SetEditable(setting bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if setting {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_editable", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(setting)
}

// SetIndent sets the default indentation for paragraphs in text_view. Tags in
// the buffer may override the default.
//
// The function takes the following parameters:
//
//    - indent: indentation in pixels.
//
func (textView *TextView) SetIndent(indent int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(indent)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_indent", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(indent)
}

// SetLeftMargin sets the default left margin for text in text_view. Tags in the
// buffer may override the default.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
//
// The function takes the following parameters:
//
//    - leftMargin: left margin in pixels.
//
func (textView *TextView) SetLeftMargin(leftMargin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(leftMargin)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_left_margin", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(leftMargin)
}

// SetMonospace sets the TextView:monospace property, which indicates that the
// text view should use monospace fonts.
//
// The function takes the following parameters:
//
//    - monospace: TRUE to request monospace styling.
//
func (textView *TextView) SetMonospace(monospace bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if monospace {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_monospace", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(monospace)
}

// SetOverwrite changes the TextView overwrite mode.
//
// The function takes the following parameters:
//
//    - overwrite: TRUE to turn on overwrite mode, FALSE to turn it off.
//
func (textView *TextView) SetOverwrite(overwrite bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	if overwrite {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_overwrite", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(overwrite)
}

// SetPixelsAboveLines sets the default number of blank pixels above paragraphs
// in text_view. Tags in the buffer for text_view may override the defaults.
//
// The function takes the following parameters:
//
//    - pixelsAboveLines pixels above paragraphs.
//
func (textView *TextView) SetPixelsAboveLines(pixelsAboveLines int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(pixelsAboveLines)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_pixels_above_lines", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(pixelsAboveLines)
}

// SetPixelsBelowLines sets the default number of pixels of blank space to put
// below paragraphs in text_view. May be overridden by tags applied to
// text_view’s buffer.
//
// The function takes the following parameters:
//
//    - pixelsBelowLines pixels below paragraphs.
//
func (textView *TextView) SetPixelsBelowLines(pixelsBelowLines int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(pixelsBelowLines)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_pixels_below_lines", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(pixelsBelowLines)
}

// SetPixelsInsideWrap sets the default number of pixels of blank space to leave
// between display/wrapped lines within a paragraph. May be overridden by tags
// in text_view’s buffer.
//
// The function takes the following parameters:
//
//    - pixelsInsideWrap: default number of pixels between wrapped lines.
//
func (textView *TextView) SetPixelsInsideWrap(pixelsInsideWrap int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(pixelsInsideWrap)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_pixels_inside_wrap", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(pixelsInsideWrap)
}

// SetRightMargin sets the default right margin for text in the text view. Tags
// in the buffer may override the default.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
//
// The function takes the following parameters:
//
//    - rightMargin: right margin in pixels.
//
func (textView *TextView) SetRightMargin(rightMargin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(rightMargin)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_right_margin", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(rightMargin)
}

// SetTabs sets the default tab stops for paragraphs in text_view. Tags in the
// buffer may override the default.
//
// The function takes the following parameters:
//
//    - tabs as a TabArray.
//
func (textView *TextView) SetTabs(tabs *pango.TabArray) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(tabs)))

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_tabs", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(tabs)
}

// SetTopMargin sets the top margin for text in text_view.
//
// Note that this function is confusingly named. In CSS terms, the value set
// here is padding.
//
// The function takes the following parameters:
//
//    - topMargin: top margin in pixels.
//
func (textView *TextView) SetTopMargin(topMargin int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(topMargin)

	girepository.MustFind("Gtk", "TextView").InvokeMethod("set_top_margin", _args[:], nil)

	runtime.KeepAlive(textView)
	runtime.KeepAlive(topMargin)
}

// StartsDisplayLine determines whether iter is at the start of a display line.
// See gtk_text_view_forward_display_line() for an explanation of display lines
// vs. paragraphs.
//
// The function takes the following parameters:
//
//    - iter: TextIter.
//
// The function returns the following values:
//
//    - ok: TRUE if iter begins a wrapped line.
//
func (textView *TextView) StartsDisplayLine(iter *TextIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(textView).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_gret := girepository.MustFind("Gtk", "TextView").InvokeMethod("starts_display_line", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(textView)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
