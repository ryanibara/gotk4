// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeEntryIconPosition = coreglib.Type(C.gtk_entry_icon_position_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEntryIconPosition, F: marshalEntryIconPosition},
	})
}

// EntryIconPosition specifies the side of the entry at which an icon is placed.
type EntryIconPosition C.gint

const (
	// EntryIconPrimary: at the beginning of the entry (depending on the text
	// direction).
	EntryIconPrimary EntryIconPosition = iota
	// EntryIconSecondary: at the end of the entry (depending on the text
	// direction).
	EntryIconSecondary
)

func marshalEntryIconPosition(p uintptr) (interface{}, error) {
	return EntryIconPosition(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for EntryIconPosition.
func (e EntryIconPosition) String() string {
	switch e {
	case EntryIconPrimary:
		return "Primary"
	case EntryIconSecondary:
		return "Secondary"
	default:
		return fmt.Sprintf("EntryIconPosition(%d)", e)
	}
}

// CurrentIconDragSource returns the index of the icon which is the source of
// the current DND operation, or -1.
//
// This function is meant to be used in a Widget::drag-data-get callback.
//
// The function returns the following values:
//
//    - gint: index of the icon which is the source of the current DND operation,
//      or -1.
//
func (entry *Entry) CurrentIconDragSource() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_current_icon_drag_source(_arg0)
	runtime.KeepAlive(entry)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IconActivatable returns whether the icon is activatable.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - ok: TRUE if the icon is activatable.
//
func (entry *Entry) IconActivatable(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_activatable(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconAtPos finds the icon at the given position and return its index. The
// position’s coordinates are relative to the entry’s top left corner. If x, y
// doesn’t lie inside an icon, -1 is returned. This function is intended for use
// in a Widget::query-tooltip signal handler.
//
// The function takes the following parameters:
//
//    - x coordinate of the position to find.
//    - y coordinate of the position to find.
//
// The function returns the following values:
//
//    - gint: index of the icon at the given position, or -1.
//
func (entry *Entry) IconAtPos(x, y int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_entry_get_icon_at_pos(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IconGIcon retrieves the #GIcon used for the icon, or NULL if there is no icon
// or if the icon was set by some other method (e.g., by stock, pixbuf, or icon
// name).
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - icon (optional) or NULL if no icon is set or if the icon is not a #GIcon.
//
func (entry *Entry) IconGIcon(iconPos EntryIconPosition) *gio.Icon {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.GIcon               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_gicon(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _icon *gio.Icon // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_icon = &gio.Icon{
				Object: obj,
			}
		}
	}

	return _icon
}

// IconName retrieves the icon name used for the icon, or NULL if there is no
// icon or if the icon was set by some other method (e.g., by pixbuf, stock or
// gicon).
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): icon name, or NULL if no icon is set or if the icon
//      wasn’t set from an icon name.
//
func (entry *Entry) IconName(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_name(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// IconPixbuf retrieves the image used for the icon.
//
// Unlike the other methods of setting and getting icon data, this method will
// work regardless of whether the icon was set using a Pixbuf, a #GIcon, a stock
// item, or an icon name.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - pixbuf (optional) or NULL if no icon is set for this position.
//
func (entry *Entry) IconPixbuf(iconPos EntryIconPosition) *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.GdkPixbuf           // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_pixbuf(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_pixbuf = &gdkpixbuf.Pixbuf{
				Object: obj,
				LoadableIcon: gio.LoadableIcon{
					Icon: gio.Icon{
						Object: obj,
					},
				},
			}
		}
	}

	return _pixbuf
}

// IconSensitive returns whether the icon appears sensitive or insensitive.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - ok: TRUE if the icon is sensitive.
//
func (entry *Entry) IconSensitive(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_sensitive(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconStock retrieves the stock id used for the icon, or NULL if there is no
// icon or if the icon was set by some other method (e.g., by pixbuf, icon name
// or gicon).
//
// Deprecated: Use gtk_entry_get_icon_name() instead.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8: stock id, or NULL if no icon is set or if the icon wasn’t set from
//      a stock id.
//
func (entry *Entry) IconStock(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_stock(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// IconStorageType gets the type of representation being used by the icon to
// store image data. If the icon has no image data, the return value will be
// GTK_IMAGE_EMPTY.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - imageType: image representation being used.
//
func (entry *Entry) IconStorageType(iconPos EntryIconPosition) ImageType {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.GtkImageType         // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_storage_type(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

// IconTooltipMarkup gets the contents of the tooltip on the icon at the
// specified position in entry.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. Free the returned string with
//      g_free() when done.
//
func (entry *Entry) IconTooltipMarkup(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_markup(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// IconTooltipText gets the contents of the tooltip on the icon at the specified
// position in entry.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. Free the returned string with
//      g_free() when done.
//
func (entry *Entry) IconTooltipText(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// ProgressFraction returns the current fraction of the task that’s been
// completed. See gtk_entry_set_progress_fraction().
//
// The function returns the following values:
//
//    - gdouble: fraction from 0.0 to 1.0.
//
func (entry *Entry) ProgressFraction() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_progress_fraction(_arg0)
	runtime.KeepAlive(entry)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ProgressPulseStep retrieves the pulse step set with
// gtk_entry_set_progress_pulse_step().
//
// The function returns the following values:
//
//    - gdouble: fraction from 0.0 to 1.0.
//
func (entry *Entry) ProgressPulseStep() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_progress_pulse_step(_arg0)
	runtime.KeepAlive(entry)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ProgressPulse indicates that some progress is made, but you don’t know how
// much. Causes the entry’s progress indicator to enter “activity mode,” where a
// block bounces back and forth. Each call to gtk_entry_progress_pulse() causes
// the block to move by a little bit (the amount of movement per pulse is
// determined by gtk_entry_set_progress_pulse_step()).
func (entry *Entry) ProgressPulse() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_progress_pulse(_arg0)
	runtime.KeepAlive(entry)
}

// SetIconActivatable sets whether the icon is activatable.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - activatable: TRUE if the icon should be activatable.
//
func (entry *Entry) SetIconActivatable(iconPos EntryIconPosition, activatable bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if activatable {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_activatable(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(activatable)
}

// SetIconDragSource sets up the icon at the given position so that GTK+ will
// start a drag operation when the user clicks and drags the icon.
//
// To handle the drag operation, you need to connect to the usual
// Widget::drag-data-get (or possibly Widget::drag-data-delete) signal, and use
// gtk_entry_get_current_icon_drag_source() in your signal handler to find out
// if the drag was started from an icon.
//
// By default, GTK+ uses the icon as the drag icon. You can use the
// Widget::drag-begin signal to set a different icon. Note that you have to use
// g_signal_connect_after() to ensure that your signal handler gets executed
// after the default handler.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - targetList targets (data formats) in which the data can be provided.
//    - actions: bitmask of the allowed drag actions.
//
func (entry *Entry) SetIconDragSource(iconPos EntryIconPosition, targetList *TargetList, actions gdk.DragAction) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GtkTargetList       // out
	var _arg3 C.GdkDragAction        // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.GtkTargetList)(gextras.StructNative(unsafe.Pointer(targetList)))
	_arg3 = C.GdkDragAction(actions)

	C.gtk_entry_set_icon_drag_source(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(targetList)
	runtime.KeepAlive(actions)
}

// SetIconFromGIcon sets the icon shown in the entry at the specified position
// from the current icon theme. If the icon isn’t known, a “broken image” icon
// will be displayed instead.
//
// If icon is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: position at which to set the icon.
//    - icon (optional) to set, or NULL.
//
func (entry *Entry) SetIconFromGIcon(iconPos EntryIconPosition, icon gio.Iconner) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GIcon               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if icon != nil {
		_arg2 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	}

	C.gtk_entry_set_icon_from_gicon(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(icon)
}

// SetIconFromIconName sets the icon shown in the entry at the specified
// position from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead.
//
// If icon_name is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: position at which to set the icon.
//    - iconName (optional): icon name, or NULL.
//
func (entry *Entry) SetIconFromIconName(iconPos EntryIconPosition, iconName string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if iconName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_from_icon_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(iconName)
}

// SetIconFromPixbuf sets the icon shown in the specified position using a
// pixbuf.
//
// If pixbuf is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - pixbuf (optional) or NULL.
//
func (entry *Entry) SetIconFromPixbuf(iconPos EntryIconPosition, pixbuf *gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GdkPixbuf           // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if pixbuf != nil {
		_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	}

	C.gtk_entry_set_icon_from_pixbuf(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(pixbuf)
}

// SetIconFromStock sets the icon shown in the entry at the specified position
// from a stock image.
//
// If stock_id is NULL, no icon will be shown in the specified position.
//
// Deprecated: Use gtk_entry_set_icon_from_icon_name() instead.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - stockId (optional): name of the stock item, or NULL.
//
func (entry *Entry) SetIconFromStock(iconPos EntryIconPosition, stockId string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if stockId != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_from_stock(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(stockId)
}

// SetIconSensitive sets the sensitivity for the specified icon.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - sensitive specifies whether the icon should appear sensitive or
//      insensitive.
//
func (entry *Entry) SetIconSensitive(iconPos EntryIconPosition, sensitive bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if sensitive {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_sensitive(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(sensitive)
}

// SetIconTooltipMarkup sets tooltip as the contents of the tooltip for the icon
// at the specified position. tooltip is assumed to be marked up with the [Pango
// text markup language][PangoMarkupFormat].
//
// Use NULL for tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_markup() and
// gtk_entry_set_icon_tooltip_text().
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - tooltip (optional) contents of the tooltip for the icon, or NULL.
//
func (entry *Entry) SetIconTooltipMarkup(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if tooltip != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_tooltip_markup(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(tooltip)
}

// SetIconTooltipText sets tooltip as the contents of the tooltip for the icon
// at the specified position.
//
// Use NULL for tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_text() and
// gtk_entry_set_icon_tooltip_markup().
//
// If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
// gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to FALSE,
// which suppresses icon tooltips too. You can resolve this by then calling
// gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to TRUE, or
// setting at least one non-empty tooltip on any icon achieves the same result.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - tooltip (optional) contents of the tooltip for the icon, or NULL.
//
func (entry *Entry) SetIconTooltipText(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if tooltip != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_tooltip_text(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(tooltip)
}

// SetProgressFraction causes the entry’s progress indicator to “fill in” the
// given fraction of the bar. The fraction should be between 0.0 and 1.0,
// inclusive.
//
// The function takes the following parameters:
//
//    - fraction of the task that’s been completed.
//
func (entry *Entry) SetProgressFraction(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_fraction(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(fraction)
}

// SetProgressPulseStep sets the fraction of total entry width to move the
// progress bouncing block for each call to gtk_entry_progress_pulse().
//
// The function takes the following parameters:
//
//    - fraction between 0.0 and 1.0.
//
func (entry *Entry) SetProgressPulseStep(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_pulse_step(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(fraction)
}

// UnsetInvisibleChar unsets the invisible char previously set with
// gtk_entry_set_invisible_char(). So that the default invisible char is used
// again.
func (entry *Entry) UnsetInvisibleChar() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_unset_invisible_char(_arg0)
	runtime.KeepAlive(entry)
}
