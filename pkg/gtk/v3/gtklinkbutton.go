// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern gboolean _gotk4_gtk3_LinkButton_ConnectActivateLink(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_LinkButtonClass_activate_link(GtkLinkButton*);
// gboolean _gotk4_gtk3_LinkButton_virtual_activate_link(void* fnptr, GtkLinkButton* arg0) {
//   return ((gboolean (*)(GtkLinkButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeLinkButton = coreglib.Type(C.gtk_link_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLinkButton, F: marshalLinkButton},
	})
}

// LinkButtonOverrides contains methods that are overridable.
type LinkButtonOverrides struct {
	// The function returns the following values:
	//
	ActivateLink func() bool
}

func defaultLinkButtonOverrides(v *LinkButton) LinkButtonOverrides {
	return LinkButtonOverrides{
		ActivateLink: v.activateLink,
	}
}

// LinkButton is a Button with a hyperlink, similar to the one used by web
// browsers, which triggers an action when clicked. It is useful to show quick
// links to resources.
//
// A link button is created by calling either gtk_link_button_new() or
// gtk_link_button_new_with_label(). If using the former, the URI you pass to
// the constructor is used as a label for the widget.
//
// The URI bound to a GtkLinkButton can be set specifically using
// gtk_link_button_set_uri(), and retrieved using gtk_link_button_get_uri().
//
// By default, GtkLinkButton calls gtk_show_uri_on_window() when the button is
// clicked. This behaviour can be overridden by connecting to the
// LinkButton::activate-link signal and returning TRUE from the signal handler.
//
//
// CSS nodes
//
// GtkLinkButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .link style class.
type LinkButton struct {
	_ [0]func() // equal guard
	Button
}

var (
	_ Binner            = (*LinkButton)(nil)
	_ coreglib.Objector = (*LinkButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*LinkButton, *LinkButtonClass, LinkButtonOverrides](
		GTypeLinkButton,
		initLinkButtonClass,
		wrapLinkButton,
		defaultLinkButtonOverrides,
	)
}

func initLinkButtonClass(gclass unsafe.Pointer, overrides LinkButtonOverrides, classInitFunc func(*LinkButtonClass)) {
	pclass := (*C.GtkLinkButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeLinkButton))))

	if overrides.ActivateLink != nil {
		pclass.activate_link = (*[0]byte)(C._gotk4_gtk3_LinkButtonClass_activate_link)
	}

	if classInitFunc != nil {
		class := (*LinkButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLinkButton(obj *coreglib.Object) *LinkButton {
	return &LinkButton{
		Button: Button{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
	}
}

func marshalLinkButton(p uintptr) (interface{}, error) {
	return wrapLinkButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivateLink signal is emitted each time the LinkButton has been
// clicked.
//
// The default handler will call gtk_show_uri_on_window() with the URI stored
// inside the LinkButton:uri property.
//
// To override the default behavior, you can connect to the ::activate-link
// signal and stop the propagation of the signal by returning TRUE from your
// handler.
func (linkButton *LinkButton) ConnectActivateLink(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(linkButton, "activate-link", false, unsafe.Pointer(C._gotk4_gtk3_LinkButton_ConnectActivateLink), f)
}

// The function returns the following values:
//
func (button *LinkButton) activateLink() bool {
	gclass := (*C.GtkLinkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.activate_link

	var _arg0 *C.GtkLinkButton // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkLinkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C._gotk4_gtk3_LinkButton_virtual_activate_link(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LinkButtonClass contains only private data.
//
// An instance of this type is always passed by reference.
type LinkButtonClass struct {
	*linkButtonClass
}

// linkButtonClass is the struct that's finalized.
type linkButtonClass struct {
	native *C.GtkLinkButtonClass
}
