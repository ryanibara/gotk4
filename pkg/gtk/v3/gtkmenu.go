// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Menu_ConnectPoppedUp(gpointer, gpointer, gpointer, gboolean, gboolean, guintptr);
// extern void _gotk4_gtk3_Menu_ConnectMoveScroll(gpointer, GtkScrollType, guintptr);
import "C"

// GType values.
var (
	GTypeArrowPlacement = coreglib.Type(C.gtk_arrow_placement_get_type())
	GTypeMenu           = coreglib.Type(C.gtk_menu_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeArrowPlacement, F: marshalArrowPlacement},
		coreglib.TypeMarshaler{T: GTypeMenu, F: marshalMenu},
	})
}

// ArrowPlacement: used to specify the placement of scroll arrows in scrolling
// menus.
type ArrowPlacement C.gint

const (
	// ArrowsBoth: place one arrow on each end of the menu.
	ArrowsBoth ArrowPlacement = iota
	// ArrowsStart: place both arrows at the top of the menu.
	ArrowsStart
	// ArrowsEnd: place both arrows at the bottom of the menu.
	ArrowsEnd
)

func marshalArrowPlacement(p uintptr) (interface{}, error) {
	return ArrowPlacement(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ArrowPlacement.
func (a ArrowPlacement) String() string {
	switch a {
	case ArrowsBoth:
		return "Both"
	case ArrowsStart:
		return "Start"
	case ArrowsEnd:
		return "End"
	default:
		return fmt.Sprintf("ArrowPlacement(%d)", a)
	}
}

// MenuOverrides contains methods that are overridable.
type MenuOverrides struct {
}

func defaultMenuOverrides(v *Menu) MenuOverrides {
	return MenuOverrides{}
}

// Menu is a MenuShell that implements a drop down menu consisting of a list of
// MenuItem objects which can be navigated and activated by the user to perform
// application functions.
//
// A Menu is most commonly dropped down by activating a MenuItem in a MenuBar or
// popped up by activating a MenuItem in another Menu.
//
// A Menu can also be popped up by activating a ComboBox. Other composite
// widgets such as the Notebook can pop up a Menu as well.
//
// Applications can display a Menu as a popup menu by calling the
// gtk_menu_popup() function. The example below shows how an application can pop
// up a menu when the 3rd mouse button is pressed.
//
// Connecting the popup signal handler.
//
//    menu
//    ├── arrow.top
//    ├── <child>
//    ┊
//    ├── <child>
//    ╰── arrow.bottom
//
// The main CSS node of GtkMenu has name menu, and there are two subnodes with
// name arrow, for scrolling menu arrows. These subnodes get the .top and
// .bottom style classes.
type Menu struct {
	_ [0]func() // equal guard
	MenuShell
}

var (
	_ MenuSheller = (*Menu)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Menu, *MenuClass, MenuOverrides](
		GTypeMenu,
		initMenuClass,
		wrapMenu,
		defaultMenuOverrides,
	)
}

func initMenuClass(gclass unsafe.Pointer, overrides MenuOverrides, classInitFunc func(*MenuClass)) {
	if classInitFunc != nil {
		class := (*MenuClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMenu(obj *coreglib.Object) *Menu {
	return &Menu{
		MenuShell: MenuShell{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalMenu(p uintptr) (interface{}, error) {
	return wrapMenu(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (menu *Menu) ConnectMoveScroll(f func(scrollType ScrollType)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(menu, "move-scroll", false, unsafe.Pointer(C._gotk4_gtk3_Menu_ConnectMoveScroll), f)
}

// ConnectPoppedUp is emitted when the position of menu is finalized after being
// popped up using gtk_menu_popup_at_rect (), gtk_menu_popup_at_widget (), or
// gtk_menu_popup_at_pointer ().
//
// menu might be flipped over the anchor rectangle in order to keep it
// on-screen, in which case flipped_x and flipped_y will be set to TRUE
// accordingly.
//
// flipped_rect is the ideal position of menu after any possible flipping, but
// before any possible sliding. final_rect is flipped_rect, but possibly
// translated in the case that flipping is still ineffective in keeping menu
// on-screen.
//
// ! (popup-slide.png)
//
// The blue menu is menu's ideal position, the green menu is flipped_rect, and
// the red menu is final_rect.
//
// See gtk_menu_popup_at_rect (), gtk_menu_popup_at_widget (),
// gtk_menu_popup_at_pointer (), Menu:anchor-hints, Menu:rect-anchor-dx,
// Menu:rect-anchor-dy, and Menu:menu-type-hint.
func (menu *Menu) ConnectPoppedUp(f func(flippedRect, finalRect unsafe.Pointer, flippedX, flippedY bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(menu, "popped-up", false, unsafe.Pointer(C._gotk4_gtk3_Menu_ConnectPoppedUp), f)
}

// NewMenu creates a new Menu.
//
// The function returns the following values:
//
//    - menu: new Menu.
//
func NewMenu() *Menu {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_menu_new()

	var _menu *Menu // out

	_menu = wrapMenu(coreglib.Take(unsafe.Pointer(_cret)))

	return _menu
}

// Detach detaches the menu from the widget to which it had been attached. This
// function will call the callback function, detacher, provided when the
// gtk_menu_attach_to_widget() function was called.
func (menu *Menu) Detach() {
	var _arg0 *C.GtkMenu // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	C.gtk_menu_detach(_arg0)
	runtime.KeepAlive(menu)
}

// AccelGroup gets the AccelGroup which holds global accelerators for the menu.
// See gtk_menu_set_accel_group().
//
// The function returns the following values:
//
//    - accelGroup associated with the menu.
//
func (menu *Menu) AccelGroup() *AccelGroup {
	var _arg0 *C.GtkMenu       // out
	var _cret *C.GtkAccelGroup // in

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	_cret = C.gtk_menu_get_accel_group(_arg0)
	runtime.KeepAlive(menu)

	var _accelGroup *AccelGroup // out

	_accelGroup = wrapAccelGroup(coreglib.Take(unsafe.Pointer(_cret)))

	return _accelGroup
}

// Active returns the selected menu item from the menu. This is used by the
// ComboBox.
//
// The function returns the following values:
//
//    - widget that was last selected in the menu. If a selection has not yet
//      been made, the first menu item is selected.
//
func (menu *Menu) Active() Widgetter {
	var _arg0 *C.GtkMenu   // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	_cret = C.gtk_menu_get_active(_arg0)
	runtime.KeepAlive(menu)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// AttachWidget returns the Widget that the menu is attached to.
//
// The function returns the following values:
//
//    - widget that the menu is attached to.
//
func (menu *Menu) AttachWidget() Widgetter {
	var _arg0 *C.GtkMenu   // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	_cret = C.gtk_menu_get_attach_widget(_arg0)
	runtime.KeepAlive(menu)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// TearoffState returns whether the menu is torn off. See
// gtk_menu_set_tearoff_state().
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - ok: TRUE if the menu is currently torn off.
//
func (menu *Menu) TearoffState() bool {
	var _arg0 *C.GtkMenu // out
	var _cret C.gboolean // in

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	_cret = C.gtk_menu_get_tearoff_state(_arg0)
	runtime.KeepAlive(menu)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Title returns the title of the menu. See gtk_menu_set_title().
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - utf8: title of the menu, or NULL if the menu has no title set on it. This
//      string is owned by GTK+ and should not be modified or freed.
//
func (menu *Menu) Title() string {
	var _arg0 *C.GtkMenu // out
	var _cret *C.gchar   // in

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	_cret = C.gtk_menu_get_title(_arg0)
	runtime.KeepAlive(menu)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Popdown removes the menu from the screen.
func (menu *Menu) Popdown() {
	var _arg0 *C.GtkMenu // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	C.gtk_menu_popdown(_arg0)
	runtime.KeepAlive(menu)
}

// ReorderChild moves child to a new position in the list of menu children.
//
// The function takes the following parameters:
//
//    - child to move.
//    - position: new position to place child. Positions are numbered from 0 to n
//      - 1.
//
func (menu *Menu) ReorderChild(child Widgetter, position int) {
	var _arg0 *C.GtkMenu   // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	_arg2 = C.gint(position)

	C.gtk_menu_reorder_child(_arg0, _arg1, _arg2)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(child)
	runtime.KeepAlive(position)
}

// Reposition repositions the menu according to its position function.
func (menu *Menu) Reposition() {
	var _arg0 *C.GtkMenu // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))

	C.gtk_menu_reposition(_arg0)
	runtime.KeepAlive(menu)
}

// SetAccelGroup: set the AccelGroup which holds global accelerators for the
// menu. This accelerator group needs to also be added to all windows that this
// menu is being used in with gtk_window_add_accel_group(), in order for those
// windows to support all the accelerators contained in this group.
//
// The function takes the following parameters:
//
//    - accelGroup (optional) to be associated with the menu.
//
func (menu *Menu) SetAccelGroup(accelGroup *AccelGroup) {
	var _arg0 *C.GtkMenu       // out
	var _arg1 *C.GtkAccelGroup // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	if accelGroup != nil {
		_arg1 = (*C.GtkAccelGroup)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))
	}

	C.gtk_menu_set_accel_group(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(accelGroup)
}

// SetAccelPath sets an accelerator path for this menu from which accelerator
// paths for its immediate children, its menu items, can be constructed. The
// main purpose of this function is to spare the programmer the inconvenience of
// having to call gtk_menu_item_set_accel_path() on each menu item that should
// support runtime user changable accelerators. Instead, by just calling
// gtk_menu_set_accel_path() on their parent, each menu item of this menu, that
// contains a label describing its purpose, automatically gets an accel path
// assigned.
//
// For example, a menu containing menu items “New” and “Exit”, will, after
// gtk_menu_set_accel_path (menu, "<Gnumeric-Sheet>/File"); has been called,
// assign its items the accel paths: "<Gnumeric-Sheet>/File/New" and
// "<Gnumeric-Sheet>/File/Exit".
//
// Assigning accel paths to menu items then enables the user to change their
// accelerators at runtime. More details about accelerator paths and their
// default setups can be found at gtk_accel_map_add_entry().
//
// Note that accel_path string will be stored in a #GQuark. Therefore, if you
// pass a static string, you can save some memory by interning it first with
// g_intern_static_string().
//
// The function takes the following parameters:
//
//    - accelPath (optional): valid accelerator path, or NULL to unset the path.
//
func (menu *Menu) SetAccelPath(accelPath string) {
	var _arg0 *C.GtkMenu // out
	var _arg1 *C.gchar   // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	if accelPath != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(accelPath)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_menu_set_accel_path(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(accelPath)
}

// SetActive selects the specified menu item within the menu. This is used by
// the ComboBox and should not be used by anyone else.
//
// The function takes the following parameters:
//
//    - index of the menu item to select. Index values are from 0 to n-1.
//
func (menu *Menu) SetActive(index uint) {
	var _arg0 *C.GtkMenu // out
	var _arg1 C.guint    // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg1 = C.guint(index)

	C.gtk_menu_set_active(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(index)
}

// SetTearoffState changes the tearoff state of the menu. A menu is normally
// displayed as drop down menu which persists as long as the menu is active. It
// can also be displayed as a tearoff menu which persists until it is closed or
// reattached.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - tornOff: if TRUE, menu is displayed as a tearoff menu.
//
func (menu *Menu) SetTearoffState(tornOff bool) {
	var _arg0 *C.GtkMenu // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	if tornOff {
		_arg1 = C.TRUE
	}

	C.gtk_menu_set_tearoff_state(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(tornOff)
}

// SetTitle sets the title string for the menu.
//
// The title is displayed when the menu is shown as a tearoff menu. If title is
// NULL, the menu will see if it is attached to a parent menu item, and if so it
// will try to use the same text as that menu item’s label.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - title (optional): string containing the title for the menu, or NULL to
//      inherit the title of the parent menu item, if any.
//
func (menu *Menu) SetTitle(title string) {
	var _arg0 *C.GtkMenu // out
	var _arg1 *C.gchar   // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	if title != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_menu_set_title(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(title)
}

// MenuClass: instance of this type is always passed by reference.
type MenuClass struct {
	*menuClass
}

// menuClass is the struct that's finalized.
type menuClass struct {
	native *C.GtkMenuClass
}

func (m *MenuClass) ParentClass() *MenuShellClass {
	valptr := &m.native.parent_class
	var _v *MenuShellClass // out
	_v = (*MenuShellClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
