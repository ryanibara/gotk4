// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeStackSwitcher returns the GType for the type StackSwitcher.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeStackSwitcher() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "StackSwitcher").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalStackSwitcher)
	return gtype
}

// StackSwitcherOverrider contains methods that are overridable.
type StackSwitcherOverrider interface {
}

// StackSwitcher widget acts as a controller for a Stack; it shows a row of
// buttons to switch between the various pages of the associated stack widget.
//
// All the content for the buttons comes from the child properties of the Stack;
// the button visibility in a StackSwitcher widget is controlled by the
// visibility of the child in the Stack.
//
// It is possible to associate multiple StackSwitcher widgets with the same
// Stack widget.
//
// The GtkStackSwitcher widget was added in 3.10.
//
//
// CSS nodes
//
// GtkStackSwitcher has a single CSS node named stackswitcher and style class
// .stack-switcher.
//
// When circumstances require it, GtkStackSwitcher adds the .needs-attention
// style class to the widgets representing the stack pages.
type StackSwitcher struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*StackSwitcher)(nil)
	_ coreglib.Objector = (*StackSwitcher)(nil)
)

func classInitStackSwitcherer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStackSwitcher(obj *coreglib.Object) *StackSwitcher {
	return &StackSwitcher{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalStackSwitcher(p uintptr) (interface{}, error) {
	return wrapStackSwitcher(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewStackSwitcher: create a new StackSwitcher.
//
// The function returns the following values:
//
//    - stackSwitcher: new StackSwitcher.
//
func NewStackSwitcher() *StackSwitcher {
	_info := girepository.MustFind("Gtk", "StackSwitcher")
	_gret := _info.InvokeClassMethod("new_StackSwitcher", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _stackSwitcher *StackSwitcher // out

	_stackSwitcher = wrapStackSwitcher(coreglib.Take(unsafe.Pointer(_cret)))

	return _stackSwitcher
}

// Stack retrieves the stack. See gtk_stack_switcher_set_stack().
//
// The function returns the following values:
//
//    - stack (optional): stack, or NULL if none has been set explicitly.
//
func (switcher *StackSwitcher) Stack() *Stack {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(switcher).Native()))

	_info := girepository.MustFind("Gtk", "StackSwitcher")
	_gret := _info.InvokeClassMethod("get_stack", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(switcher)

	var _stack *Stack // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_stack = wrapStack(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _stack
}

// SetStack sets the stack to control.
//
// The function takes the following parameters:
//
//    - stack (optional): Stack.
//
func (switcher *StackSwitcher) SetStack(stack *Stack) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(switcher).Native()))
	if stack != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(stack).Native()))
	}

	_info := girepository.MustFind("Gtk", "StackSwitcher")
	_info.InvokeClassMethod("set_stack", _args[:], nil)

	runtime.KeepAlive(switcher)
	runtime.KeepAlive(stack)
}
