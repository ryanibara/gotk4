// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeNumerableIcon = coreglib.Type(C.gtk_numerable_icon_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNumerableIcon, F: marshalNumerableIcon},
	})
}

// NumerableIconOverrides contains methods that are overridable.
type NumerableIconOverrides struct {
}

func defaultNumerableIconOverrides(v *NumerableIcon) NumerableIconOverrides {
	return NumerableIconOverrides{}
}

// NumerableIcon is a subclass of Icon that can show a number or short string as
// an emblem. The number can be overlayed on top of another emblem, if desired.
//
// It supports theming by taking font and color information from a provided
// StyleContext; see gtk_numerable_icon_set_style_context().
//
// Typical numerable icons: ! (numerableicon.png) ! (numerableicon2.png).
type NumerableIcon struct {
	_ [0]func() // equal guard
	gio.EmblemedIcon
}

var (
	_ coreglib.Objector = (*NumerableIcon)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NumerableIcon, *NumerableIconClass, NumerableIconOverrides](
		GTypeNumerableIcon,
		initNumerableIconClass,
		wrapNumerableIcon,
		defaultNumerableIconOverrides,
	)
}

func initNumerableIconClass(gclass unsafe.Pointer, overrides NumerableIconOverrides, classInitFunc func(*NumerableIconClass)) {
	if classInitFunc != nil {
		class := (*NumerableIconClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNumerableIcon(obj *coreglib.Object) *NumerableIcon {
	return &NumerableIcon{
		EmblemedIcon: gio.EmblemedIcon{
			Object: obj,
			Icon: gio.Icon{
				Object: obj,
			},
		},
	}
}

func marshalNumerableIcon(p uintptr) (interface{}, error) {
	return wrapNumerableIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NumerableIconClass: instance of this type is always passed by reference.
type NumerableIconClass struct {
	*numerableIconClass
}

// numerableIconClass is the struct that's finalized.
type numerableIconClass struct {
	native *C.GtkNumerableIconClass
}

func (n *NumerableIconClass) ParentClass() *gio.EmblemedIconClass {
	valptr := &n.native.parent_class
	var _v *gio.EmblemedIconClass // out
	_v = (*gio.EmblemedIconClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

func (n *NumerableIconClass) Padding() [16]unsafe.Pointer {
	valptr := &n.native.padding
	var _v [16]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 16; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
