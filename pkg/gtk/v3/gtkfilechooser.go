// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern GtkFileChooserConfirmation _gotk4_gtk3_FileChooser_ConnectConfirmOverwrite(gpointer, guintptr);
// extern void _gotk4_gtk3_FileChooser_ConnectCurrentFolderChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_FileChooser_ConnectFileActivated(gpointer, guintptr);
// extern void _gotk4_gtk3_FileChooser_ConnectSelectionChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_FileChooser_ConnectUpdatePreview(gpointer, guintptr);
import "C"

// glib.Type values for gtkfilechooser.go.
var (
	GTypeFileChooserAction       = externglib.Type(C.gtk_file_chooser_action_get_type())
	GTypeFileChooserConfirmation = externglib.Type(C.gtk_file_chooser_confirmation_get_type())
	GTypeFileChooserError        = externglib.Type(C.gtk_file_chooser_error_get_type())
	GTypeFileChooser             = externglib.Type(C.gtk_file_chooser_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeFileChooserAction, F: marshalFileChooserAction},
		{T: GTypeFileChooserConfirmation, F: marshalFileChooserConfirmation},
		{T: GTypeFileChooserError, F: marshalFileChooserError},
		{T: GTypeFileChooser, F: marshalFileChooser},
	})
}

// FileChooserAction describes whether a FileChooser is being used to open
// existing files or to save to a possibly new file.
type FileChooserAction C.gint

const (
	// FileChooserActionOpen indicates open mode. The file chooser will only let
	// the user pick an existing file.
	FileChooserActionOpen FileChooserAction = iota
	// FileChooserActionSave indicates save mode. The file chooser will let the
	// user pick an existing file, or type in a new filename.
	FileChooserActionSave
	// FileChooserActionSelectFolder indicates an Open mode for selecting
	// folders. The file chooser will let the user pick an existing folder.
	FileChooserActionSelectFolder
	// FileChooserActionCreateFolder indicates a mode for creating a new folder.
	// The file chooser will let the user name an existing or new folder.
	FileChooserActionCreateFolder
)

func marshalFileChooserAction(p uintptr) (interface{}, error) {
	return FileChooserAction(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserAction.
func (f FileChooserAction) String() string {
	switch f {
	case FileChooserActionOpen:
		return "Open"
	case FileChooserActionSave:
		return "Save"
	case FileChooserActionSelectFolder:
		return "SelectFolder"
	case FileChooserActionCreateFolder:
		return "CreateFolder"
	default:
		return fmt.Sprintf("FileChooserAction(%d)", f)
	}
}

// FileChooserConfirmation: used as a return value of handlers for the
// FileChooser::confirm-overwrite signal of a FileChooser. This value determines
// whether the file chooser will present the stock confirmation dialog, accept
// the user’s choice of a filename, or let the user choose another filename.
type FileChooserConfirmation C.gint

const (
	// FileChooserConfirmationConfirm: file chooser will present its stock
	// dialog to confirm about overwriting an existing file.
	FileChooserConfirmationConfirm FileChooserConfirmation = iota
	// FileChooserConfirmationAcceptFilename: file chooser will terminate and
	// accept the user’s choice of a file name.
	FileChooserConfirmationAcceptFilename
	// FileChooserConfirmationSelectAgain: file chooser will continue running,
	// so as to let the user select another file name.
	FileChooserConfirmationSelectAgain
)

func marshalFileChooserConfirmation(p uintptr) (interface{}, error) {
	return FileChooserConfirmation(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserConfirmation.
func (f FileChooserConfirmation) String() string {
	switch f {
	case FileChooserConfirmationConfirm:
		return "Confirm"
	case FileChooserConfirmationAcceptFilename:
		return "AcceptFilename"
	case FileChooserConfirmationSelectAgain:
		return "SelectAgain"
	default:
		return fmt.Sprintf("FileChooserConfirmation(%d)", f)
	}
}

// FileChooserError: these identify the various errors that can occur while
// calling FileChooser functions.
type FileChooserError C.gint

const (
	// FileChooserErrorNonexistent indicates that a file does not exist.
	FileChooserErrorNonexistent FileChooserError = iota
	// FileChooserErrorBadFilename indicates a malformed filename.
	FileChooserErrorBadFilename
	// FileChooserErrorAlreadyExists indicates a duplicate path (e.g. when
	// adding a bookmark).
	FileChooserErrorAlreadyExists
	// FileChooserErrorIncompleteHostname indicates an incomplete hostname (e.g.
	// "http://foo" without a slash after that).
	FileChooserErrorIncompleteHostname
)

func marshalFileChooserError(p uintptr) (interface{}, error) {
	return FileChooserError(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserError.
func (f FileChooserError) String() string {
	switch f {
	case FileChooserErrorNonexistent:
		return "Nonexistent"
	case FileChooserErrorBadFilename:
		return "BadFilename"
	case FileChooserErrorAlreadyExists:
		return "AlreadyExists"
	case FileChooserErrorIncompleteHostname:
		return "IncompleteHostname"
	default:
		return fmt.Sprintf("FileChooserError(%d)", f)
	}
}

// FileChooserErrorQuark registers an error quark for FileChooser if necessary.
//
// The function returns the following values:
//
//    - quark: error quark used for FileChooser errors.
//
func FileChooserErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.gtk_file_chooser_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

// FileChooserOverrider contains methods that are overridable.
type FileChooserOverrider interface {
	externglib.Objector
}

// FileChooser is an interface that can be implemented by file selection
// widgets. In GTK+, the main objects that implement this interface are
// FileChooserWidget, FileChooserDialog, and FileChooserButton. You do not need
// to write an object that implements the FileChooser interface unless you are
// trying to adapt an existing file selector to expose a standard programming
// interface.
//
// FileChooser allows for shortcuts to various places in the filesystem. In the
// default implementation these are displayed in the left pane. It may be a bit
// confusing at first that these shortcuts come from various sources and in
// various flavours, so lets explain the terminology here:
//
// - Bookmarks: are created by the user, by dragging folders from the right pane
// to the left pane, or by using the “Add”. Bookmarks can be renamed and deleted
// by the user.
//
// - Shortcuts: can be provided by the application. For example, a Paint program
// may want to add a shortcut for a Clipart folder. Shortcuts cannot be modified
// by the user.
//
// - Volumes: are provided by the underlying filesystem abstraction. They are
// the “roots” of the filesystem.
//
//
// File Names and Encodings
//
// When the user is finished selecting files in a FileChooser, your program can
// get the selected names either as filenames or as URIs. For URIs, the normal
// escaping rules are applied if the URI contains non-ASCII characters. However,
// filenames are always returned in the character set specified by the
// G_FILENAME_ENCODING environment variable. Please see the GLib documentation
// for more details about this variable.
//
// This means that while you can pass the result of
// gtk_file_chooser_get_filename() to g_open() or g_fopen(), you may not be able
// to directly set it as the text of a Label widget unless you convert it first
// to UTF-8, which all GTK+ widgets expect. You should use g_filename_to_utf8()
// to convert filenames into strings that can be passed to GTK+ widgets.
//
//
// Adding a Preview Widget
//
// You can add a custom preview widget to a file chooser and then get
// notification about when the preview needs to be updated. To install a preview
// widget, use gtk_file_chooser_set_preview_widget(). Then, connect to the
// FileChooser::update-preview signal to get notified when you need to update
// the contents of the preview.
//
// Your callback should use gtk_file_chooser_get_preview_filename() to see what
// needs previewing. Once you have generated the preview for the corresponding
// file, you must call gtk_file_chooser_set_preview_widget_active() with a
// boolean flag that indicates whether your callback could successfully generate
// a preview.
//
// Example: Using a Preview Widget
//
//
//      GtkWidget *toggle;
//
//      ...
//
//      toggle = gtk_check_button_new_with_label ("Open file read-only");
//      gtk_widget_show (toggle);
//      gtk_file_chooser_set_extra_widget (my_file_chooser, toggle);
//    }
//
// If you want to set more than one extra widget in the file chooser, you can a
// container such as a Box or a Grid and include your widgets in it. Then, set
// the container as the whole extra widget.
type FileChooser struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*FileChooser)(nil)
)

// FileChooserer describes FileChooser's interface methods.
type FileChooserer interface {
	externglib.Objector

	// AddChoice adds a 'choice' to the file chooser.
	AddChoice(id, label string, options, optionLabels []string)
	// AddFilter adds filter to the list of filters that the user can select
	// between.
	AddFilter(filter *FileFilter)
	// AddShortcutFolder adds a folder to be displayed with the shortcut folders
	// in a file chooser.
	AddShortcutFolder(folder string) error
	// AddShortcutFolderURI adds a folder URI to be displayed with the shortcut
	// folders in a file chooser.
	AddShortcutFolderURI(uri string) error
	// Action gets the type of operation that the file chooser is performing;
	// see gtk_file_chooser_set_action().
	Action() FileChooserAction
	// Choice gets the currently selected option in the 'choice' with the given
	// ID.
	Choice(id string) string
	// CreateFolders gets whether file choser will offer to create new folders.
	CreateFolders() bool
	// CurrentFolder gets the current folder of chooser as a local filename.
	CurrentFolder() string
	// CurrentFolderFile gets the current folder of chooser as #GFile.
	CurrentFolderFile() gio.FileOverrider
	// CurrentFolderURI gets the current folder of chooser as an URI.
	CurrentFolderURI() string
	// CurrentName gets the current name in the file selector, as entered by the
	// user in the text entry for “Name”.
	CurrentName() string
	// DoOverwriteConfirmation queries whether a file chooser is set to confirm
	// for overwriting when the user types a file name that already exists.
	DoOverwriteConfirmation() bool
	// ExtraWidget gets the current extra widget; see
	// gtk_file_chooser_set_extra_widget().
	ExtraWidget() Widgetter
	// File gets the #GFile for the currently selected file in the file
	// selector.
	File() gio.FileOverrider
	// Filename gets the filename for the currently selected file in the file
	// selector.
	Filename() string
	// Filenames lists all the selected files and subfolders in the current
	// folder of chooser.
	Filenames() []string
	// Files lists all the selected files and subfolders in the current folder
	// of chooser as #GFile.
	Files() []gio.FileOverrider
	// Filter gets the current filter; see gtk_file_chooser_set_filter().
	Filter() *FileFilter
	// LocalOnly gets whether only local files can be selected in the file
	// selector.
	LocalOnly() bool
	// PreviewFile gets the #GFile that should be previewed in a custom preview
	// Internal function, see gtk_file_chooser_get_preview_uri().
	PreviewFile() gio.FileOverrider
	// PreviewFilename gets the filename that should be previewed in a custom
	// preview widget.
	PreviewFilename() string
	// PreviewURI gets the URI that should be previewed in a custom preview
	// widget.
	PreviewURI() string
	// PreviewWidget gets the current preview widget; see
	// gtk_file_chooser_set_preview_widget().
	PreviewWidget() Widgetter
	// PreviewWidgetActive gets whether the preview widget set by
	// gtk_file_chooser_set_preview_widget() should be shown for the current
	// filename.
	PreviewWidgetActive() bool
	// SelectMultiple gets whether multiple files can be selected in the file
	// selector.
	SelectMultiple() bool
	// ShowHidden gets whether hidden files and folders are displayed in the
	// file selector.
	ShowHidden() bool
	// URI gets the URI for the currently selected file in the file selector.
	URI() string
	// URIs lists all the selected files and subfolders in the current folder of
	// chooser.
	URIs() []string
	// UsePreviewLabel gets whether a stock label should be drawn with the name
	// of the previewed file.
	UsePreviewLabel() bool
	// ListFilters lists the current set of user-selectable filters; see
	// gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
	ListFilters() []FileFilter
	// ListShortcutFolderURIs queries the list of shortcut folders in the file
	// chooser, as set by gtk_file_chooser_add_shortcut_folder_uri().
	ListShortcutFolderURIs() []string
	// ListShortcutFolders queries the list of shortcut folders in the file
	// chooser, as set by gtk_file_chooser_add_shortcut_folder().
	ListShortcutFolders() []string
	// RemoveChoice removes a 'choice' that has been added with
	// gtk_file_chooser_add_choice().
	RemoveChoice(id string)
	// RemoveFilter removes filter from the list of filters that the user can
	// select between.
	RemoveFilter(filter *FileFilter)
	// RemoveShortcutFolder removes a folder from a file chooser’s list of
	// shortcut folders.
	RemoveShortcutFolder(folder string) error
	// RemoveShortcutFolderURI removes a folder URI from a file chooser’s list
	// of shortcut folders.
	RemoveShortcutFolderURI(uri string) error
	// SelectAll selects all the files in the current folder of a file chooser.
	SelectAll()
	// SelectFile selects the file referred to by file.
	SelectFile(file gio.FileOverrider) error
	// SelectFilename selects a filename.
	SelectFilename(filename string) bool
	// SelectURI selects the file to by uri.
	SelectURI(uri string) bool
	// SetAction sets the type of operation that the chooser is performing; the
	// user interface is adapted to suit the selected action.
	SetAction(action FileChooserAction)
	// SetChoice selects an option in a 'choice' that has been added with
	// gtk_file_chooser_add_choice().
	SetChoice(id, option string)
	// SetCreateFolders sets whether file choser will offer to create new
	// folders.
	SetCreateFolders(createFolders bool)
	// SetCurrentFolder sets the current folder for chooser from a local
	// filename.
	SetCurrentFolder(filename string) bool
	// SetCurrentFolderFile sets the current folder for chooser from a #GFile.
	SetCurrentFolderFile(file gio.FileOverrider) error
	// SetCurrentFolderURI sets the current folder for chooser from an URI.
	SetCurrentFolderURI(uri string) bool
	// SetCurrentName sets the current name in the file selector, as if entered
	// by the user.
	SetCurrentName(name string)
	// SetDoOverwriteConfirmation sets whether a file chooser in
	// GTK_FILE_CHOOSER_ACTION_SAVE mode will present a confirmation dialog if
	// the user types a file name that already exists.
	SetDoOverwriteConfirmation(doOverwriteConfirmation bool)
	// SetExtraWidget sets an application-supplied widget to provide extra
	// options to the user.
	SetExtraWidget(extraWidget Widgetter)
	// SetFile sets file as the current filename for the file chooser, by
	// changing to the file’s parent folder and actually selecting the file in
	// list.
	SetFile(file gio.FileOverrider) error
	// SetFilename sets filename as the current filename for the file chooser,
	// by changing to the file’s parent folder and actually selecting the file
	// in list; all other files will be unselected.
	SetFilename(filename string) bool
	// SetFilter sets the current filter; only the files that pass the filter
	// will be displayed.
	SetFilter(filter *FileFilter)
	// SetLocalOnly sets whether only local files can be selected in the file
	// selector.
	SetLocalOnly(localOnly bool)
	// SetPreviewWidget sets an application-supplied widget to use to display a
	// custom preview of the currently selected file.
	SetPreviewWidget(previewWidget Widgetter)
	// SetPreviewWidgetActive sets whether the preview widget set by
	// gtk_file_chooser_set_preview_widget() should be shown for the current
	// filename.
	SetPreviewWidgetActive(active bool)
	// SetSelectMultiple sets whether multiple files can be selected in the file
	// selector.
	SetSelectMultiple(selectMultiple bool)
	// SetShowHidden sets whether hidden files and folders are displayed in the
	// file selector.
	SetShowHidden(showHidden bool)
	// SetURI sets the file referred to by uri as the current file for the file
	// chooser, by changing to the URI’s parent folder and actually selecting
	// the URI in the list.
	SetURI(uri string) bool
	// SetUsePreviewLabel sets whether the file chooser should display a stock
	// label with the name of the file that is being previewed; the default is
	// TRUE.
	SetUsePreviewLabel(useLabel bool)
	// UnselectAll unselects all the files in the current folder of a file
	// chooser.
	UnselectAll()
	// UnselectFile unselects the file referred to by file.
	UnselectFile(file gio.FileOverrider)
	// UnselectFilename unselects a currently selected filename.
	UnselectFilename(filename string)
	// UnselectURI unselects the file referred to by uri.
	UnselectURI(uri string)

	// Confirm-overwrite: this signal gets emitted whenever it is appropriate to
	// present a confirmation dialog when the user has selected a file name that
	// already exists.
	ConnectConfirmOverwrite(func() (fileChooserConfirmation FileChooserConfirmation)) externglib.SignalHandle
	// Current-folder-changed: this signal is emitted when the current folder in
	// a FileChooser changes.
	ConnectCurrentFolderChanged(func()) externglib.SignalHandle
	// File-activated: this signal is emitted when the user "activates" a file
	// in the file chooser.
	ConnectFileActivated(func()) externglib.SignalHandle
	// Selection-changed: this signal is emitted when there is a change in the
	// set of selected files in a FileChooser.
	ConnectSelectionChanged(func()) externglib.SignalHandle
	// Update-preview: this signal is emitted when the preview in a file chooser
	// should be regenerated.
	ConnectUpdatePreview(func()) externglib.SignalHandle
}

var _ FileChooserer = (*FileChooser)(nil)

func wrapFileChooser(obj *externglib.Object) *FileChooser {
	return &FileChooser{
		Object: obj,
	}
}

func marshalFileChooser(p uintptr) (interface{}, error) {
	return wrapFileChooser(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_FileChooser_ConnectConfirmOverwrite
func _gotk4_gtk3_FileChooser_ConnectConfirmOverwrite(arg0 C.gpointer, arg1 C.guintptr) (cret C.GtkFileChooserConfirmation) {
	var f func() (fileChooserConfirmation FileChooserConfirmation)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (fileChooserConfirmation FileChooserConfirmation))
	}

	fileChooserConfirmation := f()

	cret = C.GtkFileChooserConfirmation(fileChooserConfirmation)

	return cret
}

// ConnectConfirmOverwrite: this signal gets emitted whenever it is appropriate
// to present a confirmation dialog when the user has selected a file name that
// already exists. The signal only gets emitted when the file chooser is in
// GTK_FILE_CHOOSER_ACTION_SAVE mode.
//
// Most applications just need to turn on the
// FileChooser:do-overwrite-confirmation property (or call the
// gtk_file_chooser_set_do_overwrite_confirmation() function), and they will
// automatically get a stock confirmation dialog. Applications which need to
// customize this behavior should do that, and also connect to the
// FileChooser::confirm-overwrite signal.
//
// A signal handler for this signal must return a FileChooserConfirmation value,
// which indicates the action to take. If the handler determines that the user
// wants to select a different filename, it should return
// GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN. If it determines that the user is
// satisfied with his choice of file name, it should return
// GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME. On the other hand, if it
// determines that the stock confirmation dialog should be used, it should
// return GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM. The following example
// illustrates this.
//
// Custom confirmation
//
//    static GtkFileChooserConfirmation
//    confirm_overwrite_callback (GtkFileChooser *chooser, gpointer data)
//    {
//      char *uri;
//
//      uri = gtk_file_chooser_get_uri (chooser);
//
//      if (is_uri_read_only (uri))
//        {
//          if (user_wants_to_replace_read_only_file (uri))
//            return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME;
//          else
//            return GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN;
//        } else
//          return GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM; // fall back to the default dialog
//    }
//
//    ...
//
//    chooser = gtk_file_chooser_dialog_new (...);
//
//    gtk_file_chooser_set_do_overwrite_confirmation (GTK_FILE_CHOOSER (dialog), TRUE);
//    g_signal_connect (chooser, "confirm-overwrite",
//                      G_CALLBACK (confirm_overwrite_callback), NULL);
//
//    if (gtk_dialog_run (chooser) == GTK_RESPONSE_ACCEPT)
//            save_to_file (gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (chooser));
//
//    gtk_widget_destroy (chooser);.
func (chooser *FileChooser) ConnectConfirmOverwrite(f func() (fileChooserConfirmation FileChooserConfirmation)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(chooser, "confirm-overwrite", false, unsafe.Pointer(C._gotk4_gtk3_FileChooser_ConnectConfirmOverwrite), f)
}

//export _gotk4_gtk3_FileChooser_ConnectCurrentFolderChanged
func _gotk4_gtk3_FileChooser_ConnectCurrentFolderChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCurrentFolderChanged: this signal is emitted when the current folder
// in a FileChooser changes. This can happen due to the user performing some
// action that changes folders, such as selecting a bookmark or visiting a
// folder on the file list. It can also happen as a result of calling a function
// to explicitly change the current folder in a file chooser.
//
// Normally you do not need to connect to this signal, unless you need to keep
// track of which folder a file chooser is showing.
//
// See also: gtk_file_chooser_set_current_folder(),
// gtk_file_chooser_get_current_folder(),
// gtk_file_chooser_set_current_folder_uri(),
// gtk_file_chooser_get_current_folder_uri().
func (chooser *FileChooser) ConnectCurrentFolderChanged(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(chooser, "current-folder-changed", false, unsafe.Pointer(C._gotk4_gtk3_FileChooser_ConnectCurrentFolderChanged), f)
}

//export _gotk4_gtk3_FileChooser_ConnectFileActivated
func _gotk4_gtk3_FileChooser_ConnectFileActivated(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectFileActivated: this signal is emitted when the user "activates" a file
// in the file chooser. This can happen by double-clicking on a file in the file
// list, or by pressing Enter.
//
// Normally you do not need to connect to this signal. It is used internally by
// FileChooserDialog to know when to activate the default button in the dialog.
//
// See also: gtk_file_chooser_get_filename(), gtk_file_chooser_get_filenames(),
// gtk_file_chooser_get_uri(), gtk_file_chooser_get_uris().
func (chooser *FileChooser) ConnectFileActivated(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(chooser, "file-activated", false, unsafe.Pointer(C._gotk4_gtk3_FileChooser_ConnectFileActivated), f)
}

//export _gotk4_gtk3_FileChooser_ConnectSelectionChanged
func _gotk4_gtk3_FileChooser_ConnectSelectionChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectionChanged: this signal is emitted when there is a change in the
// set of selected files in a FileChooser. This can happen when the user
// modifies the selection with the mouse or the keyboard, or when explicitly
// calling functions to change the selection.
//
// Normally you do not need to connect to this signal, as it is easier to wait
// for the file chooser to finish running, and then to get the list of selected
// files using the functions mentioned below.
//
// See also: gtk_file_chooser_select_filename(),
// gtk_file_chooser_unselect_filename(), gtk_file_chooser_get_filename(),
// gtk_file_chooser_get_filenames(), gtk_file_chooser_select_uri(),
// gtk_file_chooser_unselect_uri(), gtk_file_chooser_get_uri(),
// gtk_file_chooser_get_uris().
func (chooser *FileChooser) ConnectSelectionChanged(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(chooser, "selection-changed", false, unsafe.Pointer(C._gotk4_gtk3_FileChooser_ConnectSelectionChanged), f)
}

//export _gotk4_gtk3_FileChooser_ConnectUpdatePreview
func _gotk4_gtk3_FileChooser_ConnectUpdatePreview(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUpdatePreview: this signal is emitted when the preview in a file
// chooser should be regenerated. For example, this can happen when the
// currently selected file changes. You should use this signal if you want your
// file chooser to have a preview widget.
//
// Once you have installed a preview widget with
// gtk_file_chooser_set_preview_widget(), you should update it when this signal
// is emitted. You can use the functions gtk_file_chooser_get_preview_filename()
// or gtk_file_chooser_get_preview_uri() to get the name of the file to preview.
// Your widget may not be able to preview all kinds of files; your callback must
// call gtk_file_chooser_set_preview_widget_active() to inform the file chooser
// about whether the preview was generated successfully or not.
//
// Please see the example code in [Using a Preview
// Widget][gtkfilechooser-preview].
//
// See also: gtk_file_chooser_set_preview_widget(),
// gtk_file_chooser_set_preview_widget_active(),
// gtk_file_chooser_set_use_preview_label(),
// gtk_file_chooser_get_preview_filename(), gtk_file_chooser_get_preview_uri().
func (chooser *FileChooser) ConnectUpdatePreview(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(chooser, "update-preview", false, unsafe.Pointer(C._gotk4_gtk3_FileChooser_ConnectUpdatePreview), f)
}

// AddChoice adds a 'choice' to the file chooser. This is typically implemented
// as a combobox or, for boolean choices, as a checkbutton. You can select a
// value using gtk_file_chooser_set_choice() before the dialog is shown, and you
// can obtain the user-selected value in the ::response signal handler using
// gtk_file_chooser_get_choice().
//
// Compare gtk_file_chooser_set_extra_widget().
//
// The function takes the following parameters:
//
//    - id for the added choice.
//    - label: user-visible label for the added choice.
//    - options (optional) ids for the options of the choice, or NULL for a
//      boolean choice.
//    - optionLabels (optional): user-visible labels for the options, must be the
//      same length as options.
//
func (chooser *FileChooser) AddChoice(id, label string, options, optionLabels []string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _arg2 *C.char           // out
	var _arg3 **C.char          // out
	var _arg4 **C.char          // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		_arg3 = (**C.char)(C.calloc(C.size_t((len(options) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg3))
		{
			out := unsafe.Slice(_arg3, len(options)+1)
			var zero *C.char
			out[len(options)] = zero
			for i := range options {
				out[i] = (*C.char)(unsafe.Pointer(C.CString(options[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	{
		_arg4 = (**C.char)(C.calloc(C.size_t((len(optionLabels) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg4))
		{
			out := unsafe.Slice(_arg4, len(optionLabels)+1)
			var zero *C.char
			out[len(optionLabels)] = zero
			for i := range optionLabels {
				out[i] = (*C.char)(unsafe.Pointer(C.CString(optionLabels[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	C.gtk_file_chooser_add_choice(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
	runtime.KeepAlive(label)
	runtime.KeepAlive(options)
	runtime.KeepAlive(optionLabels)
}

// AddFilter adds filter to the list of filters that the user can select
// between. When a filter is selected, only files that are passed by that filter
// are displayed.
//
// Note that the chooser takes ownership of the filter, so you have to ref and
// sink it if you want to keep a reference.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) AddFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(externglib.InternObject(filter).Native()))
	C.g_object_ref(C.gpointer(externglib.InternObject(filter).Native()))

	C.gtk_file_chooser_add_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// AddShortcutFolder adds a folder to be displayed with the shortcut folders in
// a file chooser. Note that shortcut folders do not get saved, as they are
// provided by the application. For example, you can use this to add a
// “/usr/share/mydrawprogram/Clipart” folder to the volume list.
//
// The function takes the following parameters:
//
//    - folder: filename of the folder to add.
//
func (chooser *FileChooser) AddShortcutFolder(folder string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(folder)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_add_shortcut_folder(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AddShortcutFolderURI adds a folder URI to be displayed with the shortcut
// folders in a file chooser. Note that shortcut folders do not get saved, as
// they are provided by the application. For example, you can use this to add a
// “file:///usr/share/mydrawprogram/Clipart” folder to the volume list.
//
// The function takes the following parameters:
//
//    - uri: URI of the folder to add.
//
func (chooser *FileChooser) AddShortcutFolderURI(uri string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_add_shortcut_folder_uri(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Action gets the type of operation that the file chooser is performing; see
// gtk_file_chooser_set_action().
//
// The function returns the following values:
//
//    - fileChooserAction: action that the file selector is performing.
//
func (chooser *FileChooser) Action() FileChooserAction {
	var _arg0 *C.GtkFileChooser      // out
	var _cret C.GtkFileChooserAction // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_action(_arg0)
	runtime.KeepAlive(chooser)

	var _fileChooserAction FileChooserAction // out

	_fileChooserAction = FileChooserAction(_cret)

	return _fileChooserAction
}

// Choice gets the currently selected option in the 'choice' with the given ID.
//
// The function takes the following parameters:
//
//    - id: ID of the choice to get.
//
// The function returns the following values:
//
//    - utf8: ID of the currenly selected option.
//
func (chooser *FileChooser) Choice(id string) string {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_get_choice(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// CreateFolders gets whether file choser will offer to create new folders. See
// gtk_file_chooser_set_create_folders().
//
// The function returns the following values:
//
//    - ok: TRUE if the Create Folder button should be displayed.
//
func (chooser *FileChooser) CreateFolders() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_create_folders(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CurrentFolder gets the current folder of chooser as a local filename. See
// gtk_file_chooser_set_current_folder().
//
// Note that this is the folder that the file chooser is currently displaying
// (e.g. "/home/username/Documents"), which is not the same as the
// currently-selected folder if the chooser is in
// GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode (e.g.
// "/home/username/Documents/selected-folder/". To get the currently-selected
// folder in that mode, use gtk_file_chooser_get_uri() as the usual way to get
// the selection.
//
// The function returns the following values:
//
//    - filename (optional): full path of the current folder, or NULL if the
//      current path cannot be represented as a local filename. Free with
//      g_free(). This function will also return NULL if the file chooser was
//      unable to load the last folder that was requested from it; for example,
//      as would be for calling gtk_file_chooser_set_current_folder() on a
//      nonexistent folder.
//
func (chooser *FileChooser) CurrentFolder() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_folder(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// CurrentFolderFile gets the current folder of chooser as #GFile. See
// gtk_file_chooser_get_current_folder_uri().
//
// The function returns the following values:
//
//    - file for the current folder.
//
func (chooser *FileChooser) CurrentFolderFile() gio.FileOverrider {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GFile          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_folder_file(_arg0)
	runtime.KeepAlive(chooser)

	var _file gio.FileOverrider // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.FileOverrider)
			return ok
		})
		rv, ok := casted.(gio.FileOverrider)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
		}
		_file = rv
	}

	return _file
}

// CurrentFolderURI gets the current folder of chooser as an URI. See
// gtk_file_chooser_set_current_folder_uri().
//
// Note that this is the folder that the file chooser is currently displaying
// (e.g. "file:///home/username/Documents"), which is not the same as the
// currently-selected folder if the chooser is in
// GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode (e.g.
// "file:///home/username/Documents/selected-folder/". To get the
// currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
// usual way to get the selection.
//
// The function returns the following values:
//
//    - utf8 (optional): URI for the current folder. Free with g_free(). This
//      function will also return NULL if the file chooser was unable to load the
//      last folder that was requested from it; for example, as would be for
//      calling gtk_file_chooser_set_current_folder_uri() on a nonexistent
//      folder.
//
func (chooser *FileChooser) CurrentFolderURI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_folder_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// CurrentName gets the current name in the file selector, as entered by the
// user in the text entry for “Name”.
//
// This is meant to be used in save dialogs, to get the currently typed filename
// when the file itself does not exist yet. For example, an application that
// adds a custom extra widget to the file chooser for “file format” may want to
// change the extension of the typed filename based on the chosen format, say,
// from “.jpg” to “.png”.
//
// The function returns the following values:
//
//    - utf8: raw text from the file chooser’s “Name” entry. Free this with
//      g_free(). Note that this string is not a full pathname or URI; it is
//      whatever the contents of the entry are. Note also that this string is in
//      UTF-8 encoding, which is not necessarily the system’s encoding for
//      filenames.
//
func (chooser *FileChooser) CurrentName() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_name(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DoOverwriteConfirmation queries whether a file chooser is set to confirm for
// overwriting when the user types a file name that already exists.
//
// The function returns the following values:
//
//    - ok: TRUE if the file chooser will present a confirmation dialog; FALSE
//      otherwise.
//
func (chooser *FileChooser) DoOverwriteConfirmation() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_do_overwrite_confirmation(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ExtraWidget gets the current extra widget; see
// gtk_file_chooser_set_extra_widget().
//
// The function returns the following values:
//
//    - widget (optional): current extra widget, or NULL.
//
func (chooser *FileChooser) ExtraWidget() Widgetter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_extra_widget(_arg0)
	runtime.KeepAlive(chooser)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// File gets the #GFile for the currently selected file in the file selector. If
// multiple files are selected, one of the files will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - file: selected #GFile. You own the returned file; use g_object_unref() to
//      release it.
//
func (chooser *FileChooser) File() gio.FileOverrider {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GFile          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_file(_arg0)
	runtime.KeepAlive(chooser)

	var _file gio.FileOverrider // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gio.FileOverrider)
			return ok
		})
		rv, ok := casted.(gio.FileOverrider)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
		}
		_file = rv
	}

	return _file
}

// Filename gets the filename for the currently selected file in the file
// selector. The filename is returned as an absolute path. If multiple files are
// selected, one of the filenames will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - filename (optional): currently selected filename, or NULL if no file is
//      selected, or the selected file can't be represented with a local
//      filename. Free with g_free().
//
func (chooser *FileChooser) Filename() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filename(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// Filenames lists all the selected files and subfolders in the current folder
// of chooser. The returned names are full absolute paths. If files in the
// current folder cannot be represented as local filenames they will be ignored.
// (See gtk_file_chooser_get_uris()).
//
// The function returns the following values:
//
//    - sList: List containing the filenames of all selected files and subfolders
//      in the current folder. Free the returned list with g_slist_free(), and
//      the filenames with g_free().
//
func (chooser *FileChooser) Filenames() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filenames(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		defer C.free(unsafe.Pointer(src))
		_sList = append(_sList, dst)
	})

	return _sList
}

// Files lists all the selected files and subfolders in the current folder of
// chooser as #GFile. An internal function, see gtk_file_chooser_get_uris().
//
// The function returns the following values:
//
//    - sList: List containing a #GFile for each selected file and subfolder in
//      the current folder. Free the returned list with g_slist_free(), and the
//      files with g_object_unref().
//
func (chooser *FileChooser) Files() []gio.FileOverrider {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_files(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []gio.FileOverrider // out

	_sList = make([]gio.FileOverrider, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GFile)(v)
		var dst gio.FileOverrider // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gio.Filer is nil")
			}

			object := externglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gio.FileOverrider)
				return ok
			})
			rv, ok := casted.(gio.FileOverrider)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
			}
			dst = rv
		}
		_sList = append(_sList, dst)
	})

	return _sList
}

// Filter gets the current filter; see gtk_file_chooser_set_filter().
//
// The function returns the following values:
//
//    - fileFilter (optional): current filter, or NULL.
//
func (chooser *FileChooser) Filter() *FileFilter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkFileFilter  // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filter(_arg0)
	runtime.KeepAlive(chooser)

	var _fileFilter *FileFilter // out

	if _cret != nil {
		_fileFilter = wrapFileFilter(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _fileFilter
}

// LocalOnly gets whether only local files can be selected in the file selector.
// See gtk_file_chooser_set_local_only().
//
// The function returns the following values:
//
//    - ok: TRUE if only local files can be selected.
//
func (chooser *FileChooser) LocalOnly() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_local_only(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PreviewFile gets the #GFile that should be previewed in a custom preview
// Internal function, see gtk_file_chooser_get_preview_uri().
//
// The function returns the following values:
//
//    - file (optional) for the file to preview, or NULL if no file is selected.
//      Free with g_object_unref().
//
func (chooser *FileChooser) PreviewFile() gio.FileOverrider {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GFile          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_file(_arg0)
	runtime.KeepAlive(chooser)

	var _file gio.FileOverrider // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gio.FileOverrider)
				return ok
			})
			rv, ok := casted.(gio.FileOverrider)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
			}
			_file = rv
		}
	}

	return _file
}

// PreviewFilename gets the filename that should be previewed in a custom
// preview widget. See gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - filename (optional) to preview, or NULL if no file is selected, or if the
//      selected file cannot be represented as a local filename. Free with
//      g_free().
//
func (chooser *FileChooser) PreviewFilename() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_filename(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// PreviewURI gets the URI that should be previewed in a custom preview widget.
// See gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - utf8 (optional): URI for the file to preview, or NULL if no file is
//      selected. Free with g_free().
//
func (chooser *FileChooser) PreviewURI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// PreviewWidget gets the current preview widget; see
// gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - widget (optional): current preview widget, or NULL.
//
func (chooser *FileChooser) PreviewWidget() Widgetter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_widget(_arg0)
	runtime.KeepAlive(chooser)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// PreviewWidgetActive gets whether the preview widget set by
// gtk_file_chooser_set_preview_widget() should be shown for the current
// filename. See gtk_file_chooser_set_preview_widget_active().
//
// The function returns the following values:
//
//    - ok: TRUE if the preview widget is active for the current filename.
//
func (chooser *FileChooser) PreviewWidgetActive() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_widget_active(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectMultiple gets whether multiple files can be selected in the file
// selector. See gtk_file_chooser_set_select_multiple().
//
// The function returns the following values:
//
//    - ok: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SelectMultiple() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_select_multiple(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowHidden gets whether hidden files and folders are displayed in the file
// selector. See gtk_file_chooser_set_show_hidden().
//
// The function returns the following values:
//
//    - ok: TRUE if hidden files and folders are displayed.
//
func (chooser *FileChooser) ShowHidden() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_show_hidden(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URI gets the URI for the currently selected file in the file selector. If
// multiple files are selected, one of the filenames will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - utf8 (optional): currently selected URI, or NULL if no file is selected.
//      If gtk_file_chooser_set_local_only() is set to TRUE (the default) a local
//      URI will be returned for any FUSE locations. Free with g_free().
//
func (chooser *FileChooser) URI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// URIs lists all the selected files and subfolders in the current folder of
// chooser. The returned names are full absolute URIs.
//
// The function returns the following values:
//
//    - sList containing the URIs of all selected files and subfolders in the
//      current folder. Free the returned list with g_slist_free(), and the
//      filenames with g_free().
//
func (chooser *FileChooser) URIs() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_uris(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		defer C.free(unsafe.Pointer(src))
		_sList = append(_sList, dst)
	})

	return _sList
}

// UsePreviewLabel gets whether a stock label should be drawn with the name of
// the previewed file. See gtk_file_chooser_set_use_preview_label().
//
// The function returns the following values:
//
//    - ok: TRUE if the file chooser is set to display a label with the name of
//      the previewed file, FALSE otherwise.
//
func (chooser *FileChooser) UsePreviewLabel() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_use_preview_label(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ListFilters lists the current set of user-selectable filters; see
// gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
//
// The function returns the following values:
//
//    - sList: a List containing the current set of user selectable filters. The
//      contents of the list are owned by GTK+, but you must free the list itself
//      with g_slist_free() when you are done with it.
//
func (chooser *FileChooser) ListFilters() []FileFilter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_filters(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []FileFilter // out

	_sList = make([]FileFilter, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkFileFilter)(v)
		var dst FileFilter // out
		dst = *wrapFileFilter(externglib.Take(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// ListShortcutFolderURIs queries the list of shortcut folders in the file
// chooser, as set by gtk_file_chooser_add_shortcut_folder_uri().
//
// The function returns the following values:
//
//    - sList (optional): list of folder URIs, or NULL if there are no shortcut
//      folders. Free the returned list with g_slist_free(), and the URIs with
//      g_free().
//
func (chooser *FileChooser) ListShortcutFolderURIs() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_shortcut_folder_uris(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	if _cret != nil {
		_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
		gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
			src := (*C.gchar)(v)
			var dst string // out
			dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
			defer C.free(unsafe.Pointer(src))
			_sList = append(_sList, dst)
		})
	}

	return _sList
}

// ListShortcutFolders queries the list of shortcut folders in the file chooser,
// as set by gtk_file_chooser_add_shortcut_folder().
//
// The function returns the following values:
//
//    - sList (optional): list of folder filenames, or NULL if there are no
//      shortcut folders. Free the returned list with g_slist_free(), and the
//      filenames with g_free().
//
func (chooser *FileChooser) ListShortcutFolders() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_shortcut_folders(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	if _cret != nil {
		_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
		gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
			src := (*C.gchar)(v)
			var dst string // out
			dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
			defer C.free(unsafe.Pointer(src))
			_sList = append(_sList, dst)
		})
	}

	return _sList
}

// RemoveChoice removes a 'choice' that has been added with
// gtk_file_chooser_add_choice().
//
// The function takes the following parameters:
//
//    - id: ID of the choice to remove.
//
func (chooser *FileChooser) RemoveChoice(id string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_remove_choice(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
}

// RemoveFilter removes filter from the list of filters that the user can select
// between.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) RemoveFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(externglib.InternObject(filter).Native()))

	C.gtk_file_chooser_remove_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// RemoveShortcutFolder removes a folder from a file chooser’s list of shortcut
// folders.
//
// The function takes the following parameters:
//
//    - folder: filename of the folder to remove.
//
func (chooser *FileChooser) RemoveShortcutFolder(folder string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(folder)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_remove_shortcut_folder(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveShortcutFolderURI removes a folder URI from a file chooser’s list of
// shortcut folders.
//
// The function takes the following parameters:
//
//    - uri: URI of the folder to remove.
//
func (chooser *FileChooser) RemoveShortcutFolderURI(uri string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_remove_shortcut_folder_uri(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SelectAll selects all the files in the current folder of a file chooser.
func (chooser *FileChooser) SelectAll() {
	var _arg0 *C.GtkFileChooser // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	C.gtk_file_chooser_select_all(_arg0)
	runtime.KeepAlive(chooser)
}

// SelectFile selects the file referred to by file. An internal function. See
// _gtk_file_chooser_select_uri().
//
// The function takes the following parameters:
//
//    - file to select.
//
func (chooser *FileChooser) SelectFile(file gio.FileOverrider) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GFile          // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(externglib.InternObject(file).Native()))

	C.gtk_file_chooser_select_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SelectFilename selects a filename. If the file name isn’t in the current
// folder of chooser, then the current folder of chooser will be changed to the
// folder containing filename.
//
// The function takes the following parameters:
//
//    - filename to select.
//
// The function returns the following values:
//
//    - ok: not useful.
//
//      See also: gtk_file_chooser_set_filename().
//
func (chooser *FileChooser) SelectFilename(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_select_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectURI selects the file to by uri. If the URI doesn’t refer to a file in
// the current folder of chooser, then the current folder of chooser will be
// changed to the folder containing filename.
//
// The function takes the following parameters:
//
//    - uri: URI to select.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SelectURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_select_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAction sets the type of operation that the chooser is performing; the user
// interface is adapted to suit the selected action. For example, an option to
// create a new folder might be shown if the action is
// GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
// GTK_FILE_CHOOSER_ACTION_OPEN.
//
// The function takes the following parameters:
//
//    - action that the file selector is performing.
//
func (chooser *FileChooser) SetAction(action FileChooserAction) {
	var _arg0 *C.GtkFileChooser      // out
	var _arg1 C.GtkFileChooserAction // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = C.GtkFileChooserAction(action)

	C.gtk_file_chooser_set_action(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(action)
}

// SetChoice selects an option in a 'choice' that has been added with
// gtk_file_chooser_add_choice(). For a boolean choice, the possible options are
// "true" and "false".
//
// The function takes the following parameters:
//
//    - id: ID of the choice to set.
//    - option: ID of the option to select.
//
func (chooser *FileChooser) SetChoice(id, option string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _arg2 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(option)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_file_chooser_set_choice(_arg0, _arg1, _arg2)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
	runtime.KeepAlive(option)
}

// SetCreateFolders sets whether file choser will offer to create new folders.
// This is only relevant if the action is not set to be
// GTK_FILE_CHOOSER_ACTION_OPEN.
//
// The function takes the following parameters:
//
//    - createFolders: TRUE if the Create Folder button should be displayed.
//
func (chooser *FileChooser) SetCreateFolders(createFolders bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if createFolders {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_create_folders(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(createFolders)
}

// SetCurrentFolder sets the current folder for chooser from a local filename.
// The user will be shown the full contents of the current folder, plus user
// interface elements for navigating to other folders.
//
// In general, you should not use this function. See the [section on setting up
// a file chooser dialog][gtkfilechooserdialog-setting-up] for the rationale
// behind this.
//
// The function takes the following parameters:
//
//    - filename: full path of the new current folder.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetCurrentFolder(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_current_folder(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCurrentFolderFile sets the current folder for chooser from a #GFile.
// Internal function, see gtk_file_chooser_set_current_folder_uri().
//
// The function takes the following parameters:
//
//    - file for the new folder.
//
func (chooser *FileChooser) SetCurrentFolderFile(file gio.FileOverrider) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GFile          // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(externglib.InternObject(file).Native()))

	C.gtk_file_chooser_set_current_folder_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetCurrentFolderURI sets the current folder for chooser from an URI. The user
// will be shown the full contents of the current folder, plus user interface
// elements for navigating to other folders.
//
// In general, you should not use this function. See the [section on setting up
// a file chooser dialog][gtkfilechooserdialog-setting-up] for the rationale
// behind this.
//
// The function takes the following parameters:
//
//    - uri: URI for the new current folder.
//
// The function returns the following values:
//
//    - ok: TRUE if the folder could be changed successfully, FALSE otherwise.
//
func (chooser *FileChooser) SetCurrentFolderURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_current_folder_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCurrentName sets the current name in the file selector, as if entered by
// the user. Note that the name passed in here is a UTF-8 string rather than a
// filename. This function is meant for such uses as a suggested name in a “Save
// As...” dialog. You can pass “Untitled.doc” or a similarly suitable suggestion
// for the name.
//
// If you want to preselect a particular existing file, you should use
// gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead. Please
// see the documentation for those functions for an example of using
// gtk_file_chooser_set_current_name() as well.
//
// The function takes the following parameters:
//
//    - name to use, as a UTF-8 string.
//
func (chooser *FileChooser) SetCurrentName(name string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_set_current_name(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(name)
}

// SetDoOverwriteConfirmation sets whether a file chooser in
// GTK_FILE_CHOOSER_ACTION_SAVE mode will present a confirmation dialog if the
// user types a file name that already exists. This is FALSE by default.
//
// If set to TRUE, the chooser will emit the FileChooser::confirm-overwrite
// signal when appropriate.
//
// If all you need is the stock confirmation dialog, set this property to TRUE.
// You can override the way confirmation is done by actually handling the
// FileChooser::confirm-overwrite signal; please refer to its documentation for
// the details.
//
// The function takes the following parameters:
//
//    - doOverwriteConfirmation: whether to confirm overwriting in save mode.
//
func (chooser *FileChooser) SetDoOverwriteConfirmation(doOverwriteConfirmation bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if doOverwriteConfirmation {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_do_overwrite_confirmation(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(doOverwriteConfirmation)
}

// SetExtraWidget sets an application-supplied widget to provide extra options
// to the user.
//
// The function takes the following parameters:
//
//    - extraWidget: widget for extra options.
//
func (chooser *FileChooser) SetExtraWidget(extraWidget Widgetter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(extraWidget).Native()))

	C.gtk_file_chooser_set_extra_widget(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(extraWidget)
}

// SetFile sets file as the current filename for the file chooser, by changing
// to the file’s parent folder and actually selecting the file in list. If the
// chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will
// also appear in the dialog’s file name entry.
//
// If the file name isn’t in the current folder of chooser, then the current
// folder of chooser will be changed to the folder containing filename. This is
// equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
// gtk_file_chooser_select_filename().
//
// Note that the file must exist, or nothing will be done except for the
// directory change.
//
// If you are implementing a save dialog, you should use this function if you
// already have a file name to which the user may save; for example, when the
// user opens an existing file and then does Save As... If you don’t have a file
// name already — for example, if the user just created a new file and is saving
// it for the first time, do not call this function. Instead, use something
// similar to this:
//
//    if (document_is_new)
//      {
//        // the user just created a new document
//        gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);
//        gtk_file_chooser_set_current_name (chooser, "Untitled document");
//      }
//    else
//      {
//        // the user edited an existing document
//        gtk_file_chooser_set_file (chooser, existing_file);
//      }.
//
// The function takes the following parameters:
//
//    - file to set as current.
//
func (chooser *FileChooser) SetFile(file gio.FileOverrider) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GFile          // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(externglib.InternObject(file).Native()))

	C.gtk_file_chooser_set_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetFilename sets filename as the current filename for the file chooser, by
// changing to the file’s parent folder and actually selecting the file in list;
// all other files will be unselected. If the chooser is in
// GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will also appear in
// the dialog’s file name entry.
//
// Note that the file must exist, or nothing will be done except for the
// directory change.
//
// You should use this function only when implementing a save dialog for which
// you already have a file name to which the user may save. For example, when
// the user opens an existing file and then does Save As... to save a copy or a
// modified version. If you don’t have a file name already — for example, if the
// user just created a new file and is saving it for the first time, do not call
// this function. Instead, use something similar to this:
//
//    if (document_is_new)
//      {
//        // the user just created a new document
//        gtk_file_chooser_set_current_name (chooser, "Untitled document");
//      }
//    else
//      {
//        // the user edited an existing document
//        gtk_file_chooser_set_filename (chooser, existing_filename);
//      }
//
// In the first case, the file chooser will present the user with useful
// suggestions as to where to save his new file. In the second case, the file’s
// existing location is already known, so the file chooser will use it.
//
// The function takes the following parameters:
//
//    - filename to set as current.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetFilename(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFilter sets the current filter; only the files that pass the filter will
// be displayed. If the user-selectable list of filters is non-empty, then the
// filter should be one of the filters in that list. Setting the current filter
// when the list of filters is empty is useful if you want to restrict the
// displayed set of files without letting the user change it.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) SetFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(externglib.InternObject(filter).Native()))

	C.gtk_file_chooser_set_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// SetLocalOnly sets whether only local files can be selected in the file
// selector. If local_only is TRUE (the default), then the selected file or
// files are guaranteed to be accessible through the operating systems native
// file system and therefore the application only needs to worry about the
// filename functions in FileChooser, like gtk_file_chooser_get_filename(),
// rather than the URI functions like gtk_file_chooser_get_uri(),
//
// On some systems non-native files may still be available using the native
// filesystem via a userspace filesystem (FUSE).
//
// The function takes the following parameters:
//
//    - localOnly: TRUE if only local files can be selected.
//
func (chooser *FileChooser) SetLocalOnly(localOnly bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if localOnly {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_local_only(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(localOnly)
}

// SetPreviewWidget sets an application-supplied widget to use to display a
// custom preview of the currently selected file. To implement a preview, after
// setting the preview widget, you connect to the FileChooser::update-preview
// signal, and call gtk_file_chooser_get_preview_filename() or
// gtk_file_chooser_get_preview_uri() on each change. If you can display a
// preview of the new file, update your widget and set the preview active using
// gtk_file_chooser_set_preview_widget_active(). Otherwise, set the preview
// inactive.
//
// When there is no application-supplied preview widget, or the
// application-supplied preview widget is not active, the file chooser will
// display no preview at all.
//
// The function takes the following parameters:
//
//    - previewWidget: widget for displaying preview.
//
func (chooser *FileChooser) SetPreviewWidget(previewWidget Widgetter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(previewWidget).Native()))

	C.gtk_file_chooser_set_preview_widget(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(previewWidget)
}

// SetPreviewWidgetActive sets whether the preview widget set by
// gtk_file_chooser_set_preview_widget() should be shown for the current
// filename. When active is set to false, the file chooser may display an
// internally generated preview of the current file or it may display no preview
// at all. See gtk_file_chooser_set_preview_widget() for more details.
//
// The function takes the following parameters:
//
//    - active: whether to display the user-specified preview widget.
//
func (chooser *FileChooser) SetPreviewWidgetActive(active bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if active {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_preview_widget_active(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(active)
}

// SetSelectMultiple sets whether multiple files can be selected in the file
// selector. This is only relevant if the action is set to be
// GTK_FILE_CHOOSER_ACTION_OPEN or GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
//
// The function takes the following parameters:
//
//    - selectMultiple: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SetSelectMultiple(selectMultiple bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if selectMultiple {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_select_multiple(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(selectMultiple)
}

// SetShowHidden sets whether hidden files and folders are displayed in the file
// selector.
//
// The function takes the following parameters:
//
//    - showHidden: TRUE if hidden files and folders should be displayed.
//
func (chooser *FileChooser) SetShowHidden(showHidden bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if showHidden {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_show_hidden(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(showHidden)
}

// SetURI sets the file referred to by uri as the current file for the file
// chooser, by changing to the URI’s parent folder and actually selecting the
// URI in the list. If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the
// URI’s base name will also appear in the dialog’s file name entry.
//
// Note that the URI must exist, or nothing will be done except for the
// directory change.
//
// You should use this function only when implementing a save dialog for which
// you already have a file name to which the user may save. For example, when
// the user opens an existing file and then does Save As... to save a copy or a
// modified version. If you don’t have a file name already — for example, if the
// user just created a new file and is saving it for the first time, do not call
// this function. Instead, use something similar to this:
//
//    if (document_is_new)
//      {
//        // the user just created a new document
//        gtk_file_chooser_set_current_name (chooser, "Untitled document");
//      }
//    else
//      {
//        // the user edited an existing document
//        gtk_file_chooser_set_uri (chooser, existing_uri);
//      }
//
// In the first case, the file chooser will present the user with useful
// suggestions as to where to save his new file. In the second case, the file’s
// existing location is already known, so the file chooser will use it.
//
// The function takes the following parameters:
//
//    - uri: URI to set as current.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUsePreviewLabel sets whether the file chooser should display a stock label
// with the name of the file that is being previewed; the default is TRUE.
// Applications that want to draw the whole preview area themselves should set
// this to FALSE and display the name themselves in their preview widget.
//
// See also: gtk_file_chooser_set_preview_widget().
//
// The function takes the following parameters:
//
//    - useLabel: whether to display a stock label with the name of the previewed
//      file.
//
func (chooser *FileChooser) SetUsePreviewLabel(useLabel bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	if useLabel {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_use_preview_label(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(useLabel)
}

// UnselectAll unselects all the files in the current folder of a file chooser.
func (chooser *FileChooser) UnselectAll() {
	var _arg0 *C.GtkFileChooser // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))

	C.gtk_file_chooser_unselect_all(_arg0)
	runtime.KeepAlive(chooser)
}

// UnselectFile unselects the file referred to by file. If the file is not in
// the current directory, does not exist, or is otherwise not currently
// selected, does nothing.
//
// The function takes the following parameters:
//
//    - file: #GFile.
//
func (chooser *FileChooser) UnselectFile(file gio.FileOverrider) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GFile          // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(externglib.InternObject(file).Native()))

	C.gtk_file_chooser_unselect_file(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)
}

// UnselectFilename unselects a currently selected filename. If the filename is
// not in the current directory, does not exist, or is otherwise not currently
// selected, does nothing.
//
// The function takes the following parameters:
//
//    - filename to unselect.
//
func (chooser *FileChooser) UnselectFilename(filename string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_unselect_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)
}

// UnselectURI unselects the file referred to by uri. If the file is not in the
// current directory, does not exist, or is otherwise not currently selected,
// does nothing.
//
// The function takes the following parameters:
//
//    - uri: URI to unselect.
//
func (chooser *FileChooser) UnselectURI(uri string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(externglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_unselect_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)
}
