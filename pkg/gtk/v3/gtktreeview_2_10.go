// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void callbackDelete(gpointer);
// extern void _gotk4_gtk3_TreeViewSearchPositionFunc(GtkTreeView*, GtkWidget*, gpointer);
import "C"

// EnableTreeLines returns whether or not tree lines are drawn in tree_view.
//
// The function returns the following values:
//
//    - ok: TRUE if tree lines are drawn in tree_view, FALSE otherwise.
//
func (treeView *TreeView) EnableTreeLines() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_enable_tree_lines(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GridLines returns which grid lines are enabled in tree_view.
//
// The function returns the following values:
//
//    - treeViewGridLines value indicating which grid lines are enabled.
//
func (treeView *TreeView) GridLines() TreeViewGridLines {
	var _arg0 *C.GtkTreeView         // out
	var _cret C.GtkTreeViewGridLines // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_grid_lines(_arg0)
	runtime.KeepAlive(treeView)

	var _treeViewGridLines TreeViewGridLines // out

	_treeViewGridLines = TreeViewGridLines(_cret)

	return _treeViewGridLines
}

// HeadersClickable returns whether all header columns are clickable.
//
// The function returns the following values:
//
//    - ok: TRUE if all header columns are clickable, otherwise FALSE.
//
func (treeView *TreeView) HeadersClickable() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_headers_clickable(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RubberBanding returns whether rubber banding is turned on for tree_view. If
// the selection mode is K_SELECTION_MULTIPLE, rubber banding will allow the
// user to select multiple rows by dragging the mouse.
//
// The function returns the following values:
//
//    - ok: TRUE if rubber banding in tree_view is enabled.
//
func (treeView *TreeView) RubberBanding() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_rubber_banding(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SearchEntry returns the Entry which is currently in use as interactive search
// entry for tree_view. In case the built-in entry is being used, NULL will be
// returned.
//
// The function returns the following values:
//
//    - entry currently in use as search entry.
//
func (treeView *TreeView) SearchEntry() *Entry {
	var _arg0 *C.GtkTreeView // out
	var _cret *C.GtkEntry    // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_search_entry(_arg0)
	runtime.KeepAlive(treeView)

	var _entry *Entry // out

	_entry = wrapEntry(coreglib.Take(unsafe.Pointer(_cret)))

	return _entry
}

// SetEnableTreeLines sets whether to draw lines interconnecting the expanders
// in tree_view. This does not have any visible effects for lists.
//
// The function takes the following parameters:
//
//    - enabled: TRUE to enable tree line drawing, FALSE otherwise.
//
func (treeView *TreeView) SetEnableTreeLines(enabled bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_enable_tree_lines(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(enabled)
}

// SetGridLines sets which grid lines to draw in tree_view.
//
// The function takes the following parameters:
//
//    - gridLines value indicating which grid lines to enable.
//
func (treeView *TreeView) SetGridLines(gridLines TreeViewGridLines) {
	var _arg0 *C.GtkTreeView         // out
	var _arg1 C.GtkTreeViewGridLines // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.GtkTreeViewGridLines(gridLines)

	C.gtk_tree_view_set_grid_lines(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(gridLines)
}

// SetRubberBanding enables or disables rubber banding in tree_view. If the
// selection mode is K_SELECTION_MULTIPLE, rubber banding will allow the user to
// select multiple rows by dragging the mouse.
//
// The function takes the following parameters:
//
//    - enable: TRUE to enable rubber banding.
//
func (treeView *TreeView) SetRubberBanding(enable bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if enable {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_rubber_banding(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(enable)
}

// SetSearchEntry sets the entry which the interactive search code will use for
// this tree_view. This is useful when you want to provide a search entry in our
// interface at all time at a fixed position. Passing NULL for entry will make
// the interactive search code use the built-in popup entry again.
//
// The function takes the following parameters:
//
//    - entry (optional) the interactive search code of tree_view should use or
//      NULL.
//
func (treeView *TreeView) SetSearchEntry(entry *Entry) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkEntry    // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if entry != nil {
		_arg1 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	}

	C.gtk_tree_view_set_search_entry(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(entry)
}

// SetSearchPositionFunc sets the function to use when positioning the search
// dialog.
//
// The function takes the following parameters:
//
//    - fn (optional): function to use to position the search dialog, or NULL to
//      use the default search position function.
//
func (treeView *TreeView) SetSearchPositionFunc(fn TreeViewSearchPositionFunc) {
	var _arg0 *C.GtkTreeView                  // out
	var _arg1 C.GtkTreeViewSearchPositionFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if fn != nil {
		_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeViewSearchPositionFunc)
		_arg2 = C.gpointer(gbox.Assign(fn))
		_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	C.gtk_tree_view_set_search_position_func(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(fn)
}
