// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewButtonFromIconName creates a new button containing an icon from the
// current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead. If the current icon theme is changed, the icon will be updated
// appropriately.
//
// This function is a convenience wrapper around gtk_button_new() and
// gtk_button_set_image().
//
// The function takes the following parameters:
//
//    - iconName (optional): icon name or NULL.
//    - size: icon size (IconSize).
//
// The function returns the following values:
//
//    - button: new Button displaying the themed icon.
//
func NewButtonFromIconName(iconName string, size int) *Button {
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	if iconName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_button_new_from_icon_name(_arg1, _arg2)
	runtime.KeepAlive(iconName)
	runtime.KeepAlive(size)

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}
