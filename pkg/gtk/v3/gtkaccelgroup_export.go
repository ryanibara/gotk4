// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

//export _gotk4_gtk3_AccelGroup_ConnectAccelActivate
func _gotk4_gtk3_AccelGroup_ConnectAccelActivate(arg0 C.gpointer, arg1 C.GObject, arg2 C.guint, arg3 C.GdkModifierType, arg4 C.guintptr) (cret C.gboolean) {
	var f func(acceleratable *coreglib.Object, keyval uint, modifier gdk.ModifierType) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(acceleratable *coreglib.Object, keyval uint, modifier gdk.ModifierType) (ok bool))
	}

	var _acceleratable *coreglib.Object // out
	var _keyval uint                    // out
	var _modifier gdk.ModifierType      // out

	_acceleratable = coreglib.Take(unsafe.Pointer(&arg1))
	_keyval = uint(arg2)
	_modifier = gdk.ModifierType(arg3)

	ok := f(_acceleratable, _keyval, _modifier)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
