// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeInvisible returns the GType for the type Invisible.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeInvisible() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "Invisible").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalInvisible)
	return gtype
}

// InvisibleOverrider contains methods that are overridable.
type InvisibleOverrider interface {
}

// Invisible widget is used internally in GTK+, and is probably not very useful
// for application developers.
//
// It is used for reliable pointer grabs and selection handling in the code for
// drag-and-drop.
type Invisible struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Invisible)(nil)
)

func classInitInvisibler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapInvisible(obj *coreglib.Object) *Invisible {
	return &Invisible{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalInvisible(p uintptr) (interface{}, error) {
	return wrapInvisible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewInvisible creates a new Invisible.
//
// The function returns the following values:
//
//    - invisible: new Invisible.
//
func NewInvisible() *Invisible {
	_gret := girepository.MustFind("Gtk", "Invisible").InvokeMethod("new_Invisible", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _invisible *Invisible // out

	_invisible = wrapInvisible(coreglib.Take(unsafe.Pointer(_cret)))

	return _invisible
}

// NewInvisibleForScreen creates a new Invisible object for a specified screen.
//
// The function takes the following parameters:
//
//    - screen which identifies on which the new Invisible will be created.
//
// The function returns the following values:
//
//    - invisible: newly created Invisible object.
//
func NewInvisibleForScreen(screen *gdk.Screen) *Invisible {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_gret := girepository.MustFind("Gtk", "Invisible").InvokeMethod("new_Invisible_for_screen", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(screen)

	var _invisible *Invisible // out

	_invisible = wrapInvisible(coreglib.Take(unsafe.Pointer(_cret)))

	return _invisible
}

// Screen returns the Screen object associated with invisible.
//
// The function returns the following values:
//
//    - screen: associated Screen.
//
func (invisible *Invisible) Screen() *gdk.Screen {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(invisible).Native()))

	_gret := girepository.MustFind("Gtk", "Invisible").InvokeMethod("get_screen", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(invisible)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// SetScreen sets the Screen where the Invisible object will be displayed.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func (invisible *Invisible) SetScreen(screen *gdk.Screen) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(invisible).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	girepository.MustFind("Gtk", "Invisible").InvokeMethod("set_screen", _args[:], nil)

	runtime.KeepAlive(invisible)
	runtime.KeepAlive(screen)
}
