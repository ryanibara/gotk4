// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_ListBox_ConnectUnselectAll(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectToggleCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectSelectedRowsChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectRowSelected(gpointer, GtkListBoxRow*, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectRowActivated(gpointer, GtkListBoxRow*, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectMoveCursor(gpointer, GtkMovementStep, gint, guintptr);
// extern void _gotk4_gtk3_ListBox_ConnectActivateCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBoxRow_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk3_ListBoxRowClass_activate(GtkListBoxRow*);
// extern void _gotk4_gtk3_ListBoxClass_unselect_all(GtkListBox*);
// extern void _gotk4_gtk3_ListBoxClass_toggle_cursor_row(GtkListBox*);
// extern void _gotk4_gtk3_ListBoxClass_selected_rows_changed(GtkListBox*);
// extern void _gotk4_gtk3_ListBoxClass_select_all(GtkListBox*);
// extern void _gotk4_gtk3_ListBoxClass_row_selected(GtkListBox*, GtkListBoxRow*);
// extern void _gotk4_gtk3_ListBoxClass_row_activated(GtkListBox*, GtkListBoxRow*);
// extern void _gotk4_gtk3_ListBoxClass_move_cursor(GtkListBox*, GtkMovementStep, gint);
// extern void _gotk4_gtk3_ListBoxClass_activate_cursor_row(GtkListBox*);
// void _gotk4_gtk3_ListBoxRow_virtual_activate(void* fnptr, GtkListBoxRow* arg0) {
//   ((void (*)(GtkListBoxRow*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_ListBox_virtual_activate_cursor_row(void* fnptr, GtkListBox* arg0) {
//   ((void (*)(GtkListBox*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_ListBox_virtual_move_cursor(void* fnptr, GtkListBox* arg0, GtkMovementStep arg1, gint arg2) {
//   ((void (*)(GtkListBox*, GtkMovementStep, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_ListBox_virtual_row_activated(void* fnptr, GtkListBox* arg0, GtkListBoxRow* arg1) {
//   ((void (*)(GtkListBox*, GtkListBoxRow*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_ListBox_virtual_row_selected(void* fnptr, GtkListBox* arg0, GtkListBoxRow* arg1) {
//   ((void (*)(GtkListBox*, GtkListBoxRow*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_ListBox_virtual_selected_rows_changed(void* fnptr, GtkListBox* arg0) {
//   ((void (*)(GtkListBox*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_ListBox_virtual_toggle_cursor_row(void* fnptr, GtkListBox* arg0) {
//   ((void (*)(GtkListBox*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeListBox    = coreglib.Type(C.gtk_list_box_get_type())
	GTypeListBoxRow = coreglib.Type(C.gtk_list_box_row_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeListBox, F: marshalListBox},
		coreglib.TypeMarshaler{T: GTypeListBoxRow, F: marshalListBoxRow},
	})
}

// ListBoxOverrides contains methods that are overridable.
type ListBoxOverrides struct {
	ActivateCursorRow func()
	// The function takes the following parameters:
	//
	//    - step
	//    - count
	//
	MoveCursor func(step MovementStep, count int)
	// The function takes the following parameters:
	//
	RowActivated func(row *ListBoxRow)
	// The function takes the following parameters:
	//
	RowSelected func(row *ListBoxRow)
	// SelectAll: select all children of box, if the selection mode allows it.
	SelectAll           func()
	SelectedRowsChanged func()
	ToggleCursorRow     func()
	// UnselectAll: unselect all children of box, if the selection mode allows
	// it.
	UnselectAll func()
}

func defaultListBoxOverrides(v *ListBox) ListBoxOverrides {
	return ListBoxOverrides{
		ActivateCursorRow:   v.activateCursorRow,
		MoveCursor:          v.moveCursor,
		RowActivated:        v.rowActivated,
		RowSelected:         v.rowSelected,
		SelectAll:           v.selectAll,
		SelectedRowsChanged: v.selectedRowsChanged,
		ToggleCursorRow:     v.toggleCursorRow,
		UnselectAll:         v.unselectAll,
	}
}

// ListBox is a vertical container that contains GtkListBoxRow children. These
// rows can by dynamically sorted and filtered, and headers can be added
// dynamically depending on the row content. It also allows keyboard and mouse
// navigation and selection like a typical list.
//
// Using GtkListBox is often an alternative to TreeView, especially when the
// list contents has a more complicated layout than what is allowed by a
// CellRenderer, or when the contents is interactive (i.e. has a button in it).
//
// Although a ListBox must have only ListBoxRow children you can add any kind of
// widget to it via gtk_container_add(), and a ListBoxRow widget will
// automatically be inserted between the list and the widget.
//
// ListBoxRows can be marked as activatable or selectable. If a row is
// activatable, ListBox::row-activated will be emitted for it when the user
// tries to activate it. If it is selectable, the row will be marked as selected
// when the user tries to select it.
//
// The GtkListBox widget was added in GTK+ 3.10.
//
//
// GtkListBox as GtkBuildable
//
// The GtkListBox implementation of the Buildable interface supports setting a
// child as the placeholder by specifying “placeholder” as the “type” attribute
// of a <child> element. See gtk_list_box_set_placeholder() for info.
//
// CSS nodes
//
//    list
//    ╰── row[.activatable]
//
// GtkListBox uses a single CSS node named list. Each GtkListBoxRow uses a
// single CSS node named row. The row nodes get the .activatable style class
// added when appropriate.
type ListBox struct {
	_ [0]func() // equal guard
	Container
}

var (
	_ Containerer = (*ListBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ListBox, *ListBoxClass, ListBoxOverrides](
		GTypeListBox,
		initListBoxClass,
		wrapListBox,
		defaultListBoxOverrides,
	)
}

func initListBoxClass(gclass unsafe.Pointer, overrides ListBoxOverrides, classInitFunc func(*ListBoxClass)) {
	pclass := (*C.GtkListBoxClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeListBox))))

	if overrides.ActivateCursorRow != nil {
		pclass.activate_cursor_row = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_activate_cursor_row)
	}

	if overrides.MoveCursor != nil {
		pclass.move_cursor = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_move_cursor)
	}

	if overrides.RowActivated != nil {
		pclass.row_activated = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_row_activated)
	}

	if overrides.RowSelected != nil {
		pclass.row_selected = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_row_selected)
	}

	if overrides.SelectAll != nil {
		pclass.select_all = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_select_all)
	}

	if overrides.SelectedRowsChanged != nil {
		pclass.selected_rows_changed = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_selected_rows_changed)
	}

	if overrides.ToggleCursorRow != nil {
		pclass.toggle_cursor_row = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_toggle_cursor_row)
	}

	if overrides.UnselectAll != nil {
		pclass.unselect_all = (*[0]byte)(C._gotk4_gtk3_ListBoxClass_unselect_all)
	}

	if classInitFunc != nil {
		class := (*ListBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapListBox(obj *coreglib.Object) *ListBox {
	return &ListBox{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalListBox(p uintptr) (interface{}, error) {
	return wrapListBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (box *ListBox) ConnectActivateCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "activate-cursor-row", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectActivateCursorRow), f)
}

func (box *ListBox) ConnectMoveCursor(f func(object MovementStep, p0 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "move-cursor", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectMoveCursor), f)
}

// ConnectRowActivated signal is emitted when a row has been activated by the
// user.
func (box *ListBox) ConnectRowActivated(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "row-activated", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectRowActivated), f)
}

// ConnectRowSelected signal is emitted when a new row is selected, or (with a
// NULL row) when the selection is cleared.
//
// When the box is using K_SELECTION_MULTIPLE, this signal will not give you the
// full picture of selection changes, and you should use the
// ListBox::selected-rows-changed signal instead.
func (box *ListBox) ConnectRowSelected(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "row-selected", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectRowSelected), f)
}

// ConnectSelectAll signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted to select all children of the box, if the selection mode permits it.
//
// The default bindings for this signal is Ctrl-a.
func (box *ListBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectSelectAll), f)
}

// ConnectSelectedRowsChanged signal is emitted when the set of selected rows
// changes.
func (box *ListBox) ConnectSelectedRowsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "selected-rows-changed", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectSelectedRowsChanged), f)
}

func (box *ListBox) ConnectToggleCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "toggle-cursor-row", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectToggleCursorRow), f)
}

// ConnectUnselectAll signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to unselect all children of the box, if the selection mode
// permits it.
//
// The default bindings for this signal is Ctrl-Shift-a.
func (box *ListBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk3_ListBox_ConnectUnselectAll), f)
}

func (box *ListBox) activateCursorRow() {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.activate_cursor_row

	var _arg0 *C.GtkListBox // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	C._gotk4_gtk3_ListBox_virtual_activate_cursor_row(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(box)
}

// The function takes the following parameters:
//
//    - step
//    - count
//
func (box *ListBox) moveCursor(step MovementStep, count int) {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.move_cursor

	var _arg0 *C.GtkListBox     // out
	var _arg1 C.GtkMovementStep // out
	var _arg2 C.gint            // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	_arg1 = C.GtkMovementStep(step)
	_arg2 = C.gint(count)

	C._gotk4_gtk3_ListBox_virtual_move_cursor(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(box)
	runtime.KeepAlive(step)
	runtime.KeepAlive(count)
}

// The function takes the following parameters:
//
func (box *ListBox) rowActivated(row *ListBoxRow) {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.row_activated

	var _arg0 *C.GtkListBox    // out
	var _arg1 *C.GtkListBoxRow // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	_arg1 = (*C.GtkListBoxRow)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	C._gotk4_gtk3_ListBox_virtual_row_activated(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(box)
	runtime.KeepAlive(row)
}

// The function takes the following parameters:
//
func (box *ListBox) rowSelected(row *ListBoxRow) {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.row_selected

	var _arg0 *C.GtkListBox    // out
	var _arg1 *C.GtkListBoxRow // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	_arg1 = (*C.GtkListBoxRow)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	C._gotk4_gtk3_ListBox_virtual_row_selected(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(box)
	runtime.KeepAlive(row)
}

func (box *ListBox) selectedRowsChanged() {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.selected_rows_changed

	var _arg0 *C.GtkListBox // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	C._gotk4_gtk3_ListBox_virtual_selected_rows_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(box)
}

func (box *ListBox) toggleCursorRow() {
	gclass := (*C.GtkListBoxClass)(coreglib.PeekParentClass(box))
	fnarg := gclass.toggle_cursor_row

	var _arg0 *C.GtkListBox // out

	_arg0 = (*C.GtkListBox)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	C._gotk4_gtk3_ListBox_virtual_toggle_cursor_row(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(box)
}

// ListBoxRowOverrides contains methods that are overridable.
type ListBoxRowOverrides struct {
	Activate func()
}

func defaultListBoxRowOverrides(v *ListBoxRow) ListBoxRowOverrides {
	return ListBoxRowOverrides{
		Activate: v.activate,
	}
}

type ListBoxRow struct {
	_ [0]func() // equal guard
	Bin

	*coreglib.Object
	Actionable
}

var (
	_ Binner            = (*ListBoxRow)(nil)
	_ coreglib.Objector = (*ListBoxRow)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ListBoxRow, *ListBoxRowClass, ListBoxRowOverrides](
		GTypeListBoxRow,
		initListBoxRowClass,
		wrapListBoxRow,
		defaultListBoxRowOverrides,
	)
}

func initListBoxRowClass(gclass unsafe.Pointer, overrides ListBoxRowOverrides, classInitFunc func(*ListBoxRowClass)) {
	pclass := (*C.GtkListBoxRowClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeListBoxRow))))

	if overrides.Activate != nil {
		pclass.activate = (*[0]byte)(C._gotk4_gtk3_ListBoxRowClass_activate)
	}

	if classInitFunc != nil {
		class := (*ListBoxRowClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapListBoxRow(obj *coreglib.Object) *ListBoxRow {
	return &ListBoxRow{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalListBoxRow(p uintptr) (interface{}, error) {
	return wrapListBoxRow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate: this is a keybinding signal, which will cause this row to be
// activated.
//
// If you want to be notified when the user activates a row (by key or not), use
// the ListBox::row-activated signal on the row’s parent ListBox.
func (row *ListBoxRow) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(row, "activate", false, unsafe.Pointer(C._gotk4_gtk3_ListBoxRow_ConnectActivate), f)
}

func (row *ListBoxRow) activate() {
	gclass := (*C.GtkListBoxRowClass)(coreglib.PeekParentClass(row))
	fnarg := gclass.activate

	var _arg0 *C.GtkListBoxRow // out

	_arg0 = (*C.GtkListBoxRow)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	C._gotk4_gtk3_ListBoxRow_virtual_activate(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(row)
}

// ListBoxClass: instance of this type is always passed by reference.
type ListBoxClass struct {
	*listBoxClass
}

// listBoxClass is the struct that's finalized.
type listBoxClass struct {
	native *C.GtkListBoxClass
}

// ParentClass: parent class.
func (l *ListBoxClass) ParentClass() *ContainerClass {
	valptr := &l.native.parent_class
	var _v *ContainerClass // out
	_v = (*ContainerClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// ListBoxRowClass: instance of this type is always passed by reference.
type ListBoxRowClass struct {
	*listBoxRowClass
}

// listBoxRowClass is the struct that's finalized.
type listBoxRowClass struct {
	native *C.GtkListBoxRowClass
}

// ParentClass: parent class.
func (l *ListBoxRowClass) ParentClass() *BinClass {
	valptr := &l.native.parent_class
	var _v *BinClass // out
	_v = (*BinClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
