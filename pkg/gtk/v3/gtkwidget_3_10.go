// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// void _gotk4_gtk3_Widget_virtual_get_preferred_height_and_baseline_for_width(void* fnptr, GtkWidget* arg0, gint arg1, gint* arg2, gint* arg3, gint* arg4, gint* arg5) {
//   ((void (*)(GtkWidget*, gint, gint*, gint*, gint*, gint*))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
import "C"

// AllocatedBaseline returns the baseline that has currently been allocated to
// widget. This function is intended to be used when implementing handlers for
// the Widget::draw function, and when allocating child widgets in
// Widget::size_allocate.
//
// The function returns the following values:
//
//    - gint: baseline of the widget, or -1 if none.
//
func (widget *Widget) AllocatedBaseline() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.int        // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_allocated_baseline(_arg0)
	runtime.KeepAlive(widget)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PreferredHeightAndBaselineForWidth retrieves a widget’s minimum and natural
// height and the corresponding baselines if it would be given the specified
// width, or the default height if width is -1. The baselines may be -1 which
// means that no baseline is requested for this widget.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request and
// GtkWidgetClass::adjust_baseline_request virtual methods and by any SizeGroups
// that have been applied. That is, the returned request is the one that should
// be used for layout, not necessarily the one returned by the widget itself.
//
// The function takes the following parameters:
//
//    - width which is available for allocation, or -1 if none.
//
// The function returns the following values:
//
//    - minimumHeight (optional): location for storing the minimum height, or
//      NULL.
//    - naturalHeight (optional): location for storing the natural height, or
//      NULL.
//    - minimumBaseline (optional): location for storing the baseline for the
//      minimum height, or NULL.
//    - naturalBaseline (optional): location for storing the baseline for the
//      natural height, or NULL.
//
func (widget *Widget) PreferredHeightAndBaselineForWidth(width int) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = C.gint(width)

	C.gtk_widget_get_preferred_height_and_baseline_for_width(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(width)

	var _minimumHeight int   // out
	var _naturalHeight int   // out
	var _minimumBaseline int // out
	var _naturalBaseline int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)
	_minimumBaseline = int(_arg4)
	_naturalBaseline = int(_arg5)

	return _minimumHeight, _naturalHeight, _minimumBaseline, _naturalBaseline
}

// ScaleFactor retrieves the internal scale factor that maps from window
// coordinates to the actual device pixels. On traditional systems this is 1, on
// high density outputs, it can be a higher value (typically 2).
//
// See gdk_window_get_scale_factor().
//
// The function returns the following values:
//
//    - gint: scale factor for widget.
//
func (widget *Widget) ScaleFactor() int {
	var _arg0 *C.GtkWidget // out
	var _cret C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_scale_factor(_arg0)
	runtime.KeepAlive(widget)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// VAlignWithBaseline gets the value of the Widget:valign property, including
// GTK_ALIGN_BASELINE.
//
// The function returns the following values:
//
//    - align: vertical alignment of widget.
//
func (widget *Widget) VAlignWithBaseline() Align {
	var _arg0 *C.GtkWidget // out
	var _cret C.GtkAlign   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_valign_with_baseline(_arg0)
	runtime.KeepAlive(widget)

	var _align Align // out

	_align = Align(_cret)

	return _align
}

// InitTemplate creates and initializes child widgets defined in templates. This
// function must be called in the instance initializer for any class which
// assigned itself a template using gtk_widget_class_set_template()
//
// It is important to call this function in the instance initializer of a Widget
// subclass and not in #GObject.constructed() or #GObject.constructor() for two
// reasons.
//
// One reason is that generally derived widgets will assume that parent class
// composite widgets have been created in their instance initializers.
//
// Another reason is that when calling g_object_new() on a widget with composite
// templates, it’s important to build the composite widgets before the construct
// properties are set. Properties passed to g_object_new() should take
// precedence over properties set in the private template XML.
func (widget *Widget) InitTemplate() {
	var _arg0 *C.GtkWidget // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	C.gtk_widget_init_template(_arg0)
	runtime.KeepAlive(widget)
}

// SizeAllocateWithBaseline: this function is only used by Container subclasses,
// to assign a size, position and (optionally) baseline to their child widgets.
//
// In this function, the allocation and baseline may be adjusted. It will be
// forced to a 1x1 minimum size, and the adjust_size_allocation virtual and
// adjust_baseline_allocation methods on the child will be used to adjust the
// allocation and baseline. Standard adjustments include removing the widget's
// margins, and applying the widget’s Widget:halign and Widget:valign
// properties.
//
// If the child widget does not have a valign of GTK_ALIGN_BASELINE the baseline
// argument is ignored and -1 is used instead.
//
// The function takes the following parameters:
//
//    - allocation: position and size to be allocated to widget.
//    - baseline of the child, or -1.
//
func (widget *Widget) SizeAllocateWithBaseline(allocation *Allocation, baseline int) {
	var _arg0 *C.GtkWidget     // out
	var _arg1 *C.GtkAllocation // out
	var _arg2 C.gint           // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(allocation)))
	_arg2 = C.gint(baseline)

	C.gtk_widget_size_allocate_with_baseline(_arg0, _arg1, _arg2)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(allocation)
	runtime.KeepAlive(baseline)
}

// preferredHeightAndBaselineForWidth retrieves a widget’s minimum and natural
// height and the corresponding baselines if it would be given the specified
// width, or the default height if width is -1. The baselines may be -1 which
// means that no baseline is requested for this widget.
//
// The returned request will be modified by the
// GtkWidgetClass::adjust_size_request and
// GtkWidgetClass::adjust_baseline_request virtual methods and by any SizeGroups
// that have been applied. That is, the returned request is the one that should
// be used for layout, not necessarily the one returned by the widget itself.
//
// The function takes the following parameters:
//
//    - width which is available for allocation, or -1 if none.
//
// The function returns the following values:
//
//    - minimumHeight (optional): location for storing the minimum height, or
//      NULL.
//    - naturalHeight (optional): location for storing the natural height, or
//      NULL.
//    - minimumBaseline (optional): location for storing the baseline for the
//      minimum height, or NULL.
//    - naturalBaseline (optional): location for storing the baseline for the
//      natural height, or NULL.
//
func (widget *Widget) preferredHeightAndBaselineForWidth(width int) (minimumHeight, naturalHeight, minimumBaseline, naturalBaseline int) {
	gclass := (*C.GtkWidgetClass)(coreglib.PeekParentClass(widget))
	fnarg := gclass.get_preferred_height_and_baseline_for_width

	var _arg0 *C.GtkWidget // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in
	var _arg5 C.gint       // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = C.gint(width)

	C._gotk4_gtk3_Widget_virtual_get_preferred_height_and_baseline_for_width(unsafe.Pointer(fnarg), _arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(width)

	var _minimumHeight int   // out
	var _naturalHeight int   // out
	var _minimumBaseline int // out
	var _naturalBaseline int // out

	_minimumHeight = int(_arg2)
	_naturalHeight = int(_arg3)
	_minimumBaseline = int(_arg4)
	_naturalBaseline = int(_arg5)

	return _minimumHeight, _naturalHeight, _minimumBaseline, _naturalBaseline
}
