// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// LookupColor looks up color_name in the styleâ€™s logical color mappings,
// filling in color and returning TRUE if found, otherwise returning FALSE. Do
// not cache the found mapping, because it depends on the Style and might change
// when a theme switch occurs.
//
// Deprecated: Use gtk_style_context_lookup_color() instead.
//
// The function takes the following parameters:
//
//    - colorName: name of the logical color to look up.
//
// The function returns the following values:
//
//    - color to fill in.
//    - ok: TRUE if the mapping was found.
//
func (style *Style) LookupColor(colorName string) (*gdk.Color, bool) {
	var _arg0 *C.GtkStyle // out
	var _arg1 *C.gchar    // out
	var _arg2 C.GdkColor  // in
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkStyle)(unsafe.Pointer(coreglib.InternObject(style).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(colorName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_lookup_color(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(style)
	runtime.KeepAlive(colorName)

	var _color *gdk.Color // out
	var _ok bool          // out

	_color = (*gdk.Color)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	if _cret != 0 {
		_ok = true
	}

	return _color, _ok
}
