// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// GtkIconFactory* _gotk4_gtk3_StyleProvider_virtual_get_icon_factory(void* fnptr, GtkStyleProvider* arg0, GtkWidgetPath* arg1) {
//   return ((GtkIconFactory* (*)(GtkStyleProvider*, GtkWidgetPath*))(fnptr))(arg0, arg1);
// };
// GtkStyleProperties* _gotk4_gtk3_StyleProvider_virtual_get_style(void* fnptr, GtkStyleProvider* arg0, GtkWidgetPath* arg1) {
//   return ((GtkStyleProperties* (*)(GtkStyleProvider*, GtkWidgetPath*))(fnptr))(arg0, arg1);
// };
import "C"

// IconFactory returns the IconFactory defined to be in use for path, or NULL if
// none is defined.
//
// Deprecated: Will always return NULL for all GTK-provided style providers.
//
// The function takes the following parameters:
//
//    - path to query.
//
// The function returns the following values:
//
//    - iconFactory (optional): icon factory to use for path, or NULL.
//
func (provider *StyleProvider) IconFactory(path *WidgetPath) *IconFactory {
	var _arg0 *C.GtkStyleProvider // out
	var _arg1 *C.GtkWidgetPath    // out
	var _cret *C.GtkIconFactory   // in

	_arg0 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GtkWidgetPath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C.gtk_style_provider_get_icon_factory(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(path)

	var _iconFactory *IconFactory // out

	if _cret != nil {
		_iconFactory = wrapIconFactory(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _iconFactory
}

// Style returns the style settings affecting a widget defined by path, or NULL
// if provider doesn’t contemplate styling path.
//
// Deprecated: Will always return NULL for all GTK-provided style providers as
// the interface cannot correctly work the way CSS is specified.
//
// The function takes the following parameters:
//
//    - path to query.
//
// The function returns the following values:
//
//    - styleProperties (optional) containing the style settings affecting path.
//
func (provider *StyleProvider) Style(path *WidgetPath) *StyleProperties {
	var _arg0 *C.GtkStyleProvider   // out
	var _arg1 *C.GtkWidgetPath      // out
	var _cret *C.GtkStyleProperties // in

	_arg0 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GtkWidgetPath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C.gtk_style_provider_get_style(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(path)

	var _styleProperties *StyleProperties // out

	if _cret != nil {
		_styleProperties = wrapStyleProperties(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _styleProperties
}

// iconFactory returns the IconFactory defined to be in use for path, or NULL if
// none is defined.
//
// Deprecated: Will always return NULL for all GTK-provided style providers.
//
// The function takes the following parameters:
//
//    - path to query.
//
// The function returns the following values:
//
//    - iconFactory (optional): icon factory to use for path, or NULL.
//
func (provider *StyleProvider) iconFactory(path *WidgetPath) *IconFactory {
	gclass := (*C.GtkStyleProviderIface)(coreglib.PeekParentClass(provider))
	fnarg := gclass.get_icon_factory

	var _arg0 *C.GtkStyleProvider // out
	var _arg1 *C.GtkWidgetPath    // out
	var _cret *C.GtkIconFactory   // in

	_arg0 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GtkWidgetPath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C._gotk4_gtk3_StyleProvider_virtual_get_icon_factory(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(path)

	var _iconFactory *IconFactory // out

	if _cret != nil {
		_iconFactory = wrapIconFactory(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _iconFactory
}

// Style returns the style settings affecting a widget defined by path, or NULL
// if provider doesn’t contemplate styling path.
//
// Deprecated: Will always return NULL for all GTK-provided style providers as
// the interface cannot correctly work the way CSS is specified.
//
// The function takes the following parameters:
//
//    - path to query.
//
// The function returns the following values:
//
//    - styleProperties (optional) containing the style settings affecting path.
//
func (provider *StyleProvider) style(path *WidgetPath) *StyleProperties {
	gclass := (*C.GtkStyleProviderIface)(coreglib.PeekParentClass(provider))
	fnarg := gclass.get_style

	var _arg0 *C.GtkStyleProvider   // out
	var _arg1 *C.GtkWidgetPath      // out
	var _cret *C.GtkStyleProperties // in

	_arg0 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GtkWidgetPath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C._gotk4_gtk3_StyleProvider_virtual_get_style(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(path)

	var _styleProperties *StyleProperties // out

	if _cret != nil {
		_styleProperties = wrapStyleProperties(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _styleProperties
}
