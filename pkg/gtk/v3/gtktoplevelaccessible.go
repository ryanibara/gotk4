// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeToplevelAccessible returns the GType for the type ToplevelAccessible.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeToplevelAccessible() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ToplevelAccessible").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalToplevelAccessible)
	return gtype
}

// ToplevelAccessibleOverrider contains methods that are overridable.
type ToplevelAccessibleOverrider interface {
}

type ToplevelAccessible struct {
	_ [0]func() // equal guard
	atk.ObjectClass
}

var (
	_ coreglib.Objector = (*ToplevelAccessible)(nil)
)

func classInitToplevelAccessibler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapToplevelAccessible(obj *coreglib.Object) *ToplevelAccessible {
	return &ToplevelAccessible{
		ObjectClass: atk.ObjectClass{
			Object: obj,
		},
	}
}

func marshalToplevelAccessible(p uintptr) (interface{}, error) {
	return wrapToplevelAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - list: list of children.
//
func (accessible *ToplevelAccessible) Children() []*Window {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	_info := girepository.MustFind("Gtk", "ToplevelAccessible")
	_gret := _info.InvokeClassMethod("get_children", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(accessible)

	var _list []*Window // out

	_list = make([]*Window, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *Window // out
		dst = wrapWindow(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}
