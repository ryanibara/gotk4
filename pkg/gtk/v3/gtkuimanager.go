// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_UIManager_ConnectPreActivate(gpointer, GtkAction*, guintptr);
// extern void _gotk4_gtk3_UIManager_ConnectPostActivate(gpointer, GtkAction*, guintptr);
// extern void _gotk4_gtk3_UIManager_ConnectDisconnectProxy(gpointer, GtkAction*, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_UIManager_ConnectConnectProxy(gpointer, GtkAction*, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_UIManager_ConnectAddWidget(gpointer, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_UIManager_ConnectActionsChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_UIManagerClass_pre_activate(GtkUIManager*, GtkAction*);
// extern void _gotk4_gtk3_UIManagerClass_post_activate(GtkUIManager*, GtkAction*);
// extern void _gotk4_gtk3_UIManagerClass_disconnect_proxy(GtkUIManager*, GtkAction*, GtkWidget*);
// extern void _gotk4_gtk3_UIManagerClass_connect_proxy(GtkUIManager*, GtkAction*, GtkWidget*);
// extern void _gotk4_gtk3_UIManagerClass_add_widget(GtkUIManager*, GtkWidget*);
// extern void _gotk4_gtk3_UIManagerClass_actions_changed(GtkUIManager*);
// extern GtkWidget* _gotk4_gtk3_UIManagerClass_get_widget(GtkUIManager*, gchar*);
// extern GtkAction* _gotk4_gtk3_UIManagerClass_get_action(GtkUIManager*, gchar*);
// void _gotk4_gtk3_UIManager_virtual_actions_changed(void* fnptr, GtkUIManager* arg0) {
//   ((void (*)(GtkUIManager*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_UIManager_virtual_add_widget(void* fnptr, GtkUIManager* arg0, GtkWidget* arg1) {
//   ((void (*)(GtkUIManager*, GtkWidget*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_UIManager_virtual_connect_proxy(void* fnptr, GtkUIManager* arg0, GtkAction* arg1, GtkWidget* arg2) {
//   ((void (*)(GtkUIManager*, GtkAction*, GtkWidget*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_UIManager_virtual_disconnect_proxy(void* fnptr, GtkUIManager* arg0, GtkAction* arg1, GtkWidget* arg2) {
//   ((void (*)(GtkUIManager*, GtkAction*, GtkWidget*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_UIManager_virtual_post_activate(void* fnptr, GtkUIManager* arg0, GtkAction* arg1) {
//   ((void (*)(GtkUIManager*, GtkAction*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_UIManager_virtual_pre_activate(void* fnptr, GtkUIManager* arg0, GtkAction* arg1) {
//   ((void (*)(GtkUIManager*, GtkAction*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeUIManagerItemType = coreglib.Type(C.gtk_ui_manager_item_type_get_type())
	GTypeUIManager         = coreglib.Type(C.gtk_ui_manager_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeUIManagerItemType, F: marshalUIManagerItemType},
		coreglib.TypeMarshaler{T: GTypeUIManager, F: marshalUIManager},
	})
}

// UIManagerItemType: these enumeration values are used by
// gtk_ui_manager_add_ui() to determine what UI element to create.
//
// Deprecated: since version 3.10.
type UIManagerItemType C.guint

const (
	// UiManagerAuto: pick the type of the UI element according to context.
	UiManagerAuto UIManagerItemType = 0b0
	// UiManagerMenubar: create a menubar.
	UiManagerMenubar UIManagerItemType = 0b1
	// UiManagerMenu: create a menu.
	UiManagerMenu UIManagerItemType = 0b10
	// UiManagerToolbar: create a toolbar.
	UiManagerToolbar UIManagerItemType = 0b100
	// UiManagerPlaceholder: insert a placeholder.
	UiManagerPlaceholder UIManagerItemType = 0b1000
	// UiManagerPopup: create a popup menu.
	UiManagerPopup UIManagerItemType = 0b10000
	// UiManagerMenuitem: create a menuitem.
	UiManagerMenuitem UIManagerItemType = 0b100000
	// UiManagerToolitem: create a toolitem.
	UiManagerToolitem UIManagerItemType = 0b1000000
	// UiManagerSeparator: create a separator.
	UiManagerSeparator UIManagerItemType = 0b10000000
	// UiManagerAccelerator: install an accelerator.
	UiManagerAccelerator UIManagerItemType = 0b100000000
	// UiManagerPopupWithAccels: same as GTK_UI_MANAGER_POPUP, but the actions’
	// accelerators are shown.
	UiManagerPopupWithAccels UIManagerItemType = 0b1000000000
)

func marshalUIManagerItemType(p uintptr) (interface{}, error) {
	return UIManagerItemType(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for UIManagerItemType.
func (u UIManagerItemType) String() string {
	if u == 0 {
		return "UIManagerItemType(0)"
	}

	var builder strings.Builder
	builder.Grow(198)

	for u != 0 {
		next := u & (u - 1)
		bit := u - next

		switch bit {
		case UiManagerAuto:
			builder.WriteString("Auto|")
		case UiManagerMenubar:
			builder.WriteString("Menubar|")
		case UiManagerMenu:
			builder.WriteString("Menu|")
		case UiManagerToolbar:
			builder.WriteString("Toolbar|")
		case UiManagerPlaceholder:
			builder.WriteString("Placeholder|")
		case UiManagerPopup:
			builder.WriteString("Popup|")
		case UiManagerMenuitem:
			builder.WriteString("Menuitem|")
		case UiManagerToolitem:
			builder.WriteString("Toolitem|")
		case UiManagerSeparator:
			builder.WriteString("Separator|")
		case UiManagerAccelerator:
			builder.WriteString("Accelerator|")
		case UiManagerPopupWithAccels:
			builder.WriteString("PopupWithAccels|")
		default:
			builder.WriteString(fmt.Sprintf("UIManagerItemType(0b%b)|", bit))
		}

		u = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if u contains other.
func (u UIManagerItemType) Has(other UIManagerItemType) bool {
	return (u & other) == other
}

// UIManagerOverrides contains methods that are overridable.
type UIManagerOverrides struct {
	ActionsChanged func()
	// The function takes the following parameters:
	//
	AddWidget func(widget Widgetter)
	// The function takes the following parameters:
	//
	//    - action
	//    - proxy
	//
	ConnectProxy func(action *Action, proxy Widgetter)
	// The function takes the following parameters:
	//
	//    - action
	//    - proxy
	//
	DisconnectProxy func(action *Action, proxy Widgetter)
	// Action looks up an action by following a path. See
	// gtk_ui_manager_get_widget() for more information about paths.
	//
	// Deprecated: since version 3.10.
	//
	// The function takes the following parameters:
	//
	//    - path: path.
	//
	// The function returns the following values:
	//
	//    - action whose proxy widget is found by following the path, or NULL if
	//      no widget was found.
	//
	Action func(path string) *Action
	// Widget looks up a widget by following a path. The path consists of the
	// names specified in the XML description of the UI. separated by “/”.
	// Elements which don’t have a name or action attribute in the XML (e.g.
	// <popup>) can be addressed by their XML element name (e.g. "popup"). The
	// root element ("/ui") can be omitted in the path.
	//
	// Note that the widget found by following a path that ends in a <menu>;
	// element is the menuitem to which the menu is attached, not the menu it
	// manages.
	//
	// Also note that the widgets constructed by a ui manager are not tied to
	// the lifecycle of the ui manager. If you add the widgets returned by this
	// function to some container or explicitly ref them, they will survive the
	// destruction of the ui manager.
	//
	// Deprecated: since version 3.10.
	//
	// The function takes the following parameters:
	//
	//    - path: path.
	//
	// The function returns the following values:
	//
	//    - widget found by following the path, or NULL if no widget was found.
	//
	Widget func(path string) Widgetter
	// The function takes the following parameters:
	//
	PostActivate func(action *Action)
	// The function takes the following parameters:
	//
	PreActivate func(action *Action)
}

func defaultUIManagerOverrides(v *UIManager) UIManagerOverrides {
	return UIManagerOverrides{
		ActionsChanged:  v.actionsChanged,
		AddWidget:       v.addWidget,
		ConnectProxy:    v.connectProxy,
		DisconnectProxy: v.disconnectProxy,
		Action:          v.action,
		Widget:          v.widget,
		PostActivate:    v.postActivate,
		PreActivate:     v.preActivate,
	}
}

// UIManager: > GtkUIManager is deprecated since GTK+ 3.10. To construct user
// interfaces > from XML definitions, you should use Builder, Model, et al. To >
// work with actions, use #GAction, Actionable et al. These newer classes >
// support richer functionality and integration with various desktop shells. >
// It should be possible to migrate most/all functionality from GtkUIManager.
//
// A UIManager constructs a user interface (menus and toolbars) from one or more
// UI definitions, which reference actions from one or more action groups.
//
//
// UI Definitions
//
// The UI definitions are specified in an XML format which can be roughly
// described by the following DTD.
//
// > Do not confuse the GtkUIManager UI Definitions described here with > the
// similarly named [GtkBuilder UI Definitions][BUILDER-UI].
//
//    <!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
//    <!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
//    <!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
//    <!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
//    <!ELEMENT toolbar     (toolitem|separator|placeholder)* >
//    <!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
//    <!ELEMENT menuitem     EMPTY >
//    <!ELEMENT toolitem     (menu?) >
//    <!ELEMENT separator    EMPTY >
//    <!ELEMENT accelerator  EMPTY >
//    <!ATTLIST menubar      name                      PLIED
//                           action                    PLIED >
//    <!ATTLIST toolbar      name                      PLIED
//                           action                    PLIED >
//    <!ATTLIST popup        name                      PLIED
//                           action                    PLIED
//                           accelerators (true|false) PLIED >
//    <!ATTLIST placeholder  name                      PLIED
//                           action                    PLIED >
//    <!ATTLIST separator    name                      PLIED
//                           action                    PLIED
//                           expand       (true|false) PLIED >
//    <!ATTLIST menu         name                      PLIED
//                           action                    QUIRED
//                           position     (top|bot)    PLIED >
//    <!ATTLIST menuitem     name                      PLIED
//                           action                    QUIRED
//                           position     (top|bot)    PLIED
//                           always-show-image (true|false) PLIED >
//    <!ATTLIST toolitem     name                      PLIED
//                           action                    QUIRED
//                           position     (top|bot)    PLIED >
//    <!ATTLIST accelerator  name                      PLIED
//                           action                    QUIRED >
//
// There are some additional restrictions beyond those specified in the DTD,
// e.g. every toolitem must have a toolbar in its anchestry and every menuitem
// must have a menubar or popup in its anchestry. Since a Parser is used to
// parse the UI description, it must not only be valid XML, but valid markup.
//
// If a name is not specified, it defaults to the action. If an action is not
// specified either, the element name is used. The name and action attributes
// must not contain “/” characters after parsing (since that would mess up path
// lookup) and must be usable as XML attributes when enclosed in doublequotes,
// thus they must not “"” characters or references to the &quot; entity.
//
// A UI definition #
//
//    <ui>
//      <menubar>
//        <menu name="FileMenu" action="FileMenuAction">
//          <menuitem name="New" action="New2Action" />
//          <placeholder name="FileMenuAdditions" />
//        </menu>
//        <menu name="JustifyMenu" action="JustifyMenuAction">
//          <menuitem name="Left" action="justify-left"/>
//          <menuitem name="Centre" action="justify-center"/>
//          <menuitem name="Right" action="justify-right"/>
//          <menuitem name="Fill" action="justify-fill"/>
//        </menu>
//      </menubar>
//      <toolbar action="toolbar1">
//        <placeholder name="JustifyToolItems">
//          <separator/>
//          <toolitem name="Left" action="justify-left"/>
//          <toolitem name="Centre" action="justify-center"/>
//          <toolitem name="Right" action="justify-right"/>
//          <toolitem name="Fill" action="justify-fill"/>
//          <separator/>
//        </placeholder>
//      </toolbar>
//    </ui>
//
// The constructed widget hierarchy is very similar to the element tree of the
// XML, with the exception that placeholders are merged into their parents. The
// correspondence of XML elements to widgets should be almost obvious:
//
// - menubar
//
//    a MenuBar
//
// - toolbar
//
//    a Toolbar
//
// - popup
//
//    a toplevel Menu
//
// - menu
//
//    a Menu attached to a menuitem
//
// - menuitem
//
//    a MenuItem subclass, the exact type depends on the action
//
// - toolitem
//
//    a ToolItem subclass, the exact type depends on the
//    action. Note that toolitem elements may contain a menu element,
//    but only if their associated action specifies a
//    MenuToolButton as proxy.
//
// - separator
//
//    a SeparatorMenuItem or SeparatorToolItem
//
// - accelerator
//
//    a keyboard accelerator
//
// The “position” attribute determines where a constructed widget is positioned
// wrt. to its siblings in the partially constructed tree. If it is “top”, the
// widget is prepended, otherwise it is appended.
//
//
// UI Merging
//
// The most remarkable feature of UIManager is that it can overlay a set of
// menuitems and toolitems over another one, and demerge them later.
//
// Merging is done based on the names of the XML elements. Each element is
// identified by a path which consists of the names of its anchestors, separated
// by slashes. For example, the menuitem named “Left” in the example above has
// the path /ui/menubar/JustifyMenu/Left and the toolitem with the same name has
// path /ui/toolbar1/JustifyToolItems/Left.
//
// Accelerators #
//
// Every action has an accelerator path. Accelerators are installed together
// with menuitem proxies, but they can also be explicitly added with
// <accelerator> elements in the UI definition. This makes it possible to have
// accelerators for actions even if they have no visible proxies.
//
//
// Smart Separators
//
// The separators created by UIManager are “smart”, i.e. they do not show up in
// the UI unless they end up between two visible menu or tool items. Separators
// which are located at the very beginning or end of the menu or toolbar
// containing them, or multiple separators next to each other, are hidden. This
// is a useful feature, since the merging of UI elements from multiple sources
// can make it hard or impossible to determine in advance whether a separator
// will end up in such an unfortunate position.
//
// For separators in toolbars, you can set expand="true" to turn them from a
// small, visible separator to an expanding, invisible one. Toolitems following
// an expanding separator are effectively right-aligned.
//
//
// Empty Menus
//
// Submenus pose similar problems to separators inconnection with merging. It is
// impossible to know in advance whether they will end up empty after merging.
// UIManager offers two ways to treat empty submenus:
//
// - make them disappear by hiding the menu item they’re attached to
//
// - add an insensitive “Empty” item
//
// The behaviour is chosen based on the “hide_if_empty” property of the action
// to which the submenu is associated.
//
//
// GtkUIManager as GtkBuildable
//
// The GtkUIManager implementation of the GtkBuildable interface accepts
// GtkActionGroup objects as <child> elements in UI definitions.
//
// A GtkUIManager UI definition as described above can be embedded in an
// GtkUIManager <object> element in a GtkBuilder UI definition.
//
// The widgets that are constructed by a GtkUIManager can be embedded in other
// parts of the constructed user interface with the help of the “constructor”
// attribute. See the example below.
//
// An embedded GtkUIManager UI definition
//
//    <object class="GtkUIManager" id="uiman">
//      <child>
//        <object class="GtkActionGroup" id="actiongroup">
//          <child>
//            <object class="GtkAction" id="file">
//              <property name="label">_File</property>
//            </object>
//          </child>
//        </object>
//      </child>
//      <ui>
//        <menubar name="menubar1">
//          <menu action="file">
//          </menu>
//        </menubar>
//      </ui>
//    </object>
//    <object class="GtkWindow" id="main-window">
//      <child>
//        <object class="GtkMenuBar" id="menubar1" constructor="uiman"/>
//      </child>
//    </object>.
type UIManager struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Buildable
}

var (
	_ coreglib.Objector = (*UIManager)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*UIManager, *UIManagerClass, UIManagerOverrides](
		GTypeUIManager,
		initUIManagerClass,
		wrapUIManager,
		defaultUIManagerOverrides,
	)
}

func initUIManagerClass(gclass unsafe.Pointer, overrides UIManagerOverrides, classInitFunc func(*UIManagerClass)) {
	pclass := (*C.GtkUIManagerClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeUIManager))))

	if overrides.ActionsChanged != nil {
		pclass.actions_changed = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_actions_changed)
	}

	if overrides.AddWidget != nil {
		pclass.add_widget = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_add_widget)
	}

	if overrides.ConnectProxy != nil {
		pclass.connect_proxy = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_connect_proxy)
	}

	if overrides.DisconnectProxy != nil {
		pclass.disconnect_proxy = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_disconnect_proxy)
	}

	if overrides.Action != nil {
		pclass.get_action = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_get_action)
	}

	if overrides.Widget != nil {
		pclass.get_widget = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_get_widget)
	}

	if overrides.PostActivate != nil {
		pclass.post_activate = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_post_activate)
	}

	if overrides.PreActivate != nil {
		pclass.pre_activate = (*[0]byte)(C._gotk4_gtk3_UIManagerClass_pre_activate)
	}

	if classInitFunc != nil {
		class := (*UIManagerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapUIManager(obj *coreglib.Object) *UIManager {
	return &UIManager{
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalUIManager(p uintptr) (interface{}, error) {
	return wrapUIManager(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActionsChanged signal is emitted whenever the set of actions changes.
func (manager *UIManager) ConnectActionsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "actions-changed", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectActionsChanged), f)
}

// ConnectAddWidget signal is emitted for each generated menubar and toolbar. It
// is not emitted for generated popup menus, which can be obtained by
// gtk_ui_manager_get_widget().
func (manager *UIManager) ConnectAddWidget(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "add-widget", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectAddWidget), f)
}

// ConnectConnectProxy signal is emitted after connecting a proxy to an action
// in the group.
//
// This is intended for simple customizations for which a custom action class
// would be too clumsy, e.g. showing tooltips for menuitems in the statusbar.
func (manager *UIManager) ConnectConnectProxy(f func(action *Action, proxy Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "connect-proxy", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectConnectProxy), f)
}

// ConnectDisconnectProxy signal is emitted after disconnecting a proxy from an
// action in the group.
func (manager *UIManager) ConnectDisconnectProxy(f func(action *Action, proxy Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "disconnect-proxy", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectDisconnectProxy), f)
}

// ConnectPostActivate signal is emitted just after the action is activated.
//
// This is intended for applications to get notification just after any action
// is activated.
func (manager *UIManager) ConnectPostActivate(f func(action *Action)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "post-activate", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectPostActivate), f)
}

// ConnectPreActivate signal is emitted just before the action is activated.
//
// This is intended for applications to get notification just before any action
// is activated.
func (manager *UIManager) ConnectPreActivate(f func(action *Action)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "pre-activate", false, unsafe.Pointer(C._gotk4_gtk3_UIManager_ConnectPreActivate), f)
}

func (manager *UIManager) actionsChanged() {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.actions_changed

	var _arg0 *C.GtkUIManager // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	C._gotk4_gtk3_UIManager_virtual_actions_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(manager)
}

// The function takes the following parameters:
//
func (manager *UIManager) addWidget(widget Widgetter) {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.add_widget

	var _arg0 *C.GtkUIManager // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	C._gotk4_gtk3_UIManager_virtual_add_widget(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(widget)
}

// The function takes the following parameters:
//
//    - action
//    - proxy
//
func (manager *UIManager) connectProxy(action *Action, proxy Widgetter) {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.connect_proxy

	var _arg0 *C.GtkUIManager // out
	var _arg1 *C.GtkAction    // out
	var _arg2 *C.GtkWidget    // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(proxy).Native()))

	C._gotk4_gtk3_UIManager_virtual_connect_proxy(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(action)
	runtime.KeepAlive(proxy)
}

// The function takes the following parameters:
//
//    - action
//    - proxy
//
func (manager *UIManager) disconnectProxy(action *Action, proxy Widgetter) {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.disconnect_proxy

	var _arg0 *C.GtkUIManager // out
	var _arg1 *C.GtkAction    // out
	var _arg2 *C.GtkWidget    // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	_arg2 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(proxy).Native()))

	C._gotk4_gtk3_UIManager_virtual_disconnect_proxy(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(action)
	runtime.KeepAlive(proxy)
}

// The function takes the following parameters:
//
func (manager *UIManager) postActivate(action *Action) {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.post_activate

	var _arg0 *C.GtkUIManager // out
	var _arg1 *C.GtkAction    // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	C._gotk4_gtk3_UIManager_virtual_post_activate(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(action)
}

// The function takes the following parameters:
//
func (manager *UIManager) preActivate(action *Action) {
	gclass := (*C.GtkUIManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.pre_activate

	var _arg0 *C.GtkUIManager // out
	var _arg1 *C.GtkAction    // out

	_arg0 = (*C.GtkUIManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	C._gotk4_gtk3_UIManager_virtual_pre_activate(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(action)
}

// UIManagerClass: instance of this type is always passed by reference.
type UIManagerClass struct {
	*uiManagerClass
}

// uiManagerClass is the struct that's finalized.
type uiManagerClass struct {
	native *C.GtkUIManagerClass
}
