// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewStatusIcon creates an empty status icon object.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications.
//
// The function returns the following values:
//
//    - statusIcon: new StatusIcon.
//
func NewStatusIcon() *StatusIcon {
	var _cret *C.GtkStatusIcon // in

	_cret = C.gtk_status_icon_new()

	var _statusIcon *StatusIcon // out

	_statusIcon = wrapStatusIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _statusIcon
}

// NewStatusIconFromFile creates a status icon displaying the file filename.
//
// The image will be scaled down to fit in the available space in the
// notification area, if necessary.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications.
//
// The function takes the following parameters:
//
//    - filename: filename.
//
// The function returns the following values:
//
//    - statusIcon: new StatusIcon.
//
func NewStatusIconFromFile(filename string) *StatusIcon {
	var _arg1 *C.gchar         // out
	var _cret *C.GtkStatusIcon // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_status_icon_new_from_file(_arg1)
	runtime.KeepAlive(filename)

	var _statusIcon *StatusIcon // out

	_statusIcon = wrapStatusIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _statusIcon
}

// NewStatusIconFromIconName creates a status icon displaying an icon from the
// current icon theme. If the current icon theme is changed, the icon will be
// updated appropriately.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications.
//
// The function takes the following parameters:
//
//    - iconName: icon name.
//
// The function returns the following values:
//
//    - statusIcon: new StatusIcon.
//
func NewStatusIconFromIconName(iconName string) *StatusIcon {
	var _arg1 *C.gchar         // out
	var _cret *C.GtkStatusIcon // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_status_icon_new_from_icon_name(_arg1)
	runtime.KeepAlive(iconName)

	var _statusIcon *StatusIcon // out

	_statusIcon = wrapStatusIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _statusIcon
}

// NewStatusIconFromPixbuf creates a status icon displaying pixbuf.
//
// The image will be scaled down to fit in the available space in the
// notification area, if necessary.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications.
//
// The function takes the following parameters:
//
//    - pixbuf: Pixbuf.
//
// The function returns the following values:
//
//    - statusIcon: new StatusIcon.
//
func NewStatusIconFromPixbuf(pixbuf *gdkpixbuf.Pixbuf) *StatusIcon {
	var _arg1 *C.GdkPixbuf     // out
	var _cret *C.GtkStatusIcon // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	_cret = C.gtk_status_icon_new_from_pixbuf(_arg1)
	runtime.KeepAlive(pixbuf)

	var _statusIcon *StatusIcon // out

	_statusIcon = wrapStatusIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _statusIcon
}

// NewStatusIconFromStock creates a status icon displaying a stock icon. Sample
// stock icon names are K_STOCK_OPEN, K_STOCK_QUIT. You can register your own
// stock icon names, see gtk_icon_factory_add_default() and
// gtk_icon_factory_add().
//
// Deprecated: Use #GNotification and Application to provide status
// notifications.
//
// The function takes the following parameters:
//
//    - stockId: stock icon id.
//
// The function returns the following values:
//
//    - statusIcon: new StatusIcon.
//
func NewStatusIconFromStock(stockId string) *StatusIcon {
	var _arg1 *C.gchar         // out
	var _cret *C.GtkStatusIcon // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_status_icon_new_from_stock(_arg1)
	runtime.KeepAlive(stockId)

	var _statusIcon *StatusIcon // out

	_statusIcon = wrapStatusIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _statusIcon
}

// Geometry obtains information about the location of the status icon on screen.
// This information can be used to e.g. position popups like notification
// bubbles.
//
// See gtk_status_icon_position_menu() for a more convenient alternative for
// positioning menus.
//
// Note that some platforms do not allow GTK+ to provide this information, and
// even on platforms that do allow it, the information is not reliable unless
// the status icon is embedded in a notification area, see
// gtk_status_icon_is_embedded().
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, as the
// platform is responsible for the presentation of notifications.
//
// The function returns the following values:
//
//    - screen (optional): return location for the screen, or NULL if the
//      information is not needed.
//    - area (optional): return location for the area occupied by the status
//      icon, or NULL.
//    - orientation (optional): return location for the orientation of the panel
//      in which the status icon is embedded, or NULL. A panel at the top or
//      bottom of the screen is horizontal, a panel at the left or right is
//      vertical.
//    - ok: TRUE if the location information has been filled in.
//
func (statusIcon *StatusIcon) Geometry() (*gdk.Screen, *gdk.Rectangle, Orientation, bool) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.GdkScreen     // in
	var _arg2 C.GdkRectangle   // in
	var _arg3 C.GtkOrientation // in
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_geometry(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(statusIcon)

	var _screen *gdk.Screen      // out
	var _area *gdk.Rectangle     // out
	var _orientation Orientation // out
	var _ok bool                 // out

	if _arg1 != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_arg1))
			_screen = &gdk.Screen{
				Object: obj,
			}
		}
	}
	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	_orientation = Orientation(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _screen, _area, _orientation, _ok
}

// IconName gets the name of the icon being displayed by the StatusIcon. The
// storage type of the status icon must be GTK_IMAGE_EMPTY or
// GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()). The returned
// string is owned by the StatusIcon and should not be freed or modified.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - utf8 (optional): name of the displayed icon, or NULL if the image is
//      empty.
//
func (statusIcon *StatusIcon) IconName() string {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_icon_name(_arg0)
	runtime.KeepAlive(statusIcon)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Pixbuf gets the Pixbuf being displayed by the StatusIcon. The storage type of
// the status icon must be GTK_IMAGE_EMPTY or GTK_IMAGE_PIXBUF (see
// gtk_status_icon_get_storage_type()). The caller of this function does not own
// a reference to the returned pixbuf.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - pixbuf (optional): displayed pixbuf, or NULL if the image is empty.
//
func (statusIcon *StatusIcon) Pixbuf() *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.GdkPixbuf     // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_pixbuf(_arg0)
	runtime.KeepAlive(statusIcon)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_pixbuf = &gdkpixbuf.Pixbuf{
				Object: obj,
				LoadableIcon: gio.LoadableIcon{
					Icon: gio.Icon{
						Object: obj,
					},
				},
			}
		}
	}

	return _pixbuf
}

// Size gets the size in pixels that is available for the image. Stock icons and
// named icons adapt their size automatically if the size of the notification
// area changes. For other storage types, the size-changed signal can be used to
// react to size changes.
//
// Note that the returned size is only meaningful while the status icon is
// embedded (see gtk_status_icon_is_embedded()).
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, as the
// representation of a notification is left to the platform.
//
// The function returns the following values:
//
//    - gint: size that is available for the image.
//
func (statusIcon *StatusIcon) Size() int {
	var _arg0 *C.GtkStatusIcon // out
	var _cret C.gint           // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_size(_arg0)
	runtime.KeepAlive(statusIcon)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Stock gets the id of the stock icon being displayed by the StatusIcon. The
// storage type of the status icon must be GTK_IMAGE_EMPTY or GTK_IMAGE_STOCK
// (see gtk_status_icon_get_storage_type()). The returned string is owned by the
// StatusIcon and should not be freed or modified.
//
// Deprecated: Use gtk_status_icon_get_icon_name() instead.
//
// The function returns the following values:
//
//    - utf8 (optional): stock id of the displayed stock icon, or NULL if the
//      image is empty.
//
func (statusIcon *StatusIcon) Stock() string {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_stock(_arg0)
	runtime.KeepAlive(statusIcon)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// StorageType gets the type of representation being used by the StatusIcon to
// store image data. If the StatusIcon has no image data, the return value will
// be GTK_IMAGE_EMPTY.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, and
// #GNotification only supports #GIcon instances.
//
// The function returns the following values:
//
//    - imageType: image representation being used.
//
func (statusIcon *StatusIcon) StorageType() ImageType {
	var _arg0 *C.GtkStatusIcon // out
	var _cret C.GtkImageType   // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_storage_type(_arg0)
	runtime.KeepAlive(statusIcon)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

// Visible returns whether the status icon is visible or not. Note that being
// visible does not guarantee that the user can actually see the icon, see also
// gtk_status_icon_is_embedded().
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - ok: TRUE if the status icon is visible.
//
func (statusIcon *StatusIcon) Visible() bool {
	var _arg0 *C.GtkStatusIcon // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_visible(_arg0)
	runtime.KeepAlive(statusIcon)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsEmbedded returns whether the status icon is embedded in a notification
// area.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - ok: TRUE if the status icon is embedded in a notification area.
//
func (statusIcon *StatusIcon) IsEmbedded() bool {
	var _arg0 *C.GtkStatusIcon // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_is_embedded(_arg0)
	runtime.KeepAlive(statusIcon)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFromFile makes status_icon display the file filename. See
// gtk_status_icon_new_from_file() for details.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; you can use g_notification_set_icon() to associate a #GIcon
// with a notification.
//
// The function takes the following parameters:
//
//    - filename: filename.
//
func (statusIcon *StatusIcon) SetFromFile(filename string) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_status_icon_set_from_file(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(filename)
}

// SetFromIconName makes status_icon display the icon named icon_name from the
// current icon theme. See gtk_status_icon_new_from_icon_name() for details.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; you can use g_notification_set_icon() to associate a #GIcon
// with a notification.
//
// The function takes the following parameters:
//
//    - iconName: icon name.
//
func (statusIcon *StatusIcon) SetFromIconName(iconName string) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_status_icon_set_from_icon_name(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(iconName)
}

// SetFromPixbuf makes status_icon display pixbuf. See
// gtk_status_icon_new_from_pixbuf() for details.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; you can use g_notification_set_icon() to associate a #GIcon
// with a notification.
//
// The function takes the following parameters:
//
//    - pixbuf (optional) or NULL.
//
func (statusIcon *StatusIcon) SetFromPixbuf(pixbuf *gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.GdkPixbuf     // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	if pixbuf != nil {
		_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	}

	C.gtk_status_icon_set_from_pixbuf(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(pixbuf)
}

// SetFromStock makes status_icon display the stock icon with the id stock_id.
// See gtk_status_icon_new_from_stock() for details.
//
// Deprecated: Use gtk_status_icon_set_from_icon_name() instead.
//
// The function takes the following parameters:
//
//    - stockId: stock icon id.
//
func (statusIcon *StatusIcon) SetFromStock(stockId string) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_status_icon_set_from_stock(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(stockId)
}

// SetVisible shows or hides a status icon.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, as
// notifications are managed by the platform.
//
// The function takes the following parameters:
//
//    - visible: TRUE to show the status icon, FALSE to hide it.
//
func (statusIcon *StatusIcon) SetVisible(visible bool) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_status_icon_set_visible(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(visible)
}
