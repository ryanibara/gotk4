// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeRadioMenuItemAccessible = coreglib.Type(C.gtk_radio_menu_item_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRadioMenuItemAccessible, F: marshalRadioMenuItemAccessible},
	})
}

// RadioMenuItemAccessibleOverrider contains methods that are overridable.
type RadioMenuItemAccessibleOverrider interface {
}

type RadioMenuItemAccessible struct {
	_ [0]func() // equal guard
	CheckMenuItemAccessible
}

var (
	_ coreglib.Objector = (*RadioMenuItemAccessible)(nil)
)

func initClassRadioMenuItemAccessible(gclass unsafe.Pointer, goval any) {
}

func wrapRadioMenuItemAccessible(obj *coreglib.Object) *RadioMenuItemAccessible {
	return &RadioMenuItemAccessible{
		CheckMenuItemAccessible: CheckMenuItemAccessible{
			MenuItemAccessible: MenuItemAccessible{
				ContainerAccessible: ContainerAccessible{
					WidgetAccessible: WidgetAccessible{
						Accessible: Accessible{
							ObjectClass: atk.ObjectClass{
								Object: obj,
							},
						},
						Component: atk.Component{
							Object: obj,
						},
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				Selection: atk.Selection{
					Object: obj,
				},
			},
		},
	}
}

func marshalRadioMenuItemAccessible(p uintptr) (interface{}, error) {
	return wrapRadioMenuItemAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
