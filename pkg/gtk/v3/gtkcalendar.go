// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Calendar_ConnectPrevYear(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectPrevMonth(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectNextYear(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectNextMonth(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectMonthChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectDaySelectedDoubleClick(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectDaySelected(gpointer, guintptr);
// extern void _gotk4_gtk3_CalendarClass_prev_year(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_prev_month(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_next_year(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_next_month(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_month_changed(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_day_selected_double_click(GtkCalendar*);
// extern void _gotk4_gtk3_CalendarClass_day_selected(GtkCalendar*);
// void _gotk4_gtk3_Calendar_virtual_day_selected(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_day_selected_double_click(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_month_changed(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_next_month(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_next_year(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_prev_month(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Calendar_virtual_prev_year(void* fnptr, GtkCalendar* arg0) {
//   ((void (*)(GtkCalendar*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeCalendarDisplayOptions = coreglib.Type(C.gtk_calendar_display_options_get_type())
	GTypeCalendar               = coreglib.Type(C.gtk_calendar_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCalendarDisplayOptions, F: marshalCalendarDisplayOptions},
		coreglib.TypeMarshaler{T: GTypeCalendar, F: marshalCalendar},
	})
}

// CalendarDisplayOptions: these options can be used to influence the display
// and behaviour of a Calendar.
type CalendarDisplayOptions C.guint

const (
	// CalendarShowHeading specifies that the month and year should be
	// displayed.
	CalendarShowHeading CalendarDisplayOptions = 0b1
	// CalendarShowDayNames specifies that three letter day descriptions should
	// be present.
	CalendarShowDayNames CalendarDisplayOptions = 0b10
	// CalendarNoMonthChange prevents the user from switching months with the
	// calendar.
	CalendarNoMonthChange CalendarDisplayOptions = 0b100
	// CalendarShowWeekNumbers displays each week numbers of the current year,
	// down the left side of the calendar.
	CalendarShowWeekNumbers CalendarDisplayOptions = 0b1000
	// CalendarShowDetails: just show an indicator, not the full details text
	// when details are provided. See gtk_calendar_set_detail_func().
	CalendarShowDetails CalendarDisplayOptions = 0b100000
)

func marshalCalendarDisplayOptions(p uintptr) (interface{}, error) {
	return CalendarDisplayOptions(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for CalendarDisplayOptions.
func (c CalendarDisplayOptions) String() string {
	if c == 0 {
		return "CalendarDisplayOptions(0)"
	}

	var builder strings.Builder
	builder.Grow(106)

	for c != 0 {
		next := c & (c - 1)
		bit := c - next

		switch bit {
		case CalendarShowHeading:
			builder.WriteString("ShowHeading|")
		case CalendarShowDayNames:
			builder.WriteString("ShowDayNames|")
		case CalendarNoMonthChange:
			builder.WriteString("NoMonthChange|")
		case CalendarShowWeekNumbers:
			builder.WriteString("ShowWeekNumbers|")
		case CalendarShowDetails:
			builder.WriteString("ShowDetails|")
		default:
			builder.WriteString(fmt.Sprintf("CalendarDisplayOptions(0b%b)|", bit))
		}

		c = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if c contains other.
func (c CalendarDisplayOptions) Has(other CalendarDisplayOptions) bool {
	return (c & other) == other
}

// CalendarOverrides contains methods that are overridable.
type CalendarOverrides struct {
	DaySelected            func()
	DaySelectedDoubleClick func()
	MonthChanged           func()
	NextMonth              func()
	NextYear               func()
	PrevMonth              func()
	PrevYear               func()
}

func defaultCalendarOverrides(v *Calendar) CalendarOverrides {
	return CalendarOverrides{
		DaySelected:            v.daySelected,
		DaySelectedDoubleClick: v.daySelectedDoubleClick,
		MonthChanged:           v.monthChanged,
		NextMonth:              v.nextMonth,
		NextYear:               v.nextYear,
		PrevMonth:              v.prevMonth,
		PrevYear:               v.prevYear,
	}
}

// Calendar is a widget that displays a Gregorian calendar, one month at a time.
// It can be created with gtk_calendar_new().
//
// The month and year currently displayed can be altered with
// gtk_calendar_select_month(). The exact day can be selected from the displayed
// month using gtk_calendar_select_day().
//
// To place a visual marker on a particular day, use gtk_calendar_mark_day() and
// to remove the marker, gtk_calendar_unmark_day(). Alternative, all marks can
// be cleared with gtk_calendar_clear_marks().
//
// The way in which the calendar itself is displayed can be altered using
// gtk_calendar_set_display_options().
//
// The selected date can be retrieved from a Calendar using
// gtk_calendar_get_date().
//
// Users should be aware that, although the Gregorian calendar is the legal
// calendar in most countries, it was adopted progressively between 1582 and
// 1929. Display before these dates is likely to be historically incorrect.
type Calendar struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Calendar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Calendar, *CalendarClass, CalendarOverrides](
		GTypeCalendar,
		initCalendarClass,
		wrapCalendar,
		defaultCalendarOverrides,
	)
}

func initCalendarClass(gclass unsafe.Pointer, overrides CalendarOverrides, classInitFunc func(*CalendarClass)) {
	pclass := (*C.GtkCalendarClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeCalendar))))

	if overrides.DaySelected != nil {
		pclass.day_selected = (*[0]byte)(C._gotk4_gtk3_CalendarClass_day_selected)
	}

	if overrides.DaySelectedDoubleClick != nil {
		pclass.day_selected_double_click = (*[0]byte)(C._gotk4_gtk3_CalendarClass_day_selected_double_click)
	}

	if overrides.MonthChanged != nil {
		pclass.month_changed = (*[0]byte)(C._gotk4_gtk3_CalendarClass_month_changed)
	}

	if overrides.NextMonth != nil {
		pclass.next_month = (*[0]byte)(C._gotk4_gtk3_CalendarClass_next_month)
	}

	if overrides.NextYear != nil {
		pclass.next_year = (*[0]byte)(C._gotk4_gtk3_CalendarClass_next_year)
	}

	if overrides.PrevMonth != nil {
		pclass.prev_month = (*[0]byte)(C._gotk4_gtk3_CalendarClass_prev_month)
	}

	if overrides.PrevYear != nil {
		pclass.prev_year = (*[0]byte)(C._gotk4_gtk3_CalendarClass_prev_year)
	}

	if classInitFunc != nil {
		class := (*CalendarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCalendar(obj *coreglib.Object) *Calendar {
	return &Calendar{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalCalendar(p uintptr) (interface{}, error) {
	return wrapCalendar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectDaySelected is emitted when the user selects a day.
func (calendar *Calendar) ConnectDaySelected(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "day-selected", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectDaySelected), f)
}

// ConnectDaySelectedDoubleClick is emitted when the user double-clicks a day.
func (calendar *Calendar) ConnectDaySelectedDoubleClick(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "day-selected-double-click", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectDaySelectedDoubleClick), f)
}

// ConnectMonthChanged is emitted when the user clicks a button to change the
// selected month on a calendar.
func (calendar *Calendar) ConnectMonthChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "month-changed", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectMonthChanged), f)
}

// ConnectNextMonth is emitted when the user switched to the next month.
func (calendar *Calendar) ConnectNextMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "next-month", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectNextMonth), f)
}

// ConnectNextYear is emitted when user switched to the next year.
func (calendar *Calendar) ConnectNextYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "next-year", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectNextYear), f)
}

// ConnectPrevMonth is emitted when the user switched to the previous month.
func (calendar *Calendar) ConnectPrevMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "prev-month", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectPrevMonth), f)
}

// ConnectPrevYear is emitted when user switched to the previous year.
func (calendar *Calendar) ConnectPrevYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(calendar, "prev-year", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectPrevYear), f)
}

// NewCalendar creates a new calendar, with the current date being selected.
//
// The function returns the following values:
//
//    - calendar: newly Calendar widget.
//
func NewCalendar() *Calendar {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_calendar_new()

	var _calendar *Calendar // out

	_calendar = wrapCalendar(coreglib.Take(unsafe.Pointer(_cret)))

	return _calendar
}

// ClearMarks: remove all visual markers.
func (calendar *Calendar) ClearMarks() {
	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C.gtk_calendar_clear_marks(_arg0)
	runtime.KeepAlive(calendar)
}

// Date obtains the selected date from a Calendar.
//
// The function returns the following values:
//
//    - year (optional): location to store the year as a decimal number (e.g.
//      2011), or NULL.
//    - month (optional): location to store the month number (between 0 and 11),
//      or NULL.
//    - day (optional): location to store the day number (between 1 and 31), or
//      NULL.
//
func (calendar *Calendar) Date() (year, month, day uint) {
	var _arg0 *C.GtkCalendar // out
	var _arg1 C.guint        // in
	var _arg2 C.guint        // in
	var _arg3 C.guint        // in

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C.gtk_calendar_get_date(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(calendar)

	var _year uint  // out
	var _month uint // out
	var _day uint   // out

	_year = uint(_arg1)
	_month = uint(_arg2)
	_day = uint(_arg3)

	return _year, _month, _day
}

// MarkDay places a visual marker on a particular day.
//
// The function takes the following parameters:
//
//    - day number to mark between 1 and 31.
//
func (calendar *Calendar) MarkDay(day uint) {
	var _arg0 *C.GtkCalendar // out
	var _arg1 C.guint        // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))
	_arg1 = C.guint(day)

	C.gtk_calendar_mark_day(_arg0, _arg1)
	runtime.KeepAlive(calendar)
	runtime.KeepAlive(day)
}

// SelectDay selects a day from the current month.
//
// The function takes the following parameters:
//
//    - day number between 1 and 31, or 0 to unselect the currently selected day.
//
func (calendar *Calendar) SelectDay(day uint) {
	var _arg0 *C.GtkCalendar // out
	var _arg1 C.guint        // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))
	_arg1 = C.guint(day)

	C.gtk_calendar_select_day(_arg0, _arg1)
	runtime.KeepAlive(calendar)
	runtime.KeepAlive(day)
}

// SelectMonth shifts the calendar to a different month.
//
// The function takes the following parameters:
//
//    - month number between 0 and 11.
//    - year the month is in.
//
func (calendar *Calendar) SelectMonth(month, year uint) {
	var _arg0 *C.GtkCalendar // out
	var _arg1 C.guint        // out
	var _arg2 C.guint        // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))
	_arg1 = C.guint(month)
	_arg2 = C.guint(year)

	C.gtk_calendar_select_month(_arg0, _arg1, _arg2)
	runtime.KeepAlive(calendar)
	runtime.KeepAlive(month)
	runtime.KeepAlive(year)
}

// UnmarkDay removes the visual marker from a particular day.
//
// The function takes the following parameters:
//
//    - day number to unmark between 1 and 31.
//
func (calendar *Calendar) UnmarkDay(day uint) {
	var _arg0 *C.GtkCalendar // out
	var _arg1 C.guint        // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))
	_arg1 = C.guint(day)

	C.gtk_calendar_unmark_day(_arg0, _arg1)
	runtime.KeepAlive(calendar)
	runtime.KeepAlive(day)
}

func (calendar *Calendar) daySelected() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.day_selected

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_day_selected(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) daySelectedDoubleClick() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.day_selected_double_click

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_day_selected_double_click(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) monthChanged() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.month_changed

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_month_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) nextMonth() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.next_month

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_next_month(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) nextYear() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.next_year

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_next_year(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) prevMonth() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.prev_month

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_prev_month(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

func (calendar *Calendar) prevYear() {
	gclass := (*C.GtkCalendarClass)(coreglib.PeekParentClass(calendar))
	fnarg := gclass.prev_year

	var _arg0 *C.GtkCalendar // out

	_arg0 = (*C.GtkCalendar)(unsafe.Pointer(coreglib.InternObject(calendar).Native()))

	C._gotk4_gtk3_Calendar_virtual_prev_year(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(calendar)
}

// CalendarClass: instance of this type is always passed by reference.
type CalendarClass struct {
	*calendarClass
}

// calendarClass is the struct that's finalized.
type calendarClass struct {
	native *C.GtkCalendarClass
}

func (c *CalendarClass) ParentClass() *WidgetClass {
	valptr := &c.native.parent_class
	var _v *WidgetClass // out
	_v = (*WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
