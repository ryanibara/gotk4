// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewRadioToolButton creates a new RadioToolButton, adding it to group.
//
// The function takes the following parameters:
//
//    - group (optional): an existing radio button group, or NULL if you are
//      creating a new group.
//
// The function returns the following values:
//
//    - radioToolButton: new RadioToolButton.
//
func NewRadioToolButton(group []*RadioButton) *RadioToolButton {
	var _arg1 *C.GSList      // out
	var _cret *C.GtkToolItem // in

	if group != nil {
		for i := len(group) - 1; i >= 0; i-- {
			src := group[i]
			var dst *C.GtkRadioButton // out
			dst = (*C.GtkRadioButton)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_slist_free(_arg1)
	}

	_cret = C.gtk_radio_tool_button_new(_arg1)
	runtime.KeepAlive(group)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = wrapRadioToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioToolButton
}

// NewRadioToolButtonFromStock creates a new RadioToolButton, adding it to
// group. The new RadioToolButton will contain an icon and label from the stock
// item indicated by stock_id.
//
// Deprecated: Use gtk_radio_tool_button_new() instead.
//
// The function takes the following parameters:
//
//    - group (optional): existing radio button group, or NULL if you are
//      creating a new group.
//    - stockId: name of a stock item.
//
// The function returns the following values:
//
//    - radioToolButton: new RadioToolButton.
//
func NewRadioToolButtonFromStock(group []*RadioButton, stockId string) *RadioToolButton {
	var _arg1 *C.GSList      // out
	var _arg2 *C.gchar       // out
	var _cret *C.GtkToolItem // in

	if group != nil {
		for i := len(group) - 1; i >= 0; i-- {
			src := group[i]
			var dst *C.GtkRadioButton // out
			dst = (*C.GtkRadioButton)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_slist_free(_arg1)
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_radio_tool_button_new_from_stock(_arg1, _arg2)
	runtime.KeepAlive(group)
	runtime.KeepAlive(stockId)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = wrapRadioToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioToolButton
}

// NewRadioToolButtonFromWidget creates a new RadioToolButton adding it to the
// same group as gruup.
//
// The function takes the following parameters:
//
//    - group (optional): existing RadioToolButton, or NULL.
//
// The function returns the following values:
//
//    - radioToolButton: new RadioToolButton.
//
func NewRadioToolButtonFromWidget(group *RadioToolButton) *RadioToolButton {
	var _arg1 *C.GtkRadioToolButton // out
	var _cret *C.GtkToolItem        // in

	if group != nil {
		_arg1 = (*C.GtkRadioToolButton)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}

	_cret = C.gtk_radio_tool_button_new_from_widget(_arg1)
	runtime.KeepAlive(group)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = wrapRadioToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioToolButton
}

// NewRadioToolButtonWithStockFromWidget creates a new RadioToolButton adding it
// to the same group as group. The new RadioToolButton will contain an icon and
// label from the stock item indicated by stock_id.
//
// Deprecated: gtk_radio_tool_button_new_from_widget.
//
// The function takes the following parameters:
//
//    - group (optional): existing RadioToolButton.
//    - stockId: name of a stock item.
//
// The function returns the following values:
//
//    - radioToolButton: new RadioToolButton.
//
func NewRadioToolButtonWithStockFromWidget(group *RadioToolButton, stockId string) *RadioToolButton {
	var _arg1 *C.GtkRadioToolButton // out
	var _arg2 *C.gchar              // out
	var _cret *C.GtkToolItem        // in

	if group != nil {
		_arg1 = (*C.GtkRadioToolButton)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_radio_tool_button_new_with_stock_from_widget(_arg1, _arg2)
	runtime.KeepAlive(group)
	runtime.KeepAlive(stockId)

	var _radioToolButton *RadioToolButton // out

	_radioToolButton = wrapRadioToolButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioToolButton
}

// Group returns the radio button group button belongs to.
//
// The function returns the following values:
//
//    - sList: group button belongs to.
//
func (button *RadioToolButton) Group() []*RadioButton {
	var _arg0 *C.GtkRadioToolButton // out
	var _cret *C.GSList             // in

	_arg0 = (*C.GtkRadioToolButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_radio_tool_button_get_group(_arg0)
	runtime.KeepAlive(button)

	var _sList []*RadioButton // out

	_sList = make([]*RadioButton, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.GtkRadioButton)(v)
		var dst *RadioButton // out
		dst = wrapRadioButton(coreglib.Take(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// SetGroup adds button to group, removing it from the group it belonged to
// before.
//
// The function takes the following parameters:
//
//    - group (optional): existing radio button group, or NULL.
//
func (button *RadioToolButton) SetGroup(group []*RadioButton) {
	var _arg0 *C.GtkRadioToolButton // out
	var _arg1 *C.GSList             // out

	_arg0 = (*C.GtkRadioToolButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if group != nil {
		for i := len(group) - 1; i >= 0; i-- {
			src := group[i]
			var dst *C.GtkRadioButton // out
			dst = (*C.GtkRadioButton)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_slist_free(_arg1)
	}

	C.gtk_radio_tool_button_set_group(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(group)
}
