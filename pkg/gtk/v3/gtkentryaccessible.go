// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeEntryAccessible = coreglib.Type(C.gtk_entry_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEntryAccessible, F: marshalEntryAccessible},
	})
}

// EntryAccessibleOverrider contains methods that are overridable.
type EntryAccessibleOverrider interface {
}

type EntryAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	*coreglib.Object
	atk.Action
	atk.EditableText
	atk.Text
}

var (
	_ coreglib.Objector = (*EntryAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeEntryAccessible,
		GoType:    reflect.TypeOf((*EntryAccessible)(nil)),
		InitClass: initClassEntryAccessible,
	})
}

func initClassEntryAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitEntryAccessible(*EntryAccessibleClass) }); ok {
		klass := (*EntryAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitEntryAccessible(klass)
	}
}

func wrapEntryAccessible(obj *coreglib.Object) *EntryAccessible {
	return &EntryAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		EditableText: atk.EditableText{
			Object: obj,
		},
		Text: atk.Text{
			Object: obj,
		},
	}
}

func marshalEntryAccessible(p uintptr) (interface{}, error) {
	return wrapEntryAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// EntryAccessibleClass: instance of this type is always passed by reference.
type EntryAccessibleClass struct {
	*entryAccessibleClass
}

// entryAccessibleClass is the struct that's finalized.
type entryAccessibleClass struct {
	native *C.GtkEntryAccessibleClass
}

func (e *EntryAccessibleClass) ParentClass() *WidgetAccessibleClass {
	valptr := &e.native.parent_class
	var v *WidgetAccessibleClass // out
	v = (*WidgetAccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
