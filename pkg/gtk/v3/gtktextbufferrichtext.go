// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// TextBufferDeserializeFunc: function that is called to deserialize rich text
// that has been serialized with gtk_text_buffer_serialize(), and insert it at
// iter.
type TextBufferDeserializeFunc func(registerBuffer, contentBuffer *TextBuffer, iter *TextIter, data []byte, createTags bool) (_goerr error)

//export _gotk4_gtk3_TextBufferDeserializeFunc
func _gotk4_gtk3_TextBufferDeserializeFunc(arg1 *C.void, arg2 *C.void, arg3 *C.void, arg4 *C.guint8, arg5 C.gsize, arg6 C.gboolean, arg7 C.gpointer, _cerr **C.GError) (cret C.gboolean) {
	var fn TextBufferDeserializeFunc
	{
		v := gbox.Get(uintptr(arg7))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(TextBufferDeserializeFunc)
	}

	var _registerBuffer *TextBuffer // out
	var _contentBuffer *TextBuffer  // out
	var _iter *TextIter             // out
	var _data []byte                // out
	var _createTags bool            // out

	_registerBuffer = wrapTextBuffer(coreglib.Take(unsafe.Pointer(arg1)))
	_contentBuffer = wrapTextBuffer(coreglib.Take(unsafe.Pointer(arg2)))
	_iter = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_data = make([]byte, arg5)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(arg4)), arg5))
	if arg6 != 0 {
		_createTags = true
	}

	_goerr := fn(_registerBuffer, _contentBuffer, _iter, _data, _createTags)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

// TextBufferSerializeFunc: function that is called to serialize the content of
// a text buffer. It must return the serialized form of the content.
type TextBufferSerializeFunc func(registerBuffer, contentBuffer *TextBuffer, start, end *TextIter) (length uint, guint8 *byte)

//export _gotk4_gtk3_TextBufferSerializeFunc
func _gotk4_gtk3_TextBufferSerializeFunc(arg1 *C.void, arg2 *C.void, arg3 *C.void, arg4 *C.void, arg5 *C.void, arg6 C.gpointer) (cret *C.guint8) {
	var fn TextBufferSerializeFunc
	{
		v := gbox.Get(uintptr(arg6))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(TextBufferSerializeFunc)
	}

	var _registerBuffer *TextBuffer // out
	var _contentBuffer *TextBuffer  // out
	var _start *TextIter            // out
	var _end *TextIter              // out

	_registerBuffer = wrapTextBuffer(coreglib.Take(unsafe.Pointer(arg1)))
	_contentBuffer = wrapTextBuffer(coreglib.Take(unsafe.Pointer(arg2)))
	_start = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_end = (*TextIter)(gextras.NewStructNative(unsafe.Pointer(arg4)))

	length, guint8 := fn(_registerBuffer, _contentBuffer, _start, _end)

	*arg5 = (*C.void)(unsafe.Pointer(length))
	if guint8 != nil {
		cret = (*C.void)(unsafe.Pointer(guint8))
	}

	return cret
}
