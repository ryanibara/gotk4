// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AccelPath returns the accel path for this action.
//
// Deprecated: Use #GAction and the accelerator path on an associated Menu
// instead.
//
// The function returns the following values:
//
//    - utf8: accel path for this action, or NULL if none is set. The returned
//      string is owned by GTK+ and must not be freed or modified.
//
func (action *Action) AccelPath() string {
	var _arg0 *C.GtkAction // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	_cret = C.gtk_action_get_accel_path(_arg0)
	runtime.KeepAlive(action)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetSensitive sets the :sensitive property of the action to sensitive. Note
// that this doesn’t necessarily mean effective sensitivity. See
// gtk_action_is_sensitive() for that.
//
// Deprecated: Use g_simple_action_set_enabled() on a Action instead.
//
// The function takes the following parameters:
//
//    - sensitive: TRUE to make the action sensitive.
//
func (action *Action) SetSensitive(sensitive bool) {
	var _arg0 *C.GtkAction // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	if sensitive {
		_arg1 = C.TRUE
	}

	C.gtk_action_set_sensitive(_arg0, _arg1)
	runtime.KeepAlive(action)
	runtime.KeepAlive(sensitive)
}

// SetVisible sets the :visible property of the action to visible. Note that
// this doesn’t necessarily mean effective visibility. See
// gtk_action_is_visible() for that.
//
// Deprecated: Use #GAction instead, and control and monitor the state of
// Actionable widgets directly.
//
// The function takes the following parameters:
//
//    - visible: TRUE to make the action visible.
//
func (action *Action) SetVisible(visible bool) {
	var _arg0 *C.GtkAction // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_action_set_visible(_arg0, _arg1)
	runtime.KeepAlive(action)
	runtime.KeepAlive(visible)
}
