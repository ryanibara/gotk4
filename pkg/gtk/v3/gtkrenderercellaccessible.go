// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeRendererCellAccessible = coreglib.Type(C.gtk_renderer_cell_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRendererCellAccessible, F: marshalRendererCellAccessible},
	})
}

// RendererCellAccessibleOverrider contains methods that are overridable.
type RendererCellAccessibleOverrider interface {
}

type RendererCellAccessible struct {
	_ [0]func() // equal guard
	CellAccessible
}

var (
	_ coreglib.Objector = (*RendererCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeRendererCellAccessible,
		GoType:        reflect.TypeOf((*RendererCellAccessible)(nil)),
		InitClass:     initClassRendererCellAccessible,
		FinalizeClass: finalizeClassRendererCellAccessible,
	})
}

func initClassRendererCellAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitRendererCellAccessible(*RendererCellAccessibleClass)
	}); ok {
		klass := (*RendererCellAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitRendererCellAccessible(klass)
	}
}

func finalizeClassRendererCellAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		FinalizeRendererCellAccessible(*RendererCellAccessibleClass)
	}); ok {
		klass := (*RendererCellAccessibleClass)(gextras.NewStructNative(gclass))
		goval.FinalizeRendererCellAccessible(klass)
	}
}

func wrapRendererCellAccessible(obj *coreglib.Object) *RendererCellAccessible {
	return &RendererCellAccessible{
		CellAccessible: CellAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			AtkObject: atk.AtkObject{
				Object: obj,
			},
			Component: atk.Component{
				Object: obj,
			},
			TableCell: atk.TableCell{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
		},
	}
}

func marshalRendererCellAccessible(p uintptr) (interface{}, error) {
	return wrapRendererCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func NewRendererCellAccessible(renderer CellRendererer) *RendererCellAccessible {
	var _arg1 *C.GtkCellRenderer // out
	var _cret *C.AtkObject       // in

	_arg1 = (*C.GtkCellRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.gtk_renderer_cell_accessible_new(_arg1)
	runtime.KeepAlive(renderer)

	var _rendererCellAccessible *RendererCellAccessible // out

	_rendererCellAccessible = wrapRendererCellAccessible(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _rendererCellAccessible
}

// RendererCellAccessibleClass: instance of this type is always passed by
// reference.
type RendererCellAccessibleClass struct {
	*rendererCellAccessibleClass
}

// rendererCellAccessibleClass is the struct that's finalized.
type rendererCellAccessibleClass struct {
	native *C.GtkRendererCellAccessibleClass
}

func (r *RendererCellAccessibleClass) ParentClass() *CellAccessibleClass {
	valptr := &r.native.parent_class
	var _v *CellAccessibleClass // out
	_v = (*CellAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
