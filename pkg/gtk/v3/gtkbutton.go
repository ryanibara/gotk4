// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Button_ConnectReleased(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectPressed(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectLeave(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectEnter(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectClicked(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk3_ButtonClass_released(GtkButton*);
// extern void _gotk4_gtk3_ButtonClass_pressed(GtkButton*);
// extern void _gotk4_gtk3_ButtonClass_leave(GtkButton*);
// extern void _gotk4_gtk3_ButtonClass_enter(GtkButton*);
// extern void _gotk4_gtk3_ButtonClass_clicked(GtkButton*);
// extern void _gotk4_gtk3_ButtonClass_activate(GtkButton*);
// void _gotk4_gtk3_Button_virtual_activate(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Button_virtual_clicked(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Button_virtual_enter(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Button_virtual_leave(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Button_virtual_pressed(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Button_virtual_released(void* fnptr, GtkButton* arg0) {
//   ((void (*)(GtkButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeButton = coreglib.Type(C.gtk_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeButton, F: marshalButton},
	})
}

// ButtonOverrides contains methods that are overridable.
type ButtonOverrides struct {
	Activate func()
	// Clicked emits a Button::clicked signal to the given Button.
	Clicked func()
	// Enter emits a Button::enter signal to the given Button.
	//
	// Deprecated: Use the Widget::enter-notify-event signal.
	Enter func()
	// Leave emits a Button::leave signal to the given Button.
	//
	// Deprecated: Use the Widget::leave-notify-event signal.
	Leave func()
	// Pressed emits a Button::pressed signal to the given Button.
	//
	// Deprecated: Use the Widget::button-press-event signal.
	Pressed func()
	// Released emits a Button::released signal to the given Button.
	//
	// Deprecated: Use the Widget::button-release-event signal.
	Released func()
}

func defaultButtonOverrides(v *Button) ButtonOverrides {
	return ButtonOverrides{
		Activate: v.activate,
		Clicked:  v.clicked,
		Enter:    v.enter,
		Leave:    v.leave,
		Pressed:  v.pressed,
		Released: v.released,
	}
}

// Button widget is generally used to trigger a callback function that is called
// when the button is pressed. The various signals and how to use them are
// outlined below.
//
// The Button widget can hold any valid child widget. That is, it can hold
// almost any other standard Widget. The most commonly used child is the Label.
//
// # CSS nodes
//
// GtkButton has a single CSS node with name button. The node will get the style
// classes .image-button or .text-button, if the content is just an image or
// label, respectively. It may also receive the .flat style class.
//
// Other style classes that are commonly used with GtkButton include
// .suggested-action and .destructive-action. In special cases, buttons can be
// made round by adding the .circular style class.
//
// Button-like widgets like ToggleButton, MenuButton, VolumeButton, LockButton,
// ColorButton, FontButton or FileChooserButton use style classes such as
// .toggle, .popup, .scale, .lock, .color, .font, .file to differentiate
// themselves from a plain GtkButton.
type Button struct {
	_ [0]func() // equal guard
	Bin

	*coreglib.Object
	Actionable
	Activatable
}

var (
	_ Binner            = (*Button)(nil)
	_ coreglib.Objector = (*Button)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Button, *ButtonClass, ButtonOverrides](
		GTypeButton,
		initButtonClass,
		wrapButton,
		defaultButtonOverrides,
	)
}

func initButtonClass(gclass unsafe.Pointer, overrides ButtonOverrides, classInitFunc func(*ButtonClass)) {
	pclass := (*C.GtkButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeButton))))

	if overrides.Activate != nil {
		pclass.activate = (*[0]byte)(C._gotk4_gtk3_ButtonClass_activate)
	}

	if overrides.Clicked != nil {
		pclass.clicked = (*[0]byte)(C._gotk4_gtk3_ButtonClass_clicked)
	}

	if overrides.Enter != nil {
		pclass.enter = (*[0]byte)(C._gotk4_gtk3_ButtonClass_enter)
	}

	if overrides.Leave != nil {
		pclass.leave = (*[0]byte)(C._gotk4_gtk3_ButtonClass_leave)
	}

	if overrides.Pressed != nil {
		pclass.pressed = (*[0]byte)(C._gotk4_gtk3_ButtonClass_pressed)
	}

	if overrides.Released != nil {
		pclass.released = (*[0]byte)(C._gotk4_gtk3_ButtonClass_released)
	}

	if classInitFunc != nil {
		class := (*ButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapButton(obj *coreglib.Object) *Button {
	return &Button{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Activatable: Activatable{
			Object: obj,
		},
	}
}

func marshalButton(p uintptr) (interface{}, error) {
	return wrapButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate signal on GtkButton is an action signal and emitting it
// causes the button to animate press then release. Applications should never
// connect to this signal, but use the Button::clicked signal.
func (button *Button) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectActivate), f)
}

// ConnectClicked is emitted when the button has been activated (pressed and
// released).
func (button *Button) ConnectClicked(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "clicked", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectClicked), f)
}

// ConnectEnter is emitted when the pointer enters the button.
func (button *Button) ConnectEnter(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "enter", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectEnter), f)
}

// ConnectLeave is emitted when the pointer leaves the button.
func (button *Button) ConnectLeave(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "leave", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectLeave), f)
}

// ConnectPressed is emitted when the button is pressed.
func (button *Button) ConnectPressed(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "pressed", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectPressed), f)
}

// ConnectReleased is emitted when the button is released.
func (button *Button) ConnectReleased(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "released", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectReleased), f)
}

// NewButton creates a new Button widget. To add a child widget to the button,
// use gtk_container_add().
//
// The function returns the following values:
//
//   - button: newly created Button widget.
//
func NewButton() *Button {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_button_new()

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonFromIconName creates a new button containing an icon from the
// current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead. If the current icon theme is changed, the icon will be updated
// appropriately.
//
// This function is a convenience wrapper around gtk_button_new() and
// gtk_button_set_image().
//
// The function takes the following parameters:
//
//   - iconName (optional): icon name or NULL.
//   - size: icon size (IconSize).
//
// The function returns the following values:
//
//   - button: new Button displaying the themed icon.
//
func NewButtonFromIconName(iconName string, size int) *Button {
	var _arg1 *C.gchar      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	if iconName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_button_new_from_icon_name(_arg1, _arg2)
	runtime.KeepAlive(iconName)
	runtime.KeepAlive(size)

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonFromStock creates a new Button containing the image and text from
// a [stock item][gtkstock]. Some stock ids have preprocessor macros like
// K_STOCK_OK and K_STOCK_APPLY.
//
// If stock_id is unknown, then it will be treated as a mnemonic label (as for
// gtk_button_new_with_mnemonic()).
//
// Deprecated: Stock items are deprecated. Use gtk_button_new_with_label()
// instead.
//
// The function takes the following parameters:
//
//   - stockId: name of the stock item.
//
// The function returns the following values:
//
//   - button: new Button.
//
func NewButtonFromStock(stockId string) *Button {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_from_stock(_arg1)
	runtime.KeepAlive(stockId)

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonWithLabel creates a Button widget with a Label child containing the
// given text.
//
// The function takes the following parameters:
//
//   - label: text you want the Label to hold.
//
// The function returns the following values:
//
//   - button: newly created Button widget.
//
func NewButtonWithLabel(label string) *Button {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_with_label(_arg1)
	runtime.KeepAlive(label)

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// NewButtonWithMnemonic creates a new Button containing a label. If characters
// in label are preceded by an underscore, they are underlined. If you need
// a literal underscore character in a label, use “__” (two underscores).
// The first underlined character represents a keyboard accelerator called a
// mnemonic. Pressing Alt and that key activates the button.
//
// The function takes the following parameters:
//
//   - label: text of the button, with an underscore in front of the mnemonic
//     character.
//
// The function returns the following values:
//
//   - button: new Button.
//
func NewButtonWithMnemonic(label string) *Button {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_button_new_with_mnemonic(_arg1)
	runtime.KeepAlive(label)

	var _button *Button // out

	_button = wrapButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _button
}

// Clicked emits a Button::clicked signal to the given Button.
func (button *Button) Clicked() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_clicked(_arg0)
	runtime.KeepAlive(button)
}

// Enter emits a Button::enter signal to the given Button.
//
// Deprecated: Use the Widget::enter-notify-event signal.
func (button *Button) Enter() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_enter(_arg0)
	runtime.KeepAlive(button)
}

// Alignment gets the alignment of the child in the button.
//
// Deprecated: Access the child widget directly if you need to control its
// alignment.
//
// The function returns the following values:
//
//   - xalign: return location for horizontal alignment.
//   - yalign: return location for vertical alignment.
//
func (button *Button) Alignment() (xalign, yalign float32) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gfloat     // in
	var _arg2 C.gfloat     // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_get_alignment(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(button)

	var _xalign float32 // out
	var _yalign float32 // out

	_xalign = float32(_arg1)
	_yalign = float32(_arg2)

	return _xalign, _yalign
}

// AlwaysShowImage returns whether the button will ignore the
// Settings:gtk-button-images setting and always show the image, if available.
//
// The function returns the following values:
//
//   - ok: TRUE if the button will always show the image.
//
func (button *Button) AlwaysShowImage() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_always_show_image(_arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EventWindow returns the button’s event window if it is realized, NULL
// otherwise. This function should be rarely needed.
//
// The function returns the following values:
//
//   - window button’s event window.
//
func (button *Button) EventWindow() gdk.Windower {
	var _arg0 *C.GtkButton // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_event_window(_arg0)
	runtime.KeepAlive(button)

	var _window gdk.Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Windower)
			return ok
		})
		rv, ok := casted.(gdk.Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	return _window
}

// FocusOnClick returns whether the button grabs focus when it is clicked with
// the mouse. See gtk_button_set_focus_on_click().
//
// Deprecated: Use gtk_widget_get_focus_on_click() instead.
//
// The function returns the following values:
//
//   - ok: TRUE if the button grabs focus when it is clicked with the mouse.
//
func (button *Button) FocusOnClick() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_focus_on_click(_arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Image gets the widget that is currenty set as the image of button.
// This may have been explicitly set by gtk_button_set_image() or constructed by
// gtk_button_new_from_stock().
//
// The function returns the following values:
//
//   - widget (optional) or NULL in case there is no image.
//
func (button *Button) Image() Widgetter {
	var _arg0 *C.GtkButton // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_image(_arg0)
	runtime.KeepAlive(button)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// ImagePosition gets the position of the image relative to the text inside the
// button.
//
// The function returns the following values:
//
//   - positionType: position.
//
func (button *Button) ImagePosition() PositionType {
	var _arg0 *C.GtkButton      // out
	var _cret C.GtkPositionType // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_image_position(_arg0)
	runtime.KeepAlive(button)

	var _positionType PositionType // out

	_positionType = PositionType(_cret)

	return _positionType
}

// Label fetches the text from the label of the button, as set by
// gtk_button_set_label(). If the label text has not been set the return value
// will be NULL. This will be the case if you create an empty button with
// gtk_button_new() to use as a container.
//
// The function returns the following values:
//
//   - utf8: text of the label widget. This string is owned by the widget and
//     must not be modified or freed.
//
func (button *Button) Label() string {
	var _arg0 *C.GtkButton // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_label(_arg0)
	runtime.KeepAlive(button)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Relief returns the current relief style of the given Button.
//
// The function returns the following values:
//
//   - reliefStyle: current ReliefStyle.
//
func (button *Button) Relief() ReliefStyle {
	var _arg0 *C.GtkButton     // out
	var _cret C.GtkReliefStyle // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_relief(_arg0)
	runtime.KeepAlive(button)

	var _reliefStyle ReliefStyle // out

	_reliefStyle = ReliefStyle(_cret)

	return _reliefStyle
}

// UseStock returns whether the button label is a stock item.
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//   - ok: TRUE if the button label is used to select a stock item instead of
//     being used directly as the label text.
//
func (button *Button) UseStock() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_use_stock(_arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UseUnderline returns whether an embedded underline in the button label
// indicates a mnemonic. See gtk_button_set_use_underline ().
//
// The function returns the following values:
//
//   - ok: TRUE if an embedded underline in the button label indicates the
//     mnemonic accelerator keys.
//
func (button *Button) UseUnderline() bool {
	var _arg0 *C.GtkButton // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_button_get_use_underline(_arg0)
	runtime.KeepAlive(button)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Leave emits a Button::leave signal to the given Button.
//
// Deprecated: Use the Widget::leave-notify-event signal.
func (button *Button) Leave() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_leave(_arg0)
	runtime.KeepAlive(button)
}

// Pressed emits a Button::pressed signal to the given Button.
//
// Deprecated: Use the Widget::button-press-event signal.
func (button *Button) Pressed() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_pressed(_arg0)
	runtime.KeepAlive(button)
}

// Released emits a Button::released signal to the given Button.
//
// Deprecated: Use the Widget::button-release-event signal.
func (button *Button) Released() {
	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C.gtk_button_released(_arg0)
	runtime.KeepAlive(button)
}

// SetAlignment sets the alignment of the child. This property has no effect
// unless the child is a Misc or a Alignment.
//
// Deprecated: Access the child widget directly if you need to control its
// alignment.
//
// The function takes the following parameters:
//
//   - xalign: horizontal position of the child, 0.0 is left aligned, 1.0 is
//     right aligned.
//   - yalign: vertical position of the child, 0.0 is top aligned, 1.0 is bottom
//     aligned.
//
func (button *Button) SetAlignment(xalign, yalign float32) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gfloat     // out
	var _arg2 C.gfloat     // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)

	C.gtk_button_set_alignment(_arg0, _arg1, _arg2)
	runtime.KeepAlive(button)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
}

// SetAlwaysShowImage: if TRUE, the button will ignore the
// Settings:gtk-button-images setting and always show the image, if available.
//
// Use this property if the button would be useless or hard to use without the
// image.
//
// The function takes the following parameters:
//
//   - alwaysShow: TRUE if the menuitem should always show the image.
//
func (button *Button) SetAlwaysShowImage(alwaysShow bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if alwaysShow {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_always_show_image(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(alwaysShow)
}

// SetFocusOnClick sets whether the button will grab focus when it is clicked
// with the mouse. Making mouse clicks not grab focus is useful in places like
// toolbars where you don’t want the keyboard focus removed from the main area
// of the application.
//
// Deprecated: Use gtk_widget_set_focus_on_click() instead.
//
// The function takes the following parameters:
//
//   - focusOnClick: whether the button grabs focus when clicked with the mouse.
//
func (button *Button) SetFocusOnClick(focusOnClick bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if focusOnClick {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_focus_on_click(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(focusOnClick)
}

// SetImage: set the image of button to the given widget. The image will be
// displayed if the label text is NULL or if Button:always-show-image is TRUE.
// You don’t have to call gtk_widget_show() on image yourself.
//
// The function takes the following parameters:
//
//   - image (optional): widget to set as the image for the button, or NULL to
//     unset.
//
func (button *Button) SetImage(image Widgetter) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if image != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	}

	C.gtk_button_set_image(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(image)
}

// SetImagePosition sets the position of the image relative to the text inside
// the button.
//
// The function takes the following parameters:
//
//   - position: position.
//
func (button *Button) SetImagePosition(position PositionType) {
	var _arg0 *C.GtkButton      // out
	var _arg1 C.GtkPositionType // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = C.GtkPositionType(position)

	C.gtk_button_set_image_position(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(position)
}

// SetLabel sets the text of the label of the button to str. This text is also
// used to select the stock item if gtk_button_set_use_stock() is used.
//
// This will also clear any previously set labels.
//
// The function takes the following parameters:
//
//   - label: string.
//
func (button *Button) SetLabel(label string) {
	var _arg0 *C.GtkButton // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_button_set_label(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(label)
}

// SetRelief sets the relief style of the edges of the given Button widget. Two
// styles exist, GTK_RELIEF_NORMAL and GTK_RELIEF_NONE. The default style is,
// as one can guess, GTK_RELIEF_NORMAL. The deprecated value GTK_RELIEF_HALF
// behaves the same as GTK_RELIEF_NORMAL.
//
// The function takes the following parameters:
//
//   - relief: gtkReliefStyle as described above.
//
func (button *Button) SetRelief(relief ReliefStyle) {
	var _arg0 *C.GtkButton     // out
	var _arg1 C.GtkReliefStyle // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = C.GtkReliefStyle(relief)

	C.gtk_button_set_relief(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(relief)
}

// SetUseStock: if TRUE, the label set on the button is used as a stock id to
// select the stock item for the button.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//   - useStock: TRUE if the button should use a stock item.
//
func (button *Button) SetUseStock(useStock bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if useStock {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_use_stock(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(useStock)
}

// SetUseUnderline: if true, an underline in the text of the button label
// indicates the next character should be used for the mnemonic accelerator key.
//
// The function takes the following parameters:
//
//   - useUnderline: TRUE if underlines in the text indicate mnemonics.
//
func (button *Button) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.GtkButton // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.gtk_button_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(useUnderline)
}

func (button *Button) activate() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.activate

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_activate(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// Clicked emits a Button::clicked signal to the given Button.
func (button *Button) clicked() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.clicked

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_clicked(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// Enter emits a Button::enter signal to the given Button.
//
// Deprecated: Use the Widget::enter-notify-event signal.
func (button *Button) enter() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.enter

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_enter(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// Leave emits a Button::leave signal to the given Button.
//
// Deprecated: Use the Widget::leave-notify-event signal.
func (button *Button) leave() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.leave

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_leave(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// Pressed emits a Button::pressed signal to the given Button.
//
// Deprecated: Use the Widget::button-press-event signal.
func (button *Button) pressed() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.pressed

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_pressed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// Released emits a Button::released signal to the given Button.
//
// Deprecated: Use the Widget::button-release-event signal.
func (button *Button) released() {
	gclass := (*C.GtkButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.released

	var _arg0 *C.GtkButton // out

	_arg0 = (*C.GtkButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_Button_virtual_released(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// ButtonClass: instance of this type is always passed by reference.
type ButtonClass struct {
	*buttonClass
}

// buttonClass is the struct that's finalized.
type buttonClass struct {
	native *C.GtkButtonClass
}

// ParentClass: parent class.
func (b *ButtonClass) ParentClass() *BinClass {
	valptr := &b.native.parent_class
	var _v *BinClass // out
	_v = (*BinClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
