// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeFileChooserConfirmation = coreglib.Type(C.gtk_file_chooser_confirmation_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileChooserConfirmation, F: marshalFileChooserConfirmation},
	})
}

// FileChooserConfirmation: used as a return value of handlers for the
// FileChooser::confirm-overwrite signal of a FileChooser. This value determines
// whether the file chooser will present the stock confirmation dialog, accept
// the user’s choice of a filename, or let the user choose another filename.
type FileChooserConfirmation C.gint

const (
	// FileChooserConfirmationConfirm: file chooser will present its stock
	// dialog to confirm about overwriting an existing file.
	FileChooserConfirmationConfirm FileChooserConfirmation = iota
	// FileChooserConfirmationAcceptFilename: file chooser will terminate and
	// accept the user’s choice of a file name.
	FileChooserConfirmationAcceptFilename
	// FileChooserConfirmationSelectAgain: file chooser will continue running,
	// so as to let the user select another file name.
	FileChooserConfirmationSelectAgain
)

func marshalFileChooserConfirmation(p uintptr) (interface{}, error) {
	return FileChooserConfirmation(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserConfirmation.
func (f FileChooserConfirmation) String() string {
	switch f {
	case FileChooserConfirmationConfirm:
		return "Confirm"
	case FileChooserConfirmationAcceptFilename:
		return "AcceptFilename"
	case FileChooserConfirmationSelectAgain:
		return "SelectAgain"
	default:
		return fmt.Sprintf("FileChooserConfirmation(%d)", f)
	}
}

// DoOverwriteConfirmation queries whether a file chooser is set to confirm for
// overwriting when the user types a file name that already exists.
//
// The function returns the following values:
//
//    - ok: TRUE if the file chooser will present a confirmation dialog; FALSE
//      otherwise.
//
func (chooser *FileChooser) DoOverwriteConfirmation() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_do_overwrite_confirmation(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDoOverwriteConfirmation sets whether a file chooser in
// GTK_FILE_CHOOSER_ACTION_SAVE mode will present a confirmation dialog if the
// user types a file name that already exists. This is FALSE by default.
//
// If set to TRUE, the chooser will emit the FileChooser::confirm-overwrite
// signal when appropriate.
//
// If all you need is the stock confirmation dialog, set this property to TRUE.
// You can override the way confirmation is done by actually handling the
// FileChooser::confirm-overwrite signal; please refer to its documentation for
// the details.
//
// The function takes the following parameters:
//
//    - doOverwriteConfirmation: whether to confirm overwriting in save mode.
//
func (chooser *FileChooser) SetDoOverwriteConfirmation(doOverwriteConfirmation bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if doOverwriteConfirmation {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_do_overwrite_confirmation(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(doOverwriteConfirmation)
}
