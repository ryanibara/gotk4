// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkborder.go.
var GTypeBorder = coreglib.Type(C.gtk_border_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeBorder, F: marshalBorder},
	})
}

// Border: struct that specifies a border around a rectangular area that can be
// of different width on each side.
//
// An instance of this type is always passed by reference.
type Border struct {
	*border
}

// border is the struct that's finalized.
type border struct {
	native *C.GtkBorder
}

func marshalBorder(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Border{&border{(*C.GtkBorder)(b)}}, nil
}

// NewBorder constructs a struct Border.
func NewBorder() *Border {
	var _cret *C.void // in

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _border *Border // out

	_border = (*Border)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_border)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_border_free((*C.GtkBorder)(intern.C))
		},
	)

	return _border
}

// Left: width of the left border.
func (b *Border) Left() int16 {
	var v int16 // out
	v = int16(b.native.left)
	return v
}

// Right: width of the right border.
func (b *Border) Right() int16 {
	var v int16 // out
	v = int16(b.native.right)
	return v
}

// Top: width of the top border.
func (b *Border) Top() int16 {
	var v int16 // out
	v = int16(b.native.top)
	return v
}

// Bottom: width of the bottom border.
func (b *Border) Bottom() int16 {
	var v int16 // out
	v = int16(b.native.bottom)
	return v
}

// Copy copies a Border-struct.
//
// The function returns the following values:
//
//    - border: copy of border_.
//
func (border_ *Border) Copy() *Border {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(border_)))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(border_)

	var _border *Border // out

	_border = (*Border)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_border)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_border_free((*C.GtkBorder)(intern.C))
		},
	)

	return _border
}
