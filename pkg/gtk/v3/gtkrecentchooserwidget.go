// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeRecentChooserWidget = coreglib.Type(C.gtk_recent_chooser_widget_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRecentChooserWidget, F: marshalRecentChooserWidget},
	})
}

// RecentChooserWidgetOverrider contains methods that are overridable.
type RecentChooserWidgetOverrider interface {
}

// RecentChooserWidget is a widget suitable for selecting recently used files.
// It is the main building block of a RecentChooserDialog. Most applications
// will only need to use the latter; you can use RecentChooserWidget as part of
// a larger window if you have special needs.
//
// Note that RecentChooserWidget does not have any methods of its own. Instead,
// you should use the functions that work on a RecentChooser.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooserWidget struct {
	_ [0]func() // equal guard
	Box

	*coreglib.Object
	RecentChooser
}

var (
	_ coreglib.Objector = (*RecentChooserWidget)(nil)
	_ Containerer       = (*RecentChooserWidget)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeRecentChooserWidget,
		GoType:        reflect.TypeOf((*RecentChooserWidget)(nil)),
		InitClass:     initClassRecentChooserWidget,
		FinalizeClass: finalizeClassRecentChooserWidget,
	})
}

func initClassRecentChooserWidget(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitRecentChooserWidget(*RecentChooserWidgetClass)
	}); ok {
		klass := (*RecentChooserWidgetClass)(gextras.NewStructNative(gclass))
		goval.InitRecentChooserWidget(klass)
	}
}

func finalizeClassRecentChooserWidget(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		FinalizeRecentChooserWidget(*RecentChooserWidgetClass)
	}); ok {
		klass := (*RecentChooserWidgetClass)(gextras.NewStructNative(gclass))
		goval.FinalizeRecentChooserWidget(klass)
	}
}

func wrapRecentChooserWidget(obj *coreglib.Object) *RecentChooserWidget {
	return &RecentChooserWidget{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
		Object: obj,
		RecentChooser: RecentChooser{
			Object: obj,
		},
	}
}

func marshalRecentChooserWidget(p uintptr) (interface{}, error) {
	return wrapRecentChooserWidget(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewRecentChooserWidget creates a new RecentChooserWidget object. This is an
// embeddable widget used to access the recently used resources list.
//
// The function returns the following values:
//
//    - recentChooserWidget: new RecentChooserWidget.
//
func NewRecentChooserWidget() *RecentChooserWidget {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_recent_chooser_widget_new()

	var _recentChooserWidget *RecentChooserWidget // out

	_recentChooserWidget = wrapRecentChooserWidget(coreglib.Take(unsafe.Pointer(_cret)))

	return _recentChooserWidget
}

// NewRecentChooserWidgetForManager creates a new RecentChooserWidget with a
// specified recent manager.
//
// This is useful if you have implemented your own recent manager, or if you
// have a customized instance of a RecentManager object.
//
// The function takes the following parameters:
//
//    - manager: RecentManager.
//
// The function returns the following values:
//
//    - recentChooserWidget: new RecentChooserWidget.
//
func NewRecentChooserWidgetForManager(manager *RecentManager) *RecentChooserWidget {
	var _arg1 *C.GtkRecentManager // out
	var _cret *C.GtkWidget        // in

	_arg1 = (*C.GtkRecentManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_cret = C.gtk_recent_chooser_widget_new_for_manager(_arg1)
	runtime.KeepAlive(manager)

	var _recentChooserWidget *RecentChooserWidget // out

	_recentChooserWidget = wrapRecentChooserWidget(coreglib.Take(unsafe.Pointer(_cret)))

	return _recentChooserWidget
}

// RecentChooserWidgetClass: instance of this type is always passed by
// reference.
type RecentChooserWidgetClass struct {
	*recentChooserWidgetClass
}

// recentChooserWidgetClass is the struct that's finalized.
type recentChooserWidgetClass struct {
	native *C.GtkRecentChooserWidgetClass
}

func (r *RecentChooserWidgetClass) ParentClass() *BoxClass {
	valptr := &r.native.parent_class
	var _v *BoxClass // out
	_v = (*BoxClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
