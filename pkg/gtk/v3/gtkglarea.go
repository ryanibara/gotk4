// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// gboolean _gotk4_gtk3_GLArea_virtual_render(void* fnptr, GtkGLArea* arg0, GdkGLContext* arg1) {
//   return ((gboolean (*)(GtkGLArea*, GdkGLContext*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_GLArea_virtual_resize(void* fnptr, GtkGLArea* arg0, int arg1, int arg2) {
//   ((void (*)(GtkGLArea*, int, int))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// The function takes the following parameters:
//
// The function returns the following values:
//
func (area *GLArea) render(context gdk.GLContexter) bool {
	gclass := (*C.GtkGLAreaClass)(coreglib.PeekParentClass(area))
	fnarg := gclass.render

	var _arg0 *C.GtkGLArea    // out
	var _arg1 *C.GdkGLContext // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkGLArea)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.GdkGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C._gotk4_gtk3_GLArea_virtual_render(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(area)
	runtime.KeepAlive(context)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - width
//    - height
//
func (area *GLArea) resize(width, height int) {
	gclass := (*C.GtkGLAreaClass)(coreglib.PeekParentClass(area))
	fnarg := gclass.resize

	var _arg0 *C.GtkGLArea // out
	var _arg1 C.int        // out
	var _arg2 C.int        // out

	_arg0 = (*C.GtkGLArea)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = C.int(width)
	_arg2 = C.int(height)

	C._gotk4_gtk3_GLArea_virtual_resize(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(area)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}
