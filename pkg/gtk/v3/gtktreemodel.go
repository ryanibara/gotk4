// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern GtkTreePath* _gotk4_gtk3_TreeModelIface_get_path(void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelForEachFunc(void*, void*, void*, gpointer);
// extern gboolean _gotk4_gtk3_TreeModelIface_get_iter(void*, void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_children(void*, void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_has_child(void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_next(void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_nth_child(void*, void*, void*, gint);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_parent(void*, void*, void*);
// extern gboolean _gotk4_gtk3_TreeModelIface_iter_previous(void*, void*);
// extern gint _gotk4_gtk3_TreeModelIface_get_n_columns(void*);
// extern gint _gotk4_gtk3_TreeModelIface_iter_n_children(void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_get_value(void*, void*, gint, void*);
// extern void _gotk4_gtk3_TreeModelIface_ref_node(void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_row_changed(void*, void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_row_deleted(void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_row_has_child_toggled(void*, void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_row_inserted(void*, void*, void*);
// extern void _gotk4_gtk3_TreeModelIface_unref_node(void*, void*);
// extern void _gotk4_gtk3_TreeModel_ConnectRowChanged(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk3_TreeModel_ConnectRowDeleted(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_TreeModel_ConnectRowHasChildToggled(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk3_TreeModel_ConnectRowInserted(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk3_TreeModel_ConnectRowsReordered(gpointer, void*, void*, gpointer, guintptr);
import "C"

// GTypeTreeModelFlags returns the GType for the type TreeModelFlags.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTreeModelFlags() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TreeModelFlags").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTreeModelFlags)
	return gtype
}

// GTypeTreeModel returns the GType for the type TreeModel.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTreeModel() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TreeModel").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTreeModel)
	return gtype
}

// GTypeTreeIter returns the GType for the type TreeIter.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTreeIter() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TreeIter").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTreeIter)
	return gtype
}

// GTypeTreePath returns the GType for the type TreePath.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTreePath() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TreePath").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTreePath)
	return gtype
}

// GTypeTreeRowReference returns the GType for the type TreeRowReference.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTreeRowReference() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "TreeRowReference").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTreeRowReference)
	return gtype
}

// TreeModelFlags: these flags indicate various properties of a TreeModel.
//
// They are returned by gtk_tree_model_get_flags(), and must be static for the
// lifetime of the object. A more complete description of
// K_TREE_MODEL_ITERS_PERSIST can be found in the overview of this section.
type TreeModelFlags C.guint

const (
	// TreeModelItersPersist iterators survive all signals emitted by the tree.
	TreeModelItersPersist TreeModelFlags = 0b1
	// TreeModelListOnly: model is a list only, and never has children.
	TreeModelListOnly TreeModelFlags = 0b10
)

func marshalTreeModelFlags(p uintptr) (interface{}, error) {
	return TreeModelFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for TreeModelFlags.
func (t TreeModelFlags) String() string {
	if t == 0 {
		return "TreeModelFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(39)

	for t != 0 {
		next := t & (t - 1)
		bit := t - next

		switch bit {
		case TreeModelItersPersist:
			builder.WriteString("ItersPersist|")
		case TreeModelListOnly:
			builder.WriteString("ListOnly|")
		default:
			builder.WriteString(fmt.Sprintf("TreeModelFlags(0b%b)|", bit))
		}

		t = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if t contains other.
func (t TreeModelFlags) Has(other TreeModelFlags) bool {
	return (t & other) == other
}

// TreeModelForEachFunc: type of the callback passed to gtk_tree_model_foreach()
// to iterate over the rows in a tree model.
type TreeModelForEachFunc func(model TreeModeller, path *TreePath, iter *TreeIter) (ok bool)

//export _gotk4_gtk3_TreeModelForEachFunc
func _gotk4_gtk3_TreeModelForEachFunc(arg1 *C.void, arg2 *C.void, arg3 *C.void, arg4 C.gpointer) (cret C.gboolean) {
	var fn TreeModelForEachFunc
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(TreeModelForEachFunc)
	}

	var _model TreeModeller // out
	var _path *TreePath     // out
	var _iter *TreeIter     // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TreeModeller)
			return ok
		})
		rv, ok := casted.(TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_model = rv
	}
	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := fn(_model, _path, _iter)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// TreeModelOverrider contains methods that are overridable.
type TreeModelOverrider interface {
	// Iter sets iter to a valid iterator pointing to path. If path does not
	// exist, iter is set to an invalid iterator and FALSE is returned.
	//
	// The function takes the following parameters:
	//
	//    - path: TreePath-struct.
	//
	// The function returns the following values:
	//
	//    - iter: uninitialized TreeIter-struct.
	//    - ok: TRUE, if iter was set.
	//
	Iter(path *TreePath) (*TreeIter, bool)
	// NColumns returns the number of columns supported by tree_model.
	//
	// The function returns the following values:
	//
	//    - gint: number of columns.
	//
	NColumns() int32
	// Path returns a newly-created TreePath-struct referenced by iter.
	//
	// This path should be freed with gtk_tree_path_free().
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//
	// The function returns the following values:
	//
	//    - treePath: newly-created TreePath-struct.
	//
	Path(iter *TreeIter) *TreePath
	// Value initializes and sets value to that at column.
	//
	// When done with value, g_value_unset() needs to be called to free any
	// allocated memory.
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//    - column to lookup the value at.
	//
	// The function returns the following values:
	//
	//    - value: empty #GValue to set.
	//
	Value(iter *TreeIter, column int32) coreglib.Value
	// IterChildren sets iter to point to the first child of parent.
	//
	// If parent has no children, FALSE is returned and iter is set to be
	// invalid. parent will remain a valid node after this function has been
	// called.
	//
	// If parent is NULL returns the first node, equivalent to
	// gtk_tree_model_get_iter_first (tree_model, iter);.
	//
	// The function takes the following parameters:
	//
	//    - parent (optional) or NULL.
	//
	// The function returns the following values:
	//
	//    - iter: new TreeIter-struct to be set to the child.
	//    - ok: TRUE, if iter has been set to the first child.
	//
	IterChildren(parent *TreeIter) (*TreeIter, bool)
	// IterHasChild returns TRUE if iter has children, FALSE otherwise.
	//
	// The function takes the following parameters:
	//
	//    - iter to test for children.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if iter has children.
	//
	IterHasChild(iter *TreeIter) bool
	// IterNChildren returns the number of children that iter has.
	//
	// As a special case, if iter is NULL, then the number of toplevel nodes is
	// returned.
	//
	// The function takes the following parameters:
	//
	//    - iter (optional) or NULL.
	//
	// The function returns the following values:
	//
	//    - gint: number of children of iter.
	//
	IterNChildren(iter *TreeIter) int32
	// IterNext sets iter to point to the node following it at the current
	// level.
	//
	// If there is no next iter, FALSE is returned and iter is set to be
	// invalid.
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if iter has been changed to the next node.
	//
	IterNext(iter *TreeIter) bool
	// IterNthChild sets iter to be the child of parent, using the given index.
	//
	// The first index is 0. If n is too big, or parent has no children, iter is
	// set to an invalid iterator and FALSE is returned. parent will remain a
	// valid node after this function has been called. As a special case, if
	// parent is NULL, then the n-th root node is set.
	//
	// The function takes the following parameters:
	//
	//    - parent (optional) to get the child from, or NULL.
	//    - n: index of the desired child.
	//
	// The function returns the following values:
	//
	//    - iter to set to the nth child.
	//    - ok: TRUE, if parent has an n-th child.
	//
	IterNthChild(parent *TreeIter, n int32) (*TreeIter, bool)
	// IterParent sets iter to be the parent of child.
	//
	// If child is at the toplevel, and doesn’t have a parent, then iter is set
	// to an invalid iterator and FALSE is returned. child will remain a valid
	// node after this function has been called.
	//
	// iter will be initialized before the lookup is performed, so child and
	// iter cannot point to the same memory location.
	//
	// The function takes the following parameters:
	//
	//    - child: TreeIter-struct.
	//
	// The function returns the following values:
	//
	//    - iter: new TreeIter-struct to set to the parent.
	//    - ok: TRUE, if iter is set to the parent of child.
	//
	IterParent(child *TreeIter) (*TreeIter, bool)
	// IterPrevious sets iter to point to the previous node at the current
	// level.
	//
	// If there is no previous iter, FALSE is returned and iter is set to be
	// invalid.
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if iter has been changed to the previous node.
	//
	IterPrevious(iter *TreeIter) bool
	// RefNode lets the tree ref the node.
	//
	// This is an optional method for models to implement. To be more specific,
	// models may ignore this call as it exists primarily for performance
	// reasons.
	//
	// This function is primarily meant as a way for views to let caching models
	// know when nodes are being displayed (and hence, whether or not to cache
	// that node). Being displayed means a node is in an expanded branch,
	// regardless of whether the node is currently visible in the viewport. For
	// example, a file-system based model would not want to keep the entire
	// file-hierarchy in memory, just the sections that are currently being
	// displayed by every current view.
	//
	// A model should be expected to be able to get an iter independent of its
	// reffed state.
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//
	RefNode(iter *TreeIter)
	// RowChanged emits the TreeModel::row-changed signal on tree_model.
	//
	// The function takes the following parameters:
	//
	//    - path pointing to the changed row.
	//    - iter: valid TreeIter-struct pointing to the changed row.
	//
	RowChanged(path *TreePath, iter *TreeIter)
	// RowDeleted emits the TreeModel::row-deleted signal on tree_model.
	//
	// This should be called by models after a row has been removed. The
	// location pointed to by path should be the location that the row
	// previously was at. It may not be a valid location anymore.
	//
	// Nodes that are deleted are not unreffed, this means that any outstanding
	// references on the deleted node should not be released.
	//
	// The function takes the following parameters:
	//
	//    - path pointing to the previous location of the deleted row.
	//
	RowDeleted(path *TreePath)
	// RowHasChildToggled emits the TreeModel::row-has-child-toggled signal on
	// tree_model. This should be called by models after the child state of a
	// node changes.
	//
	// The function takes the following parameters:
	//
	//    - path pointing to the changed row.
	//    - iter: valid TreeIter-struct pointing to the changed row.
	//
	RowHasChildToggled(path *TreePath, iter *TreeIter)
	// RowInserted emits the TreeModel::row-inserted signal on tree_model.
	//
	// The function takes the following parameters:
	//
	//    - path pointing to the inserted row.
	//    - iter: valid TreeIter-struct pointing to the inserted row.
	//
	RowInserted(path *TreePath, iter *TreeIter)
	// UnrefNode lets the tree unref the node.
	//
	// This is an optional method for models to implement. To be more specific,
	// models may ignore this call as it exists primarily for performance
	// reasons. For more information on what this means, see
	// gtk_tree_model_ref_node().
	//
	// Please note that nodes that are deleted are not unreffed.
	//
	// The function takes the following parameters:
	//
	//    - iter: TreeIter-struct.
	//
	UnrefNode(iter *TreeIter)
}

// TreeModel interface defines a generic tree interface for use by the TreeView
// widget. It is an abstract interface, and is designed to be usable with any
// appropriate data structure. The programmer just has to implement this
// interface on their own data type for it to be viewable by a TreeView widget.
//
// The model is represented as a hierarchical tree of strongly-typed, columned
// data. In other words, the model can be seen as a tree where every node has
// different values depending on which column is being queried. The type of data
// found in a column is determined by using the GType system (ie. TYPE_INT,
// K_TYPE_BUTTON, TYPE_POINTER, etc). The types are homogeneous per column
// across all nodes. It is important to note that this interface only provides a
// way of examining a model and observing changes. The implementation of each
// individual model decides how and if changes are made.
//
// In order to make life simpler for programmers who do not need to write their
// own specialized model, two generic models are provided — the TreeStore and
// the ListStore. To use these, the developer simply pushes data into these
// models as necessary. These models provide the data structure as well as all
// appropriate tree interfaces. As a result, implementing drag and drop,
// sorting, and storing data is trivial. For the vast majority of trees and
// lists, these two models are sufficient.
//
// Models are accessed on a node/column level of granularity. One can query for
// the value of a model at a certain node and a certain column on that node.
// There are two structures used to reference a particular node in a model. They
// are the TreePath-struct and the TreeIter-struct (“iter” is short for
// iterator). Most of the interface consists of operations on a TreeIter-struct.
//
// A path is essentially a potential node. It is a location on a model that may
// or may not actually correspond to a node on a specific model. The
// TreePath-struct can be converted into either an array of unsigned integers or
// a string. The string form is a list of numbers separated by a colon. Each
// number refers to the offset at that level. Thus, the path 0 refers to the
// root node and the path 2:4 refers to the fifth child of the third node.
//
// By contrast, a TreeIter-struct is a reference to a specific node on a
// specific model. It is a generic struct with an integer and three generic
// pointers. These are filled in by the model in a model-specific way. One can
// convert a path to an iterator by calling gtk_tree_model_get_iter(). These
// iterators are the primary way of accessing a model and are similar to the
// iterators used by TextBuffer. They are generally statically allocated on the
// stack and only used for a short time. The model interface defines a set of
// operations using them for navigating the model.
//
// It is expected that models fill in the iterator with private data. For
// example, the ListStore model, which is internally a simple linked list,
// stores a list node in one of the pointers. The TreeModelSort stores an array
// and an offset in two of the pointers. Additionally, there is an integer
// field. This field is generally filled with a unique stamp per model. This
// stamp is for catching errors resulting from using invalid iterators with a
// model.
//
// The lifecycle of an iterator can be a little confusing at first. Iterators
// are expected to always be valid for as long as the model is unchanged (and
// doesn’t emit a signal). The model is considered to own all outstanding
// iterators and nothing needs to be done to free them from the user’s point of
// view. Additionally, some models guarantee that an iterator is valid for as
// long as the node it refers to is valid (most notably the TreeStore and
// ListStore). Although generally uninteresting, as one always has to allow for
// the case where iterators do not persist beyond a signal, some very important
// performance enhancements were made in the sort model. As a result, the
// K_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.
//
// To help show some common operation of a model, some examples are provided.
// The first example shows three ways of getting the iter at the location 3:2:5.
// While the first method shown is easier, the second is much more common, as
// you often get paths from callbacks.
//
// Acquiring a TreeIter-struct
//
//    enum
//    {
//      STRING_COLUMN,
//      INT_COLUMN,
//      N_COLUMNS
//    };
//
//    ...
//
//    GtkTreeModel *list_store;
//    GtkTreeIter iter;
//    gboolean valid;
//    gint row_count = 0;
//
//    // make a new list_store
//    list_store = gtk_list_store_new (N_COLUMNS,
//                                     G_TYPE_STRING,
//                                     G_TYPE_INT);
//
//    // Fill the list store with data
//    populate_model (list_store);
//
//    // Get the first iter in the list, check it is valid and walk
//    // through the list, reading each row.
//
//    valid = gtk_tree_model_get_iter_first (list_store,
//                                           &iter);
//    while (valid)
//     {
//       gchar *str_data;
//       gint   int_data;
//
//       // Make sure you terminate calls to gtk_tree_model_get() with a “-1” value
//       gtk_tree_model_get (list_store, &iter,
//                           STRING_COLUMN, &str_data,
//                           INT_COLUMN, &int_data,
//                           -1);
//
//       // Do something with the data
//       g_print ("Row d: (s,d)\n",
//                row_count, str_data, int_data);
//       g_free (str_data);
//
//       valid = gtk_tree_model_iter_next (list_store,
//                                         &iter);
//       row_count++;
//     }
//
// The TreeModel interface contains two methods for reference counting:
// gtk_tree_model_ref_node() and gtk_tree_model_unref_node(). These two methods
// are optional to implement. The reference counting is meant as a way for views
// to let models know when nodes are being displayed. TreeView will take a
// reference on a node when it is visible, which means the node is either in the
// toplevel or expanded. Being displayed does not mean that the node is
// currently directly visible to the user in the viewport. Based on this
// reference counting scheme a caching model, for example, can decide whether or
// not to cache a node based on the reference count. A file-system based model
// would not want to keep the entire file hierarchy in memory, but just the
// folders that are currently expanded in every current view.
//
// When working with reference counting, the following rules must be taken into
// account:
//
// - Never take a reference on a node without owning a reference on its parent.
// This means that all parent nodes of a referenced node must be referenced as
// well.
//
// - Outstanding references on a deleted node are not released. This is not
// possible because the node has already been deleted by the time the
// row-deleted signal is received.
//
// - Models are not obligated to emit a signal on rows of which none of its
// siblings are referenced. To phrase this differently, signals are only
// required for levels in which nodes are referenced. For the root level
// however, signals must be emitted at all times (however the root level is
// always referenced when any view is attached).
//
// TreeModel wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TreeModel struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TreeModel)(nil)
)

// TreeModeller describes TreeModel's interface methods.
type TreeModeller interface {
	coreglib.Objector

	// ForEach calls func on each node in model in a depth-first fashion.
	ForEach(fn TreeModelForEachFunc)
	// Iter sets iter to a valid iterator pointing to path.
	Iter(path *TreePath) (*TreeIter, bool)
	// IterFirst initializes iter with the first iterator in the tree (the one
	// at the path "0") and returns TRUE.
	IterFirst() (*TreeIter, bool)
	// IterFromString sets iter to a valid iterator pointing to path_string, if
	// it exists.
	IterFromString(pathString string) (*TreeIter, bool)
	// NColumns returns the number of columns supported by tree_model.
	NColumns() int32
	// Path returns a newly-created TreePath-struct referenced by iter.
	Path(iter *TreeIter) *TreePath
	// StringFromIter generates a string representation of the iter.
	StringFromIter(iter *TreeIter) string
	// Value initializes and sets value to that at column.
	Value(iter *TreeIter, column int32) coreglib.Value
	// IterChildren sets iter to point to the first child of parent.
	IterChildren(parent *TreeIter) (*TreeIter, bool)
	// IterHasChild returns TRUE if iter has children, FALSE otherwise.
	IterHasChild(iter *TreeIter) bool
	// IterNChildren returns the number of children that iter has.
	IterNChildren(iter *TreeIter) int32
	// IterNext sets iter to point to the node following it at the current
	// level.
	IterNext(iter *TreeIter) bool
	// IterNthChild sets iter to be the child of parent, using the given index.
	IterNthChild(parent *TreeIter, n int32) (*TreeIter, bool)
	// IterParent sets iter to be the parent of child.
	IterParent(child *TreeIter) (*TreeIter, bool)
	// IterPrevious sets iter to point to the previous node at the current
	// level.
	IterPrevious(iter *TreeIter) bool
	// RefNode lets the tree ref the node.
	RefNode(iter *TreeIter)
	// RowChanged emits the TreeModel::row-changed signal on tree_model.
	RowChanged(path *TreePath, iter *TreeIter)
	// RowDeleted emits the TreeModel::row-deleted signal on tree_model.
	RowDeleted(path *TreePath)
	// RowHasChildToggled emits the TreeModel::row-has-child-toggled signal on
	// tree_model.
	RowHasChildToggled(path *TreePath, iter *TreeIter)
	// RowInserted emits the TreeModel::row-inserted signal on tree_model.
	RowInserted(path *TreePath, iter *TreeIter)
	// RowsReordered emits the TreeModel::rows-reordered signal on tree_model.
	RowsReordered(path *TreePath, iter *TreeIter, newOrder []int32)
	// UnrefNode lets the tree unref the node.
	UnrefNode(iter *TreeIter)

	// Row-changed: this signal is emitted when a row in the model has changed.
	ConnectRowChanged(func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle
	// Row-deleted: this signal is emitted when a row has been deleted.
	ConnectRowDeleted(func(path *TreePath)) coreglib.SignalHandle
	// Row-has-child-toggled: this signal is emitted when a row has gotten the
	// first child row or lost its last child row.
	ConnectRowHasChildToggled(func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle
	// Row-inserted: this signal is emitted when a new row has been inserted in
	// the model.
	ConnectRowInserted(func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle
	// Rows-reordered: this signal is emitted when the children of a node in the
	// TreeModel have been reordered.
	ConnectRowsReordered(func(path *TreePath, iter *TreeIter, newOrder unsafe.Pointer)) coreglib.SignalHandle
}

var _ TreeModeller = (*TreeModel)(nil)

func ifaceInitTreeModeller(gifacePtr, data C.gpointer) {
	iface := girepository.MustFind("Gtk", "TreeModelIface")
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_iter"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_get_iter)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_n_columns"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_get_n_columns)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_path"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_get_path)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("get_value"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_get_value)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_children"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_children)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_has_child"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_has_child)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_n_children"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_n_children)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_next"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_next)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_nth_child"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_nth_child)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_parent"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_parent)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("iter_previous"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_iter_previous)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("ref_node"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_ref_node)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("row_changed"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_row_changed)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("row_deleted"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_row_deleted)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("row_has_child_toggled"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_row_has_child_toggled)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("row_inserted"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_row_inserted)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), pclass.StructFieldOffset("unref_node"))) = unsafe.Pointer(C._gotk4_gtk3_TreeModelIface_unref_node)
}

//export _gotk4_gtk3_TreeModelIface_get_iter
func _gotk4_gtk3_TreeModelIface_get_iter(arg0 *C.void, arg1 *C.void, arg2 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _path *TreePath // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iter, ok := iface.Iter(_path)

	*arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_get_n_columns
func _gotk4_gtk3_TreeModelIface_get_n_columns(arg0 *C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	gint := iface.NColumns()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_gtk3_TreeModelIface_get_path
func _gotk4_gtk3_TreeModelIface_get_path(arg0 *C.void, arg1 *C.void) (cret *C.GtkTreePath) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	treePath := iface.Path(_iter)

	cret = (*C.void)(gextras.StructNative(unsafe.Pointer(treePath)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(treePath)), nil)

	return cret
}

//export _gotk4_gtk3_TreeModelIface_get_value
func _gotk4_gtk3_TreeModelIface_get_value(arg0 *C.void, arg1 *C.void, arg2 C.gint, arg3 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out
	var _column int32   // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_column = int32(arg2)

	value := iface.Value(_iter, _column)

	*arg3 = (*C.void)(unsafe.Pointer((&value).Native()))
}

//export _gotk4_gtk3_TreeModelIface_iter_children
func _gotk4_gtk3_TreeModelIface_iter_children(arg0 *C.void, arg1 *C.void, arg2 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _parent *TreeIter // out

	if arg2 != nil {
		_parent = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	}

	iter, ok := iface.IterChildren(_parent)

	*arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_has_child
func _gotk4_gtk3_TreeModelIface_iter_has_child(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.IterHasChild(_iter)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_n_children
func _gotk4_gtk3_TreeModelIface_iter_n_children(arg0 *C.void, arg1 *C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	if arg1 != nil {
		_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	}

	gint := iface.IterNChildren(_iter)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_next
func _gotk4_gtk3_TreeModelIface_iter_next(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.IterNext(_iter)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_nth_child
func _gotk4_gtk3_TreeModelIface_iter_nth_child(arg0 *C.void, arg1 *C.void, arg2 *C.void, arg3 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _parent *TreeIter // out
	var _n int32          // out

	if arg2 != nil {
		_parent = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	}
	_n = int32(arg3)

	iter, ok := iface.IterNthChild(_parent, _n)

	*arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_parent
func _gotk4_gtk3_TreeModelIface_iter_parent(arg0 *C.void, arg1 *C.void, arg2 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _child *TreeIter // out

	_child = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iter, ok := iface.IterParent(_child)

	*arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_iter_previous
func _gotk4_gtk3_TreeModelIface_iter_previous(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.IterPrevious(_iter)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_TreeModelIface_ref_node
func _gotk4_gtk3_TreeModelIface_ref_node(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.RefNode(_iter)
}

//export _gotk4_gtk3_TreeModelIface_row_changed
func _gotk4_gtk3_TreeModelIface_row_changed(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iface.RowChanged(_path, _iter)
}

//export _gotk4_gtk3_TreeModelIface_row_deleted
func _gotk4_gtk3_TreeModelIface_row_deleted(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _path *TreePath // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.RowDeleted(_path)
}

//export _gotk4_gtk3_TreeModelIface_row_has_child_toggled
func _gotk4_gtk3_TreeModelIface_row_has_child_toggled(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iface.RowHasChildToggled(_path, _iter)
}

//export _gotk4_gtk3_TreeModelIface_row_inserted
func _gotk4_gtk3_TreeModelIface_row_inserted(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iface.RowInserted(_path, _iter)
}

//export _gotk4_gtk3_TreeModelIface_unref_node
func _gotk4_gtk3_TreeModelIface_unref_node(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TreeModelOverrider)

	var _iter *TreeIter // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.UnrefNode(_iter)
}

func wrapTreeModel(obj *coreglib.Object) *TreeModel {
	return &TreeModel{
		Object: obj,
	}
}

func marshalTreeModel(p uintptr) (interface{}, error) {
	return wrapTreeModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_TreeModel_ConnectRowChanged
func _gotk4_gtk3_TreeModel_ConnectRowChanged(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.guintptr) {
	var f func(path *TreePath, iter *TreeIter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(path *TreePath, iter *TreeIter))
	}

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_path, _iter)
}

// ConnectRowChanged: this signal is emitted when a row in the model has
// changed.
func (childModel *TreeModel) ConnectRowChanged(f func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(childModel, "row-changed", false, unsafe.Pointer(C._gotk4_gtk3_TreeModel_ConnectRowChanged), f)
}

//export _gotk4_gtk3_TreeModel_ConnectRowDeleted
func _gotk4_gtk3_TreeModel_ConnectRowDeleted(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(path *TreePath)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(path *TreePath))
	}

	var _path *TreePath // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_path)
}

// ConnectRowDeleted: this signal is emitted when a row has been deleted.
//
// Note that no iterator is passed to the signal handler, since the row is
// already deleted.
//
// This should be called by models after a row has been removed. The location
// pointed to by path should be the location that the row previously was at. It
// may not be a valid location anymore.
func (childModel *TreeModel) ConnectRowDeleted(f func(path *TreePath)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(childModel, "row-deleted", false, unsafe.Pointer(C._gotk4_gtk3_TreeModel_ConnectRowDeleted), f)
}

//export _gotk4_gtk3_TreeModel_ConnectRowHasChildToggled
func _gotk4_gtk3_TreeModel_ConnectRowHasChildToggled(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.guintptr) {
	var f func(path *TreePath, iter *TreeIter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(path *TreePath, iter *TreeIter))
	}

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_path, _iter)
}

// ConnectRowHasChildToggled: this signal is emitted when a row has gotten the
// first child row or lost its last child row.
func (childModel *TreeModel) ConnectRowHasChildToggled(f func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(childModel, "row-has-child-toggled", false, unsafe.Pointer(C._gotk4_gtk3_TreeModel_ConnectRowHasChildToggled), f)
}

//export _gotk4_gtk3_TreeModel_ConnectRowInserted
func _gotk4_gtk3_TreeModel_ConnectRowInserted(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.guintptr) {
	var f func(path *TreePath, iter *TreeIter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(path *TreePath, iter *TreeIter))
	}

	var _path *TreePath // out
	var _iter *TreeIter // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_path, _iter)
}

// ConnectRowInserted: this signal is emitted when a new row has been inserted
// in the model.
//
// Note that the row may still be empty at this point, since it is a common
// pattern to first insert an empty row, and then fill it with the desired
// values.
func (childModel *TreeModel) ConnectRowInserted(f func(path *TreePath, iter *TreeIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(childModel, "row-inserted", false, unsafe.Pointer(C._gotk4_gtk3_TreeModel_ConnectRowInserted), f)
}

//export _gotk4_gtk3_TreeModel_ConnectRowsReordered
func _gotk4_gtk3_TreeModel_ConnectRowsReordered(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.gpointer, arg4 C.guintptr) {
	var f func(path *TreePath, iter *TreeIter, newOrder unsafe.Pointer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(path *TreePath, iter *TreeIter, newOrder unsafe.Pointer))
	}

	var _path *TreePath          // out
	var _iter *TreeIter          // out
	var _newOrder unsafe.Pointer // out

	_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_newOrder = (unsafe.Pointer)(unsafe.Pointer(arg3))

	f(_path, _iter, _newOrder)
}

// ConnectRowsReordered: this signal is emitted when the children of a node in
// the TreeModel have been reordered.
//
// Note that this signal is not emitted when rows are reordered by DND, since
// this is implemented by removing and then reinserting the row.
func (childModel *TreeModel) ConnectRowsReordered(f func(path *TreePath, iter *TreeIter, newOrder unsafe.Pointer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(childModel, "rows-reordered", false, unsafe.Pointer(C._gotk4_gtk3_TreeModel_ConnectRowsReordered), f)
}

// ForEach calls func on each node in model in a depth-first fashion.
//
// If func returns TRUE, then the tree ceases to be walked, and
// gtk_tree_model_foreach() returns.
//
// The function takes the following parameters:
//
//    - fn: function to be called on each row.
//
func (model *TreeModel) ForEach(fn TreeModelForEachFunc) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk3_TreeModelForEachFunc)
	_args[2] = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_args[2]))

	runtime.KeepAlive(model)
	runtime.KeepAlive(fn)
}

// Iter sets iter to a valid iterator pointing to path. If path does not exist,
// iter is set to an invalid iterator and FALSE is returned.
//
// The function takes the following parameters:
//
//    - path: TreePath-struct.
//
// The function returns the following values:
//
//    - iter: uninitialized TreeIter-struct.
//    - ok: TRUE, if iter was set.
//
func (treeModel *TreeModel) Iter(path *TreePath) (*TreeIter, bool) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterFirst initializes iter with the first iterator in the tree (the one at
// the path "0") and returns TRUE. Returns FALSE if the tree is empty.
//
// The function returns the following values:
//
//    - iter: uninitialized TreeIter-struct.
//    - ok: TRUE, if iter was set.
//
func (treeModel *TreeModel) IterFirst() (*TreeIter, bool) {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterFromString sets iter to a valid iterator pointing to path_string, if it
// exists. Otherwise, iter is left invalid and FALSE is returned.
//
// The function takes the following parameters:
//
//    - pathString: string representation of a TreePath-struct.
//
// The function returns the following values:
//
//    - iter: uninitialized TreeIter-struct.
//    - ok: TRUE, if iter was set.
//
func (treeModel *TreeModel) IterFromString(pathString string) (*TreeIter, bool) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(pathString)))
	defer C.free(unsafe.Pointer(_args[1]))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(pathString)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// NColumns returns the number of columns supported by tree_model.
//
// The function returns the following values:
//
//    - gint: number of columns.
//
func (treeModel *TreeModel) NColumns() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Path returns a newly-created TreePath-struct referenced by iter.
//
// This path should be freed with gtk_tree_path_free().
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
// The function returns the following values:
//
//    - treePath: newly-created TreePath-struct.
//
func (treeModel *TreeModel) Path(iter *TreeIter) *TreePath {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// StringFromIter generates a string representation of the iter.
//
// This string is a “:” separated list of numbers. For example, “4:10:0:3” would
// be an acceptable return value for this string.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
// The function returns the following values:
//
//    - utf8: newly-allocated string. Must be freed with g_free().
//
func (treeModel *TreeModel) StringFromIter(iter *TreeIter) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Value initializes and sets value to that at column.
//
// When done with value, g_value_unset() needs to be called to free any
// allocated memory.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//    - column to lookup the value at.
//
// The function returns the following values:
//
//    - value: empty #GValue to set.
//
func (treeModel *TreeModel) Value(iter *TreeIter, column int32) coreglib.Value {
	var _args [3]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(column)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer(_outs[0]))

	return _value
}

// IterChildren sets iter to point to the first child of parent.
//
// If parent has no children, FALSE is returned and iter is set to be invalid.
// parent will remain a valid node after this function has been called.
//
// If parent is NULL returns the first node, equivalent to
// gtk_tree_model_get_iter_first (tree_model, iter);.
//
// The function takes the following parameters:
//
//    - parent (optional) or NULL.
//
// The function returns the following values:
//
//    - iter: new TreeIter-struct to be set to the child.
//    - ok: TRUE, if iter has been set to the first child.
//
func (treeModel *TreeModel) IterChildren(parent *TreeIter) (*TreeIter, bool) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	if parent != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(parent)))
	}

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(parent)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterHasChild returns TRUE if iter has children, FALSE otherwise.
//
// The function takes the following parameters:
//
//    - iter to test for children.
//
// The function returns the following values:
//
//    - ok: TRUE if iter has children.
//
func (treeModel *TreeModel) IterHasChild(iter *TreeIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IterNChildren returns the number of children that iter has.
//
// As a special case, if iter is NULL, then the number of toplevel nodes is
// returned.
//
// The function takes the following parameters:
//
//    - iter (optional) or NULL.
//
// The function returns the following values:
//
//    - gint: number of children of iter.
//
func (treeModel *TreeModel) IterNChildren(iter *TreeIter) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	if iter != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	}

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// IterNext sets iter to point to the node following it at the current level.
//
// If there is no next iter, FALSE is returned and iter is set to be invalid.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
// The function returns the following values:
//
//    - ok: TRUE if iter has been changed to the next node.
//
func (treeModel *TreeModel) IterNext(iter *TreeIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IterNthChild sets iter to be the child of parent, using the given index.
//
// The first index is 0. If n is too big, or parent has no children, iter is set
// to an invalid iterator and FALSE is returned. parent will remain a valid node
// after this function has been called. As a special case, if parent is NULL,
// then the n-th root node is set.
//
// The function takes the following parameters:
//
//    - parent (optional) to get the child from, or NULL.
//    - n: index of the desired child.
//
// The function returns the following values:
//
//    - iter to set to the nth child.
//    - ok: TRUE, if parent has an n-th child.
//
func (treeModel *TreeModel) IterNthChild(parent *TreeIter, n int32) (*TreeIter, bool) {
	var _args [3]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	if parent != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(parent)))
	}
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(n)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(n)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterParent sets iter to be the parent of child.
//
// If child is at the toplevel, and doesn’t have a parent, then iter is set to
// an invalid iterator and FALSE is returned. child will remain a valid node
// after this function has been called.
//
// iter will be initialized before the lookup is performed, so child and iter
// cannot point to the same memory location.
//
// The function takes the following parameters:
//
//    - child: TreeIter-struct.
//
// The function returns the following values:
//
//    - iter: new TreeIter-struct to set to the parent.
//    - ok: TRUE, if iter is set to the parent of child.
//
func (treeModel *TreeModel) IterParent(child *TreeIter) (*TreeIter, bool) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(child)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(child)

	var _iter *TreeIter // out
	var _ok bool        // out

	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _iter, _ok
}

// IterPrevious sets iter to point to the previous node at the current level.
//
// If there is no previous iter, FALSE is returned and iter is set to be
// invalid.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
// The function returns the following values:
//
//    - ok: TRUE if iter has been changed to the previous node.
//
func (treeModel *TreeModel) IterPrevious(iter *TreeIter) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// RefNode lets the tree ref the node.
//
// This is an optional method for models to implement. To be more specific,
// models may ignore this call as it exists primarily for performance reasons.
//
// This function is primarily meant as a way for views to let caching models
// know when nodes are being displayed (and hence, whether or not to cache that
// node). Being displayed means a node is in an expanded branch, regardless of
// whether the node is currently visible in the viewport. For example, a
// file-system based model would not want to keep the entire file-hierarchy in
// memory, just the sections that are currently being displayed by every current
// view.
//
// A model should be expected to be able to get an iter independent of its
// reffed state.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
func (treeModel *TreeModel) RefNode(iter *TreeIter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)
}

// RowChanged emits the TreeModel::row-changed signal on tree_model.
//
// The function takes the following parameters:
//
//    - path pointing to the changed row.
//    - iter: valid TreeIter-struct pointing to the changed row.
//
func (treeModel *TreeModel) RowChanged(path *TreePath, iter *TreeIter) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)
	runtime.KeepAlive(iter)
}

// RowDeleted emits the TreeModel::row-deleted signal on tree_model.
//
// This should be called by models after a row has been removed. The location
// pointed to by path should be the location that the row previously was at. It
// may not be a valid location anymore.
//
// Nodes that are deleted are not unreffed, this means that any outstanding
// references on the deleted node should not be released.
//
// The function takes the following parameters:
//
//    - path pointing to the previous location of the deleted row.
//
func (treeModel *TreeModel) RowDeleted(path *TreePath) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)
}

// RowHasChildToggled emits the TreeModel::row-has-child-toggled signal on
// tree_model. This should be called by models after the child state of a node
// changes.
//
// The function takes the following parameters:
//
//    - path pointing to the changed row.
//    - iter: valid TreeIter-struct pointing to the changed row.
//
func (treeModel *TreeModel) RowHasChildToggled(path *TreePath, iter *TreeIter) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)
	runtime.KeepAlive(iter)
}

// RowInserted emits the TreeModel::row-inserted signal on tree_model.
//
// The function takes the following parameters:
//
//    - path pointing to the inserted row.
//    - iter: valid TreeIter-struct pointing to the inserted row.
//
func (treeModel *TreeModel) RowInserted(path *TreePath, iter *TreeIter) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)
	runtime.KeepAlive(iter)
}

// RowsReordered emits the TreeModel::rows-reordered signal on tree_model.
//
// This should be called by models when their rows have been reordered.
//
// The function takes the following parameters:
//
//    - path pointing to the tree node whose children have been reordered.
//    - iter (optional): valid TreeIter-struct pointing to the node whose
//      children have been reordered, or NULL if the depth of path is 0.
//    - newOrder: array of integers mapping the current position of each child to
//      its old position before the re-ordering, i.e. new_order[newpos] = oldpos.
//
func (treeModel *TreeModel) RowsReordered(path *TreePath, iter *TreeIter, newOrder []int32) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	if iter != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	}
	*(*C.gint)(unsafe.Pointer(&_args[4])) = (C.gint)(len(newOrder))
	*(**C.void)(unsafe.Pointer(&_args[3])) = (*C.void)(C.calloc(C.size_t(len(newOrder)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_args[3]))
	{
		out := unsafe.Slice((*C.gint)(*(**C.void)(unsafe.Pointer(&_args[3]))), len(newOrder))
		for i := range newOrder {
			*(*C.gint)(unsafe.Pointer(&out[i])) = C.gint(newOrder[i])
		}
	}

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(path)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(newOrder)
}

// UnrefNode lets the tree unref the node.
//
// This is an optional method for models to implement. To be more specific,
// models may ignore this call as it exists primarily for performance reasons.
// For more information on what this means, see gtk_tree_model_ref_node().
//
// Please note that nodes that are deleted are not unreffed.
//
// The function takes the following parameters:
//
//    - iter: TreeIter-struct.
//
func (treeModel *TreeModel) UnrefNode(iter *TreeIter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)
}

// TreeIter is the primary structure for accessing a TreeModel. Models are
// expected to put a unique integer in the stamp member, and put model-specific
// data in the three user_data members.
//
// An instance of this type is always passed by reference.
type TreeIter struct {
	*treeIter
}

// treeIter is the struct that's finalized.
type treeIter struct {
	native unsafe.Pointer
}

func marshalTreeIter(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TreeIter{&treeIter{(unsafe.Pointer)(b)}}, nil
}

// Stamp: unique stamp to catch invalid iterators.
func (t *TreeIter) Stamp() int32 {
	offset := girepository.MustFind("Gtk", "TreeIter").StructFieldOffset("stamp")
	valptr := (*uintptr)(unsafe.Add(t.native, offset))
	var v int32 // out
	v = int32(*(*C.gint)(unsafe.Pointer(&*valptr)))
	return v
}

// UserData: model-specific data.
func (t *TreeIter) UserData() unsafe.Pointer {
	offset := girepository.MustFind("Gtk", "TreeIter").StructFieldOffset("user_data")
	valptr := (*uintptr)(unsafe.Add(t.native, offset))
	var v unsafe.Pointer // out
	v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return v
}

// UserData2: model-specific data.
func (t *TreeIter) UserData2() unsafe.Pointer {
	offset := girepository.MustFind("Gtk", "TreeIter").StructFieldOffset("user_data2")
	valptr := (*uintptr)(unsafe.Add(t.native, offset))
	var v unsafe.Pointer // out
	v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return v
}

// UserData3: model-specific data.
func (t *TreeIter) UserData3() unsafe.Pointer {
	offset := girepository.MustFind("Gtk", "TreeIter").StructFieldOffset("user_data3")
	valptr := (*uintptr)(unsafe.Add(t.native, offset))
	var v unsafe.Pointer // out
	v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return v
}

// Stamp: unique stamp to catch invalid iterators.
func (t *TreeIter) SetStamp(stamp int32) {
	offset := girepository.MustFind("Gtk", "TreeIter").StructFieldOffset("stamp")
	valptr := (*uintptr)(unsafe.Add(t.native, offset))
	*(*C.gint)(unsafe.Pointer(&*valptr)) = C.gint(stamp)
}

// Copy creates a dynamically allocated tree iterator as a copy of iter.
//
// This function is not intended for use in applications, because you can just
// copy the structs by value (GtkTreeIter new_iter = iter;). You must free this
// iter with gtk_tree_iter_free().
//
// The function returns the following values:
//
//    - treeIter: newly-allocated copy of iter.
//
func (iter *TreeIter) Copy() *TreeIter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iter)

	var _treeIter *TreeIter // out

	_treeIter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treeIter)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreeIter").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treeIter
}

// TreePath: instance of this type is always passed by reference.
type TreePath struct {
	*treePath
}

// treePath is the struct that's finalized.
type treePath struct {
	native unsafe.Pointer
}

func marshalTreePath(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TreePath{&treePath{(unsafe.Pointer)(b)}}, nil
}

// NewTreePath constructs a struct TreePath.
func NewTreePath() *TreePath {
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// NewTreePathFirst constructs a struct TreePath.
func NewTreePathFirst() *TreePath {
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// NewTreePathFromIndices constructs a struct TreePath.
func NewTreePathFromIndices(indices []int32) *TreePath {
	var _args [2]girepository.Argument

	*(*C.gsize)(unsafe.Pointer(&_args[1])) = (C.gsize)(len(indices))
	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(C.calloc(C.size_t(len(indices)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_args[0]))
	{
		out := unsafe.Slice((*C.gint)(*(**C.void)(unsafe.Pointer(&_args[0]))), len(indices))
		for i := range indices {
			*(*C.gint)(unsafe.Pointer(&out[i])) = C.gint(indices[i])
		}
	}

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(indices)

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// NewTreePathFromString constructs a struct TreePath.
func NewTreePathFromString(path string) *TreePath {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_args[0]))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// AppendIndex appends a new index to a path.
//
// As a result, the depth of the path is increased.
//
// The function takes the following parameters:
//
//    - index_: index.
//
func (path *TreePath) AppendIndex(index_ int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(index_)

	runtime.KeepAlive(path)
	runtime.KeepAlive(index_)
}

// Compare compares two paths.
//
// If a appears before b in a tree, then -1 is returned. If b appears before a,
// then 1 is returned. If the two nodes are equal, then 0 is returned.
//
// The function takes the following parameters:
//
//    - b to compare with.
//
// The function returns the following values:
//
//    - gint: relative positions of a and b.
//
func (a *TreePath) Compare(b *TreePath) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(a)))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(b)))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Copy creates a new TreePath-struct as a copy of path.
//
// The function returns the following values:
//
//    - treePath: new TreePath-struct.
//
func (path *TreePath) Copy() *TreePath {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _treePath *TreePath // out

	_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treePath)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treePath
}

// Down moves path to point to the first child of the current path.
func (path *TreePath) Down() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	runtime.KeepAlive(path)
}

// Depth returns the current depth of path.
//
// The function returns the following values:
//
//    - gint: depth of path.
//
func (path *TreePath) Depth() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Indices returns the current indices of path.
//
// This is an array of integers, each representing a node in a tree. It also
// returns the number of elements in the array. The array should not be freed.
//
// The function returns the following values:
//
//    - gints: current indices, or NULL.
//
func (path *TreePath) Indices() []int32 {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(**C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _gints []int32 // out

	{
		src := unsafe.Slice((*C.gint)(_cret), _outs[0])
		_gints = make([]int32, _outs[0])
		for i := 0; i < int(_outs[0]); i++ {
			_gints[i] = int32(*(*C.gint)(unsafe.Pointer(&src[i])))
		}
	}

	return _gints
}

// IsAncestor returns TRUE if descendant is a descendant of path.
//
// The function takes the following parameters:
//
//    - descendant: another TreePath-struct.
//
// The function returns the following values:
//
//    - ok: TRUE if descendant is contained inside path.
//
func (path *TreePath) IsAncestor(descendant *TreePath) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(descendant)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)
	runtime.KeepAlive(descendant)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsDescendant returns TRUE if path is a descendant of ancestor.
//
// The function takes the following parameters:
//
//    - ancestor: another TreePath-struct.
//
// The function returns the following values:
//
//    - ok: TRUE if ancestor contains path somewhere below it.
//
func (path *TreePath) IsDescendant(ancestor *TreePath) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(ancestor)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)
	runtime.KeepAlive(ancestor)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Next moves the path to point to the next node at the current depth.
func (path *TreePath) Next() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	runtime.KeepAlive(path)
}

// PrependIndex prepends a new index to a path.
//
// As a result, the depth of the path is increased.
//
// The function takes the following parameters:
//
//    - index_: index.
//
func (path *TreePath) PrependIndex(index_ int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(index_)

	runtime.KeepAlive(path)
	runtime.KeepAlive(index_)
}

// Prev moves the path to point to the previous node at the current depth, if it
// exists.
//
// The function returns the following values:
//
//    - ok: TRUE if path has a previous node, and the move was made.
//
func (path *TreePath) Prev() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// String generates a string representation of the path.
//
// This string is a “:” separated list of numbers. For example, “4:10:0:3” would
// be an acceptable return value for this string.
//
// The function returns the following values:
//
//    - utf8: newly-allocated string. Must be freed with g_free().
//
func (path *TreePath) String() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Up moves the path to point to its parent node, if it has a parent.
//
// The function returns the following values:
//
//    - ok: TRUE if path has a parent, and the move was made.
//
func (path *TreePath) Up() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(path)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// TreeRowReference tracks model changes so that it always refers to the same
// row (a TreePath refers to a position, not a fixed row). Create a new
// GtkTreeRowReference with gtk_tree_row_reference_new().
//
// An instance of this type is always passed by reference.
type TreeRowReference struct {
	*treeRowReference
}

// treeRowReference is the struct that's finalized.
type treeRowReference struct {
	native unsafe.Pointer
}

func marshalTreeRowReference(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TreeRowReference{&treeRowReference{(unsafe.Pointer)(b)}}, nil
}

// NewTreeRowReference constructs a struct TreeRowReference.
func NewTreeRowReference(model TreeModeller, path *TreePath) *TreeRowReference {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(model)
	runtime.KeepAlive(path)

	var _treeRowReference *TreeRowReference // out

	_treeRowReference = (*TreeRowReference)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treeRowReference)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreeRowReference").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treeRowReference
}

// NewTreeRowReferenceProxy constructs a struct TreeRowReference.
func NewTreeRowReferenceProxy(proxy *coreglib.Object, model TreeModeller, path *TreePath) *TreeRowReference {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(proxy.Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(proxy)
	runtime.KeepAlive(model)
	runtime.KeepAlive(path)

	var _treeRowReference *TreeRowReference // out

	_treeRowReference = (*TreeRowReference)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treeRowReference)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreeRowReference").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treeRowReference
}

// Copy copies a TreeRowReference.
//
// The function returns the following values:
//
//    - treeRowReference: copy of reference.
//
func (reference *TreeRowReference) Copy() *TreeRowReference {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(reference)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(reference)

	var _treeRowReference *TreeRowReference // out

	_treeRowReference = (*TreeRowReference)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_treeRowReference)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TreeRowReference").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _treeRowReference
}

// Model returns the model that the row reference is monitoring.
//
// The function returns the following values:
//
//    - treeModel: model.
//
func (reference *TreeRowReference) Model() *TreeModel {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(reference)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(reference)

	var _treeModel *TreeModel // out

	_treeModel = wrapTreeModel(coreglib.Take(unsafe.Pointer(_cret)))

	return _treeModel
}

// Path returns a path that the row reference currently points to, or NULL if
// the path pointed to is no longer valid.
//
// The function returns the following values:
//
//    - treePath (optional): current path, or NULL.
//
func (reference *TreeRowReference) Path() *TreePath {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(reference)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(reference)

	var _treePath *TreePath // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_treePath = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_treePath)),
			func(intern *struct{ C unsafe.Pointer }) {
				{
					args := [1]girepository.Argument{(*C.void)(intern.C)}
					girepository.MustFind("Gtk", "TreePath").InvokeMethod("free", args[:], nil)
				}
			},
		)
	}

	return _treePath
}

// Valid returns TRUE if the reference is non-NULL and refers to a current valid
// path.
//
// The function returns the following values:
//
//    - ok: TRUE if reference points to a valid path.
//
func (reference *TreeRowReference) Valid() bool {
	var _args [1]girepository.Argument

	if reference != nil {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(reference)))
	}

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(reference)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// TreeRowReferenceDeleted lets a set of row reference created by
// gtk_tree_row_reference_new_proxy() know that the model emitted the
// TreeModel::row-deleted signal.
//
// The function takes the following parameters:
//
//    - proxy: #GObject.
//    - path position that was deleted.
//
func TreeRowReferenceDeleted(proxy *coreglib.Object, path *TreePath) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(proxy.Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	girepository.MustFind("Gtk", "deleted").Invoke(_args[:], nil)

	runtime.KeepAlive(proxy)
	runtime.KeepAlive(path)
}

// TreeRowReferenceInserted lets a set of row reference created by
// gtk_tree_row_reference_new_proxy() know that the model emitted the
// TreeModel::row-inserted signal.
//
// The function takes the following parameters:
//
//    - proxy: #GObject.
//    - path: row position that was inserted.
//
func TreeRowReferenceInserted(proxy *coreglib.Object, path *TreePath) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(proxy.Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(path)))

	girepository.MustFind("Gtk", "inserted").Invoke(_args[:], nil)

	runtime.KeepAlive(proxy)
	runtime.KeepAlive(path)
}
