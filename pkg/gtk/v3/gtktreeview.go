// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void callbackDelete(gpointer);
// extern void _gotk4_gtk3_TreeView_ConnectRowExpanded(gpointer, GtkTreeIter*, GtkTreePath*, guintptr);
// extern void _gotk4_gtk3_TreeView_ConnectRowCollapsed(gpointer, GtkTreeIter*, GtkTreePath*, guintptr);
// extern void _gotk4_gtk3_TreeView_ConnectRowActivated(gpointer, GtkTreePath*, GtkTreeViewColumn*, guintptr);
// extern void _gotk4_gtk3_TreeView_ConnectCursorChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_TreeView_ConnectColumnsChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_TreeViewMappingFunc(GtkTreeView*, GtkTreePath*, gpointer);
// extern void _gotk4_gtk3_TreeViewClass_row_expanded(GtkTreeView*, GtkTreeIter*, GtkTreePath*);
// extern void _gotk4_gtk3_TreeViewClass_row_collapsed(GtkTreeView*, GtkTreeIter*, GtkTreePath*);
// extern void _gotk4_gtk3_TreeViewClass_row_activated(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*);
// extern void _gotk4_gtk3_TreeViewClass_cursor_changed(GtkTreeView*);
// extern void _gotk4_gtk3_TreeViewClass_columns_changed(GtkTreeView*);
// extern void _gotk4_gtk3_TreeDestroyCountFunc(GtkTreeView*, GtkTreePath*, gint, gpointer);
// extern void _gotk4_gtk3_TreeCellDataFunc(GtkTreeViewColumn*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, gpointer);
// extern gboolean _gotk4_gtk3_TreeView_ConnectUnselectAll(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectToggleCursorRow(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectTestExpandRow(gpointer, GtkTreeIter*, GtkTreePath*, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectTestCollapseRow(gpointer, GtkTreeIter*, GtkTreePath*, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectStartInteractiveSearch(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectSelectCursorRow(gpointer, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectSelectCursorParent(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectSelectAll(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectMoveCursor(gpointer, GtkMovementStep, gint, guintptr);
// extern gboolean _gotk4_gtk3_TreeView_ConnectExpandCollapseCursorRow(gpointer, gboolean, gboolean, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_TreeViewSearchEqualFunc(GtkTreeModel*, gint, gchar*, GtkTreeIter*, gpointer);
// extern gboolean _gotk4_gtk3_TreeViewColumnDropFunc(GtkTreeView*, GtkTreeViewColumn*, GtkTreeViewColumn*, GtkTreeViewColumn*, gpointer);
// extern gboolean _gotk4_gtk3_TreeViewClass_unselect_all(GtkTreeView*);
// extern gboolean _gotk4_gtk3_TreeViewClass_toggle_cursor_row(GtkTreeView*);
// extern gboolean _gotk4_gtk3_TreeViewClass_test_expand_row(GtkTreeView*, GtkTreeIter*, GtkTreePath*);
// extern gboolean _gotk4_gtk3_TreeViewClass_test_collapse_row(GtkTreeView*, GtkTreeIter*, GtkTreePath*);
// extern gboolean _gotk4_gtk3_TreeViewClass_start_interactive_search(GtkTreeView*);
// extern gboolean _gotk4_gtk3_TreeViewClass_select_cursor_row(GtkTreeView*, gboolean);
// extern gboolean _gotk4_gtk3_TreeViewClass_select_cursor_parent(GtkTreeView*);
// extern gboolean _gotk4_gtk3_TreeViewClass_select_all(GtkTreeView*);
// extern gboolean _gotk4_gtk3_TreeViewClass_move_cursor(GtkTreeView*, GtkMovementStep, gint);
// extern gboolean _gotk4_gtk3_TreeViewClass_expand_collapse_cursor_row(GtkTreeView*, gboolean, gboolean, gboolean);
// gboolean _gotk4_gtk3_TreeView_virtual_expand_collapse_cursor_row(void* fnptr, GtkTreeView* arg0, gboolean arg1, gboolean arg2, gboolean arg3) {
//   return ((gboolean (*)(GtkTreeView*, gboolean, gboolean, gboolean))(fnptr))(arg0, arg1, arg2, arg3);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_move_cursor(void* fnptr, GtkTreeView* arg0, GtkMovementStep arg1, gint arg2) {
//   return ((gboolean (*)(GtkTreeView*, GtkMovementStep, gint))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_select_all(void* fnptr, GtkTreeView* arg0) {
//   return ((gboolean (*)(GtkTreeView*))(fnptr))(arg0);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_select_cursor_parent(void* fnptr, GtkTreeView* arg0) {
//   return ((gboolean (*)(GtkTreeView*))(fnptr))(arg0);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_select_cursor_row(void* fnptr, GtkTreeView* arg0, gboolean arg1) {
//   return ((gboolean (*)(GtkTreeView*, gboolean))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_start_interactive_search(void* fnptr, GtkTreeView* arg0) {
//   return ((gboolean (*)(GtkTreeView*))(fnptr))(arg0);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_test_collapse_row(void* fnptr, GtkTreeView* arg0, GtkTreeIter* arg1, GtkTreePath* arg2) {
//   return ((gboolean (*)(GtkTreeView*, GtkTreeIter*, GtkTreePath*))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_test_expand_row(void* fnptr, GtkTreeView* arg0, GtkTreeIter* arg1, GtkTreePath* arg2) {
//   return ((gboolean (*)(GtkTreeView*, GtkTreeIter*, GtkTreePath*))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_toggle_cursor_row(void* fnptr, GtkTreeView* arg0) {
//   return ((gboolean (*)(GtkTreeView*))(fnptr))(arg0);
// };
// gboolean _gotk4_gtk3_TreeView_virtual_unselect_all(void* fnptr, GtkTreeView* arg0) {
//   return ((gboolean (*)(GtkTreeView*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_TreeView_virtual_columns_changed(void* fnptr, GtkTreeView* arg0) {
//   ((void (*)(GtkTreeView*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_TreeView_virtual_cursor_changed(void* fnptr, GtkTreeView* arg0) {
//   ((void (*)(GtkTreeView*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_TreeView_virtual_row_activated(void* fnptr, GtkTreeView* arg0, GtkTreePath* arg1, GtkTreeViewColumn* arg2) {
//   ((void (*)(GtkTreeView*, GtkTreePath*, GtkTreeViewColumn*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_TreeView_virtual_row_collapsed(void* fnptr, GtkTreeView* arg0, GtkTreeIter* arg1, GtkTreePath* arg2) {
//   ((void (*)(GtkTreeView*, GtkTreeIter*, GtkTreePath*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_TreeView_virtual_row_expanded(void* fnptr, GtkTreeView* arg0, GtkTreeIter* arg1, GtkTreePath* arg2) {
//   ((void (*)(GtkTreeView*, GtkTreeIter*, GtkTreePath*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// GType values.
var (
	GTypeTreeViewDropPosition = coreglib.Type(C.gtk_tree_view_drop_position_get_type())
	GTypeTreeView             = coreglib.Type(C.gtk_tree_view_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTreeViewDropPosition, F: marshalTreeViewDropPosition},
		coreglib.TypeMarshaler{T: GTypeTreeView, F: marshalTreeView},
	})
}

// TreeViewDropPosition: enum for determining where a dropped row goes.
type TreeViewDropPosition C.gint

const (
	// TreeViewDropBefore: dropped row is inserted before.
	TreeViewDropBefore TreeViewDropPosition = iota
	// TreeViewDropAfter: dropped row is inserted after.
	TreeViewDropAfter
	// TreeViewDropIntoOrBefore: dropped row becomes a child or is inserted
	// before.
	TreeViewDropIntoOrBefore
	// TreeViewDropIntoOrAfter: dropped row becomes a child or is inserted
	// after.
	TreeViewDropIntoOrAfter
)

func marshalTreeViewDropPosition(p uintptr) (interface{}, error) {
	return TreeViewDropPosition(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TreeViewDropPosition.
func (t TreeViewDropPosition) String() string {
	switch t {
	case TreeViewDropBefore:
		return "Before"
	case TreeViewDropAfter:
		return "After"
	case TreeViewDropIntoOrBefore:
		return "IntoOrBefore"
	case TreeViewDropIntoOrAfter:
		return "IntoOrAfter"
	default:
		return fmt.Sprintf("TreeViewDropPosition(%d)", t)
	}
}

type TreeDestroyCountFunc func(treeView *TreeView, path *TreePath, children int)

// TreeViewColumnDropFunc: function type for determining whether column can be
// dropped in a particular spot (as determined by prev_column and next_column).
// In left to right locales, prev_column is on the left of the potential drop
// spot, and next_column is on the right. In right to left mode, this is
// reversed. This function should return TRUE if the spot is a valid drop spot.
// Please note that returning TRUE does not actually indicate that the column
// drop was made, but is meant only to indicate a possible drop spot to the
// user.
type TreeViewColumnDropFunc func(treeView *TreeView, column, prevColumn, nextColumn *TreeViewColumn) (ok bool)

// TreeViewMappingFunc: function used for gtk_tree_view_map_expanded_rows().
type TreeViewMappingFunc func(treeView *TreeView, path *TreePath)

// TreeViewRowSeparatorFunc: function type for determining whether the row
// pointed to by iter should be rendered as a separator. A common way to
// implement this is to have a boolean column in the model, whose values the
// TreeViewRowSeparatorFunc returns.
type TreeViewRowSeparatorFunc func(model TreeModeller, iter *TreeIter) (ok bool)

// TreeViewSearchEqualFunc: function used for checking whether a row in model
// matches a search key string entered by the user. Note the return value is
// reversed from what you would normally expect, though it has some similarity
// to strcmp() returning 0 for equal strings.
type TreeViewSearchEqualFunc func(model TreeModeller, column int, key string, iter *TreeIter) (ok bool)

type TreeViewSearchPositionFunc func(treeView *TreeView, searchDialog Widgetter)

// TreeViewOverrides contains methods that are overridable.
type TreeViewOverrides struct {
	ColumnsChanged func()
	CursorChanged  func()
	// The function takes the following parameters:
	//
	//    - logical
	//    - expand
	//    - openAll
	//
	// The function returns the following values:
	//
	ExpandCollapseCursorRow func(logical, expand, openAll bool) bool
	// The function takes the following parameters:
	//
	//    - step
	//    - count
	//
	// The function returns the following values:
	//
	MoveCursor func(step MovementStep, count int) bool
	// RowActivated activates the cell determined by path and column.
	//
	// The function takes the following parameters:
	//
	//    - path to be activated.
	//    - column to be activated.
	//
	RowActivated func(path *TreePath, column *TreeViewColumn)
	// The function takes the following parameters:
	//
	//    - iter
	//    - path
	//
	RowCollapsed func(iter *TreeIter, path *TreePath)
	// The function takes the following parameters:
	//
	//    - iter
	//    - path
	//
	RowExpanded func(iter *TreeIter, path *TreePath)
	// The function returns the following values:
	//
	SelectAll func() bool
	// The function returns the following values:
	//
	SelectCursorParent func() bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	SelectCursorRow func(startEditing bool) bool
	// The function returns the following values:
	//
	StartInteractiveSearch func() bool
	// The function takes the following parameters:
	//
	//    - iter
	//    - path
	//
	// The function returns the following values:
	//
	TestCollapseRow func(iter *TreeIter, path *TreePath) bool
	// The function takes the following parameters:
	//
	//    - iter
	//    - path
	//
	// The function returns the following values:
	//
	TestExpandRow func(iter *TreeIter, path *TreePath) bool
	// The function returns the following values:
	//
	ToggleCursorRow func() bool
	// The function returns the following values:
	//
	UnselectAll func() bool
}

func defaultTreeViewOverrides(v *TreeView) TreeViewOverrides {
	return TreeViewOverrides{
		ColumnsChanged:          v.columnsChanged,
		CursorChanged:           v.cursorChanged,
		ExpandCollapseCursorRow: v.expandCollapseCursorRow,
		MoveCursor:              v.moveCursor,
		RowActivated:            v.rowActivated,
		RowCollapsed:            v.rowCollapsed,
		RowExpanded:             v.rowExpanded,
		SelectAll:               v.selectAll,
		SelectCursorParent:      v.selectCursorParent,
		SelectCursorRow:         v.selectCursorRow,
		StartInteractiveSearch:  v.startInteractiveSearch,
		TestCollapseRow:         v.testCollapseRow,
		TestExpandRow:           v.testExpandRow,
		ToggleCursorRow:         v.toggleCursorRow,
		UnselectAll:             v.unselectAll,
	}
}

// TreeView: widget that displays any object that implements the TreeModel
// interface.
//
// Please refer to the [tree widget conceptual overview][TreeWidget] for an
// overview of all the objects and data types related to the tree widget and how
// they work together.
//
// Several different coordinate systems are exposed in the GtkTreeView API.
// These are:
//
// ! (tree-view-coordinates.png)
//
// Coordinate systems in GtkTreeView API:
//
// - Widget coordinates: Coordinates relative to the widget (usually
// widget->window).
//
// - Bin window coordinates: Coordinates relative to the window that GtkTreeView
// renders to.
//
// - Tree coordinates: Coordinates relative to the entire scrollable area of
// GtkTreeView. These coordinates start at (0, 0) for row 0 of the tree.
//
// Several functions are available for converting between the different
// coordinate systems. The most common translations are between widget and bin
// window coordinates and between bin window and tree coordinates. For the
// former you can use gtk_tree_view_convert_widget_to_bin_window_coords() (and
// vice versa), for the latter gtk_tree_view_convert_bin_window_to_tree_coords()
// (and vice versa).
//
//
// GtkTreeView as GtkBuildable
//
// The GtkTreeView implementation of the GtkBuildable interface accepts
// TreeViewColumn objects as <child> elements and exposes the internal
// TreeSelection in UI definitions.
//
// An example of a UI definition fragment with GtkTreeView:
//
//    <object class="GtkTreeView" id="treeview">
//      <property name="model">liststore1</property>
//      <child>
//        <object class="GtkTreeViewColumn" id="test-column">
//          <property name="title">Test</property>
//          <child>
//            <object class="GtkCellRendererText" id="test-renderer"/>
//            <attributes>
//              <attribute name="text">1</attribute>
//            </attributes>
//          </child>
//        </object>
//      </child>
//      <child internal-child="selection">
//        <object class="GtkTreeSelection" id="selection">
//          <signal name="changed" handler="on_treeview_selection_changed"/>
//        </object>
//      </child>
//    </object>
//
// CSS nodes
//
//    treeview.view
//    ├── header
//    │   ├── <column header>
//    ┊   ┊
//    │   ╰── <column header>
//    │
//    ╰── [rubberband]
//
// GtkTreeView has a main CSS node with name treeview and style class .view. It
// has a subnode with name header, which is the parent for all the column header
// widgets' CSS nodes. For rubberband selection, a subnode with name rubberband
// is used.
type TreeView struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Scrollable
}

var (
	_ Containerer       = (*TreeView)(nil)
	_ coreglib.Objector = (*TreeView)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TreeView, *TreeViewClass, TreeViewOverrides](
		GTypeTreeView,
		initTreeViewClass,
		wrapTreeView,
		defaultTreeViewOverrides,
	)
}

func initTreeViewClass(gclass unsafe.Pointer, overrides TreeViewOverrides, classInitFunc func(*TreeViewClass)) {
	pclass := (*C.GtkTreeViewClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeTreeView))))

	if overrides.ColumnsChanged != nil {
		pclass.columns_changed = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_columns_changed)
	}

	if overrides.CursorChanged != nil {
		pclass.cursor_changed = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_cursor_changed)
	}

	if overrides.ExpandCollapseCursorRow != nil {
		pclass.expand_collapse_cursor_row = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_expand_collapse_cursor_row)
	}

	if overrides.MoveCursor != nil {
		pclass.move_cursor = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_move_cursor)
	}

	if overrides.RowActivated != nil {
		pclass.row_activated = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_row_activated)
	}

	if overrides.RowCollapsed != nil {
		pclass.row_collapsed = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_row_collapsed)
	}

	if overrides.RowExpanded != nil {
		pclass.row_expanded = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_row_expanded)
	}

	if overrides.SelectAll != nil {
		pclass.select_all = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_select_all)
	}

	if overrides.SelectCursorParent != nil {
		pclass.select_cursor_parent = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_select_cursor_parent)
	}

	if overrides.SelectCursorRow != nil {
		pclass.select_cursor_row = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_select_cursor_row)
	}

	if overrides.StartInteractiveSearch != nil {
		pclass.start_interactive_search = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_start_interactive_search)
	}

	if overrides.TestCollapseRow != nil {
		pclass.test_collapse_row = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_test_collapse_row)
	}

	if overrides.TestExpandRow != nil {
		pclass.test_expand_row = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_test_expand_row)
	}

	if overrides.ToggleCursorRow != nil {
		pclass.toggle_cursor_row = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_toggle_cursor_row)
	}

	if overrides.UnselectAll != nil {
		pclass.unselect_all = (*[0]byte)(C._gotk4_gtk3_TreeViewClass_unselect_all)
	}

	if classInitFunc != nil {
		class := (*TreeViewClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTreeView(obj *coreglib.Object) *TreeView {
	return &TreeView{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalTreeView(p uintptr) (interface{}, error) {
	return wrapTreeView(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectColumnsChanged: number of columns of the treeview has changed.
func (treeView *TreeView) ConnectColumnsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "columns-changed", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectColumnsChanged), f)
}

// ConnectCursorChanged: position of the cursor (focused cell) has changed.
func (treeView *TreeView) ConnectCursorChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "cursor-changed", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectCursorChanged), f)
}

func (treeView *TreeView) ConnectExpandCollapseCursorRow(f func(object, p0, p1 bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "expand-collapse-cursor-row", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectExpandCollapseCursorRow), f)
}

// ConnectMoveCursor signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user presses one of the cursor keys.
//
// Applications should not connect to it, but may emit it with
// g_signal_emit_by_name() if they need to control the cursor programmatically.
// In contrast to gtk_tree_view_set_cursor() and
// gtk_tree_view_set_cursor_on_cell() when moving horizontally
// TreeView::move-cursor does not reset the current selection.
func (treeView *TreeView) ConnectMoveCursor(f func(step MovementStep, direction int) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "move-cursor", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectMoveCursor), f)
}

// ConnectRowActivated: "row-activated" signal is emitted when the method
// gtk_tree_view_row_activated() is called, when the user double clicks a
// treeview row with the "activate-on-single-click" property set to FALSE, or
// when the user single clicks a row when the "activate-on-single-click"
// property set to TRUE. It is also emitted when a non-editable row is selected
// and one of the keys: Space, Shift+Space, Return or Enter is pressed.
//
// For selection handling refer to the [tree widget conceptual
// overview][TreeWidget] as well as TreeSelection.
func (treeView *TreeView) ConnectRowActivated(f func(path *TreePath, column *TreeViewColumn)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "row-activated", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectRowActivated), f)
}

// ConnectRowCollapsed: given row has been collapsed (child nodes are hidden).
func (treeView *TreeView) ConnectRowCollapsed(f func(iter *TreeIter, path *TreePath)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "row-collapsed", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectRowCollapsed), f)
}

// ConnectRowExpanded: given row has been expanded (child nodes are shown).
func (treeView *TreeView) ConnectRowExpanded(f func(iter *TreeIter, path *TreePath)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "row-expanded", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectRowExpanded), f)
}

func (treeView *TreeView) ConnectSelectAll(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectSelectAll), f)
}

func (treeView *TreeView) ConnectSelectCursorParent(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "select-cursor-parent", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectSelectCursorParent), f)
}

func (treeView *TreeView) ConnectSelectCursorRow(f func(object bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "select-cursor-row", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectSelectCursorRow), f)
}

func (treeView *TreeView) ConnectStartInteractiveSearch(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "start-interactive-search", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectStartInteractiveSearch), f)
}

// ConnectTestCollapseRow: given row is about to be collapsed (hide its children
// nodes). Use this signal if you need to control the collapsibility of
// individual rows.
func (treeView *TreeView) ConnectTestCollapseRow(f func(iter *TreeIter, path *TreePath) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "test-collapse-row", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectTestCollapseRow), f)
}

// ConnectTestExpandRow: given row is about to be expanded (show its children
// nodes). Use this signal if you need to control the expandability of
// individual rows.
func (treeView *TreeView) ConnectTestExpandRow(f func(iter *TreeIter, path *TreePath) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "test-expand-row", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectTestExpandRow), f)
}

func (treeView *TreeView) ConnectToggleCursorRow(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "toggle-cursor-row", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectToggleCursorRow), f)
}

func (treeView *TreeView) ConnectUnselectAll(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(treeView, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk3_TreeView_ConnectUnselectAll), f)
}

// NewTreeView creates a new TreeView widget.
//
// The function returns the following values:
//
//    - treeView: newly created TreeView widget.
//
func NewTreeView() *TreeView {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_tree_view_new()

	var _treeView *TreeView // out

	_treeView = wrapTreeView(coreglib.Take(unsafe.Pointer(_cret)))

	return _treeView
}

// NewTreeViewWithModel creates a new TreeView widget with the model initialized
// to model.
//
// The function takes the following parameters:
//
//    - model: model.
//
// The function returns the following values:
//
//    - treeView: newly created TreeView widget.
//
func NewTreeViewWithModel(model TreeModeller) *TreeView {
	var _arg1 *C.GtkTreeModel // out
	var _cret *C.GtkWidget    // in

	_arg1 = (*C.GtkTreeModel)(unsafe.Pointer(coreglib.InternObject(model).Native()))

	_cret = C.gtk_tree_view_new_with_model(_arg1)
	runtime.KeepAlive(model)

	var _treeView *TreeView // out

	_treeView = wrapTreeView(coreglib.Take(unsafe.Pointer(_cret)))

	return _treeView
}

// AppendColumn appends column to the list of columns. If tree_view has
// “fixed_height” mode enabled, then column must have its “sizing” property set
// to be GTK_TREE_VIEW_COLUMN_FIXED.
//
// The function takes the following parameters:
//
//    - column to add.
//
// The function returns the following values:
//
//    - gint: number of columns in tree_view after appending.
//
func (treeView *TreeView) AppendColumn(column *TreeViewColumn) int {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreeViewColumn // out
	var _cret C.gint               // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))

	_cret = C.gtk_tree_view_append_column(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// CollapseAll: recursively collapses all visible, expanded nodes in tree_view.
func (treeView *TreeView) CollapseAll() {
	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_collapse_all(_arg0)
	runtime.KeepAlive(treeView)
}

// CollapseRow collapses a row (hides its child rows, if they exist).
//
// The function takes the following parameters:
//
//    - path to a row in the tree_view.
//
// The function returns the following values:
//
//    - ok: TRUE if the row was collapsed.
//
func (treeView *TreeView) CollapseRow(path *TreePath) bool {
	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreePath // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C.gtk_tree_view_collapse_row(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ColumnsAutosize resizes all columns to their optimal width. Only works after
// the treeview has been realized.
func (treeView *TreeView) ColumnsAutosize() {
	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_columns_autosize(_arg0)
	runtime.KeepAlive(treeView)
}

// CreateRowDragIcon creates a #cairo_surface_t representation of the row at
// path. This image is used for a drag icon.
//
// The function takes the following parameters:
//
//    - path in tree_view.
//
// The function returns the following values:
//
//    - surface: newly-allocated surface of the drag icon.
//
func (treeView *TreeView) CreateRowDragIcon(path *TreePath) *cairo.Surface {
	var _arg0 *C.GtkTreeView     // out
	var _arg1 *C.GtkTreePath     // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C.gtk_tree_view_create_row_drag_icon(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)

	var _surface *cairo.Surface // out

	_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
	})

	return _surface
}

// EnableModelDragDest turns tree_view into a drop destination for automatic
// DND. Calling this method sets TreeView:reorderable to FALSE.
//
// The function takes the following parameters:
//
//    - targets: table of targets that the drag will support.
//    - actions: bitmask of possible actions for a drag from this widget.
//
func (treeView *TreeView) EnableModelDragDest(targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkTreeView    // out
	var _arg1 *C.GtkTargetEntry // out
	var _arg2 C.gint
	var _arg3 C.GdkDragAction // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg2 = (C.gint)(len(targets))
	_arg1 = (*C.GtkTargetEntry)(C.calloc(C.size_t(len(targets)), C.size_t(C.sizeof_GtkTargetEntry)))
	defer C.free(unsafe.Pointer(_arg1))
	{
		out := unsafe.Slice((*C.GtkTargetEntry)(_arg1), len(targets))
		for i := range targets {
			out[i] = *(*C.GtkTargetEntry)(gextras.StructNative(unsafe.Pointer((&targets[i]))))
		}
	}
	_arg3 = C.GdkDragAction(actions)

	C.gtk_tree_view_enable_model_drag_dest(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(targets)
	runtime.KeepAlive(actions)
}

// EnableModelDragSource turns tree_view into a drag source for automatic DND.
// Calling this method sets TreeView:reorderable to FALSE.
//
// The function takes the following parameters:
//
//    - startButtonMask: mask of allowed buttons to start drag.
//    - targets: table of targets that the drag will support.
//    - actions: bitmask of possible actions for a drag from this widget.
//
func (treeView *TreeView) EnableModelDragSource(startButtonMask gdk.ModifierType, targets []TargetEntry, actions gdk.DragAction) {
	var _arg0 *C.GtkTreeView    // out
	var _arg1 C.GdkModifierType // out
	var _arg2 *C.GtkTargetEntry // out
	var _arg3 C.gint
	var _arg4 C.GdkDragAction // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.GdkModifierType(startButtonMask)
	_arg3 = (C.gint)(len(targets))
	_arg2 = (*C.GtkTargetEntry)(C.calloc(C.size_t(len(targets)), C.size_t(C.sizeof_GtkTargetEntry)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice((*C.GtkTargetEntry)(_arg2), len(targets))
		for i := range targets {
			out[i] = *(*C.GtkTargetEntry)(gextras.StructNative(unsafe.Pointer((&targets[i]))))
		}
	}
	_arg4 = C.GdkDragAction(actions)

	C.gtk_tree_view_enable_model_drag_source(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(startButtonMask)
	runtime.KeepAlive(targets)
	runtime.KeepAlive(actions)
}

// ExpandAll: recursively expands all nodes in the tree_view.
func (treeView *TreeView) ExpandAll() {
	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_expand_all(_arg0)
	runtime.KeepAlive(treeView)
}

// ExpandRow opens the row so its children are visible.
//
// The function takes the following parameters:
//
//    - path to a row.
//    - openAll: whether to recursively expand, or just expand immediate
//      children.
//
// The function returns the following values:
//
//    - ok: TRUE if the row existed and had children.
//
func (treeView *TreeView) ExpandRow(path *TreePath, openAll bool) bool {
	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreePath // out
	var _arg2 C.gboolean     // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	if openAll {
		_arg2 = C.TRUE
	}

	_cret = C.gtk_tree_view_expand_row(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(openAll)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// BackgroundArea fills the bounding rectangle in bin_window coordinates for the
// cell at the row specified by path and the column specified by column. If path
// is NULL, or points to a node not found in the tree, the y and height fields
// of the rectangle will be filled with 0. If column is NULL, the x and width
// fields will be filled with 0. The returned rectangle is equivalent to the
// background_area passed to gtk_cell_renderer_render(). These background areas
// tile to cover the entire bin window. Contrast with the cell_area, returned by
// gtk_tree_view_get_cell_area(), which returns only the cell itself, excluding
// surrounding borders and the tree expander area.
//
// The function takes the following parameters:
//
//    - path (optional) for the row, or NULL to get only horizontal coordinates.
//    - column (optional) for the column, or NULL to get only vertical
//      coordiantes.
//
// The function returns the following values:
//
//    - rect: rectangle to fill with cell background rect.
//
func (treeView *TreeView) BackgroundArea(path *TreePath, column *TreeViewColumn) *gdk.Rectangle {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out
	var _arg3 C.GdkRectangle       // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if path != nil {
		_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	}
	if column != nil {
		_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	}

	C.gtk_tree_view_get_background_area(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(column)

	var _rect *gdk.Rectangle // out

	_rect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _rect
}

// BinWindow returns the window that tree_view renders to. This is used
// primarily to compare to event->window to confirm that the event on tree_view
// is on the right window.
//
// The function returns the following values:
//
//    - window (optional) or NULL when tree_view hasn’t been realized yet.
//
func (treeView *TreeView) BinWindow() gdk.Windower {
	var _arg0 *C.GtkTreeView // out
	var _cret *C.GdkWindow   // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_bin_window(_arg0)
	runtime.KeepAlive(treeView)

	var _window gdk.Windower // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.Windower)
				return ok
			})
			rv, ok := casted.(gdk.Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_window = rv
		}
	}

	return _window
}

// CellArea fills the bounding rectangle in bin_window coordinates for the cell
// at the row specified by path and the column specified by column. If path is
// NULL, or points to a path not currently displayed, the y and height fields of
// the rectangle will be filled with 0. If column is NULL, the x and width
// fields will be filled with 0. The sum of all cell rects does not cover the
// entire tree; there are extra pixels in between rows, for example. The
// returned rectangle is equivalent to the cell_area passed to
// gtk_cell_renderer_render(). This function is only valid if tree_view is
// realized.
//
// The function takes the following parameters:
//
//    - path (optional) for the row, or NULL to get only horizontal coordinates.
//    - column (optional) for the column, or NULL to get only vertical
//      coordinates.
//
// The function returns the following values:
//
//    - rect: rectangle to fill with cell rect.
//
func (treeView *TreeView) CellArea(path *TreePath, column *TreeViewColumn) *gdk.Rectangle {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out
	var _arg3 C.GdkRectangle       // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if path != nil {
		_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	}
	if column != nil {
		_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	}

	C.gtk_tree_view_get_cell_area(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(column)

	var _rect *gdk.Rectangle // out

	_rect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _rect
}

// Column gets the TreeViewColumn at the given position in the #tree_view.
//
// The function takes the following parameters:
//
//    - n of the column, counting from 0.
//
// The function returns the following values:
//
//    - treeViewColumn (optional) or NULL if the position is outside the range of
//      columns.
//
func (treeView *TreeView) Column(n int) *TreeViewColumn {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 C.gint               // out
	var _cret *C.GtkTreeViewColumn // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(n)

	_cret = C.gtk_tree_view_get_column(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(n)

	var _treeViewColumn *TreeViewColumn // out

	if _cret != nil {
		_treeViewColumn = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _treeViewColumn
}

// Columns returns a #GList of all the TreeViewColumn s currently in tree_view.
// The returned list must be freed with g_list_free ().
//
// The function returns the following values:
//
//    - list of TreeViewColumn s.
//
func (treeView *TreeView) Columns() []*TreeViewColumn {
	var _arg0 *C.GtkTreeView // out
	var _cret *C.GList       // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_columns(_arg0)
	runtime.KeepAlive(treeView)

	var _list []*TreeViewColumn // out

	_list = make([]*TreeViewColumn, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkTreeViewColumn)(v)
		var dst *TreeViewColumn // out
		dst = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Cursor fills in path and focus_column with the current path and focus column.
// If the cursor isn’t currently set, then *path will be NULL. If no column
// currently has focus, then *focus_column will be NULL.
//
// The returned TreePath must be freed with gtk_tree_path_free() when you are
// done with it.
//
// The function returns the following values:
//
//    - path (optional): pointer to be filled with the current cursor path, or
//      NULL.
//    - focusColumn (optional): a pointer to be filled with the current focus
//      column, or NULL.
//
func (treeView *TreeView) Cursor() (*TreePath, *TreeViewColumn) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // in
	var _arg2 *C.GtkTreeViewColumn // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_get_cursor(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(treeView)

	var _path *TreePath              // out
	var _focusColumn *TreeViewColumn // out

	if _arg1 != nil {
		_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_path)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_tree_path_free((*C.GtkTreePath)(intern.C))
			},
		)
	}
	if _arg2 != nil {
		_focusColumn = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(_arg2)))
	}

	return _path, _focusColumn
}

// DestRowAtPos determines the destination row for a given position. drag_x and
// drag_y are expected to be in widget coordinates. This function is only
// meaningful if tree_view is realized. Therefore this function will always
// return FALSE if tree_view is not realized or does not have a model.
//
// The function takes the following parameters:
//
//    - dragX: position to determine the destination row for.
//    - dragY: position to determine the destination row for.
//
// The function returns the following values:
//
//    - path (optional): return location for the path of the highlighted row, or
//      NULL.
//    - pos (optional): return location for the drop position, or NULL.
//    - ok: whether there is a row at the given position, TRUE if this is indeed
//      the case.
//
func (treeView *TreeView) DestRowAtPos(dragX, dragY int) (*TreePath, TreeViewDropPosition, bool) {
	var _arg0 *C.GtkTreeView            // out
	var _arg1 C.gint                    // out
	var _arg2 C.gint                    // out
	var _arg3 *C.GtkTreePath            // in
	var _arg4 C.GtkTreeViewDropPosition // in
	var _cret C.gboolean                // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(dragX)
	_arg2 = C.gint(dragY)

	_cret = C.gtk_tree_view_get_dest_row_at_pos(_arg0, _arg1, _arg2, &_arg3, &_arg4)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(dragX)
	runtime.KeepAlive(dragY)

	var _path *TreePath           // out
	var _pos TreeViewDropPosition // out
	var _ok bool                  // out

	if _arg3 != nil {
		_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_path)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_tree_path_free((*C.GtkTreePath)(intern.C))
			},
		)
	}
	_pos = TreeViewDropPosition(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _path, _pos, _ok
}

// DragDestRow gets information about the row that is highlighted for feedback.
//
// The function returns the following values:
//
//    - path (optional): return location for the path of the highlighted row, or
//      NULL.
//    - pos (optional): return location for the drop position, or NULL.
//
func (treeView *TreeView) DragDestRow() (*TreePath, TreeViewDropPosition) {
	var _arg0 *C.GtkTreeView            // out
	var _arg1 *C.GtkTreePath            // in
	var _arg2 C.GtkTreeViewDropPosition // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_get_drag_dest_row(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(treeView)

	var _path *TreePath           // out
	var _pos TreeViewDropPosition // out

	if _arg1 != nil {
		_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_path)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_tree_path_free((*C.GtkTreePath)(intern.C))
			},
		)
	}
	_pos = TreeViewDropPosition(_arg2)

	return _path, _pos
}

// EnableSearch returns whether or not the tree allows to start interactive
// searching by typing in text.
//
// The function returns the following values:
//
//    - ok: whether or not to let the user search interactively.
//
func (treeView *TreeView) EnableSearch() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_enable_search(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ExpanderColumn returns the column that is the current expander column. This
// column has the expander arrow drawn next to it.
//
// The function returns the following values:
//
//    - treeViewColumn: expander column.
//
func (treeView *TreeView) ExpanderColumn() *TreeViewColumn {
	var _arg0 *C.GtkTreeView       // out
	var _cret *C.GtkTreeViewColumn // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_expander_column(_arg0)
	runtime.KeepAlive(treeView)

	var _treeViewColumn *TreeViewColumn // out

	_treeViewColumn = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(_cret)))

	return _treeViewColumn
}

// HAdjustment gets the Adjustment currently being used for the horizontal
// aspect.
//
// Deprecated: Use gtk_scrollable_get_hadjustment().
//
// The function returns the following values:
//
//    - adjustment object, or NULL if none is currently being used.
//
func (treeView *TreeView) HAdjustment() *Adjustment {
	var _arg0 *C.GtkTreeView   // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_hadjustment(_arg0)
	runtime.KeepAlive(treeView)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// HeadersVisible returns TRUE if the headers on the tree_view are visible.
//
// The function returns the following values:
//
//    - ok: whether the headers are visible or not.
//
func (treeView *TreeView) HeadersVisible() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_headers_visible(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Model returns the model the TreeView is based on. Returns NULL if the model
// is unset.
//
// The function returns the following values:
//
//    - treeModel (optional) or NULL if none is currently being used.
//
func (treeView *TreeView) Model() *TreeModel {
	var _arg0 *C.GtkTreeView  // out
	var _cret *C.GtkTreeModel // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_model(_arg0)
	runtime.KeepAlive(treeView)

	var _treeModel *TreeModel // out

	if _cret != nil {
		_treeModel = wrapTreeModel(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _treeModel
}

// PathAtPos finds the path at the point (x, y), relative to bin_window
// coordinates (please see gtk_tree_view_get_bin_window()). That is, x and y are
// relative to an events coordinates. x and y must come from an event on the
// tree_view only where event->window == gtk_tree_view_get_bin_window (). It is
// primarily for things like popup menus. If path is non-NULL, then it will be
// filled with the TreePath at that point. This path should be freed with
// gtk_tree_path_free(). If column is non-NULL, then it will be filled with the
// column at that point. cell_x and cell_y return the coordinates relative to
// the cell background (i.e. the background_area passed to
// gtk_cell_renderer_render()). This function is only meaningful if tree_view is
// realized. Therefore this function will always return FALSE if tree_view is
// not realized or does not have a model.
//
// For converting widget coordinates (eg. the ones you get from
// GtkWidget::query-tooltip), please see
// gtk_tree_view_convert_widget_to_bin_window_coords().
//
// The function takes the following parameters:
//
//    - x position to be identified (relative to bin_window).
//    - y position to be identified (relative to bin_window).
//
// The function returns the following values:
//
//    - path (optional): pointer to a TreePath pointer to be filled in, or NULL.
//    - column (optional): pointer to a TreeViewColumn pointer to be filled in,
//      or NULL.
//    - cellX (optional): pointer where the X coordinate relative to the cell can
//      be placed, or NULL.
//    - cellY (optional): pointer where the Y coordinate relative to the cell can
//      be placed, or NULL.
//    - ok: TRUE if a row exists at that coordinate.
//
func (treeView *TreeView) PathAtPos(x, y int) (path *TreePath, column *TreeViewColumn, cellX, cellY int, ok bool) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 C.gint               // out
	var _arg2 C.gint               // out
	var _arg3 *C.GtkTreePath       // in
	var _arg4 *C.GtkTreeViewColumn // in
	var _arg5 C.gint               // in
	var _arg6 C.gint               // in
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_tree_view_get_path_at_pos(_arg0, _arg1, _arg2, &_arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _path *TreePath         // out
	var _column *TreeViewColumn // out
	var _cellX int              // out
	var _cellY int              // out
	var _ok bool                // out

	if _arg3 != nil {
		_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_path)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_tree_path_free((*C.GtkTreePath)(intern.C))
			},
		)
	}
	if _arg4 != nil {
		_column = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(_arg4)))
	}
	_cellX = int(_arg5)
	_cellY = int(_arg6)
	if _cret != 0 {
		_ok = true
	}

	return _path, _column, _cellX, _cellY, _ok
}

// Reorderable retrieves whether the user can reorder the tree via
// drag-and-drop. See gtk_tree_view_set_reorderable().
//
// The function returns the following values:
//
//    - ok: TRUE if the tree can be reordered.
//
func (treeView *TreeView) Reorderable() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_reorderable(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RulesHint gets the setting set by gtk_tree_view_set_rules_hint().
//
// Deprecated: since version 3.14.
//
// The function returns the following values:
//
//    - ok: TRUE if the hint is set.
//
func (treeView *TreeView) RulesHint() bool {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_rules_hint(_arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SearchColumn gets the column searched on by the interactive search code.
//
// The function returns the following values:
//
//    - gint: column the interactive search code searches in.
//
func (treeView *TreeView) SearchColumn() int {
	var _arg0 *C.GtkTreeView // out
	var _cret C.gint         // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_search_column(_arg0)
	runtime.KeepAlive(treeView)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Selection gets the TreeSelection associated with tree_view.
//
// The function returns the following values:
//
//    - treeSelection: TreeSelection object.
//
func (treeView *TreeView) Selection() *TreeSelection {
	var _arg0 *C.GtkTreeView      // out
	var _cret *C.GtkTreeSelection // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_selection(_arg0)
	runtime.KeepAlive(treeView)

	var _treeSelection *TreeSelection // out

	_treeSelection = wrapTreeSelection(coreglib.Take(unsafe.Pointer(_cret)))

	return _treeSelection
}

// VAdjustment gets the Adjustment currently being used for the vertical aspect.
//
// Deprecated: Use gtk_scrollable_get_vadjustment().
//
// The function returns the following values:
//
//    - adjustment object, or NULL if none is currently being used.
//
func (treeView *TreeView) VAdjustment() *Adjustment {
	var _arg0 *C.GtkTreeView   // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C.gtk_tree_view_get_vadjustment(_arg0)
	runtime.KeepAlive(treeView)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// VisibleRect fills visible_rect with the currently-visible region of the
// buffer, in tree coordinates. Convert to bin_window coordinates with
// gtk_tree_view_convert_tree_to_bin_window_coords(). Tree coordinates start at
// 0,0 for row 0 of the tree, and cover the entire scrollable area of the tree.
//
// The function returns the following values:
//
//    - visibleRect: rectangle to fill.
//
func (treeView *TreeView) VisibleRect() *gdk.Rectangle {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_get_visible_rect(_arg0, &_arg1)
	runtime.KeepAlive(treeView)

	var _visibleRect *gdk.Rectangle // out

	_visibleRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _visibleRect
}

// InsertColumn: this inserts the column into the tree_view at position. If
// position is -1, then the column is inserted at the end. If tree_view has
// “fixed_height” mode enabled, then column must have its “sizing” property set
// to be GTK_TREE_VIEW_COLUMN_FIXED.
//
// The function takes the following parameters:
//
//    - column to be inserted.
//    - position to insert column in.
//
// The function returns the following values:
//
//    - gint: number of columns in tree_view after insertion.
//
func (treeView *TreeView) InsertColumn(column *TreeViewColumn, position int) int {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreeViewColumn // out
	var _arg2 C.gint               // out
	var _cret C.gint               // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	_arg2 = C.gint(position)

	_cret = C.gtk_tree_view_insert_column(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)
	runtime.KeepAlive(position)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// InsertColumnWithDataFunc: convenience function that inserts a new column into
// the TreeView with the given cell renderer and a TreeCellDataFunc to set cell
// renderer attributes (normally using data from the model). See also
// gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
// If tree_view has “fixed_height” mode enabled, then the new column will have
// its “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.
//
// The function takes the following parameters:
//
//    - position: position to insert, -1 for append.
//    - title: column title.
//    - cell renderer for column.
//    - fn: function to set attributes of cell renderer.
//
// The function returns the following values:
//
//    - gint: number of columns in the tree view post-insert.
//
func (treeView *TreeView) InsertColumnWithDataFunc(position int, title string, cell CellRendererer, fn TreeCellDataFunc) int {
	var _arg0 *C.GtkTreeView        // out
	var _arg1 C.gint                // out
	var _arg2 *C.gchar              // out
	var _arg3 *C.GtkCellRenderer    // out
	var _arg4 C.GtkTreeCellDataFunc // out
	var _arg5 C.gpointer
	var _arg6 C.GDestroyNotify
	var _cret C.gint // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(position)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GtkCellRenderer)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	_arg4 = (*[0]byte)(C._gotk4_gtk3_TreeCellDataFunc)
	_arg5 = C.gpointer(gbox.Assign(fn))
	_arg6 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_cret = C.gtk_tree_view_insert_column_with_data_func(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(position)
	runtime.KeepAlive(title)
	runtime.KeepAlive(cell)
	runtime.KeepAlive(fn)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MapExpandedRows calls func on all expanded rows.
//
// The function takes the following parameters:
//
//    - fn: function to be called.
//
func (treeView *TreeView) MapExpandedRows(fn TreeViewMappingFunc) {
	var _arg0 *C.GtkTreeView           // out
	var _arg1 C.GtkTreeViewMappingFunc // out
	var _arg2 C.gpointer

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeViewMappingFunc)
	_arg2 = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_arg2))

	C.gtk_tree_view_map_expanded_rows(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(fn)
}

// MoveColumnAfter moves column to be after to base_column. If base_column is
// NULL, then column is placed in the first position.
//
// The function takes the following parameters:
//
//    - column to be moved.
//    - baseColumn (optional) to be moved relative to, or NULL.
//
func (treeView *TreeView) MoveColumnAfter(column, baseColumn *TreeViewColumn) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreeViewColumn // out
	var _arg2 *C.GtkTreeViewColumn // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	if baseColumn != nil {
		_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(baseColumn).Native()))
	}

	C.gtk_tree_view_move_column_after(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)
	runtime.KeepAlive(baseColumn)
}

// RemoveColumn removes column from tree_view.
//
// The function takes the following parameters:
//
//    - column to remove.
//
// The function returns the following values:
//
//    - gint: number of columns in tree_view after removing.
//
func (treeView *TreeView) RemoveColumn(column *TreeViewColumn) int {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreeViewColumn // out
	var _cret C.gint               // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))

	_cret = C.gtk_tree_view_remove_column(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowActivated activates the cell determined by path and column.
//
// The function takes the following parameters:
//
//    - path to be activated.
//    - column to be activated.
//
func (treeView *TreeView) RowActivated(path *TreePath, column *TreeViewColumn) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))

	C.gtk_tree_view_row_activated(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(column)
}

// RowExpanded returns TRUE if the node pointed to by path is expanded in
// tree_view.
//
// The function takes the following parameters:
//
//    - path to test expansion state.
//
// The function returns the following values:
//
//    - ok: TRUE if #path is expanded.
//
func (treeView *TreeView) RowExpanded(path *TreePath) bool {
	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreePath // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C.gtk_tree_view_row_expanded(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ScrollToCell moves the alignments of tree_view to the position specified by
// column and path. If column is NULL, then no horizontal scrolling occurs.
// Likewise, if path is NULL no vertical scrolling occurs. At a minimum, one of
// column or path need to be non-NULL. row_align determines where the row is
// placed, and col_align determines where column is placed. Both are expected to
// be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom
// alignment, 0.5 means center.
//
// If use_align is FALSE, then the alignment arguments are ignored, and the tree
// does the minimum amount of work to scroll the cell onto the screen. This
// means that the cell will be scrolled to the edge closest to its current
// position. If the cell is currently visible on the screen, nothing is done.
//
// This function only works if the model is set, and path is a valid row on the
// model. If the model changes before the tree_view is realized, the centered
// path will be modified to reflect this change.
//
// The function takes the following parameters:
//
//    - path (optional) of the row to move to, or NULL.
//    - column (optional) to move horizontally to, or NULL.
//    - useAlign: whether to use alignment arguments, or FALSE.
//    - rowAlign: vertical alignment of the row specified by path.
//    - colAlign: horizontal alignment of the column specified by column.
//
func (treeView *TreeView) ScrollToCell(path *TreePath, column *TreeViewColumn, useAlign bool, rowAlign, colAlign float32) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out
	var _arg3 C.gboolean           // out
	var _arg4 C.gfloat             // out
	var _arg5 C.gfloat             // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if path != nil {
		_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	}
	if column != nil {
		_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	}
	if useAlign {
		_arg3 = C.TRUE
	}
	_arg4 = C.gfloat(rowAlign)
	_arg5 = C.gfloat(colAlign)

	C.gtk_tree_view_scroll_to_cell(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(column)
	runtime.KeepAlive(useAlign)
	runtime.KeepAlive(rowAlign)
	runtime.KeepAlive(colAlign)
}

// ScrollToPoint scrolls the tree view such that the top-left corner of the
// visible area is tree_x, tree_y, where tree_x and tree_y are specified in tree
// coordinates. The tree_view must be realized before this function is called.
// If it isn't, you probably want to be using gtk_tree_view_scroll_to_cell().
//
// If either tree_x or tree_y are -1, then that direction isn’t scrolled.
//
// The function takes the following parameters:
//
//    - treeX: x coordinate of new top-left pixel of visible area, or -1.
//    - treeY: y coordinate of new top-left pixel of visible area, or -1.
//
func (treeView *TreeView) ScrollToPoint(treeX, treeY int) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gint         // out
	var _arg2 C.gint         // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(treeX)
	_arg2 = C.gint(treeY)

	C.gtk_tree_view_scroll_to_point(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(treeX)
	runtime.KeepAlive(treeY)
}

// SetColumnDragFunction sets a user function for determining where a column may
// be dropped when dragged. This function is called on every column pair in turn
// at the beginning of a column drag to determine where a drop can take place.
// The arguments passed to func are: the tree_view, the TreeViewColumn being
// dragged, the two TreeViewColumn s determining the drop spot, and user_data.
// If either of the TreeViewColumn arguments for the drop spot are NULL, then
// they indicate an edge. If func is set to be NULL, then tree_view reverts to
// the default behavior of allowing all columns to be dropped everywhere.
//
// The function takes the following parameters:
//
//    - fn (optional): function to determine which columns are reorderable, or
//      NULL.
//
func (treeView *TreeView) SetColumnDragFunction(fn TreeViewColumnDropFunc) {
	var _arg0 *C.GtkTreeView              // out
	var _arg1 C.GtkTreeViewColumnDropFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if fn != nil {
		_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeViewColumnDropFunc)
		_arg2 = C.gpointer(gbox.Assign(fn))
		_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	C.gtk_tree_view_set_column_drag_function(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(fn)
}

// SetCursor sets the current keyboard focus to be at path, and selects it. This
// is useful when you want to focus the user’s attention on a particular row. If
// focus_column is not NULL, then focus is given to the column specified by it.
// Additionally, if focus_column is specified, and start_editing is TRUE, then
// editing should be started in the specified cell. This function is often
// followed by gtk_widget_grab_focus (tree_view) in order to give keyboard focus
// to the widget. Please note that editing can only happen when the widget is
// realized.
//
// If path is invalid for model, the current cursor (if any) will be unset and
// the function will return without failing.
//
// The function takes the following parameters:
//
//    - path: TreePath.
//    - focusColumn (optional) or NULL.
//    - startEditing: TRUE if the specified cell should start being edited.
//
func (treeView *TreeView) SetCursor(path *TreePath, focusColumn *TreeViewColumn, startEditing bool) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out
	var _arg3 C.gboolean           // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	if focusColumn != nil {
		_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(focusColumn).Native()))
	}
	if startEditing {
		_arg3 = C.TRUE
	}

	C.gtk_tree_view_set_cursor(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(focusColumn)
	runtime.KeepAlive(startEditing)
}

// SetDestroyCountFunc: this function should almost never be used. It is meant
// for private use by ATK for determining the number of visible children that
// are removed when the user collapses a row, or a row is deleted.
//
// Deprecated: Accessibility does not need the function anymore.
//
// The function takes the following parameters:
//
//    - fn (optional): function to be called when a view row is destroyed, or
//      NULL.
//
func (treeView *TreeView) SetDestroyCountFunc(fn TreeDestroyCountFunc) {
	var _arg0 *C.GtkTreeView            // out
	var _arg1 C.GtkTreeDestroyCountFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if fn != nil {
		_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeDestroyCountFunc)
		_arg2 = C.gpointer(gbox.Assign(fn))
		_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	C.gtk_tree_view_set_destroy_count_func(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(fn)
}

// SetDragDestRow sets the row that is highlighted for feedback. If path is
// NULL, an existing highlight is removed.
//
// The function takes the following parameters:
//
//    - path (optional) of the row to highlight, or NULL.
//    - pos specifies whether to drop before, after or into the row.
//
func (treeView *TreeView) SetDragDestRow(path *TreePath, pos TreeViewDropPosition) {
	var _arg0 *C.GtkTreeView            // out
	var _arg1 *C.GtkTreePath            // out
	var _arg2 C.GtkTreeViewDropPosition // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if path != nil {
		_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	}
	_arg2 = C.GtkTreeViewDropPosition(pos)

	C.gtk_tree_view_set_drag_dest_row(_arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(pos)
}

// SetEnableSearch: if enable_search is set, then the user can type in text to
// search through the tree interactively (this is sometimes called "typeahead
// find").
//
// Note that even if this is FALSE, the user can still initiate a search using
// the “start-interactive-search” key binding.
//
// The function takes the following parameters:
//
//    - enableSearch: TRUE, if the user can search interactively.
//
func (treeView *TreeView) SetEnableSearch(enableSearch bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if enableSearch {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_enable_search(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(enableSearch)
}

// SetExpanderColumn sets the column to draw the expander arrow at. It must be
// in tree_view. If column is NULL, then the expander arrow is always at the
// first visible column.
//
// If you do not want expander arrow to appear in your tree, set the expander
// column to a hidden column.
//
// The function takes the following parameters:
//
//    - column (optional): NULL, or the column to draw the expander arrow at.
//
func (treeView *TreeView) SetExpanderColumn(column *TreeViewColumn) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreeViewColumn // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if column != nil {
		_arg1 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))
	}

	C.gtk_tree_view_set_expander_column(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)
}

// SetHAdjustment sets the Adjustment for the current horizontal aspect.
//
// Deprecated: Use gtk_scrollable_set_hadjustment().
//
// The function takes the following parameters:
//
//    - adjustment (optional) to set, or NULL.
//
func (treeView *TreeView) SetHAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkTreeView   // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if adjustment != nil {
		_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	}

	C.gtk_tree_view_set_hadjustment(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(adjustment)
}

// SetHeadersClickable: allow the column title buttons to be clicked.
//
// The function takes the following parameters:
//
//    - setting: TRUE if the columns are clickable.
//
func (treeView *TreeView) SetHeadersClickable(setting bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_headers_clickable(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(setting)
}

// SetHeadersVisible sets the visibility state of the headers.
//
// The function takes the following parameters:
//
//    - headersVisible: TRUE if the headers are visible.
//
func (treeView *TreeView) SetHeadersVisible(headersVisible bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if headersVisible {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_headers_visible(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(headersVisible)
}

// SetModel sets the model for a TreeView. If the tree_view already has a model
// set, it will remove it before setting the new model. If model is NULL, then
// it will unset the old model.
//
// The function takes the following parameters:
//
//    - model (optional): model.
//
func (treeView *TreeView) SetModel(model TreeModeller) {
	var _arg0 *C.GtkTreeView  // out
	var _arg1 *C.GtkTreeModel // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if model != nil {
		_arg1 = (*C.GtkTreeModel)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}

	C.gtk_tree_view_set_model(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(model)
}

// SetReorderable: this function is a convenience function to allow you to
// reorder models that support the TreeDragSourceIface and the
// TreeDragDestIface. Both TreeStore and ListStore support these. If reorderable
// is TRUE, then the user can reorder the model by dragging and dropping rows.
// The developer can listen to these changes by connecting to the model’s
// TreeModel::row-inserted and TreeModel::row-deleted signals. The reordering is
// implemented by setting up the tree view as a drag source and destination.
// Therefore, drag and drop can not be used in a reorderable view for any other
// purpose.
//
// This function does not give you any degree of control over the order -- any
// reordering is allowed. If more control is needed, you should probably handle
// drag and drop manually.
//
// The function takes the following parameters:
//
//    - reorderable: TRUE, if the tree can be reordered.
//
func (treeView *TreeView) SetReorderable(reorderable bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if reorderable {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_reorderable(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(reorderable)
}

// SetRulesHint sets a hint for the theme to draw even/odd rows in the tree_view
// with different colors, also known as "zebra striping".
//
// This function tells the GTK+ theme that the user interface for your
// application requires users to read across tree rows and associate cells with
// one another.
//
// Do not use it just because you prefer the appearance of the ruled tree;
// that’s a question for the theme. Some themes will draw tree rows in
// alternating colors even when rules are turned off, and users who prefer that
// appearance all the time can choose those themes. You should call this
// function only as a semantic hint to the theme engine that your tree makes
// alternating colors useful from a functional standpoint (since it has lots of
// columns, generally).
//
// Deprecated: since version 3.14.
//
// The function takes the following parameters:
//
//    - setting: TRUE if the tree requires reading across rows.
//
func (treeView *TreeView) SetRulesHint(setting bool) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_tree_view_set_rules_hint(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(setting)
}

// SetSearchColumn sets column as the column where the interactive search code
// should search in for the current model.
//
// If the search column is set, users can use the “start-interactive-search” key
// binding to bring up search popup. The enable-search property controls whether
// simply typing text will also start an interactive search.
//
// Note that column refers to a column of the current model. The search column
// is reset to -1 when the model is changed.
//
// The function takes the following parameters:
//
//    - column of the model to search in, or -1 to disable searching.
//
func (treeView *TreeView) SetSearchColumn(column int) {
	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gint         // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(column)

	C.gtk_tree_view_set_search_column(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(column)
}

// SetSearchEqualFunc sets the compare function for the interactive search
// capabilities; note that somewhat like strcmp() returning 0 for equality
// TreeViewSearchEqualFunc returns FALSE on matches.
//
// The function takes the following parameters:
//
//    - searchEqualFunc: compare function to use during the search.
//
func (treeView *TreeView) SetSearchEqualFunc(searchEqualFunc TreeViewSearchEqualFunc) {
	var _arg0 *C.GtkTreeView               // out
	var _arg1 C.GtkTreeViewSearchEqualFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*[0]byte)(C._gotk4_gtk3_TreeViewSearchEqualFunc)
	_arg2 = C.gpointer(gbox.Assign(searchEqualFunc))
	_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	C.gtk_tree_view_set_search_equal_func(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(searchEqualFunc)
}

// SetVAdjustment sets the Adjustment for the current vertical aspect.
//
// Deprecated: Use gtk_scrollable_set_vadjustment().
//
// The function takes the following parameters:
//
//    - adjustment (optional) to set, or NULL.
//
func (treeView *TreeView) SetVAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkTreeView   // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if adjustment != nil {
		_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	}

	C.gtk_tree_view_set_vadjustment(_arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(adjustment)
}

// UnsetRowsDragDest undoes the effect of
// gtk_tree_view_enable_model_drag_dest(). Calling this method sets
// TreeView:reorderable to FALSE.
func (treeView *TreeView) UnsetRowsDragDest() {
	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_unset_rows_drag_dest(_arg0)
	runtime.KeepAlive(treeView)
}

// UnsetRowsDragSource undoes the effect of
// gtk_tree_view_enable_model_drag_source(). Calling this method sets
// TreeView:reorderable to FALSE.
func (treeView *TreeView) UnsetRowsDragSource() {
	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C.gtk_tree_view_unset_rows_drag_source(_arg0)
	runtime.KeepAlive(treeView)
}

func (treeView *TreeView) columnsChanged() {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.columns_changed

	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C._gotk4_gtk3_TreeView_virtual_columns_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)
}

func (treeView *TreeView) cursorChanged() {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.cursor_changed

	var _arg0 *C.GtkTreeView // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	C._gotk4_gtk3_TreeView_virtual_cursor_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)
}

// The function takes the following parameters:
//
//    - logical
//    - expand
//    - openAll
//
// The function returns the following values:
//
func (treeView *TreeView) expandCollapseCursorRow(logical, expand, openAll bool) bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.expand_collapse_cursor_row

	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out
	var _arg2 C.gboolean     // out
	var _arg3 C.gboolean     // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if logical {
		_arg1 = C.TRUE
	}
	if expand {
		_arg2 = C.TRUE
	}
	if openAll {
		_arg3 = C.TRUE
	}

	_cret = C._gotk4_gtk3_TreeView_virtual_expand_collapse_cursor_row(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(logical)
	runtime.KeepAlive(expand)
	runtime.KeepAlive(openAll)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - step
//    - count
//
// The function returns the following values:
//
func (treeView *TreeView) moveCursor(step MovementStep, count int) bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.move_cursor

	var _arg0 *C.GtkTreeView    // out
	var _arg1 C.GtkMovementStep // out
	var _arg2 C.gint            // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.GtkMovementStep(step)
	_arg2 = C.gint(count)

	_cret = C._gotk4_gtk3_TreeView_virtual_move_cursor(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(step)
	runtime.KeepAlive(count)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// rowActivated activates the cell determined by path and column.
//
// The function takes the following parameters:
//
//    - path to be activated.
//    - column to be activated.
//
func (treeView *TreeView) rowActivated(path *TreePath, column *TreeViewColumn) {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.row_activated

	var _arg0 *C.GtkTreeView       // out
	var _arg1 *C.GtkTreePath       // out
	var _arg2 *C.GtkTreeViewColumn // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))
	_arg2 = (*C.GtkTreeViewColumn)(unsafe.Pointer(coreglib.InternObject(column).Native()))

	C._gotk4_gtk3_TreeView_virtual_row_activated(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(path)
	runtime.KeepAlive(column)
}

// The function takes the following parameters:
//
//    - iter
//    - path
//
func (treeView *TreeView) rowCollapsed(iter *TreeIter, path *TreePath) {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.row_collapsed

	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreeIter // out
	var _arg2 *C.GtkTreePath // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	C._gotk4_gtk3_TreeView_virtual_row_collapsed(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(path)
}

// The function takes the following parameters:
//
//    - iter
//    - path
//
func (treeView *TreeView) rowExpanded(iter *TreeIter, path *TreePath) {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.row_expanded

	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreeIter // out
	var _arg2 *C.GtkTreePath // out

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	C._gotk4_gtk3_TreeView_virtual_row_expanded(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(path)
}

// The function returns the following values:
//
func (treeView *TreeView) selectAll() bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.select_all

	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C._gotk4_gtk3_TreeView_virtual_select_all(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (treeView *TreeView) selectCursorParent() bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.select_cursor_parent

	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C._gotk4_gtk3_TreeView_virtual_select_cursor_parent(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (treeView *TreeView) selectCursorRow(startEditing bool) bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.select_cursor_row

	var _arg0 *C.GtkTreeView // out
	var _arg1 C.gboolean     // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	if startEditing {
		_arg1 = C.TRUE
	}

	_cret = C._gotk4_gtk3_TreeView_virtual_select_cursor_row(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(startEditing)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (treeView *TreeView) startInteractiveSearch() bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.start_interactive_search

	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C._gotk4_gtk3_TreeView_virtual_start_interactive_search(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - iter
//    - path
//
// The function returns the following values:
//
func (treeView *TreeView) testCollapseRow(iter *TreeIter, path *TreePath) bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.test_collapse_row

	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreeIter // out
	var _arg2 *C.GtkTreePath // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C._gotk4_gtk3_TreeView_virtual_test_collapse_row(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(path)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - iter
//    - path
//
// The function returns the following values:
//
func (treeView *TreeView) testExpandRow(iter *TreeIter, path *TreePath) bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.test_expand_row

	var _arg0 *C.GtkTreeView // out
	var _arg1 *C.GtkTreeIter // out
	var _arg2 *C.GtkTreePath // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = (*C.GtkTreeIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg2 = (*C.GtkTreePath)(gextras.StructNative(unsafe.Pointer(path)))

	_cret = C._gotk4_gtk3_TreeView_virtual_test_expand_row(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(path)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (treeView *TreeView) toggleCursorRow() bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.toggle_cursor_row

	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C._gotk4_gtk3_TreeView_virtual_toggle_cursor_row(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (treeView *TreeView) unselectAll() bool {
	gclass := (*C.GtkTreeViewClass)(coreglib.PeekParentClass(treeView))
	fnarg := gclass.unselect_all

	var _arg0 *C.GtkTreeView // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))

	_cret = C._gotk4_gtk3_TreeView_virtual_unselect_all(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(treeView)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TreeViewClass: instance of this type is always passed by reference.
type TreeViewClass struct {
	*treeViewClass
}

// treeViewClass is the struct that's finalized.
type treeViewClass struct {
	native *C.GtkTreeViewClass
}

func (t *TreeViewClass) ParentClass() *ContainerClass {
	valptr := &t.native.parent_class
	var _v *ContainerClass // out
	_v = (*ContainerClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
