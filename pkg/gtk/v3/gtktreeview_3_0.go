// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// IsBlankAtPos: determine whether the point (x, y) in tree_view is blank, that
// is no cell content nor an expander arrow is drawn at the location. If so, the
// location can be considered as the background. You might wish to take special
// action on clicks on the background, such as clearing a current selection,
// having a custom context menu or starting rubber banding.
//
// The x and y coordinate that are provided must be relative to bin_window
// coordinates. That is, x and y must come from an event on tree_view where
// event->window == gtk_tree_view_get_bin_window ().
//
// For converting widget coordinates (eg. the ones you get from
// GtkWidget::query-tooltip), please see
// gtk_tree_view_convert_widget_to_bin_window_coords().
//
// The path, column, cell_x and cell_y arguments will be filled in likewise as
// for gtk_tree_view_get_path_at_pos(). Please see
// gtk_tree_view_get_path_at_pos() for more information.
//
// The function takes the following parameters:
//
//    - x position to be identified (relative to bin_window).
//    - y position to be identified (relative to bin_window).
//
// The function returns the following values:
//
//    - path (optional): pointer to a TreePath pointer to be filled in, or NULL.
//    - column (optional): pointer to a TreeViewColumn pointer to be filled in,
//      or NULL.
//    - cellX (optional): pointer where the X coordinate relative to the cell can
//      be placed, or NULL.
//    - cellY (optional): pointer where the Y coordinate relative to the cell can
//      be placed, or NULL.
//    - ok: TRUE if the area at the given coordinates is blank, FALSE otherwise.
//
func (treeView *TreeView) IsBlankAtPos(x, y int) (path *TreePath, column *TreeViewColumn, cellX, cellY int, ok bool) {
	var _arg0 *C.GtkTreeView       // out
	var _arg1 C.gint               // out
	var _arg2 C.gint               // out
	var _arg3 *C.GtkTreePath       // in
	var _arg4 *C.GtkTreeViewColumn // in
	var _arg5 C.gint               // in
	var _arg6 C.gint               // in
	var _cret C.gboolean           // in

	_arg0 = (*C.GtkTreeView)(unsafe.Pointer(coreglib.InternObject(treeView).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_tree_view_is_blank_at_pos(_arg0, _arg1, _arg2, &_arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(treeView)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _path *TreePath         // out
	var _column *TreeViewColumn // out
	var _cellX int              // out
	var _cellY int              // out
	var _ok bool                // out

	if _arg3 != nil {
		_path = (*TreePath)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_path)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_tree_path_free((*C.GtkTreePath)(intern.C))
			},
		)
	}
	if _arg4 != nil {
		_column = wrapTreeViewColumn(coreglib.Take(unsafe.Pointer(_arg4)))
	}
	_cellX = int(_arg5)
	_cellY = int(_arg6)
	if _cret != 0 {
		_ok = true
	}

	return _path, _column, _cellX, _cellY, _ok
}
