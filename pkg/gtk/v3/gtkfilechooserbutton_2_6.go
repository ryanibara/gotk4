// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewFileChooserButton creates a new file-selecting button widget.
//
// The function takes the following parameters:
//
//    - title of the browse dialog.
//    - action: open mode for the widget.
//
// The function returns the following values:
//
//    - fileChooserButton: new button widget.
//
func NewFileChooserButton(title string, action FileChooserAction) *FileChooserButton {
	var _arg1 *C.gchar               // out
	var _arg2 C.GtkFileChooserAction // out
	var _cret *C.GtkWidget           // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkFileChooserAction(action)

	_cret = C.gtk_file_chooser_button_new(_arg1, _arg2)
	runtime.KeepAlive(title)
	runtime.KeepAlive(action)

	var _fileChooserButton *FileChooserButton // out

	_fileChooserButton = wrapFileChooserButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _fileChooserButton
}

// NewFileChooserButtonWithDialog creates a FileChooserButton widget which uses
// dialog as its file-picking window.
//
// Note that dialog must be a Dialog (or subclass) which implements the
// FileChooser interface and must not have GTK_DIALOG_DESTROY_WITH_PARENT set.
//
// Also note that the dialog needs to have its confirmative button added with
// response GTK_RESPONSE_ACCEPT or GTK_RESPONSE_OK in order for the button to
// take over the file selected in the dialog.
//
// The function takes the following parameters:
//
//    - dialog: widget to use as dialog.
//
// The function returns the following values:
//
//    - fileChooserButton: new button widget.
//
func NewFileChooserButtonWithDialog(dialog *Dialog) *FileChooserButton {
	var _arg1 *C.GtkWidget // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(dialog).Native()))

	_cret = C.gtk_file_chooser_button_new_with_dialog(_arg1)
	runtime.KeepAlive(dialog)

	var _fileChooserButton *FileChooserButton // out

	_fileChooserButton = wrapFileChooserButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _fileChooserButton
}

// Title retrieves the title of the browse dialog used by button. The returned
// value should not be modified or freed.
//
// The function returns the following values:
//
//    - utf8: pointer to the browse dialog’s title.
//
func (button *FileChooserButton) Title() string {
	var _arg0 *C.GtkFileChooserButton // out
	var _cret *C.gchar                // in

	_arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_file_chooser_button_get_title(_arg0)
	runtime.KeepAlive(button)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// WidthChars retrieves the width in characters of the button widget’s entry
// and/or label.
//
// The function returns the following values:
//
//    - gint: integer width (in characters) that the button will use to size
//      itself.
//
func (button *FileChooserButton) WidthChars() int {
	var _arg0 *C.GtkFileChooserButton // out
	var _cret C.gint                  // in

	_arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	_cret = C.gtk_file_chooser_button_get_width_chars(_arg0)
	runtime.KeepAlive(button)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetTitle modifies the title of the browse dialog used by button.
//
// The function takes the following parameters:
//
//    - title: new browse dialog title.
//
func (button *FileChooserButton) SetTitle(title string) {
	var _arg0 *C.GtkFileChooserButton // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_button_set_title(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(title)
}

// SetWidthChars sets the width (in characters) that button will use to n_chars.
//
// The function takes the following parameters:
//
//    - nChars: new width, in characters.
//
func (button *FileChooserButton) SetWidthChars(nChars int) {
	var _arg0 *C.GtkFileChooserButton // out
	var _arg1 C.gint                  // out

	_arg0 = (*C.GtkFileChooserButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))
	_arg1 = C.gint(nChars)

	C.gtk_file_chooser_button_set_width_chars(_arg0, _arg1)
	runtime.KeepAlive(button)
	runtime.KeepAlive(nChars)
}
