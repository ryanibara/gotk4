// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// ShowOtherLocations returns the value previously set with
// gtk_places_sidebar_set_show_other_locations().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display an “Other Locations” item.
//
func (sidebar *PlacesSidebar) ShowOtherLocations() bool {
	var _arg0 *C.GtkPlacesSidebar // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))

	_cret = C.gtk_places_sidebar_get_show_other_locations(_arg0)
	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowRecent returns the value previously set with
// gtk_places_sidebar_set_show_recent().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a builtin shortcut for recent files.
//
func (sidebar *PlacesSidebar) ShowRecent() bool {
	var _arg0 *C.GtkPlacesSidebar // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))

	_cret = C.gtk_places_sidebar_get_show_recent(_arg0)
	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowTrash returns the value previously set with
// gtk_places_sidebar_set_show_trash().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a “Trash” item.
//
func (sidebar *PlacesSidebar) ShowTrash() bool {
	var _arg0 *C.GtkPlacesSidebar // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))

	_cret = C.gtk_places_sidebar_get_show_trash(_arg0)
	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDropTargetsVisible: make the GtkPlacesSidebar show drop targets, so it can
// show the available drop targets and a "new bookmark" row. This improves the
// Drag-and-Drop experience of the user and allows applications to show all
// available drop targets at once.
//
// This needs to be called when the application is aware of an ongoing drag that
// might target the sidebar. The drop-targets-visible state will be unset
// automatically if the drag finishes in the GtkPlacesSidebar. You only need to
// unset the state when the drag ends on some other widget on your application.
//
// The function takes the following parameters:
//
//    - visible: whether to show the valid targets or not.
//    - context: drag context used to ask the source about the action that wants
//      to perform, so hints are more accurate.
//
func (sidebar *PlacesSidebar) SetDropTargetsVisible(visible bool, context *gdk.DragContext) {
	var _arg0 *C.GtkPlacesSidebar // out
	var _arg1 C.gboolean          // out
	var _arg2 *C.GdkDragContext   // out

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if visible {
		_arg1 = C.TRUE
	}
	_arg2 = (*C.GdkDragContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_places_sidebar_set_drop_targets_visible(_arg0, _arg1, _arg2)
	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(visible)
	runtime.KeepAlive(context)
}

// SetShowOtherLocations sets whether the sidebar should show an item for the
// application to show an Other Locations view; this is off by default. When set
// to TRUE, persistent devices such as hard drives are hidden, otherwise they
// are shown in the sidebar. An application may want to turn this on if it
// implements a way for the user to see and interact with drives and network
// servers directly.
//
// If you enable this, you should connect to the
// PlacesSidebar::show-other-locations signal.
//
// The function takes the following parameters:
//
//    - showOtherLocations: whether to show an item for the Other Locations view.
//
func (sidebar *PlacesSidebar) SetShowOtherLocations(showOtherLocations bool) {
	var _arg0 *C.GtkPlacesSidebar // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showOtherLocations {
		_arg1 = C.TRUE
	}

	C.gtk_places_sidebar_set_show_other_locations(_arg0, _arg1)
	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showOtherLocations)
}

// SetShowRecent sets whether the sidebar should show an item for recent files.
// The default value for this option is determined by the desktop environment,
// but this function can be used to override it on a per-application basis.
//
// The function takes the following parameters:
//
//    - showRecent: whether to show an item for recent files.
//
func (sidebar *PlacesSidebar) SetShowRecent(showRecent bool) {
	var _arg0 *C.GtkPlacesSidebar // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showRecent {
		_arg1 = C.TRUE
	}

	C.gtk_places_sidebar_set_show_recent(_arg0, _arg1)
	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showRecent)
}

// SetShowTrash sets whether the sidebar should show an item for the Trash
// location.
//
// The function takes the following parameters:
//
//    - showTrash: whether to show an item for the Trash location.
//
func (sidebar *PlacesSidebar) SetShowTrash(showTrash bool) {
	var _arg0 *C.GtkPlacesSidebar // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkPlacesSidebar)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showTrash {
		_arg1 = C.TRUE
	}

	C.gtk_places_sidebar_set_show_trash(_arg0, _arg1)
	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showTrash)
}
