// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// OverwriteMode gets the value set by gtk_entry_set_overwrite_mode().
//
// The function returns the following values:
//
//    - ok: whether the text is overwritten when typing.
//
func (entry *Entry) OverwriteMode() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_overwrite_mode(_arg0)
	runtime.KeepAlive(entry)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TextLength retrieves the current length of the text in entry.
//
// This is equivalent to getting entry's EntryBuffer and calling
// gtk_entry_buffer_get_length() on it.
//
// The function returns the following values:
//
//    - guint16: current number of characters in Entry, or 0 if there are none.
//
func (entry *Entry) TextLength() uint16 {
	var _arg0 *C.GtkEntry // out
	var _cret C.guint16   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_text_length(_arg0)
	runtime.KeepAlive(entry)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// SetOverwriteMode sets whether the text is overwritten when typing in the
// Entry.
//
// The function takes the following parameters:
//
//    - overwrite: new value.
//
func (entry *Entry) SetOverwriteMode(overwrite bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if overwrite {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_overwrite_mode(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(overwrite)
}
