// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeWidgetAccessible = coreglib.Type(C.gtk_widget_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWidgetAccessible, F: marshalWidgetAccessible},
	})
}

// WidgetAccessibleOverrider contains methods that are overridable.
type WidgetAccessibleOverrider interface {
}

type WidgetAccessible struct {
	_ [0]func() // equal guard
	Accessible

	atk.Component
}

var (
	_ coreglib.Objector = (*WidgetAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeWidgetAccessible,
		GoType:    reflect.TypeOf((*WidgetAccessible)(nil)),
		InitClass: initClassWidgetAccessible,
	})
}

func initClassWidgetAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitWidgetAccessible(*WidgetAccessibleClass) }); ok {
		klass := (*WidgetAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitWidgetAccessible(klass)
	}
}

func wrapWidgetAccessible(obj *coreglib.Object) *WidgetAccessible {
	return &WidgetAccessible{
		Accessible: Accessible{
			AtkObject: atk.AtkObject{
				Object: obj,
			},
		},
		Component: atk.Component{
			Object: obj,
		},
	}
}

func marshalWidgetAccessible(p uintptr) (interface{}, error) {
	return wrapWidgetAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WidgetAccessibleClass: instance of this type is always passed by reference.
type WidgetAccessibleClass struct {
	*widgetAccessibleClass
}

// widgetAccessibleClass is the struct that's finalized.
type widgetAccessibleClass struct {
	native *C.GtkWidgetAccessibleClass
}

func (w *WidgetAccessibleClass) ParentClass() *AccessibleClass {
	valptr := &w.native.parent_class
	var v *AccessibleClass // out
	v = (*AccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
