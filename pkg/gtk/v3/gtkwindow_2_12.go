// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Opacity fetches the requested opacity for this window. See
// gtk_window_set_opacity().
//
// Deprecated: Use gtk_widget_get_opacity instead.
//
// The function returns the following values:
//
//    - gdouble: requested opacity for this window.
//
func (window *Window) Opacity() float64 {
	var _arg0 *C.GtkWindow // out
	var _cret C.gdouble    // in

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gtk_window_get_opacity(_arg0)
	runtime.KeepAlive(window)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// SetOpacity: request the windowing system to make window partially
// transparent, with opacity 0 being fully transparent and 1 fully opaque.
// (Values of the opacity parameter are clamped to the [0,1] range.) On X11 this
// has any effect only on X screens with a compositing manager running. See
// gtk_widget_is_composited(). On Windows it should work always.
//
// Note that setting a windowâ€™s opacity after the window has been shown causes
// it to flicker once on Windows.
//
// Deprecated: Use gtk_widget_set_opacity instead.
//
// The function takes the following parameters:
//
//    - opacity: desired opacity, between 0 and 1.
//
func (window *Window) SetOpacity(opacity float64) {
	var _arg0 *C.GtkWindow // out
	var _arg1 C.gdouble    // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gdouble(opacity)

	C.gtk_window_set_opacity(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(opacity)
}

// SetStartupID: startup notification identifiers are used by desktop
// environment to track application startup, to provide user feedback and other
// features. This function changes the corresponding property on the underlying
// GdkWindow. Normally, startup identifier is managed automatically and you
// should only use this function in special cases like transferring focus from
// other processes. You should use this function before calling
// gtk_window_present() or any equivalent function generating a window map
// event.
//
// This function is only useful on X11, not with other GTK+ targets.
//
// The function takes the following parameters:
//
//    - startupId: string with startup-notification identifier.
//
func (window *Window) SetStartupID(startupId string) {
	var _arg0 *C.GtkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GtkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(startupId)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_window_set_startup_id(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(startupId)
}
