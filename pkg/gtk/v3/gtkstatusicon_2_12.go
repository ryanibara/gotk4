// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Screen returns the Screen associated with status_icon.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, as
// notifications are managed by the platform.
//
// The function returns the following values:
//
//    - screen: Screen.
//
func (statusIcon *StatusIcon) Screen() *gdk.Screen {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.GdkScreen     // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_screen(_arg0)
	runtime.KeepAlive(statusIcon)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// SetScreen sets the Screen where status_icon is displayed; if the icon is
// already mapped, it will be unmapped, and then remapped on the new screen.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, as GTK
// typically only has one Screen and notifications are managed by the platform.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func (statusIcon *StatusIcon) SetScreen(screen *gdk.Screen) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.GdkScreen     // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	C.gtk_status_icon_set_screen(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(screen)
}
