// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gint _gotk4_gtk3_PlacesSidebar_ConnectDragActionAsk(gpointer, gint, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectMount(gpointer, GMountOperation*, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectPopulatePopup(gpointer, GtkWidget*, GFile*, GVolume*, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectShowConnectToServer(gpointer, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectShowEnterLocation(gpointer, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectShowErrorMessage(gpointer, gchar*, gchar*, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectShowOtherLocations(gpointer, guintptr);
// extern void _gotk4_gtk3_PlacesSidebar_ConnectUnmount(gpointer, GMountOperation*, guintptr);
import "C"

// glib.Type values for gtkplacessidebar.go.
var (
	GTypePlacesOpenFlags = coreglib.Type(C.gtk_places_open_flags_get_type())
	GTypePlacesSidebar   = coreglib.Type(C.gtk_places_sidebar_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypePlacesOpenFlags, F: marshalPlacesOpenFlags},
		{T: GTypePlacesSidebar, F: marshalPlacesSidebar},
	})
}

// PlacesOpenFlags: these flags serve two purposes. First, the application can
// call gtk_places_sidebar_set_open_flags() using these flags as a bitmask. This
// tells the sidebar that the application is able to open folders selected from
// the sidebar in various ways, for example, in new tabs or in new windows in
// addition to the normal mode.
//
// Second, when one of these values gets passed back to the application in the
// PlacesSidebar::open-location signal, it means that the application should
// open the selected location in the normal way, in a new tab, or in a new
// window. The sidebar takes care of determining the desired way to open the
// location, based on the modifier keys that the user is pressing at the time
// the selection is made.
//
// If the application never calls gtk_places_sidebar_set_open_flags(), then the
// sidebar will only use K_PLACES_OPEN_NORMAL in the
// PlacesSidebar::open-location signal. This is the default mode of operation.
type PlacesOpenFlags C.guint

const (
	// PlacesOpenNormal: this is the default mode that PlacesSidebar uses if no
	// other flags are specified. It indicates that the calling application
	// should open the selected location in the normal way, for example, in the
	// folder view beside the sidebar.
	PlacesOpenNormal PlacesOpenFlags = 0b1
	// PlacesOpenNewTab: when passed to gtk_places_sidebar_set_open_flags(),
	// this indicates that the application can open folders selected from the
	// sidebar in new tabs. This value will be passed to the
	// PlacesSidebar::open-location signal when the user selects that a location
	// be opened in a new tab instead of in the standard fashion.
	PlacesOpenNewTab PlacesOpenFlags = 0b10
	// PlacesOpenNewWindow: similar to GTK_PLACES_OPEN_NEW_TAB, but indicates
	// that the application can open folders in new windows.
	PlacesOpenNewWindow PlacesOpenFlags = 0b100
)

func marshalPlacesOpenFlags(p uintptr) (interface{}, error) {
	return PlacesOpenFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for PlacesOpenFlags.
func (p PlacesOpenFlags) String() string {
	if p == 0 {
		return "PlacesOpenFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(53)

	for p != 0 {
		next := p & (p - 1)
		bit := p - next

		switch bit {
		case PlacesOpenNormal:
			builder.WriteString("Normal|")
		case PlacesOpenNewTab:
			builder.WriteString("NewTab|")
		case PlacesOpenNewWindow:
			builder.WriteString("NewWindow|")
		default:
			builder.WriteString(fmt.Sprintf("PlacesOpenFlags(0b%b)|", bit))
		}

		p = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if p contains other.
func (p PlacesOpenFlags) Has(other PlacesOpenFlags) bool {
	return (p & other) == other
}

// PlacesSidebarOverrider contains methods that are overridable.
type PlacesSidebarOverrider interface {
}

// PlacesSidebar is a widget that displays a list of frequently-used places in
// the file system: the user’s home directory, the user’s bookmarks, and volumes
// and drives. This widget is used as a sidebar in FileChooser and may be used
// by file managers and similar programs.
//
// The places sidebar displays drives and volumes, and will automatically mount
// or unmount them when the user selects them.
//
// Applications can hook to various signals in the places sidebar to customize
// its behavior. For example, they can add extra commands to the context menu of
// the sidebar.
//
// While bookmarks are completely in control of the user, the places sidebar
// also allows individual applications to provide extra shortcut folders that
// are unique to each application. For example, a Paint program may want to add
// a shortcut for a Clipart folder. You can do this with
// gtk_places_sidebar_add_shortcut().
//
// To make use of the places sidebar, an application at least needs to connect
// to the PlacesSidebar::open-location signal. This is emitted when the user
// selects in the sidebar a location to open. The application should also call
// gtk_places_sidebar_set_location() when it changes the currently-viewed
// location.
//
//
// CSS nodes
//
// GtkPlacesSidebar uses a single CSS node with name placessidebar and style
// class .sidebar.
//
// Among the children of the places sidebar, the following style classes can be
// used:
//
// - .sidebar-new-bookmark-row for the 'Add new bookmark' row
//
// - .sidebar-placeholder-row for a row that is a placeholder
//
// - .has-open-popup when a popup is open for a row.
type PlacesSidebar struct {
	_ [0]func() // equal guard
	ScrolledWindow
}

var (
	_ Binner = (*PlacesSidebar)(nil)
)

func classInitPlacesSidebarrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapPlacesSidebar(obj *coreglib.Object) *PlacesSidebar {
	return &PlacesSidebar{
		ScrolledWindow: ScrolledWindow{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalPlacesSidebar(p uintptr) (interface{}, error) {
	return wrapPlacesSidebar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_PlacesSidebar_ConnectDragActionAsk
func _gotk4_gtk3_PlacesSidebar_ConnectDragActionAsk(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) (cret C.gint) {
	var f func(actions int) (gint int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(actions int) (gint int))
	}

	var _actions int // out

	_actions = int(arg1)

	gint := f(_actions)

	cret = C.gint(gint)

	return cret
}

// ConnectDragActionAsk places sidebar emits this signal when it needs to ask
// the application to pop up a menu to ask the user for which drag action to
// perform.
func (sidebar *PlacesSidebar) ConnectDragActionAsk(f func(actions int) (gint int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "drag-action-ask", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectDragActionAsk), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectMount
func _gotk4_gtk3_PlacesSidebar_ConnectMount(arg0 C.gpointer, arg1 *C.GMountOperation, arg2 C.guintptr) {
	var f func(mountOperation *gio.MountOperation)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(mountOperation *gio.MountOperation))
	}

	var _mountOperation *gio.MountOperation // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_mountOperation = &gio.MountOperation{
			Object: obj,
		}
	}

	f(_mountOperation)
}

// ConnectMount places sidebar emits this signal when it starts a new operation
// because the user clicked on some location that needs mounting. In this way
// the application using the PlacesSidebar can track the progress of the
// operation and, for example, show a notification.
func (sidebar *PlacesSidebar) ConnectMount(f func(mountOperation *gio.MountOperation)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "mount", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectMount), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectPopulatePopup
func _gotk4_gtk3_PlacesSidebar_ConnectPopulatePopup(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 *C.GFile, arg3 *C.GVolume, arg4 C.guintptr) {
	var f func(container Widgetter, selectedItem gio.Filer, selectedVolume gio.Volumer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(container Widgetter, selectedItem gio.Filer, selectedVolume gio.Volumer))
	}

	var _container Widgetter        // out
	var _selectedItem gio.Filer     // out
	var _selectedVolume gio.Volumer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_container = rv
	}
	if arg2 != nil {
		{
			objptr := unsafe.Pointer(arg2)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.Filer)
				return ok
			})
			rv, ok := casted.(gio.Filer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
			}
			_selectedItem = rv
		}
	}
	if arg3 != nil {
		{
			objptr := unsafe.Pointer(arg3)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.Volumer)
				return ok
			})
			rv, ok := casted.(gio.Volumer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Volumer")
			}
			_selectedVolume = rv
		}
	}

	f(_container, _selectedItem, _selectedVolume)
}

// ConnectPopulatePopup places sidebar emits this signal when the user invokes a
// contextual popup on one of its items. In the signal handler, the application
// may add extra items to the menu as appropriate. For example, a file manager
// may want to add a "Properties" command to the menu.
//
// It is not necessary to store the selected_item for each menu item; during
// their callbacks, the application can use gtk_places_sidebar_get_location() to
// get the file to which the item refers.
//
// The selected_item argument may be NULL in case the selection refers to a
// volume. In this case, selected_volume will be non-NULL. In this case, the
// calling application will have to g_object_ref() the selected_volume and keep
// it around to use it in the callback.
//
// The container and all its contents are destroyed after the user dismisses the
// popup. The popup is re-created (and thus, this signal is emitted) every time
// the user activates the contextual menu.
//
// Before 3.18, the container always was a Menu, and you were expected to add
// your items as MenuItems. Since 3.18, the popup may be implemented as a
// Popover, in which case container will be something else, e.g. a Box, to which
// you may add ModelButtons or other widgets, such as Entries, SpinButtons, etc.
// If your application can deal with this situation, you can set
// PlacesSidebar::populate-all to TRUE to request that this signal is emitted
// for populating popovers as well.
func (sidebar *PlacesSidebar) ConnectPopulatePopup(f func(container Widgetter, selectedItem gio.Filer, selectedVolume gio.Volumer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectPopulatePopup), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectShowConnectToServer
func _gotk4_gtk3_PlacesSidebar_ConnectShowConnectToServer(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectShowConnectToServer places sidebar emits this signal when it needs the
// calling application to present an way to connect directly to a network
// server. For example, the application may bring up a dialog box asking for a
// URL like "sftp://ftp.example.com". It is up to the application to create the
// corresponding mount by using, for example, g_file_mount_enclosing_volume().
func (sidebar *PlacesSidebar) ConnectShowConnectToServer(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "show-connect-to-server", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectShowConnectToServer), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectShowEnterLocation
func _gotk4_gtk3_PlacesSidebar_ConnectShowEnterLocation(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectShowEnterLocation places sidebar emits this signal when it needs the
// calling application to present an way to directly enter a location. For
// example, the application may bring up a dialog box asking for a URL like
// "http://http.example.com".
func (sidebar *PlacesSidebar) ConnectShowEnterLocation(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "show-enter-location", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectShowEnterLocation), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectShowErrorMessage
func _gotk4_gtk3_PlacesSidebar_ConnectShowErrorMessage(arg0 C.gpointer, arg1 *C.gchar, arg2 *C.gchar, arg3 C.guintptr) {
	var f func(primary, secondary string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(primary, secondary string))
	}

	var _primary string   // out
	var _secondary string // out

	_primary = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_secondary = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	f(_primary, _secondary)
}

// ConnectShowErrorMessage places sidebar emits this signal when it needs the
// calling application to present an error message. Most of these messages refer
// to mounting or unmounting media, for example, when a drive cannot be started
// for some reason.
func (sidebar *PlacesSidebar) ConnectShowErrorMessage(f func(primary, secondary string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "show-error-message", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectShowErrorMessage), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectShowOtherLocations
func _gotk4_gtk3_PlacesSidebar_ConnectShowOtherLocations(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectShowOtherLocations places sidebar emits this signal when it needs the
// calling application to present a way to show other locations e.g. drives and
// network access points. For example, the application may bring up a page
// showing persistent volumes and discovered network addresses.
func (sidebar *PlacesSidebar) ConnectShowOtherLocations(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "show-other-locations", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectShowOtherLocations), f)
}

//export _gotk4_gtk3_PlacesSidebar_ConnectUnmount
func _gotk4_gtk3_PlacesSidebar_ConnectUnmount(arg0 C.gpointer, arg1 *C.GMountOperation, arg2 C.guintptr) {
	var f func(mountOperation *gio.MountOperation)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(mountOperation *gio.MountOperation))
	}

	var _mountOperation *gio.MountOperation // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_mountOperation = &gio.MountOperation{
			Object: obj,
		}
	}

	f(_mountOperation)
}

// ConnectUnmount places sidebar emits this signal when it starts a new
// operation because the user for example ejected some drive or unmounted a
// mount. In this way the application using the PlacesSidebar can track the
// progress of the operation and, for example, show a notification.
func (sidebar *PlacesSidebar) ConnectUnmount(f func(mountOperation *gio.MountOperation)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(sidebar, "unmount", false, unsafe.Pointer(C._gotk4_gtk3_PlacesSidebar_ConnectUnmount), f)
}

// NewPlacesSidebar creates a new PlacesSidebar widget.
//
// The application should connect to at least the PlacesSidebar::open-location
// signal to be notified when the user makes a selection in the sidebar.
//
// The function returns the following values:
//
//    - placesSidebar: newly created PlacesSidebar.
//
func NewPlacesSidebar() *PlacesSidebar {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("new_PlacesSidebar", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _placesSidebar *PlacesSidebar // out

	_placesSidebar = wrapPlacesSidebar(coreglib.Take(unsafe.Pointer(_cret)))

	return _placesSidebar
}

// AddShortcut applications may want to present some folders in the places
// sidebar if they could be immediately useful to users. For example, a drawing
// program could add a “/usr/share/clipart” location when the sidebar is being
// used in an “Insert Clipart” dialog box.
//
// This function adds the specified location to a special place for immutable
// shortcuts. The shortcuts are application-specific; they are not shared across
// applications, and they are not persistent. If this function is called
// multiple times with different locations, then they are added to the sidebar’s
// list in the same order as the function is called.
//
// The function takes the following parameters:
//
//    - location to add as an application-specific shortcut.
//
func (sidebar *PlacesSidebar) AddShortcut(location gio.Filer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(location).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("add_shortcut", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(location)
}

// LocalOnly returns the value previously set with
// gtk_places_sidebar_set_local_only().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will only show local files.
//
func (sidebar *PlacesSidebar) LocalOnly() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_local_only", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Location gets the currently selected location in the sidebar. This can be
// NULL when nothing is selected, for example, when
// gtk_places_sidebar_set_location() has been called with a location that is not
// among the sidebar’s list of places to show.
//
// You can use this function to get the selection in the sidebar. Also, if you
// connect to the PlacesSidebar::populate-popup signal, you can use this
// function to get the location that is being referred to during the callbacks
// for your menu items.
//
// The function returns the following values:
//
//    - file (optional) with the selected location, or NULL if nothing is
//      visually selected.
//
func (sidebar *PlacesSidebar) Location() *gio.File {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_location", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _file *gio.File // out

	if _cret != nil {
		{
			obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
			_file = &gio.File{
				Object: obj,
			}
		}
	}

	return _file
}

// NthBookmark: this function queries the bookmarks added by the user to the
// places sidebar, and returns one of them. This function is used by FileChooser
// to implement the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the
// cooresponding bookmark.
//
// The function takes the following parameters:
//
//    - n: index of the bookmark to query.
//
// The function returns the following values:
//
//    - file (optional): bookmark specified by the index n, or NULL if no such
//      index exist. Note that the indices start at 0, even though the file
//      chooser starts them with the keyboard shortcut "Alt-1".
//
func (sidebar *PlacesSidebar) NthBookmark(n int) *gio.File {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.gint  // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	_arg1 = C.gint(n)
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_nth_bookmark", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(n)

	var _file *gio.File // out

	if _cret != nil {
		{
			obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
			_file = &gio.File{
				Object: obj,
			}
		}
	}

	return _file
}

// ShowConnectToServer returns the value previously set with
// gtk_places_sidebar_set_show_connect_to_server()
//
// Deprecated: It is recommended to group this functionality with the drives and
// network location under the new 'Other Location' item.
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a “Connect to Server” item.
//
func (sidebar *PlacesSidebar) ShowConnectToServer() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_connect_to_server", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowDesktop returns the value previously set with
// gtk_places_sidebar_set_show_desktop().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a builtin shortcut to the desktop
//      folder.
//
func (sidebar *PlacesSidebar) ShowDesktop() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_desktop", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowEnterLocation returns the value previously set with
// gtk_places_sidebar_set_show_enter_location().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display an “Enter Location” item.
//
func (sidebar *PlacesSidebar) ShowEnterLocation() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_enter_location", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowOtherLocations returns the value previously set with
// gtk_places_sidebar_set_show_other_locations().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display an “Other Locations” item.
//
func (sidebar *PlacesSidebar) ShowOtherLocations() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_other_locations", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowRecent returns the value previously set with
// gtk_places_sidebar_set_show_recent().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a builtin shortcut for recent files.
//
func (sidebar *PlacesSidebar) ShowRecent() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_recent", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowStarredLocation returns the value previously set with
// gtk_places_sidebar_set_show_starred_location().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a Starred item.
//
func (sidebar *PlacesSidebar) ShowStarredLocation() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_starred_location", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowTrash returns the value previously set with
// gtk_places_sidebar_set_show_trash().
//
// The function returns the following values:
//
//    - ok: TRUE if the sidebar will display a “Trash” item.
//
func (sidebar *PlacesSidebar) ShowTrash() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("get_show_trash", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ListShortcuts gets the list of shortcuts.
//
// The function returns the following values:
//
//    - sList: A List of #GFile of the locations that have been added as
//      application-specific shortcuts with gtk_places_sidebar_add_shortcut(). To
//      free this list, you can use
//
//         g_slist_free_full (list, (GDestroyNotify) g_object_unref);.
//
func (sidebar *PlacesSidebar) ListShortcuts() []*gio.File {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("list_shortcuts", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(sidebar)

	var _sList []*gio.File // out

	_sList = make([]*gio.File, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *gio.File // out
		{
			obj := coreglib.AssumeOwnership(unsafe.Pointer(src))
			dst = &gio.File{
				Object: obj,
			}
		}
		_sList = append(_sList, dst)
	})

	return _sList
}

// RemoveShortcut removes an application-specific shortcut that has been
// previously been inserted with gtk_places_sidebar_add_shortcut(). If the
// location is not a shortcut in the sidebar, then nothing is done.
//
// The function takes the following parameters:
//
//    - location to remove.
//
func (sidebar *PlacesSidebar) RemoveShortcut(location gio.Filer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(location).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("remove_shortcut", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(location)
}

// SetDropTargetsVisible: make the GtkPlacesSidebar show drop targets, so it can
// show the available drop targets and a "new bookmark" row. This improves the
// Drag-and-Drop experience of the user and allows applications to show all
// available drop targets at once.
//
// This needs to be called when the application is aware of an ongoing drag that
// might target the sidebar. The drop-targets-visible state will be unset
// automatically if the drag finishes in the GtkPlacesSidebar. You only need to
// unset the state when the drag ends on some other widget on your application.
//
// The function takes the following parameters:
//
//    - visible: whether to show the valid targets or not.
//    - context: drag context used to ask the source about the action that wants
//      to perform, so hints are more accurate.
//
func (sidebar *PlacesSidebar) SetDropTargetsVisible(visible bool, context *gdk.DragContext) {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out
	var _arg2 *C.void    // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if visible {
		_arg1 = C.TRUE
	}
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1
	*(*bool)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_drop_targets_visible", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(visible)
	runtime.KeepAlive(context)
}

// SetLocalOnly sets whether the sidebar should only show local files.
//
// The function takes the following parameters:
//
//    - localOnly: whether to show only local files.
//
func (sidebar *PlacesSidebar) SetLocalOnly(localOnly bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if localOnly {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_local_only", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(localOnly)
}

// SetLocation sets the location that is being shown in the widgets surrounding
// the sidebar, for example, in a folder view in a file manager. In turn, the
// sidebar will highlight that location if it is being shown in the list of
// places, or it will unhighlight everything if the location is not among the
// places in the list.
//
// The function takes the following parameters:
//
//    - location (optional) to select, or NULL for no current path.
//
func (sidebar *PlacesSidebar) SetLocation(location gio.Filer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if location != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(location).Native()))
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_location", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(location)
}

// SetShowConnectToServer sets whether the sidebar should show an item for
// connecting to a network server; this is off by default. An application may
// want to turn this on if it implements a way for the user to connect to
// network servers directly.
//
// If you enable this, you should connect to the
// PlacesSidebar::show-connect-to-server signal.
//
// Deprecated: It is recommended to group this functionality with the drives and
// network location under the new 'Other Location' item.
//
// The function takes the following parameters:
//
//    - showConnectToServer: whether to show an item for the Connect to Server
//      command.
//
func (sidebar *PlacesSidebar) SetShowConnectToServer(showConnectToServer bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showConnectToServer {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_connect_to_server", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showConnectToServer)
}

// SetShowDesktop sets whether the sidebar should show an item for the Desktop
// folder. The default value for this option is determined by the desktop
// environment and the user’s configuration, but this function can be used to
// override it on a per-application basis.
//
// The function takes the following parameters:
//
//    - showDesktop: whether to show an item for the Desktop folder.
//
func (sidebar *PlacesSidebar) SetShowDesktop(showDesktop bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showDesktop {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_desktop", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showDesktop)
}

// SetShowEnterLocation sets whether the sidebar should show an item for
// entering a location; this is off by default. An application may want to turn
// this on if manually entering URLs is an expected user action.
//
// If you enable this, you should connect to the
// PlacesSidebar::show-enter-location signal.
//
// The function takes the following parameters:
//
//    - showEnterLocation: whether to show an item to enter a location.
//
func (sidebar *PlacesSidebar) SetShowEnterLocation(showEnterLocation bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showEnterLocation {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_enter_location", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showEnterLocation)
}

// SetShowOtherLocations sets whether the sidebar should show an item for the
// application to show an Other Locations view; this is off by default. When set
// to TRUE, persistent devices such as hard drives are hidden, otherwise they
// are shown in the sidebar. An application may want to turn this on if it
// implements a way for the user to see and interact with drives and network
// servers directly.
//
// If you enable this, you should connect to the
// PlacesSidebar::show-other-locations signal.
//
// The function takes the following parameters:
//
//    - showOtherLocations: whether to show an item for the Other Locations view.
//
func (sidebar *PlacesSidebar) SetShowOtherLocations(showOtherLocations bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showOtherLocations {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_other_locations", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showOtherLocations)
}

// SetShowRecent sets whether the sidebar should show an item for recent files.
// The default value for this option is determined by the desktop environment,
// but this function can be used to override it on a per-application basis.
//
// The function takes the following parameters:
//
//    - showRecent: whether to show an item for recent files.
//
func (sidebar *PlacesSidebar) SetShowRecent(showRecent bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showRecent {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_recent", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showRecent)
}

// SetShowStarredLocation: if you enable this, you should connect to the
// PlacesSidebar::show-starred-location signal.
//
// The function takes the following parameters:
//
//    - showStarredLocation: whether to show an item for Starred files.
//
func (sidebar *PlacesSidebar) SetShowStarredLocation(showStarredLocation bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showStarredLocation {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_starred_location", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showStarredLocation)
}

// SetShowTrash sets whether the sidebar should show an item for the Trash
// location.
//
// The function takes the following parameters:
//
//    - showTrash: whether to show an item for the Trash location.
//
func (sidebar *PlacesSidebar) SetShowTrash(showTrash bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sidebar).Native()))
	if showTrash {
		_arg1 = C.TRUE
	}
	*(**PlacesSidebar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PlacesSidebar").InvokeMethod("set_show_trash", args[:], nil)

	runtime.KeepAlive(sidebar)
	runtime.KeepAlive(showTrash)
}
