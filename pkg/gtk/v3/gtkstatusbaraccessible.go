// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeStatusbarAccessible = coreglib.Type(C.gtk_statusbar_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStatusbarAccessible, F: marshalStatusbarAccessible},
	})
}

// StatusbarAccessibleOverrides contains methods that are overridable.
type StatusbarAccessibleOverrides struct {
}

func defaultStatusbarAccessibleOverrides(v *StatusbarAccessible) StatusbarAccessibleOverrides {
	return StatusbarAccessibleOverrides{}
}

type StatusbarAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*StatusbarAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StatusbarAccessible, *StatusbarAccessibleClass, StatusbarAccessibleOverrides](
		GTypeStatusbarAccessible,
		initStatusbarAccessibleClass,
		wrapStatusbarAccessible,
		defaultStatusbarAccessibleOverrides,
	)
}

func initStatusbarAccessibleClass(gclass unsafe.Pointer, overrides StatusbarAccessibleOverrides, classInitFunc func(*StatusbarAccessibleClass)) {
	if classInitFunc != nil {
		class := (*StatusbarAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStatusbarAccessible(obj *coreglib.Object) *StatusbarAccessible {
	return &StatusbarAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalStatusbarAccessible(p uintptr) (interface{}, error) {
	return wrapStatusbarAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// StatusbarAccessibleClass: instance of this type is always passed by
// reference.
type StatusbarAccessibleClass struct {
	*statusbarAccessibleClass
}

// statusbarAccessibleClass is the struct that's finalized.
type statusbarAccessibleClass struct {
	native *C.GtkStatusbarAccessibleClass
}

func (s *StatusbarAccessibleClass) ParentClass() *ContainerAccessibleClass {
	valptr := &s.native.parent_class
	var _v *ContainerAccessibleClass // out
	_v = (*ContainerAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
