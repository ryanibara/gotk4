// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_AppChooserWidget_ConnectPopulatePopup(gpointer, GtkMenu*, GAppInfo*, guintptr);
// extern void _gotk4_gtk3_AppChooserWidget_ConnectApplicationSelected(gpointer, GAppInfo*, guintptr);
// extern void _gotk4_gtk3_AppChooserWidget_ConnectApplicationActivated(gpointer, GAppInfo*, guintptr);
// extern void _gotk4_gtk3_AppChooserWidgetClass_populate_popup(GtkAppChooserWidget*, GtkMenu*, GAppInfo*);
// extern void _gotk4_gtk3_AppChooserWidgetClass_application_selected(GtkAppChooserWidget*, GAppInfo*);
// extern void _gotk4_gtk3_AppChooserWidgetClass_application_activated(GtkAppChooserWidget*, GAppInfo*);
// void _gotk4_gtk3_AppChooserWidget_virtual_application_activated(void* fnptr, GtkAppChooserWidget* arg0, GAppInfo* arg1) {
//   ((void (*)(GtkAppChooserWidget*, GAppInfo*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_AppChooserWidget_virtual_application_selected(void* fnptr, GtkAppChooserWidget* arg0, GAppInfo* arg1) {
//   ((void (*)(GtkAppChooserWidget*, GAppInfo*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_AppChooserWidget_virtual_populate_popup(void* fnptr, GtkAppChooserWidget* arg0, GtkMenu* arg1, GAppInfo* arg2) {
//   ((void (*)(GtkAppChooserWidget*, GtkMenu*, GAppInfo*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// GType values.
var (
	GTypeAppChooserWidget = coreglib.Type(C.gtk_app_chooser_widget_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAppChooserWidget, F: marshalAppChooserWidget},
	})
}

// AppChooserWidgetOverrides contains methods that are overridable.
type AppChooserWidgetOverrides struct {
	// The function takes the following parameters:
	//
	ApplicationActivated func(appInfo gio.AppInfor)
	// The function takes the following parameters:
	//
	ApplicationSelected func(appInfo gio.AppInfor)
	// The function takes the following parameters:
	//
	//    - menu
	//    - appInfo
	//
	PopulatePopup func(menu *Menu, appInfo gio.AppInfor)
}

func defaultAppChooserWidgetOverrides(v *AppChooserWidget) AppChooserWidgetOverrides {
	return AppChooserWidgetOverrides{
		ApplicationActivated: v.applicationActivated,
		ApplicationSelected:  v.applicationSelected,
		PopulatePopup:        v.populatePopup,
	}
}

// AppChooserWidget is a widget for selecting applications. It is the main
// building block for AppChooserDialog. Most applications only need to use the
// latter; but you can use this widget as part of a larger widget if you have
// special needs.
//
// AppChooserWidget offers detailed control over what applications are shown,
// using the AppChooserWidget:show-default, AppChooserWidget:show-recommended,
// AppChooserWidget:show-fallback, AppChooserWidget:show-other and
// AppChooserWidget:show-all properties. See the AppChooser documentation for
// more information about these groups of applications.
//
// To keep track of the selected application, use the
// AppChooserWidget::application-selected and
// AppChooserWidget::application-activated signals.
//
//
// CSS nodes
//
// GtkAppChooserWidget has a single CSS node with name appchooser.
type AppChooserWidget struct {
	_ [0]func() // equal guard
	Box

	*coreglib.Object
	AppChooser
}

var (
	_ coreglib.Objector = (*AppChooserWidget)(nil)
	_ Containerer       = (*AppChooserWidget)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*AppChooserWidget, *AppChooserWidgetClass, AppChooserWidgetOverrides](
		GTypeAppChooserWidget,
		initAppChooserWidgetClass,
		wrapAppChooserWidget,
		defaultAppChooserWidgetOverrides,
	)
}

func initAppChooserWidgetClass(gclass unsafe.Pointer, overrides AppChooserWidgetOverrides, classInitFunc func(*AppChooserWidgetClass)) {
	pclass := (*C.GtkAppChooserWidgetClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeAppChooserWidget))))

	if overrides.ApplicationActivated != nil {
		pclass.application_activated = (*[0]byte)(C._gotk4_gtk3_AppChooserWidgetClass_application_activated)
	}

	if overrides.ApplicationSelected != nil {
		pclass.application_selected = (*[0]byte)(C._gotk4_gtk3_AppChooserWidgetClass_application_selected)
	}

	if overrides.PopulatePopup != nil {
		pclass.populate_popup = (*[0]byte)(C._gotk4_gtk3_AppChooserWidgetClass_populate_popup)
	}

	if classInitFunc != nil {
		class := (*AppChooserWidgetClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAppChooserWidget(obj *coreglib.Object) *AppChooserWidget {
	return &AppChooserWidget{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
		Object: obj,
		AppChooser: AppChooser{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalAppChooserWidget(p uintptr) (interface{}, error) {
	return wrapAppChooserWidget(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectApplicationActivated is emitted when an application item is activated
// from the widget's list.
//
// This usually happens when the user double clicks an item, or an item is
// selected and the user presses one of the keys Space, Shift+Space, Return or
// Enter.
func (self *AppChooserWidget) ConnectApplicationActivated(f func(application gio.AppInfor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "application-activated", false, unsafe.Pointer(C._gotk4_gtk3_AppChooserWidget_ConnectApplicationActivated), f)
}

// ConnectApplicationSelected is emitted when an application item is selected
// from the widget's list.
func (self *AppChooserWidget) ConnectApplicationSelected(f func(application gio.AppInfor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "application-selected", false, unsafe.Pointer(C._gotk4_gtk3_AppChooserWidget_ConnectApplicationSelected), f)
}

// ConnectPopulatePopup is emitted when a context menu is about to popup over an
// application item. Clients can insert menu items into the provided Menu object
// in the callback of this signal; the context menu will be shown over the item
// if at least one item has been added to the menu.
func (self *AppChooserWidget) ConnectPopulatePopup(f func(menu *Menu, application gio.AppInfor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_AppChooserWidget_ConnectPopulatePopup), f)
}

// SetDefaultText sets the text that is shown if there are not applications that
// can handle the content type.
//
// The function takes the following parameters:
//
//    - text: new value for AppChooserWidget:default-text.
//
func (self *AppChooserWidget) SetDefaultText(text string) {
	var _arg0 *C.GtkAppChooserWidget // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.GtkAppChooserWidget)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_app_chooser_widget_set_default_text(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(text)
}

// The function takes the following parameters:
//
func (self *AppChooserWidget) applicationActivated(appInfo gio.AppInfor) {
	gclass := (*C.GtkAppChooserWidgetClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.application_activated

	var _arg0 *C.GtkAppChooserWidget // out
	var _arg1 *C.GAppInfo            // out

	_arg0 = (*C.GtkAppChooserWidget)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appInfo).Native()))

	C._gotk4_gtk3_AppChooserWidget_virtual_application_activated(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(appInfo)
}

// The function takes the following parameters:
//
func (self *AppChooserWidget) applicationSelected(appInfo gio.AppInfor) {
	gclass := (*C.GtkAppChooserWidgetClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.application_selected

	var _arg0 *C.GtkAppChooserWidget // out
	var _arg1 *C.GAppInfo            // out

	_arg0 = (*C.GtkAppChooserWidget)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appInfo).Native()))

	C._gotk4_gtk3_AppChooserWidget_virtual_application_selected(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(appInfo)
}

// The function takes the following parameters:
//
//    - menu
//    - appInfo
//
func (self *AppChooserWidget) populatePopup(menu *Menu, appInfo gio.AppInfor) {
	gclass := (*C.GtkAppChooserWidgetClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.populate_popup

	var _arg0 *C.GtkAppChooserWidget // out
	var _arg1 *C.GtkMenu             // out
	var _arg2 *C.GAppInfo            // out

	_arg0 = (*C.GtkAppChooserWidget)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg2 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appInfo).Native()))

	C._gotk4_gtk3_AppChooserWidget_virtual_populate_popup(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(appInfo)
}

// AppChooserWidgetClass: instance of this type is always passed by reference.
type AppChooserWidgetClass struct {
	*appChooserWidgetClass
}

// appChooserWidgetClass is the struct that's finalized.
type appChooserWidgetClass struct {
	native *C.GtkAppChooserWidgetClass
}

// ParentClass: parent class.
func (a *AppChooserWidgetClass) ParentClass() *BoxClass {
	valptr := &a.native.parent_class
	var _v *BoxClass // out
	_v = (*BoxClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
