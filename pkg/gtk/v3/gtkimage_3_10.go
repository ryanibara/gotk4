// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewImageFromSurface creates a new Image displaying surface. The Image does
// not assume a reference to the surface; you still need to unref it if you own
// references. Image will add its own reference rather than adopting yours.
//
// The function takes the following parameters:
//
//    - surface (optional) or NULL.
//
// The function returns the following values:
//
//    - image: new Image.
//
func NewImageFromSurface(surface *cairo.Surface) *Image {
	var _arg1 *C.cairo_surface_t // out
	var _cret *C.GtkWidget       // in

	if surface != nil {
		_arg1 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))
	}

	_cret = C.gtk_image_new_from_surface(_arg1)
	runtime.KeepAlive(surface)

	var _image *Image // out

	_image = wrapImage(coreglib.Take(unsafe.Pointer(_cret)))

	return _image
}

// SetFromSurface: see gtk_image_new_from_surface() for details.
//
// The function takes the following parameters:
//
//    - surface (optional): cairo_surface_t or NULL.
//
func (image *Image) SetFromSurface(surface *cairo.Surface) {
	var _arg0 *C.GtkImage        // out
	var _arg1 *C.cairo_surface_t // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	if surface != nil {
		_arg1 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))
	}

	C.gtk_image_set_from_surface(_arg0, _arg1)
	runtime.KeepAlive(image)
	runtime.KeepAlive(surface)
}
