// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Alignment gets the value set by gtk_entry_set_alignment().
//
// The function returns the following values:
//
//    - gfloat: alignment.
//
func (entry *Entry) Alignment() float32 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gfloat    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_alignment(_arg0)
	runtime.KeepAlive(entry)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Completion returns the auxiliary completion object currently in use by entry.
//
// The function returns the following values:
//
//    - entryCompletion: auxiliary completion object currently in use by entry.
//
func (entry *Entry) Completion() *EntryCompletion {
	var _arg0 *C.GtkEntry           // out
	var _cret *C.GtkEntryCompletion // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_completion(_arg0)
	runtime.KeepAlive(entry)

	var _entryCompletion *EntryCompletion // out

	_entryCompletion = wrapEntryCompletion(coreglib.Take(unsafe.Pointer(_cret)))

	return _entryCompletion
}

// SetAlignment sets the alignment for the contents of the entry. This controls
// the horizontal positioning of the contents when the displayed text is shorter
// than the width of the entry.
//
// The function takes the following parameters:
//
//    - xalign: horizontal alignment, from 0 (left) to 1 (right). Reversed for
//      RTL layouts.
//
func (entry *Entry) SetAlignment(xalign float32) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gfloat    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gfloat(xalign)

	C.gtk_entry_set_alignment(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(xalign)
}

// SetCompletion sets completion to be the auxiliary completion object to use
// with entry. All further configuration of the completion mechanism is done on
// completion using the EntryCompletion API. Completion is disabled if
// completion is set to NULL.
//
// The function takes the following parameters:
//
//    - completion (optional) or NULL.
//
func (entry *Entry) SetCompletion(completion *EntryCompletion) {
	var _arg0 *C.GtkEntry           // out
	var _arg1 *C.GtkEntryCompletion // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if completion != nil {
		_arg1 = (*C.GtkEntryCompletion)(unsafe.Pointer(coreglib.InternObject(completion).Native()))
	}

	C.gtk_entry_set_completion(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(completion)
}
