// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeAccelLabel returns the GType for the type AccelLabel.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeAccelLabel() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "AccelLabel").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalAccelLabel)
	return gtype
}

// AccelLabelOverrider contains methods that are overridable.
type AccelLabelOverrider interface {
}

// AccelLabel widget is a subclass of Label that also displays an accelerator
// key on the right of the label text, e.g. “Ctrl+S”. It is commonly used in
// menus to show the keyboard short-cuts for commands.
//
// The accelerator key to display is typically not set explicitly (although it
// can be, with gtk_accel_label_set_accel()). Instead, the AccelLabel displays
// the accelerators which have been added to a particular widget. This widget is
// set by calling gtk_accel_label_set_accel_widget().
//
// For example, a MenuItem widget may have an accelerator added to emit the
// “activate” signal when the “Ctrl+S” key combination is pressed. A AccelLabel
// is created and added to the MenuItem, and gtk_accel_label_set_accel_widget()
// is called with the MenuItem as the second argument. The AccelLabel will now
// display “Ctrl+S” after its label.
//
// Note that creating a MenuItem with gtk_menu_item_new_with_label() (or one of
// the similar functions for CheckMenuItem and RadioMenuItem) automatically adds
// a AccelLabel to the MenuItem and calls gtk_accel_label_set_accel_widget() to
// set it up for you.
//
// A AccelLabel will only display accelerators which have GTK_ACCEL_VISIBLE set
// (see AccelFlags). A AccelLabel can display multiple accelerators and even
// signal names, though it is almost always used to display just one accelerator
// key.
//
// Creating a simple menu item with an accelerator key.
//
//    label
//    ╰── accelerator
//
// Like Label, GtkAccelLabel has a main CSS node with the name label. It adds a
// subnode with name accelerator.
type AccelLabel struct {
	_ [0]func() // equal guard
	Label
}

var (
	_ Miscer = (*AccelLabel)(nil)
)

func classInitAccelLabeller(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapAccelLabel(obj *coreglib.Object) *AccelLabel {
	return &AccelLabel{
		Label: Label{
			Misc: Misc{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalAccelLabel(p uintptr) (interface{}, error) {
	return wrapAccelLabel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewAccelLabel creates a new AccelLabel.
//
// The function takes the following parameters:
//
//    - str: label string. Must be non-NULL.
//
// The function returns the following values:
//
//    - accelLabel: new AccelLabel.
//
func NewAccelLabel(str string) *AccelLabel {
	var _args [1]girepository.Argument

	*(**C.gchar)(unsafe.Pointer(&_args[0])) = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(*(**C.gchar)(unsafe.Pointer(&_args[0]))))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_gret := _info.InvokeClassMethod("new_AccelLabel", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(str)

	var _accelLabel *AccelLabel // out

	_accelLabel = wrapAccelLabel(coreglib.Take(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _accelLabel
}

// Accel gets the keyval and modifier mask set with gtk_accel_label_set_accel().
//
// The function returns the following values:
//
//    - acceleratorKey: return location for the keyval.
//    - acceleratorMods: return location for the modifier mask.
//
func (accelLabel *AccelLabel) Accel() (uint32, gdk.ModifierType) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_info.InvokeClassMethod("get_accel", _args[:], _outs[:])

	runtime.KeepAlive(accelLabel)

	var _acceleratorKey uint32            // out
	var _acceleratorMods gdk.ModifierType // out

	_acceleratorKey = uint32(*(*C.guint)(unsafe.Pointer(&_outs[0])))
	_acceleratorMods = *(*gdk.ModifierType)(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_outs[1]))))

	return _acceleratorKey, _acceleratorMods
}

// AccelWidget fetches the widget monitored by this accelerator label. See
// gtk_accel_label_set_accel_widget().
//
// The function returns the following values:
//
//    - widget (optional): object monitored by the accelerator label, or NULL.
//
func (accelLabel *AccelLabel) AccelWidget() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_gret := _info.InvokeClassMethod("get_accel_widget", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(accelLabel)

	var _widget Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// AccelWidth returns the width needed to display the accelerator key(s). This
// is used by menus to align all of the MenuItem widgets, and shouldn't be
// needed by applications.
//
// The function returns the following values:
//
//    - guint: width needed to display the accelerator key(s).
//
func (accelLabel *AccelLabel) AccelWidth() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_gret := _info.InvokeClassMethod("get_accel_width", _args[:], nil)
	_cret := *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(accelLabel)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// Refetch recreates the string representing the accelerator keys. This should
// not be needed since the string is automatically updated whenever accelerators
// are added or removed from the associated widget.
//
// The function returns the following values:
//
//    - ok always returns FALSE.
//
func (accelLabel *AccelLabel) Refetch() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_gret := _info.InvokeClassMethod("refetch", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(accelLabel)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetAccelClosure sets the closure to be monitored by this accelerator label.
// The closure must be connected to an accelerator group; see
// gtk_accel_group_connect(). Passing NULL for accel_closure will dissociate
// accel_label from its current closure, if any.
//
// The function takes the following parameters:
//
//    - accelClosure (optional): closure to monitor for accelerator changes, or
//      NULL.
//
func (accelLabel *AccelLabel) SetAccelClosure(accelClosure coreglib.AnyClosure) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))
	*(**C.GClosure)(unsafe.Pointer(&_args[1])) = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(accelLabel), accelClosure))

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_info.InvokeClassMethod("set_accel_closure", _args[:], nil)

	runtime.KeepAlive(accelLabel)
	runtime.KeepAlive(accelClosure)
}

// SetAccelWidget sets the widget to be monitored by this accelerator label.
// Passing NULL for accel_widget will dissociate accel_label from its current
// widget, if any.
//
// The function takes the following parameters:
//
//    - accelWidget (optional): widget to be monitored, or NULL.
//
func (accelLabel *AccelLabel) SetAccelWidget(accelWidget Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelLabel).Native()))
	if accelWidget != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accelWidget).Native()))
	}

	_info := girepository.MustFind("Gtk", "AccelLabel")
	_info.InvokeClassMethod("set_accel_widget", _args[:], nil)

	runtime.KeepAlive(accelLabel)
	runtime.KeepAlive(accelWidget)
}
