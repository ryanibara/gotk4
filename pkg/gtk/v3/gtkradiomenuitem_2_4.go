// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewRadioMenuItemFromWidget creates a new RadioMenuItem adding it to the same
// group as group.
//
// The function takes the following parameters:
//
//    - group (optional): existing RadioMenuItem.
//
// The function returns the following values:
//
//    - radioMenuItem: new RadioMenuItem.
//
func NewRadioMenuItemFromWidget(group *RadioMenuItem) *RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _cret *C.GtkWidget        // in

	if group != nil {
		_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}

	_cret = C.gtk_radio_menu_item_new_from_widget(_arg1)
	runtime.KeepAlive(group)

	var _radioMenuItem *RadioMenuItem // out

	_radioMenuItem = wrapRadioMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioMenuItem
}

// NewRadioMenuItemWithLabelFromWidget creates a new GtkRadioMenuItem whose
// child is a simple GtkLabel. The new RadioMenuItem is added to the same group
// as group.
//
// The function takes the following parameters:
//
//    - group (optional): existing RadioMenuItem.
//    - label (optional): text for the label.
//
// The function returns the following values:
//
//    - radioMenuItem: new RadioMenuItem.
//
func NewRadioMenuItemWithLabelFromWidget(group *RadioMenuItem, label string) *RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkWidget        // in

	if group != nil {
		_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}
	if label != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gtk_radio_menu_item_new_with_label_from_widget(_arg1, _arg2)
	runtime.KeepAlive(group)
	runtime.KeepAlive(label)

	var _radioMenuItem *RadioMenuItem // out

	_radioMenuItem = wrapRadioMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioMenuItem
}

// NewRadioMenuItemWithMnemonicFromWidget creates a new GtkRadioMenuItem
// containing a label. The label will be created using
// gtk_label_new_with_mnemonic(), so underscores in label indicate the mnemonic
// for the menu item.
//
// The new RadioMenuItem is added to the same group as group.
//
// The function takes the following parameters:
//
//    - group (optional): existing RadioMenuItem.
//    - label (optional): text of the button, with an underscore in front of the
//      mnemonic character.
//
// The function returns the following values:
//
//    - radioMenuItem: new RadioMenuItem.
//
func NewRadioMenuItemWithMnemonicFromWidget(group *RadioMenuItem, label string) *RadioMenuItem {
	var _arg1 *C.GtkRadioMenuItem // out
	var _arg2 *C.gchar            // out
	var _cret *C.GtkWidget        // in

	if group != nil {
		_arg1 = (*C.GtkRadioMenuItem)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}
	if label != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gtk_radio_menu_item_new_with_mnemonic_from_widget(_arg1, _arg2)
	runtime.KeepAlive(group)
	runtime.KeepAlive(label)

	var _radioMenuItem *RadioMenuItem // out

	_radioMenuItem = wrapRadioMenuItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _radioMenuItem
}
