// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AlternativeDialogButtonOrder returns TRUE if dialogs are expected to use an
// alternative button order on the screen screen. See
// gtk_dialog_set_alternative_button_order() for more details about alternative
// button order.
//
// If you need to use this function, you should probably connect to the
// ::notify:gtk-alternative-button-order signal on the Settings object
// associated to screen, in order to be notified if the button order setting
// changes.
//
// Deprecated: Deprecated.
//
// The function takes the following parameters:
//
//    - screen (optional) or NULL to use the default screen.
//
// The function returns the following values:
//
//    - ok: whether the alternative button order should be used.
//
func AlternativeDialogButtonOrder(screen *gdk.Screen) bool {
	var _arg1 *C.GdkScreen // out
	var _cret C.gboolean   // in

	if screen != nil {
		_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	}

	_cret = C.gtk_alternative_dialog_button_order(_arg1)
	runtime.KeepAlive(screen)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAlternativeButtonOrderFromArray sets an alternative button order. If the
// Settings:gtk-alternative-button-order setting is set to TRUE, the dialog
// buttons are reordered according to the order of the response ids in
// new_order.
//
// See gtk_dialog_set_alternative_button_order() for more information.
//
// This function is for use by language bindings.
//
// Deprecated: Deprecated.
//
// The function takes the following parameters:
//
//    - newOrder: array of response ids of dialogâ€™s buttons.
//
func (dialog *Dialog) SetAlternativeButtonOrderFromArray(newOrder []int) {
	var _arg0 *C.GtkDialog // out
	var _arg2 *C.gint      // out
	var _arg1 C.gint

	_arg0 = (*C.GtkDialog)(unsafe.Pointer(coreglib.InternObject(dialog).Native()))
	_arg1 = (C.gint)(len(newOrder))
	_arg2 = (*C.gint)(C.calloc(C.size_t(len(newOrder)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice((*C.gint)(_arg2), len(newOrder))
		for i := range newOrder {
			out[i] = C.gint(newOrder[i])
		}
	}

	C.gtk_dialog_set_alternative_button_order_from_array(_arg0, _arg1, _arg2)
	runtime.KeepAlive(dialog)
	runtime.KeepAlive(newOrder)
}
