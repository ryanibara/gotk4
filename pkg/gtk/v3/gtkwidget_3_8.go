// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void callbackDelete(gpointer);
// extern gboolean _gotk4_gtk3_TickCallback(GtkWidget*, GdkFrameClock*, gpointer);
import "C"

// TickCallback: callback type for adding a function to update animations. See
// gtk_widget_add_tick_callback().
type TickCallback func(widget Widgetter, frameClock gdk.FrameClocker) (ok bool)

// AddTickCallback queues an animation frame update and adds a callback to be
// called before each frame. Until the tick callback is removed, it will be
// called frequently (usually at the frame rate of the output device or as
// quickly as the application can be repainted, whichever is slower). For this
// reason, is most suitable for handling graphics that change every frame or
// every few frames. The tick callback does not automatically imply a relayout
// or repaint. If you want a repaint or relayout, and aren’t changing widget
// properties that would trigger that (for example, changing the text of a
// Label), then you will have to call gtk_widget_queue_resize() or
// gtk_widget_queue_draw_area() yourself.
//
// gdk_frame_clock_get_frame_time() should generally be used for timing
// continuous animations and gdk_frame_timings_get_predicted_presentation_time()
// if you are trying to display isolated frames at particular times.
//
// This is a more convenient alternative to connecting directly to the
// FrameClock::update signal of FrameClock, since you don't have to worry about
// when a FrameClock is assigned to a widget.
//
// The function takes the following parameters:
//
//    - callback: function to call for updating animations.
//
// The function returns the following values:
//
//    - guint: id for the connection of this callback. Remove the callback by
//      passing it to gtk_widget_remove_tick_callback().
//
func (widget *Widget) AddTickCallback(callback TickCallback) uint {
	var _arg0 *C.GtkWidget      // out
	var _arg1 C.GtkTickCallback // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify
	var _cret C.guint // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*[0]byte)(C._gotk4_gtk3_TickCallback)
	_arg2 = C.gpointer(gbox.Assign(callback))
	_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_cret = C.gtk_widget_add_tick_callback(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(callback)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// FrameClock obtains the frame clock for a widget. The frame clock is a global
// “ticker” that can be used to drive animations and repaints. The most common
// reason to get the frame clock is to call gdk_frame_clock_get_frame_time(), in
// order to get a time to use for animating. For example you might record the
// start of the animation with an initial value from
// gdk_frame_clock_get_frame_time(), and then update the animation by calling
// gdk_frame_clock_get_frame_time() again during each repaint.
//
// gdk_frame_clock_request_phase() will result in a new frame on the clock, but
// won’t necessarily repaint any widgets. To repaint a widget, you have to use
// gtk_widget_queue_draw() which invalidates the widget (thus scheduling it to
// receive a draw on the next frame). gtk_widget_queue_draw() will also end up
// requesting a frame on the appropriate frame clock.
//
// A widget’s frame clock will not change while the widget is mapped.
// Reparenting a widget (which implies a temporary unmap) can change the
// widget’s frame clock.
//
// Unrealized widgets do not have a frame clock.
//
// The function returns the following values:
//
//    - frameClock (optional) NULL if widget is unrealized.
//
func (widget *Widget) FrameClock() gdk.FrameClocker {
	var _arg0 *C.GtkWidget     // out
	var _cret *C.GdkFrameClock // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_frame_clock(_arg0)
	runtime.KeepAlive(widget)

	var _frameClock gdk.FrameClocker // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.FrameClocker)
				return ok
			})
			rv, ok := casted.(gdk.FrameClocker)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.FrameClocker")
			}
			_frameClock = rv
		}
	}

	return _frameClock
}

// Opacity fetches the requested opacity for this widget. See
// gtk_widget_set_opacity().
//
// The function returns the following values:
//
//    - gdouble: requested opacity for this widget.
//
func (widget *Widget) Opacity() float64 {
	var _arg0 *C.GtkWidget // out
	var _cret C.double     // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_opacity(_arg0)
	runtime.KeepAlive(widget)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// IsVisible determines whether the widget and all its parents are marked as
// visible.
//
// This function does not check if the widget is obscured in any way.
//
// See also gtk_widget_get_visible() and gtk_widget_set_visible().
//
// The function returns the following values:
//
//    - ok: TRUE if the widget and all its parents are visible.
//
func (widget *Widget) IsVisible() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_is_visible(_arg0)
	runtime.KeepAlive(widget)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RegisterWindow registers a Window with the widget and sets it up so that the
// widget receives events for it. Call gtk_widget_unregister_window() when
// destroying the window.
//
// Before 3.8 you needed to call gdk_window_set_user_data() directly to set this
// up. This is now deprecated and you should use gtk_widget_register_window()
// instead. Old code will keep working as is, although some new features like
// transparency might not work perfectly.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (widget *Widget) RegisterWindow(window gdk.Windower) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_widget_register_window(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}

// RemoveTickCallback removes a tick callback previously registered with
// gtk_widget_add_tick_callback().
//
// The function takes the following parameters:
//
//    - id returned by gtk_widget_add_tick_callback().
//
func (widget *Widget) RemoveTickCallback(id uint) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.guint      // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = C.guint(id)

	C.gtk_widget_remove_tick_callback(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(id)
}

// SetOpacity: request the widget to be rendered partially transparent, with
// opacity 0 being fully transparent and 1 fully opaque. (Opacity values are
// clamped to the [0,1] range.). This works on both toplevel widget, and child
// widgets, although there are some limitations:
//
// For toplevel widgets this depends on the capabilities of the windowing
// system. On X11 this has any effect only on X screens with a compositing
// manager running. See gtk_widget_is_composited(). On Windows it should work
// always, although setting a window’s opacity after the window has been shown
// causes it to flicker once on Windows.
//
// For child widgets it doesn’t work if any affected widget has a native window,
// or disables double buffering.
//
// The function takes the following parameters:
//
//    - opacity: desired opacity, between 0 and 1.
//
func (widget *Widget) SetOpacity(opacity float64) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.double     // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = C.double(opacity)

	C.gtk_widget_set_opacity(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(opacity)
}

// UnregisterWindow unregisters a Window from the widget that was previously set
// up with gtk_widget_register_window(). You need to call this when the window
// is no longer used by the widget, such as when you destroy it.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (widget *Widget) UnregisterWindow(window gdk.Windower) {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_widget_unregister_window(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(window)
}
