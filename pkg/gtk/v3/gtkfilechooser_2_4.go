// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// FileChooserErrorQuark registers an error quark for FileChooser if necessary.
//
// The function returns the following values:
//
//    - quark: error quark used for FileChooser errors.
//
func FileChooserErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.gtk_file_chooser_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)

	return _quark
}

// AddFilter adds filter to the list of filters that the user can select
// between. When a filter is selected, only files that are passed by that filter
// are displayed.
//
// Note that the chooser takes ownership of the filter, so you have to ref and
// sink it if you want to keep a reference.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) AddFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(filter).Native()))

	C.gtk_file_chooser_add_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// AddShortcutFolder adds a folder to be displayed with the shortcut folders in
// a file chooser. Note that shortcut folders do not get saved, as they are
// provided by the application. For example, you can use this to add a
// “/usr/share/mydrawprogram/Clipart” folder to the volume list.
//
// The function takes the following parameters:
//
//    - folder: filename of the folder to add.
//
func (chooser *FileChooser) AddShortcutFolder(folder string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(folder)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_add_shortcut_folder(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AddShortcutFolderURI adds a folder URI to be displayed with the shortcut
// folders in a file chooser. Note that shortcut folders do not get saved, as
// they are provided by the application. For example, you can use this to add a
// “file:///usr/share/mydrawprogram/Clipart” folder to the volume list.
//
// The function takes the following parameters:
//
//    - uri: URI of the folder to add.
//
func (chooser *FileChooser) AddShortcutFolderURI(uri string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_add_shortcut_folder_uri(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Action gets the type of operation that the file chooser is performing; see
// gtk_file_chooser_set_action().
//
// The function returns the following values:
//
//    - fileChooserAction: action that the file selector is performing.
//
func (chooser *FileChooser) Action() FileChooserAction {
	var _arg0 *C.GtkFileChooser      // out
	var _cret C.GtkFileChooserAction // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_action(_arg0)
	runtime.KeepAlive(chooser)

	var _fileChooserAction FileChooserAction // out

	_fileChooserAction = FileChooserAction(_cret)

	return _fileChooserAction
}

// CurrentFolder gets the current folder of chooser as a local filename. See
// gtk_file_chooser_set_current_folder().
//
// Note that this is the folder that the file chooser is currently displaying
// (e.g. "/home/username/Documents"), which is not the same as the
// currently-selected folder if the chooser is in
// GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode (e.g.
// "/home/username/Documents/selected-folder/". To get the currently-selected
// folder in that mode, use gtk_file_chooser_get_uri() as the usual way to get
// the selection.
//
// The function returns the following values:
//
//    - filename (optional): full path of the current folder, or NULL if the
//      current path cannot be represented as a local filename. Free with
//      g_free(). This function will also return NULL if the file chooser was
//      unable to load the last folder that was requested from it; for example,
//      as would be for calling gtk_file_chooser_set_current_folder() on a
//      nonexistent folder.
//
func (chooser *FileChooser) CurrentFolder() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_folder(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// CurrentFolderURI gets the current folder of chooser as an URI. See
// gtk_file_chooser_set_current_folder_uri().
//
// Note that this is the folder that the file chooser is currently displaying
// (e.g. "file:///home/username/Documents"), which is not the same as the
// currently-selected folder if the chooser is in
// GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode (e.g.
// "file:///home/username/Documents/selected-folder/". To get the
// currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
// usual way to get the selection.
//
// The function returns the following values:
//
//    - utf8 (optional): URI for the current folder. Free with g_free(). This
//      function will also return NULL if the file chooser was unable to load the
//      last folder that was requested from it; for example, as would be for
//      calling gtk_file_chooser_set_current_folder_uri() on a nonexistent
//      folder.
//
func (chooser *FileChooser) CurrentFolderURI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_current_folder_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// ExtraWidget gets the current extra widget; see
// gtk_file_chooser_set_extra_widget().
//
// The function returns the following values:
//
//    - widget (optional): current extra widget, or NULL.
//
func (chooser *FileChooser) ExtraWidget() Widgetter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_extra_widget(_arg0)
	runtime.KeepAlive(chooser)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Filename gets the filename for the currently selected file in the file
// selector. The filename is returned as an absolute path. If multiple files are
// selected, one of the filenames will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - filename (optional): currently selected filename, or NULL if no file is
//      selected, or the selected file can't be represented with a local
//      filename. Free with g_free().
//
func (chooser *FileChooser) Filename() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filename(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// Filenames lists all the selected files and subfolders in the current folder
// of chooser. The returned names are full absolute paths. If files in the
// current folder cannot be represented as local filenames they will be ignored.
// (See gtk_file_chooser_get_uris()).
//
// The function returns the following values:
//
//    - sList: List containing the filenames of all selected files and subfolders
//      in the current folder. Free the returned list with g_slist_free(), and
//      the filenames with g_free().
//
func (chooser *FileChooser) Filenames() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filenames(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		defer C.free(unsafe.Pointer(src))
		_sList = append(_sList, dst)
	})

	return _sList
}

// Filter gets the current filter; see gtk_file_chooser_set_filter().
//
// The function returns the following values:
//
//    - fileFilter (optional): current filter, or NULL.
//
func (chooser *FileChooser) Filter() *FileFilter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkFileFilter  // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_filter(_arg0)
	runtime.KeepAlive(chooser)

	var _fileFilter *FileFilter // out

	if _cret != nil {
		_fileFilter = wrapFileFilter(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _fileFilter
}

// LocalOnly gets whether only local files can be selected in the file selector.
// See gtk_file_chooser_set_local_only().
//
// The function returns the following values:
//
//    - ok: TRUE if only local files can be selected.
//
func (chooser *FileChooser) LocalOnly() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_local_only(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PreviewFilename gets the filename that should be previewed in a custom
// preview widget. See gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - filename (optional) to preview, or NULL if no file is selected, or if the
//      selected file cannot be represented as a local filename. Free with
//      g_free().
//
func (chooser *FileChooser) PreviewFilename() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_filename(_arg0)
	runtime.KeepAlive(chooser)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// PreviewURI gets the URI that should be previewed in a custom preview widget.
// See gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - utf8 (optional): URI for the file to preview, or NULL if no file is
//      selected. Free with g_free().
//
func (chooser *FileChooser) PreviewURI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// PreviewWidget gets the current preview widget; see
// gtk_file_chooser_set_preview_widget().
//
// The function returns the following values:
//
//    - widget (optional): current preview widget, or NULL.
//
func (chooser *FileChooser) PreviewWidget() Widgetter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GtkWidget      // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_widget(_arg0)
	runtime.KeepAlive(chooser)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// PreviewWidgetActive gets whether the preview widget set by
// gtk_file_chooser_set_preview_widget() should be shown for the current
// filename. See gtk_file_chooser_set_preview_widget_active().
//
// The function returns the following values:
//
//    - ok: TRUE if the preview widget is active for the current filename.
//
func (chooser *FileChooser) PreviewWidgetActive() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_preview_widget_active(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectMultiple gets whether multiple files can be selected in the file
// selector. See gtk_file_chooser_set_select_multiple().
//
// The function returns the following values:
//
//    - ok: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SelectMultiple() bool {
	var _arg0 *C.GtkFileChooser // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_select_multiple(_arg0)
	runtime.KeepAlive(chooser)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// URI gets the URI for the currently selected file in the file selector. If
// multiple files are selected, one of the filenames will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - utf8 (optional): currently selected URI, or NULL if no file is selected.
//      If gtk_file_chooser_set_local_only() is set to TRUE (the default) a local
//      URI will be returned for any FUSE locations. Free with g_free().
//
func (chooser *FileChooser) URI() string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.gchar          // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_uri(_arg0)
	runtime.KeepAlive(chooser)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// URIs lists all the selected files and subfolders in the current folder of
// chooser. The returned names are full absolute URIs.
//
// The function returns the following values:
//
//    - sList containing the URIs of all selected files and subfolders in the
//      current folder. Free the returned list with g_slist_free(), and the
//      filenames with g_free().
//
func (chooser *FileChooser) URIs() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_get_uris(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		defer C.free(unsafe.Pointer(src))
		_sList = append(_sList, dst)
	})

	return _sList
}

// ListFilters lists the current set of user-selectable filters; see
// gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
//
// The function returns the following values:
//
//    - sList: a List containing the current set of user selectable filters. The
//      contents of the list are owned by GTK+, but you must free the list itself
//      with g_slist_free() when you are done with it.
//
func (chooser *FileChooser) ListFilters() []*FileFilter {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_filters(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []*FileFilter // out

	_sList = make([]*FileFilter, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GtkFileFilter)(v)
		var dst *FileFilter // out
		dst = wrapFileFilter(coreglib.Take(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// ListShortcutFolderURIs queries the list of shortcut folders in the file
// chooser, as set by gtk_file_chooser_add_shortcut_folder_uri().
//
// The function returns the following values:
//
//    - sList (optional): list of folder URIs, or NULL if there are no shortcut
//      folders. Free the returned list with g_slist_free(), and the URIs with
//      g_free().
//
func (chooser *FileChooser) ListShortcutFolderURIs() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_shortcut_folder_uris(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	if _cret != nil {
		_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
		gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
			src := (*C.gchar)(v)
			var dst string // out
			dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
			defer C.free(unsafe.Pointer(src))
			_sList = append(_sList, dst)
		})
	}

	return _sList
}

// ListShortcutFolders queries the list of shortcut folders in the file chooser,
// as set by gtk_file_chooser_add_shortcut_folder().
//
// The function returns the following values:
//
//    - sList (optional): list of folder filenames, or NULL if there are no
//      shortcut folders. Free the returned list with g_slist_free(), and the
//      filenames with g_free().
//
func (chooser *FileChooser) ListShortcutFolders() []string {
	var _arg0 *C.GtkFileChooser // out
	var _cret *C.GSList         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_cret = C.gtk_file_chooser_list_shortcut_folders(_arg0)
	runtime.KeepAlive(chooser)

	var _sList []string // out

	if _cret != nil {
		_sList = make([]string, 0, gextras.SListSize(unsafe.Pointer(_cret)))
		gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
			src := (*C.gchar)(v)
			var dst string // out
			dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
			defer C.free(unsafe.Pointer(src))
			_sList = append(_sList, dst)
		})
	}

	return _sList
}

// RemoveFilter removes filter from the list of filters that the user can select
// between.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) RemoveFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	C.gtk_file_chooser_remove_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// RemoveShortcutFolder removes a folder from a file chooser’s list of shortcut
// folders.
//
// The function takes the following parameters:
//
//    - folder: filename of the folder to remove.
//
func (chooser *FileChooser) RemoveShortcutFolder(folder string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(folder)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_remove_shortcut_folder(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveShortcutFolderURI removes a folder URI from a file chooser’s list of
// shortcut folders.
//
// The function takes the following parameters:
//
//    - uri: URI of the folder to remove.
//
func (chooser *FileChooser) RemoveShortcutFolderURI(uri string) error {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_remove_shortcut_folder_uri(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SelectAll selects all the files in the current folder of a file chooser.
func (chooser *FileChooser) SelectAll() {
	var _arg0 *C.GtkFileChooser // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	C.gtk_file_chooser_select_all(_arg0)
	runtime.KeepAlive(chooser)
}

// SelectFilename selects a filename. If the file name isn’t in the current
// folder of chooser, then the current folder of chooser will be changed to the
// folder containing filename.
//
// The function takes the following parameters:
//
//    - filename to select.
//
// The function returns the following values:
//
//    - ok: not useful.
//
//      See also: gtk_file_chooser_set_filename().
//
func (chooser *FileChooser) SelectFilename(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_select_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SelectURI selects the file to by uri. If the URI doesn’t refer to a file in
// the current folder of chooser, then the current folder of chooser will be
// changed to the folder containing filename.
//
// The function takes the following parameters:
//
//    - uri: URI to select.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SelectURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_select_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAction sets the type of operation that the chooser is performing; the user
// interface is adapted to suit the selected action. For example, an option to
// create a new folder might be shown if the action is
// GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
// GTK_FILE_CHOOSER_ACTION_OPEN.
//
// The function takes the following parameters:
//
//    - action that the file selector is performing.
//
func (chooser *FileChooser) SetAction(action FileChooserAction) {
	var _arg0 *C.GtkFileChooser      // out
	var _arg1 C.GtkFileChooserAction // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = C.GtkFileChooserAction(action)

	C.gtk_file_chooser_set_action(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(action)
}

// SetCurrentFolder sets the current folder for chooser from a local filename.
// The user will be shown the full contents of the current folder, plus user
// interface elements for navigating to other folders.
//
// In general, you should not use this function. See the [section on setting up
// a file chooser dialog][gtkfilechooserdialog-setting-up] for the rationale
// behind this.
//
// The function takes the following parameters:
//
//    - filename: full path of the new current folder.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetCurrentFolder(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_current_folder(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCurrentFolderURI sets the current folder for chooser from an URI. The user
// will be shown the full contents of the current folder, plus user interface
// elements for navigating to other folders.
//
// In general, you should not use this function. See the [section on setting up
// a file chooser dialog][gtkfilechooserdialog-setting-up] for the rationale
// behind this.
//
// The function takes the following parameters:
//
//    - uri: URI for the new current folder.
//
// The function returns the following values:
//
//    - ok: TRUE if the folder could be changed successfully, FALSE otherwise.
//
func (chooser *FileChooser) SetCurrentFolderURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_current_folder_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCurrentName sets the current name in the file selector, as if entered by
// the user. Note that the name passed in here is a UTF-8 string rather than a
// filename. This function is meant for such uses as a suggested name in a “Save
// As...” dialog. You can pass “Untitled.doc” or a similarly suitable suggestion
// for the name.
//
// If you want to preselect a particular existing file, you should use
// gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead. Please
// see the documentation for those functions for an example of using
// gtk_file_chooser_set_current_name() as well.
//
// The function takes the following parameters:
//
//    - name to use, as a UTF-8 string.
//
func (chooser *FileChooser) SetCurrentName(name string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_set_current_name(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(name)
}

// SetExtraWidget sets an application-supplied widget to provide extra options
// to the user.
//
// The function takes the following parameters:
//
//    - extraWidget: widget for extra options.
//
func (chooser *FileChooser) SetExtraWidget(extraWidget Widgetter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(extraWidget).Native()))

	C.gtk_file_chooser_set_extra_widget(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(extraWidget)
}

// SetFilename sets filename as the current filename for the file chooser, by
// changing to the file’s parent folder and actually selecting the file in list;
// all other files will be unselected. If the chooser is in
// GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will also appear in
// the dialog’s file name entry.
//
// Note that the file must exist, or nothing will be done except for the
// directory change.
//
// You should use this function only when implementing a save dialog for which
// you already have a file name to which the user may save. For example, when
// the user opens an existing file and then does Save As... to save a copy or a
// modified version. If you don’t have a file name already — for example, if the
// user just created a new file and is saving it for the first time, do not call
// this function. Instead, use something similar to this:
//
//    if (document_is_new)
//      {
//        // the user just created a new document
//        gtk_file_chooser_set_current_name (chooser, "Untitled document");
//      }
//    else
//      {
//        // the user edited an existing document
//        gtk_file_chooser_set_filename (chooser, existing_filename);
//      }
//
// In the first case, the file chooser will present the user with useful
// suggestions as to where to save his new file. In the second case, the file’s
// existing location is already known, so the file chooser will use it.
//
// The function takes the following parameters:
//
//    - filename to set as current.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetFilename(filename string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFilter sets the current filter; only the files that pass the filter will
// be displayed. If the user-selectable list of filters is non-empty, then the
// filter should be one of the filters in that list. Setting the current filter
// when the list of filters is empty is useful if you want to restrict the
// displayed set of files without letting the user change it.
//
// The function takes the following parameters:
//
//    - filter: FileFilter.
//
func (chooser *FileChooser) SetFilter(filter *FileFilter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkFileFilter  // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkFileFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	C.gtk_file_chooser_set_filter(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// SetLocalOnly sets whether only local files can be selected in the file
// selector. If local_only is TRUE (the default), then the selected file or
// files are guaranteed to be accessible through the operating systems native
// file system and therefore the application only needs to worry about the
// filename functions in FileChooser, like gtk_file_chooser_get_filename(),
// rather than the URI functions like gtk_file_chooser_get_uri(),
//
// On some systems non-native files may still be available using the native
// filesystem via a userspace filesystem (FUSE).
//
// The function takes the following parameters:
//
//    - localOnly: TRUE if only local files can be selected.
//
func (chooser *FileChooser) SetLocalOnly(localOnly bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if localOnly {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_local_only(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(localOnly)
}

// SetPreviewWidget sets an application-supplied widget to use to display a
// custom preview of the currently selected file. To implement a preview, after
// setting the preview widget, you connect to the FileChooser::update-preview
// signal, and call gtk_file_chooser_get_preview_filename() or
// gtk_file_chooser_get_preview_uri() on each change. If you can display a
// preview of the new file, update your widget and set the preview active using
// gtk_file_chooser_set_preview_widget_active(). Otherwise, set the preview
// inactive.
//
// When there is no application-supplied preview widget, or the
// application-supplied preview widget is not active, the file chooser will
// display no preview at all.
//
// The function takes the following parameters:
//
//    - previewWidget: widget for displaying preview.
//
func (chooser *FileChooser) SetPreviewWidget(previewWidget Widgetter) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(previewWidget).Native()))

	C.gtk_file_chooser_set_preview_widget(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(previewWidget)
}

// SetPreviewWidgetActive sets whether the preview widget set by
// gtk_file_chooser_set_preview_widget() should be shown for the current
// filename. When active is set to false, the file chooser may display an
// internally generated preview of the current file or it may display no preview
// at all. See gtk_file_chooser_set_preview_widget() for more details.
//
// The function takes the following parameters:
//
//    - active: whether to display the user-specified preview widget.
//
func (chooser *FileChooser) SetPreviewWidgetActive(active bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if active {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_preview_widget_active(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(active)
}

// SetSelectMultiple sets whether multiple files can be selected in the file
// selector. This is only relevant if the action is set to be
// GTK_FILE_CHOOSER_ACTION_OPEN or GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
//
// The function takes the following parameters:
//
//    - selectMultiple: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SetSelectMultiple(selectMultiple bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if selectMultiple {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_select_multiple(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(selectMultiple)
}

// SetURI sets the file referred to by uri as the current file for the file
// chooser, by changing to the URI’s parent folder and actually selecting the
// URI in the list. If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the
// URI’s base name will also appear in the dialog’s file name entry.
//
// Note that the URI must exist, or nothing will be done except for the
// directory change.
//
// You should use this function only when implementing a save dialog for which
// you already have a file name to which the user may save. For example, when
// the user opens an existing file and then does Save As... to save a copy or a
// modified version. If you don’t have a file name already — for example, if the
// user just created a new file and is saving it for the first time, do not call
// this function. Instead, use something similar to this:
//
//    if (document_is_new)
//      {
//        // the user just created a new document
//        gtk_file_chooser_set_current_name (chooser, "Untitled document");
//      }
//    else
//      {
//        // the user edited an existing document
//        gtk_file_chooser_set_uri (chooser, existing_uri);
//      }
//
// In the first case, the file chooser will present the user with useful
// suggestions as to where to save his new file. In the second case, the file’s
// existing location is already known, so the file chooser will use it.
//
// The function takes the following parameters:
//
//    - uri: URI to set as current.
//
// The function returns the following values:
//
//    - ok: not useful.
//
func (chooser *FileChooser) SetURI(uri string) bool {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_file_chooser_set_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUsePreviewLabel sets whether the file chooser should display a stock label
// with the name of the file that is being previewed; the default is TRUE.
// Applications that want to draw the whole preview area themselves should set
// this to FALSE and display the name themselves in their preview widget.
//
// See also: gtk_file_chooser_set_preview_widget().
//
// The function takes the following parameters:
//
//    - useLabel: whether to display a stock label with the name of the previewed
//      file.
//
func (chooser *FileChooser) SetUsePreviewLabel(useLabel bool) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if useLabel {
		_arg1 = C.TRUE
	}

	C.gtk_file_chooser_set_use_preview_label(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(useLabel)
}

// UnselectAll unselects all the files in the current folder of a file chooser.
func (chooser *FileChooser) UnselectAll() {
	var _arg0 *C.GtkFileChooser // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	C.gtk_file_chooser_unselect_all(_arg0)
	runtime.KeepAlive(chooser)
}

// UnselectFilename unselects a currently selected filename. If the filename is
// not in the current directory, does not exist, or is otherwise not currently
// selected, does nothing.
//
// The function takes the following parameters:
//
//    - filename to unselect.
//
func (chooser *FileChooser) UnselectFilename(filename string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_unselect_filename(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filename)
}

// UnselectURI unselects the file referred to by uri. If the file is not in the
// current directory, does not exist, or is otherwise not currently selected,
// does nothing.
//
// The function takes the following parameters:
//
//    - uri: URI to unselect.
//
func (chooser *FileChooser) UnselectURI(uri string) {
	var _arg0 *C.GtkFileChooser // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkFileChooser)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_file_chooser_unselect_uri(_arg0, _arg1)
	runtime.KeepAlive(chooser)
	runtime.KeepAlive(uri)
}
