// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// glib.Type values for gtkbooleancellaccessible.go.
var GTypeBooleanCellAccessible = externglib.Type(C.gtk_boolean_cell_accessible_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeBooleanCellAccessible, F: marshalBooleanCellAccessible},
	})
}

// BooleanCellAccessibleOverrider contains methods that are overridable.
type BooleanCellAccessibleOverrider interface {
	externglib.Objector
}

// WrapBooleanCellAccessibleOverrider wraps the BooleanCellAccessibleOverrider
// interface implementation to access the instance methods.
func WrapBooleanCellAccessibleOverrider(obj BooleanCellAccessibleOverrider) *BooleanCellAccessible {
	return wrapBooleanCellAccessible(externglib.BaseObject(obj))
}

type BooleanCellAccessible struct {
	_ [0]func() // equal guard
	RendererCellAccessible
}

var (
	_ externglib.Objector = (*BooleanCellAccessible)(nil)
)

func classInitBooleanCellAccessibler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapBooleanCellAccessible(obj *externglib.Object) *BooleanCellAccessible {
	return &BooleanCellAccessible{
		RendererCellAccessible: RendererCellAccessible{
			CellAccessible: CellAccessible{
				Accessible: Accessible{
					ObjectClass: atk.ObjectClass{
						Object: obj,
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				Component: atk.Component{
					Object: obj,
				},
				ObjectClass: atk.ObjectClass{
					Object: obj,
				},
				TableCell: atk.TableCell{
					ObjectClass: atk.ObjectClass{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalBooleanCellAccessible(p uintptr) (interface{}, error) {
	return wrapBooleanCellAccessible(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
