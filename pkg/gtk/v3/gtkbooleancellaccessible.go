// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeBooleanCellAccessible = coreglib.Type(C.gtk_boolean_cell_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBooleanCellAccessible, F: marshalBooleanCellAccessible},
	})
}

// BooleanCellAccessibleOverrides contains methods that are overridable.
type BooleanCellAccessibleOverrides struct {
}

func defaultBooleanCellAccessibleOverrides(v *BooleanCellAccessible) BooleanCellAccessibleOverrides {
	return BooleanCellAccessibleOverrides{}
}

type BooleanCellAccessible struct {
	_ [0]func() // equal guard
	RendererCellAccessible
}

var (
	_ coreglib.Objector = (*BooleanCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*BooleanCellAccessible, *BooleanCellAccessibleClass, BooleanCellAccessibleOverrides](
		GTypeBooleanCellAccessible,
		initBooleanCellAccessibleClass,
		wrapBooleanCellAccessible,
		defaultBooleanCellAccessibleOverrides,
	)
}

func initBooleanCellAccessibleClass(gclass unsafe.Pointer, overrides BooleanCellAccessibleOverrides, classInitFunc func(*BooleanCellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*BooleanCellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBooleanCellAccessible(obj *coreglib.Object) *BooleanCellAccessible {
	return &BooleanCellAccessible{
		RendererCellAccessible: RendererCellAccessible{
			CellAccessible: CellAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				AtkObject: atk.AtkObject{
					Object: obj,
				},
				Component: atk.Component{
					Object: obj,
				},
				TableCell: atk.TableCell{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalBooleanCellAccessible(p uintptr) (interface{}, error) {
	return wrapBooleanCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BooleanCellAccessibleClass: instance of this type is always passed by
// reference.
type BooleanCellAccessibleClass struct {
	*booleanCellAccessibleClass
}

// booleanCellAccessibleClass is the struct that's finalized.
type booleanCellAccessibleClass struct {
	native *C.GtkBooleanCellAccessibleClass
}

func (b *BooleanCellAccessibleClass) ParentClass() *RendererCellAccessibleClass {
	valptr := &b.native.parent_class
	var _v *RendererCellAccessibleClass // out
	_v = (*RendererCellAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
