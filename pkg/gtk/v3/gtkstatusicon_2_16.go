// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// HasTooltip returns the current value of the has-tooltip property. See
// StatusIcon:has-tooltip for more information.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - ok: current value of has-tooltip on status_icon.
//
func (statusIcon *StatusIcon) HasTooltip() bool {
	var _arg0 *C.GtkStatusIcon // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_has_tooltip(_arg0)
	runtime.KeepAlive(statusIcon)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TooltipMarkup gets the contents of the tooltip for status_icon.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. You should free the returned
//      string with g_free() when done.
//
func (statusIcon *StatusIcon) TooltipMarkup() string {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_tooltip_markup(_arg0)
	runtime.KeepAlive(statusIcon)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// TooltipText gets the contents of the tooltip for status_icon.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. You should free the returned
//      string with g_free() when done.
//
func (statusIcon *StatusIcon) TooltipText() string {
	var _arg0 *C.GtkStatusIcon // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))

	_cret = C.gtk_status_icon_get_tooltip_text(_arg0)
	runtime.KeepAlive(statusIcon)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// SetHasTooltip sets the has-tooltip property on status_icon to has_tooltip.
// See StatusIcon:has-tooltip for more information.
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function, but
// notifications can display an arbitrary amount of text using
// g_notification_set_body().
//
// The function takes the following parameters:
//
//    - hasTooltip: whether or not status_icon has a tooltip.
//
func (statusIcon *StatusIcon) SetHasTooltip(hasTooltip bool) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 C.gboolean       // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	if hasTooltip {
		_arg1 = C.TRUE
	}

	C.gtk_status_icon_set_has_tooltip(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(hasTooltip)
}

// SetTooltipMarkup sets markup as the contents of the tooltip, which is marked
// up with the [Pango text markup language][PangoMarkupFormat].
//
// This function will take care of setting StatusIcon:has-tooltip to TRUE and of
// the default handler for the StatusIcon::query-tooltip signal.
//
// See also the StatusIcon:tooltip-markup property and gtk_tooltip_set_markup().
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function takes the following parameters:
//
//    - markup (optional) contents of the tooltip for status_icon, or NULL.
//
func (statusIcon *StatusIcon) SetTooltipMarkup(markup string) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	if markup != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(markup)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_status_icon_set_tooltip_markup(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(markup)
}

// SetTooltipText sets text as the contents of the tooltip.
//
// This function will take care of setting StatusIcon:has-tooltip to TRUE and of
// the default handler for the StatusIcon::query-tooltip signal.
//
// See also the StatusIcon:tooltip-text property and gtk_tooltip_set_text().
//
// Deprecated: Use #GNotification and Application to provide status
// notifications; there is no direct replacement for this function.
//
// The function takes the following parameters:
//
//    - text contents of the tooltip for status_icon.
//
func (statusIcon *StatusIcon) SetTooltipText(text string) {
	var _arg0 *C.GtkStatusIcon // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.GtkStatusIcon)(unsafe.Pointer(coreglib.InternObject(statusIcon).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_status_icon_set_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(statusIcon)
	runtime.KeepAlive(text)
}
