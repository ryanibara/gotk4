// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gtk3_ToolbarClass_popup_context_menu(void*, gint, gint, gint);
// extern gboolean _gotk4_gtk3_Toolbar_ConnectFocusHomeOrEnd(gpointer, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_Toolbar_ConnectPopupContextMenu(gpointer, gint, gint, gint, guintptr);
import "C"

// GTypeToolbarSpaceStyle returns the GType for the type ToolbarSpaceStyle.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeToolbarSpaceStyle() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ToolbarSpaceStyle").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalToolbarSpaceStyle)
	return gtype
}

// GTypeToolbar returns the GType for the type Toolbar.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeToolbar() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "Toolbar").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalToolbar)
	return gtype
}

// ToolbarSpaceStyle: whether spacers are vertical lines or just blank.
//
// Deprecated: since version 3.20.
type ToolbarSpaceStyle C.gint

const (
	// ToolbarSpaceEmpty: use blank spacers.
	ToolbarSpaceEmpty ToolbarSpaceStyle = iota
	// ToolbarSpaceLine: use vertical lines for spacers.
	ToolbarSpaceLine
)

func marshalToolbarSpaceStyle(p uintptr) (interface{}, error) {
	return ToolbarSpaceStyle(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ToolbarSpaceStyle.
func (t ToolbarSpaceStyle) String() string {
	switch t {
	case ToolbarSpaceEmpty:
		return "Empty"
	case ToolbarSpaceLine:
		return "Line"
	default:
		return fmt.Sprintf("ToolbarSpaceStyle(%d)", t)
	}
}

// ToolbarOverrider contains methods that are overridable.
type ToolbarOverrider interface {
	// The function takes the following parameters:
	//
	//    - x
	//    - y
	//    - buttonNumber
	//
	// The function returns the following values:
	//
	PopupContextMenu(x, y, buttonNumber int32) bool
}

// Toolbar: toolbar is created with a call to gtk_toolbar_new().
//
// A toolbar can contain instances of a subclass of ToolItem. To add a ToolItem
// to the a toolbar, use gtk_toolbar_insert(). To remove an item from the
// toolbar use gtk_container_remove(). To add a button to the toolbar, add an
// instance of ToolButton.
//
// Toolbar items can be visually grouped by adding instances of
// SeparatorToolItem to the toolbar. If the GtkToolbar child property “expand”
// is UE and the property SeparatorToolItem:draw is set to LSE, the effect is to
// force all following items to the end of the toolbar.
//
// By default, a toolbar can be shrunk, upon which it will add an arrow button
// to show an overflow menu offering access to any ToolItem child that has a
// proxy menu item. To disable this and request enough size for all children,
// call gtk_toolbar_set_show_arrow() to set Toolbar:show-arrow to FALSE.
//
// Creating a context menu for the toolbar can be done by connecting to the
// Toolbar::popup-context-menu signal.
//
//
// CSS nodes
//
// GtkToolbar has a single CSS node with name toolbar.
type Toolbar struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	atk.ImplementorIface
	coreglib.InitiallyUnowned
	Buildable
	Orientable
	ToolShell
	Widget
}

var (
	_ Containerer       = (*Toolbar)(nil)
	_ coreglib.Objector = (*Toolbar)(nil)
	_ Widgetter         = (*Toolbar)(nil)
)

func classInitToolbarrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "ToolbarClass")

	if _, ok := goval.(interface {
		PopupContextMenu(x, y, buttonNumber int32) bool
	}); ok {
		o := pclass.StructFieldOffset("popup_context_menu")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_ToolbarClass_popup_context_menu)
	}
}

//export _gotk4_gtk3_ToolbarClass_popup_context_menu
func _gotk4_gtk3_ToolbarClass_popup_context_menu(arg0 *C.void, arg1 C.gint, arg2 C.gint, arg3 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PopupContextMenu(x, y, buttonNumber int32) bool
	})

	var _x int32            // out
	var _y int32            // out
	var _buttonNumber int32 // out

	_x = int32(arg1)
	_y = int32(arg2)
	_buttonNumber = int32(arg3)

	ok := iface.PopupContextMenu(_x, _y, _buttonNumber)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func wrapToolbar(obj *coreglib.Object) *Toolbar {
	return &Toolbar{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		ImplementorIface: atk.ImplementorIface{
			Object: obj,
		},
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
		Orientable: Orientable{
			Object: obj,
		},
		ToolShell: ToolShell{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalToolbar(p uintptr) (interface{}, error) {
	return wrapToolbar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_Toolbar_ConnectFocusHomeOrEnd
func _gotk4_gtk3_Toolbar_ConnectFocusHomeOrEnd(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) (cret C.gboolean) {
	var f func(focusHome bool) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(focusHome bool) (ok bool))
	}

	var _focusHome bool // out

	if arg1 != 0 {
		_focusHome = true
	}

	ok := f(_focusHome)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectFocusHomeOrEnd: keybinding signal used internally by GTK+. This signal
// can't be used in application code.
func (toolbar *Toolbar) ConnectFocusHomeOrEnd(f func(focusHome bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(toolbar, "focus-home-or-end", false, unsafe.Pointer(C._gotk4_gtk3_Toolbar_ConnectFocusHomeOrEnd), f)
}

//export _gotk4_gtk3_Toolbar_ConnectPopupContextMenu
func _gotk4_gtk3_Toolbar_ConnectPopupContextMenu(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.gint, arg4 C.guintptr) (cret C.gboolean) {
	var f func(x, y, button int32) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y, button int32) (ok bool))
	}

	var _x int32      // out
	var _y int32      // out
	var _button int32 // out

	_x = int32(arg1)
	_y = int32(arg2)
	_button = int32(arg3)

	ok := f(_x, _y, _button)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectPopupContextMenu is emitted when the user right-clicks the toolbar or
// uses the keybinding to display a popup menu.
//
// Application developers should handle this signal if they want to display a
// context menu on the toolbar. The context-menu should appear at the
// coordinates given by x and y. The mouse button number is given by the button
// parameter. If the menu was popped up using the keybaord, button is -1.
func (toolbar *Toolbar) ConnectPopupContextMenu(f func(x, y, button int32) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(toolbar, "popup-context-menu", false, unsafe.Pointer(C._gotk4_gtk3_Toolbar_ConnectPopupContextMenu), f)
}

// NewToolbar creates a new toolbar.
//
// The function returns the following values:
//
//    - toolbar: newly-created toolbar.
//
func NewToolbar() *Toolbar {
	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("new_Toolbar", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _toolbar *Toolbar // out

	_toolbar = wrapToolbar(coreglib.Take(unsafe.Pointer(_cret)))

	return _toolbar
}

// DropIndex returns the position corresponding to the indicated point on
// toolbar. This is useful when dragging items to the toolbar: this function
// returns the position a new item should be inserted.
//
// x and y are in toolbar coordinates.
//
// The function takes the following parameters:
//
//    - x coordinate of a point on the toolbar.
//    - y coordinate of a point on the toolbar.
//
// The function returns the following values:
//
//    - gint: position corresponding to the point (x, y) on the toolbar.
//
func (toolbar *Toolbar) DropIndex(x, y int32) int32 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(x)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(y)

	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("get_drop_index", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ItemIndex returns the position of item on the toolbar, starting from 0. It is
// an error if item is not a child of the toolbar.
//
// The function takes the following parameters:
//
//    - item that is a child of toolbar.
//
// The function returns the following values:
//
//    - gint: position of item on the toolbar.
//
func (toolbar *Toolbar) ItemIndex(item *ToolItem) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(item).Native()))

	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("get_item_index", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(item)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// NItems returns the number of items on the toolbar.
//
// The function returns the following values:
//
//    - gint: number of items on the toolbar.
//
func (toolbar *Toolbar) NItems() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))

	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("get_n_items", _args[:], nil)
	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toolbar)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// NthItem returns the n'th item on toolbar, or NULL if the toolbar does not
// contain an n'th item.
//
// The function takes the following parameters:
//
//    - n on the toolbar.
//
// The function returns the following values:
//
//    - toolItem (optional): n'th ToolItem on toolbar, or NULL if there isn’t an
//      n'th item.
//
func (toolbar *Toolbar) NthItem(n int32) *ToolItem {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(n)

	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("get_nth_item", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(n)

	var _toolItem *ToolItem // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_toolItem = wrapToolItem(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _toolItem
}

// ShowArrow returns whether the toolbar has an overflow menu. See
// gtk_toolbar_set_show_arrow().
//
// The function returns the following values:
//
//    - ok: TRUE if the toolbar has an overflow menu.
//
func (toolbar *Toolbar) ShowArrow() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))

	_gret := girepository.MustFind("Gtk", "Toolbar").InvokeMethod("get_show_arrow", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toolbar)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Insert a ToolItem into the toolbar at position pos. If pos is 0 the item is
// prepended to the start of the toolbar. If pos is negative, the item is
// appended to the end of the toolbar.
//
// The function takes the following parameters:
//
//    - item: ToolItem.
//    - pos: position of the new item.
//
func (toolbar *Toolbar) Insert(item *ToolItem, pos int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(item).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(pos)

	girepository.MustFind("Gtk", "Toolbar").InvokeMethod("insert", _args[:], nil)

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(item)
	runtime.KeepAlive(pos)
}

// SetDropHighlightItem highlights toolbar to give an idea of what it would look
// like if item was added to toolbar at the position indicated by index_. If
// item is NULL, highlighting is turned off. In that case index_ is ignored.
//
// The tool_item passed to this function must not be part of any widget
// hierarchy. When an item is set as drop highlight item it can not added to any
// widget hierarchy or used as highlight item for another toolbar.
//
// The function takes the following parameters:
//
//    - toolItem (optional) or NULL to turn of highlighting.
//    - index_: position on toolbar.
//
func (toolbar *Toolbar) SetDropHighlightItem(toolItem *ToolItem, index_ int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	if toolItem != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolItem).Native()))
	}
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(index_)

	girepository.MustFind("Gtk", "Toolbar").InvokeMethod("set_drop_highlight_item", _args[:], nil)

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(toolItem)
	runtime.KeepAlive(index_)
}

// SetShowArrow sets whether to show an overflow menu when toolbar isn’t
// allocated enough size to show all of its items. If TRUE, items which can’t
// fit in toolbar, and which have a proxy menu item set by
// gtk_tool_item_set_proxy_menu_item() or ToolItem::create-menu-proxy, will be
// available in an overflow menu, which can be opened by an added arrow button.
// If FALSE, toolbar will request enough size to fit all of its child items
// without any overflow.
//
// The function takes the following parameters:
//
//    - showArrow: whether to show an overflow menu.
//
func (toolbar *Toolbar) SetShowArrow(showArrow bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))
	if showArrow {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Toolbar").InvokeMethod("set_show_arrow", _args[:], nil)

	runtime.KeepAlive(toolbar)
	runtime.KeepAlive(showArrow)
}

// UnsetIconSize unsets toolbar icon size set with gtk_toolbar_set_icon_size(),
// so that user preferences will be used to determine the icon size.
func (toolbar *Toolbar) UnsetIconSize() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))

	girepository.MustFind("Gtk", "Toolbar").InvokeMethod("unset_icon_size", _args[:], nil)

	runtime.KeepAlive(toolbar)
}

// UnsetStyle unsets a toolbar style set with gtk_toolbar_set_style(), so that
// user preferences will be used to determine the toolbar style.
func (toolbar *Toolbar) UnsetStyle() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(toolbar).Native()))

	girepository.MustFind("Gtk", "Toolbar").InvokeMethod("unset_style", _args[:], nil)

	runtime.KeepAlive(toolbar)
}
