// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_AdjustmentClass_changed(void*);
// extern void _gotk4_gtk3_AdjustmentClass_value_changed(void*);
// extern void _gotk4_gtk3_Adjustment_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Adjustment_ConnectValueChanged(gpointer, guintptr);
import "C"

// GTypeAdjustment returns the GType for the type Adjustment.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeAdjustment() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "Adjustment").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalAdjustment)
	return gtype
}

// AdjustmentOverrider contains methods that are overridable.
type AdjustmentOverrider interface {
	// Changed emits a Adjustment::changed signal from the Adjustment. This is
	// typically called by the owner of the Adjustment after it has changed any
	// of the Adjustment properties other than the value.
	//
	// Deprecated: GTK+ emits Adjustment::changed itself whenever any of the
	// properties (other than value) change.
	Changed()
	// ValueChanged emits a Adjustment::value-changed signal from the
	// Adjustment. This is typically called by the owner of the Adjustment after
	// it has changed the Adjustment:value property.
	//
	// Deprecated: GTK+ emits Adjustment::value-changed itself whenever the
	// value changes.
	ValueChanged()
}

// Adjustment object represents a value which has an associated lower and upper
// bound, together with step and page increments, and a page size. It is used
// within several GTK+ widgets, including SpinButton, Viewport, and Range (which
// is a base class for Scrollbar and Scale).
//
// The Adjustment object does not update the value itself. Instead it is left up
// to the owner of the Adjustment to control the value.
type Adjustment struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned
}

var ()

func classInitAdjustmenter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "AdjustmentClass")

	if _, ok := goval.(interface{ Changed() }); ok {
		o := pclass.StructFieldOffset("changed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_AdjustmentClass_changed)
	}

	if _, ok := goval.(interface{ ValueChanged() }); ok {
		o := pclass.StructFieldOffset("value_changed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk3_AdjustmentClass_value_changed)
	}
}

//export _gotk4_gtk3_AdjustmentClass_changed
func _gotk4_gtk3_AdjustmentClass_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Changed() })

	iface.Changed()
}

//export _gotk4_gtk3_AdjustmentClass_value_changed
func _gotk4_gtk3_AdjustmentClass_value_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ValueChanged() })

	iface.ValueChanged()
}

func wrapAdjustment(obj *coreglib.Object) *Adjustment {
	return &Adjustment{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalAdjustment(p uintptr) (interface{}, error) {
	return wrapAdjustment(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_Adjustment_ConnectChanged
func _gotk4_gtk3_Adjustment_ConnectChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectChanged is emitted when one or more of the Adjustment properties have
// been changed, other than the Adjustment:value property.
func (adjustment *Adjustment) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(adjustment, "changed", false, unsafe.Pointer(C._gotk4_gtk3_Adjustment_ConnectChanged), f)
}

//export _gotk4_gtk3_Adjustment_ConnectValueChanged
func _gotk4_gtk3_Adjustment_ConnectValueChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectValueChanged is emitted when the Adjustment:value property has been
// changed.
func (adjustment *Adjustment) ConnectValueChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(adjustment, "value-changed", false, unsafe.Pointer(C._gotk4_gtk3_Adjustment_ConnectValueChanged), f)
}

// NewAdjustment creates a new Adjustment.
//
// The function takes the following parameters:
//
//    - value: initial value.
//    - lower: minimum value.
//    - upper: maximum value.
//    - stepIncrement: step increment.
//    - pageIncrement: page increment.
//    - pageSize: page size.
//
// The function returns the following values:
//
//    - adjustment: new Adjustment.
//
func NewAdjustment(value, lower, upper, stepIncrement, pageIncrement, pageSize float64) *Adjustment {
	var _args [6]girepository.Argument

	*(*C.gdouble)(unsafe.Pointer(&_args[0])) = C.gdouble(value)
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(lower)
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(upper)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(stepIncrement)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(pageIncrement)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(pageSize)

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("new_Adjustment", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(value)
	runtime.KeepAlive(lower)
	runtime.KeepAlive(upper)
	runtime.KeepAlive(stepIncrement)
	runtime.KeepAlive(pageIncrement)
	runtime.KeepAlive(pageSize)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// Changed emits a Adjustment::changed signal from the Adjustment. This is
// typically called by the owner of the Adjustment after it has changed any of
// the Adjustment properties other than the value.
//
// Deprecated: GTK+ emits Adjustment::changed itself whenever any of the
// properties (other than value) change.
func (adjustment *Adjustment) Changed() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("changed", _args[:], nil)

	runtime.KeepAlive(adjustment)
}

// ClampPage updates the Adjustment:value property to ensure that the range
// between lower and upper is in the current page (i.e. between Adjustment:value
// and Adjustment:value + Adjustment:page-size). If the range is larger than the
// page size, then only the start of it will be in the current page.
//
// A Adjustment::value-changed signal will be emitted if the value is changed.
//
// The function takes the following parameters:
//
//    - lower value.
//    - upper value.
//
func (adjustment *Adjustment) ClampPage(lower, upper float64) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(lower)
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(upper)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("clamp_page", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(lower)
	runtime.KeepAlive(upper)
}

// Configure sets all properties of the adjustment at once.
//
// Use this function to avoid multiple emissions of the Adjustment::changed
// signal. See gtk_adjustment_set_lower() for an alternative way of compressing
// multiple emissions of Adjustment::changed into one.
//
// The function takes the following parameters:
//
//    - value: new value.
//    - lower: new minimum value.
//    - upper: new maximum value.
//    - stepIncrement: new step increment.
//    - pageIncrement: new page increment.
//    - pageSize: new page size.
//
func (adjustment *Adjustment) Configure(value, lower, upper, stepIncrement, pageIncrement, pageSize float64) {
	var _args [7]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(value)
	*(*C.gdouble)(unsafe.Pointer(&_args[2])) = C.gdouble(lower)
	*(*C.gdouble)(unsafe.Pointer(&_args[3])) = C.gdouble(upper)
	*(*C.gdouble)(unsafe.Pointer(&_args[4])) = C.gdouble(stepIncrement)
	*(*C.gdouble)(unsafe.Pointer(&_args[5])) = C.gdouble(pageIncrement)
	*(*C.gdouble)(unsafe.Pointer(&_args[6])) = C.gdouble(pageSize)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("configure", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(value)
	runtime.KeepAlive(lower)
	runtime.KeepAlive(upper)
	runtime.KeepAlive(stepIncrement)
	runtime.KeepAlive(pageIncrement)
	runtime.KeepAlive(pageSize)
}

// Lower retrieves the minimum value of the adjustment.
//
// The function returns the following values:
//
//    - gdouble: current minimum value of the adjustment.
//
func (adjustment *Adjustment) Lower() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_lower", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// MinimumIncrement gets the smaller of step increment and page increment.
//
// The function returns the following values:
//
//    - gdouble: minimum increment of adjustment.
//
func (adjustment *Adjustment) MinimumIncrement() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_minimum_increment", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// PageIncrement retrieves the page increment of the adjustment.
//
// The function returns the following values:
//
//    - gdouble: current page increment of the adjustment.
//
func (adjustment *Adjustment) PageIncrement() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_page_increment", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// PageSize retrieves the page size of the adjustment.
//
// The function returns the following values:
//
//    - gdouble: current page size of the adjustment.
//
func (adjustment *Adjustment) PageSize() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_page_size", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// StepIncrement retrieves the step increment of the adjustment.
//
// The function returns the following values:
//
//    - gdouble: current step increment of the adjustment.
//
func (adjustment *Adjustment) StepIncrement() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_step_increment", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// Upper retrieves the maximum value of the adjustment.
//
// The function returns the following values:
//
//    - gdouble: current maximum value of the adjustment.
//
func (adjustment *Adjustment) Upper() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_upper", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// Value gets the current value of the adjustment. See
// gtk_adjustment_set_value().
//
// The function returns the following values:
//
//    - gdouble: current value of the adjustment.
//
func (adjustment *Adjustment) Value() float64 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	_gret := girepository.MustFind("Gtk", "Adjustment").InvokeMethod("get_value", _args[:], nil)
	_cret = *(*C.gdouble)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(adjustment)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.gdouble)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// SetLower sets the minimum value of the adjustment.
//
// When setting multiple adjustment properties via their individual setters,
// multiple Adjustment::changed signals will be emitted. However, since the
// emission of the Adjustment::changed signal is tied to the emission of the
// #GObject::notify signals of the changed properties, it’s possible to compress
// the Adjustment::changed signals into one by calling g_object_freeze_notify()
// and g_object_thaw_notify() around the calls to the individual setters.
//
// Alternatively, using a single g_object_set() for all the properties to
// change, or using gtk_adjustment_configure() has the same effect of
// compressing Adjustment::changed emissions.
//
// The function takes the following parameters:
//
//    - lower: new minimum value.
//
func (adjustment *Adjustment) SetLower(lower float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(lower)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_lower", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(lower)
}

// SetPageIncrement sets the page increment of the adjustment.
//
// See gtk_adjustment_set_lower() about how to compress multiple emissions of
// the Adjustment::changed signal when setting multiple adjustment properties.
//
// The function takes the following parameters:
//
//    - pageIncrement: new page increment.
//
func (adjustment *Adjustment) SetPageIncrement(pageIncrement float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(pageIncrement)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_page_increment", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(pageIncrement)
}

// SetPageSize sets the page size of the adjustment.
//
// See gtk_adjustment_set_lower() about how to compress multiple emissions of
// the GtkAdjustment::changed signal when setting multiple adjustment
// properties.
//
// The function takes the following parameters:
//
//    - pageSize: new page size.
//
func (adjustment *Adjustment) SetPageSize(pageSize float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(pageSize)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_page_size", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(pageSize)
}

// SetStepIncrement sets the step increment of the adjustment.
//
// See gtk_adjustment_set_lower() about how to compress multiple emissions of
// the Adjustment::changed signal when setting multiple adjustment properties.
//
// The function takes the following parameters:
//
//    - stepIncrement: new step increment.
//
func (adjustment *Adjustment) SetStepIncrement(stepIncrement float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(stepIncrement)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_step_increment", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(stepIncrement)
}

// SetUpper sets the maximum value of the adjustment.
//
// Note that values will be restricted by upper - page-size if the page-size
// property is nonzero.
//
// See gtk_adjustment_set_lower() about how to compress multiple emissions of
// the Adjustment::changed signal when setting multiple adjustment properties.
//
// The function takes the following parameters:
//
//    - upper: new maximum value.
//
func (adjustment *Adjustment) SetUpper(upper float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(upper)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_upper", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(upper)
}

// SetValue sets the Adjustment value. The value is clamped to lie between
// Adjustment:lower and Adjustment:upper.
//
// Note that for adjustments which are used in a Scrollbar, the effective range
// of allowed values goes from Adjustment:lower to Adjustment:upper -
// Adjustment:page-size.
//
// The function takes the following parameters:
//
//    - value: new value.
//
func (adjustment *Adjustment) SetValue(value float64) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	*(*C.gdouble)(unsafe.Pointer(&_args[1])) = C.gdouble(value)

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("set_value", _args[:], nil)

	runtime.KeepAlive(adjustment)
	runtime.KeepAlive(value)
}

// ValueChanged emits a Adjustment::value-changed signal from the Adjustment.
// This is typically called by the owner of the Adjustment after it has changed
// the Adjustment:value property.
//
// Deprecated: GTK+ emits Adjustment::value-changed itself whenever the value
// changes.
func (adjustment *Adjustment) ValueChanged() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "Adjustment").InvokeMethod("value_changed", _args[:], nil)

	runtime.KeepAlive(adjustment)
}
