// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_FontButtonClass_font_set(GtkFontButton*);
// extern void _gotk4_gtk3_FontButton_ConnectFontSet(gpointer, guintptr);
import "C"

// glib.Type values for gtkfontbutton.go.
var GTypeFontButton = coreglib.Type(C.gtk_font_button_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFontButton, F: marshalFontButton},
	})
}

// FontButtonOverrider contains methods that are overridable.
type FontButtonOverrider interface {
	FontSet()
}

// FontButton is a button which displays the currently selected font an allows
// to open a font chooser dialog to change the font. It is suitable widget for
// selecting a font in a preference dialog.
//
//
// CSS nodes
//
// GtkFontButton has a single CSS node with name button and style class .font.
type FontButton struct {
	_ [0]func() // equal guard
	Button

	*coreglib.Object
	FontChooser
}

var (
	_ coreglib.Objector = (*FontButton)(nil)
	_ Binner            = (*FontButton)(nil)
)

func classInitFontButtonner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkFontButtonClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkFontButtonClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ FontSet() }); ok {
		pclass.font_set = (*[0]byte)(C._gotk4_gtk3_FontButtonClass_font_set)
	}
}

//export _gotk4_gtk3_FontButtonClass_font_set
func _gotk4_gtk3_FontButtonClass_font_set(arg0 *C.GtkFontButton) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FontSet() })

	iface.FontSet()
}

func wrapFontButton(obj *coreglib.Object) *FontButton {
	return &FontButton{
		Button: Button{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
		Object: obj,
		FontChooser: FontChooser{
			Object: obj,
		},
	}
}

func marshalFontButton(p uintptr) (interface{}, error) {
	return wrapFontButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_FontButton_ConnectFontSet
func _gotk4_gtk3_FontButton_ConnectFontSet(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectFontSet signal is emitted when the user selects a font. When handling
// this signal, use gtk_font_chooser_get_font() to find out which font was just
// selected.
//
// Note that this signal is only emitted when the user changes the font. If you
// need to react to programmatic font changes as well, use the notify::font
// signal.
func (fontButton *FontButton) ConnectFontSet(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(fontButton, "font-set", false, unsafe.Pointer(C._gotk4_gtk3_FontButton_ConnectFontSet), f)
}

// NewFontButton creates a new font picker widget.
//
// The function returns the following values:
//
//    - fontButton: new font picker widget.
//
func NewFontButton() *FontButton {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("new_FontButton", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _fontButton *FontButton // out

	_fontButton = wrapFontButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _fontButton
}

// NewFontButtonWithFont creates a new font picker widget.
//
// The function takes the following parameters:
//
//    - fontname: name of font to display in font chooser dialog.
//
// The function returns the following values:
//
//    - fontButton: new font picker widget.
//
func NewFontButtonWithFont(fontname string) *FontButton {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(fontname)))
	defer C.free(unsafe.Pointer(_arg0))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("new_FontButton_with_font", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontname)

	var _fontButton *FontButton // out

	_fontButton = wrapFontButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _fontButton
}

// FontName retrieves the name of the currently selected font. This name
// includes style and size information as well. If you want to render something
// with the font, use this string with pango_font_description_from_string() . If
// youâ€™re interested in peeking certain values (family name, style, size,
// weight) just query these properties from the FontDescription object.
//
// Deprecated: Use gtk_font_chooser_get_font() instead.
//
// The function returns the following values:
//
//    - utf8: internal copy of the font name which must not be freed.
//
func (fontButton *FontButton) FontName() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_font_name", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ShowSize returns whether the font size will be shown in the label.
//
// The function returns the following values:
//
//    - ok: whether the font size will be shown in the label.
//
func (fontButton *FontButton) ShowSize() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_show_size", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowStyle returns whether the name of the font style will be shown in the
// label.
//
// The function returns the following values:
//
//    - ok: whether the font style will be shown in the label.
//
func (fontButton *FontButton) ShowStyle() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_show_style", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Title retrieves the title of the font chooser dialog.
//
// The function returns the following values:
//
//    - utf8: internal copy of the title string which must not be freed.
//
func (fontButton *FontButton) Title() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_title", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UseFont returns whether the selected font is used in the label.
//
// The function returns the following values:
//
//    - ok: whether the selected font is used in the label.
//
func (fontButton *FontButton) UseFont() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_use_font", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UseSize returns whether the selected size is used in the label.
//
// The function returns the following values:
//
//    - ok: whether the selected size is used in the label.
//
func (fontButton *FontButton) UseSize() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	*(**FontButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("get_use_size", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFontName sets or updates the currently-displayed font in font picker
// dialog.
//
// Deprecated: Use gtk_font_chooser_set_font() instead.
//
// The function takes the following parameters:
//
//    - fontname: name of font to display in font chooser dialog.
//
// The function returns the following values:
//
//    - ok: TRUE.
//
func (fontButton *FontButton) SetFontName(fontname string) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(fontname)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_font_name", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(fontname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetShowSize: if show_size is TRUE, the font size will be displayed along with
// the name of the selected font.
//
// The function takes the following parameters:
//
//    - showSize: TRUE if font size should be displayed in dialog.
//
func (fontButton *FontButton) SetShowSize(showSize bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	if showSize {
		_arg1 = C.TRUE
	}
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_show_size", args[:], nil)

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(showSize)
}

// SetShowStyle: if show_style is TRUE, the font style will be displayed along
// with name of the selected font.
//
// The function takes the following parameters:
//
//    - showStyle: TRUE if font style should be displayed in label.
//
func (fontButton *FontButton) SetShowStyle(showStyle bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	if showStyle {
		_arg1 = C.TRUE
	}
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_show_style", args[:], nil)

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(showStyle)
}

// SetTitle sets the title for the font chooser dialog.
//
// The function takes the following parameters:
//
//    - title: string containing the font chooser dialog title.
//
func (fontButton *FontButton) SetTitle(title string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_title", args[:], nil)

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(title)
}

// SetUseFont: if use_font is TRUE, the font name will be written using the
// selected font.
//
// The function takes the following parameters:
//
//    - useFont: if TRUE, font name will be written using font chosen.
//
func (fontButton *FontButton) SetUseFont(useFont bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	if useFont {
		_arg1 = C.TRUE
	}
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_use_font", args[:], nil)

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(useFont)
}

// SetUseSize: if use_size is TRUE, the font name will be written using the
// selected size.
//
// The function takes the following parameters:
//
//    - useSize: if TRUE, font name will be written using the selected size.
//
func (fontButton *FontButton) SetUseSize(useSize bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontButton).Native()))
	if useSize {
		_arg1 = C.TRUE
	}
	*(**FontButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "FontButton").InvokeMethod("set_use_size", args[:], nil)

	runtime.KeepAlive(fontButton)
	runtime.KeepAlive(useSize)
}
