// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_FontButton_ConnectFontSet(gpointer, guintptr);
// extern void _gotk4_gtk3_FontButtonClass_font_set(GtkFontButton*);
// void _gotk4_gtk3_FontButton_virtual_font_set(void* fnptr, GtkFontButton* arg0) {
//   ((void (*)(GtkFontButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeFontButton = coreglib.Type(C.gtk_font_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontButton, F: marshalFontButton},
	})
}

// FontButtonOverrides contains methods that are overridable.
type FontButtonOverrides struct {
	FontSet func()
}

func defaultFontButtonOverrides(v *FontButton) FontButtonOverrides {
	return FontButtonOverrides{
		FontSet: v.fontSet,
	}
}

// FontButton is a button which displays the currently selected font an allows
// to open a font chooser dialog to change the font. It is suitable widget for
// selecting a font in a preference dialog.
//
//
// CSS nodes
//
// GtkFontButton has a single CSS node with name button and style class .font.
type FontButton struct {
	_ [0]func() // equal guard
	Button

	*coreglib.Object
	FontChooser
}

var (
	_ coreglib.Objector = (*FontButton)(nil)
	_ Binner            = (*FontButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontButton, *FontButtonClass, FontButtonOverrides](
		GTypeFontButton,
		initFontButtonClass,
		wrapFontButton,
		defaultFontButtonOverrides,
	)
}

func initFontButtonClass(gclass unsafe.Pointer, overrides FontButtonOverrides, classInitFunc func(*FontButtonClass)) {
	pclass := (*C.GtkFontButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeFontButton))))

	if overrides.FontSet != nil {
		pclass.font_set = (*[0]byte)(C._gotk4_gtk3_FontButtonClass_font_set)
	}

	if classInitFunc != nil {
		class := (*FontButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontButton(obj *coreglib.Object) *FontButton {
	return &FontButton{
		Button: Button{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
		Object: obj,
		FontChooser: FontChooser{
			Object: obj,
		},
	}
}

func marshalFontButton(p uintptr) (interface{}, error) {
	return wrapFontButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectFontSet signal is emitted when the user selects a font. When handling
// this signal, use gtk_font_chooser_get_font() to find out which font was just
// selected.
//
// Note that this signal is only emitted when the user changes the font. If you
// need to react to programmatic font changes as well, use the notify::font
// signal.
func (fontButton *FontButton) ConnectFontSet(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(fontButton, "font-set", false, unsafe.Pointer(C._gotk4_gtk3_FontButton_ConnectFontSet), f)
}

func (gfp *FontButton) fontSet() {
	gclass := (*C.GtkFontButtonClass)(coreglib.PeekParentClass(gfp))
	fnarg := gclass.font_set

	var _arg0 *C.GtkFontButton // out

	_arg0 = (*C.GtkFontButton)(unsafe.Pointer(coreglib.InternObject(gfp).Native()))

	C._gotk4_gtk3_FontButton_virtual_font_set(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(gfp)
}

// FontButtonClass: instance of this type is always passed by reference.
type FontButtonClass struct {
	*fontButtonClass
}

// fontButtonClass is the struct that's finalized.
type fontButtonClass struct {
	native *C.GtkFontButtonClass
}

func (f *FontButtonClass) ParentClass() *ButtonClass {
	valptr := &f.native.parent_class
	var _v *ButtonClass // out
	_v = (*ButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
