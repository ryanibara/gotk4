// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AddMark adds a mark at value.
//
// A mark is indicated visually by drawing a tick mark next to the scale, and
// GTK+ makes it easy for the user to position the scale exactly at the marks
// value.
//
// If markup is not NULL, text is shown next to the tick mark.
//
// To remove marks from a scale, use gtk_scale_clear_marks().
//
// The function takes the following parameters:
//
//    - value at which the mark is placed, must be between the lower and upper
//      limits of the scalesâ€™ adjustment.
//    - position: where to draw the mark. For a horizontal scale, K_POS_TOP and
//      GTK_POS_LEFT are drawn above the scale, anything else below. For a
//      vertical scale, K_POS_LEFT and GTK_POS_TOP are drawn to the left of the
//      scale, anything else to the right.
//    - markup (optional): text to be shown at the mark, using [Pango
//      markup][PangoMarkupFormat], or NULL.
//
func (scale *Scale) AddMark(value float64, position PositionType, markup string) {
	var _arg0 *C.GtkScale       // out
	var _arg1 C.gdouble         // out
	var _arg2 C.GtkPositionType // out
	var _arg3 *C.gchar          // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))
	_arg1 = C.gdouble(value)
	_arg2 = C.GtkPositionType(position)
	if markup != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(markup)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	C.gtk_scale_add_mark(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(value)
	runtime.KeepAlive(position)
	runtime.KeepAlive(markup)
}

// ClearMarks removes any marks that have been added with gtk_scale_add_mark().
func (scale *Scale) ClearMarks() {
	var _arg0 *C.GtkScale // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))

	C.gtk_scale_clear_marks(_arg0)
	runtime.KeepAlive(scale)
}
