// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_CheckButtonClass_draw_indicator(GtkCheckButton*, cairo_t*);
// void _gotk4_gtk3_CheckButton_virtual_draw_indicator(void* fnptr, GtkCheckButton* arg0, cairo_t* arg1) {
//   ((void (*)(GtkCheckButton*, cairo_t*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeCheckButton = coreglib.Type(C.gtk_check_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCheckButton, F: marshalCheckButton},
	})
}

// CheckButtonOverrides contains methods that are overridable.
type CheckButtonOverrides struct {
	// The function takes the following parameters:
	//
	DrawIndicator func(cr *cairo.Context)
}

func defaultCheckButtonOverrides(v *CheckButton) CheckButtonOverrides {
	return CheckButtonOverrides{
		DrawIndicator: v.drawIndicator,
	}
}

// CheckButton places a discrete ToggleButton next to a widget, (usually a
// Label). See the section on ToggleButton widgets for more information about
// toggle/check buttons.
//
// The important signal ( ToggleButton::toggled ) is also inherited from
// ToggleButton.
//
// CSS nodes
//
//    button.check
//    ├── check
//    ╰── <child>
//
// A GtkCheckButton without indicator changes the name of its main node to
// button and adds a .check style class to it. The subnode is invisible in this
// case.
type CheckButton struct {
	_ [0]func() // equal guard
	ToggleButton
}

var (
	_ Binner            = (*CheckButton)(nil)
	_ coreglib.Objector = (*CheckButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CheckButton, *CheckButtonClass, CheckButtonOverrides](
		GTypeCheckButton,
		initCheckButtonClass,
		wrapCheckButton,
		defaultCheckButtonOverrides,
	)
}

func initCheckButtonClass(gclass unsafe.Pointer, overrides CheckButtonOverrides, classInitFunc func(*CheckButtonClass)) {
	pclass := (*C.GtkCheckButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeCheckButton))))

	if overrides.DrawIndicator != nil {
		pclass.draw_indicator = (*[0]byte)(C._gotk4_gtk3_CheckButtonClass_draw_indicator)
	}

	if classInitFunc != nil {
		class := (*CheckButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCheckButton(obj *coreglib.Object) *CheckButton {
	return &CheckButton{
		ToggleButton: ToggleButton{
			Button: Button{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Actionable: Actionable{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
				Activatable: Activatable{
					Object: obj,
				},
			},
		},
	}
}

func marshalCheckButton(p uintptr) (interface{}, error) {
	return wrapCheckButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCheckButton creates a new CheckButton.
//
// The function returns the following values:
//
//   - checkButton: Widget.
//
func NewCheckButton() *CheckButton {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_check_button_new()

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// NewCheckButtonWithLabel creates a new CheckButton with a Label to the right
// of it.
//
// The function takes the following parameters:
//
//   - label: text for the check button.
//
// The function returns the following values:
//
//   - checkButton: Widget.
//
func NewCheckButtonWithLabel(label string) *CheckButton {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_button_new_with_label(_arg1)
	runtime.KeepAlive(label)

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// NewCheckButtonWithMnemonic creates a new CheckButton containing a label.
// The label will be created using gtk_label_new_with_mnemonic(), so underscores
// in label indicate the mnemonic for the check button.
//
// The function takes the following parameters:
//
//   - label: text of the button, with an underscore in front of the mnemonic
//     character.
//
// The function returns the following values:
//
//   - checkButton: new CheckButton.
//
func NewCheckButtonWithMnemonic(label string) *CheckButton {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_button_new_with_mnemonic(_arg1)
	runtime.KeepAlive(label)

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// The function takes the following parameters:
//
func (checkButton *CheckButton) drawIndicator(cr *cairo.Context) {
	gclass := (*C.GtkCheckButtonClass)(coreglib.PeekParentClass(checkButton))
	fnarg := gclass.draw_indicator

	var _arg0 *C.GtkCheckButton // out
	var _arg1 *C.cairo_t        // out

	_arg0 = (*C.GtkCheckButton)(unsafe.Pointer(coreglib.InternObject(checkButton).Native()))
	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))

	C._gotk4_gtk3_CheckButton_virtual_draw_indicator(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(checkButton)
	runtime.KeepAlive(cr)
}

// CheckButtonClass: instance of this type is always passed by reference.
type CheckButtonClass struct {
	*checkButtonClass
}

// checkButtonClass is the struct that's finalized.
type checkButtonClass struct {
	native *C.GtkCheckButtonClass
}

func (c *CheckButtonClass) ParentClass() *ToggleButtonClass {
	valptr := &c.native.parent_class
	var _v *ToggleButtonClass // out
	_v = (*ToggleButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
