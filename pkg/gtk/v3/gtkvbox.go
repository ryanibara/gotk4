// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeVBox = coreglib.Type(C.gtk_vbox_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVBox, F: marshalVBox},
	})
}

// VBoxOverrider contains methods that are overridable.
type VBoxOverrider interface {
}

// VBox is a container that organizes child widgets into a single column.
//
// Use the Box packing interface to determine the arrangement, spacing, height,
// and alignment of VBox children.
//
// All children are allocated the same width.
//
// GtkVBox has been deprecated. You can use Box with a Orientable:orientation
// set to GTK_ORIENTATION_VERTICAL instead when calling gtk_box_new(), which is
// a very quick and easy change.
//
// If you have derived your own classes from GtkVBox, you can change the
// inheritance to derive directly from Box, and set the Orientable:orientation
// property to GTK_ORIENTATION_VERTICAL in your instance init function, with a
// call like:
//
//    gtk_orientable_set_orientation (GTK_ORIENTABLE (object),
//                                    GTK_ORIENTATION_VERTICAL);
//
// If you have a grid-like layout composed of nested boxes, and you donâ€™t need
// first-child or last-child styling, the recommendation is to switch to Grid.
// For more information about migrating to Grid, see [Migrating from other
// containers to GtkGrid][gtk-migrating-GtkGrid].
type VBox struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*VBox)(nil)
	_ coreglib.Objector = (*VBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeVBox,
		GoType:        reflect.TypeOf((*VBox)(nil)),
		InitClass:     initClassVBox,
		FinalizeClass: finalizeClassVBox,
	})
}

func initClassVBox(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitVBox(*VBoxClass) }); ok {
		klass := (*VBoxClass)(gextras.NewStructNative(gclass))
		goval.InitVBox(klass)
	}
}

func finalizeClassVBox(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ FinalizeVBox(*VBoxClass) }); ok {
		klass := (*VBoxClass)(gextras.NewStructNative(gclass))
		goval.FinalizeVBox(klass)
	}
}

func wrapVBox(obj *coreglib.Object) *VBox {
	return &VBox{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalVBox(p uintptr) (interface{}, error) {
	return wrapVBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewVBox creates a new VBox.
//
// Deprecated: You can use gtk_box_new() with GTK_ORIENTATION_VERTICAL instead,
// which is a quick and easy change. But the recommendation is to switch to
// Grid, since Box is going to go away eventually. See [Migrating from other
// containers to GtkGrid][gtk-migrating-GtkGrid].
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE if all children are to be given equal space allotments.
//    - spacing: number of pixels to place by default between children.
//
// The function returns the following values:
//
//    - vBox: new VBox.
//
func NewVBox(homogeneous bool, spacing int) *VBox {
	var _arg1 C.gboolean   // out
	var _arg2 C.gint       // out
	var _cret *C.GtkWidget // in

	if homogeneous {
		_arg1 = C.TRUE
	}
	_arg2 = C.gint(spacing)

	_cret = C.gtk_vbox_new(_arg1, _arg2)
	runtime.KeepAlive(homogeneous)
	runtime.KeepAlive(spacing)

	var _vBox *VBox // out

	_vBox = wrapVBox(coreglib.Take(unsafe.Pointer(_cret)))

	return _vBox
}

// VBoxClass: instance of this type is always passed by reference.
type VBoxClass struct {
	*vBoxClass
}

// vBoxClass is the struct that's finalized.
type vBoxClass struct {
	native *C.GtkVBoxClass
}

func (v *VBoxClass) ParentClass() *BoxClass {
	valptr := &v.native.parent_class
	var _v *BoxClass // out
	_v = (*BoxClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
