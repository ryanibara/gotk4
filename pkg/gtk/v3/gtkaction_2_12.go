// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// GtkWidget* _gotk4_gtk3_Action_virtual_create_menu(void* fnptr, GtkAction* arg0) {
//   return ((GtkWidget* (*)(GtkAction*))(fnptr))(arg0);
// };
import "C"

// CreateMenu: if action provides a Menu widget as a submenu for the menu item
// or the toolbar item it creates, this function returns an instance of that
// menu.
//
// Deprecated: Use #GAction and Model instead, and create a Menu with
// gtk_menu_new_from_model().
//
// The function returns the following values:
//
//    - widget: menu item provided by the action, or NULL.
//
func (action *Action) CreateMenu() Widgetter {
	var _arg0 *C.GtkAction // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	_cret = C.gtk_action_create_menu(_arg0)
	runtime.KeepAlive(action)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// createMenu: if action provides a Menu widget as a submenu for the menu item
// or the toolbar item it creates, this function returns an instance of that
// menu.
//
// Deprecated: Use #GAction and Model instead, and create a Menu with
// gtk_menu_new_from_model().
//
// The function returns the following values:
//
//    - widget: menu item provided by the action, or NULL.
//
func (action *Action) createMenu() Widgetter {
	gclass := (*C.GtkActionClass)(coreglib.PeekParentClass(action))
	fnarg := gclass.create_menu

	var _arg0 *C.GtkAction // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.GtkAction)(unsafe.Pointer(coreglib.InternObject(action).Native()))

	_cret = C._gotk4_gtk3_Action_virtual_create_menu(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(action)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}
