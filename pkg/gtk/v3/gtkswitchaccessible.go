// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeSwitchAccessible = coreglib.Type(C.gtk_switch_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSwitchAccessible, F: marshalSwitchAccessible},
	})
}

// SwitchAccessibleOverrider contains methods that are overridable.
type SwitchAccessibleOverrider interface {
}

type SwitchAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	atk.Action
}

var (
	_ coreglib.Objector = (*SwitchAccessible)(nil)
)

func initClassSwitchAccessible(gclass unsafe.Pointer, goval any) {
}

func wrapSwitchAccessible(obj *coreglib.Object) *SwitchAccessible {
	return &SwitchAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				ObjectClass: atk.ObjectClass{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Action: atk.Action{
			Object: obj,
		},
	}
}

func marshalSwitchAccessible(p uintptr) (interface{}, error) {
	return wrapSwitchAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
