// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeFlowBoxChildAccessible = coreglib.Type(C.gtk_flow_box_child_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlowBoxChildAccessible, F: marshalFlowBoxChildAccessible},
	})
}

// FlowBoxChildAccessibleOverrider contains methods that are overridable.
type FlowBoxChildAccessibleOverrider interface {
}

type FlowBoxChildAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*FlowBoxChildAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeFlowBoxChildAccessible,
		GoType:    reflect.TypeOf((*FlowBoxChildAccessible)(nil)),
		InitClass: initClassFlowBoxChildAccessible,
	})
}

func initClassFlowBoxChildAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitFlowBoxChildAccessible(*FlowBoxChildAccessibleClass)
	}); ok {
		klass := (*FlowBoxChildAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitFlowBoxChildAccessible(klass)
	}
}

func wrapFlowBoxChildAccessible(obj *coreglib.Object) *FlowBoxChildAccessible {
	return &FlowBoxChildAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalFlowBoxChildAccessible(p uintptr) (interface{}, error) {
	return wrapFlowBoxChildAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FlowBoxChildAccessibleClass: instance of this type is always passed by
// reference.
type FlowBoxChildAccessibleClass struct {
	*flowBoxChildAccessibleClass
}

// flowBoxChildAccessibleClass is the struct that's finalized.
type flowBoxChildAccessibleClass struct {
	native *C.GtkFlowBoxChildAccessibleClass
}

func (f *FlowBoxChildAccessibleClass) ParentClass() *ContainerAccessibleClass {
	valptr := &f.native.parent_class
	var v *ContainerAccessibleClass // out
	v = (*ContainerAccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
