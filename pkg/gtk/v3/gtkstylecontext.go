// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_StyleContext_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_StyleContextClass_changed(GtkStyleContext*);
// void _gotk4_gtk3_StyleContext_virtual_changed(void* fnptr, GtkStyleContext* arg0) {
//   ((void (*)(GtkStyleContext*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeStyleContextPrintFlags = coreglib.Type(C.gtk_style_context_print_flags_get_type())
	GTypeStyleContext           = coreglib.Type(C.gtk_style_context_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleContextPrintFlags, F: marshalStyleContextPrintFlags},
		coreglib.TypeMarshaler{T: GTypeStyleContext, F: marshalStyleContext},
	})
}

// STYLE_CLASS_ACCELERATOR: CSS class to match an accelerator.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_ACCELERATOR = "accelerator"

// STYLE_CLASS_ARROW: CSS class used when rendering an arrow element.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_ARROW = "arrow"

// STYLE_CLASS_BACKGROUND: CSS class to match the window background.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_BACKGROUND = "background"

// STYLE_CLASS_BOTTOM: CSS class to indicate an area at the bottom of a widget.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_BOTTOM = "bottom"

// STYLE_CLASS_BUTTON: CSS class to match buttons.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_BUTTON = "button"

// STYLE_CLASS_CALENDAR: CSS class to match calendars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_CALENDAR = "calendar"

// STYLE_CLASS_CELL: CSS class to match content rendered in cell views.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_CELL = "cell"

// STYLE_CLASS_CHECK: CSS class to match check boxes.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_CHECK = "check"

// STYLE_CLASS_COMBOBOX_ENTRY: CSS class to match combobox entries.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry"

// STYLE_CLASS_CONTEXT_MENU: CSS class to match context menus.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_CONTEXT_MENU = "context-menu"

// STYLE_CLASS_CURSOR_HANDLE: CSS class used when rendering a drag handle for
// text selection.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_CURSOR_HANDLE = "cursor-handle"

// STYLE_CLASS_DEFAULT: CSS class to match the default widget.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_DEFAULT = "default"

// STYLE_CLASS_DIM_LABEL: CSS class to match dimmed labels.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_DIM_LABEL = "dim-label"

// STYLE_CLASS_DND: CSS class for a drag-and-drop indicator.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_DND = "dnd"

// STYLE_CLASS_DOCK: CSS class defining a dock area.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_DOCK = "dock"

// STYLE_CLASS_ENTRY: CSS class to match text entries.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_ENTRY = "entry"

// STYLE_CLASS_ERROR: CSS class for an area displaying an error message, such as
// those in infobars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_ERROR = "error"

// STYLE_CLASS_EXPANDER: CSS class defining an expander, such as those in
// treeviews.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_EXPANDER = "expander"

// STYLE_CLASS_FRAME: CSS class defining a frame delimiting content, such as
// Frame or the scrolled window frame around the scrollable area.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_FRAME = "frame"

// STYLE_CLASS_GRIP: CSS class defining a resize grip.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_GRIP = "grip"

// STYLE_CLASS_HEADER: CSS class to match a header element.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_HEADER = "header"

// STYLE_CLASS_HIGHLIGHT: CSS class defining a highlighted area, such as
// headings in assistants and calendars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_HIGHLIGHT = "highlight"

// STYLE_CLASS_HORIZONTAL: CSS class for horizontally layered widgets.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_HORIZONTAL = "horizontal"

// STYLE_CLASS_IMAGE: CSS class defining an image, such as the icon in an entry.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_IMAGE = "image"

// STYLE_CLASS_INFO: CSS class for an area displaying an informational message,
// such as those in infobars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_INFO = "info"

// STYLE_CLASS_INLINE_TOOLBAR: CSS class to match inline toolbars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar"

// STYLE_CLASS_INSERTION_CURSOR: CSS class used when rendering a drag handle for
// the insertion cursor position.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_INSERTION_CURSOR = "insertion-cursor"

// STYLE_CLASS_LEFT: CSS class to indicate an area at the left of a widget.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_LEFT = "left"

// STYLE_CLASS_LEVEL_BAR: CSS class used when rendering a level indicator, such
// as a battery charge level, or a password strength.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_LEVEL_BAR = "level-bar"

// STYLE_CLASS_LINKED: CSS class to match a linked area, such as a box
// containing buttons belonging to the same control.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_LINKED = "linked"

// STYLE_CLASS_LIST: CSS class to match lists.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_LIST = "list"

// STYLE_CLASS_LIST_ROW: CSS class to match list rows.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_LIST_ROW = "list-row"

// STYLE_CLASS_MARK: CSS class defining marks in a widget, such as in scales.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_MARK = "mark"

// STYLE_CLASS_MENU: CSS class to match menus.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_MENU = "menu"

// STYLE_CLASS_MENUBAR: CSS class to menubars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_MENUBAR = "menubar"

// STYLE_CLASS_MENUITEM: CSS class to match menu items.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_MENUITEM = "menuitem"

// STYLE_CLASS_NOTEBOOK: CSS class defining a notebook.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_NOTEBOOK = "notebook"

// STYLE_CLASS_OSD: CSS class used when rendering an OSD (On Screen Display)
// element, on top of another container.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_OSD = "osd"

// STYLE_CLASS_PANE_SEPARATOR: CSS class for a pane separator, such as those in
// Paned.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_PANE_SEPARATOR = "pane-separator"

// STYLE_CLASS_PRIMARY_TOOLBAR: CSS class to match primary toolbars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar"

// STYLE_CLASS_PROGRESSBAR: CSS class to use when rendering activity as a
// progressbar.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_PROGRESSBAR = "progressbar"

// STYLE_CLASS_PULSE: CSS class to use when rendering a pulse in an
// indeterminate progress bar.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_PULSE = "pulse"

// STYLE_CLASS_QUESTION: CSS class for an area displaying a question to the
// user, such as those in infobars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_QUESTION = "question"

// STYLE_CLASS_RADIO: CSS class to match radio buttons.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_RADIO = "radio"

// STYLE_CLASS_RAISED: CSS class to match a raised control, such as a raised
// button on a toolbar.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_RAISED = "raised"

// STYLE_CLASS_READ_ONLY: CSS class used to indicate a read-only state.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_READ_ONLY = "read-only"

// STYLE_CLASS_RIGHT: CSS class to indicate an area at the right of a widget.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_RIGHT = "right"

// STYLE_CLASS_RUBBERBAND: CSS class to match the rubberband selection
// rectangle.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_RUBBERBAND = "rubberband"

// STYLE_CLASS_SCALE: CSS class to match scale widgets.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SCALE = "scale"

// STYLE_CLASS_SCALE_HAS_MARKS_ABOVE: CSS class to match scale widgets with
// marks attached, all the marks are above for horizontal Scale. left for
// vertical Scale.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above"

// STYLE_CLASS_SCALE_HAS_MARKS_BELOW: CSS class to match scale widgets with
// marks attached, all the marks are below for horizontal Scale, right for
// vertical Scale.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below"

// STYLE_CLASS_SCROLLBAR: CSS class to match scrollbars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SCROLLBAR = "scrollbar"

// STYLE_CLASS_SCROLLBARS_JUNCTION: CSS class to match the junction area between
// an horizontal and vertical scrollbar, when they’re both shown.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction"

// STYLE_CLASS_SEPARATOR: CSS class for a separator.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SEPARATOR = "separator"

// STYLE_CLASS_SIDEBAR: CSS class defining a sidebar, such as the left side in a
// file chooser.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SIDEBAR = "sidebar"

// STYLE_CLASS_SLIDER: CSS class to match sliders.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SLIDER = "slider"

// STYLE_CLASS_SPINBUTTON: CSS class defining an spinbutton.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SPINBUTTON = "spinbutton"

// STYLE_CLASS_SPINNER: CSS class to use when rendering activity as a “spinner”.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_SPINNER = "spinner"

// STYLE_CLASS_TITLEBAR: CSS class used when rendering a titlebar in a toplevel
// window.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_TITLEBAR = "titlebar"

// STYLE_CLASS_TOOLBAR: CSS class to match toolbars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_TOOLBAR = "toolbar"

// STYLE_CLASS_TOOLTIP: CSS class to match tooltip windows.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_TOOLTIP = "tooltip"

// STYLE_CLASS_TOP: CSS class to indicate an area at the top of a widget.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_TOP = "top"

// STYLE_CLASS_TROUGH: CSS class to match troughs, as in scrollbars and
// progressbars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_TROUGH = "trough"

// STYLE_CLASS_VERTICAL: CSS class for vertically layered widgets.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_VERTICAL = "vertical"

// STYLE_CLASS_VIEW: CSS class defining a view, such as iconviews or treeviews.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_VIEW = "view"

// STYLE_CLASS_WARNING: CSS class for an area displaying a warning message, such
// as those in infobars.
//
// Refer to individual widget documentation for used style classes.
const STYLE_CLASS_WARNING = "warning"

// STYLE_PROPERTY_BACKGROUND_COLOR: property holding the background color of
// rendered elements as a RGBA.
const STYLE_PROPERTY_BACKGROUND_COLOR = "background-color"

// STYLE_PROPERTY_BACKGROUND_IMAGE: property holding the element’s background as
// a #cairo_pattern_t.
const STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image"

// STYLE_PROPERTY_BORDER_COLOR: property holding the element’s border color as a
// RGBA.
const STYLE_PROPERTY_BORDER_COLOR = "border-color"

// STYLE_PROPERTY_BORDER_RADIUS: property holding the rendered element’s border
// radius in pixels as a #gint.
const STYLE_PROPERTY_BORDER_RADIUS = "border-radius"

// STYLE_PROPERTY_BORDER_STYLE: property holding the element’s border style as a
// BorderStyle.
const STYLE_PROPERTY_BORDER_STYLE = "border-style"

// STYLE_PROPERTY_BORDER_WIDTH: property holding the rendered element’s border
// width in pixels as a Border. The border is the intermediary spacing property
// of the padding/border/margin series.
//
// gtk_render_frame() uses this property to find out the frame line width, so
// Widgets rendering frames may need to add up this padding when requesting
// size.
const STYLE_PROPERTY_BORDER_WIDTH = "border-width"

// STYLE_PROPERTY_COLOR: property holding the foreground color of rendered
// elements as a RGBA.
const STYLE_PROPERTY_COLOR = "color"

// STYLE_PROPERTY_FONT: property holding the font properties used when rendering
// text as a FontDescription.
const STYLE_PROPERTY_FONT = "font"

// STYLE_PROPERTY_MARGIN: property holding the rendered element’s margin as a
// Border. The margin is defined as the spacing between the border of the
// element and its surrounding elements. It is external to Widget's size
// allocations, and the most external spacing property of the
// padding/border/margin series.
const STYLE_PROPERTY_MARGIN = "margin"

// STYLE_PROPERTY_PADDING: property holding the rendered element’s padding as a
// Border. The padding is defined as the spacing between the inner part of the
// element border and its child. It’s the innermost spacing property of the
// padding/border/margin series.
const STYLE_PROPERTY_PADDING = "padding"

// STYLE_REGION_COLUMN: widget region name to define a treeview column.
//
// Deprecated: Don't use regions.
const STYLE_REGION_COLUMN = "column"

// STYLE_REGION_COLUMN_HEADER: widget region name to define a treeview column
// header.
//
// Deprecated: Don't use regions.
const STYLE_REGION_COLUMN_HEADER = "column-header"

// STYLE_REGION_ROW: widget region name to define a treeview row.
//
// Deprecated: Don't use regions.
const STYLE_REGION_ROW = "row"

// STYLE_REGION_TAB: widget region name to define a notebook tab.
//
// Deprecated: Don't use regions.
const STYLE_REGION_TAB = "tab"

// StyleContextPrintFlags flags that modify the behavior of
// gtk_style_context_to_string(). New values may be added to this enumeration.
type StyleContextPrintFlags C.guint

const (
	StyleContextPrintNone StyleContextPrintFlags = 0b0
	// StyleContextPrintRecurse: print the entire tree of CSS nodes starting at
	// the style context's node.
	StyleContextPrintRecurse StyleContextPrintFlags = 0b1
	// StyleContextPrintShowStyle: show the values of the CSS properties for
	// each node.
	StyleContextPrintShowStyle StyleContextPrintFlags = 0b10
)

func marshalStyleContextPrintFlags(p uintptr) (interface{}, error) {
	return StyleContextPrintFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for StyleContextPrintFlags.
func (s StyleContextPrintFlags) String() string {
	if s == 0 {
		return "StyleContextPrintFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(73)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case StyleContextPrintNone:
			builder.WriteString("None|")
		case StyleContextPrintRecurse:
			builder.WriteString("Recurse|")
		case StyleContextPrintShowStyle:
			builder.WriteString("ShowStyle|")
		default:
			builder.WriteString(fmt.Sprintf("StyleContextPrintFlags(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s StyleContextPrintFlags) Has(other StyleContextPrintFlags) bool {
	return (s & other) == other
}

// StyleContextOverrides contains methods that are overridable.
type StyleContextOverrides struct {
	Changed func()
}

func defaultStyleContextOverrides(v *StyleContext) StyleContextOverrides {
	return StyleContextOverrides{
		Changed: v.changed,
	}
}

// StyleContext is an object that stores styling information affecting a widget
// defined by WidgetPath.
//
// In order to construct the final style information, StyleContext queries
// information from all attached StyleProviders. Style providers can be either
// attached explicitly to the context through gtk_style_context_add_provider(),
// or to the screen through gtk_style_context_add_provider_for_screen(). The
// resulting style is a combination of all providers’ information in priority
// order.
//
// For GTK+ widgets, any StyleContext returned by gtk_widget_get_style_context()
// will already have a WidgetPath, a Screen and RTL/LTR information set. The
// style context will also be updated automatically if any of these settings
// change on the widget.
//
// If you are using the theming layer standalone, you will need to set a widget
// path and a screen yourself to the created style context through
// gtk_style_context_set_path() and possibly gtk_style_context_set_screen(). See
// the “Foreign drawing“ example in gtk3-demo.
//
//
// Style Classes
//
// Widgets can add style classes to their context, which can be used to
// associate different styles by class. The documentation for individual widgets
// lists which style classes it uses itself, and which style classes may be
// added by applications to affect their appearance.
//
// GTK+ defines macros for a number of style classes.
//
//
// Style Regions
//
// Widgets can also add regions with flags to their context. This feature is
// deprecated and will be removed in a future GTK+ update. Please use style
// classes instead.
//
// GTK+ defines macros for a number of style regions.
//
//
// Custom styling in UI libraries and applications
//
// If you are developing a library with custom Widgets that render differently
// than standard components, you may need to add a StyleProvider yourself with
// the GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a CssProvider or a
// custom object implementing the StyleProvider interface. This way themes may
// still attempt to style your UI elements in a different way if needed so.
//
// If you are using custom styling on an applications, you probably want then to
// make your style information prevail to the theme’s, so you must use a
// StyleProvider with the GTK_STYLE_PROVIDER_PRIORITY_APPLICATION priority, keep
// in mind that the user settings in XDG_CONFIG_HOME/gtk-3.0/gtk.css will still
// take precedence over your changes, as it uses the
// GTK_STYLE_PROVIDER_PRIORITY_USER priority.
type StyleContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*StyleContext)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StyleContext, *StyleContextClass, StyleContextOverrides](
		GTypeStyleContext,
		initStyleContextClass,
		wrapStyleContext,
		defaultStyleContextOverrides,
	)
}

func initStyleContextClass(gclass unsafe.Pointer, overrides StyleContextOverrides, classInitFunc func(*StyleContextClass)) {
	pclass := (*C.GtkStyleContextClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeStyleContext))))

	if overrides.Changed != nil {
		pclass.changed = (*[0]byte)(C._gotk4_gtk3_StyleContextClass_changed)
	}

	if classInitFunc != nil {
		class := (*StyleContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStyleContext(obj *coreglib.Object) *StyleContext {
	return &StyleContext{
		Object: obj,
	}
}

func marshalStyleContext(p uintptr) (interface{}, error) {
	return wrapStyleContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectChanged signal is emitted when there is a change in the StyleContext.
//
// For a StyleContext returned by gtk_widget_get_style_context(), the
// Widget::style-updated signal/vfunc might be more convenient to use.
//
// This signal is useful when using the theming layer standalone.
func (context *StyleContext) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "changed", false, unsafe.Pointer(C._gotk4_gtk3_StyleContext_ConnectChanged), f)
}

// NewStyleContext creates a standalone StyleContext, this style context won’t
// be attached to any widget, so you may want to call
// gtk_style_context_set_path() yourself.
//
// This function is only useful when using the theming layer separated from
// GTK+, if you are using StyleContext to theme Widgets, use
// gtk_widget_get_style_context() in order to get a style context ready to theme
// the widget.
//
// The function returns the following values:
//
//    - styleContext: newly created StyleContext.
//
func NewStyleContext() *StyleContext {
	var _cret *C.GtkStyleContext // in

	_cret = C.gtk_style_context_new()

	var _styleContext *StyleContext // out

	_styleContext = wrapStyleContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _styleContext
}

// Screen returns the Screen to which context is attached.
//
// The function returns the following values:
//
//    - screen: Screen.
//
func (context *StyleContext) Screen() *gdk.Screen {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GdkScreen       // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_screen(_arg0)
	runtime.KeepAlive(context)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// Section queries the location in the CSS where property was defined for the
// current context. Note that the state to be queried is taken from
// gtk_style_context_get_state().
//
// If the location is not available, NULL will be returned. The location might
// not be available for various reasons, such as the property being overridden,
// property not naming a supported CSS property or tracking of definitions being
// disabled for performance reasons.
//
// Shorthand CSS properties cannot be queried for a location and will always
// return NULL.
//
// The function takes the following parameters:
//
//    - property: style property name.
//
// The function returns the following values:
//
//    - cssSection (optional): NULL or the section where a value for property was
//      defined.
//
func (context *StyleContext) Section(property string) *CSSSection {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _cret *C.GtkCssSection   // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_get_section(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(property)

	var _cssSection *CSSSection // out

	if _cret != nil {
		_cssSection = (*CSSSection)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.gtk_css_section_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_cssSection)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_css_section_unref((*C.GtkCssSection)(intern.C))
			},
		)
	}

	return _cssSection
}

// StyleProperty gets the value for a widget style property.
//
// When value is no longer needed, g_value_unset() must be called to free any
// allocated memory.
//
// The function takes the following parameters:
//
//    - propertyName: name of the widget style property.
//
// The function returns the following values:
//
//    - value: return location for the property value.
//
func (context *StyleContext) StyleProperty(propertyName string) coreglib.Value {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GValue           // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_get_style_property(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(propertyName)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg2)))

	return _value
}

// LookupColor looks up and resolves a color name in the context color map.
//
// The function takes the following parameters:
//
//    - colorName: color name to lookup.
//
// The function returns the following values:
//
//    - color: return location for the looked up color.
//    - ok: TRUE if color_name was found and resolved, FALSE otherwise.
//
func (context *StyleContext) LookupColor(colorName string) (*gdk.RGBA, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GdkRGBA          // in
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(colorName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_lookup_color(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(colorName)

	var _color *gdk.RGBA // out
	var _ok bool         // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	if _cret != 0 {
		_ok = true
	}

	return _color, _ok
}

// LookupIconSet looks up stock_id in the icon factories associated to context
// and the default icon factory, returning an icon set if found, otherwise NULL.
//
// Deprecated: Use gtk_icon_theme_lookup_icon() instead.
//
// The function takes the following parameters:
//
//    - stockId: icon name.
//
// The function returns the following values:
//
//    - iconSet (optional): looked up GtkIconSet, or NULL.
//
func (context *StyleContext) LookupIconSet(stockId string) *IconSet {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _cret *C.GtkIconSet      // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_lookup_icon_set(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(stockId)

	var _iconSet *IconSet // out

	if _cret != nil {
		_iconSet = (*IconSet)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.gtk_icon_set_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_iconSet)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gtk_icon_set_unref((*C.GtkIconSet)(intern.C))
			},
		)
	}

	return _iconSet
}

func (context *StyleContext) changed() {
	gclass := (*C.GtkStyleContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.changed

	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_StyleContext_virtual_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// StyleContextClass: instance of this type is always passed by reference.
type StyleContextClass struct {
	*styleContextClass
}

// styleContextClass is the struct that's finalized.
type styleContextClass struct {
	native *C.GtkStyleContextClass
}
