// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_ScaleClass_get_layout_offsets(GtkScale*, gint*, gint*);
// extern void _gotk4_gtk3_ScaleClass_draw_value(GtkScale*);
// extern gchar* _gotk4_gtk3_Scale_ConnectFormatValue(gpointer, gdouble, guintptr);
// extern gchar* _gotk4_gtk3_ScaleClass_format_value(GtkScale*, gdouble);
// gchar* _gotk4_gtk3_Scale_virtual_format_value(void* fnptr, GtkScale* arg0, gdouble arg1) {
//   return ((gchar* (*)(GtkScale*, gdouble))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_Scale_virtual_draw_value(void* fnptr, GtkScale* arg0) {
//   ((void (*)(GtkScale*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeScale = coreglib.Type(C.gtk_scale_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScale, F: marshalScale},
	})
}

// ScaleOverrides contains methods that are overridable.
type ScaleOverrides struct {
	DrawValue func()
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	FormatValue func(value float64) string
	// LayoutOffsets obtains the coordinates where the scale will draw the
	// Layout representing the text in the scale. Remember when using the Layout
	// function you need to convert to and from pixels using PANGO_PIXELS() or
	// NGO_SCALE.
	//
	// If the Scale:draw-value property is FALSE, the return values are
	// undefined.
	//
	// The function returns the following values:
	//
	//    - x (optional): location to store X offset of layout, or NULL.
	//    - y (optional): location to store Y offset of layout, or NULL.
	//
	LayoutOffsets func() (x, y int)
}

func defaultScaleOverrides(v *Scale) ScaleOverrides {
	return ScaleOverrides{
		DrawValue:     v.drawValue,
		FormatValue:   v.formatValue,
		LayoutOffsets: v.layoutOffsets,
	}
}

// Scale is a slider control used to select a numeric value. To use it, you’ll
// probably want to investigate the methods on its base class, Range, in
// addition to the methods for GtkScale itself. To set the value of a scale, you
// would normally use gtk_range_set_value(). To detect changes to the value, you
// would normally use the Range::value-changed signal.
//
// Note that using the same upper and lower bounds for the Scale (through the
// Range methods) will hide the slider itself. This is useful for applications
// that want to show an undeterminate value on the scale, without changing the
// layout of the application (such as movie or music players).
//
//
// GtkScale as GtkBuildable
//
// GtkScale supports a custom <marks> element, which can contain multiple <mark>
// elements. The “value” and “position” attributes have the same meaning as
// gtk_scale_add_mark() parameters of the same name. If the element is not
// empty, its content is taken as the markup to show at the mark. It can be
// translated with the usual ”translatable” and “context” attributes.
//
// CSS nodes
//
//    scale[.fine-tune][.marks-before][.marks-after]
//    ├── marks.top
//    │   ├── mark
//    │   ┊    ├── [label]
//    │   ┊    ╰── indicator
//    ┊   ┊
//    │   ╰── mark
//    ├── [value]
//    ├── contents
//    │   ╰── trough
//    │       ├── slider
//    │       ├── [highlight]
//    │       ╰── [fill]
//    ╰── marks.bottom
//        ├── mark
//        ┊    ├── indicator
//        ┊    ╰── [label]
//        ╰── mark
//
// GtkScale has a main CSS node with name scale and a subnode for its contents,
// with subnodes named trough and slider.
//
// The main node gets the style class .fine-tune added when the scale is in
// 'fine-tuning' mode.
//
// If the scale has an origin (see gtk_scale_set_has_origin()), there is a
// subnode with name highlight below the trough node that is used for rendering
// the highlighted part of the trough.
//
// If the scale is showing a fill level (see gtk_range_set_show_fill_level()),
// there is a subnode with name fill below the trough node that is used for
// rendering the filled in part of the trough.
//
// If marks are present, there is a marks subnode before or after the contents
// node, below which each mark gets a node with name mark. The marks nodes get
// either the .top or .bottom style class.
//
// The mark node has a subnode named indicator. If the mark has text, it also
// has a subnode named label. When the mark is either above or left of the
// scale, the label subnode is the first when present. Otherwise, the indicator
// subnode is the first.
//
// The main CSS node gets the 'marks-before' and/or 'marks-after' style classes
// added depending on what marks are present.
//
// If the scale is displaying the value (see Scale:draw-value), there is subnode
// with name value.
type Scale struct {
	_ [0]func() // equal guard
	Range
}

var (
	_ Ranger = (*Scale)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Scale, *ScaleClass, ScaleOverrides](
		GTypeScale,
		initScaleClass,
		wrapScale,
		defaultScaleOverrides,
	)
}

func initScaleClass(gclass unsafe.Pointer, overrides ScaleOverrides, classInitFunc func(*ScaleClass)) {
	pclass := (*C.GtkScaleClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeScale))))

	if overrides.DrawValue != nil {
		pclass.draw_value = (*[0]byte)(C._gotk4_gtk3_ScaleClass_draw_value)
	}

	if overrides.FormatValue != nil {
		pclass.format_value = (*[0]byte)(C._gotk4_gtk3_ScaleClass_format_value)
	}

	if overrides.LayoutOffsets != nil {
		pclass.get_layout_offsets = (*[0]byte)(C._gotk4_gtk3_ScaleClass_get_layout_offsets)
	}

	if classInitFunc != nil {
		class := (*ScaleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapScale(obj *coreglib.Object) *Scale {
	return &Scale{
		Range: Range{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalScale(p uintptr) (interface{}, error) {
	return wrapScale(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectFormatValue: signal which allows you to change how the scale value is
// displayed. Connect a signal handler which returns an allocated string
// representing value. That string will then be used to display the scale's
// value.
//
// If no user-provided handlers are installed, the value will be displayed on
// its own, rounded according to the value of the Scale:digits property.
//
// Here's an example signal handler which displays a value 1.0 as with
// "-->1.0<--".
//
//    static gchar*
//    format_value_callback (GtkScale *scale,
//                           gdouble   value)
//    {
//      return g_strdup_printf ("-->\0.*g<--",
//                              gtk_scale_get_digits (scale), value);
//     }.
func (scale *Scale) ConnectFormatValue(f func(value float64) (utf8 string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(scale, "format-value", false, unsafe.Pointer(C._gotk4_gtk3_Scale_ConnectFormatValue), f)
}

// Digits gets the number of decimal places that are displayed in the value.
//
// The function returns the following values:
//
//    - gint: number of decimal places that are displayed.
//
func (scale *Scale) Digits() int {
	var _arg0 *C.GtkScale // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))

	_cret = C.gtk_scale_get_digits(_arg0)
	runtime.KeepAlive(scale)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// DrawValue returns whether the current value is displayed as a string next to
// the slider.
//
// The function returns the following values:
//
//    - ok: whether the current value is displayed as a string.
//
func (scale *Scale) DrawValue() bool {
	var _arg0 *C.GtkScale // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))

	_cret = C.gtk_scale_get_draw_value(_arg0)
	runtime.KeepAlive(scale)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ValuePos gets the position in which the current value is displayed.
//
// The function returns the following values:
//
//    - positionType: position in which the current value is displayed.
//
func (scale *Scale) ValuePos() PositionType {
	var _arg0 *C.GtkScale       // out
	var _cret C.GtkPositionType // in

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))

	_cret = C.gtk_scale_get_value_pos(_arg0)
	runtime.KeepAlive(scale)

	var _positionType PositionType // out

	_positionType = PositionType(_cret)

	return _positionType
}

// SetDigits sets the number of decimal places that are displayed in the value.
// Also causes the value of the adjustment to be rounded to this number of
// digits, so the retrieved value matches the displayed one, if Scale:draw-value
// is TRUE when the value changes. If you want to enforce rounding the value
// when Scale:draw-value is FALSE, you can set Range:round-digits instead.
//
// Note that rounding to a small number of digits can interfere with the smooth
// autoscrolling that is built into Scale. As an alternative, you can use the
// Scale::format-value signal to format the displayed value yourself.
//
// The function takes the following parameters:
//
//    - digits: number of decimal places to display, e.g. use 1 to display 1.0, 2
//      to display 1.00, etc.
//
func (scale *Scale) SetDigits(digits int) {
	var _arg0 *C.GtkScale // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))
	_arg1 = C.gint(digits)

	C.gtk_scale_set_digits(_arg0, _arg1)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(digits)
}

// SetDrawValue specifies whether the current value is displayed as a string
// next to the slider.
//
// The function takes the following parameters:
//
//    - drawValue: TRUE to draw the value.
//
func (scale *Scale) SetDrawValue(drawValue bool) {
	var _arg0 *C.GtkScale // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))
	if drawValue {
		_arg1 = C.TRUE
	}

	C.gtk_scale_set_draw_value(_arg0, _arg1)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(drawValue)
}

// SetValuePos sets the position in which the current value is displayed.
//
// The function takes the following parameters:
//
//    - pos: position in which the current value is displayed.
//
func (scale *Scale) SetValuePos(pos PositionType) {
	var _arg0 *C.GtkScale       // out
	var _arg1 C.GtkPositionType // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))
	_arg1 = C.GtkPositionType(pos)

	C.gtk_scale_set_value_pos(_arg0, _arg1)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(pos)
}

func (scale *Scale) drawValue() {
	gclass := (*C.GtkScaleClass)(coreglib.PeekParentClass(scale))
	fnarg := gclass.draw_value

	var _arg0 *C.GtkScale // out

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))

	C._gotk4_gtk3_Scale_virtual_draw_value(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(scale)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (scale *Scale) formatValue(value float64) string {
	gclass := (*C.GtkScaleClass)(coreglib.PeekParentClass(scale))
	fnarg := gclass.format_value

	var _arg0 *C.GtkScale // out
	var _arg1 C.gdouble   // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkScale)(unsafe.Pointer(coreglib.InternObject(scale).Native()))
	_arg1 = C.gdouble(value)

	_cret = C._gotk4_gtk3_Scale_virtual_format_value(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(value)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ScaleClass: instance of this type is always passed by reference.
type ScaleClass struct {
	*scaleClass
}

// scaleClass is the struct that's finalized.
type scaleClass struct {
	native *C.GtkScaleClass
}

func (s *ScaleClass) ParentClass() *RangeClass {
	valptr := &s.native.parent_class
	var _v *RangeClass // out
	_v = (*RangeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
