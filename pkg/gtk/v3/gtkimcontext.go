// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gtk3_IMContextClass_delete_surrounding(GtkIMContext*, gint, gint);
// extern gboolean _gotk4_gtk3_IMContextClass_filter_keypress(GtkIMContext*, GdkEventKey*);
// extern gboolean _gotk4_gtk3_IMContextClass_retrieve_surrounding(GtkIMContext*);
// extern gboolean _gotk4_gtk3_IMContext_ConnectDeleteSurrounding(gpointer, gint, gint, guintptr);
// extern gboolean _gotk4_gtk3_IMContext_ConnectRetrieveSurrounding(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContextClass_commit(GtkIMContext*, gchar*);
// extern void _gotk4_gtk3_IMContextClass_focus_in(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_focus_out(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_changed(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_end(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_start(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_reset(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_set_client_window(GtkIMContext*, GdkWindow*);
// extern void _gotk4_gtk3_IMContextClass_set_cursor_location(GtkIMContext*, GdkRectangle*);
// extern void _gotk4_gtk3_IMContextClass_set_surrounding(GtkIMContext*, gchar*, gint, gint);
// extern void _gotk4_gtk3_IMContextClass_set_use_preedit(GtkIMContext*, gboolean);
// extern void _gotk4_gtk3_IMContext_ConnectCommit(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectPreeditEnd(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectPreeditStart(gpointer, guintptr);
import "C"

// glib.Type values for gtkimcontext.go.
var GTypeIMContext = coreglib.Type(C.gtk_im_context_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeIMContext, F: marshalIMContext},
	})
}

// IMContextOverrider contains methods that are overridable.
type IMContextOverrider interface {
	// The function takes the following parameters:
	//
	Commit(str string)
	// DeleteSurrounding asks the widget that the input context is attached to
	// to delete characters around the cursor position by emitting the
	// GtkIMContext::delete_surrounding signal. Note that offset and n_chars are
	// in characters not in bytes which differs from the usage other places in
	// IMContext.
	//
	// In order to use this function, you should first call
	// gtk_im_context_get_surrounding() to get the current context, and call
	// this function immediately afterwards to make sure that you know what you
	// are deleting. You should also account for the fact that even if the
	// signal was handled, the input context might not have deleted all the
	// characters that were requested to be deleted.
	//
	// This function is used by an input method that wants to make subsitutions
	// in the existing text in response to new input. It is not useful for
	// applications.
	//
	// The function takes the following parameters:
	//
	//    - offset from cursor position in chars; a negative value means start
	//      before the cursor.
	//    - nChars: number of characters to delete.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the signal was handled.
	//
	DeleteSurrounding(offset, nChars int) bool
	// FilterKeypress: allow an input method to internally handle key press and
	// release events. If this function returns TRUE, then no further processing
	// should be done for this key event.
	//
	// The function takes the following parameters:
	//
	//    - event: key event.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the input method handled the key event.
	//
	FilterKeypress(event *gdk.EventKey) bool
	// FocusIn: notify the input method that the widget to which this input
	// context corresponds has gained focus. The input method may, for example,
	// change the displayed feedback to reflect this change.
	FocusIn()
	// FocusOut: notify the input method that the widget to which this input
	// context corresponds has lost focus. The input method may, for example,
	// change the displayed feedback or reset the contexts state to reflect this
	// change.
	FocusOut()
	PreeditChanged()
	PreeditEnd()
	PreeditStart()
	// Reset: notify the input method that a change such as a change in cursor
	// position has been made. This will typically cause the input method to
	// clear the preedit state.
	Reset()
	// The function returns the following values:
	//
	RetrieveSurrounding() bool
	// SetClientWindow: set the client window for the input context; this is the
	// Window in which the input appears. This window is used in order to
	// correctly position status windows, and may also be used for purposes
	// internal to the input method.
	//
	// The function takes the following parameters:
	//
	//    - window (optional): client window. This may be NULL to indicate that
	//      the previous client window no longer exists.
	//
	SetClientWindow(window gdk.Windower)
	// SetCursorLocation: notify the input method that a change in cursor
	// position has been made. The location is relative to the client window.
	//
	// The function takes the following parameters:
	//
	//    - area: new location.
	//
	SetCursorLocation(area *gdk.Rectangle)
	// SetSurrounding sets surrounding context around the insertion point and
	// preedit string. This function is expected to be called in response to the
	// GtkIMContext::retrieve_surrounding signal, and will likely have no effect
	// if called at other times.
	//
	// The function takes the following parameters:
	//
	//    - text surrounding the insertion point, as UTF-8. the preedit string
	//      should not be included within text.
	//    - len: length of text, or -1 if text is nul-terminated.
	//    - cursorIndex: byte index of the insertion cursor within text.
	//
	SetSurrounding(text string, len, cursorIndex int)
	// SetUsePreedit sets whether the IM context should use the preedit string
	// to display feedback. If use_preedit is FALSE (default is TRUE), then the
	// IM context may use some other method to display feedback, such as
	// displaying it in a child of the root window.
	//
	// The function takes the following parameters:
	//
	//    - usePreedit: whether the IM context should use the preedit string.
	//
	SetUsePreedit(usePreedit bool)
}

// IMContext defines the interface for GTK+ input methods. An input method is
// used by GTK+ text input widgets like Entry to map from key events to Unicode
// character strings.
//
// The default input method can be set programmatically via the
// Settings:gtk-im-module GtkSettings property. Alternatively, you may set the
// GTK_IM_MODULE environment variable as documented in [Running GTK+
// Applications][gtk-running].
//
// The Entry Entry:im-module and TextView TextView:im-module properties may also
// be used to set input methods for specific widget instances. For instance, a
// certain entry widget might be expected to contain certain characters which
// would be easier to input with a certain input method.
//
// An input method may consume multiple key events in sequence and finally
// output the composed result. This is called preediting, and an input method
// may provide feedback about this process by displaying the intermediate
// composition states as preedit text. For instance, the default GTK+ input
// method implements the input of arbitrary Unicode code points by holding down
// the Control and Shift keys and then typing “U” followed by the hexadecimal
// digits of the code point. When releasing the Control and Shift keys,
// preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
// example results in the € sign.
//
// Additional input methods can be made available for use by GTK+ widgets as
// loadable modules. An input method module is a small shared library which
// implements a subclass of IMContext or IMContextSimple and exports these four
// functions:
//
//    GtkIMContext * im_module_create(const gchar *context_id);
//
// This function should return a pointer to a newly created instance of the
// IMContext subclass identified by context_id. The context ID is the same as
// specified in the IMContextInfo array returned by im_module_list().
//
// After a new loadable input method module has been installed on the system,
// the configuration file gtk.immodules needs to be regenerated by
// [gtk-query-immodules-3.0][gtk-query-immodules-3.0], in order for the new
// input method to become available to GTK+ applications.
type IMContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*IMContext)(nil)
)

// IMContexter describes types inherited from class IMContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type IMContexter interface {
	coreglib.Objector
	baseIMContext() *IMContext
}

var _ IMContexter = (*IMContext)(nil)

func classInitIMContexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkIMContextClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkIMContextClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Commit(str string) }); ok {
		pclass.commit = (*[0]byte)(C._gotk4_gtk3_IMContextClass_commit)
	}

	if _, ok := goval.(interface{ DeleteSurrounding(offset, nChars int) bool }); ok {
		pclass.delete_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_delete_surrounding)
	}

	if _, ok := goval.(interface {
		FilterKeypress(event *gdk.EventKey) bool
	}); ok {
		pclass.filter_keypress = (*[0]byte)(C._gotk4_gtk3_IMContextClass_filter_keypress)
	}

	if _, ok := goval.(interface{ FocusIn() }); ok {
		pclass.focus_in = (*[0]byte)(C._gotk4_gtk3_IMContextClass_focus_in)
	}

	if _, ok := goval.(interface{ FocusOut() }); ok {
		pclass.focus_out = (*[0]byte)(C._gotk4_gtk3_IMContextClass_focus_out)
	}

	if _, ok := goval.(interface{ PreeditChanged() }); ok {
		pclass.preedit_changed = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_changed)
	}

	if _, ok := goval.(interface{ PreeditEnd() }); ok {
		pclass.preedit_end = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_end)
	}

	if _, ok := goval.(interface{ PreeditStart() }); ok {
		pclass.preedit_start = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_start)
	}

	if _, ok := goval.(interface{ Reset() }); ok {
		pclass.reset = (*[0]byte)(C._gotk4_gtk3_IMContextClass_reset)
	}

	if _, ok := goval.(interface{ RetrieveSurrounding() bool }); ok {
		pclass.retrieve_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_retrieve_surrounding)
	}

	if _, ok := goval.(interface{ SetClientWindow(window gdk.Windower) }); ok {
		pclass.set_client_window = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_client_window)
	}

	if _, ok := goval.(interface{ SetCursorLocation(area *gdk.Rectangle) }); ok {
		pclass.set_cursor_location = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_cursor_location)
	}

	if _, ok := goval.(interface {
		SetSurrounding(text string, len, cursorIndex int)
	}); ok {
		pclass.set_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_surrounding)
	}

	if _, ok := goval.(interface{ SetUsePreedit(usePreedit bool) }); ok {
		pclass.set_use_preedit = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_use_preedit)
	}
}

//export _gotk4_gtk3_IMContextClass_commit
func _gotk4_gtk3_IMContextClass_commit(arg0 *C.GtkIMContext, arg1 *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Commit(str string) })

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.Commit(_str)
}

//export _gotk4_gtk3_IMContextClass_delete_surrounding
func _gotk4_gtk3_IMContextClass_delete_surrounding(arg0 *C.GtkIMContext, arg1 C.gint, arg2 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ DeleteSurrounding(offset, nChars int) bool })

	var _offset int // out
	var _nChars int // out

	_offset = int(arg1)
	_nChars = int(arg2)

	ok := iface.DeleteSurrounding(_offset, _nChars)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_IMContextClass_filter_keypress
func _gotk4_gtk3_IMContextClass_filter_keypress(arg0 *C.GtkIMContext, arg1 *C.GdkEventKey) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FilterKeypress(event *gdk.EventKey) bool
	})

	var _event *gdk.EventKey // out

	_event = (*gdk.EventKey)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := iface.FilterKeypress(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_IMContextClass_focus_in
func _gotk4_gtk3_IMContextClass_focus_in(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FocusIn() })

	iface.FocusIn()
}

//export _gotk4_gtk3_IMContextClass_focus_out
func _gotk4_gtk3_IMContextClass_focus_out(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FocusOut() })

	iface.FocusOut()
}

//export _gotk4_gtk3_IMContextClass_preedit_changed
func _gotk4_gtk3_IMContextClass_preedit_changed(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditChanged() })

	iface.PreeditChanged()
}

//export _gotk4_gtk3_IMContextClass_preedit_end
func _gotk4_gtk3_IMContextClass_preedit_end(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditEnd() })

	iface.PreeditEnd()
}

//export _gotk4_gtk3_IMContextClass_preedit_start
func _gotk4_gtk3_IMContextClass_preedit_start(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditStart() })

	iface.PreeditStart()
}

//export _gotk4_gtk3_IMContextClass_reset
func _gotk4_gtk3_IMContextClass_reset(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Reset() })

	iface.Reset()
}

//export _gotk4_gtk3_IMContextClass_retrieve_surrounding
func _gotk4_gtk3_IMContextClass_retrieve_surrounding(arg0 *C.GtkIMContext) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ RetrieveSurrounding() bool })

	ok := iface.RetrieveSurrounding()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk3_IMContextClass_set_client_window
func _gotk4_gtk3_IMContextClass_set_client_window(arg0 *C.GtkIMContext, arg1 *C.GdkWindow) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetClientWindow(window gdk.Windower) })

	var _window gdk.Windower // out

	if arg1 != nil {
		{
			objptr := unsafe.Pointer(arg1)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gdk.Windower)
				return ok
			})
			rv, ok := casted.(gdk.Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_window = rv
		}
	}

	iface.SetClientWindow(_window)
}

//export _gotk4_gtk3_IMContextClass_set_cursor_location
func _gotk4_gtk3_IMContextClass_set_cursor_location(arg0 *C.GtkIMContext, arg1 *C.GdkRectangle) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetCursorLocation(area *gdk.Rectangle) })

	var _area *gdk.Rectangle // out

	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.SetCursorLocation(_area)
}

//export _gotk4_gtk3_IMContextClass_set_surrounding
func _gotk4_gtk3_IMContextClass_set_surrounding(arg0 *C.GtkIMContext, arg1 *C.gchar, arg2 C.gint, arg3 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SetSurrounding(text string, len, cursorIndex int)
	})

	var _text string     // out
	var _len int         // out
	var _cursorIndex int // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_len = int(arg2)
	_cursorIndex = int(arg3)

	iface.SetSurrounding(_text, _len, _cursorIndex)
}

//export _gotk4_gtk3_IMContextClass_set_use_preedit
func _gotk4_gtk3_IMContextClass_set_use_preedit(arg0 *C.GtkIMContext, arg1 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetUsePreedit(usePreedit bool) })

	var _usePreedit bool // out

	if arg1 != 0 {
		_usePreedit = true
	}

	iface.SetUsePreedit(_usePreedit)
}

func wrapIMContext(obj *coreglib.Object) *IMContext {
	return &IMContext{
		Object: obj,
	}
}

func marshalIMContext(p uintptr) (interface{}, error) {
	return wrapIMContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (context *IMContext) baseIMContext() *IMContext {
	return context
}

// BaseIMContext returns the underlying base object.
func BaseIMContext(obj IMContexter) *IMContext {
	return obj.baseIMContext()
}

//export _gotk4_gtk3_IMContext_ConnectCommit
func _gotk4_gtk3_IMContext_ConnectCommit(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(str string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(str string))
	}

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_str)
}

// ConnectCommit signal is emitted when a complete input sequence has been
// entered by the user. This can be a single character immediately after a key
// press or the final result of preediting.
func (context *IMContext) ConnectCommit(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "commit", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectCommit), f)
}

//export _gotk4_gtk3_IMContext_ConnectDeleteSurrounding
func _gotk4_gtk3_IMContext_ConnectDeleteSurrounding(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) (cret C.gboolean) {
	var f func(offset, nChars int) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(offset, nChars int) (ok bool))
	}

	var _offset int // out
	var _nChars int // out

	_offset = int(arg1)
	_nChars = int(arg2)

	ok := f(_offset, _nChars)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDeleteSurrounding signal is emitted when the input method needs to
// delete all or part of the context surrounding the cursor.
func (context *IMContext) ConnectDeleteSurrounding(f func(offset, nChars int) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "delete-surrounding", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectDeleteSurrounding), f)
}

//export _gotk4_gtk3_IMContext_ConnectPreeditChanged
func _gotk4_gtk3_IMContext_ConnectPreeditChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditChanged signal is emitted whenever the preedit sequence
// currently being entered has changed. It is also emitted at the end of a
// preedit sequence, in which case gtk_im_context_get_preedit_string() returns
// the empty string.
func (context *IMContext) ConnectPreeditChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditChanged), f)
}

//export _gotk4_gtk3_IMContext_ConnectPreeditEnd
func _gotk4_gtk3_IMContext_ConnectPreeditEnd(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditEnd signal is emitted when a preediting sequence has been
// completed or canceled.
func (context *IMContext) ConnectPreeditEnd(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-end", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditEnd), f)
}

//export _gotk4_gtk3_IMContext_ConnectPreeditStart
func _gotk4_gtk3_IMContext_ConnectPreeditStart(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditStart signal is emitted when a new preediting sequence starts.
func (context *IMContext) ConnectPreeditStart(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-start", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditStart), f)
}

//export _gotk4_gtk3_IMContext_ConnectRetrieveSurrounding
func _gotk4_gtk3_IMContext_ConnectRetrieveSurrounding(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectRetrieveSurrounding signal is emitted when the input method requires
// the context surrounding the cursor. The callback should set the input method
// surrounding context by calling the gtk_im_context_set_surrounding() method.
func (context *IMContext) ConnectRetrieveSurrounding(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "retrieve-surrounding", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectRetrieveSurrounding), f)
}

// DeleteSurrounding asks the widget that the input context is attached to to
// delete characters around the cursor position by emitting the
// GtkIMContext::delete_surrounding signal. Note that offset and n_chars are in
// characters not in bytes which differs from the usage other places in
// IMContext.
//
// In order to use this function, you should first call
// gtk_im_context_get_surrounding() to get the current context, and call this
// function immediately afterwards to make sure that you know what you are
// deleting. You should also account for the fact that even if the signal was
// handled, the input context might not have deleted all the characters that
// were requested to be deleted.
//
// This function is used by an input method that wants to make subsitutions in
// the existing text in response to new input. It is not useful for
// applications.
//
// The function takes the following parameters:
//
//    - offset from cursor position in chars; a negative value means start before
//      the cursor.
//    - nChars: number of characters to delete.
//
// The function returns the following values:
//
//    - ok: TRUE if the signal was handled.
//
func (context *IMContext) DeleteSurrounding(offset, nChars int) bool {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gint     // out
	var _arg2 C.gint     // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.gint(offset)
	_arg2 = C.gint(nChars)
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1
	*(*int)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "IMContext").InvokeMethod("delete_surrounding", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(nChars)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FilterKeypress: allow an input method to internally handle key press and
// release events. If this function returns TRUE, then no further processing
// should be done for this key event.
//
// The function takes the following parameters:
//
//    - event: key event.
//
// The function returns the following values:
//
//    - ok: TRUE if the input method handled the key event.
//
func (context *IMContext) FilterKeypress(event *gdk.EventKey) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(event)))
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "IMContext").InvokeMethod("filter_keypress", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FocusIn: notify the input method that the widget to which this input context
// corresponds has gained focus. The input method may, for example, change the
// displayed feedback to reflect this change.
func (context *IMContext) FocusIn() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**IMContext)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("focus_in", args[:], nil)

	runtime.KeepAlive(context)
}

// FocusOut: notify the input method that the widget to which this input context
// corresponds has lost focus. The input method may, for example, change the
// displayed feedback or reset the contexts state to reflect this change.
func (context *IMContext) FocusOut() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**IMContext)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("focus_out", args[:], nil)

	runtime.KeepAlive(context)
}

// Reset: notify the input method that a change such as a change in cursor
// position has been made. This will typically cause the input method to clear
// the preedit state.
func (context *IMContext) Reset() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**IMContext)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("reset", args[:], nil)

	runtime.KeepAlive(context)
}

// SetClientWindow: set the client window for the input context; this is the
// Window in which the input appears. This window is used in order to correctly
// position status windows, and may also be used for purposes internal to the
// input method.
//
// The function takes the following parameters:
//
//    - window (optional): client window. This may be NULL to indicate that the
//      previous client window no longer exists.
//
func (context *IMContext) SetClientWindow(window gdk.Windower) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if window != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	}
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("set_client_window", args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
}

// SetCursorLocation: notify the input method that a change in cursor position
// has been made. The location is relative to the client window.
//
// The function takes the following parameters:
//
//    - area: new location.
//
func (context *IMContext) SetCursorLocation(area *gdk.Rectangle) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(area)))
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("set_cursor_location", args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(area)
}

// SetSurrounding sets surrounding context around the insertion point and
// preedit string. This function is expected to be called in response to the
// GtkIMContext::retrieve_surrounding signal, and will likely have no effect if
// called at other times.
//
// The function takes the following parameters:
//
//    - text surrounding the insertion point, as UTF-8. the preedit string should
//      not be included within text.
//    - len: length of text, or -1 if text is nul-terminated.
//    - cursorIndex: byte index of the insertion cursor within text.
//
func (context *IMContext) SetSurrounding(text string, len, cursorIndex int) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 C.gint  // out
	var _arg3 C.gint  // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)
	_arg3 = C.gint(cursorIndex)
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2
	*(*int)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("set_surrounding", args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(len)
	runtime.KeepAlive(cursorIndex)
}

// SetUsePreedit sets whether the IM context should use the preedit string to
// display feedback. If use_preedit is FALSE (default is TRUE), then the IM
// context may use some other method to display feedback, such as displaying it
// in a child of the root window.
//
// The function takes the following parameters:
//
//    - usePreedit: whether the IM context should use the preedit string.
//
func (context *IMContext) SetUsePreedit(usePreedit bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if usePreedit {
		_arg1 = C.TRUE
	}
	*(**IMContext)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "IMContext").InvokeMethod("set_use_preedit", args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(usePreedit)
}
