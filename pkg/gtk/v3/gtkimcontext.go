// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_IMContext_ConnectPreeditStart(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectPreeditEnd(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_IMContext_ConnectCommit(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_IMContextClass_set_use_preedit(GtkIMContext*, gboolean);
// extern void _gotk4_gtk3_IMContextClass_set_surrounding(GtkIMContext*, gchar*, gint, gint);
// extern void _gotk4_gtk3_IMContextClass_set_cursor_location(GtkIMContext*, GdkRectangle*);
// extern void _gotk4_gtk3_IMContextClass_set_client_window(GtkIMContext*, GdkWindow*);
// extern void _gotk4_gtk3_IMContextClass_reset(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_start(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_end(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_preedit_changed(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_get_preedit_string(GtkIMContext*, gchar**, PangoAttrList**, gint*);
// extern void _gotk4_gtk3_IMContextClass_focus_out(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_focus_in(GtkIMContext*);
// extern void _gotk4_gtk3_IMContextClass_commit(GtkIMContext*, gchar*);
// extern gboolean _gotk4_gtk3_IMContext_ConnectRetrieveSurrounding(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_IMContext_ConnectDeleteSurrounding(gpointer, gint, gint, guintptr);
// extern gboolean _gotk4_gtk3_IMContextClass_retrieve_surrounding(GtkIMContext*);
// extern gboolean _gotk4_gtk3_IMContextClass_get_surrounding(GtkIMContext*, gchar**, gint*);
// extern gboolean _gotk4_gtk3_IMContextClass_filter_keypress(GtkIMContext*, GdkEventKey*);
// extern gboolean _gotk4_gtk3_IMContextClass_delete_surrounding(GtkIMContext*, gint, gint);
// gboolean _gotk4_gtk3_IMContext_virtual_delete_surrounding(void* fnptr, GtkIMContext* arg0, gint arg1, gint arg2) {
//   return ((gboolean (*)(GtkIMContext*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_IMContext_virtual_filter_keypress(void* fnptr, GtkIMContext* arg0, GdkEventKey* arg1) {
//   return ((gboolean (*)(GtkIMContext*, GdkEventKey*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gtk3_IMContext_virtual_get_surrounding(void* fnptr, GtkIMContext* arg0, gchar** arg1, gint* arg2) {
//   return ((gboolean (*)(GtkIMContext*, gchar**, gint*))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_IMContext_virtual_retrieve_surrounding(void* fnptr, GtkIMContext* arg0) {
//   return ((gboolean (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_commit(void* fnptr, GtkIMContext* arg0, gchar* arg1) {
//   ((void (*)(GtkIMContext*, gchar*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_IMContext_virtual_focus_in(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_focus_out(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_get_preedit_string(void* fnptr, GtkIMContext* arg0, gchar** arg1, PangoAttrList** arg2, gint* arg3) {
//   ((void (*)(GtkIMContext*, gchar**, PangoAttrList**, gint*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_IMContext_virtual_preedit_changed(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_preedit_end(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_preedit_start(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_reset(void* fnptr, GtkIMContext* arg0) {
//   ((void (*)(GtkIMContext*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_IMContext_virtual_set_client_window(void* fnptr, GtkIMContext* arg0, GdkWindow* arg1) {
//   ((void (*)(GtkIMContext*, GdkWindow*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_IMContext_virtual_set_cursor_location(void* fnptr, GtkIMContext* arg0, GdkRectangle* arg1) {
//   ((void (*)(GtkIMContext*, GdkRectangle*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_IMContext_virtual_set_surrounding(void* fnptr, GtkIMContext* arg0, gchar* arg1, gint arg2, gint arg3) {
//   ((void (*)(GtkIMContext*, gchar*, gint, gint))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_IMContext_virtual_set_use_preedit(void* fnptr, GtkIMContext* arg0, gboolean arg1) {
//   ((void (*)(GtkIMContext*, gboolean))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeIMContext = coreglib.Type(C.gtk_im_context_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeIMContext, F: marshalIMContext},
	})
}

// IMContextOverrides contains methods that are overridable.
type IMContextOverrides struct {
	// The function takes the following parameters:
	//
	Commit func(str string)
	// DeleteSurrounding asks the widget that the input context is attached
	// to to delete characters around the cursor position by emitting the
	// GtkIMContext::delete_surrounding signal. Note that offset and n_chars are
	// in characters not in bytes which differs from the usage other places in
	// IMContext.
	//
	// In order to use this function, you should first call
	// gtk_im_context_get_surrounding() to get the current context, and call
	// this function immediately afterwards to make sure that you know what
	// you are deleting. You should also account for the fact that even if the
	// signal was handled, the input context might not have deleted all the
	// characters that were requested to be deleted.
	//
	// This function is used by an input method that wants to make subsitutions
	// in the existing text in response to new input. It is not useful for
	// applications.
	//
	// The function takes the following parameters:
	//
	//   - offset from cursor position in chars; a negative value means start
	//     before the cursor.
	//   - nChars: number of characters to delete.
	//
	// The function returns the following values:
	//
	//   - ok: TRUE if the signal was handled.
	//
	DeleteSurrounding func(offset, nChars int) bool
	// FilterKeypress: allow an input method to internally handle key press and
	// release events. If this function returns TRUE, then no further processing
	// should be done for this key event.
	//
	// The function takes the following parameters:
	//
	//   - event: key event.
	//
	// The function returns the following values:
	//
	//   - ok: TRUE if the input method handled the key event.
	//
	FilterKeypress func(event *gdk.EventKey) bool
	// FocusIn: notify the input method that the widget to which this input
	// context corresponds has gained focus. The input method may, for example,
	// change the displayed feedback to reflect this change.
	FocusIn func()
	// FocusOut: notify the input method that the widget to which this input
	// context corresponds has lost focus. The input method may, for example,
	// change the displayed feedback or reset the contexts state to reflect this
	// change.
	FocusOut func()
	// PreeditString: retrieve the current preedit string for the input context,
	// and a list of attributes to apply to the string. This string should be
	// displayed inserted at the insertion point.
	//
	// The function returns the following values:
	//
	//   - str: location to store the retrieved string. The string retrieved
	//     must be freed with g_free().
	//   - attrs: location to store the retrieved attribute list.
	//     When you are done with this list, you must unreference it with
	//     pango_attr_list_unref().
	//   - cursorPos: location to store position of cursor (in characters)
	//     within the preedit string.
	//
	PreeditString func() (string, *pango.AttrList, int)
	// Surrounding retrieves context around the insertion point. Input methods
	// typically want context in order to constrain input text based on existing
	// text; this is important for languages such as Thai where only some
	// sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// GtkIMContext::retrieve_surrounding signal on the input method;
	// in response to this signal, a widget should provide as much
	// context as is available, up to an entire paragraph, by calling
	// gtk_im_context_set_surrounding(). Note that there is no obligation for a
	// widget to respond to the ::retrieve_surrounding signal, so input methods
	// must be prepared to function without context.
	//
	// The function returns the following values:
	//
	//   - text: location to store a UTF-8 encoded string of text holding
	//     context around the insertion point. If the function returns TRUE,
	//     then you must free the result stored in this location with g_free().
	//   - cursorIndex: location to store byte index of the insertion cursor
	//     within text.
	//   - ok: TRUE if surrounding text was provided; in this case you must free
	//     the result stored in *text.
	//
	Surrounding    func() (string, int, bool)
	PreeditChanged func()
	PreeditEnd     func()
	PreeditStart   func()
	// Reset: notify the input method that a change such as a change in cursor
	// position has been made. This will typically cause the input method to
	// clear the preedit state.
	Reset func()
	// The function returns the following values:
	//
	RetrieveSurrounding func() bool
	// SetClientWindow: set the client window for the input context; this is
	// the Window in which the input appears. This window is used in order to
	// correctly position status windows, and may also be used for purposes
	// internal to the input method.
	//
	// The function takes the following parameters:
	//
	//   - window (optional): client window. This may be NULL to indicate that
	//     the previous client window no longer exists.
	//
	SetClientWindow func(window gdk.Windower)
	// SetCursorLocation: notify the input method that a change in cursor
	// position has been made. The location is relative to the client window.
	//
	// The function takes the following parameters:
	//
	//   - area: new location.
	//
	SetCursorLocation func(area *gdk.Rectangle)
	// SetSurrounding sets surrounding context around the insertion point and
	// preedit string. This function is expected to be called in response to the
	// GtkIMContext::retrieve_surrounding signal, and will likely have no effect
	// if called at other times.
	//
	// The function takes the following parameters:
	//
	//   - text surrounding the insertion point, as UTF-8. the preedit string
	//     should not be included within text.
	//   - len: length of text, or -1 if text is nul-terminated.
	//   - cursorIndex: byte index of the insertion cursor within text.
	//
	SetSurrounding func(text string, len, cursorIndex int)
	// SetUsePreedit sets whether the IM context should use the preedit
	// string to display feedback. If use_preedit is FALSE (default is TRUE),
	// then the IM context may use some other method to display feedback,
	// such as displaying it in a child of the root window.
	//
	// The function takes the following parameters:
	//
	//   - usePreedit: whether the IM context should use the preedit string.
	//
	SetUsePreedit func(usePreedit bool)
}

func defaultIMContextOverrides(v *IMContext) IMContextOverrides {
	return IMContextOverrides{
		Commit:              v.commit,
		DeleteSurrounding:   v.deleteSurrounding,
		FilterKeypress:      v.filterKeypress,
		FocusIn:             v.focusIn,
		FocusOut:            v.focusOut,
		PreeditString:       v.preeditString,
		Surrounding:         v.surrounding,
		PreeditChanged:      v.preeditChanged,
		PreeditEnd:          v.preeditEnd,
		PreeditStart:        v.preeditStart,
		Reset:               v.reset,
		RetrieveSurrounding: v.retrieveSurrounding,
		SetClientWindow:     v.setClientWindow,
		SetCursorLocation:   v.setCursorLocation,
		SetSurrounding:      v.setSurrounding,
		SetUsePreedit:       v.setUsePreedit,
	}
}

// IMContext defines the interface for GTK+ input methods. An input method is
// used by GTK+ text input widgets like Entry to map from key events to Unicode
// character strings.
//
// The default input method can be set programmatically via the
// Settings:gtk-im-module GtkSettings property. Alternatively, you may set
// the GTK_IM_MODULE environment variable as documented in [Running GTK+
// Applications][gtk-running].
//
// The Entry Entry:im-module and TextView TextView:im-module properties may also
// be used to set input methods for specific widget instances. For instance,
// a certain entry widget might be expected to contain certain characters which
// would be easier to input with a certain input method.
//
// An input method may consume multiple key events in sequence and finally
// output the composed result. This is called preediting, and an input method
// may provide feedback about this process by displaying the intermediate
// composition states as preedit text. For instance, the default GTK+ input
// method implements the input of arbitrary Unicode code points by holding down
// the Control and Shift keys and then typing “U” followed by the hexadecimal
// digits of the code point. When releasing the Control and Shift keys,
// preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
// example results in the € sign.
//
// Additional input methods can be made available for use by GTK+ widgets as
// loadable modules. An input method module is a small shared library which
// implements a subclass of IMContext or IMContextSimple and exports these four
// functions:
//
//    GtkIMContext * im_module_create(const gchar *context_id);
//
// This function should return a pointer to a newly created instance of the
// IMContext subclass identified by context_id. The context ID is the same as
// specified in the IMContextInfo array returned by im_module_list().
//
// After a new loadable input method module has been installed on the system,
// the configuration file gtk.immodules needs to be regenerated by
// [gtk-query-immodules-3.0][gtk-query-immodules-3.0], in order for the new
// input method to become available to GTK+ applications.
type IMContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*IMContext)(nil)
)

// IMContexter describes types inherited from class IMContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type IMContexter interface {
	coreglib.Objector
	baseIMContext() *IMContext
}

var _ IMContexter = (*IMContext)(nil)

func init() {
	coreglib.RegisterClassInfo[*IMContext, *IMContextClass, IMContextOverrides](
		GTypeIMContext,
		initIMContextClass,
		wrapIMContext,
		defaultIMContextOverrides,
	)
}

func initIMContextClass(gclass unsafe.Pointer, overrides IMContextOverrides, classInitFunc func(*IMContextClass)) {
	pclass := (*C.GtkIMContextClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeIMContext))))

	if overrides.Commit != nil {
		pclass.commit = (*[0]byte)(C._gotk4_gtk3_IMContextClass_commit)
	}

	if overrides.DeleteSurrounding != nil {
		pclass.delete_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_delete_surrounding)
	}

	if overrides.FilterKeypress != nil {
		pclass.filter_keypress = (*[0]byte)(C._gotk4_gtk3_IMContextClass_filter_keypress)
	}

	if overrides.FocusIn != nil {
		pclass.focus_in = (*[0]byte)(C._gotk4_gtk3_IMContextClass_focus_in)
	}

	if overrides.FocusOut != nil {
		pclass.focus_out = (*[0]byte)(C._gotk4_gtk3_IMContextClass_focus_out)
	}

	if overrides.PreeditString != nil {
		pclass.get_preedit_string = (*[0]byte)(C._gotk4_gtk3_IMContextClass_get_preedit_string)
	}

	if overrides.Surrounding != nil {
		pclass.get_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_get_surrounding)
	}

	if overrides.PreeditChanged != nil {
		pclass.preedit_changed = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_changed)
	}

	if overrides.PreeditEnd != nil {
		pclass.preedit_end = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_end)
	}

	if overrides.PreeditStart != nil {
		pclass.preedit_start = (*[0]byte)(C._gotk4_gtk3_IMContextClass_preedit_start)
	}

	if overrides.Reset != nil {
		pclass.reset = (*[0]byte)(C._gotk4_gtk3_IMContextClass_reset)
	}

	if overrides.RetrieveSurrounding != nil {
		pclass.retrieve_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_retrieve_surrounding)
	}

	if overrides.SetClientWindow != nil {
		pclass.set_client_window = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_client_window)
	}

	if overrides.SetCursorLocation != nil {
		pclass.set_cursor_location = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_cursor_location)
	}

	if overrides.SetSurrounding != nil {
		pclass.set_surrounding = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_surrounding)
	}

	if overrides.SetUsePreedit != nil {
		pclass.set_use_preedit = (*[0]byte)(C._gotk4_gtk3_IMContextClass_set_use_preedit)
	}

	if classInitFunc != nil {
		class := (*IMContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapIMContext(obj *coreglib.Object) *IMContext {
	return &IMContext{
		Object: obj,
	}
}

func marshalIMContext(p uintptr) (interface{}, error) {
	return wrapIMContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (context *IMContext) baseIMContext() *IMContext {
	return context
}

// BaseIMContext returns the underlying base object.
func BaseIMContext(obj IMContexter) *IMContext {
	return obj.baseIMContext()
}

// ConnectCommit signal is emitted when a complete input sequence has been
// entered by the user. This can be a single character immediately after a key
// press or the final result of preediting.
func (context *IMContext) ConnectCommit(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "commit", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectCommit), f)
}

// ConnectDeleteSurrounding signal is emitted when the input method needs to
// delete all or part of the context surrounding the cursor.
func (context *IMContext) ConnectDeleteSurrounding(f func(offset, nChars int) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "delete-surrounding", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectDeleteSurrounding), f)
}

// ConnectPreeditChanged signal is emitted whenever the preedit sequence
// currently being entered has changed. It is also emitted at the end of a
// preedit sequence, in which case gtk_im_context_get_preedit_string() returns
// the empty string.
func (context *IMContext) ConnectPreeditChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditChanged), f)
}

// ConnectPreeditEnd signal is emitted when a preediting sequence has been
// completed or canceled.
func (context *IMContext) ConnectPreeditEnd(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-end", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditEnd), f)
}

// ConnectPreeditStart signal is emitted when a new preediting sequence starts.
func (context *IMContext) ConnectPreeditStart(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-start", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectPreeditStart), f)
}

// ConnectRetrieveSurrounding signal is emitted when the input method requires
// the context surrounding the cursor. The callback should set the input method
// surrounding context by calling the gtk_im_context_set_surrounding() method.
func (context *IMContext) ConnectRetrieveSurrounding(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "retrieve-surrounding", false, unsafe.Pointer(C._gotk4_gtk3_IMContext_ConnectRetrieveSurrounding), f)
}

// DeleteSurrounding asks the widget that the input context is attached
// to to delete characters around the cursor position by emitting the
// GtkIMContext::delete_surrounding signal. Note that offset and n_chars are
// in characters not in bytes which differs from the usage other places in
// IMContext.
//
// In order to use this function, you should first call
// gtk_im_context_get_surrounding() to get the current context, and call this
// function immediately afterwards to make sure that you know what you are
// deleting. You should also account for the fact that even if the signal was
// handled, the input context might not have deleted all the characters that
// were requested to be deleted.
//
// This function is used by an input method that wants to make subsitutions
// in the existing text in response to new input. It is not useful for
// applications.
//
// The function takes the following parameters:
//
//   - offset from cursor position in chars; a negative value means start before
//     the cursor.
//   - nChars: number of characters to delete.
//
// The function returns the following values:
//
//   - ok: TRUE if the signal was handled.
//
func (context *IMContext) DeleteSurrounding(offset, nChars int) bool {
	var _arg0 *C.GtkIMContext // out
	var _arg1 C.gint          // out
	var _arg2 C.gint          // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.gint(offset)
	_arg2 = C.gint(nChars)

	_cret = C.gtk_im_context_delete_surrounding(_arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(nChars)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FilterKeypress: allow an input method to internally handle key press and
// release events. If this function returns TRUE, then no further processing
// should be done for this key event.
//
// The function takes the following parameters:
//
//   - event: key event.
//
// The function returns the following values:
//
//   - ok: TRUE if the input method handled the key event.
//
func (context *IMContext) FilterKeypress(event *gdk.EventKey) bool {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkEventKey  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C.gtk_im_context_filter_keypress(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FocusIn: notify the input method that the widget to which this input context
// corresponds has gained focus. The input method may, for example, change the
// displayed feedback to reflect this change.
func (context *IMContext) FocusIn() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_focus_in(_arg0)
	runtime.KeepAlive(context)
}

// FocusOut: notify the input method that the widget to which this input context
// corresponds has lost focus. The input method may, for example, change the
// displayed feedback or reset the contexts state to reflect this change.
func (context *IMContext) FocusOut() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_focus_out(_arg0)
	runtime.KeepAlive(context)
}

// PreeditString: retrieve the current preedit string for the input context, and
// a list of attributes to apply to the string. This string should be displayed
// inserted at the insertion point.
//
// The function returns the following values:
//
//   - str: location to store the retrieved string. The string retrieved must be
//     freed with g_free().
//   - attrs: location to store the retrieved attribute list. When you are done
//     with this list, you must unreference it with pango_attr_list_unref().
//   - cursorPos: location to store position of cursor (in characters) within
//     the preedit string.
//
func (context *IMContext) PreeditString() (string, *pango.AttrList, int) {
	var _arg0 *C.GtkIMContext  // out
	var _arg1 *C.gchar         // in
	var _arg2 *C.PangoAttrList // in
	var _arg3 C.gint           // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_get_preedit_string(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _str string            // out
	var _attrs *pango.AttrList // out
	var _cursorPos int         // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_attrs = (*pango.AttrList)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrs)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
		},
	)
	_cursorPos = int(_arg3)

	return _str, _attrs, _cursorPos
}

// Surrounding retrieves context around the insertion point. Input methods
// typically want context in order to constrain input text based on existing
// text; this is important for languages such as Thai where only some sequences
// of characters are allowed.
//
// This function is implemented by emitting the
// GtkIMContext::retrieve_surrounding signal on the input method; in response to
// this signal, a widget should provide as much context as is available, up to
// an entire paragraph, by calling gtk_im_context_set_surrounding(). Note that
// there is no obligation for a widget to respond to the ::retrieve_surrounding
// signal, so input methods must be prepared to function without context.
//
// The function returns the following values:
//
//   - text: location to store a UTF-8 encoded string of text holding context
//     around the insertion point. If the function returns TRUE, then you must
//     free the result stored in this location with g_free().
//   - cursorIndex: location to store byte index of the insertion cursor within
//     text.
//   - ok: TRUE if surrounding text was provided; in this case you must free the
//     result stored in *text.
//
func (context *IMContext) Surrounding() (string, int, bool) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.gchar        // in
	var _arg2 C.gint          // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_im_context_get_surrounding(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(context)

	var _text string     // out
	var _cursorIndex int // out
	var _ok bool         // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_cursorIndex = int(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _text, _cursorIndex, _ok
}

// Reset: notify the input method that a change such as a change in cursor
// position has been made. This will typically cause the input method to clear
// the preedit state.
func (context *IMContext) Reset() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_reset(_arg0)
	runtime.KeepAlive(context)
}

// SetClientWindow: set the client window for the input context; this is the
// Window in which the input appears. This window is used in order to correctly
// position status windows, and may also be used for purposes internal to the
// input method.
//
// The function takes the following parameters:
//
//   - window (optional): client window. This may be NULL to indicate that the
//     previous client window no longer exists.
//
func (context *IMContext) SetClientWindow(window gdk.Windower) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkWindow    // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if window != nil {
		_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	}

	C.gtk_im_context_set_client_window(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
}

// SetCursorLocation: notify the input method that a change in cursor position
// has been made. The location is relative to the client window.
//
// The function takes the following parameters:
//
//   - area: new location.
//
func (context *IMContext) SetCursorLocation(area *gdk.Rectangle) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	C.gtk_im_context_set_cursor_location(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(area)
}

// SetSurrounding sets surrounding context around the insertion point and
// preedit string. This function is expected to be called in response to the
// GtkIMContext::retrieve_surrounding signal, and will likely have no effect if
// called at other times.
//
// The function takes the following parameters:
//
//   - text surrounding the insertion point, as UTF-8. the preedit string should
//     not be included within text.
//   - len: length of text, or -1 if text is nul-terminated.
//   - cursorIndex: byte index of the insertion cursor within text.
//
func (context *IMContext) SetSurrounding(text string, len, cursorIndex int) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gint          // out
	var _arg3 C.gint          // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)
	_arg3 = C.gint(cursorIndex)

	C.gtk_im_context_set_surrounding(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(len)
	runtime.KeepAlive(cursorIndex)
}

// SetUsePreedit sets whether the IM context should use the preedit string to
// display feedback. If use_preedit is FALSE (default is TRUE), then the IM
// context may use some other method to display feedback, such as displaying it
// in a child of the root window.
//
// The function takes the following parameters:
//
//   - usePreedit: whether the IM context should use the preedit string.
//
func (context *IMContext) SetUsePreedit(usePreedit bool) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if usePreedit {
		_arg1 = C.TRUE
	}

	C.gtk_im_context_set_use_preedit(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(usePreedit)
}

// The function takes the following parameters:
//
func (context *IMContext) commit(str string) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.commit

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	C._gotk4_gtk3_IMContext_virtual_commit(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(str)
}

// deleteSurrounding asks the widget that the input context is attached
// to to delete characters around the cursor position by emitting the
// GtkIMContext::delete_surrounding signal. Note that offset and n_chars are
// in characters not in bytes which differs from the usage other places in
// IMContext.
//
// In order to use this function, you should first call
// gtk_im_context_get_surrounding() to get the current context, and call this
// function immediately afterwards to make sure that you know what you are
// deleting. You should also account for the fact that even if the signal was
// handled, the input context might not have deleted all the characters that
// were requested to be deleted.
//
// This function is used by an input method that wants to make subsitutions
// in the existing text in response to new input. It is not useful for
// applications.
//
// The function takes the following parameters:
//
//   - offset from cursor position in chars; a negative value means start before
//     the cursor.
//   - nChars: number of characters to delete.
//
// The function returns the following values:
//
//   - ok: TRUE if the signal was handled.
//
func (context *IMContext) deleteSurrounding(offset, nChars int) bool {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.delete_surrounding

	var _arg0 *C.GtkIMContext // out
	var _arg1 C.gint          // out
	var _arg2 C.gint          // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.gint(offset)
	_arg2 = C.gint(nChars)

	_cret = C._gotk4_gtk3_IMContext_virtual_delete_surrounding(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(nChars)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// filterKeypress: allow an input method to internally handle key press and
// release events. If this function returns TRUE, then no further processing
// should be done for this key event.
//
// The function takes the following parameters:
//
//   - event: key event.
//
// The function returns the following values:
//
//   - ok: TRUE if the input method handled the key event.
//
func (context *IMContext) filterKeypress(event *gdk.EventKey) bool {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.filter_keypress

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkEventKey  // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C._gotk4_gtk3_IMContext_virtual_filter_keypress(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// focusIn: notify the input method that the widget to which this input context
// corresponds has gained focus. The input method may, for example, change the
// displayed feedback to reflect this change.
func (context *IMContext) focusIn() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.focus_in

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_focus_in(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// focusOut: notify the input method that the widget to which this input context
// corresponds has lost focus. The input method may, for example, change the
// displayed feedback or reset the contexts state to reflect this change.
func (context *IMContext) focusOut() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.focus_out

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_focus_out(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// preeditString: retrieve the current preedit string for the input context, and
// a list of attributes to apply to the string. This string should be displayed
// inserted at the insertion point.
//
// The function returns the following values:
//
//   - str: location to store the retrieved string. The string retrieved must be
//     freed with g_free().
//   - attrs: location to store the retrieved attribute list. When you are done
//     with this list, you must unreference it with pango_attr_list_unref().
//   - cursorPos: location to store position of cursor (in characters) within
//     the preedit string.
//
func (context *IMContext) preeditString() (string, *pango.AttrList, int) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.get_preedit_string

	var _arg0 *C.GtkIMContext  // out
	var _arg1 *C.gchar         // in
	var _arg2 *C.PangoAttrList // in
	var _arg3 C.gint           // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_get_preedit_string(unsafe.Pointer(fnarg), _arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _str string            // out
	var _attrs *pango.AttrList // out
	var _cursorPos int         // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_attrs = (*pango.AttrList)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrs)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
		},
	)
	_cursorPos = int(_arg3)

	return _str, _attrs, _cursorPos
}

// Surrounding retrieves context around the insertion point. Input methods
// typically want context in order to constrain input text based on existing
// text; this is important for languages such as Thai where only some sequences
// of characters are allowed.
//
// This function is implemented by emitting the
// GtkIMContext::retrieve_surrounding signal on the input method; in response to
// this signal, a widget should provide as much context as is available, up to
// an entire paragraph, by calling gtk_im_context_set_surrounding(). Note that
// there is no obligation for a widget to respond to the ::retrieve_surrounding
// signal, so input methods must be prepared to function without context.
//
// The function returns the following values:
//
//   - text: location to store a UTF-8 encoded string of text holding context
//     around the insertion point. If the function returns TRUE, then you must
//     free the result stored in this location with g_free().
//   - cursorIndex: location to store byte index of the insertion cursor within
//     text.
//   - ok: TRUE if surrounding text was provided; in this case you must free the
//     result stored in *text.
//
func (context *IMContext) surrounding() (string, int, bool) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.get_surrounding

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.gchar        // in
	var _arg2 C.gint          // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C._gotk4_gtk3_IMContext_virtual_get_surrounding(unsafe.Pointer(fnarg), _arg0, &_arg1, &_arg2)
	runtime.KeepAlive(context)

	var _text string     // out
	var _cursorIndex int // out
	var _ok bool         // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_cursorIndex = int(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _text, _cursorIndex, _ok
}

func (context *IMContext) preeditChanged() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_changed

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_preedit_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

func (context *IMContext) preeditEnd() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_end

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_preedit_end(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

func (context *IMContext) preeditStart() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_start

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_preedit_start(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// Reset: notify the input method that a change such as a change in cursor
// position has been made. This will typically cause the input method to clear
// the preedit state.
func (context *IMContext) reset() {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.reset

	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_gtk3_IMContext_virtual_reset(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// The function returns the following values:
//
func (context *IMContext) retrieveSurrounding() bool {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.retrieve_surrounding

	var _arg0 *C.GtkIMContext // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C._gotk4_gtk3_IMContext_virtual_retrieve_surrounding(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// setClientWindow: set the client window for the input context; this is the
// Window in which the input appears. This window is used in order to correctly
// position status windows, and may also be used for purposes internal to the
// input method.
//
// The function takes the following parameters:
//
//   - window (optional): client window. This may be NULL to indicate that the
//     previous client window no longer exists.
//
func (context *IMContext) setClientWindow(window gdk.Windower) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.set_client_window

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkWindow    // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if window != nil {
		_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	}

	C._gotk4_gtk3_IMContext_virtual_set_client_window(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
}

// setCursorLocation: notify the input method that a change in cursor position
// has been made. The location is relative to the client window.
//
// The function takes the following parameters:
//
//   - area: new location.
//
func (context *IMContext) setCursorLocation(area *gdk.Rectangle) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.set_cursor_location

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	C._gotk4_gtk3_IMContext_virtual_set_cursor_location(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(area)
}

// setSurrounding sets surrounding context around the insertion point and
// preedit string. This function is expected to be called in response to the
// GtkIMContext::retrieve_surrounding signal, and will likely have no effect if
// called at other times.
//
// The function takes the following parameters:
//
//   - text surrounding the insertion point, as UTF-8. the preedit string should
//     not be included within text.
//   - len: length of text, or -1 if text is nul-terminated.
//   - cursorIndex: byte index of the insertion cursor within text.
//
func (context *IMContext) setSurrounding(text string, len, cursorIndex int) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.set_surrounding

	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gint          // out
	var _arg3 C.gint          // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(len)
	_arg3 = C.gint(cursorIndex)

	C._gotk4_gtk3_IMContext_virtual_set_surrounding(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(len)
	runtime.KeepAlive(cursorIndex)
}

// setUsePreedit sets whether the IM context should use the preedit string to
// display feedback. If use_preedit is FALSE (default is TRUE), then the IM
// context may use some other method to display feedback, such as displaying it
// in a child of the root window.
//
// The function takes the following parameters:
//
//   - usePreedit: whether the IM context should use the preedit string.
//
func (context *IMContext) setUsePreedit(usePreedit bool) {
	gclass := (*C.GtkIMContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.set_use_preedit

	var _arg0 *C.GtkIMContext // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if usePreedit {
		_arg1 = C.TRUE
	}

	C._gotk4_gtk3_IMContext_virtual_set_use_preedit(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(usePreedit)
}

// IMContextClass: instance of this type is always passed by reference.
type IMContextClass struct {
	*imContextClass
}

// imContextClass is the struct that's finalized.
type imContextClass struct {
	native *C.GtkIMContextClass
}
