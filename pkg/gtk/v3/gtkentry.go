// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_EntryClass_activate(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_backspace(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_copy_clipboard(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_cut_clipboard(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_delete_from_cursor(GtkEntry*, GtkDeleteType, gint);
// extern void _gotk4_gtk3_EntryClass_get_frame_size(GtkEntry*, gint*, gint*, gint*, gint*);
// extern void _gotk4_gtk3_EntryClass_get_text_area_size(GtkEntry*, gint*, gint*, gint*, gint*);
// extern void _gotk4_gtk3_EntryClass_insert_at_cursor(GtkEntry*, gchar*);
// extern void _gotk4_gtk3_EntryClass_insert_emoji(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_move_cursor(GtkEntry*, GtkMovementStep, gint, gboolean);
// extern void _gotk4_gtk3_EntryClass_paste_clipboard(GtkEntry*);
// extern void _gotk4_gtk3_EntryClass_populate_popup(GtkEntry*, GtkWidget*);
// extern void _gotk4_gtk3_EntryClass_toggle_overwrite(GtkEntry*);
// extern void _gotk4_gtk3_Entry_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectBackspace(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectCopyClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectCutClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectDeleteFromCursor(gpointer, GtkDeleteType, gint, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectIconPress(gpointer, GtkEntryIconPosition, GdkEvent, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectIconRelease(gpointer, GtkEntryIconPosition, GdkEvent, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectInsertAtCursor(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectInsertEmoji(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectMoveCursor(gpointer, GtkMovementStep, gint, gboolean, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectPasteClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectPopulatePopup(gpointer, GtkWidget*, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectPreeditChanged(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_Entry_ConnectToggleOverwrite(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeEntryIconPosition = coreglib.Type(C.gtk_entry_icon_position_get_type())
	GTypeEntry             = coreglib.Type(C.gtk_entry_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEntryIconPosition, F: marshalEntryIconPosition},
		coreglib.TypeMarshaler{T: GTypeEntry, F: marshalEntry},
	})
}

// EntryIconPosition specifies the side of the entry at which an icon is placed.
type EntryIconPosition C.gint

const (
	// EntryIconPrimary: at the beginning of the entry (depending on the text
	// direction).
	EntryIconPrimary EntryIconPosition = iota
	// EntryIconSecondary: at the end of the entry (depending on the text
	// direction).
	EntryIconSecondary
)

func marshalEntryIconPosition(p uintptr) (interface{}, error) {
	return EntryIconPosition(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for EntryIconPosition.
func (e EntryIconPosition) String() string {
	switch e {
	case EntryIconPrimary:
		return "Primary"
	case EntryIconSecondary:
		return "Secondary"
	default:
		return fmt.Sprintf("EntryIconPosition(%d)", e)
	}
}

// EntryOverrider contains methods that are overridable.
type EntryOverrider interface {
	Activate()
	Backspace()
	CopyClipboard()
	CutClipboard()
	// The function takes the following parameters:
	//
	//    - typ
	//    - count
	//
	DeleteFromCursor(typ DeleteType, count int)
	// The function takes the following parameters:
	//
	//    - x
	//    - y
	//    - width
	//    - height
	//
	FrameSize(x, y, width, height *int)
	// The function takes the following parameters:
	//
	//    - x
	//    - y
	//    - width
	//    - height
	//
	TextAreaSize(x, y, width, height *int)
	// The function takes the following parameters:
	//
	InsertAtCursor(str string)
	InsertEmoji()
	// The function takes the following parameters:
	//
	//    - step
	//    - count
	//    - extendSelection
	//
	MoveCursor(step MovementStep, count int, extendSelection bool)
	PasteClipboard()
	// The function takes the following parameters:
	//
	PopulatePopup(popup Widgetter)
	ToggleOverwrite()
}

// Entry widget is a single line text entry widget. A fairly large set of key
// bindings are supported by default. If the entered text is longer than the
// allocation of the widget, the widget will scroll so that the cursor position
// is visible.
//
// When using an entry for passwords and other sensitive information, it can be
// put into “password mode” using gtk_entry_set_visibility(). In this mode,
// entered text is displayed using a “invisible” character. By default, GTK+
// picks the best invisible character that is available in the current font, but
// it can be changed with gtk_entry_set_invisible_char(). Since 2.16, GTK+
// displays a warning when Caps Lock or input methods might interfere with
// entering text in a password entry. The warning can be turned off with the
// Entry:caps-lock-warning property.
//
// Since 2.16, GtkEntry has the ability to display progress or activity
// information behind the text. To make an entry display such information, use
// gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().
//
// Additionally, GtkEntry can show icons at either side of the entry. These
// icons can be activatable by clicking, can be set up as drag source and can
// have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or one of
// the various other functions that set an icon from a stock id, an icon name or
// a pixbuf. To trigger an action when the user clicks an icon, connect to the
// Entry::icon-press signal. To allow DND operations from an icon, use
// gtk_entry_set_icon_drag_source(). To set a tooltip on an icon, use
// gtk_entry_set_icon_tooltip_text() or the corresponding function for markup.
//
// Note that functionality or information that is only available by clicking on
// an icon in an entry may not be accessible at all to users which are not able
// to use a mouse or other pointing device. It is therefore recommended that any
// such functionality should also be available by other means, e.g. via the
// context menu of the entry.
//
// CSS nodes
//
//    entry[.read-only][.flat][.warning][.error]
//    ├── image.left
//    ├── image.right
//    ├── undershoot.left
//    ├── undershoot.right
//    ├── [selection]
//    ├── [progress[.pulse]]
//    ╰── [window.popup]
//
// GtkEntry has a main node with the name entry. Depending on the properties of
// the entry, the style classes .read-only and .flat may appear. The style
// classes .warning and .error may also be used with entries.
//
// When the entry shows icons, it adds subnodes with the name image and the
// style class .left or .right, depending on where the icon appears.
//
// When the entry has a selection, it adds a subnode with the name selection.
//
// When the entry shows progress, it adds a subnode with the name progress. The
// node has the style class .pulse when the shown progress is pulsing.
//
// The CSS node for a context menu is added as a subnode below entry as well.
//
// The undershoot nodes are used to draw the underflow indication when content
// is scrolled out of view. These nodes get the .left and .right style classes
// added depending on where the indication is drawn.
//
// When touch is used and touch selection handles are shown, they are using CSS
// nodes with name cursor-handle. They get the .top or .bottom style class
// depending on where they are shown in relation to the selection. If there is
// just a single handle for the text cursor, it gets the style class
// .insertion-cursor.
type Entry struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	CellEditable
	Editable
}

var (
	_ Widgetter         = (*Entry)(nil)
	_ coreglib.Objector = (*Entry)(nil)
)

func classInitEntrier(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkEntryClass)(unsafe.Pointer(gclassPtr))

	if _, ok := goval.(interface{ Activate() }); ok {
		pclass.activate = (*[0]byte)(C._gotk4_gtk3_EntryClass_activate)
	}

	if _, ok := goval.(interface{ Backspace() }); ok {
		pclass.backspace = (*[0]byte)(C._gotk4_gtk3_EntryClass_backspace)
	}

	if _, ok := goval.(interface{ CopyClipboard() }); ok {
		pclass.copy_clipboard = (*[0]byte)(C._gotk4_gtk3_EntryClass_copy_clipboard)
	}

	if _, ok := goval.(interface{ CutClipboard() }); ok {
		pclass.cut_clipboard = (*[0]byte)(C._gotk4_gtk3_EntryClass_cut_clipboard)
	}

	if _, ok := goval.(interface {
		DeleteFromCursor(typ DeleteType, count int)
	}); ok {
		pclass.delete_from_cursor = (*[0]byte)(C._gotk4_gtk3_EntryClass_delete_from_cursor)
	}

	if _, ok := goval.(interface {
		FrameSize(x, y, width, height *int)
	}); ok {
		pclass.get_frame_size = (*[0]byte)(C._gotk4_gtk3_EntryClass_get_frame_size)
	}

	if _, ok := goval.(interface {
		TextAreaSize(x, y, width, height *int)
	}); ok {
		pclass.get_text_area_size = (*[0]byte)(C._gotk4_gtk3_EntryClass_get_text_area_size)
	}

	if _, ok := goval.(interface{ InsertAtCursor(str string) }); ok {
		pclass.insert_at_cursor = (*[0]byte)(C._gotk4_gtk3_EntryClass_insert_at_cursor)
	}

	if _, ok := goval.(interface{ InsertEmoji() }); ok {
		pclass.insert_emoji = (*[0]byte)(C._gotk4_gtk3_EntryClass_insert_emoji)
	}

	if _, ok := goval.(interface {
		MoveCursor(step MovementStep, count int, extendSelection bool)
	}); ok {
		pclass.move_cursor = (*[0]byte)(C._gotk4_gtk3_EntryClass_move_cursor)
	}

	if _, ok := goval.(interface{ PasteClipboard() }); ok {
		pclass.paste_clipboard = (*[0]byte)(C._gotk4_gtk3_EntryClass_paste_clipboard)
	}

	if _, ok := goval.(interface{ PopulatePopup(popup Widgetter) }); ok {
		pclass.populate_popup = (*[0]byte)(C._gotk4_gtk3_EntryClass_populate_popup)
	}

	if _, ok := goval.(interface{ ToggleOverwrite() }); ok {
		pclass.toggle_overwrite = (*[0]byte)(C._gotk4_gtk3_EntryClass_toggle_overwrite)
	}
}

//export _gotk4_gtk3_EntryClass_activate
func _gotk4_gtk3_EntryClass_activate(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Activate() })

	iface.Activate()
}

//export _gotk4_gtk3_EntryClass_backspace
func _gotk4_gtk3_EntryClass_backspace(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Backspace() })

	iface.Backspace()
}

//export _gotk4_gtk3_EntryClass_copy_clipboard
func _gotk4_gtk3_EntryClass_copy_clipboard(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CopyClipboard() })

	iface.CopyClipboard()
}

//export _gotk4_gtk3_EntryClass_cut_clipboard
func _gotk4_gtk3_EntryClass_cut_clipboard(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CutClipboard() })

	iface.CutClipboard()
}

//export _gotk4_gtk3_EntryClass_delete_from_cursor
func _gotk4_gtk3_EntryClass_delete_from_cursor(arg0 *C.GtkEntry, arg1 C.GtkDeleteType, arg2 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		DeleteFromCursor(typ DeleteType, count int)
	})

	var _typ DeleteType // out
	var _count int      // out

	_typ = DeleteType(arg1)
	_count = int(arg2)

	iface.DeleteFromCursor(_typ, _count)
}

//export _gotk4_gtk3_EntryClass_get_frame_size
func _gotk4_gtk3_EntryClass_get_frame_size(arg0 *C.GtkEntry, arg1 *C.gint, arg2 *C.gint, arg3 *C.gint, arg4 *C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FrameSize(x, y, width, height *int)
	})

	var _x *int      // out
	var _y *int      // out
	var _width *int  // out
	var _height *int // out

	_x = (*int)(unsafe.Pointer(arg1))
	_y = (*int)(unsafe.Pointer(arg2))
	_width = (*int)(unsafe.Pointer(arg3))
	_height = (*int)(unsafe.Pointer(arg4))

	iface.FrameSize(_x, _y, _width, _height)
}

//export _gotk4_gtk3_EntryClass_get_text_area_size
func _gotk4_gtk3_EntryClass_get_text_area_size(arg0 *C.GtkEntry, arg1 *C.gint, arg2 *C.gint, arg3 *C.gint, arg4 *C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		TextAreaSize(x, y, width, height *int)
	})

	var _x *int      // out
	var _y *int      // out
	var _width *int  // out
	var _height *int // out

	_x = (*int)(unsafe.Pointer(arg1))
	_y = (*int)(unsafe.Pointer(arg2))
	_width = (*int)(unsafe.Pointer(arg3))
	_height = (*int)(unsafe.Pointer(arg4))

	iface.TextAreaSize(_x, _y, _width, _height)
}

//export _gotk4_gtk3_EntryClass_insert_at_cursor
func _gotk4_gtk3_EntryClass_insert_at_cursor(arg0 *C.GtkEntry, arg1 *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ InsertAtCursor(str string) })

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.InsertAtCursor(_str)
}

//export _gotk4_gtk3_EntryClass_insert_emoji
func _gotk4_gtk3_EntryClass_insert_emoji(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ InsertEmoji() })

	iface.InsertEmoji()
}

//export _gotk4_gtk3_EntryClass_move_cursor
func _gotk4_gtk3_EntryClass_move_cursor(arg0 *C.GtkEntry, arg1 C.GtkMovementStep, arg2 C.gint, arg3 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		MoveCursor(step MovementStep, count int, extendSelection bool)
	})

	var _step MovementStep    // out
	var _count int            // out
	var _extendSelection bool // out

	_step = MovementStep(arg1)
	_count = int(arg2)
	if arg3 != 0 {
		_extendSelection = true
	}

	iface.MoveCursor(_step, _count, _extendSelection)
}

//export _gotk4_gtk3_EntryClass_paste_clipboard
func _gotk4_gtk3_EntryClass_paste_clipboard(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PasteClipboard() })

	iface.PasteClipboard()
}

//export _gotk4_gtk3_EntryClass_populate_popup
func _gotk4_gtk3_EntryClass_populate_popup(arg0 *C.GtkEntry, arg1 *C.GtkWidget) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PopulatePopup(popup Widgetter) })

	var _popup Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_popup = rv
	}

	iface.PopulatePopup(_popup)
}

//export _gotk4_gtk3_EntryClass_toggle_overwrite
func _gotk4_gtk3_EntryClass_toggle_overwrite(arg0 *C.GtkEntry) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ToggleOverwrite() })

	iface.ToggleOverwrite()
}

func wrapEntry(obj *coreglib.Object) *Entry {
	return &Entry{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Object: obj,
		CellEditable: CellEditable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Editable: Editable{
			Object: obj,
		},
	}
}

func marshalEntry(p uintptr) (interface{}, error) {
	return wrapEntry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_Entry_ConnectActivate
func _gotk4_gtk3_Entry_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate signal is emitted when the user hits the Enter key.
//
// While this signal is used as a [keybinding signal][GtkBindingSignal], it is
// also commonly used by applications to intercept activation of entries.
//
// The default bindings for this signal are all forms of the Enter key.
func (entry *Entry) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectActivate), f)
}

//export _gotk4_gtk3_Entry_ConnectBackspace
func _gotk4_gtk3_Entry_ConnectBackspace(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectBackspace signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user asks for it.
//
// The default bindings for this signal are Backspace and Shift-Backspace.
func (entry *Entry) ConnectBackspace(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "backspace", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectBackspace), f)
}

//export _gotk4_gtk3_Entry_ConnectCopyClipboard
func _gotk4_gtk3_Entry_ConnectCopyClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCopyClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to copy the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-c and Ctrl-Insert.
func (entry *Entry) ConnectCopyClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "copy-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectCopyClipboard), f)
}

//export _gotk4_gtk3_Entry_ConnectCutClipboard
func _gotk4_gtk3_Entry_ConnectCutClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectCutClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to cut the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-x and Shift-Delete.
func (entry *Entry) ConnectCutClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "cut-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectCutClipboard), f)
}

//export _gotk4_gtk3_Entry_ConnectDeleteFromCursor
func _gotk4_gtk3_Entry_ConnectDeleteFromCursor(arg0 C.gpointer, arg1 C.GtkDeleteType, arg2 C.gint, arg3 C.guintptr) {
	var f func(typ DeleteType, count int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(typ DeleteType, count int))
	}

	var _typ DeleteType // out
	var _count int      // out

	_typ = DeleteType(arg1)
	_count = int(arg2)

	f(_typ, _count)
}

// ConnectDeleteFromCursor signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted when the user initiates a text deletion.
//
// If the type is GTK_DELETE_CHARS, GTK+ deletes the selection if there is one,
// otherwise it deletes the requested number of characters.
//
// The default bindings for this signal are Delete for deleting a character and
// Ctrl-Delete for deleting a word.
func (entry *Entry) ConnectDeleteFromCursor(f func(typ DeleteType, count int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "delete-from-cursor", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectDeleteFromCursor), f)
}

//export _gotk4_gtk3_Entry_ConnectIconPress
func _gotk4_gtk3_Entry_ConnectIconPress(arg0 C.gpointer, arg1 C.GtkEntryIconPosition, arg2 C.GdkEvent, arg3 C.guintptr) {
	var f func(iconPos EntryIconPosition, event *gdk.Event)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iconPos EntryIconPosition, event *gdk.Event))
	}

	var _iconPos EntryIconPosition // out
	var _event *gdk.Event          // out

	_iconPos = EntryIconPosition(arg1)
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg2))))
		v = gdk.CopyEventer(v)
		_event = v
	}

	f(_iconPos, _event)
}

// ConnectIconPress signal is emitted when an activatable icon is clicked.
func (entry *Entry) ConnectIconPress(f func(iconPos EntryIconPosition, event *gdk.Event)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "icon-press", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectIconPress), f)
}

//export _gotk4_gtk3_Entry_ConnectIconRelease
func _gotk4_gtk3_Entry_ConnectIconRelease(arg0 C.gpointer, arg1 C.GtkEntryIconPosition, arg2 C.GdkEvent, arg3 C.guintptr) {
	var f func(iconPos EntryIconPosition, event *gdk.Event)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(iconPos EntryIconPosition, event *gdk.Event))
	}

	var _iconPos EntryIconPosition // out
	var _event *gdk.Event          // out

	_iconPos = EntryIconPosition(arg1)
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg2))))
		v = gdk.CopyEventer(v)
		_event = v
	}

	f(_iconPos, _event)
}

// ConnectIconRelease signal is emitted on the button release from a mouse click
// over an activatable icon.
func (entry *Entry) ConnectIconRelease(f func(iconPos EntryIconPosition, event *gdk.Event)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "icon-release", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectIconRelease), f)
}

//export _gotk4_gtk3_Entry_ConnectInsertAtCursor
func _gotk4_gtk3_Entry_ConnectInsertAtCursor(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(str string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(str string))
	}

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_str)
}

// ConnectInsertAtCursor signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user initiates the insertion of a fixed string at the
// cursor.
//
// This signal has no default bindings.
func (entry *Entry) ConnectInsertAtCursor(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "insert-at-cursor", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectInsertAtCursor), f)
}

//export _gotk4_gtk3_Entry_ConnectInsertEmoji
func _gotk4_gtk3_Entry_ConnectInsertEmoji(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectInsertEmoji signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to present the Emoji chooser for the entry.
//
// The default bindings for this signal are Ctrl-. and Ctrl-;.
func (entry *Entry) ConnectInsertEmoji(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "insert-emoji", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectInsertEmoji), f)
}

//export _gotk4_gtk3_Entry_ConnectMoveCursor
func _gotk4_gtk3_Entry_ConnectMoveCursor(arg0 C.gpointer, arg1 C.GtkMovementStep, arg2 C.gint, arg3 C.gboolean, arg4 C.guintptr) {
	var f func(step MovementStep, count int, extendSelection bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(step MovementStep, count int, extendSelection bool))
	}

	var _step MovementStep    // out
	var _count int            // out
	var _extendSelection bool // out

	_step = MovementStep(arg1)
	_count = int(arg2)
	if arg3 != 0 {
		_extendSelection = true
	}

	f(_step, _count, _extendSelection)
}

// ConnectMoveCursor signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user initiates a cursor movement. If the cursor is not
// visible in entry, this signal causes the viewport to be moved instead.
//
// Applications should not connect to it, but may emit it with
// g_signal_emit_by_name() if they need to control the cursor programmatically.
//
// The default bindings for this signal come in two variants, the variant with
// the Shift modifier extends the selection, the variant without the Shift
// modifer does not. There are too many key combinations to list them all here.
//
// - Arrow keys move by individual characters/lines
//
// - Ctrl-arrow key combinations move by words/paragraphs
//
// - Home/End keys move to the ends of the buffer.
func (entry *Entry) ConnectMoveCursor(f func(step MovementStep, count int, extendSelection bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "move-cursor", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectMoveCursor), f)
}

//export _gotk4_gtk3_Entry_ConnectPasteClipboard
func _gotk4_gtk3_Entry_ConnectPasteClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPasteClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to paste the contents of the clipboard into the text view.
//
// The default bindings for this signal are Ctrl-v and Shift-Insert.
func (entry *Entry) ConnectPasteClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "paste-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectPasteClipboard), f)
}

//export _gotk4_gtk3_Entry_ConnectPopulatePopup
func _gotk4_gtk3_Entry_ConnectPopulatePopup(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guintptr) {
	var f func(widget Widgetter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(widget Widgetter))
	}

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	f(_widget)
}

// ConnectPopulatePopup signal gets emitted before showing the context menu of
// the entry.
//
// If you need to add items to the context menu, connect to this signal and
// append your items to the widget, which will be a Menu in this case.
//
// If Entry:populate-all is TRUE, this signal will also be emitted to populate
// touch popups. In this case, widget will be a different container, e.g. a
// Toolbar. The signal handler should not make assumptions about the type of
// widget.
func (entry *Entry) ConnectPopulatePopup(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectPopulatePopup), f)
}

//export _gotk4_gtk3_Entry_ConnectPreeditChanged
func _gotk4_gtk3_Entry_ConnectPreeditChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(preedit string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(preedit string))
	}

	var _preedit string // out

	_preedit = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_preedit)
}

// ConnectPreeditChanged: if an input method is used, the typed text will not
// immediately be committed to the buffer. So if you are interested in the text,
// connect to this signal.
func (entry *Entry) ConnectPreeditChanged(f func(preedit string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectPreeditChanged), f)
}

//export _gotk4_gtk3_Entry_ConnectToggleOverwrite
func _gotk4_gtk3_Entry_ConnectToggleOverwrite(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggleOverwrite signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to toggle the overwrite mode of the entry.
//
// The default bindings for this signal is Insert.
func (entry *Entry) ConnectToggleOverwrite(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "toggle-overwrite", false, unsafe.Pointer(C._gotk4_gtk3_Entry_ConnectToggleOverwrite), f)
}

// NewEntry creates a new entry.
//
// The function returns the following values:
//
//    - entry: new Entry.
//
func NewEntry() *Entry {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_entry_new()

	var _entry *Entry // out

	_entry = wrapEntry(coreglib.Take(unsafe.Pointer(_cret)))

	return _entry
}

// NewEntryWithBuffer creates a new entry with the specified text buffer.
//
// The function takes the following parameters:
//
//    - buffer to use for the new Entry.
//
// The function returns the following values:
//
//    - entry: new Entry.
//
func NewEntryWithBuffer(buffer *EntryBuffer) *Entry {
	var _arg1 *C.GtkEntryBuffer // out
	var _cret *C.GtkWidget      // in

	_arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	_cret = C.gtk_entry_new_with_buffer(_arg1)
	runtime.KeepAlive(buffer)

	var _entry *Entry // out

	_entry = wrapEntry(coreglib.Take(unsafe.Pointer(_cret)))

	return _entry
}

// ActivatesDefault retrieves the value set by
// gtk_entry_set_activates_default().
//
// The function returns the following values:
//
//    - ok: TRUE if the entry will activate the default widget.
//
func (entry *Entry) ActivatesDefault() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_activates_default(_arg0)
	runtime.KeepAlive(entry)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Alignment gets the value set by gtk_entry_set_alignment().
//
// The function returns the following values:
//
//    - gfloat: alignment.
//
func (entry *Entry) Alignment() float32 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gfloat    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_alignment(_arg0)
	runtime.KeepAlive(entry)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Attributes gets the attribute list that was set on the entry using
// gtk_entry_set_attributes(), if any.
//
// The function returns the following values:
//
//    - attrList (optional): attribute list, or NULL if none was set.
//
func (entry *Entry) Attributes() *pango.AttrList {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_attributes(_arg0)
	runtime.KeepAlive(entry)

	var _attrList *pango.AttrList // out

	if _cret != nil {
		_attrList = (*pango.AttrList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.pango_attr_list_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_attrList)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
			},
		)
	}

	return _attrList
}

// Buffer: get the EntryBuffer object which holds the text for this widget.
//
// The function returns the following values:
//
//    - entryBuffer: EntryBuffer object.
//
func (entry *Entry) Buffer() *EntryBuffer {
	var _arg0 *C.GtkEntry       // out
	var _cret *C.GtkEntryBuffer // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_buffer(_arg0)
	runtime.KeepAlive(entry)

	var _entryBuffer *EntryBuffer // out

	_entryBuffer = wrapEntryBuffer(coreglib.Take(unsafe.Pointer(_cret)))

	return _entryBuffer
}

// Completion returns the auxiliary completion object currently in use by entry.
//
// The function returns the following values:
//
//    - entryCompletion: auxiliary completion object currently in use by entry.
//
func (entry *Entry) Completion() *EntryCompletion {
	var _arg0 *C.GtkEntry           // out
	var _cret *C.GtkEntryCompletion // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_completion(_arg0)
	runtime.KeepAlive(entry)

	var _entryCompletion *EntryCompletion // out

	_entryCompletion = wrapEntryCompletion(coreglib.Take(unsafe.Pointer(_cret)))

	return _entryCompletion
}

// CurrentIconDragSource returns the index of the icon which is the source of
// the current DND operation, or -1.
//
// This function is meant to be used in a Widget::drag-data-get callback.
//
// The function returns the following values:
//
//    - gint: index of the icon which is the source of the current DND operation,
//      or -1.
//
func (entry *Entry) CurrentIconDragSource() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_current_icon_drag_source(_arg0)
	runtime.KeepAlive(entry)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// CursorHAdjustment retrieves the horizontal cursor adjustment for the entry.
// See gtk_entry_set_cursor_hadjustment().
//
// The function returns the following values:
//
//    - adjustment (optional): horizontal cursor adjustment, or NULL if none has
//      been set.
//
func (entry *Entry) CursorHAdjustment() *Adjustment {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_cursor_hadjustment(_arg0)
	runtime.KeepAlive(entry)

	var _adjustment *Adjustment // out

	if _cret != nil {
		_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _adjustment
}

// HasFrame gets the value set by gtk_entry_set_has_frame().
//
// The function returns the following values:
//
//    - ok: whether the entry has a beveled frame.
//
func (entry *Entry) HasFrame() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_has_frame(_arg0)
	runtime.KeepAlive(entry)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconActivatable returns whether the icon is activatable.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - ok: TRUE if the icon is activatable.
//
func (entry *Entry) IconActivatable(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_activatable(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconArea gets the area where entry’s icon at icon_pos is drawn. This function
// is useful when drawing something to the entry in a draw callback.
//
// If the entry is not realized or has no icon at the given position, icon_area
// is filled with zeros. Otherwise, icon_area will be filled with the icon’s
// allocation, relative to entry’s allocation.
//
// See also gtk_entry_get_text_area().
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - iconArea: return location for the icon’s area.
//
func (entry *Entry) IconArea(iconPos EntryIconPosition) *gdk.Rectangle {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.GdkRectangle         // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	C.gtk_entry_get_icon_area(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _iconArea *gdk.Rectangle // out

	_iconArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _iconArea
}

// IconAtPos finds the icon at the given position and return its index. The
// position’s coordinates are relative to the entry’s top left corner. If x, y
// doesn’t lie inside an icon, -1 is returned. This function is intended for use
// in a Widget::query-tooltip signal handler.
//
// The function takes the following parameters:
//
//    - x coordinate of the position to find.
//    - y coordinate of the position to find.
//
// The function returns the following values:
//
//    - gint: index of the icon at the given position, or -1.
//
func (entry *Entry) IconAtPos(x, y int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gtk_entry_get_icon_at_pos(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IconGIcon retrieves the #GIcon used for the icon, or NULL if there is no icon
// or if the icon was set by some other method (e.g., by stock, pixbuf, or icon
// name).
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - icon (optional) or NULL if no icon is set or if the icon is not a #GIcon.
//
func (entry *Entry) IconGIcon(iconPos EntryIconPosition) *gio.Icon {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.GIcon               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_gicon(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _icon *gio.Icon // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_icon = &gio.Icon{
				Object: obj,
			}
		}
	}

	return _icon
}

// IconName retrieves the icon name used for the icon, or NULL if there is no
// icon or if the icon was set by some other method (e.g., by pixbuf, stock or
// gicon).
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): icon name, or NULL if no icon is set or if the icon
//      wasn’t set from an icon name.
//
func (entry *Entry) IconName(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_name(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// IconPixbuf retrieves the image used for the icon.
//
// Unlike the other methods of setting and getting icon data, this method will
// work regardless of whether the icon was set using a Pixbuf, a #GIcon, a stock
// item, or an icon name.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - pixbuf (optional) or NULL if no icon is set for this position.
//
func (entry *Entry) IconPixbuf(iconPos EntryIconPosition) *gdkpixbuf.Pixbuf {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.GdkPixbuf           // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_pixbuf(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _pixbuf *gdkpixbuf.Pixbuf // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_pixbuf = &gdkpixbuf.Pixbuf{
				Object: obj,
				LoadableIcon: gio.LoadableIcon{
					Icon: gio.Icon{
						Object: obj,
					},
				},
			}
		}
	}

	return _pixbuf
}

// IconSensitive returns whether the icon appears sensitive or insensitive.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - ok: TRUE if the icon is sensitive.
//
func (entry *Entry) IconSensitive(iconPos EntryIconPosition) bool {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_sensitive(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconStock retrieves the stock id used for the icon, or NULL if there is no
// icon or if the icon was set by some other method (e.g., by pixbuf, icon name
// or gicon).
//
// Deprecated: Use gtk_entry_get_icon_name() instead.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8: stock id, or NULL if no icon is set or if the icon wasn’t set from
//      a stock id.
//
func (entry *Entry) IconStock(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_stock(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// IconStorageType gets the type of representation being used by the icon to
// store image data. If the icon has no image data, the return value will be
// GTK_IMAGE_EMPTY.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - imageType: image representation being used.
//
func (entry *Entry) IconStorageType(iconPos EntryIconPosition) ImageType {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret C.GtkImageType         // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_storage_type(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _imageType ImageType // out

	_imageType = ImageType(_cret)

	return _imageType
}

// IconTooltipMarkup gets the contents of the tooltip on the icon at the
// specified position in entry.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. Free the returned string with
//      g_free() when done.
//
func (entry *Entry) IconTooltipMarkup(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_markup(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// IconTooltipText gets the contents of the tooltip on the icon at the specified
// position in entry.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//
// The function returns the following values:
//
//    - utf8 (optional): tooltip text, or NULL. Free the returned string with
//      g_free() when done.
//
func (entry *Entry) IconTooltipText(iconPos EntryIconPosition) string {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _cret *C.gchar               // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)

	_cret = C.gtk_entry_get_icon_tooltip_text(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// InnerBorder: this function returns the entry’s Entry:inner-border property.
// See gtk_entry_set_inner_border() for more information.
//
// Deprecated: Use the standard border and padding CSS properties (through
// objects like StyleContext and CssProvider); the value returned by this
// function is ignored by Entry.
//
// The function returns the following values:
//
//    - border (optional) entry’s Border, or NULL if none was set.
//
func (entry *Entry) InnerBorder() *Border {
	var _arg0 *C.GtkEntry  // out
	var _cret *C.GtkBorder // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_inner_border(_arg0)
	runtime.KeepAlive(entry)

	var _border *Border // out

	if _cret != nil {
		_border = (*Border)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _border
}

// InputHints gets the value of the Entry:input-hints property.
//
// The function returns the following values:
//
func (entry *Entry) InputHints() InputHints {
	var _arg0 *C.GtkEntry     // out
	var _cret C.GtkInputHints // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_input_hints(_arg0)
	runtime.KeepAlive(entry)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

// InputPurpose gets the value of the Entry:input-purpose property.
//
// The function returns the following values:
//
func (entry *Entry) InputPurpose() InputPurpose {
	var _arg0 *C.GtkEntry       // out
	var _cret C.GtkInputPurpose // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_input_purpose(_arg0)
	runtime.KeepAlive(entry)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

// InvisibleChar retrieves the character displayed in place of the real
// characters for entries with visibility set to false. See
// gtk_entry_set_invisible_char().
//
// The function returns the following values:
//
//    - gunichar: current invisible char, or 0, if the entry does not show
//      invisible text at all.
//
func (entry *Entry) InvisibleChar() uint32 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gunichar  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_invisible_char(_arg0)
	runtime.KeepAlive(entry)

	var _gunichar uint32 // out

	_gunichar = uint32(_cret)

	return _gunichar
}

// Layout gets the Layout used to display the entry. The layout is useful to
// e.g. convert text positions to pixel positions, in combination with
// gtk_entry_get_layout_offsets(). The returned layout is owned by the entry and
// must not be modified or freed by the caller.
//
// Keep in mind that the layout text may contain a preedit string, so
// gtk_entry_layout_index_to_text_index() and
// gtk_entry_text_index_to_layout_index() are needed to convert byte indices in
// the layout to byte indices in the entry contents.
//
// The function returns the following values:
//
//    - layout for this entry.
//
func (entry *Entry) Layout() *pango.Layout {
	var _arg0 *C.GtkEntry    // out
	var _cret *C.PangoLayout // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_layout(_arg0)
	runtime.KeepAlive(entry)

	var _layout *pango.Layout // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_layout = &pango.Layout{
			Object: obj,
		}
	}

	return _layout
}

// LayoutOffsets obtains the position of the Layout used to render text in the
// entry, in widget coordinates. Useful if you want to line up the text in an
// entry with some other text, e.g. when using the entry to implement editable
// cells in a sheet widget.
//
// Also useful to convert mouse events into coordinates inside the Layout, e.g.
// to take some action if some part of the entry text is clicked.
//
// Note that as the user scrolls around in the entry the offsets will change;
// you’ll need to connect to the “notify::scroll-offset” signal to track this.
// Remember when using the Layout functions you need to convert to and from
// pixels using PANGO_PIXELS() or NGO_SCALE.
//
// Keep in mind that the layout text may contain a preedit string, so
// gtk_entry_layout_index_to_text_index() and
// gtk_entry_text_index_to_layout_index() are needed to convert byte indices in
// the layout to byte indices in the entry contents.
//
// The function returns the following values:
//
//    - x (optional): location to store X offset of layout, or NULL.
//    - y (optional): location to store Y offset of layout, or NULL.
//
func (entry *Entry) LayoutOffsets() (x, y int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // in
	var _arg2 C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_get_layout_offsets(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(entry)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

// MaxLength retrieves the maximum allowed length of the text in entry. See
// gtk_entry_set_max_length().
//
// This is equivalent to getting entry's EntryBuffer and calling
// gtk_entry_buffer_get_max_length() on it.
//
// The function returns the following values:
//
//    - gint: maximum allowed number of characters in Entry, or 0 if there is no
//      maximum.
//
func (entry *Entry) MaxLength() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_max_length(_arg0)
	runtime.KeepAlive(entry)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MaxWidthChars retrieves the desired maximum width of entry, in characters.
// See gtk_entry_set_max_width_chars().
//
// The function returns the following values:
//
//    - gint: maximum width of the entry, in characters.
//
func (entry *Entry) MaxWidthChars() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_max_width_chars(_arg0)
	runtime.KeepAlive(entry)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// OverwriteMode gets the value set by gtk_entry_set_overwrite_mode().
//
// The function returns the following values:
//
//    - ok: whether the text is overwritten when typing.
//
func (entry *Entry) OverwriteMode() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_overwrite_mode(_arg0)
	runtime.KeepAlive(entry)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PlaceholderText retrieves the text that will be displayed when entry is empty
// and unfocused.
//
// The function returns the following values:
//
//    - utf8: pointer to the placeholder text as a string. This string points to
//      internally allocated storage in the widget and must not be freed,
//      modified or stored.
//
func (entry *Entry) PlaceholderText() string {
	var _arg0 *C.GtkEntry // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_placeholder_text(_arg0)
	runtime.KeepAlive(entry)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ProgressFraction returns the current fraction of the task that’s been
// completed. See gtk_entry_set_progress_fraction().
//
// The function returns the following values:
//
//    - gdouble: fraction from 0.0 to 1.0.
//
func (entry *Entry) ProgressFraction() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_progress_fraction(_arg0)
	runtime.KeepAlive(entry)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ProgressPulseStep retrieves the pulse step set with
// gtk_entry_set_progress_pulse_step().
//
// The function returns the following values:
//
//    - gdouble: fraction from 0.0 to 1.0.
//
func (entry *Entry) ProgressPulseStep() float64 {
	var _arg0 *C.GtkEntry // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_progress_pulse_step(_arg0)
	runtime.KeepAlive(entry)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Tabs gets the tabstops that were set on the entry using gtk_entry_set_tabs(),
// if any.
//
// The function returns the following values:
//
//    - tabArray (optional): tabstops, or NULL if none was set.
//
func (entry *Entry) Tabs() *pango.TabArray {
	var _arg0 *C.GtkEntry      // out
	var _cret *C.PangoTabArray // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_tabs(_arg0)
	runtime.KeepAlive(entry)

	var _tabArray *pango.TabArray // out

	if _cret != nil {
		_tabArray = (*pango.TabArray)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _tabArray
}

// Text retrieves the contents of the entry widget. See also
// gtk_editable_get_chars().
//
// This is equivalent to getting entry's EntryBuffer and calling
// gtk_entry_buffer_get_text() on it.
//
// The function returns the following values:
//
//    - utf8: pointer to the contents of the widget as a string. This string
//      points to internally allocated storage in the widget and must not be
//      freed, modified or stored.
//
func (entry *Entry) Text() string {
	var _arg0 *C.GtkEntry // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_text(_arg0)
	runtime.KeepAlive(entry)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// TextArea gets the area where the entry’s text is drawn. This function is
// useful when drawing something to the entry in a draw callback.
//
// If the entry is not realized, text_area is filled with zeros.
//
// See also gtk_entry_get_icon_area().
//
// The function returns the following values:
//
//    - textArea: return location for the text area.
//
func (entry *Entry) TextArea() *gdk.Rectangle {
	var _arg0 *C.GtkEntry    // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_get_text_area(_arg0, &_arg1)
	runtime.KeepAlive(entry)

	var _textArea *gdk.Rectangle // out

	_textArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _textArea
}

// TextLength retrieves the current length of the text in entry.
//
// This is equivalent to getting entry's EntryBuffer and calling
// gtk_entry_buffer_get_length() on it.
//
// The function returns the following values:
//
//    - guint16: current number of characters in Entry, or 0 if there are none.
//
func (entry *Entry) TextLength() uint16 {
	var _arg0 *C.GtkEntry // out
	var _cret C.guint16   // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_text_length(_arg0)
	runtime.KeepAlive(entry)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// Visibility retrieves whether the text in entry is visible. See
// gtk_entry_set_visibility().
//
// The function returns the following values:
//
//    - ok: TRUE if the text is currently visible.
//
func (entry *Entry) Visibility() bool {
	var _arg0 *C.GtkEntry // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_visibility(_arg0)
	runtime.KeepAlive(entry)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WidthChars gets the value set by gtk_entry_set_width_chars().
//
// The function returns the following values:
//
//    - gint: number of chars to request space for, or negative if unset.
//
func (entry *Entry) WidthChars() int {
	var _arg0 *C.GtkEntry // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_cret = C.gtk_entry_get_width_chars(_arg0)
	runtime.KeepAlive(entry)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// GrabFocusWithoutSelecting causes entry to have keyboard focus.
//
// It behaves like gtk_widget_grab_focus(), except that it doesn't select the
// contents of the entry. You only want to call this on some special entries
// which the user usually doesn't want to replace all text in, such as
// search-as-you-type entries.
func (entry *Entry) GrabFocusWithoutSelecting() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_grab_focus_without_selecting(_arg0)
	runtime.KeepAlive(entry)
}

// IMContextFilterKeypress: allow the Entry input method to internally handle
// key press and release events. If this function returns TRUE, then no further
// processing should be done for this key event. See
// gtk_im_context_filter_keypress().
//
// Note that you are expected to call this function from your handler when
// overriding key event handling. This is needed in the case when you need to
// insert your own key handling between the input method and the default key
// event handling of the Entry. See gtk_text_view_reset_im_context() for an
// example of use.
//
// The function takes the following parameters:
//
//    - event: key event.
//
// The function returns the following values:
//
//    - ok: TRUE if the input method handled the key event.
//
func (entry *Entry) IMContextFilterKeypress(event *gdk.EventKey) bool {
	var _arg0 *C.GtkEntry    // out
	var _arg1 *C.GdkEventKey // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C.gtk_entry_im_context_filter_keypress(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LayoutIndexToTextIndex converts from a position in the entry’s Layout
// (returned by gtk_entry_get_layout()) to a position in the entry contents
// (returned by gtk_entry_get_text()).
//
// The function takes the following parameters:
//
//    - layoutIndex: byte index into the entry layout text.
//
// The function returns the following values:
//
//    - gint: byte index into the entry contents.
//
func (entry *Entry) LayoutIndexToTextIndex(layoutIndex int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(layoutIndex)

	_cret = C.gtk_entry_layout_index_to_text_index(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(layoutIndex)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ProgressPulse indicates that some progress is made, but you don’t know how
// much. Causes the entry’s progress indicator to enter “activity mode,” where a
// block bounces back and forth. Each call to gtk_entry_progress_pulse() causes
// the block to move by a little bit (the amount of movement per pulse is
// determined by gtk_entry_set_progress_pulse_step()).
func (entry *Entry) ProgressPulse() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_progress_pulse(_arg0)
	runtime.KeepAlive(entry)
}

// ResetIMContext: reset the input method context of the entry if needed.
//
// This can be necessary in the case where modifying the buffer would confuse
// on-going input method behavior.
func (entry *Entry) ResetIMContext() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_reset_im_context(_arg0)
	runtime.KeepAlive(entry)
}

// SetActivatesDefault: if setting is TRUE, pressing Enter in the entry will
// activate the default widget for the window containing the entry. This usually
// means that the dialog box containing the entry will be closed, since the
// default widget is usually one of the dialog buttons.
//
// (For experts: if setting is TRUE, the entry calls
// gtk_window_activate_default() on the window containing the entry, in the
// default handler for the Entry::activate signal.).
//
// The function takes the following parameters:
//
//    - setting: TRUE to activate window’s default widget on Enter keypress.
//
func (entry *Entry) SetActivatesDefault(setting bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_activates_default(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(setting)
}

// SetAlignment sets the alignment for the contents of the entry. This controls
// the horizontal positioning of the contents when the displayed text is shorter
// than the width of the entry.
//
// The function takes the following parameters:
//
//    - xalign: horizontal alignment, from 0 (left) to 1 (right). Reversed for
//      RTL layouts.
//
func (entry *Entry) SetAlignment(xalign float32) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gfloat    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gfloat(xalign)

	C.gtk_entry_set_alignment(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(xalign)
}

// SetAttributes sets a AttrList; the attributes in the list are applied to the
// entry text.
//
// The function takes the following parameters:
//
//    - attrs: AttrList.
//
func (entry *Entry) SetAttributes(attrs *pango.AttrList) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.PangoAttrList // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(attrs)))

	C.gtk_entry_set_attributes(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(attrs)
}

// SetBuffer: set the EntryBuffer object which holds the text for this widget.
//
// The function takes the following parameters:
//
//    - buffer: EntryBuffer.
//
func (entry *Entry) SetBuffer(buffer *EntryBuffer) {
	var _arg0 *C.GtkEntry       // out
	var _arg1 *C.GtkEntryBuffer // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = (*C.GtkEntryBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	C.gtk_entry_set_buffer(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(buffer)
}

// SetCompletion sets completion to be the auxiliary completion object to use
// with entry. All further configuration of the completion mechanism is done on
// completion using the EntryCompletion API. Completion is disabled if
// completion is set to NULL.
//
// The function takes the following parameters:
//
//    - completion (optional) or NULL.
//
func (entry *Entry) SetCompletion(completion *EntryCompletion) {
	var _arg0 *C.GtkEntry           // out
	var _arg1 *C.GtkEntryCompletion // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if completion != nil {
		_arg1 = (*C.GtkEntryCompletion)(unsafe.Pointer(coreglib.InternObject(completion).Native()))
	}

	C.gtk_entry_set_completion(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(completion)
}

// SetCursorHAdjustment hooks up an adjustment to the cursor position in an
// entry, so that when the cursor is moved, the adjustment is scrolled to show
// that position. See gtk_scrolled_window_get_hadjustment() for a typical way of
// obtaining the adjustment.
//
// The adjustment has to be in pixel units and in the same coordinate system as
// the entry.
//
// The function takes the following parameters:
//
//    - adjustment (optional) which should be adjusted when the cursor is moved,
//      or NULL.
//
func (entry *Entry) SetCursorHAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if adjustment != nil {
		_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	}

	C.gtk_entry_set_cursor_hadjustment(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(adjustment)
}

// SetHasFrame sets whether the entry has a beveled frame around it.
//
// The function takes the following parameters:
//
//    - setting: new value.
//
func (entry *Entry) SetHasFrame(setting bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_has_frame(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(setting)
}

// SetIconActivatable sets whether the icon is activatable.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - activatable: TRUE if the icon should be activatable.
//
func (entry *Entry) SetIconActivatable(iconPos EntryIconPosition, activatable bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if activatable {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_activatable(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(activatable)
}

// SetIconDragSource sets up the icon at the given position so that GTK+ will
// start a drag operation when the user clicks and drags the icon.
//
// To handle the drag operation, you need to connect to the usual
// Widget::drag-data-get (or possibly Widget::drag-data-delete) signal, and use
// gtk_entry_get_current_icon_drag_source() in your signal handler to find out
// if the drag was started from an icon.
//
// By default, GTK+ uses the icon as the drag icon. You can use the
// Widget::drag-begin signal to set a different icon. Note that you have to use
// g_signal_connect_after() to ensure that your signal handler gets executed
// after the default handler.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - targetList targets (data formats) in which the data can be provided.
//    - actions: bitmask of the allowed drag actions.
//
func (entry *Entry) SetIconDragSource(iconPos EntryIconPosition, targetList *TargetList, actions gdk.DragAction) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GtkTargetList       // out
	var _arg3 C.GdkDragAction        // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	_arg2 = (*C.GtkTargetList)(gextras.StructNative(unsafe.Pointer(targetList)))
	_arg3 = C.GdkDragAction(actions)

	C.gtk_entry_set_icon_drag_source(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(targetList)
	runtime.KeepAlive(actions)
}

// SetIconFromGIcon sets the icon shown in the entry at the specified position
// from the current icon theme. If the icon isn’t known, a “broken image” icon
// will be displayed instead.
//
// If icon is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: position at which to set the icon.
//    - icon (optional) to set, or NULL.
//
func (entry *Entry) SetIconFromGIcon(iconPos EntryIconPosition, icon gio.Iconner) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GIcon               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if icon != nil {
		_arg2 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	}

	C.gtk_entry_set_icon_from_gicon(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(icon)
}

// SetIconFromIconName sets the icon shown in the entry at the specified
// position from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be displayed
// instead.
//
// If icon_name is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: position at which to set the icon.
//    - iconName (optional): icon name, or NULL.
//
func (entry *Entry) SetIconFromIconName(iconPos EntryIconPosition, iconName string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if iconName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_from_icon_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(iconName)
}

// SetIconFromPixbuf sets the icon shown in the specified position using a
// pixbuf.
//
// If pixbuf is NULL, no icon will be shown in the specified position.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - pixbuf (optional) or NULL.
//
func (entry *Entry) SetIconFromPixbuf(iconPos EntryIconPosition, pixbuf *gdkpixbuf.Pixbuf) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.GdkPixbuf           // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if pixbuf != nil {
		_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	}

	C.gtk_entry_set_icon_from_pixbuf(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(pixbuf)
}

// SetIconFromStock sets the icon shown in the entry at the specified position
// from a stock image.
//
// If stock_id is NULL, no icon will be shown in the specified position.
//
// Deprecated: Use gtk_entry_set_icon_from_icon_name() instead.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - stockId (optional): name of the stock item, or NULL.
//
func (entry *Entry) SetIconFromStock(iconPos EntryIconPosition, stockId string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if stockId != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stockId)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_from_stock(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(stockId)
}

// SetIconSensitive sets the sensitivity for the specified icon.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - sensitive specifies whether the icon should appear sensitive or
//      insensitive.
//
func (entry *Entry) SetIconSensitive(iconPos EntryIconPosition, sensitive bool) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 C.gboolean             // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if sensitive {
		_arg2 = C.TRUE
	}

	C.gtk_entry_set_icon_sensitive(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(sensitive)
}

// SetIconTooltipMarkup sets tooltip as the contents of the tooltip for the icon
// at the specified position. tooltip is assumed to be marked up with the [Pango
// text markup language][PangoMarkupFormat].
//
// Use NULL for tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_markup() and
// gtk_entry_set_icon_tooltip_text().
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - tooltip (optional) contents of the tooltip for the icon, or NULL.
//
func (entry *Entry) SetIconTooltipMarkup(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if tooltip != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_tooltip_markup(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(tooltip)
}

// SetIconTooltipText sets tooltip as the contents of the tooltip for the icon
// at the specified position.
//
// Use NULL for tooltip to remove an existing tooltip.
//
// See also gtk_widget_set_tooltip_text() and
// gtk_entry_set_icon_tooltip_markup().
//
// If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
// gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to FALSE,
// which suppresses icon tooltips too. You can resolve this by then calling
// gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to TRUE, or
// setting at least one non-empty tooltip on any icon achieves the same result.
//
// The function takes the following parameters:
//
//    - iconPos: icon position.
//    - tooltip (optional) contents of the tooltip for the icon, or NULL.
//
func (entry *Entry) SetIconTooltipText(iconPos EntryIconPosition, tooltip string) {
	var _arg0 *C.GtkEntry            // out
	var _arg1 C.GtkEntryIconPosition // out
	var _arg2 *C.gchar               // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkEntryIconPosition(iconPos)
	if tooltip != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_entry_set_icon_tooltip_text(_arg0, _arg1, _arg2)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(iconPos)
	runtime.KeepAlive(tooltip)
}

// SetInnerBorder sets entry’s inner-border property to border, or clears it if
// NULL is passed. The inner-border is the area around the entry’s text, but
// inside its frame.
//
// If set, this property overrides the inner-border style property. Overriding
// the style-provided border is useful when you want to do in-place editing of
// some text in a canvas or list widget, where pixel-exact positioning of the
// entry is important.
//
// Deprecated: Use the standard border and padding CSS properties (through
// objects like StyleContext and CssProvider); the value set with this function
// is ignored by Entry.
//
// The function takes the following parameters:
//
//    - border (optional) or NULL.
//
func (entry *Entry) SetInnerBorder(border *Border) {
	var _arg0 *C.GtkEntry  // out
	var _arg1 *C.GtkBorder // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if border != nil {
		_arg1 = (*C.GtkBorder)(gextras.StructNative(unsafe.Pointer(border)))
	}

	C.gtk_entry_set_inner_border(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(border)
}

// SetInputHints sets the Entry:input-hints property, which allows input methods
// to fine-tune their behaviour.
//
// The function takes the following parameters:
//
//    - hints: hints.
//
func (entry *Entry) SetInputHints(hints InputHints) {
	var _arg0 *C.GtkEntry     // out
	var _arg1 C.GtkInputHints // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkInputHints(hints)

	C.gtk_entry_set_input_hints(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(hints)
}

// SetInputPurpose sets the Entry:input-purpose property which can be used by
// on-screen keyboards and other input methods to adjust their behaviour.
//
// The function takes the following parameters:
//
//    - purpose: purpose.
//
func (entry *Entry) SetInputPurpose(purpose InputPurpose) {
	var _arg0 *C.GtkEntry       // out
	var _arg1 C.GtkInputPurpose // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.GtkInputPurpose(purpose)

	C.gtk_entry_set_input_purpose(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(purpose)
}

// SetInvisibleChar sets the character to use in place of the actual text when
// gtk_entry_set_visibility() has been called to set text visibility to FALSE.
// i.e. this is the character used in “password mode” to show the user how many
// characters have been typed. By default, GTK+ picks the best invisible char
// available in the current font. If you set the invisible char to 0, then the
// user will get no feedback at all; there will be no text on the screen as they
// type.
//
// The function takes the following parameters:
//
//    - ch: unicode character.
//
func (entry *Entry) SetInvisibleChar(ch uint32) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gunichar  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gunichar(ch)

	C.gtk_entry_set_invisible_char(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(ch)
}

// SetMaxLength sets the maximum allowed length of the contents of the widget.
// If the current contents are longer than the given length, then they will be
// truncated to fit.
//
// This is equivalent to getting entry's EntryBuffer and calling
// gtk_entry_buffer_set_max_length() on it. ]|.
//
// The function takes the following parameters:
//
//    - max: maximum length of the entry, or 0 for no maximum. (other than the
//      maximum length of entries.) The value passed in will be clamped to the
//      range 0-65536.
//
func (entry *Entry) SetMaxLength(max int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(max)

	C.gtk_entry_set_max_length(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(max)
}

// SetMaxWidthChars sets the desired maximum width in characters of entry.
//
// The function takes the following parameters:
//
//    - nChars: new desired maximum width, in characters.
//
func (entry *Entry) SetMaxWidthChars(nChars int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(nChars)

	C.gtk_entry_set_max_width_chars(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(nChars)
}

// SetOverwriteMode sets whether the text is overwritten when typing in the
// Entry.
//
// The function takes the following parameters:
//
//    - overwrite: new value.
//
func (entry *Entry) SetOverwriteMode(overwrite bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if overwrite {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_overwrite_mode(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(overwrite)
}

// SetPlaceholderText sets text to be displayed in entry when it is empty and
// unfocused. This can be used to give a visual hint of the expected contents of
// the Entry.
//
// Note that since the placeholder text gets removed when the entry received
// focus, using this feature is a bit problematic if the entry is given the
// initial focus in a window. Sometimes this can be worked around by delaying
// the initial focus setting until the first key event arrives.
//
// The function takes the following parameters:
//
//    - text (optional): string to be displayed when entry is empty and
//      unfocused, or NULL.
//
func (entry *Entry) SetPlaceholderText(text string) {
	var _arg0 *C.GtkEntry // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if text != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gtk_entry_set_placeholder_text(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(text)
}

// SetProgressFraction causes the entry’s progress indicator to “fill in” the
// given fraction of the bar. The fraction should be between 0.0 and 1.0,
// inclusive.
//
// The function takes the following parameters:
//
//    - fraction of the task that’s been completed.
//
func (entry *Entry) SetProgressFraction(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_fraction(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(fraction)
}

// SetProgressPulseStep sets the fraction of total entry width to move the
// progress bouncing block for each call to gtk_entry_progress_pulse().
//
// The function takes the following parameters:
//
//    - fraction between 0.0 and 1.0.
//
func (entry *Entry) SetProgressPulseStep(fraction float64) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gdouble(fraction)

	C.gtk_entry_set_progress_pulse_step(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(fraction)
}

// SetTabs sets a TabArray; the tabstops in the array are applied to the entry
// text.
//
// The function takes the following parameters:
//
//    - tabs: TabArray.
//
func (entry *Entry) SetTabs(tabs *pango.TabArray) {
	var _arg0 *C.GtkEntry      // out
	var _arg1 *C.PangoTabArray // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = (*C.PangoTabArray)(gextras.StructNative(unsafe.Pointer(tabs)))

	C.gtk_entry_set_tabs(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(tabs)
}

// SetText sets the text in the widget to the given value, replacing the current
// contents.
//
// See gtk_entry_buffer_set_text().
//
// The function takes the following parameters:
//
//    - text: new text.
//
func (entry *Entry) SetText(text string) {
	var _arg0 *C.GtkEntry // out
	var _arg1 *C.gchar    // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_entry_set_text(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(text)
}

// SetVisibility sets whether the contents of the entry are visible or not. When
// visibility is set to FALSE, characters are displayed as the invisible char,
// and will also appear that way when the text in the entry widget is copied
// elsewhere.
//
// By default, GTK+ picks the best invisible character available in the current
// font, but it can be changed with gtk_entry_set_invisible_char().
//
// Note that you probably want to set Entry:input-purpose to
// GTK_INPUT_PURPOSE_PASSWORD or GTK_INPUT_PURPOSE_PIN to inform input methods
// about the purpose of this entry, in addition to setting visibility to FALSE.
//
// The function takes the following parameters:
//
//    - visible: TRUE if the contents of the entry are displayed as plaintext.
//
func (entry *Entry) SetVisibility(visible bool) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.gtk_entry_set_visibility(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(visible)
}

// SetWidthChars changes the size request of the entry to be about the right
// size for n_chars characters. Note that it changes the size request, the size
// can still be affected by how you pack the widget into containers. If n_chars
// is -1, the size reverts to the default entry size.
//
// The function takes the following parameters:
//
//    - nChars: width in chars.
//
func (entry *Entry) SetWidthChars(nChars int) {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(nChars)

	C.gtk_entry_set_width_chars(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(nChars)
}

// TextIndexToLayoutIndex converts from a position in the entry contents
// (returned by gtk_entry_get_text()) to a position in the entry’s Layout
// (returned by gtk_entry_get_layout(), with text retrieved via
// pango_layout_get_text()).
//
// The function takes the following parameters:
//
//    - textIndex: byte index into the entry contents.
//
// The function returns the following values:
//
//    - gint: byte index into the entry layout text.
//
func (entry *Entry) TextIndexToLayoutIndex(textIndex int) int {
	var _arg0 *C.GtkEntry // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	_arg1 = C.gint(textIndex)

	_cret = C.gtk_entry_text_index_to_layout_index(_arg0, _arg1)
	runtime.KeepAlive(entry)
	runtime.KeepAlive(textIndex)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// UnsetInvisibleChar unsets the invisible char previously set with
// gtk_entry_set_invisible_char(). So that the default invisible char is used
// again.
func (entry *Entry) UnsetInvisibleChar() {
	var _arg0 *C.GtkEntry // out

	_arg0 = (*C.GtkEntry)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	C.gtk_entry_unset_invisible_char(_arg0)
	runtime.KeepAlive(entry)
}
