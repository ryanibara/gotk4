// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeVSeparator returns the GType for the type VSeparator.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeVSeparator() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "VSeparator").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalVSeparator)
	return gtype
}

// VSeparatorOverrider contains methods that are overridable.
type VSeparatorOverrider interface {
}

// VSeparator widget is a vertical separator, used to group the widgets within a
// window. It displays a vertical line with a shadow to make it appear sunken
// into the interface.
//
// GtkVSeparator has been deprecated, use Separator instead.
type VSeparator struct {
	_ [0]func() // equal guard
	Separator
}

var (
	_ Widgetter         = (*VSeparator)(nil)
	_ coreglib.Objector = (*VSeparator)(nil)
)

func classInitVSeparatorrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapVSeparator(obj *coreglib.Object) *VSeparator {
	return &VSeparator{
		Separator: Separator{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalVSeparator(p uintptr) (interface{}, error) {
	return wrapVSeparator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewVSeparator creates a new VSeparator.
//
// Deprecated: Use gtk_separator_new() with GTK_ORIENTATION_VERTICAL instead.
//
// The function returns the following values:
//
//    - vSeparator: new VSeparator.
//
func NewVSeparator() *VSeparator {
	_info := girepository.MustFind("Gtk", "VSeparator")
	_gret := _info.InvokeClassMethod("new_VSeparator", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _vSeparator *VSeparator // out

	_vSeparator = wrapVSeparator(coreglib.Take(unsafe.Pointer(_cret)))

	return _vSeparator
}
