// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// GObject* _gotk4_gtk3_Buildable_virtual_construct_child(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, gchar* arg2) {
//   return ((GObject* (*)(GtkBuildable*, GtkBuilder*, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// GObject* _gotk4_gtk3_Buildable_virtual_get_internal_child(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, gchar* arg2) {
//   return ((GObject* (*)(GtkBuildable*, GtkBuilder*, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gtk3_Buildable_virtual_custom_tag_start(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, GObject* arg2, gchar* arg3, GMarkupParser* arg4, gpointer* arg5) {
//   return ((gboolean (*)(GtkBuildable*, GtkBuilder*, GObject*, gchar*, GMarkupParser*, gpointer*))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
// gchar* _gotk4_gtk3_Buildable_virtual_get_name(void* fnptr, GtkBuildable* arg0) {
//   return ((gchar* (*)(GtkBuildable*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_Buildable_virtual_add_child(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, GObject* arg2, gchar* arg3) {
//   ((void (*)(GtkBuildable*, GtkBuilder*, GObject*, gchar*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_Buildable_virtual_custom_finished(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, GObject* arg2, gchar* arg3, gpointer arg4) {
//   ((void (*)(GtkBuildable*, GtkBuilder*, GObject*, gchar*, gpointer))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_gtk3_Buildable_virtual_custom_tag_end(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, GObject* arg2, gchar* arg3, gpointer* arg4) {
//   ((void (*)(GtkBuildable*, GtkBuilder*, GObject*, gchar*, gpointer*))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_gtk3_Buildable_virtual_parser_finished(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1) {
//   ((void (*)(GtkBuildable*, GtkBuilder*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_Buildable_virtual_set_buildable_property(void* fnptr, GtkBuildable* arg0, GtkBuilder* arg1, gchar* arg2, GValue* arg3) {
//   ((void (*)(GtkBuildable*, GtkBuilder*, gchar*, GValue*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_Buildable_virtual_set_name(void* fnptr, GtkBuildable* arg0, gchar* arg1) {
//   ((void (*)(GtkBuildable*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// AddChild adds a child to buildable. type is an optional string describing how
// the child should be added.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - child to add.
//    - typ (optional): kind of child or NULL.
//
func (buildable *Buildable) AddChild(builder *Builder, child *coreglib.Object, typ string) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	if typ != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	C.gtk_buildable_add_child(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(typ)
}

// ConstructChild constructs a child of buildable with the name name.
//
// Builder calls this function if a “constructor” has been specified in the UI
// definition.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - name of child to construct.
//
// The function returns the following values:
//
//    - object: constructed child.
//
func (buildable *Buildable) ConstructChild(builder *Builder, name string) *coreglib.Object {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _cret *C.GObject      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_buildable_construct_child(_arg0, _arg1, _arg2)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)

	var _object *coreglib.Object // out

	_object = coreglib.AssumeOwnership(unsafe.Pointer(_cret))

	return _object
}

// CustomFinished: this is similar to gtk_buildable_parser_finished() but is
// called once for each custom tag handled by the buildable.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of the tag.
//    - data (optional): user data created in custom_tag_start.
//
func (buildable *Buildable) CustomFinished(builder *Builder, child *coreglib.Object, tagname string, data unsafe.Pointer) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 C.gpointer      // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.gpointer)(unsafe.Pointer(data))

	C.gtk_buildable_custom_finished(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)
	runtime.KeepAlive(data)
}

// CustomTagEnd: this is called at the end of each custom element handled by the
// buildable.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of tag.
//    - data (optional): user data that will be passed in to parser functions.
//
func (buildable *Buildable) CustomTagEnd(builder *Builder, child *coreglib.Object, tagname string, data *unsafe.Pointer) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 *C.gpointer     // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))
	if data != nil {
		_arg4 = (*C.gpointer)(unsafe.Pointer(data))
	}

	C.gtk_buildable_custom_tag_end(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)
	runtime.KeepAlive(data)
}

// CustomTagStart: this is called for each unknown element under <child>.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of tag.
//
// The function returns the following values:
//
//    - parser to fill in.
//    - data (optional): return location for user data that will be passed in to
//      parser functions.
//    - ok: TRUE if a object has a custom implementation, FALSE if it doesn't.
//
func (buildable *Buildable) CustomTagStart(builder *Builder, child *coreglib.Object, tagname string) (*glib.MarkupParser, unsafe.Pointer, bool) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 C.GMarkupParser // in
	var _arg5 C.gpointer      // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gtk_buildable_custom_tag_start(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)

	var _parser *glib.MarkupParser // out
	var _data unsafe.Pointer       // out
	var _ok bool                   // out

	_parser = (*glib.MarkupParser)(gextras.NewStructNative(unsafe.Pointer((&_arg4))))
	_data = (unsafe.Pointer)(unsafe.Pointer(_arg5))
	if _cret != 0 {
		_ok = true
	}

	return _parser, _data, _ok
}

// InternalChild: get the internal child called childname of the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - childname: name of child.
//
// The function returns the following values:
//
//    - object: internal child of the buildable object.
//
func (buildable *Buildable) InternalChild(builder *Builder, childname string) *coreglib.Object {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _cret *C.GObject      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(childname)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gtk_buildable_get_internal_child(_arg0, _arg1, _arg2)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(childname)

	var _object *coreglib.Object // out

	_object = coreglib.Take(unsafe.Pointer(_cret))

	return _object
}

// Name gets the name of the buildable object.
//
// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
// used to construct the buildable.
//
// The function returns the following values:
//
//    - utf8: name set with gtk_buildable_set_name().
//
func (buildable *Buildable) Name() string {
	var _arg0 *C.GtkBuildable // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))

	_cret = C.gtk_buildable_get_name(_arg0)
	runtime.KeepAlive(buildable)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ParserFinished: called when the builder finishes the parsing of a [GtkBuilder
// UI definition][BUILDER-UI]. Note that this will be called once for each time
// gtk_builder_add_from_file() or gtk_builder_add_from_string() is called on a
// builder.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//
func (buildable *Buildable) ParserFinished(builder *Builder) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))

	C.gtk_buildable_parser_finished(_arg0, _arg1)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
}

// SetBuildableProperty sets the property name name to value on the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - name of property.
//    - value of property.
//
func (buildable *Buildable) SetBuildableProperty(builder *Builder, name string, value *coreglib.Value) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _arg3 *C.GValue       // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C.gtk_buildable_set_buildable_property(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetName sets the name of the buildable object.
//
// The function takes the following parameters:
//
//    - name to set.
//
func (buildable *Buildable) SetName(name string) {
	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_buildable_set_name(_arg0, _arg1)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(name)
}

// addChild adds a child to buildable. type is an optional string describing how
// the child should be added.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - child to add.
//    - typ (optional): kind of child or NULL.
//
func (buildable *Buildable) addChild(builder *Builder, child *coreglib.Object, typ string) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.add_child

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	if typ != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	C._gotk4_gtk3_Buildable_virtual_add_child(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(typ)
}

// constructChild constructs a child of buildable with the name name.
//
// Builder calls this function if a “constructor” has been specified in the UI
// definition.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - name of child to construct.
//
// The function returns the following values:
//
//    - object: constructed child.
//
func (buildable *Buildable) constructChild(builder *Builder, name string) *coreglib.Object {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.construct_child

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _cret *C.GObject      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C._gotk4_gtk3_Buildable_virtual_construct_child(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)

	var _object *coreglib.Object // out

	_object = coreglib.AssumeOwnership(unsafe.Pointer(_cret))

	return _object
}

// customFinished: this is similar to gtk_buildable_parser_finished() but is
// called once for each custom tag handled by the buildable.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of the tag.
//    - data (optional): user data created in custom_tag_start.
//
func (buildable *Buildable) customFinished(builder *Builder, child *coreglib.Object, tagname string, data unsafe.Pointer) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.custom_finished

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 C.gpointer      // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (C.gpointer)(unsafe.Pointer(data))

	C._gotk4_gtk3_Buildable_virtual_custom_finished(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)
	runtime.KeepAlive(data)
}

// customTagEnd: this is called at the end of each custom element handled by the
// buildable.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of tag.
//    - data (optional): user data that will be passed in to parser functions.
//
func (buildable *Buildable) customTagEnd(builder *Builder, child *coreglib.Object, tagname string, data *unsafe.Pointer) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.custom_tag_end

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 *C.gpointer     // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))
	if data != nil {
		_arg4 = (*C.gpointer)(unsafe.Pointer(data))
	}

	C._gotk4_gtk3_Buildable_virtual_custom_tag_end(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)
	runtime.KeepAlive(data)
}

// customTagStart: this is called for each unknown element under <child>.
//
// The function takes the following parameters:
//
//    - builder used to construct this object.
//    - child (optional) object or NULL for non-child tags.
//    - tagname: name of tag.
//
// The function returns the following values:
//
//    - parser to fill in.
//    - data (optional): return location for user data that will be passed in to
//      parser functions.
//    - ok: TRUE if a object has a custom implementation, FALSE if it doesn't.
//
func (buildable *Buildable) customTagStart(builder *Builder, child *coreglib.Object, tagname string) (*glib.MarkupParser, unsafe.Pointer, bool) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.custom_tag_start

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.GObject      // out
	var _arg3 *C.gchar        // out
	var _arg4 C.GMarkupParser // in
	var _arg5 C.gpointer      // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	if child != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(child.Native()))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C._gotk4_gtk3_Buildable_virtual_custom_tag_start(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tagname)

	var _parser *glib.MarkupParser // out
	var _data unsafe.Pointer       // out
	var _ok bool                   // out

	_parser = (*glib.MarkupParser)(gextras.NewStructNative(unsafe.Pointer((&_arg4))))
	_data = (unsafe.Pointer)(unsafe.Pointer(_arg5))
	if _cret != 0 {
		_ok = true
	}

	return _parser, _data, _ok
}

// internalChild: get the internal child called childname of the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - childname: name of child.
//
// The function returns the following values:
//
//    - object: internal child of the buildable object.
//
func (buildable *Buildable) internalChild(builder *Builder, childname string) *coreglib.Object {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.get_internal_child

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _cret *C.GObject      // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(childname)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C._gotk4_gtk3_Buildable_virtual_get_internal_child(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(childname)

	var _object *coreglib.Object // out

	_object = coreglib.Take(unsafe.Pointer(_cret))

	return _object
}

// Name gets the name of the buildable object.
//
// Builder sets the name based on the [GtkBuilder UI definition][BUILDER-UI]
// used to construct the buildable.
//
// The function returns the following values:
//
//    - utf8: name set with gtk_buildable_set_name().
//
func (buildable *Buildable) name() string {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.get_name

	var _arg0 *C.GtkBuildable // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))

	_cret = C._gotk4_gtk3_Buildable_virtual_get_name(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(buildable)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// parserFinished: called when the builder finishes the parsing of a [GtkBuilder
// UI definition][BUILDER-UI]. Note that this will be called once for each time
// gtk_builder_add_from_file() or gtk_builder_add_from_string() is called on a
// builder.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//
func (buildable *Buildable) parserFinished(builder *Builder) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.parser_finished

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))

	C._gotk4_gtk3_Buildable_virtual_parser_finished(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
}

// setBuildableProperty sets the property name name to value on the buildable
// object.
//
// The function takes the following parameters:
//
//    - builder: Builder.
//    - name of property.
//    - value of property.
//
func (buildable *Buildable) setBuildableProperty(builder *Builder, name string, value *coreglib.Value) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.set_buildable_property

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.GtkBuilder   // out
	var _arg2 *C.gchar        // out
	var _arg3 *C.GValue       // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C._gotk4_gtk3_Buildable_virtual_set_buildable_property(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// setName sets the name of the buildable object.
//
// The function takes the following parameters:
//
//    - name to set.
//
func (buildable *Buildable) setName(name string) {
	gclass := (*C.GtkBuildableIface)(coreglib.PeekParentClass(buildable))
	fnarg := gclass.set_name

	var _arg0 *C.GtkBuildable // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GtkBuildable)(unsafe.Pointer(coreglib.InternObject(buildable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C._gotk4_gtk3_Buildable_virtual_set_name(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(buildable)
	runtime.KeepAlive(name)
}
