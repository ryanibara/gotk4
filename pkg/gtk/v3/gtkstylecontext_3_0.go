// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// DrawInsertionCursor draws a text caret on cr at location. This is not a style
// function but merely a convenience function for drawing the standard cursor
// shape.
//
// Deprecated: Use gtk_render_insertion_cursor() instead.
//
// The function takes the following parameters:
//
//    - widget: Widget.
//    - cr: cairo context to draw to.
//    - location where to draw the cursor (location->width is ignored).
//    - isPrimary: if the cursor should be the primary cursor color.
//    - direction: whether the cursor is left-to-right or right-to-left. Should
//      never be K_TEXT_DIR_NONE.
//    - drawArrow: TRUE to draw a directional arrow on the cursor. Should be
//      FALSE unless the cursor is split.
//
func DrawInsertionCursor(widget Widgetter, cr *cairo.Context, location *gdk.Rectangle, isPrimary bool, direction TextDirection, drawArrow bool) {
	var _arg1 *C.GtkWidget       // out
	var _arg2 *C.cairo_t         // out
	var _arg3 *C.GdkRectangle    // out
	var _arg4 C.gboolean         // out
	var _arg5 C.GtkTextDirection // out
	var _arg6 C.gboolean         // out

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg3 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(location)))
	if isPrimary {
		_arg4 = C.TRUE
	}
	_arg5 = C.GtkTextDirection(direction)
	if drawArrow {
		_arg6 = C.TRUE
	}

	C.gtk_draw_insertion_cursor(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(location)
	runtime.KeepAlive(isPrimary)
	runtime.KeepAlive(direction)
	runtime.KeepAlive(drawArrow)
}

// AddClass adds a style class to context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make use
// of this new class for styling.
//
// In the CSS file format, a Entry defining a “search” class, would be matched
// by:
//
// |[ <!-- language="CSS" --> entry.search { ... } ]|
//
// While any widget defining a “search” class would be matched by: |[ <!--
// language="CSS" --> .search { ... } ]|.
//
// The function takes the following parameters:
//
//    - className class name to use in styling.
//
func (context *StyleContext) AddClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(className)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_add_class(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(className)
}

// AddProvider adds a style provider to context, to be used in style
// construction. Note that a style provider added by this function only affects
// the style of the widget to which context belongs. If you want to affect the
// style of all widgets, use gtk_style_context_add_provider_for_screen().
//
// Note: If both priorities are the same, a StyleProvider added through this
// function takes precedence over another added through
// gtk_style_context_add_provider_for_screen().
//
// The function takes the following parameters:
//
//    - provider: StyleProvider.
//    - priority of the style provider. The lower it is, the earlier it will be
//      used in the style construction. Typically this will be in the range
//      between GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
//      GTK_STYLE_PROVIDER_PRIORITY_USER.
//
func (context *StyleContext) AddProvider(provider StyleProviderer, priority uint) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out
	var _arg2 C.guint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg2 = C.guint(priority)

	C.gtk_style_context_add_provider(_arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(priority)
}

// AddRegion adds a region to context, so posterior calls to
// gtk_style_context_get() or any of the gtk_render_*() functions will make use
// of this new region for styling.
//
// In the CSS file format, a TreeView defining a “row” region, would be matched
// by:
//
// |[ <!-- language="CSS" --> treeview row { ... } ]|
//
// Pseudo-classes are used for matching flags, so the two following rules: |[
// <!-- language="CSS" --> treeview row:nth-child(even) { ... } treeview
// row:nth-child(odd) { ... } ]|
//
// would apply to even and odd rows, respectively.
//
// Region names must only contain lowercase letters and “-”, starting always
// with a lowercase letter.
//
// Deprecated: since version 3.14.
//
// The function takes the following parameters:
//
//    - regionName: region name to use in styling.
//    - flags that apply to the region.
//
func (context *StyleContext) AddRegion(regionName string, flags RegionFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GtkRegionFlags   // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(regionName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkRegionFlags(flags)

	C.gtk_style_context_add_region(_arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(regionName)
	runtime.KeepAlive(flags)
}

// CancelAnimations stops all running animations for region_id and all
// animatable regions underneath.
//
// A NULL region_id will stop all ongoing animations in context, when dealing
// with a StyleContext obtained through gtk_widget_get_style_context(), this is
// normally done for you in all circumstances you would expect all widget to be
// stopped, so this should be only used in complex widgets with different
// animatable regions.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//    - regionId (optional): animatable region to stop, or NULL. See
//      gtk_style_context_push_animatable_region().
//
func (context *StyleContext) CancelAnimations(regionId unsafe.Pointer) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.gpointer         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(regionId))

	C.gtk_style_context_cancel_animations(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(regionId)
}

// BackgroundColor gets the background color for a given state.
//
// This function is far less useful than it seems, and it should not be used in
// newly written code. CSS has no concept of "background color", as a background
// can be an image, or a gradient, or any other pattern including solid colors.
//
// The only reason why you would call gtk_style_context_get_background_color()
// is to use the returned value to draw the background with it; the correct way
// to achieve this result is to use gtk_render_background() instead, along with
// CSS style classes to modify the color to be rendered.
//
// Deprecated: Use gtk_render_background() instead.
//
// The function takes the following parameters:
//
//    - state to retrieve the color for.
//
// The function returns the following values:
//
//    - color: return value for the background color.
//
func (context *StyleContext) BackgroundColor(state StateFlags) *gdk.RGBA {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GdkRGBA          // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_background_color(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _color
}

// Border gets the border for a given state as a Border.
//
// See gtk_style_context_get_property() and K_STYLE_PROPERTY_BORDER_WIDTH for
// details.
//
// The function takes the following parameters:
//
//    - state to retrieve the border for.
//
// The function returns the following values:
//
//    - border: return value for the border settings.
//
func (context *StyleContext) Border(state StateFlags) *Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_border(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _border *Border // out

	_border = (*Border)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _border
}

// BorderColor gets the border color for a given state.
//
// Deprecated: Use gtk_render_frame() instead.
//
// The function takes the following parameters:
//
//    - state to retrieve the color for.
//
// The function returns the following values:
//
//    - color: return value for the border color.
//
func (context *StyleContext) BorderColor(state StateFlags) *gdk.RGBA {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GdkRGBA          // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_border_color(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _color
}

// Color gets the foreground color for a given state.
//
// See gtk_style_context_get_property() and K_STYLE_PROPERTY_COLOR for details.
//
// The function takes the following parameters:
//
//    - state to retrieve the color for.
//
// The function returns the following values:
//
//    - color: return value for the foreground color.
//
func (context *StyleContext) Color(state StateFlags) *gdk.RGBA {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GdkRGBA          // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_color(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _color
}

// Direction returns the widget direction used for rendering.
//
// Deprecated: Use gtk_style_context_get_state() and check for
// K_STATE_FLAG_DIR_LTR and K_STATE_FLAG_DIR_RTL instead.
//
// The function returns the following values:
//
//    - textDirection: widget direction.
//
func (context *StyleContext) Direction() TextDirection {
	var _arg0 *C.GtkStyleContext // out
	var _cret C.GtkTextDirection // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_direction(_arg0)
	runtime.KeepAlive(context)

	var _textDirection TextDirection // out

	_textDirection = TextDirection(_cret)

	return _textDirection
}

// Font returns the font description for a given state. The returned object is
// const and will remain valid until the StyleContext::changed signal happens.
//
// Deprecated: Use gtk_style_context_get() for "font" or subproperties instead.
//
// The function takes the following parameters:
//
//    - state to retrieve the font for.
//
// The function returns the following values:
//
//    - fontDescription for the given state. This object is owned by GTK+ and
//      should not be freed.
//
func (context *StyleContext) Font(state StateFlags) *pango.FontDescription {
	var _arg0 *C.GtkStyleContext      // out
	var _arg1 C.GtkStateFlags         // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	_cret = C.gtk_style_context_get_font(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _fontDescription *pango.FontDescription // out

	_fontDescription = (*pango.FontDescription)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _fontDescription
}

// JunctionSides returns the sides where rendered elements connect visually with
// others.
//
// The function returns the following values:
//
//    - junctionSides: junction sides.
//
func (context *StyleContext) JunctionSides() JunctionSides {
	var _arg0 *C.GtkStyleContext // out
	var _cret C.GtkJunctionSides // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_junction_sides(_arg0)
	runtime.KeepAlive(context)

	var _junctionSides JunctionSides // out

	_junctionSides = JunctionSides(_cret)

	return _junctionSides
}

// Margin gets the margin for a given state as a Border. See
// gtk_style_property_get() and K_STYLE_PROPERTY_MARGIN for details.
//
// The function takes the following parameters:
//
//    - state to retrieve the border for.
//
// The function returns the following values:
//
//    - margin: return value for the margin settings.
//
func (context *StyleContext) Margin(state StateFlags) *Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_margin(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _margin *Border // out

	_margin = (*Border)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _margin
}

// Padding gets the padding for a given state as a Border. See
// gtk_style_context_get() and K_STYLE_PROPERTY_PADDING for details.
//
// The function takes the following parameters:
//
//    - state to retrieve the padding for.
//
// The function returns the following values:
//
//    - padding: return value for the padding settings.
//
func (context *StyleContext) Padding(state StateFlags) *Border {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out
	var _arg2 C.GtkBorder        // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(state)

	C.gtk_style_context_get_padding(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _padding *Border // out

	_padding = (*Border)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _padding
}

// Path returns the widget path used for style matching.
//
// The function returns the following values:
//
//    - widgetPath: WidgetPath.
//
func (context *StyleContext) Path() *WidgetPath {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GtkWidgetPath   // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_path(_arg0)
	runtime.KeepAlive(context)

	var _widgetPath *WidgetPath // out

	_widgetPath = (*WidgetPath)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.gtk_widget_path_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_widgetPath)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_widget_path_unref((*C.GtkWidgetPath)(intern.C))
		},
	)

	return _widgetPath
}

// Property gets a style property from context for the given state.
//
// Note that not all CSS properties that are supported by GTK+ can be retrieved
// in this way, since they may not be representable as #GValue. GTK+ defines
// macros for a number of properties that can be used with this function.
//
// Note that passing a state other than the current state of context is not
// recommended unless the style context has been saved with
// gtk_style_context_save().
//
// When value is no longer needed, g_value_unset() must be called to free any
// allocated memory.
//
// The function takes the following parameters:
//
//    - property: style property name.
//    - state to retrieve the property value for.
//
// The function returns the following values:
//
//    - value: return location for the style property value.
//
func (context *StyleContext) Property(property string, state StateFlags) coreglib.Value {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GtkStateFlags    // out
	var _arg3 C.GValue           // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GtkStateFlags(state)

	C.gtk_style_context_get_property(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(property)
	runtime.KeepAlive(state)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg3)))
	runtime.SetFinalizer(_value, func(v *coreglib.Value) {
		C.g_value_unset((*C.GValue)(unsafe.Pointer(v.Native())))
	})

	return _value
}

// State returns the state used for style matching.
//
// This method should only be used to retrieve the StateFlags to pass to
// StyleContext methods, like gtk_style_context_get_padding(). If you need to
// retrieve the current state of a Widget, use gtk_widget_get_state_flags().
//
// The function returns the following values:
//
//    - stateFlags: state flags.
//
func (context *StyleContext) State() StateFlags {
	var _arg0 *C.GtkStyleContext // out
	var _cret C.GtkStateFlags    // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_get_state(_arg0)
	runtime.KeepAlive(context)

	var _stateFlags StateFlags // out

	_stateFlags = StateFlags(_cret)

	return _stateFlags
}

// HasClass returns TRUE if context currently has defined the given class name.
//
// The function takes the following parameters:
//
//    - className class name.
//
// The function returns the following values:
//
//    - ok: TRUE if context has class_name defined.
//
func (context *StyleContext) HasClass(className string) bool {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(className)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_has_class(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(className)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasRegion returns TRUE if context has the region defined. If flags_return is
// not NULL, it is set to the flags affecting the region.
//
// Deprecated: since version 3.14.
//
// The function takes the following parameters:
//
//    - regionName: region name.
//
// The function returns the following values:
//
//    - flagsReturn (optional): return location for region flags.
//    - ok: TRUE if region is defined.
//
func (context *StyleContext) HasRegion(regionName string) (RegionFlags, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out
	var _arg2 C.GtkRegionFlags   // in
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(regionName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_style_context_has_region(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(regionName)

	var _flagsReturn RegionFlags // out
	var _ok bool                 // out

	_flagsReturn = RegionFlags(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _flagsReturn, _ok
}

// Invalidate invalidates context style information, so it will be reconstructed
// again. It is useful if you modify the context and need the new information
// immediately.
//
// Deprecated: Style contexts are invalidated automatically.
func (context *StyleContext) Invalidate() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_style_context_invalidate(_arg0)
	runtime.KeepAlive(context)
}

// ListClasses returns the list of classes currently defined in context.
//
// The function returns the following values:
//
//    - list of strings with the currently defined classes. The contents of the
//      list are owned by GTK+, but you must free the list itself with
//      g_list_free() when you are done with it.
//
func (context *StyleContext) ListClasses() []string {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GList           // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_list_classes(_arg0)
	runtime.KeepAlive(context)

	var _list []string // out

	_list = make([]string, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// ListRegions returns the list of regions currently defined in context.
//
// Deprecated: since version 3.14.
//
// The function returns the following values:
//
//    - list of strings with the currently defined regions. The contents of the
//      list are owned by GTK+, but you must free the list itself with
//      g_list_free() when you are done with it.
//
func (context *StyleContext) ListRegions() []string {
	var _arg0 *C.GtkStyleContext // out
	var _cret *C.GList           // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_style_context_list_regions(_arg0)
	runtime.KeepAlive(context)

	var _list []string // out

	_list = make([]string, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.gchar)(v)
		var dst string // out
		dst = C.GoString((*C.gchar)(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// NotifyStateChange notifies a state change on context, so if the current style
// makes use of transition animations, one will be started so all rendered
// elements under region_id are animated for state state being set to value
// state_value.
//
// The window parameter is used in order to invalidate the rendered area as the
// animation runs, so make sure it is the same window that is being rendered on
// by the gtk_render_*() functions.
//
// If region_id is NULL, all rendered elements using context will be affected by
// this state transition.
//
// As a practical example, a Button notifying a state transition on the prelight
// state: |[ <!-- language="C" --> gtk_style_context_notify_state_change
// (context, gtk_widget_get_window (widget), NULL, GTK_STATE_PRELIGHT,
// button->in_button); ]|
//
// Can be handled in the CSS file like this: |[ <!-- language="CSS" --> button {
// background-color: #f00 }
//
// button:hover { background-color: #fff; transition: 200ms linear } ]|
//
// This combination will animate the button background from red to white if a
// pointer enters the button, and back to red if the pointer leaves the button.
//
// Note that state is used when finding the transition parameters, which is why
// the style places the transition under the :hover pseudo-class.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//    - window: Window.
//    - regionId (optional): animatable region to notify on, or NULL. See
//      gtk_style_context_push_animatable_region().
//    - state to trigger transition for.
//    - stateValue: TRUE if state is the state we are changing to, FALSE if we
//      are changing away from it.
//
func (context *StyleContext) NotifyStateChange(window gdk.Windower, regionId unsafe.Pointer, state StateType, stateValue bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out
	var _arg2 C.gpointer         // out
	var _arg3 C.GtkStateType     // out
	var _arg4 C.gboolean         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = (C.gpointer)(unsafe.Pointer(regionId))
	_arg3 = C.GtkStateType(state)
	if stateValue {
		_arg4 = C.TRUE
	}

	C.gtk_style_context_notify_state_change(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
	runtime.KeepAlive(regionId)
	runtime.KeepAlive(state)
	runtime.KeepAlive(stateValue)
}

// PopAnimatableRegion pops an animatable region from context. See
// gtk_style_context_push_animatable_region().
//
// Deprecated: This function does nothing.
func (context *StyleContext) PopAnimatableRegion() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_style_context_pop_animatable_region(_arg0)
	runtime.KeepAlive(context)
}

// PushAnimatableRegion pushes an animatable region, so all further
// gtk_render_*() calls between this call and the following
// gtk_style_context_pop_animatable_region() will potentially show transition
// animations for this region if gtk_style_context_notify_state_change() is
// called for a given state, and the current theme/style defines transition
// animations for state changes.
//
// The region_id used must be unique in context so the themes can uniquely
// identify rendered elements subject to a state transition.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//    - regionId (optional): unique identifier for the animatable region.
//
func (context *StyleContext) PushAnimatableRegion(regionId unsafe.Pointer) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.gpointer         // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(regionId))

	C.gtk_style_context_push_animatable_region(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(regionId)
}

// RemoveClass removes class_name from context.
//
// The function takes the following parameters:
//
//    - className class name to remove.
//
func (context *StyleContext) RemoveClass(className string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(className)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_class(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(className)
}

// RemoveProvider removes provider from the style providers list in context.
//
// The function takes the following parameters:
//
//    - provider: StyleProvider.
//
func (context *StyleContext) RemoveProvider(provider StyleProviderer) {
	var _arg0 *C.GtkStyleContext  // out
	var _arg1 *C.GtkStyleProvider // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C.gtk_style_context_remove_provider(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(provider)
}

// RemoveRegion removes a region from context.
//
// Deprecated: since version 3.14.
//
// The function takes the following parameters:
//
//    - regionName: region name to unset.
//
func (context *StyleContext) RemoveRegion(regionName string) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(regionName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_style_context_remove_region(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(regionName)
}

// Restore restores context state to a previous stage. See
// gtk_style_context_save().
func (context *StyleContext) Restore() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_style_context_restore(_arg0)
	runtime.KeepAlive(context)
}

// Save saves the context state, so temporary modifications done through
// gtk_style_context_add_class(), gtk_style_context_remove_class(),
// gtk_style_context_set_state(), etc. can quickly be reverted in one go through
// gtk_style_context_restore().
//
// The matching call to gtk_style_context_restore() must be done before GTK
// returns to the main loop.
func (context *StyleContext) Save() {
	var _arg0 *C.GtkStyleContext // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_style_context_save(_arg0)
	runtime.KeepAlive(context)
}

// ScrollAnimations: this function is analogous to gdk_window_scroll(), and
// should be called together with it so the invalidation areas for any ongoing
// animation are scrolled together with it.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//    - window used previously in gtk_style_context_notify_state_change().
//    - dx: amount to scroll in the X axis.
//    - dy: amount to scroll in the Y axis.
//
func (context *StyleContext) ScrollAnimations(window gdk.Windower, dx, dy int) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out
	var _arg2 C.gint             // out
	var _arg3 C.gint             // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = C.gint(dx)
	_arg3 = C.gint(dy)

	C.gtk_style_context_scroll_animations(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// SetBackground sets the background of window to the background pattern or
// color specified in context for its current state.
//
// Deprecated: Use gtk_render_background() instead. Note that clients still
// using this function are now responsible for calling this function again
// whenever context is invalidated.
//
// The function takes the following parameters:
//
//    - window: Window.
//
func (context *StyleContext) SetBackground(window gdk.Windower) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkWindow       // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gtk_style_context_set_background(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(window)
}

// SetDirection sets the reading direction for rendering purposes.
//
// If you are using a StyleContext returned from gtk_widget_get_style_context(),
// you do not need to call this yourself.
//
// Deprecated: Use gtk_style_context_set_state() with K_STATE_FLAG_DIR_LTR and
// K_STATE_FLAG_DIR_RTL instead.
//
// The function takes the following parameters:
//
//    - direction: new direction.
//
func (context *StyleContext) SetDirection(direction TextDirection) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkTextDirection // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkTextDirection(direction)

	C.gtk_style_context_set_direction(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(direction)
}

// SetJunctionSides sets the sides where rendered elements (mostly through
// gtk_render_frame()) will visually connect with other visual elements.
//
// This is merely a hint that may or may not be honored by themes.
//
// Container widgets are expected to set junction hints as appropriate for their
// children, so it should not normally be necessary to call this function
// manually.
//
// The function takes the following parameters:
//
//    - sides where rendered elements are visually connected to other elements.
//
func (context *StyleContext) SetJunctionSides(sides JunctionSides) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkJunctionSides // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkJunctionSides(sides)

	C.gtk_style_context_set_junction_sides(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(sides)
}

// SetPath sets the WidgetPath used for style matching. As a consequence, the
// style will be regenerated to match the new given path.
//
// If you are using a StyleContext returned from gtk_widget_get_style_context(),
// you do not need to call this yourself.
//
// The function takes the following parameters:
//
//    - path: WidgetPath.
//
func (context *StyleContext) SetPath(path *WidgetPath) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GtkWidgetPath   // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GtkWidgetPath)(gextras.StructNative(unsafe.Pointer(path)))

	C.gtk_style_context_set_path(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(path)
}

// SetScreen attaches context to the given screen.
//
// The screen is used to add style information from “global” style providers,
// such as the screen’s Settings instance.
//
// If you are using a StyleContext returned from gtk_widget_get_style_context(),
// you do not need to call this yourself.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func (context *StyleContext) SetScreen(screen *gdk.Screen) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 *C.GdkScreen       // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	C.gtk_style_context_set_screen(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(screen)
}

// SetState sets the state to be used for style matching.
//
// The function takes the following parameters:
//
//    - flags: state to represent.
//
func (context *StyleContext) SetState(flags StateFlags) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateFlags    // out

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateFlags(flags)

	C.gtk_style_context_set_state(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(flags)
}

// StateIsRunning returns TRUE if there is a transition animation running for
// the current region (see gtk_style_context_push_animatable_region()).
//
// If progress is not NULL, the animation progress will be returned there, 0.0
// means the state is closest to being unset, while 1.0 means it’s closest to
// being set. This means transition animation will run from 0 to 1 when state is
// being set and from 1 to 0 when it’s being unset.
//
// Deprecated: This function always returns FALSE.
//
// The function takes the following parameters:
//
//    - state: widget state.
//
// The function returns the following values:
//
//    - progress: return location for the transition progress.
//    - ok: TRUE if there is a running transition animation for state.
//
func (context *StyleContext) StateIsRunning(state StateType) (float64, bool) {
	var _arg0 *C.GtkStyleContext // out
	var _arg1 C.GtkStateType     // out
	var _arg2 C.gdouble          // in
	var _cret C.gboolean         // in

	_arg0 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.GtkStateType(state)

	_cret = C.gtk_style_context_state_is_running(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(state)

	var _progress float64 // out
	var _ok bool          // out

	_progress = float64(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _progress, _ok
}

// StyleContextAddProviderForScreen adds a global style provider to screen,
// which will be used in style construction for all StyleContexts under screen.
//
// GTK+ uses this to make styling information from Settings available.
//
// Note: If both priorities are the same, A StyleProvider added through
// gtk_style_context_add_provider() takes precedence over another added through
// this function.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//    - provider: StyleProvider.
//    - priority of the style provider. The lower it is, the earlier it will be
//      used in the style construction. Typically this will be in the range
//      between GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
//      GTK_STYLE_PROVIDER_PRIORITY_USER.
//
func StyleContextAddProviderForScreen(screen *gdk.Screen, provider StyleProviderer, priority uint) {
	var _arg1 *C.GdkScreen        // out
	var _arg2 *C.GtkStyleProvider // out
	var _arg3 C.guint             // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg2 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg3 = C.guint(priority)

	C.gtk_style_context_add_provider_for_screen(_arg1, _arg2, _arg3)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(priority)
}

// StyleContextRemoveProviderForScreen removes provider from the global style
// providers list in screen.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//    - provider: StyleProvider.
//
func StyleContextRemoveProviderForScreen(screen *gdk.Screen, provider StyleProviderer) {
	var _arg1 *C.GdkScreen        // out
	var _arg2 *C.GtkStyleProvider // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg2 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C.gtk_style_context_remove_provider_for_screen(_arg1, _arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(provider)
}

// StyleContextResetWidgets: this function recomputes the styles for all widgets
// under a particular Screen. This is useful when some global parameter has
// changed that affects the appearance of all widgets, because when a widget
// gets a new style, it will both redraw and recompute any cached information
// about its appearance. As an example, it is used when the color scheme changes
// in the related Settings object.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func StyleContextResetWidgets(screen *gdk.Screen) {
	var _arg1 *C.GdkScreen // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	C.gtk_style_context_reset_widgets(_arg1)
	runtime.KeepAlive(screen)
}
