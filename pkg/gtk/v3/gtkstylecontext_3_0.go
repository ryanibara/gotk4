// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// DrawInsertionCursor draws a text caret on cr at location. This is not a style
// function but merely a convenience function for drawing the standard cursor
// shape.
//
// Deprecated: Use gtk_render_insertion_cursor() instead.
//
// The function takes the following parameters:
//
//    - widget: Widget.
//    - cr: cairo context to draw to.
//    - location where to draw the cursor (location->width is ignored).
//    - isPrimary: if the cursor should be the primary cursor color.
//    - direction: whether the cursor is left-to-right or right-to-left. Should
//      never be K_TEXT_DIR_NONE.
//    - drawArrow: TRUE to draw a directional arrow on the cursor. Should be
//      FALSE unless the cursor is split.
//
func DrawInsertionCursor(widget Widgetter, cr *cairo.Context, location *gdk.Rectangle, isPrimary bool, direction TextDirection, drawArrow bool) {
	var _arg1 *C.GtkWidget       // out
	var _arg2 *C.cairo_t         // out
	var _arg3 *C.GdkRectangle    // out
	var _arg4 C.gboolean         // out
	var _arg5 C.GtkTextDirection // out
	var _arg6 C.gboolean         // out

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg3 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(location)))
	if isPrimary {
		_arg4 = C.TRUE
	}
	_arg5 = C.GtkTextDirection(direction)
	if drawArrow {
		_arg6 = C.TRUE
	}

	C.gtk_draw_insertion_cursor(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(location)
	runtime.KeepAlive(isPrimary)
	runtime.KeepAlive(direction)
	runtime.KeepAlive(drawArrow)
}

// StyleContextAddProviderForScreen adds a global style provider to screen,
// which will be used in style construction for all StyleContexts under screen.
//
// GTK+ uses this to make styling information from Settings available.
//
// Note: If both priorities are the same, A StyleProvider added through
// gtk_style_context_add_provider() takes precedence over another added through
// this function.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//    - provider: StyleProvider.
//    - priority of the style provider. The lower it is, the earlier it will be
//      used in the style construction. Typically this will be in the range
//      between GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
//      GTK_STYLE_PROVIDER_PRIORITY_USER.
//
func StyleContextAddProviderForScreen(screen *gdk.Screen, provider StyleProviderer, priority uint) {
	var _arg1 *C.GdkScreen        // out
	var _arg2 *C.GtkStyleProvider // out
	var _arg3 C.guint             // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg2 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg3 = C.guint(priority)

	C.gtk_style_context_add_provider_for_screen(_arg1, _arg2, _arg3)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(priority)
}

// StyleContextRemoveProviderForScreen removes provider from the global style
// providers list in screen.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//    - provider: StyleProvider.
//
func StyleContextRemoveProviderForScreen(screen *gdk.Screen, provider StyleProviderer) {
	var _arg1 *C.GdkScreen        // out
	var _arg2 *C.GtkStyleProvider // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg2 = (*C.GtkStyleProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C.gtk_style_context_remove_provider_for_screen(_arg1, _arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(provider)
}

// StyleContextResetWidgets: this function recomputes the styles for all widgets
// under a particular Screen. This is useful when some global parameter has
// changed that affects the appearance of all widgets, because when a widget
// gets a new style, it will both redraw and recompute any cached information
// about its appearance. As an example, it is used when the color scheme changes
// in the related Settings object.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func StyleContextResetWidgets(screen *gdk.Screen) {
	var _arg1 *C.GdkScreen // out

	_arg1 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	C.gtk_style_context_reset_widgets(_arg1)
	runtime.KeepAlive(screen)
}
