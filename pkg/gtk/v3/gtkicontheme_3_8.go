// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// LoadIconAsync: asynchronously load, render and scale an icon previously
// looked up from the icon theme using gtk_icon_theme_lookup_icon().
//
// For more details, see gtk_icon_info_load_icon() which is the synchronous
// version of this call.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - callback (optional) to call when the request is satisfied.
//
func (iconInfo *IconInfo) LoadIconAsync(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GtkIconInfo        // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gtk_icon_info_load_icon_async(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// LoadIconFinish finishes an async icon load, see
// gtk_icon_info_load_icon_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
// The function returns the following values:
//
//    - pixbuf: rendered icon; this may be a newly created icon or a new
//      reference to an internal icon, so you must not modify the icon. Use
//      g_object_unref() to release your reference to the icon.
//
func (iconInfo *IconInfo) LoadIconFinish(res gio.AsyncResulter) (*gdkpixbuf.Pixbuf, error) {
	var _arg0 *C.GtkIconInfo  // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GdkPixbuf    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))

	_cret = C.gtk_icon_info_load_icon_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(res)

	var _pixbuf *gdkpixbuf.Pixbuf // out
	var _goerr error              // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_pixbuf = &gdkpixbuf.Pixbuf{
			Object: obj,
			LoadableIcon: gio.LoadableIcon{
				Icon: gio.Icon{
					Object: obj,
				},
			},
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pixbuf, _goerr
}

// LoadSymbolicAsync: asynchronously load, render and scale a symbolic icon
// previously looked up from the icon theme using gtk_icon_theme_lookup_icon().
//
// For more details, see gtk_icon_info_load_symbolic() which is the synchronous
// version of this call.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - fg representing the foreground color of the icon.
//    - successColor (optional) representing the warning color of the icon or
//      NULL to use the default color.
//    - warningColor (optional) representing the warning color of the icon or
//      NULL to use the default color.
//    - errorColor (optional) representing the error color of the icon or NULL to
//      use the default color (allow-none).
//    - callback (optional) to call when the request is satisfied.
//
func (iconInfo *IconInfo) LoadSymbolicAsync(ctx context.Context, fg, successColor, warningColor, errorColor *gdk.RGBA, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GtkIconInfo        // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.GdkRGBA            // out
	var _arg2 *C.GdkRGBA            // out
	var _arg3 *C.GdkRGBA            // out
	var _arg4 *C.GdkRGBA            // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(fg)))
	if successColor != nil {
		_arg2 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(successColor)))
	}
	if warningColor != nil {
		_arg3 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(warningColor)))
	}
	if errorColor != nil {
		_arg4 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(errorColor)))
	}
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gtk_icon_info_load_symbolic_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(fg)
	runtime.KeepAlive(successColor)
	runtime.KeepAlive(warningColor)
	runtime.KeepAlive(errorColor)
	runtime.KeepAlive(callback)
}

// LoadSymbolicFinish finishes an async icon load, see
// gtk_icon_info_load_symbolic_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
// The function returns the following values:
//
//    - wasSymbolic (optional) returns whether the loaded icon was a symbolic one
//      and whether the fg color was applied to it.
//    - pixbuf: rendered icon; this may be a newly created icon or a new
//      reference to an internal icon, so you must not modify the icon. Use
//      g_object_unref() to release your reference to the icon.
//
func (iconInfo *IconInfo) LoadSymbolicFinish(res gio.AsyncResulter) (bool, *gdkpixbuf.Pixbuf, error) {
	var _arg0 *C.GtkIconInfo  // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 C.gboolean      // in
	var _cret *C.GdkPixbuf    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))

	_cret = C.gtk_icon_info_load_symbolic_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(res)

	var _wasSymbolic bool         // out
	var _pixbuf *gdkpixbuf.Pixbuf // out
	var _goerr error              // out

	if _arg2 != 0 {
		_wasSymbolic = true
	}
	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_pixbuf = &gdkpixbuf.Pixbuf{
			Object: obj,
			LoadableIcon: gio.LoadableIcon{
				Icon: gio.Icon{
					Object: obj,
				},
			},
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _wasSymbolic, _pixbuf, _goerr
}

// LoadSymbolicForContextAsync: asynchronously load, render and scale a symbolic
// icon previously looked up from the icon theme using
// gtk_icon_theme_lookup_icon().
//
// For more details, see gtk_icon_info_load_symbolic_for_context() which is the
// synchronous version of this call.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - context: StyleContext.
//    - callback (optional) to call when the request is satisfied.
//
func (iconInfo *IconInfo) LoadSymbolicForContextAsync(ctx context.Context, context *StyleContext, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GtkIconInfo        // out
	var _arg2 *C.GCancellable       // out
	var _arg1 *C.GtkStyleContext    // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gtk_icon_info_load_symbolic_for_context_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(context)
	runtime.KeepAlive(callback)
}

// LoadSymbolicForContextFinish finishes an async icon load, see
// gtk_icon_info_load_symbolic_for_context_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
// The function returns the following values:
//
//    - wasSymbolic (optional) returns whether the loaded icon was a symbolic one
//      and whether the fg color was applied to it.
//    - pixbuf: rendered icon; this may be a newly created icon or a new
//      reference to an internal icon, so you must not modify the icon. Use
//      g_object_unref() to release your reference to the icon.
//
func (iconInfo *IconInfo) LoadSymbolicForContextFinish(res gio.AsyncResulter) (bool, *gdkpixbuf.Pixbuf, error) {
	var _arg0 *C.GtkIconInfo  // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 C.gboolean      // in
	var _cret *C.GdkPixbuf    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GtkIconInfo)(unsafe.Pointer(coreglib.InternObject(iconInfo).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))

	_cret = C.gtk_icon_info_load_symbolic_for_context_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(iconInfo)
	runtime.KeepAlive(res)

	var _wasSymbolic bool         // out
	var _pixbuf *gdkpixbuf.Pixbuf // out
	var _goerr error              // out

	if _arg2 != 0 {
		_wasSymbolic = true
	}
	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_pixbuf = &gdkpixbuf.Pixbuf{
			Object: obj,
			LoadableIcon: gio.LoadableIcon{
				Icon: gio.Icon{
					Object: obj,
				},
			},
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _wasSymbolic, _pixbuf, _goerr
}
