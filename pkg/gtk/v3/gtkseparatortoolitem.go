// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeSeparatorToolItem returns the GType for the type SeparatorToolItem.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeSeparatorToolItem() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "SeparatorToolItem").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalSeparatorToolItem)
	return gtype
}

// SeparatorToolItemOverrider contains methods that are overridable.
type SeparatorToolItemOverrider interface {
}

// SeparatorToolItem is a ToolItem that separates groups of other ToolItems.
// Depending on the theme, a SeparatorToolItem will often look like a vertical
// line on horizontally docked toolbars.
//
// If the Toolbar child property “expand” is TRUE and the property
// SeparatorToolItem:draw is FALSE, a SeparatorToolItem will act as a “spring”
// that forces other items to the ends of the toolbar.
//
// Use gtk_separator_tool_item_new() to create a new SeparatorToolItem.
//
//
// CSS nodes
//
// GtkSeparatorToolItem has a single CSS node with name separator.
type SeparatorToolItem struct {
	_ [0]func() // equal guard
	ToolItem
}

var (
	_ Binner            = (*SeparatorToolItem)(nil)
	_ coreglib.Objector = (*SeparatorToolItem)(nil)
)

func classInitSeparatorToolItemmer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSeparatorToolItem(obj *coreglib.Object) *SeparatorToolItem {
	return &SeparatorToolItem{
		ToolItem: ToolItem{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Activatable: Activatable{
				Object: obj,
			},
		},
	}
}

func marshalSeparatorToolItem(p uintptr) (interface{}, error) {
	return wrapSeparatorToolItem(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSeparatorToolItem: create a new SeparatorToolItem.
//
// The function returns the following values:
//
//    - separatorToolItem: new SeparatorToolItem.
//
func NewSeparatorToolItem() *SeparatorToolItem {
	_gret := girepository.MustFind("Gtk", "SeparatorToolItem").InvokeMethod("new_SeparatorToolItem", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _separatorToolItem *SeparatorToolItem // out

	_separatorToolItem = wrapSeparatorToolItem(coreglib.Take(unsafe.Pointer(_cret)))

	return _separatorToolItem
}

// Draw returns whether item is drawn as a line, or just blank. See
// gtk_separator_tool_item_set_draw().
//
// The function returns the following values:
//
//    - ok: TRUE if item is drawn as a line, or just blank.
//
func (item *SeparatorToolItem) Draw() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(item).Native()))

	_gret := girepository.MustFind("Gtk", "SeparatorToolItem").InvokeMethod("get_draw", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(item)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetDraw: whether item is drawn as a vertical line, or just blank. Setting
// this to FALSE along with gtk_tool_item_set_expand() is useful to create an
// item that forces following items to the end of the toolbar.
//
// The function takes the following parameters:
//
//    - draw: whether item is drawn as a vertical line.
//
func (item *SeparatorToolItem) SetDraw(draw bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(item).Native()))
	if draw {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "SeparatorToolItem").InvokeMethod("set_draw", _args[:], nil)

	runtime.KeepAlive(item)
	runtime.KeepAlive(draw)
}
