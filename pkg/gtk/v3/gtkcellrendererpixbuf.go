// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeCellRendererPixbuf = coreglib.Type(C.gtk_cell_renderer_pixbuf_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellRendererPixbuf, F: marshalCellRendererPixbuf},
	})
}

// CellRendererPixbufOverrider contains methods that are overridable.
type CellRendererPixbufOverrider interface {
}

// CellRendererPixbuf can be used to render an image in a cell. It allows to
// render either a given Pixbuf (set via the CellRendererPixbuf:pixbuf property)
// or a named icon (set via the CellRendererPixbuf:icon-name property).
//
// To support the tree view, CellRendererPixbuf also supports rendering two
// alternative pixbufs, when the CellRenderer:is-expander property is TRUE. If
// the CellRenderer:is-expanded property is TRUE and the
// CellRendererPixbuf:pixbuf-expander-open property is set to a pixbuf, it
// renders that pixbuf, if the CellRenderer:is-expanded property is FALSE and
// the CellRendererPixbuf:pixbuf-expander-closed property is set to a pixbuf, it
// renders that one.
type CellRendererPixbuf struct {
	_ [0]func() // equal guard
	CellRenderer
}

var (
	_ CellRendererer = (*CellRendererPixbuf)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeCellRendererPixbuf,
		GoType:        reflect.TypeOf((*CellRendererPixbuf)(nil)),
		InitClass:     initClassCellRendererPixbuf,
		FinalizeClass: finalizeClassCellRendererPixbuf,
	})
}

func initClassCellRendererPixbuf(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitCellRendererPixbuf(*CellRendererPixbufClass)
	}); ok {
		klass := (*CellRendererPixbufClass)(gextras.NewStructNative(gclass))
		goval.InitCellRendererPixbuf(klass)
	}
}

func finalizeClassCellRendererPixbuf(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		FinalizeCellRendererPixbuf(*CellRendererPixbufClass)
	}); ok {
		klass := (*CellRendererPixbufClass)(gextras.NewStructNative(gclass))
		goval.FinalizeCellRendererPixbuf(klass)
	}
}

func wrapCellRendererPixbuf(obj *coreglib.Object) *CellRendererPixbuf {
	return &CellRendererPixbuf{
		CellRenderer: CellRenderer{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalCellRendererPixbuf(p uintptr) (interface{}, error) {
	return wrapCellRendererPixbuf(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCellRendererPixbuf creates a new CellRendererPixbuf. Adjust rendering
// parameters using object properties. Object properties can be set globally
// (with g_object_set()). Also, with TreeViewColumn, you can bind a property to
// a value in a TreeModel. For example, you can bind the “pixbuf” property on
// the cell renderer to a pixbuf value in the model, thus rendering a different
// image in each row of the TreeView.
//
// The function returns the following values:
//
//    - cellRendererPixbuf: new cell renderer.
//
func NewCellRendererPixbuf() *CellRendererPixbuf {
	var _cret *C.GtkCellRenderer // in

	_cret = C.gtk_cell_renderer_pixbuf_new()

	var _cellRendererPixbuf *CellRendererPixbuf // out

	_cellRendererPixbuf = wrapCellRendererPixbuf(coreglib.Take(unsafe.Pointer(_cret)))

	return _cellRendererPixbuf
}

// CellRendererPixbufClass: instance of this type is always passed by reference.
type CellRendererPixbufClass struct {
	*cellRendererPixbufClass
}

// cellRendererPixbufClass is the struct that's finalized.
type cellRendererPixbufClass struct {
	native *C.GtkCellRendererPixbufClass
}

func (c *CellRendererPixbufClass) ParentClass() *CellRendererClass {
	valptr := &c.native.parent_class
	var _v *CellRendererClass // out
	_v = (*CellRendererClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
