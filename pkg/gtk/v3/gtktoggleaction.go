// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_ToggleAction_ConnectToggled(gpointer, guintptr);
// extern void _gotk4_gtk3_ToggleActionClass_toggled(GtkToggleAction*);
import "C"

// GType values.
var (
	GTypeToggleAction = coreglib.Type(C.gtk_toggle_action_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToggleAction, F: marshalToggleAction},
	})
}

// ToggleActionOverrides contains methods that are overridable.
type ToggleActionOverrides struct {
	// Toggled emits the “toggled” signal on the toggle action.
	//
	// Deprecated: since version 3.10.
	Toggled func()
}

func defaultToggleActionOverrides(v *ToggleAction) ToggleActionOverrides {
	return ToggleActionOverrides{
		Toggled: v.toggled,
	}
}

// ToggleAction corresponds roughly to a CheckMenuItem. It has an “active” state
// specifying whether the action has been checked or not.
type ToggleAction struct {
	_ [0]func() // equal guard
	Action
}

var (
	_ coreglib.Objector = (*ToggleAction)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ToggleAction, *ToggleActionClass, ToggleActionOverrides](
		GTypeToggleAction,
		initToggleActionClass,
		wrapToggleAction,
		defaultToggleActionOverrides,
	)
}

func initToggleActionClass(gclass unsafe.Pointer, overrides ToggleActionOverrides, classInitFunc func(*ToggleActionClass)) {
	pclass := (*C.GtkToggleActionClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeToggleAction))))

	if overrides.Toggled != nil {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk3_ToggleActionClass_toggled)
	}

	if classInitFunc != nil {
		class := (*ToggleActionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapToggleAction(obj *coreglib.Object) *ToggleAction {
	return &ToggleAction{
		Action: Action{
			Object: obj,
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalToggleAction(p uintptr) (interface{}, error) {
	return wrapToggleAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectToggled: should be connected if you wish to perform an action whenever
// the ToggleAction state is changed.
func (action *ToggleAction) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(action, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_ToggleAction_ConnectToggled), f)
}

// ToggleActionClass: instance of this type is always passed by reference.
type ToggleActionClass struct {
	*toggleActionClass
}

// toggleActionClass is the struct that's finalized.
type toggleActionClass struct {
	native *C.GtkToggleActionClass
}

func (t *ToggleActionClass) ParentClass() *ActionClass {
	valptr := &t.native.parent_class
	var _v *ActionClass // out
	_v = (*ActionClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
