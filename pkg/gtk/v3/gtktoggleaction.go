// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk3_ToggleActionClass_toggled(GtkToggleAction*);
// extern void _gotk4_gtk3_ToggleAction_ConnectToggled(gpointer, guintptr);
import "C"

// glib.Type values for gtktoggleaction.go.
var GTypeToggleAction = coreglib.Type(C.gtk_toggle_action_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeToggleAction, F: marshalToggleAction},
	})
}

// ToggleActionOverrider contains methods that are overridable.
type ToggleActionOverrider interface {
	// Toggled emits the “toggled” signal on the toggle action.
	//
	// Deprecated: since version 3.10.
	Toggled()
}

// ToggleAction corresponds roughly to a CheckMenuItem. It has an “active” state
// specifying whether the action has been checked or not.
type ToggleAction struct {
	_ [0]func() // equal guard
	Action
}

var (
	_ coreglib.Objector = (*ToggleAction)(nil)
)

func classInitToggleActioner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkToggleActionClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkToggleActionClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Toggled() }); ok {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk3_ToggleActionClass_toggled)
	}
}

//export _gotk4_gtk3_ToggleActionClass_toggled
func _gotk4_gtk3_ToggleActionClass_toggled(arg0 *C.GtkToggleAction) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Toggled() })

	iface.Toggled()
}

func wrapToggleAction(obj *coreglib.Object) *ToggleAction {
	return &ToggleAction{
		Action: Action{
			Object: obj,
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalToggleAction(p uintptr) (interface{}, error) {
	return wrapToggleAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_ToggleAction_ConnectToggled
func _gotk4_gtk3_ToggleAction_ConnectToggled(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggled: should be connected if you wish to perform an action whenever
// the ToggleAction state is changed.
func (action *ToggleAction) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(action, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_ToggleAction_ConnectToggled), f)
}

// NewToggleAction creates a new ToggleAction object. To add the action to a
// ActionGroup and set the accelerator for the action, call
// gtk_action_group_add_action_with_accel().
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - name: unique name for the action.
//    - label (optional) displayed in menu items and on buttons, or NULL.
//    - tooltip (optional) for the action, or NULL.
//    - stockId (optional): stock icon to display in widgets representing the
//      action, or NULL.
//
// The function returns the following values:
//
//    - toggleAction: new ToggleAction.
//
func NewToggleAction(name, label, tooltip, stockId string) *ToggleAction {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg0))
	if label != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if tooltip != "" {
		_arg2 = (*C.void)(unsafe.Pointer(C.CString(tooltip)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if stockId != "" {
		_arg3 = (*C.void)(unsafe.Pointer(C.CString(stockId)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	*(*string)(unsafe.Pointer(&args[0])) = _arg0
	*(*string)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3

	_gret := girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("new_ToggleAction", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(name)
	runtime.KeepAlive(label)
	runtime.KeepAlive(tooltip)
	runtime.KeepAlive(stockId)

	var _toggleAction *ToggleAction // out

	_toggleAction = wrapToggleAction(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _toggleAction
}

// Active returns the checked state of the toggle action.
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - ok: checked state of the toggle action.
//
func (action *ToggleAction) Active() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	*(**ToggleAction)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("get_active", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(action)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DrawAsRadio returns whether the action should have proxies like a radio
// action.
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - ok: whether the action should have proxies like a radio action.
//
func (action *ToggleAction) DrawAsRadio() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	*(**ToggleAction)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("get_draw_as_radio", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(action)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetActive sets the checked state on the toggle action.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - isActive: whether the action should be checked or not.
//
func (action *ToggleAction) SetActive(isActive bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	if isActive {
		_arg1 = C.TRUE
	}
	*(**ToggleAction)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("set_active", args[:], nil)

	runtime.KeepAlive(action)
	runtime.KeepAlive(isActive)
}

// SetDrawAsRadio sets whether the action should have proxies like a radio
// action.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - drawAsRadio: whether the action should have proxies like a radio action.
//
func (action *ToggleAction) SetDrawAsRadio(drawAsRadio bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	if drawAsRadio {
		_arg1 = C.TRUE
	}
	*(**ToggleAction)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("set_draw_as_radio", args[:], nil)

	runtime.KeepAlive(action)
	runtime.KeepAlive(drawAsRadio)
}

// Toggled emits the “toggled” signal on the toggle action.
//
// Deprecated: since version 3.10.
func (action *ToggleAction) Toggled() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(action).Native()))
	*(**ToggleAction)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "ToggleAction").InvokeMethod("toggled", args[:], nil)

	runtime.KeepAlive(action)
}
