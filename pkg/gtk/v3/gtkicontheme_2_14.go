// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewIconInfoForPixbuf creates a IconInfo for a Pixbuf.
//
// The function takes the following parameters:
//
//    - iconTheme: IconTheme.
//    - pixbuf to wrap in a IconInfo.
//
// The function returns the following values:
//
//    - iconInfo: IconInfo.
//
func NewIconInfoForPixbuf(iconTheme *IconTheme, pixbuf *gdkpixbuf.Pixbuf) *IconInfo {
	var _arg1 *C.GtkIconTheme // out
	var _arg2 *C.GdkPixbuf    // out
	var _cret *C.GtkIconInfo  // in

	_arg1 = (*C.GtkIconTheme)(unsafe.Pointer(coreglib.InternObject(iconTheme).Native()))
	_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))

	_cret = C.gtk_icon_info_new_for_pixbuf(_arg1, _arg2)
	runtime.KeepAlive(iconTheme)
	runtime.KeepAlive(pixbuf)

	var _iconInfo *IconInfo // out

	_iconInfo = wrapIconInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _iconInfo
}

// LookupByGIcon looks up an icon and returns a IconInfo containing information
// such as the filename of the icon. The icon can then be rendered into a pixbuf
// using gtk_icon_info_load_icon().
//
// When rendering on displays with high pixel densities you should not use a
// size multiplied by the scaling factor returned by functions like
// gdk_window_get_scale_factor(). Instead, you should use
// gtk_icon_theme_lookup_by_gicon_for_scale(), as the assets loaded for a given
// scaling factor may be different.
//
// The function takes the following parameters:
//
//    - icon to look up.
//    - size: desired icon size.
//    - flags modifying the behavior of the icon lookup.
//
// The function returns the following values:
//
//    - iconInfo (optional) containing information about the icon, or NULL if the
//      icon wasnâ€™t found. Unref with g_object_unref().
//
func (iconTheme *IconTheme) LookupByGIcon(icon gio.Iconner, size int, flags IconLookupFlags) *IconInfo {
	var _arg0 *C.GtkIconTheme      // out
	var _arg1 *C.GIcon             // out
	var _arg2 C.gint               // out
	var _arg3 C.GtkIconLookupFlags // out
	var _cret *C.GtkIconInfo       // in

	_arg0 = (*C.GtkIconTheme)(unsafe.Pointer(coreglib.InternObject(iconTheme).Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	_arg2 = C.gint(size)
	_arg3 = C.GtkIconLookupFlags(flags)

	_cret = C.gtk_icon_theme_lookup_by_gicon(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(iconTheme)
	runtime.KeepAlive(icon)
	runtime.KeepAlive(size)
	runtime.KeepAlive(flags)

	var _iconInfo *IconInfo // out

	if _cret != nil {
		_iconInfo = wrapIconInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _iconInfo
}
