// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkmountoperation.go.
var GTypeMountOperation = coreglib.Type(C.gtk_mount_operation_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeMountOperation, F: marshalMountOperation},
	})
}

// MountOperationOverrider contains methods that are overridable.
type MountOperationOverrider interface {
}

// MountOperation: this should not be accessed directly. Use the accessor
// functions below.
type MountOperation struct {
	_ [0]func() // equal guard
	gio.MountOperation
}

var (
	_ coreglib.Objector = (*MountOperation)(nil)
)

func classInitMountOperationer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapMountOperation(obj *coreglib.Object) *MountOperation {
	return &MountOperation{
		MountOperation: gio.MountOperation{
			Object: obj,
		},
	}
}

func marshalMountOperation(p uintptr) (interface{}, error) {
	return wrapMountOperation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewMountOperation creates a new MountOperation.
//
// The function takes the following parameters:
//
//    - parent (optional): transient parent of the window, or NULL.
//
// The function returns the following values:
//
//    - mountOperation: new MountOperation.
//
func NewMountOperation(parent *Window) *MountOperation {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	if parent != nil {
		_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	}
	*(**Window)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "MountOperation").InvokeMethod("new_MountOperation", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(parent)

	var _mountOperation *MountOperation // out

	_mountOperation = wrapMountOperation(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _mountOperation
}

// Parent gets the transient parent used by the MountOperation.
//
// The function returns the following values:
//
//    - window: transient parent for windows shown by op.
//
func (op *MountOperation) Parent() *Window {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	*(**MountOperation)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "MountOperation").InvokeMethod("get_parent", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _window *Window // out

	_window = wrapWindow(coreglib.Take(unsafe.Pointer(_cret)))

	return _window
}

// Screen gets the screen on which windows of the MountOperation will be shown.
//
// The function returns the following values:
//
//    - screen on which windows of op are shown.
//
func (op *MountOperation) Screen() *gdk.Screen {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	*(**MountOperation)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "MountOperation").InvokeMethod("get_screen", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _screen *gdk.Screen // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_screen = &gdk.Screen{
			Object: obj,
		}
	}

	return _screen
}

// IsShowing returns whether the MountOperation is currently displaying a
// window.
//
// The function returns the following values:
//
//    - ok: TRUE if op is currently displaying a window.
//
func (op *MountOperation) IsShowing() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	*(**MountOperation)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "MountOperation").InvokeMethod("is_showing", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetParent sets the transient parent for windows shown by the MountOperation.
//
// The function takes the following parameters:
//
//    - parent (optional): transient parent of the window, or NULL.
//
func (op *MountOperation) SetParent(parent *Window) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if parent != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	}
	*(**MountOperation)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "MountOperation").InvokeMethod("set_parent", args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(parent)
}

// SetScreen sets the screen to show windows of the MountOperation on.
//
// The function takes the following parameters:
//
//    - screen: Screen.
//
func (op *MountOperation) SetScreen(screen *gdk.Screen) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	*(**MountOperation)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "MountOperation").InvokeMethod("set_screen", args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(screen)
}
