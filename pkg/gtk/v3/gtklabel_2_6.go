// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Angle gets the angle of rotation for the label. See gtk_label_set_angle().
//
// The function returns the following values:
//
//    - gdouble: angle of rotation for the label.
//
func (label *Label) Angle() float64 {
	var _arg0 *C.GtkLabel // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	_cret = C.gtk_label_get_angle(_arg0)
	runtime.KeepAlive(label)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Ellipsize returns the ellipsizing position of the label. See
// gtk_label_set_ellipsize().
//
// The function returns the following values:
//
//    - ellipsizeMode: EllipsizeMode.
//
func (label *Label) Ellipsize() pango.EllipsizeMode {
	var _arg0 *C.GtkLabel          // out
	var _cret C.PangoEllipsizeMode // in

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	_cret = C.gtk_label_get_ellipsize(_arg0)
	runtime.KeepAlive(label)

	var _ellipsizeMode pango.EllipsizeMode // out

	_ellipsizeMode = pango.EllipsizeMode(_cret)

	return _ellipsizeMode
}

// MaxWidthChars retrieves the desired maximum width of label, in characters.
// See gtk_label_set_width_chars().
//
// The function returns the following values:
//
//    - gint: maximum width of the label in characters.
//
func (label *Label) MaxWidthChars() int {
	var _arg0 *C.GtkLabel // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	_cret = C.gtk_label_get_max_width_chars(_arg0)
	runtime.KeepAlive(label)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SingleLineMode returns whether the label is in single line mode.
//
// The function returns the following values:
//
//    - ok: TRUE when the label is in single line mode.
//
func (label *Label) SingleLineMode() bool {
	var _arg0 *C.GtkLabel // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	_cret = C.gtk_label_get_single_line_mode(_arg0)
	runtime.KeepAlive(label)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WidthChars retrieves the desired width of label, in characters. See
// gtk_label_set_width_chars().
//
// The function returns the following values:
//
//    - gint: width of the label in characters.
//
func (label *Label) WidthChars() int {
	var _arg0 *C.GtkLabel // out
	var _cret C.gint      // in

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))

	_cret = C.gtk_label_get_width_chars(_arg0)
	runtime.KeepAlive(label)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetAngle sets the angle of rotation for the label. An angle of 90 reads from
// from bottom to top, an angle of 270, from top to bottom. The angle setting
// for the label is ignored if the label is selectable, wrapped, or ellipsized.
//
// The function takes the following parameters:
//
//    - angle that the baseline of the label makes with the horizontal, in
//      degrees, measured counterclockwise.
//
func (label *Label) SetAngle(angle float64) {
	var _arg0 *C.GtkLabel // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))
	_arg1 = C.gdouble(angle)

	C.gtk_label_set_angle(_arg0, _arg1)
	runtime.KeepAlive(label)
	runtime.KeepAlive(angle)
}

// SetEllipsize sets the mode used to ellipsize (add an ellipsis: "...") to the
// text if there is not enough space to render the entire string.
//
// The function takes the following parameters:
//
//    - mode: EllipsizeMode.
//
func (label *Label) SetEllipsize(mode pango.EllipsizeMode) {
	var _arg0 *C.GtkLabel          // out
	var _arg1 C.PangoEllipsizeMode // out

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))
	_arg1 = C.PangoEllipsizeMode(mode)

	C.gtk_label_set_ellipsize(_arg0, _arg1)
	runtime.KeepAlive(label)
	runtime.KeepAlive(mode)
}

// SetMaxWidthChars sets the desired maximum width in characters of label to
// n_chars.
//
// The function takes the following parameters:
//
//    - nChars: new desired maximum width, in characters.
//
func (label *Label) SetMaxWidthChars(nChars int) {
	var _arg0 *C.GtkLabel // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))
	_arg1 = C.gint(nChars)

	C.gtk_label_set_max_width_chars(_arg0, _arg1)
	runtime.KeepAlive(label)
	runtime.KeepAlive(nChars)
}

// SetSingleLineMode sets whether the label is in single line mode.
//
// The function takes the following parameters:
//
//    - singleLineMode: TRUE if the label should be in single line mode.
//
func (label *Label) SetSingleLineMode(singleLineMode bool) {
	var _arg0 *C.GtkLabel // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))
	if singleLineMode {
		_arg1 = C.TRUE
	}

	C.gtk_label_set_single_line_mode(_arg0, _arg1)
	runtime.KeepAlive(label)
	runtime.KeepAlive(singleLineMode)
}

// SetWidthChars sets the desired width in characters of label to n_chars.
//
// The function takes the following parameters:
//
//    - nChars: new desired width, in characters.
//
func (label *Label) SetWidthChars(nChars int) {
	var _arg0 *C.GtkLabel // out
	var _arg1 C.gint      // out

	_arg0 = (*C.GtkLabel)(unsafe.Pointer(coreglib.InternObject(label).Native()))
	_arg1 = C.gint(nChars)

	C.gtk_label_set_width_chars(_arg0, _arg1)
	runtime.KeepAlive(label)
	runtime.KeepAlive(nChars)
}
