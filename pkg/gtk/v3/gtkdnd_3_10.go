// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// DragBeginWithCoordinates initiates a drag on the source side. The function
// only needs to be used when the application is starting drags itself, and is
// not needed when gtk_drag_source_set() is used.
//
// The event is used to retrieve the timestamp that will be used internally to
// grab the pointer. If event is NULL, then GDK_CURRENT_TIME will be used.
// However, you should try to pass a real event in all cases, since that can be
// used to get information about the drag.
//
// Generally there are three cases when you want to start a drag by hand by
// calling this function:
//
// 1. During a Widget::button-press-event handler, if you want to start a drag
// immediately when the user presses the mouse button. Pass the event that you
// have in your Widget::button-press-event handler.
//
// 2. During a Widget::motion-notify-event handler, if you want to start a drag
// when the mouse moves past a certain threshold distance after a button-press.
// Pass the event that you have in your Widget::motion-notify-event handler.
//
// 3. During a timeout handler, if you want to start a drag after the mouse
// button is held down for some time. Try to save the last event that you got
// from the mouse, using gdk_event_copy(), and pass it to this function
// (remember to free the event with gdk_event_free() when you are done). If you
// really cannot pass a real event, pass NULL instead.
//
// The function takes the following parameters:
//
//    - targets (data formats) in which the source can provide the data.
//    - actions: bitmask of the allowed drag actions for this drag.
//    - button the user clicked to start the drag.
//    - event (optional) that triggered the start of the drag, or NULL if none
//      can be obtained.
//    - x: initial x coordinate to start dragging from, in the coordinate space
//      of widget. If -1 is passed, the coordinates are retrieved from event or
//      the current pointer position.
//    - y: initial y coordinate to start dragging from, in the coordinate space
//      of widget. If -1 is passed, the coordinates are retrieved from event or
//      the current pointer position.
//
// The function returns the following values:
//
//    - dragContext: context for this drag.
//
func (widget *Widget) DragBeginWithCoordinates(targets *TargetList, actions gdk.DragAction, button int, event *gdk.Event, x, y int) *gdk.DragContext {
	var _arg0 *C.GtkWidget      // out
	var _arg1 *C.GtkTargetList  // out
	var _arg2 C.GdkDragAction   // out
	var _arg3 C.gint            // out
	var _arg4 *C.GdkEvent       // out
	var _arg5 C.gint            // out
	var _arg6 C.gint            // out
	var _cret *C.GdkDragContext // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*C.GtkTargetList)(gextras.StructNative(unsafe.Pointer(targets)))
	_arg2 = C.GdkDragAction(actions)
	_arg3 = C.gint(button)
	if event != nil {
		_arg4 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event)))
	}
	_arg5 = C.gint(x)
	_arg6 = C.gint(y)

	_cret = C.gtk_drag_begin_with_coordinates(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(targets)
	runtime.KeepAlive(actions)
	runtime.KeepAlive(button)
	runtime.KeepAlive(event)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _dragContext *gdk.DragContext // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_dragContext = &gdk.DragContext{
			Object: obj,
		}
	}

	return _dragContext
}
