// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeScaleAccessible = coreglib.Type(C.gtk_scale_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScaleAccessible, F: marshalScaleAccessible},
	})
}

// ScaleAccessibleOverrider contains methods that are overridable.
type ScaleAccessibleOverrider interface {
}

type ScaleAccessible struct {
	_ [0]func() // equal guard
	RangeAccessible
}

var (
	_ coreglib.Objector = (*ScaleAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeScaleAccessible,
		GoType:    reflect.TypeOf((*ScaleAccessible)(nil)),
		InitClass: initClassScaleAccessible,
	})
}

func initClassScaleAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitScaleAccessible(*ScaleAccessibleClass) }); ok {
		klass := (*ScaleAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitScaleAccessible(klass)
	}
}

func wrapScaleAccessible(obj *coreglib.Object) *ScaleAccessible {
	return &ScaleAccessible{
		RangeAccessible: RangeAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
			Value: atk.Value{
				Object: obj,
			},
		},
	}
}

func marshalScaleAccessible(p uintptr) (interface{}, error) {
	return wrapScaleAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ScaleAccessibleClass: instance of this type is always passed by reference.
type ScaleAccessibleClass struct {
	*scaleAccessibleClass
}

// scaleAccessibleClass is the struct that's finalized.
type scaleAccessibleClass struct {
	native *C.GtkScaleAccessibleClass
}

func (s *ScaleAccessibleClass) ParentClass() *RangeAccessibleClass {
	valptr := &s.native.parent_class
	var v *RangeAccessibleClass // out
	v = (*RangeAccessibleClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
