// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewImageFromGIcon creates a Image displaying an icon from the current icon
// theme. If the icon name isn’t known, a “broken image” icon will be displayed
// instead. If the current icon theme is changed, the icon will be updated
// appropriately.
//
// The function takes the following parameters:
//
//    - icon: icon.
//    - size: stock icon size (IconSize).
//
// The function returns the following values:
//
//    - image: new Image displaying the themed icon.
//
func NewImageFromGIcon(icon gio.Iconner, size int) *Image {
	var _arg1 *C.GIcon      // out
	var _arg2 C.GtkIconSize // out
	var _cret *C.GtkWidget  // in

	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	_arg2 = C.GtkIconSize(size)

	_cret = C.gtk_image_new_from_gicon(_arg1, _arg2)
	runtime.KeepAlive(icon)
	runtime.KeepAlive(size)

	var _image *Image // out

	_image = wrapImage(coreglib.Take(unsafe.Pointer(_cret)))

	return _image
}

// GIcon gets the #GIcon and size being displayed by the Image. The storage type
// of the image must be GTK_IMAGE_EMPTY or GTK_IMAGE_GICON (see
// gtk_image_get_storage_type()). The caller of this function does not own a
// reference to the returned #GIcon.
//
// The function returns the following values:
//
//    - gicon (optional): place to store a #GIcon, or NULL.
//    - size (optional): place to store an icon size (IconSize), or NULL.
//
func (image *Image) GIcon() (*gio.Icon, int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GIcon      // in
	var _arg2 C.GtkIconSize // in

	_arg0 = (*C.GtkImage)(unsafe.Pointer(coreglib.InternObject(image).Native()))

	C.gtk_image_get_gicon(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(image)

	var _gicon *gio.Icon // out
	var _size int        // out

	if _arg1 != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_arg1))
			_gicon = &gio.Icon{
				Object: obj,
			}
		}
	}
	_size = int(_arg2)

	return _gicon, _size
}

// SetFromGIcon: see gtk_image_new_from_gicon() for details.
//
// The function takes the following parameters:
//
//    - icon: icon.
//    - size: icon size (IconSize).
//
func (image *Image) SetFromGIcon(icon gio.Iconner, size int) {
	var _arg0 *C.GtkImage   // out
	var _arg1 *C.GIcon      // out
	var _arg2 C.GtkIconSize // out

	_arg0 = (*C.GtkImage)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	_arg2 = C.GtkIconSize(size)

	C.gtk_image_set_from_gicon(_arg0, _arg1, _arg2)
	runtime.KeepAlive(image)
	runtime.KeepAlive(icon)
	runtime.KeepAlive(size)
}
