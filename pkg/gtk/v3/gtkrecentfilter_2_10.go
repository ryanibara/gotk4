// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void callbackDelete(gpointer);
// extern gboolean _gotk4_gtk3_RecentFilterFunc(GtkRecentFilterInfo*, gpointer);
import "C"

// NewRecentFilter creates a new RecentFilter with no rules added to it. Such
// filter does not accept any recently used resources, so is not particularly
// useful until you add rules with gtk_recent_filter_add_pattern(),
// gtk_recent_filter_add_mime_type(), gtk_recent_filter_add_application(),
// gtk_recent_filter_add_age(). To create a filter that accepts any recently
// used resource, use:
//
//    GtkRecentFilter *filter = gtk_recent_filter_new ();
//    gtk_recent_filter_add_pattern (filter, "*");.
//
// The function returns the following values:
//
//    - recentFilter: new RecentFilter.
//
func NewRecentFilter() *RecentFilter {
	var _cret *C.GtkRecentFilter // in

	_cret = C.gtk_recent_filter_new()

	var _recentFilter *RecentFilter // out

	_recentFilter = wrapRecentFilter(coreglib.Take(unsafe.Pointer(_cret)))

	return _recentFilter
}

// AddAge adds a rule that allows resources based on their age - that is, the
// number of days elapsed since they were last modified.
//
// The function takes the following parameters:
//
//    - days: number of days.
//
func (filter *RecentFilter) AddAge(days int) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 C.gint             // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = C.gint(days)

	C.gtk_recent_filter_add_age(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(days)
}

// AddApplication adds a rule that allows resources based on the name of the
// application that has registered them.
//
// The function takes the following parameters:
//
//    - application name.
//
func (filter *RecentFilter) AddApplication(application string) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(application)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_filter_add_application(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(application)
}

// AddCustom adds a rule to a filter that allows resources based on a custom
// callback function. The bitfield needed which is passed in provides
// information about what sorts of information that the filter function needs;
// this allows GTK+ to avoid retrieving expensive information when it isnâ€™t
// needed by the filter.
//
// The function takes the following parameters:
//
//    - needed: bitfield of flags indicating the information that the custom
//      filter function needs.
//    - fn: callback function; if the function returns TRUE, then the file will
//      be displayed.
//
func (filter *RecentFilter) AddCustom(needed RecentFilterFlags, fn RecentFilterFunc) {
	var _arg0 *C.GtkRecentFilter     // out
	var _arg1 C.GtkRecentFilterFlags // out
	var _arg2 C.GtkRecentFilterFunc  // out
	var _arg3 C.gpointer
	var _arg4 C.GDestroyNotify

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = C.GtkRecentFilterFlags(needed)
	_arg2 = (*[0]byte)(C._gotk4_gtk3_RecentFilterFunc)
	_arg3 = C.gpointer(gbox.Assign(fn))
	_arg4 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	C.gtk_recent_filter_add_custom(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(needed)
	runtime.KeepAlive(fn)
}

// AddGroup adds a rule that allows resources based on the name of the group to
// which they belong.
//
// The function takes the following parameters:
//
//    - group name.
//
func (filter *RecentFilter) AddGroup(group string) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(group)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_filter_add_group(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(group)
}

// AddMIMEType adds a rule that allows resources based on their registered MIME
// type.
//
// The function takes the following parameters:
//
//    - mimeType: MIME type.
//
func (filter *RecentFilter) AddMIMEType(mimeType string) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_filter_add_mime_type(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(mimeType)
}

// AddPattern adds a rule that allows resources based on a pattern matching
// their display name.
//
// The function takes the following parameters:
//
//    - pattern: file pattern.
//
func (filter *RecentFilter) AddPattern(pattern string) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_filter_add_pattern(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(pattern)
}

// AddPixbufFormats adds a rule allowing image files in the formats supported by
// GdkPixbuf.
func (filter *RecentFilter) AddPixbufFormats() {
	var _arg0 *C.GtkRecentFilter // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	C.gtk_recent_filter_add_pixbuf_formats(_arg0)
	runtime.KeepAlive(filter)
}

// Filter tests whether a file should be displayed according to filter. The
// RecentFilterInfo filter_info should include the fields returned from
// gtk_recent_filter_get_needed(), and must set the RecentFilterInfo.contains
// field of filter_info to indicate which fields have been set.
//
// This function will not typically be used by applications; it is intended
// principally for use in the implementation of RecentChooser.
//
// The function takes the following parameters:
//
//    - filterInfo containing information about a recently used resource.
//
// The function returns the following values:
//
//    - ok: TRUE if the file should be displayed.
//
func (filter *RecentFilter) Filter(filterInfo *RecentFilterInfo) bool {
	var _arg0 *C.GtkRecentFilter     // out
	var _arg1 *C.GtkRecentFilterInfo // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GtkRecentFilterInfo)(gextras.StructNative(unsafe.Pointer(filterInfo)))

	_cret = C.gtk_recent_filter_filter(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(filterInfo)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Name gets the human-readable name for the filter. See
// gtk_recent_filter_set_name().
//
// The function returns the following values:
//
//    - utf8 (optional): name of the filter, or NULL. The returned string is
//      owned by the filter object and should not be freed.
//
func (filter *RecentFilter) Name() string {
	var _arg0 *C.GtkRecentFilter // out
	var _cret *C.gchar           // in

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	_cret = C.gtk_recent_filter_get_name(_arg0)
	runtime.KeepAlive(filter)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Needed gets the fields that need to be filled in for the RecentFilterInfo
// passed to gtk_recent_filter_filter()
//
// This function will not typically be used by applications; it is intended
// principally for use in the implementation of RecentChooser.
//
// The function returns the following values:
//
//    - recentFilterFlags: bitfield of flags indicating needed fields when
//      calling gtk_recent_filter_filter().
//
func (filter *RecentFilter) Needed() RecentFilterFlags {
	var _arg0 *C.GtkRecentFilter     // out
	var _cret C.GtkRecentFilterFlags // in

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	_cret = C.gtk_recent_filter_get_needed(_arg0)
	runtime.KeepAlive(filter)

	var _recentFilterFlags RecentFilterFlags // out

	_recentFilterFlags = RecentFilterFlags(_cret)

	return _recentFilterFlags
}

// SetName sets the human-readable name of the filter; this is the string that
// will be displayed in the recently used resources selector user interface if
// there is a selectable list of filters.
//
// The function takes the following parameters:
//
//    - name: then human readable name of filter.
//
func (filter *RecentFilter) SetName(name string) {
	var _arg0 *C.GtkRecentFilter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GtkRecentFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_recent_filter_set_name(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(name)
}
