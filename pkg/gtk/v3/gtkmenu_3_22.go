// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// PlaceOnMonitor places menu on the given monitor.
//
// The function takes the following parameters:
//
//    - monitor to place the menu on.
//
func (menu *Menu) PlaceOnMonitor(monitor *gdk.Monitor) {
	var _arg0 *C.GtkMenu    // out
	var _arg1 *C.GdkMonitor // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg1 = (*C.GdkMonitor)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))

	C.gtk_menu_place_on_monitor(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(monitor)
}

// PopupAtPointer displays menu and makes it available for selection.
//
// See gtk_menu_popup_at_widget () to pop up a menu at a widget.
// gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
// rectangle.
//
// menu will be positioned at the pointer associated with trigger_event.
//
// Properties that influence the behaviour of this function are
// Menu:anchor-hints, Menu:rect-anchor-dx, Menu:rect-anchor-dy, and
// Menu:menu-type-hint. Connect to the Menu::popped-up signal to find out how it
// was actually positioned.
//
// The function takes the following parameters:
//
//    - triggerEvent (optional) that initiated this request or NULL if it's the
//      current event.
//
func (menu *Menu) PopupAtPointer(triggerEvent *gdk.Event) {
	var _arg0 *C.GtkMenu  // out
	var _arg1 *C.GdkEvent // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	if triggerEvent != nil {
		_arg1 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(triggerEvent)))
	}

	C.gtk_menu_popup_at_pointer(_arg0, _arg1)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(triggerEvent)
}

// PopupAtRect displays menu and makes it available for selection.
//
// See gtk_menu_popup_at_widget () and gtk_menu_popup_at_pointer (), which
// handle more common cases for popping up menus.
//
// menu will be positioned at rect, aligning their anchor points. rect is
// relative to the top-left corner of rect_window. rect_anchor and menu_anchor
// determine anchor points on rect and menu to pin together. menu can optionally
// be offset by Menu:rect-anchor-dx and Menu:rect-anchor-dy.
//
// Anchors should be specified under the assumption that the text direction is
// left-to-right; they will be flipped horizontally automatically if the text
// direction is right-to-left.
//
// Other properties that influence the behaviour of this function are
// Menu:anchor-hints and Menu:menu-type-hint. Connect to the Menu::popped-up
// signal to find out how it was actually positioned.
//
// The function takes the following parameters:
//
//    - rectWindow rect is relative to.
//    - rect to align menu with.
//    - rectAnchor: point on rect to align with menu's anchor point.
//    - menuAnchor: point on menu to align with rect's anchor point.
//    - triggerEvent (optional) that initiated this request or NULL if it's the
//      current event.
//
func (menu *Menu) PopupAtRect(rectWindow gdk.Windower, rect *gdk.Rectangle, rectAnchor, menuAnchor gdk.Gravity, triggerEvent *gdk.Event) {
	var _arg0 *C.GtkMenu      // out
	var _arg1 *C.GdkWindow    // out
	var _arg2 *C.GdkRectangle // out
	var _arg3 C.GdkGravity    // out
	var _arg4 C.GdkGravity    // out
	var _arg5 *C.GdkEvent     // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(rectWindow).Native()))
	_arg2 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(rect)))
	_arg3 = C.GdkGravity(rectAnchor)
	_arg4 = C.GdkGravity(menuAnchor)
	if triggerEvent != nil {
		_arg5 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(triggerEvent)))
	}

	C.gtk_menu_popup_at_rect(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(rectWindow)
	runtime.KeepAlive(rect)
	runtime.KeepAlive(rectAnchor)
	runtime.KeepAlive(menuAnchor)
	runtime.KeepAlive(triggerEvent)
}

// PopupAtWidget displays menu and makes it available for selection.
//
// See gtk_menu_popup_at_pointer () to pop up a menu at the master pointer.
// gtk_menu_popup_at_rect () also allows you to position a menu at an arbitrary
// rectangle.
//
// ! (popup-anchors.png)
//
// menu will be positioned at widget, aligning their anchor points.
// widget_anchor and menu_anchor determine anchor points on widget and menu to
// pin together. menu can optionally be offset by Menu:rect-anchor-dx and
// Menu:rect-anchor-dy.
//
// Anchors should be specified under the assumption that the text direction is
// left-to-right; they will be flipped horizontally automatically if the text
// direction is right-to-left.
//
// Other properties that influence the behaviour of this function are
// Menu:anchor-hints and Menu:menu-type-hint. Connect to the Menu::popped-up
// signal to find out how it was actually positioned.
//
// The function takes the following parameters:
//
//    - widget to align menu with.
//    - widgetAnchor: point on widget to align with menu's anchor point.
//    - menuAnchor: point on menu to align with widget's anchor point.
//    - triggerEvent (optional) that initiated this request or NULL if it's the
//      current event.
//
func (menu *Menu) PopupAtWidget(widget Widgetter, widgetAnchor, menuAnchor gdk.Gravity, triggerEvent *gdk.Event) {
	var _arg0 *C.GtkMenu   // out
	var _arg1 *C.GtkWidget // out
	var _arg2 C.GdkGravity // out
	var _arg3 C.GdkGravity // out
	var _arg4 *C.GdkEvent  // out

	_arg0 = (*C.GtkMenu)(unsafe.Pointer(coreglib.InternObject(menu).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = C.GdkGravity(widgetAnchor)
	_arg3 = C.GdkGravity(menuAnchor)
	if triggerEvent != nil {
		_arg4 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(triggerEvent)))
	}

	C.gtk_menu_popup_at_widget(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(menu)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(widgetAnchor)
	runtime.KeepAlive(menuAnchor)
	runtime.KeepAlive(triggerEvent)
}
