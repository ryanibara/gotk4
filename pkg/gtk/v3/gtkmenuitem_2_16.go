// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// gchar* _gotk4_gtk3_MenuItem_virtual_get_label(void* fnptr, GtkMenuItem* arg0) {
//   return ((gchar* (*)(GtkMenuItem*))(fnptr))(arg0);
// };
// void _gotk4_gtk3_MenuItem_virtual_set_label(void* fnptr, GtkMenuItem* arg0, gchar* arg1) {
//   ((void (*)(GtkMenuItem*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// Label sets text on the menu_item label.
//
// The function returns the following values:
//
//    - utf8: text in the menu_item label. This is the internal string used by
//      the label, and must not be modified.
//
func (menuItem *MenuItem) Label() string {
	var _arg0 *C.GtkMenuItem // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))

	_cret = C.gtk_menu_item_get_label(_arg0)
	runtime.KeepAlive(menuItem)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UseUnderline checks if an underline in the text indicates the next character
// should be used for the mnemonic accelerator key.
//
// The function returns the following values:
//
//    - ok: TRUE if an embedded underline in the label indicates the mnemonic
//      accelerator key.
//
func (menuItem *MenuItem) UseUnderline() bool {
	var _arg0 *C.GtkMenuItem // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))

	_cret = C.gtk_menu_item_get_use_underline(_arg0)
	runtime.KeepAlive(menuItem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetLabel sets text on the menu_item label.
//
// The function takes the following parameters:
//
//    - label: text you want to set.
//
func (menuItem *MenuItem) SetLabel(label string) {
	var _arg0 *C.GtkMenuItem // out
	var _arg1 *C.gchar       // out

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_menu_item_set_label(_arg0, _arg1)
	runtime.KeepAlive(menuItem)
	runtime.KeepAlive(label)
}

// SetUseUnderline: if true, an underline in the text indicates the next
// character should be used for the mnemonic accelerator key.
//
// The function takes the following parameters:
//
//    - setting: TRUE if underlines in the text indicate mnemonics.
//
func (menuItem *MenuItem) SetUseUnderline(setting bool) {
	var _arg0 *C.GtkMenuItem // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_menu_item_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(menuItem)
	runtime.KeepAlive(setting)
}

// Label sets text on the menu_item label.
//
// The function returns the following values:
//
//    - utf8: text in the menu_item label. This is the internal string used by
//      the label, and must not be modified.
//
func (menuItem *MenuItem) label() string {
	gclass := (*C.GtkMenuItemClass)(coreglib.PeekParentClass(menuItem))
	fnarg := gclass.get_label

	var _arg0 *C.GtkMenuItem // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))

	_cret = C._gotk4_gtk3_MenuItem_virtual_get_label(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(menuItem)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// setLabel sets text on the menu_item label.
//
// The function takes the following parameters:
//
//    - label: text you want to set.
//
func (menuItem *MenuItem) setLabel(label string) {
	gclass := (*C.GtkMenuItemClass)(coreglib.PeekParentClass(menuItem))
	fnarg := gclass.set_label

	var _arg0 *C.GtkMenuItem // out
	var _arg1 *C.gchar       // out

	_arg0 = (*C.GtkMenuItem)(unsafe.Pointer(coreglib.InternObject(menuItem).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	C._gotk4_gtk3_MenuItem_virtual_set_label(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(menuItem)
	runtime.KeepAlive(label)
}
