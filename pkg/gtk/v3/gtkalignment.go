// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkalignment.go.
var GTypeAlignment = coreglib.Type(C.gtk_alignment_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeAlignment, F: marshalAlignment},
	})
}

// AlignmentOverrider contains methods that are overridable.
type AlignmentOverrider interface {
}

// Alignment widget controls the alignment and size of its child widget. It has
// four settings: xscale, yscale, xalign, and yalign.
//
// The scale settings are used to specify how much the child widget should
// expand to fill the space allocated to the Alignment. The values can range
// from 0 (meaning the child doesnâ€™t expand at all) to 1 (meaning the child
// expands to fill all of the available space).
//
// The align settings are used to place the child widget within the available
// area. The values range from 0 (top or left) to 1 (bottom or right). Of
// course, if the scale settings are both set to 1, the alignment settings have
// no effect.
//
// GtkAlignment has been deprecated in 3.14 and should not be used in
// newly-written code. The desired effect can be achieved by using the
// Widget:halign, Widget:valign and Widget:margin properties on the child
// widget.
type Alignment struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*Alignment)(nil)
)

func classInitAlignmenter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapAlignment(obj *coreglib.Object) *Alignment {
	return &Alignment{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalAlignment(p uintptr) (interface{}, error) {
	return wrapAlignment(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewAlignment creates a new Alignment.
//
// Deprecated: Use Widget alignment and margin properties.
//
// The function takes the following parameters:
//
//    - xalign: horizontal alignment of the child widget, from 0 (left) to 1
//      (right).
//    - yalign: vertical alignment of the child widget, from 0 (top) to 1
//      (bottom).
//    - xscale: amount that the child widget expands horizontally to fill up
//      unused space, from 0 to 1. A value of 0 indicates that the child widget
//      should never expand. A value of 1 indicates that the child widget will
//      expand to fill all of the space allocated for the Alignment.
//    - yscale: amount that the child widget expands vertically to fill up unused
//      space, from 0 to 1. The values are similar to xscale.
//
// The function returns the following values:
//
//    - alignment: new Alignment.
//
func NewAlignment(xalign, yalign, xscale, yscale float32) *Alignment {
	var _args [4]girepository.Argument
	var _arg0 C.gfloat // out
	var _arg1 C.gfloat // out
	var _arg2 C.gfloat // out
	var _arg3 C.gfloat // out
	var _cret *C.void  // in

	_arg0 = C.gfloat(xalign)
	_arg1 = C.gfloat(yalign)
	_arg2 = C.gfloat(xscale)
	_arg3 = C.gfloat(yscale)

	*(*C.gfloat)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gfloat)(unsafe.Pointer(&_args[1])) = _arg1
	*(*C.gfloat)(unsafe.Pointer(&_args[2])) = _arg2
	*(*C.gfloat)(unsafe.Pointer(&_args[3])) = _arg3

	_gret := girepository.MustFind("Gtk", "Alignment").InvokeMethod("new_Alignment", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
	runtime.KeepAlive(xscale)
	runtime.KeepAlive(yscale)

	var _alignment *Alignment // out

	_alignment = wrapAlignment(coreglib.Take(unsafe.Pointer(_cret)))

	return _alignment
}

// Padding gets the padding on the different sides of the widget. See
// gtk_alignment_set_padding ().
//
// Deprecated: Use Widget alignment and margin properties.
//
// The function returns the following values:
//
//    - paddingTop (optional): location to store the padding for the top of the
//      widget, or NULL.
//    - paddingBottom (optional): location to store the padding for the bottom of
//      the widget, or NULL.
//    - paddingLeft (optional): location to store the padding for the left of the
//      widget, or NULL.
//    - paddingRight (optional): location to store the padding for the right of
//      the widget, or NULL.
//
func (alignment *Alignment) Padding() (paddingTop uint32, paddingBottom uint32, paddingLeft uint32, paddingRight uint32) {
	var _args [1]girepository.Argument
	var _outs [4]girepository.Argument
	var _arg0 *C.void // out
	var _out0 *C.void // in
	var _out1 *C.void // in
	var _out2 *C.void // in
	var _out3 *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(alignment).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "Alignment").InvokeMethod("get_padding", _args[:], _outs[:])

	runtime.KeepAlive(alignment)

	var _paddingTop uint32    // out
	var _paddingBottom uint32 // out
	var _paddingLeft uint32   // out
	var _paddingRight uint32  // out
	_out0 = *(**C.void)(unsafe.Pointer(&_outs[0]))
	_out1 = *(**C.void)(unsafe.Pointer(&_outs[1]))
	_out2 = *(**C.void)(unsafe.Pointer(&_outs[2]))
	_out3 = *(**C.void)(unsafe.Pointer(&_outs[3]))

	if _out0 != nil {
		_paddingTop = *(*uint32)(unsafe.Pointer(_out0))
	}
	if _out1 != nil {
		_paddingBottom = *(*uint32)(unsafe.Pointer(_out1))
	}
	if _out2 != nil {
		_paddingLeft = *(*uint32)(unsafe.Pointer(_out2))
	}
	if _out3 != nil {
		_paddingRight = *(*uint32)(unsafe.Pointer(_out3))
	}

	return _paddingTop, _paddingBottom, _paddingLeft, _paddingRight
}

// Set sets the Alignment values.
//
// Deprecated: Use Widget alignment and margin properties.
//
// The function takes the following parameters:
//
//    - xalign: horizontal alignment of the child widget, from 0 (left) to 1
//      (right).
//    - yalign: vertical alignment of the child widget, from 0 (top) to 1
//      (bottom).
//    - xscale: amount that the child widget expands horizontally to fill up
//      unused space, from 0 to 1. A value of 0 indicates that the child widget
//      should never expand. A value of 1 indicates that the child widget will
//      expand to fill all of the space allocated for the Alignment.
//    - yscale: amount that the child widget expands vertically to fill up unused
//      space, from 0 to 1. The values are similar to xscale.
//
func (alignment *Alignment) Set(xalign, yalign, xscale, yscale float32) {
	var _args [5]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 C.gfloat // out
	var _arg2 C.gfloat // out
	var _arg3 C.gfloat // out
	var _arg4 C.gfloat // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(alignment).Native()))
	_arg1 = C.gfloat(xalign)
	_arg2 = C.gfloat(yalign)
	_arg3 = C.gfloat(xscale)
	_arg4 = C.gfloat(yscale)

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gfloat)(unsafe.Pointer(&_args[1])) = _arg1
	*(*C.gfloat)(unsafe.Pointer(&_args[2])) = _arg2
	*(*C.gfloat)(unsafe.Pointer(&_args[3])) = _arg3
	*(*C.gfloat)(unsafe.Pointer(&_args[4])) = _arg4

	girepository.MustFind("Gtk", "Alignment").InvokeMethod("set", _args[:], nil)

	runtime.KeepAlive(alignment)
	runtime.KeepAlive(xalign)
	runtime.KeepAlive(yalign)
	runtime.KeepAlive(xscale)
	runtime.KeepAlive(yscale)
}

// SetPadding sets the padding on the different sides of the widget. The padding
// adds blank space to the sides of the widget. For instance, this can be used
// to indent the child widget towards the right by adding padding on the left.
//
// Deprecated: Use Widget alignment and margin properties.
//
// The function takes the following parameters:
//
//    - paddingTop: padding at the top of the widget.
//    - paddingBottom: padding at the bottom of the widget.
//    - paddingLeft: padding at the left of the widget.
//    - paddingRight: padding at the right of the widget.
//
func (alignment *Alignment) SetPadding(paddingTop, paddingBottom, paddingLeft, paddingRight uint32) {
	var _args [5]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out
	var _arg2 C.guint // out
	var _arg3 C.guint // out
	var _arg4 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(alignment).Native()))
	_arg1 = C.guint(paddingTop)
	_arg2 = C.guint(paddingBottom)
	_arg3 = C.guint(paddingLeft)
	_arg4 = C.guint(paddingRight)

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.guint)(unsafe.Pointer(&_args[1])) = _arg1
	*(*C.guint)(unsafe.Pointer(&_args[2])) = _arg2
	*(*C.guint)(unsafe.Pointer(&_args[3])) = _arg3
	*(*C.guint)(unsafe.Pointer(&_args[4])) = _arg4

	girepository.MustFind("Gtk", "Alignment").InvokeMethod("set_padding", _args[:], nil)

	runtime.KeepAlive(alignment)
	runtime.KeepAlive(paddingTop)
	runtime.KeepAlive(paddingBottom)
	runtime.KeepAlive(paddingLeft)
	runtime.KeepAlive(paddingRight)
}
