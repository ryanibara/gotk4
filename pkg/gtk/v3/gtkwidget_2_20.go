// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// Mapped: whether the widget is mapped.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget is mapped, FALSE otherwise.
//
func (widget *Widget) Mapped() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_mapped(_arg0)
	runtime.KeepAlive(widget)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Realized determines whether widget is realized.
//
// The function returns the following values:
//
//    - ok: TRUE if widget is realized, FALSE otherwise.
//
func (widget *Widget) Realized() bool {
	var _arg0 *C.GtkWidget // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_cret = C.gtk_widget_get_realized(_arg0)
	runtime.KeepAlive(widget)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Requisition retrieves the widget’s requisition.
//
// This function should only be used by widget implementations in order to
// figure whether the widget’s requisition has actually changed after some
// internal state change (so that they can call gtk_widget_queue_resize()
// instead of gtk_widget_queue_draw()).
//
// Normally, gtk_widget_size_request() should be used.
//
// Deprecated: The Requisition cache on the widget was removed, If you need to
// cache sizes across requests and allocations, add an explicit cache to the
// widget in question instead.
//
// The function returns the following values:
//
//    - requisition: pointer to a Requisition to copy to.
//
func (widget *Widget) Requisition() *Requisition {
	var _arg0 *C.GtkWidget     // out
	var _arg1 C.GtkRequisition // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	C.gtk_widget_get_requisition(_arg0, &_arg1)
	runtime.KeepAlive(widget)

	var _requisition *Requisition // out

	_requisition = (*Requisition)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _requisition
}

// SendFocusChange sends the focus change event to widget
//
// This function is not meant to be used by applications. The only time it
// should be used is when it is necessary for a Widget to assign focus to a
// widget that is semantically owned by the first widget even though it’s not a
// direct child - for instance, a search entry in a floating window similar to
// the quick search in TreeView.
//
// An example of its usage is:
//
//      GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
//
//      fevent->focus_change.type = GDK_FOCUS_CHANGE;
//      fevent->focus_change.in = TRUE;
//      fevent->focus_change.window = _gtk_widget_get_window (widget);
//      if (fevent->focus_change.window != NULL)
//        g_object_ref (fevent->focus_change.window);
//
//      gtk_widget_send_focus_change (widget, fevent);
//
//      gdk_event_free (event);.
//
// The function takes the following parameters:
//
//    - event of type GDK_FOCUS_CHANGE.
//
// The function returns the following values:
//
//    - ok: return value from the event signal emission: TRUE if the event was
//      handled, and FALSE otherwise.
//
func (widget *Widget) SendFocusChange(event *gdk.Event) bool {
	var _arg0 *C.GtkWidget // out
	var _arg1 *C.GdkEvent  // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg1 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C.gtk_widget_send_focus_change(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetMapped marks the widget as being mapped.
//
// This function should only ever be called in a derived widget's “map” or
// “unmap” implementation.
//
// The function takes the following parameters:
//
//    - mapped: TRUE to mark the widget as mapped.
//
func (widget *Widget) SetMapped(mapped bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if mapped {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_mapped(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(mapped)
}

// SetRealized marks the widget as being realized. This function must only be
// called after all Windows for the widget have been created and registered.
//
// This function should only ever be called in a derived widget's “realize” or
// “unrealize” implementation.
//
// The function takes the following parameters:
//
//    - realized: TRUE to mark the widget as realized.
//
func (widget *Widget) SetRealized(realized bool) {
	var _arg0 *C.GtkWidget // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if realized {
		_arg1 = C.TRUE
	}

	C.gtk_widget_set_realized(_arg0, _arg1)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(realized)
}
