// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtktextattributes.go.
var GTypeTextAttributes = coreglib.Type(C.gtk_text_attributes_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeTextAttributes, F: marshalTextAttributes},
	})
}

// TextAppearance: instance of this type is always passed by reference.
type TextAppearance struct {
	*textAppearance
}

// textAppearance is the struct that's finalized.
type textAppearance struct {
	native *C.GtkTextAppearance
}

// TextAttributes: using TextAttributes directly should rarely be necessary.
// Itâ€™s primarily useful with gtk_text_iter_get_attributes(). As with most GTK+
// structs, the fields in this struct should only be read, never modified
// directly.
//
// An instance of this type is always passed by reference.
type TextAttributes struct {
	*textAttributes
}

// textAttributes is the struct that's finalized.
type textAttributes struct {
	native *C.GtkTextAttributes
}

func marshalTextAttributes(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TextAttributes{&textAttributes{(*C.GtkTextAttributes)(b)}}, nil
}

// NewTextAttributes constructs a struct TextAttributes.
func NewTextAttributes() *TextAttributes {
	var _cret *C.void // in

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_textAttributes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_text_attributes_unref((*C.GtkTextAttributes)(intern.C))
		},
	)

	return _textAttributes
}

// Copy copies src and returns a new TextAttributes.
//
// The function returns the following values:
//
//    - textAttributes: copy of src, free with gtk_text_attributes_unref().
//
func (src *TextAttributes) Copy() *TextAttributes {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(src)))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(src)

	var _textAttributes *TextAttributes // out

	_textAttributes = (*TextAttributes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_textAttributes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_text_attributes_unref((*C.GtkTextAttributes)(intern.C))
		},
	)

	return _textAttributes
}

// CopyValues copies the values from src to dest so that dest has the same
// values as src. Frees existing values in dest.
//
// The function takes the following parameters:
//
//    - dest: another TextAttributes.
//
func (src *TextAttributes) CopyValues(dest *TextAttributes) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(src)))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(dest)))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	runtime.KeepAlive(src)
	runtime.KeepAlive(dest)
}
