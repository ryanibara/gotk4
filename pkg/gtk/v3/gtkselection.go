// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// struct TargetEntry {
//     void* target;
//     guint flags;
//     guint info;
// };
// struct TargetPair {
//           target;
//     guint flags;
//     guint info;
// };
import "C"

// glib.Type values for gtkselection.go.
var (
	GTypeTargetFlags = coreglib.Type(C.gtk_target_flags_get_type())
	GTypeTargetEntry = coreglib.Type(C.gtk_target_entry_get_type())
	GTypeTargetList  = coreglib.Type(C.gtk_target_list_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeTargetFlags, F: marshalTargetFlags},
		{T: GTypeTargetEntry, F: marshalTargetEntry},
		{T: GTypeTargetList, F: marshalTargetList},
	})
}

// TargetFlags enumeration is used to specify constraints on a TargetEntry.
type TargetFlags C.guint

const (
	// TargetSameApp: if this is set, the target will only be selected for drags
	// within a single application.
	TargetSameApp TargetFlags = 0b1
	// TargetSameWidget: if this is set, the target will only be selected for
	// drags within a single widget.
	TargetSameWidget TargetFlags = 0b10
	// TargetOtherApp: if this is set, the target will not be selected for drags
	// within a single application.
	TargetOtherApp TargetFlags = 0b100
	// TargetOtherWidget: if this is set, the target will not be selected for
	// drags withing a single widget.
	TargetOtherWidget TargetFlags = 0b1000
)

func marshalTargetFlags(p uintptr) (interface{}, error) {
	return TargetFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for TargetFlags.
func (t TargetFlags) String() string {
	if t == 0 {
		return "TargetFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(63)

	for t != 0 {
		next := t & (t - 1)
		bit := t - next

		switch bit {
		case TargetSameApp:
			builder.WriteString("SameApp|")
		case TargetSameWidget:
			builder.WriteString("SameWidget|")
		case TargetOtherApp:
			builder.WriteString("OtherApp|")
		case TargetOtherWidget:
			builder.WriteString("OtherWidget|")
		default:
			builder.WriteString(fmt.Sprintf("TargetFlags(0b%b)|", bit))
		}

		t = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if t contains other.
func (t TargetFlags) Has(other TargetFlags) bool {
	return (t & other) == other
}

// SelectionRemoveAll removes all handlers and unsets ownership of all
// selections for a widget. Called when widget is being destroyed. This function
// will not generally be called by applications.
//
// The function takes the following parameters:
//
//    - widget: Widget.
//
func SelectionRemoveAll(widget Widgetter) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "selection_remove_all").Invoke(_args[:], nil)

	runtime.KeepAlive(widget)
}

// TargetEntry represents a single type of data than can be supplied for by a
// widget for a selection or for supplied or received during drag-and-drop.
//
// An instance of this type is always passed by reference.
type TargetEntry struct {
	*targetEntry
}

// targetEntry is the struct that's finalized.
type targetEntry struct {
	native unsafe.Pointer
}

func marshalTargetEntry(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TargetEntry{&targetEntry{(unsafe.Pointer)(b)}}, nil
}

// NewTargetEntry constructs a struct TargetEntry.
func NewTargetEntry(target string, flags uint32, info uint32) *TargetEntry {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(target)))
	defer C.free(unsafe.Pointer(_args[0]))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(flags)
	*(*C.guint)(unsafe.Pointer(&_args[2])) = C.guint(info)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(target)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(info)

	var _targetEntry *TargetEntry // out

	_targetEntry = (*TargetEntry)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_targetEntry)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TargetEntry").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _targetEntry
}

// Target: string representation of the target type.
func (t *TargetEntry) Target() string {
	offset := girepository.MustFind("Gtk", "TargetEntry").StructFieldOffset("target")
	valptr := unsafe.Add(unsafe.Pointer(t), offset)
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(valptr)))
	return v
}

// Flags for DND.
func (t *TargetEntry) Flags() uint32 {
	offset := girepository.MustFind("Gtk", "TargetEntry").StructFieldOffset("flags")
	valptr := unsafe.Add(unsafe.Pointer(t), offset)
	var v uint32 // out
	v = uint32(*(*C.guint)(unsafe.Pointer(&valptr)))
	return v
}

// Info: application-assigned integer ID which will get passed as a parameter to
// e.g the Widget::selection-get signal. It allows the application to identify
// the target type without extensive string compares.
func (t *TargetEntry) Info() uint32 {
	offset := girepository.MustFind("Gtk", "TargetEntry").StructFieldOffset("info")
	valptr := unsafe.Add(unsafe.Pointer(t), offset)
	var v uint32 // out
	v = uint32(*(*C.guint)(unsafe.Pointer(&valptr)))
	return v
}

// Copy makes a copy of a TargetEntry and its data.
//
// The function returns the following values:
//
//    - targetEntry: pointer to a copy of data. Free with
//      gtk_target_entry_free().
//
func (data *TargetEntry) Copy() *TargetEntry {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(data)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(data)

	var _targetEntry *TargetEntry // out

	_targetEntry = (*TargetEntry)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_targetEntry)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gtk", "TargetEntry").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _targetEntry
}

// TargetList is a reference counted list of TargetPair and should be treated as
// opaque.
//
// An instance of this type is always passed by reference.
type TargetList struct {
	*targetList
}

// targetList is the struct that's finalized.
type targetList struct {
	native unsafe.Pointer
}

func marshalTargetList(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TargetList{&targetList{(unsafe.Pointer)(b)}}, nil
}

// AddImageTargets appends the image targets supported by SelectionData to the
// target list. All targets are added with the same info.
//
// The function takes the following parameters:
//
//    - info: ID that will be passed back to the application.
//    - writable: whether to add only targets for which GTK+ knows how to convert
//      a pixbuf into the format.
//
func (list *TargetList) AddImageTargets(info uint32, writable bool) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(info)
	if writable {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}

	runtime.KeepAlive(list)
	runtime.KeepAlive(info)
	runtime.KeepAlive(writable)
}

// AddRichTextTargets appends the rich text targets registered with
// gtk_text_buffer_register_serialize_format() or
// gtk_text_buffer_register_deserialize_format() to the target list. All targets
// are added with the same info.
//
// The function takes the following parameters:
//
//    - info: ID that will be passed back to the application.
//    - deserializable: if TRUE, then deserializable rich text formats will be
//      added, serializable formats otherwise.
//    - buffer: TextBuffer.
//
func (list *TargetList) AddRichTextTargets(info uint32, deserializable bool, buffer *TextBuffer) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(info)
	if deserializable {
		*(*C.gboolean)(unsafe.Pointer(&_args[2])) = C.TRUE
	}
	*(**C.void)(unsafe.Pointer(&_args[3])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))

	runtime.KeepAlive(list)
	runtime.KeepAlive(info)
	runtime.KeepAlive(deserializable)
	runtime.KeepAlive(buffer)
}

// AddTextTargets appends the text targets supported by SelectionData to the
// target list. All targets are added with the same info.
//
// The function takes the following parameters:
//
//    - info: ID that will be passed back to the application.
//
func (list *TargetList) AddTextTargets(info uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(info)

	runtime.KeepAlive(list)
	runtime.KeepAlive(info)
}

// AddURITargets appends the URI targets supported by SelectionData to the
// target list. All targets are added with the same info.
//
// The function takes the following parameters:
//
//    - info: ID that will be passed back to the application.
//
func (list *TargetList) AddURITargets(info uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(info)

	runtime.KeepAlive(list)
	runtime.KeepAlive(info)
}

// TargetPair is used to represent the same information as a table of
// TargetEntry, but in an efficient form.
//
// An instance of this type is always passed by reference.
type TargetPair struct {
	*targetPair
}

// targetPair is the struct that's finalized.
type targetPair struct {
	native unsafe.Pointer
}
