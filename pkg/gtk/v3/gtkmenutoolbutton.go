// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_MenuToolButton_ConnectShowMenu(gpointer, guintptr);
// extern void _gotk4_gtk3_MenuToolButtonClass_show_menu(GtkMenuToolButton*);
// void _gotk4_gtk3_MenuToolButton_virtual_show_menu(void* fnptr, GtkMenuToolButton* arg0) {
//   ((void (*)(GtkMenuToolButton*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeMenuToolButton = coreglib.Type(C.gtk_menu_tool_button_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMenuToolButton, F: marshalMenuToolButton},
	})
}

// MenuToolButtonOverrides contains methods that are overridable.
type MenuToolButtonOverrides struct {
	ShowMenu func()
}

func defaultMenuToolButtonOverrides(v *MenuToolButton) MenuToolButtonOverrides {
	return MenuToolButtonOverrides{
		ShowMenu: v.showMenu,
	}
}

// MenuToolButton is a ToolItem that contains a button and a small additional
// button with an arrow. When clicked, the arrow button pops up a dropdown menu.
//
// Use gtk_menu_tool_button_new() to create a new MenuToolButton.
//
//
// GtkMenuToolButton as GtkBuildable
//
// The GtkMenuToolButton implementation of the GtkBuildable interface supports
// adding a menu by specifying “menu” as the “type” attribute of a <child>
// element.
//
// An example for a UI definition fragment with menus:
//
//    <object class="GtkMenuToolButton">
//      <child type="menu">
//        <object class="GtkMenu"/>
//      </child>
//    </object>.
type MenuToolButton struct {
	_ [0]func() // equal guard
	ToolButton
}

var (
	_ coreglib.Objector = (*MenuToolButton)(nil)
	_ Binner            = (*MenuToolButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MenuToolButton, *MenuToolButtonClass, MenuToolButtonOverrides](
		GTypeMenuToolButton,
		initMenuToolButtonClass,
		wrapMenuToolButton,
		defaultMenuToolButtonOverrides,
	)
}

func initMenuToolButtonClass(gclass unsafe.Pointer, overrides MenuToolButtonOverrides, classInitFunc func(*MenuToolButtonClass)) {
	pclass := (*C.GtkMenuToolButtonClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeMenuToolButton))))

	if overrides.ShowMenu != nil {
		pclass.show_menu = (*[0]byte)(C._gotk4_gtk3_MenuToolButtonClass_show_menu)
	}

	if classInitFunc != nil {
		class := (*MenuToolButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMenuToolButton(obj *coreglib.Object) *MenuToolButton {
	return &MenuToolButton{
		ToolButton: ToolButton{
			ToolItem: ToolItem{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Activatable: Activatable{
					Object: obj,
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalMenuToolButton(p uintptr) (interface{}, error) {
	return wrapMenuToolButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectShowMenu signal is emitted before the menu is shown.
//
// It can be used to populate the menu on demand, using
// gtk_menu_tool_button_set_menu().
//
// Note that even if you populate the menu dynamically in this way, you must set
// an empty menu on the MenuToolButton beforehand, since the arrow is made
// insensitive if the menu is not set.
func (button *MenuToolButton) ConnectShowMenu(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(button, "show-menu", false, unsafe.Pointer(C._gotk4_gtk3_MenuToolButton_ConnectShowMenu), f)
}

func (button *MenuToolButton) showMenu() {
	gclass := (*C.GtkMenuToolButtonClass)(coreglib.PeekParentClass(button))
	fnarg := gclass.show_menu

	var _arg0 *C.GtkMenuToolButton // out

	_arg0 = (*C.GtkMenuToolButton)(unsafe.Pointer(coreglib.InternObject(button).Native()))

	C._gotk4_gtk3_MenuToolButton_virtual_show_menu(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(button)
}

// MenuToolButtonClass: instance of this type is always passed by reference.
type MenuToolButtonClass struct {
	*menuToolButtonClass
}

// menuToolButtonClass is the struct that's finalized.
type menuToolButtonClass struct {
	native *C.GtkMenuToolButtonClass
}

// ParentClass: parent class.
func (m *MenuToolButtonClass) ParentClass() *ToolButtonClass {
	valptr := &m.native.parent_class
	var _v *ToolButtonClass // out
	_v = (*ToolButtonClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
