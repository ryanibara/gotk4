// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// InsertMarkup inserts the text in markup at position iter. markup will be
// inserted in its entirety and must be nul-terminated and valid UTF-8. Emits
// the TextBuffer::insert-text signal, possibly multiple times; insertion
// actually occurs in the default handler for the signal. iter will point to the
// end of the inserted text on return.
//
// The function takes the following parameters:
//
//    - iter: location to insert the markup.
//    - markup: nul-terminated UTF-8 string containing [Pango
//      markup][PangoMarkupFormat].
//
func (buffer *TextBuffer) InsertMarkup(iter *TextIter, markup string) {
	var _arg0 *C.GtkTextBuffer // out
	var _arg1 *C.GtkTextIter   // out
	var _arg2 *C.char          // out
	var _arg3 C.gint

	_arg0 = (*C.GtkTextBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))
	_arg1 = (*C.GtkTextIter)(gextras.StructNative(unsafe.Pointer(iter)))
	_arg3 = (C.gint)(len(markup))
	_arg2 = (*C.char)(C.calloc(C.size_t((len(markup) + 1)), C.size_t(C.sizeof_char)))
	copy(unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), len(markup)), markup)
	defer C.free(unsafe.Pointer(_arg2))

	C.gtk_text_buffer_insert_markup(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(markup)
}
