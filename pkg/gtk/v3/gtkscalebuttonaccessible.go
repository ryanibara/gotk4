// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeScaleButtonAccessible = coreglib.Type(C.gtk_scale_button_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScaleButtonAccessible, F: marshalScaleButtonAccessible},
	})
}

// ScaleButtonAccessibleOverrider contains methods that are overridable.
type ScaleButtonAccessibleOverrider interface {
}

type ScaleButtonAccessible struct {
	_ [0]func() // equal guard
	ButtonAccessible

	*coreglib.Object
	atk.Value
}

var (
	_ coreglib.Objector = (*ScaleButtonAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeScaleButtonAccessible,
		GoType:        reflect.TypeOf((*ScaleButtonAccessible)(nil)),
		InitClass:     initClassScaleButtonAccessible,
		FinalizeClass: finalizeClassScaleButtonAccessible,
	})
}

func initClassScaleButtonAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitScaleButtonAccessible(*ScaleButtonAccessibleClass)
	}); ok {
		klass := (*ScaleButtonAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitScaleButtonAccessible(klass)
	}
}

func finalizeClassScaleButtonAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		FinalizeScaleButtonAccessible(*ScaleButtonAccessibleClass)
	}); ok {
		klass := (*ScaleButtonAccessibleClass)(gextras.NewStructNative(gclass))
		goval.FinalizeScaleButtonAccessible(klass)
	}
}

func wrapScaleButtonAccessible(obj *coreglib.Object) *ScaleButtonAccessible {
	return &ScaleButtonAccessible{
		ButtonAccessible: ButtonAccessible{
			ContainerAccessible: ContainerAccessible{
				WidgetAccessible: WidgetAccessible{
					Accessible: Accessible{
						AtkObject: atk.AtkObject{
							Object: obj,
						},
					},
					Component: atk.Component{
						Object: obj,
					},
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			Image: atk.Image{
				Object: obj,
			},
		},
		Object: obj,
		Value: atk.Value{
			Object: obj,
		},
	}
}

func marshalScaleButtonAccessible(p uintptr) (interface{}, error) {
	return wrapScaleButtonAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ScaleButtonAccessibleClass: instance of this type is always passed by
// reference.
type ScaleButtonAccessibleClass struct {
	*scaleButtonAccessibleClass
}

// scaleButtonAccessibleClass is the struct that's finalized.
type scaleButtonAccessibleClass struct {
	native *C.GtkScaleButtonAccessibleClass
}

func (s *ScaleButtonAccessibleClass) ParentClass() *ButtonAccessibleClass {
	valptr := &s.native.parent_class
	var _v *ButtonAccessibleClass // out
	_v = (*ButtonAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
