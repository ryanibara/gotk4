// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeScaleButtonAccessible returns the GType for the type ScaleButtonAccessible.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeScaleButtonAccessible() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ScaleButtonAccessible").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalScaleButtonAccessible)
	return gtype
}

// ScaleButtonAccessibleOverrider contains methods that are overridable.
type ScaleButtonAccessibleOverrider interface {
}

type ScaleButtonAccessible struct {
	_ [0]func() // equal guard
	ButtonAccessible

	*coreglib.Object
	atk.Value
}

var (
	_ coreglib.Objector = (*ScaleButtonAccessible)(nil)
)

func classInitScaleButtonAccessibler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapScaleButtonAccessible(obj *coreglib.Object) *ScaleButtonAccessible {
	return &ScaleButtonAccessible{
		ButtonAccessible: ButtonAccessible{
			ContainerAccessible: ContainerAccessible{
				WidgetAccessible: WidgetAccessible{
					Accessible: Accessible{
						ObjectClass: atk.ObjectClass{
							Object: obj,
						},
					},
					Component: atk.Component{
						Object: obj,
					},
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			Image: atk.Image{
				Object: obj,
			},
		},
		Object: obj,
		Value: atk.Value{
			Object: obj,
		},
	}
}

func marshalScaleButtonAccessible(p uintptr) (interface{}, error) {
	return wrapScaleButtonAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
