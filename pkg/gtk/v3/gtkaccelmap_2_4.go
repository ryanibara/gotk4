// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AccelMapGet gets the singleton global AccelMap object. This object is useful
// only for notification of changes to the accelerator map via the ::changed
// signal; it isn’t a parameter to the other accelerator map functions.
//
// The function returns the following values:
//
//   - accelMap: global AccelMap object.
//
func AccelMapGet() *AccelMap {
	var _cret *C.GtkAccelMap // in

	_cret = C.gtk_accel_map_get()

	var _accelMap *AccelMap // out

	_accelMap = wrapAccelMap(coreglib.Take(unsafe.Pointer(_cret)))

	return _accelMap
}

// AccelMapLockPath locks the given accelerator path. If the accelerator map
// doesn’t yet contain an entry for accel_path, a new one is created.
//
// Locking an accelerator path prevents its accelerator from being
// changed during runtime. A locked accelerator path can be unlocked by
// gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry() for
// information about runtime accelerator changes.
//
// If called more than once, accel_path remains locked until
// gtk_accel_map_unlock_path() has been called an equivalent number of times.
//
// Note that locking of individual accelerator paths is independent from
// locking the AccelGroup containing them. For runtime accelerator changes to be
// possible, both the accelerator path and its AccelGroup have to be unlocked.
//
// The function takes the following parameters:
//
//   - accelPath: valid accelerator path.
//
func AccelMapLockPath(accelPath string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(accelPath)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_accel_map_lock_path(_arg1)
	runtime.KeepAlive(accelPath)
}

// AccelMapUnlockPath undoes the last call to gtk_accel_map_lock_path() on
// this accel_path. Refer to gtk_accel_map_lock_path() for information about
// accelerator path locking.
//
// The function takes the following parameters:
//
//   - accelPath: valid accelerator path.
//
func AccelMapUnlockPath(accelPath string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(accelPath)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_accel_map_unlock_path(_arg1)
	runtime.KeepAlive(accelPath)
}
