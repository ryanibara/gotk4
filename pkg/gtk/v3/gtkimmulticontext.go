// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeIMMulticontext = coreglib.Type(C.gtk_im_multicontext_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeIMMulticontext, F: marshalIMMulticontext},
	})
}

// IMMulticontextOverrides contains methods that are overridable.
type IMMulticontextOverrides struct {
}

func defaultIMMulticontextOverrides(v *IMMulticontext) IMMulticontextOverrides {
	return IMMulticontextOverrides{}
}

type IMMulticontext struct {
	_ [0]func() // equal guard
	IMContext
}

var (
	_ IMContexter = (*IMMulticontext)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*IMMulticontext, *IMMulticontextClass, IMMulticontextOverrides](
		GTypeIMMulticontext,
		initIMMulticontextClass,
		wrapIMMulticontext,
		defaultIMMulticontextOverrides,
	)
}

func initIMMulticontextClass(gclass unsafe.Pointer, overrides IMMulticontextOverrides, classInitFunc func(*IMMulticontextClass)) {
	if classInitFunc != nil {
		class := (*IMMulticontextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapIMMulticontext(obj *coreglib.Object) *IMMulticontext {
	return &IMMulticontext{
		IMContext: IMContext{
			Object: obj,
		},
	}
}

func marshalIMMulticontext(p uintptr) (interface{}, error) {
	return wrapIMMulticontext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewIMMulticontext creates a new IMMulticontext.
//
// The function returns the following values:
//
//    - imMulticontext: new IMMulticontext.
//
func NewIMMulticontext() *IMMulticontext {
	var _cret *C.GtkIMContext // in

	_cret = C.gtk_im_multicontext_new()

	var _imMulticontext *IMMulticontext // out

	_imMulticontext = wrapIMMulticontext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _imMulticontext
}

// AppendMenuitems: add menuitems for various available input methods to a menu;
// the menuitems, when selected, will switch the input method for the context
// and the global default input method.
//
// Deprecated: It is better to use the system-wide input method framework for
// changing input methods. Modern desktop shells offer on-screen displays for
// this that can triggered with a keyboard shortcut, e.g. Super-Space.
//
// The function takes the following parameters:
//
//    - menushell: MenuShell.
//
func (context *IMMulticontext) AppendMenuitems(menushell MenuSheller) {
	var _arg0 *C.GtkIMMulticontext // out
	var _arg1 *C.GtkMenuShell      // out

	_arg0 = (*C.GtkIMMulticontext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GtkMenuShell)(unsafe.Pointer(coreglib.InternObject(menushell).Native()))

	C.gtk_im_multicontext_append_menuitems(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(menushell)
}

// IMMulticontextClass: instance of this type is always passed by reference.
type IMMulticontextClass struct {
	*imMulticontextClass
}

// imMulticontextClass is the struct that's finalized.
type imMulticontextClass struct {
	native *C.GtkIMMulticontextClass
}

func (i *IMMulticontextClass) ParentClass() *IMContextClass {
	valptr := &i.native.parent_class
	var _v *IMContextClass // out
	_v = (*IMContextClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
