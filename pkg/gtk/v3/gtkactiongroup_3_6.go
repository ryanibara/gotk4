// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// AccelGroup gets the accelerator group.
//
// Deprecated: since version 3.10.
//
// The function returns the following values:
//
//    - accelGroup: accelerator group associated with this action group or NULL
//      if there is none.
//
func (actionGroup *ActionGroup) AccelGroup() *AccelGroup {
	var _arg0 *C.GtkActionGroup // out
	var _cret *C.GtkAccelGroup  // in

	_arg0 = (*C.GtkActionGroup)(unsafe.Pointer(coreglib.InternObject(actionGroup).Native()))

	_cret = C.gtk_action_group_get_accel_group(_arg0)
	runtime.KeepAlive(actionGroup)

	var _accelGroup *AccelGroup // out

	_accelGroup = wrapAccelGroup(coreglib.Take(unsafe.Pointer(_cret)))

	return _accelGroup
}

// SetAccelGroup sets the accelerator group to be used by every action in this
// group.
//
// Deprecated: since version 3.10.
//
// The function takes the following parameters:
//
//    - accelGroup (optional) to set or NULL.
//
func (actionGroup *ActionGroup) SetAccelGroup(accelGroup *AccelGroup) {
	var _arg0 *C.GtkActionGroup // out
	var _arg1 *C.GtkAccelGroup  // out

	_arg0 = (*C.GtkActionGroup)(unsafe.Pointer(coreglib.InternObject(actionGroup).Native()))
	if accelGroup != nil {
		_arg1 = (*C.GtkAccelGroup)(unsafe.Pointer(coreglib.InternObject(accelGroup).Native()))
	}

	C.gtk_action_group_set_accel_group(_arg0, _arg1)
	runtime.KeepAlive(actionGroup)
	runtime.KeepAlive(accelGroup)
}
