// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeLabelAccessible = coreglib.Type(C.gtk_label_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLabelAccessible, F: marshalLabelAccessible},
	})
}

// LabelAccessibleOverrider contains methods that are overridable.
type LabelAccessibleOverrider interface {
}

type LabelAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	*coreglib.Object
	atk.Hypertext
	atk.Text
}

var (
	_ coreglib.Objector = (*LabelAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeLabelAccessible,
		GoType:        reflect.TypeOf((*LabelAccessible)(nil)),
		InitClass:     initClassLabelAccessible,
		FinalizeClass: finalizeClassLabelAccessible,
	})
}

func initClassLabelAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitLabelAccessible(*LabelAccessibleClass) }); ok {
		klass := (*LabelAccessibleClass)(gextras.NewStructNative(gclass))
		goval.InitLabelAccessible(klass)
	}
}

func finalizeClassLabelAccessible(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ FinalizeLabelAccessible(*LabelAccessibleClass) }); ok {
		klass := (*LabelAccessibleClass)(gextras.NewStructNative(gclass))
		goval.FinalizeLabelAccessible(klass)
	}
}

func wrapLabelAccessible(obj *coreglib.Object) *LabelAccessible {
	return &LabelAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Object: obj,
		Hypertext: atk.Hypertext{
			Object: obj,
		},
		Text: atk.Text{
			Object: obj,
		},
	}
}

func marshalLabelAccessible(p uintptr) (interface{}, error) {
	return wrapLabelAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LabelAccessibleClass: instance of this type is always passed by reference.
type LabelAccessibleClass struct {
	*labelAccessibleClass
}

// labelAccessibleClass is the struct that's finalized.
type labelAccessibleClass struct {
	native *C.GtkLabelAccessibleClass
}

func (l *LabelAccessibleClass) ParentClass() *WidgetAccessibleClass {
	valptr := &l.native.parent_class
	var _v *WidgetAccessibleClass // out
	_v = (*WidgetAccessibleClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
