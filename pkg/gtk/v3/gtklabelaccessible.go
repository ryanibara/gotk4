// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// GType values.
var (
	GTypeLabelAccessible = coreglib.Type(C.gtk_label_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLabelAccessible, F: marshalLabelAccessible},
	})
}

// LabelAccessibleOverrider contains methods that are overridable.
type LabelAccessibleOverrider interface {
}

type LabelAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	*coreglib.Object
	atk.Hypertext
	atk.Text
}

var (
	_ coreglib.Objector = (*LabelAccessible)(nil)
)

func initClassLabelAccessible(gclass unsafe.Pointer, goval any) {
}

func wrapLabelAccessible(obj *coreglib.Object) *LabelAccessible {
	return &LabelAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				ObjectClass: atk.ObjectClass{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Object: obj,
		Hypertext: atk.Hypertext{
			Object: obj,
		},
		Text: atk.Text{
			Object: obj,
		},
	}
}

func marshalLabelAccessible(p uintptr) (interface{}, error) {
	return wrapLabelAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
