// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

// NewBuilderFromFile builds the [GtkBuilder UI definition][BUILDER-UI] in the
// file filename.
//
// If there is an error opening the file or parsing the description then the
// program will be aborted. You should only ever attempt to parse user interface
// descriptions that are shipped as part of your program.
//
// The function takes the following parameters:
//
//    - filename of user interface description file.
//
// The function returns the following values:
//
//    - builder containing the described interface.
//
func NewBuilderFromFile(filename string) *Builder {
	var _arg1 *C.gchar      // out
	var _cret *C.GtkBuilder // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_builder_new_from_file(_arg1)
	runtime.KeepAlive(filename)

	var _builder *Builder // out

	_builder = wrapBuilder(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _builder
}

// NewBuilderFromResource builds the [GtkBuilder UI definition][BUILDER-UI] at
// resource_path.
//
// If there is an error locating the resource or parsing the description, then
// the program will be aborted.
//
// The function takes the following parameters:
//
//    - resourcePath resource path.
//
// The function returns the following values:
//
//    - builder containing the described interface.
//
func NewBuilderFromResource(resourcePath string) *Builder {
	var _arg1 *C.gchar      // out
	var _cret *C.GtkBuilder // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(resourcePath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_builder_new_from_resource(_arg1)
	runtime.KeepAlive(resourcePath)

	var _builder *Builder // out

	_builder = wrapBuilder(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _builder
}

// NewBuilderFromString builds the user interface described by string (in the
// [GtkBuilder UI definition][BUILDER-UI] format).
//
// If string is NULL-terminated, then length should be -1. If length is not -1,
// then it is the length of string.
//
// If there is an error parsing string then the program will be aborted. You
// should not attempt to parse user interface description from untrusted
// sources.
//
// The function takes the following parameters:
//
//    - str: user interface (XML) description.
//    - length of string, or -1.
//
// The function returns the following values:
//
//    - builder containing the interface described by string.
//
func NewBuilderFromString(str string, length int) *Builder {
	var _arg1 *C.gchar      // out
	var _arg2 C.gssize      // out
	var _cret *C.GtkBuilder // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(length)

	_cret = C.gtk_builder_new_from_string(_arg1, _arg2)
	runtime.KeepAlive(str)
	runtime.KeepAlive(length)

	var _builder *Builder // out

	_builder = wrapBuilder(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _builder
}

// Application gets the Application associated with the builder.
//
// The Application is used for creating action proxies as requested from XML
// that the builder is loading.
//
// By default, the builder uses the default application: the one from
// g_application_get_default(). If you want to use another application for
// constructing proxies, use gtk_builder_set_application().
//
// The function returns the following values:
//
//    - application (optional) being used by the builder, or NULL.
//
func (builder *Builder) Application() *Application {
	var _arg0 *C.GtkBuilder     // out
	var _cret *C.GtkApplication // in

	_arg0 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))

	_cret = C.gtk_builder_get_application(_arg0)
	runtime.KeepAlive(builder)

	var _application *Application // out

	if _cret != nil {
		_application = wrapApplication(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _application
}

// SetApplication sets the application associated with builder.
//
// You only need this function if there is more than one #GApplication in your
// process. application cannot be NULL.
//
// The function takes the following parameters:
//
//    - application: Application.
//
func (builder *Builder) SetApplication(application *Application) {
	var _arg0 *C.GtkBuilder     // out
	var _arg1 *C.GtkApplication // out

	_arg0 = (*C.GtkBuilder)(unsafe.Pointer(coreglib.InternObject(builder).Native()))
	_arg1 = (*C.GtkApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	C.gtk_builder_set_application(_arg0, _arg1)
	runtime.KeepAlive(builder)
	runtime.KeepAlive(application)
}
