// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_CheckMenuItemClass_draw_indicator(GtkCheckMenuItem*, cairo_t*);
// extern void _gotk4_gtk3_CheckMenuItemClass_toggled(GtkCheckMenuItem*);
// extern void _gotk4_gtk3_CheckMenuItem_ConnectToggled(gpointer, guintptr);
import "C"

// glib.Type values for gtkcheckmenuitem.go.
var GTypeCheckMenuItem = externglib.Type(C.gtk_check_menu_item_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCheckMenuItem, F: marshalCheckMenuItem},
	})
}

// CheckMenuItemOverrider contains methods that are overridable.
type CheckMenuItemOverrider interface {
	// The function takes the following parameters:
	//
	DrawIndicator(cr *cairo.Context)
	// Toggled emits the CheckMenuItem::toggled signal.
	Toggled()
}

// CheckMenuItem is a menu item that maintains the state of a boolean value in
// addition to a MenuItem usual role in activating application code.
//
// A check box indicating the state of the boolean value is displayed at the
// left side of the MenuItem. Activating the MenuItem toggles the value.
//
// CSS nodes
//
//    menuitem
//    ├── check.left
//    ╰── <child>
//
// GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode with
// name check, which gets the .left or .right style class.
type CheckMenuItem struct {
	_ [0]func() // equal guard
	MenuItem
}

var (
	_ Binner              = (*CheckMenuItem)(nil)
	_ externglib.Objector = (*CheckMenuItem)(nil)
)

func classInitCheckMenuItemmer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkCheckMenuItemClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkCheckMenuItemClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ DrawIndicator(cr *cairo.Context) }); ok {
		pclass.draw_indicator = (*[0]byte)(C._gotk4_gtk3_CheckMenuItemClass_draw_indicator)
	}

	if _, ok := goval.(interface{ Toggled() }); ok {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk3_CheckMenuItemClass_toggled)
	}
}

//export _gotk4_gtk3_CheckMenuItemClass_draw_indicator
func _gotk4_gtk3_CheckMenuItemClass_draw_indicator(arg0 *C.GtkCheckMenuItem, arg1 *C.cairo_t) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ DrawIndicator(cr *cairo.Context) })

	var _cr *cairo.Context // out

	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg1)))
	C.cairo_reference(arg1)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})

	iface.DrawIndicator(_cr)
}

//export _gotk4_gtk3_CheckMenuItemClass_toggled
func _gotk4_gtk3_CheckMenuItemClass_toggled(arg0 *C.GtkCheckMenuItem) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Toggled() })

	iface.Toggled()
}

func wrapCheckMenuItem(obj *externglib.Object) *CheckMenuItem {
	return &CheckMenuItem{
		MenuItem: MenuItem{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
	}
}

func marshalCheckMenuItem(p uintptr) (interface{}, error) {
	return wrapCheckMenuItem(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk3_CheckMenuItem_ConnectToggled
func _gotk4_gtk3_CheckMenuItem_ConnectToggled(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggled: this signal is emitted when the state of the check box is
// changed.
//
// A signal handler can use gtk_check_menu_item_get_active() to discover the new
// state.
func (checkMenuItem *CheckMenuItem) ConnectToggled(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(checkMenuItem, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_CheckMenuItem_ConnectToggled), f)
}

// NewCheckMenuItem creates a new CheckMenuItem.
//
// The function returns the following values:
//
//    - checkMenuItem: new CheckMenuItem.
//
func NewCheckMenuItem() *CheckMenuItem {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_check_menu_item_new()

	var _checkMenuItem *CheckMenuItem // out

	_checkMenuItem = wrapCheckMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _checkMenuItem
}

// NewCheckMenuItemWithLabel creates a new CheckMenuItem with a label.
//
// The function takes the following parameters:
//
//    - label: string to use for the label.
//
// The function returns the following values:
//
//    - checkMenuItem: new CheckMenuItem.
//
func NewCheckMenuItemWithLabel(label string) *CheckMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_menu_item_new_with_label(_arg1)
	runtime.KeepAlive(label)

	var _checkMenuItem *CheckMenuItem // out

	_checkMenuItem = wrapCheckMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _checkMenuItem
}

// NewCheckMenuItemWithMnemonic creates a new CheckMenuItem containing a label.
// The label will be created using gtk_label_new_with_mnemonic(), so underscores
// in label indicate the mnemonic for the menu item.
//
// The function takes the following parameters:
//
//    - label: text of the button, with an underscore in front of the character.
//
// The function returns the following values:
//
//    - checkMenuItem: new CheckMenuItem.
//
func NewCheckMenuItemWithMnemonic(label string) *CheckMenuItem {
	var _arg1 *C.gchar     // out
	var _cret *C.GtkWidget // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gtk_check_menu_item_new_with_mnemonic(_arg1)
	runtime.KeepAlive(label)

	var _checkMenuItem *CheckMenuItem // out

	_checkMenuItem = wrapCheckMenuItem(externglib.Take(unsafe.Pointer(_cret)))

	return _checkMenuItem
}

// Active returns whether the check menu item is active. See
// gtk_check_menu_item_set_active ().
//
// The function returns the following values:
//
//    - ok: TRUE if the menu item is checked.
//
func (checkMenuItem *CheckMenuItem) Active() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))

	_cret = C.gtk_check_menu_item_get_active(_arg0)
	runtime.KeepAlive(checkMenuItem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DrawAsRadio returns whether check_menu_item looks like a RadioMenuItem.
//
// The function returns the following values:
//
//    - ok: whether check_menu_item looks like a RadioMenuItem.
//
func (checkMenuItem *CheckMenuItem) DrawAsRadio() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))

	_cret = C.gtk_check_menu_item_get_draw_as_radio(_arg0)
	runtime.KeepAlive(checkMenuItem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Inconsistent retrieves the value set by
// gtk_check_menu_item_set_inconsistent().
//
// The function returns the following values:
//
//    - ok: TRUE if inconsistent.
//
func (checkMenuItem *CheckMenuItem) Inconsistent() bool {
	var _arg0 *C.GtkCheckMenuItem // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))

	_cret = C.gtk_check_menu_item_get_inconsistent(_arg0)
	runtime.KeepAlive(checkMenuItem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetActive sets the active state of the menu item’s check box.
//
// The function takes the following parameters:
//
//    - isActive: boolean value indicating whether the check box is active.
//
func (checkMenuItem *CheckMenuItem) SetActive(isActive bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))
	if isActive {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_active(_arg0, _arg1)
	runtime.KeepAlive(checkMenuItem)
	runtime.KeepAlive(isActive)
}

// SetDrawAsRadio sets whether check_menu_item is drawn like a RadioMenuItem.
//
// The function takes the following parameters:
//
//    - drawAsRadio: whether check_menu_item is drawn like a RadioMenuItem.
//
func (checkMenuItem *CheckMenuItem) SetDrawAsRadio(drawAsRadio bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))
	if drawAsRadio {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_draw_as_radio(_arg0, _arg1)
	runtime.KeepAlive(checkMenuItem)
	runtime.KeepAlive(drawAsRadio)
}

// SetInconsistent: if the user has selected a range of elements (such as some
// text or spreadsheet cells) that are affected by a boolean setting, and the
// current values in that range are inconsistent, you may want to display the
// check in an “in between” state. This function turns on “in between” display.
// Normally you would turn off the inconsistent state again if the user
// explicitly selects a setting. This has to be done manually,
// gtk_check_menu_item_set_inconsistent() only affects visual appearance, it
// doesn’t affect the semantics of the widget.
//
// The function takes the following parameters:
//
//    - setting: TRUE to display an “inconsistent” third state check.
//
func (checkMenuItem *CheckMenuItem) SetInconsistent(setting bool) {
	var _arg0 *C.GtkCheckMenuItem // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_check_menu_item_set_inconsistent(_arg0, _arg1)
	runtime.KeepAlive(checkMenuItem)
	runtime.KeepAlive(setting)
}

// Toggled emits the CheckMenuItem::toggled signal.
func (checkMenuItem *CheckMenuItem) Toggled() {
	var _arg0 *C.GtkCheckMenuItem // out

	_arg0 = (*C.GtkCheckMenuItem)(unsafe.Pointer(checkMenuItem.Native()))

	C.gtk_check_menu_item_toggled(_arg0)
	runtime.KeepAlive(checkMenuItem)
}
