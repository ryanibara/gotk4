// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
// extern void _gotk4_gtk3_Range_ConnectValueChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Range_ConnectMoveSlider(gpointer, GtkScrollType, guintptr);
// extern void _gotk4_gtk3_Range_ConnectAdjustBounds(gpointer, gdouble, guintptr);
// extern void _gotk4_gtk3_RangeClass_value_changed(GtkRange*);
// extern void _gotk4_gtk3_RangeClass_move_slider(GtkRange*, GtkScrollType);
// extern void _gotk4_gtk3_RangeClass_get_range_size_request(GtkRange*, GtkOrientation, gint*, gint*);
// extern void _gotk4_gtk3_RangeClass_get_range_border(GtkRange*, GtkBorder*);
// extern void _gotk4_gtk3_RangeClass_adjust_bounds(GtkRange*, gdouble);
// extern gboolean _gotk4_gtk3_Range_ConnectChangeValue(gpointer, GtkScrollType, gdouble, guintptr);
// extern gboolean _gotk4_gtk3_RangeClass_change_value(GtkRange*, GtkScrollType, gdouble);
// gboolean _gotk4_gtk3_Range_virtual_change_value(void* fnptr, GtkRange* arg0, GtkScrollType arg1, gdouble arg2) {
//   return ((gboolean (*)(GtkRange*, GtkScrollType, gdouble))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk3_Range_virtual_adjust_bounds(void* fnptr, GtkRange* arg0, gdouble arg1) {
//   ((void (*)(GtkRange*, gdouble))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_Range_virtual_get_range_border(void* fnptr, GtkRange* arg0, GtkBorder* arg1) {
//   ((void (*)(GtkRange*, GtkBorder*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_Range_virtual_get_range_size_request(void* fnptr, GtkRange* arg0, GtkOrientation arg1, gint* arg2, gint* arg3) {
//   ((void (*)(GtkRange*, GtkOrientation, gint*, gint*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_gtk3_Range_virtual_move_slider(void* fnptr, GtkRange* arg0, GtkScrollType arg1) {
//   ((void (*)(GtkRange*, GtkScrollType))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk3_Range_virtual_value_changed(void* fnptr, GtkRange* arg0) {
//   ((void (*)(GtkRange*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeRange = coreglib.Type(C.gtk_range_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRange, F: marshalRange},
	})
}

// RangeOverrides contains methods that are overridable.
type RangeOverrides struct {
	// The function takes the following parameters:
	//
	AdjustBounds func(newValue float64)
	// The function takes the following parameters:
	//
	//    - scroll
	//    - newValue
	//
	// The function returns the following values:
	//
	ChangeValue func(scroll ScrollType, newValue float64) bool
	// The function takes the following parameters:
	//
	RangeBorder func(border_ *Border)
	// The function takes the following parameters:
	//
	//    - orientation
	//    - minimum
	//    - natural
	//
	RangeSizeRequest func(orientation Orientation, minimum, natural *int)
	// The function takes the following parameters:
	//
	MoveSlider   func(scroll ScrollType)
	ValueChanged func()
}

func defaultRangeOverrides(v *Range) RangeOverrides {
	return RangeOverrides{
		AdjustBounds:     v.adjustBounds,
		ChangeValue:      v.changeValue,
		RangeBorder:      v.rangeBorder,
		RangeSizeRequest: v.rangeSizeRequest,
		MoveSlider:       v.moveSlider,
		ValueChanged:     v.valueChanged,
	}
}

// Range is the common base class for widgets which visualize an adjustment, e.g
// Scale or Scrollbar.
//
// Apart from signals for monitoring the parameters of the adjustment, Range
// provides properties and methods for influencing the sensitivity of the
// “steppers”. It also provides properties and methods for setting a “fill
// level” on range widgets. See gtk_range_set_fill_level().
type Range struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Range)(nil)
	_ coreglib.Objector = (*Range)(nil)
)

// Ranger describes types inherited from class Range.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Ranger interface {
	coreglib.Objector
	baseRange() *Range
}

var _ Ranger = (*Range)(nil)

func init() {
	coreglib.RegisterClassInfo[*Range, *RangeClass, RangeOverrides](
		GTypeRange,
		initRangeClass,
		wrapRange,
		defaultRangeOverrides,
	)
}

func initRangeClass(gclass unsafe.Pointer, overrides RangeOverrides, classInitFunc func(*RangeClass)) {
	pclass := (*C.GtkRangeClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRange))))

	if overrides.AdjustBounds != nil {
		pclass.adjust_bounds = (*[0]byte)(C._gotk4_gtk3_RangeClass_adjust_bounds)
	}

	if overrides.ChangeValue != nil {
		pclass.change_value = (*[0]byte)(C._gotk4_gtk3_RangeClass_change_value)
	}

	if overrides.RangeBorder != nil {
		pclass.get_range_border = (*[0]byte)(C._gotk4_gtk3_RangeClass_get_range_border)
	}

	if overrides.RangeSizeRequest != nil {
		pclass.get_range_size_request = (*[0]byte)(C._gotk4_gtk3_RangeClass_get_range_size_request)
	}

	if overrides.MoveSlider != nil {
		pclass.move_slider = (*[0]byte)(C._gotk4_gtk3_RangeClass_move_slider)
	}

	if overrides.ValueChanged != nil {
		pclass.value_changed = (*[0]byte)(C._gotk4_gtk3_RangeClass_value_changed)
	}

	if classInitFunc != nil {
		class := (*RangeClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRange(obj *coreglib.Object) *Range {
	return &Range{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalRange(p uintptr) (interface{}, error) {
	return wrapRange(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (_range *Range) baseRange() *Range {
	return _range
}

// BaseRange returns the underlying base object.
func BaseRange(obj Ranger) *Range {
	return obj.baseRange()
}

// ConnectAdjustBounds is emitted before clamping a value, to give the
// application a chance to adjust the bounds.
func (_range *Range) ConnectAdjustBounds(f func(value float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "adjust-bounds", false, unsafe.Pointer(C._gotk4_gtk3_Range_ConnectAdjustBounds), f)
}

// ConnectChangeValue signal is emitted when a scroll action is performed on a
// range. It allows an application to determine the type of scroll event that
// occurred and the resultant new value. The application can handle the event
// itself and return TRUE to prevent further processing. Or, by returning FALSE,
// it can pass the event to other handlers until the default GTK+ handler is
// reached.
//
// The value parameter is unrounded. An application that overrides the
// GtkRange::change-value signal is responsible for clamping the value to the
// desired number of decimal digits; the default GTK+ handler clamps the value
// based on Range:round-digits.
func (_range *Range) ConnectChangeValue(f func(scroll ScrollType, value float64) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "change-value", false, unsafe.Pointer(C._gotk4_gtk3_Range_ConnectChangeValue), f)
}

// ConnectMoveSlider: virtual function that moves the slider. Used for
// keybindings.
func (_range *Range) ConnectMoveSlider(f func(step ScrollType)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "move-slider", false, unsafe.Pointer(C._gotk4_gtk3_Range_ConnectMoveSlider), f)
}

// ConnectValueChanged is emitted when the range value changes.
func (_range *Range) ConnectValueChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "value-changed", false, unsafe.Pointer(C._gotk4_gtk3_Range_ConnectValueChanged), f)
}

// Adjustment: get the Adjustment which is the “model” object for Range. See
// gtk_range_set_adjustment() for details. The return value does not have a
// reference added, so should not be unreferenced.
//
// The function returns the following values:
//
//    - adjustment: Adjustment.
//
func (_range *Range) Adjustment() *Adjustment {
	var _arg0 *C.GtkRange      // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_adjustment(_arg0)
	runtime.KeepAlive(_range)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// Inverted gets the value set by gtk_range_set_inverted().
//
// The function returns the following values:
//
//    - ok: TRUE if the range is inverted.
//
func (_range *Range) Inverted() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_inverted(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Value gets the current value of the range.
//
// The function returns the following values:
//
//    - gdouble: current value of the range.
//
func (_range *Range) Value() float64 {
	var _arg0 *C.GtkRange // out
	var _cret C.gdouble   // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_value(_arg0)
	runtime.KeepAlive(_range)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// SetAdjustment sets the adjustment to be used as the “model” object for this
// range widget. The adjustment indicates the current range value, the minimum
// and maximum range values, the step/page increments used for keybindings and
// scrolling, and the page size. The page size is normally 0 for Scale and
// nonzero for Scrollbar, and indicates the size of the visible area of the
// widget being scrolled. The page size affects the size of the scrollbar
// slider.
//
// The function takes the following parameters:
//
//    - adjustment: Adjustment.
//
func (_range *Range) SetAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkRange      // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	C.gtk_range_set_adjustment(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(adjustment)
}

// SetIncrements sets the step and page sizes for the range. The step size is
// used when the user clicks the Scrollbar arrows or moves Scale via arrow keys.
// The page size is used for example when moving via Page Up or Page Down keys.
//
// The function takes the following parameters:
//
//    - step size.
//    - page size.
//
func (_range *Range) SetIncrements(step, page float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gdouble   // out
	var _arg2 C.gdouble   // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.gdouble(step)
	_arg2 = C.gdouble(page)

	C.gtk_range_set_increments(_arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(step)
	runtime.KeepAlive(page)
}

// SetInverted ranges normally move from lower to higher values as the slider
// moves from top to bottom or left to right. Inverted ranges have higher values
// at the top or on the right rather than on the bottom or left.
//
// The function takes the following parameters:
//
//    - setting: TRUE to invert the range.
//
func (_range *Range) SetInverted(setting bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_inverted(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(setting)
}

// SetRange sets the allowable values in the Range, and clamps the range value
// to be between min and max. (If the range has a non-zero page size, it is
// clamped between min and max - page-size.).
//
// The function takes the following parameters:
//
//    - min: minimum range value.
//    - max: maximum range value.
//
func (_range *Range) SetRange(min, max float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gdouble   // out
	var _arg2 C.gdouble   // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.gdouble(min)
	_arg2 = C.gdouble(max)

	C.gtk_range_set_range(_arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(min)
	runtime.KeepAlive(max)
}

// SetValue sets the current value of the range; if the value is outside the
// minimum or maximum range values, it will be clamped to fit inside them. The
// range emits the Range::value-changed signal if the value changes.
//
// The function takes the following parameters:
//
//    - value: new value of the range.
//
func (_range *Range) SetValue(value float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.gdouble(value)

	C.gtk_range_set_value(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(value)
}

// The function takes the following parameters:
//
func (_range *Range) adjustBounds(newValue float64) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.adjust_bounds

	var _arg0 *C.GtkRange // out
	var _arg1 C.gdouble   // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.gdouble(newValue)

	C._gotk4_gtk3_Range_virtual_adjust_bounds(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(newValue)
}

// The function takes the following parameters:
//
//    - scroll
//    - newValue
//
// The function returns the following values:
//
func (_range *Range) changeValue(scroll ScrollType, newValue float64) bool {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.change_value

	var _arg0 *C.GtkRange     // out
	var _arg1 C.GtkScrollType // out
	var _arg2 C.gdouble       // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.GtkScrollType(scroll)
	_arg2 = C.gdouble(newValue)

	_cret = C._gotk4_gtk3_Range_virtual_change_value(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(scroll)
	runtime.KeepAlive(newValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (_range *Range) rangeBorder(border_ *Border) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.get_range_border

	var _arg0 *C.GtkRange  // out
	var _arg1 *C.GtkBorder // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = (*C.GtkBorder)(gextras.StructNative(unsafe.Pointer(border_)))

	C._gotk4_gtk3_Range_virtual_get_range_border(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(border_)
}

// The function takes the following parameters:
//
//    - orientation
//    - minimum
//    - natural
//
func (_range *Range) rangeSizeRequest(orientation Orientation, minimum, natural *int) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.get_range_size_request

	var _arg0 *C.GtkRange      // out
	var _arg1 C.GtkOrientation // out
	var _arg2 *C.gint          // out
	var _arg3 *C.gint          // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.GtkOrientation(orientation)
	_arg2 = (*C.gint)(unsafe.Pointer(minimum))
	_arg3 = (*C.gint)(unsafe.Pointer(natural))

	C._gotk4_gtk3_Range_virtual_get_range_size_request(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(orientation)
	runtime.KeepAlive(minimum)
	runtime.KeepAlive(natural)
}

// The function takes the following parameters:
//
func (_range *Range) moveSlider(scroll ScrollType) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.move_slider

	var _arg0 *C.GtkRange     // out
	var _arg1 C.GtkScrollType // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.GtkScrollType(scroll)

	C._gotk4_gtk3_Range_virtual_move_slider(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(scroll)
}

func (_range *Range) valueChanged() {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.value_changed

	var _arg0 *C.GtkRange // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	C._gotk4_gtk3_Range_virtual_value_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(_range)
}

// RangeClass: instance of this type is always passed by reference.
type RangeClass struct {
	*rangeClass
}

// rangeClass is the struct that's finalized.
type rangeClass struct {
	native *C.GtkRangeClass
}

func (r *RangeClass) ParentClass() *WidgetClass {
	valptr := &r.native.parent_class
	var _v *WidgetClass // out
	_v = (*WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

func (r *RangeClass) SliderDetail() string {
	valptr := &r.native.slider_detail
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (r *RangeClass) StepperDetail() string {
	valptr := &r.native.stepper_detail
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}
