// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk-a11y.h>
// #include <gtk/gtk.h>
// #include <gtk/gtkx.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_vbutton_box_get_type()), F: marshalVButtonBoxer},
	})
}

// VButtonBoxOverrider contains methods that are overridable.
type VButtonBoxOverrider interface {
}

type VButtonBox struct {
	_ [0]func() // equal guard
	ButtonBox
}

var (
	_ Containerer         = (*VButtonBox)(nil)
	_ externglib.Objector = (*VButtonBox)(nil)
)

func classInitVButtonBoxer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapVButtonBox(obj *externglib.Object) *VButtonBox {
	return &VButtonBox{
		ButtonBox: ButtonBox{
			Box: Box{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
				Object: obj,
				Orientable: Orientable{
					Object: obj,
				},
			},
		},
	}
}

func marshalVButtonBoxer(p uintptr) (interface{}, error) {
	return wrapVButtonBox(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewVButtonBox creates a new vertical button box.
//
// Deprecated: Use gtk_button_box_new() with GTK_ORIENTATION_VERTICAL instead.
//
// The function returns the following values:
//
//    - vButtonBox: new button box Widget.
//
func NewVButtonBox() *VButtonBox {
	var _cret *C.GtkWidget // in

	_cret = C.gtk_vbutton_box_new()

	var _vButtonBox *VButtonBox // out

	_vButtonBox = wrapVButtonBox(externglib.Take(unsafe.Pointer(_cret)))

	return _vButtonBox
}
