// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
// extern void _gotk4_gtk4_Range_ConnectValueChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_Range_ConnectMoveSlider(gpointer, GtkScrollType, guintptr);
// extern void _gotk4_gtk4_Range_ConnectAdjustBounds(gpointer, gdouble, guintptr);
// extern void _gotk4_gtk4_RangeClass_value_changed(GtkRange*);
// extern void _gotk4_gtk4_RangeClass_move_slider(GtkRange*, GtkScrollType);
// extern void _gotk4_gtk4_RangeClass_get_range_border(GtkRange*, GtkBorder*);
// extern void _gotk4_gtk4_RangeClass_adjust_bounds(GtkRange*, double);
// extern gboolean _gotk4_gtk4_Range_ConnectChangeValue(gpointer, GtkScrollType, gdouble, guintptr);
// extern gboolean _gotk4_gtk4_RangeClass_change_value(GtkRange*, GtkScrollType, double);
// gboolean _gotk4_gtk4_Range_virtual_change_value(void* fnptr, GtkRange* arg0, GtkScrollType arg1, double arg2) {
//   return ((gboolean (*)(GtkRange*, GtkScrollType, double))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gtk4_Range_virtual_adjust_bounds(void* fnptr, GtkRange* arg0, double arg1) {
//   ((void (*)(GtkRange*, double))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk4_Range_virtual_get_range_border(void* fnptr, GtkRange* arg0, GtkBorder* arg1) {
//   ((void (*)(GtkRange*, GtkBorder*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk4_Range_virtual_move_slider(void* fnptr, GtkRange* arg0, GtkScrollType arg1) {
//   ((void (*)(GtkRange*, GtkScrollType))(fnptr))(arg0, arg1);
// };
// void _gotk4_gtk4_Range_virtual_value_changed(void* fnptr, GtkRange* arg0) {
//   ((void (*)(GtkRange*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeRange = coreglib.Type(C.gtk_range_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRange, F: marshalRange},
	})
}

// RangeOverrides contains methods that are overridable.
type RangeOverrides struct {
	// The function takes the following parameters:
	//
	AdjustBounds func(newValue float64)
	// The function takes the following parameters:
	//
	//    - scroll
	//    - newValue
	//
	// The function returns the following values:
	//
	ChangeValue func(scroll ScrollType, newValue float64) bool
	// The function takes the following parameters:
	//
	RangeBorder func(border_ *Border)
	// The function takes the following parameters:
	//
	MoveSlider   func(scroll ScrollType)
	ValueChanged func()
}

func defaultRangeOverrides(v *Range) RangeOverrides {
	return RangeOverrides{
		AdjustBounds: v.adjustBounds,
		ChangeValue:  v.changeValue,
		RangeBorder:  v.rangeBorder,
		MoveSlider:   v.moveSlider,
		ValueChanged: v.valueChanged,
	}
}

// Range: GtkRange is the common base class for widgets which visualize an
// adjustment.
//
// Widgets that are derived from GtkRange include gtk.Scale and gtk.Scrollbar.
//
// Apart from signals for monitoring the parameters of the adjustment, GtkRange
// provides properties and methods for setting a “fill level” on range widgets.
// See gtk.Range.SetFillLevel().
type Range struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Range)(nil)
	_ coreglib.Objector = (*Range)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Range, *RangeClass, RangeOverrides](
		GTypeRange,
		initRangeClass,
		wrapRange,
		defaultRangeOverrides,
	)
}

func initRangeClass(gclass unsafe.Pointer, overrides RangeOverrides, classInitFunc func(*RangeClass)) {
	pclass := (*C.GtkRangeClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRange))))

	if overrides.AdjustBounds != nil {
		pclass.adjust_bounds = (*[0]byte)(C._gotk4_gtk4_RangeClass_adjust_bounds)
	}

	if overrides.ChangeValue != nil {
		pclass.change_value = (*[0]byte)(C._gotk4_gtk4_RangeClass_change_value)
	}

	if overrides.RangeBorder != nil {
		pclass.get_range_border = (*[0]byte)(C._gotk4_gtk4_RangeClass_get_range_border)
	}

	if overrides.MoveSlider != nil {
		pclass.move_slider = (*[0]byte)(C._gotk4_gtk4_RangeClass_move_slider)
	}

	if overrides.ValueChanged != nil {
		pclass.value_changed = (*[0]byte)(C._gotk4_gtk4_RangeClass_value_changed)
	}

	if classInitFunc != nil {
		class := (*RangeClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRange(obj *coreglib.Object) *Range {
	return &Range{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalRange(p uintptr) (interface{}, error) {
	return wrapRange(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectAdjustBounds is emitted before clamping a value, to give the
// application a chance to adjust the bounds.
func (_range *Range) ConnectAdjustBounds(f func(value float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "adjust-bounds", false, unsafe.Pointer(C._gotk4_gtk4_Range_ConnectAdjustBounds), f)
}

// ConnectChangeValue is emitted when a scroll action is performed on a range.
//
// It allows an application to determine the type of scroll event that occurred
// and the resultant new value. The application can handle the event itself and
// return TRUE to prevent further processing. Or, by returning FALSE, it can
// pass the event to other handlers until the default GTK handler is reached.
//
// The value parameter is unrounded. An application that overrides the
// ::change-value signal is responsible for clamping the value to the desired
// number of decimal digits; the default GTK handler clamps the value based on
// gtk.Range:round-digits.
func (_range *Range) ConnectChangeValue(f func(scroll ScrollType, value float64) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "change-value", false, unsafe.Pointer(C._gotk4_gtk4_Range_ConnectChangeValue), f)
}

// ConnectMoveSlider: virtual function that moves the slider.
//
// Used for keybindings.
func (_range *Range) ConnectMoveSlider(f func(step ScrollType)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "move-slider", false, unsafe.Pointer(C._gotk4_gtk4_Range_ConnectMoveSlider), f)
}

// ConnectValueChanged is emitted when the range value changes.
func (_range *Range) ConnectValueChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(_range, "value-changed", false, unsafe.Pointer(C._gotk4_gtk4_Range_ConnectValueChanged), f)
}

// Adjustment: get the adjustment which is the “model” object for GtkRange.
//
// The function returns the following values:
//
//    - adjustment: GtkAdjustment.
//
func (_range *Range) Adjustment() *Adjustment {
	var _arg0 *C.GtkRange      // out
	var _cret *C.GtkAdjustment // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_adjustment(_arg0)
	runtime.KeepAlive(_range)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// FillLevel gets the current position of the fill level indicator.
//
// The function returns the following values:
//
//    - gdouble: current fill level.
//
func (_range *Range) FillLevel() float64 {
	var _arg0 *C.GtkRange // out
	var _cret C.double    // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_fill_level(_arg0)
	runtime.KeepAlive(_range)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Flippable gets whether the GtkRange respects text direction.
//
// See gtk.Range.SetFlippable().
//
// The function returns the following values:
//
//    - ok: TRUE if the range is flippable.
//
func (_range *Range) Flippable() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_flippable(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Inverted gets whether the range is inverted.
//
// See gtk.Range.SetInverted().
//
// The function returns the following values:
//
//    - ok: TRUE if the range is inverted.
//
func (_range *Range) Inverted() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_inverted(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RangeRect: this function returns the area that contains the range’s trough,
// in coordinates relative to range's origin.
//
// This function is useful mainly for GtkRange subclasses.
//
// The function returns the following values:
//
//    - rangeRect: return location for the range rectangle.
//
func (_range *Range) RangeRect() *gdk.Rectangle {
	var _arg0 *C.GtkRange    // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	C.gtk_range_get_range_rect(_arg0, &_arg1)
	runtime.KeepAlive(_range)

	var _rangeRect *gdk.Rectangle // out

	_rangeRect = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rangeRect
}

// RestrictToFillLevel gets whether the range is restricted to the fill level.
//
// The function returns the following values:
//
//    - ok: TRUE if range is restricted to the fill level.
//
func (_range *Range) RestrictToFillLevel() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_restrict_to_fill_level(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RoundDigits gets the number of digits to round the value to when it changes.
//
// See gtk.Range::change-value.
//
// The function returns the following values:
//
//    - gint: number of digits to round to.
//
func (_range *Range) RoundDigits() int {
	var _arg0 *C.GtkRange // out
	var _cret C.int       // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_round_digits(_arg0)
	runtime.KeepAlive(_range)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ShowFillLevel gets whether the range displays the fill level graphically.
//
// The function returns the following values:
//
//    - ok: TRUE if range shows the fill level.
//
func (_range *Range) ShowFillLevel() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_show_fill_level(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SliderRange: this function returns sliders range along the long dimension, in
// widget->window coordinates.
//
// This function is useful mainly for GtkRange subclasses.
//
// The function returns the following values:
//
//    - sliderStart (optional): return location for the slider's start, or NULL.
//    - sliderEnd (optional): return location for the slider's end, or NULL.
//
func (_range *Range) SliderRange() (sliderStart, sliderEnd int) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.int       // in
	var _arg2 C.int       // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	C.gtk_range_get_slider_range(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(_range)

	var _sliderStart int // out
	var _sliderEnd int   // out

	_sliderStart = int(_arg1)
	_sliderEnd = int(_arg2)

	return _sliderStart, _sliderEnd
}

// SliderSizeFixed: this function is useful mainly for GtkRange subclasses.
//
// See gtk.Range.SetSliderSizeFixed().
//
// The function returns the following values:
//
//    - ok: whether the range’s slider has a fixed size.
//
func (_range *Range) SliderSizeFixed() bool {
	var _arg0 *C.GtkRange // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_slider_size_fixed(_arg0)
	runtime.KeepAlive(_range)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Value gets the current value of the range.
//
// The function returns the following values:
//
//    - gdouble: current value of the range.
//
func (_range *Range) Value() float64 {
	var _arg0 *C.GtkRange // out
	var _cret C.double    // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	_cret = C.gtk_range_get_value(_arg0)
	runtime.KeepAlive(_range)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// SetAdjustment sets the adjustment to be used as the “model” object for the
// GtkRange
//
// The adjustment indicates the current range value, the minimum and maximum
// range values, the step/page increments used for keybindings and scrolling,
// and the page size.
//
// The page size is normally 0 for GtkScale and nonzero for GtkScrollbar, and
// indicates the size of the visible area of the widget being scrolled. The page
// size affects the size of the scrollbar slider.
//
// The function takes the following parameters:
//
//    - adjustment: GtkAdjustment.
//
func (_range *Range) SetAdjustment(adjustment *Adjustment) {
	var _arg0 *C.GtkRange      // out
	var _arg1 *C.GtkAdjustment // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	C.gtk_range_set_adjustment(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(adjustment)
}

// SetFillLevel: set the new position of the fill level indicator.
//
// The “fill level” is probably best described by its most prominent use case,
// which is an indicator for the amount of pre-buffering in a streaming media
// player. In that use case, the value of the range would indicate the current
// play position, and the fill level would be the position up to which the
// file/stream has been downloaded.
//
// This amount of prebuffering can be displayed on the range’s trough and is
// themeable separately from the trough. To enable fill level display, use
// gtk.Range.SetShowFillLevel(). The range defaults to not showing the fill
// level.
//
// Additionally, it’s possible to restrict the range’s slider position to values
// which are smaller than the fill level. This is controlled by
// gtk.Range.SetRestrictToFillLevel() and is by default enabled.
//
// The function takes the following parameters:
//
//    - fillLevel: new position of the fill level indicator.
//
func (_range *Range) SetFillLevel(fillLevel float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.double    // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.double(fillLevel)

	C.gtk_range_set_fill_level(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(fillLevel)
}

// SetFlippable sets whether the GtkRange respects text direction.
//
// If a range is flippable, it will switch its direction if it is horizontal and
// its direction is GTK_TEXT_DIR_RTL.
//
// See gtk.Widget.GetDirection().
//
// The function takes the following parameters:
//
//    - flippable: TRUE to make the range flippable.
//
func (_range *Range) SetFlippable(flippable bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if flippable {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_flippable(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(flippable)
}

// SetIncrements sets the step and page sizes for the range.
//
// The step size is used when the user clicks the GtkScrollbar arrows or moves a
// GtkScale via arrow keys. The page size is used for example when moving via
// Page Up or Page Down keys.
//
// The function takes the following parameters:
//
//    - step size.
//    - page size.
//
func (_range *Range) SetIncrements(step, page float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.double    // out
	var _arg2 C.double    // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.double(step)
	_arg2 = C.double(page)

	C.gtk_range_set_increments(_arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(step)
	runtime.KeepAlive(page)
}

// SetInverted sets whether to invert the range.
//
// Ranges normally move from lower to higher values as the slider moves from top
// to bottom or left to right. Inverted ranges have higher values at the top or
// on the right rather than on the bottom or left.
//
// The function takes the following parameters:
//
//    - setting: TRUE to invert the range.
//
func (_range *Range) SetInverted(setting bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_inverted(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(setting)
}

// SetRange sets the allowable values in the GtkRange.
//
// The range value is clamped to be between min and max. (If the range has a
// non-zero page size, it is clamped between min and max - page-size.).
//
// The function takes the following parameters:
//
//    - min: minimum range value.
//    - max: maximum range value.
//
func (_range *Range) SetRange(min, max float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.double    // out
	var _arg2 C.double    // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.double(min)
	_arg2 = C.double(max)

	C.gtk_range_set_range(_arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(min)
	runtime.KeepAlive(max)
}

// SetRestrictToFillLevel sets whether the slider is restricted to the fill
// level.
//
// See gtk.Range.SetFillLevel() for a general description of the fill level
// concept.
//
// The function takes the following parameters:
//
//    - restrictToFillLevel: whether the fill level restricts slider movement.
//
func (_range *Range) SetRestrictToFillLevel(restrictToFillLevel bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if restrictToFillLevel {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_restrict_to_fill_level(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(restrictToFillLevel)
}

// SetRoundDigits sets the number of digits to round the value to when it
// changes.
//
// See gtk.Range::change-value.
//
// The function takes the following parameters:
//
//    - roundDigits: precision in digits, or -1.
//
func (_range *Range) SetRoundDigits(roundDigits int) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.int       // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.int(roundDigits)

	C.gtk_range_set_round_digits(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(roundDigits)
}

// SetShowFillLevel sets whether a graphical fill level is show on the trough.
//
// See gtk.Range.SetFillLevel() for a general description of the fill level
// concept.
//
// The function takes the following parameters:
//
//    - showFillLevel: whether a fill level indicator graphics is shown.
//
func (_range *Range) SetShowFillLevel(showFillLevel bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if showFillLevel {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_show_fill_level(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(showFillLevel)
}

// SetSliderSizeFixed sets whether the range’s slider has a fixed size, or a
// size that depends on its adjustment’s page size.
//
// This function is useful mainly for GtkRange subclasses.
//
// The function takes the following parameters:
//
//    - sizeFixed: TRUE to make the slider size constant.
//
func (_range *Range) SetSliderSizeFixed(sizeFixed bool) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.gboolean  // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	if sizeFixed {
		_arg1 = C.TRUE
	}

	C.gtk_range_set_slider_size_fixed(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(sizeFixed)
}

// SetValue sets the current value of the range.
//
// If the value is outside the minimum or maximum range values, it will be
// clamped to fit inside them. The range emits the gtk.Range::value-changed
// signal if the value changes.
//
// The function takes the following parameters:
//
//    - value: new value of the range.
//
func (_range *Range) SetValue(value float64) {
	var _arg0 *C.GtkRange // out
	var _arg1 C.double    // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.double(value)

	C.gtk_range_set_value(_arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(value)
}

// The function takes the following parameters:
//
func (_range *Range) adjustBounds(newValue float64) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.adjust_bounds

	var _arg0 *C.GtkRange // out
	var _arg1 C.double    // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.double(newValue)

	C._gotk4_gtk4_Range_virtual_adjust_bounds(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(newValue)
}

// The function takes the following parameters:
//
//    - scroll
//    - newValue
//
// The function returns the following values:
//
func (_range *Range) changeValue(scroll ScrollType, newValue float64) bool {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.change_value

	var _arg0 *C.GtkRange     // out
	var _arg1 C.GtkScrollType // out
	var _arg2 C.double        // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.GtkScrollType(scroll)
	_arg2 = C.double(newValue)

	_cret = C._gotk4_gtk4_Range_virtual_change_value(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(scroll)
	runtime.KeepAlive(newValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (_range *Range) rangeBorder(border_ *Border) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.get_range_border

	var _arg0 *C.GtkRange  // out
	var _arg1 *C.GtkBorder // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = (*C.GtkBorder)(gextras.StructNative(unsafe.Pointer(border_)))

	C._gotk4_gtk4_Range_virtual_get_range_border(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(border_)
}

// The function takes the following parameters:
//
func (_range *Range) moveSlider(scroll ScrollType) {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.move_slider

	var _arg0 *C.GtkRange     // out
	var _arg1 C.GtkScrollType // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))
	_arg1 = C.GtkScrollType(scroll)

	C._gotk4_gtk4_Range_virtual_move_slider(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(scroll)
}

func (_range *Range) valueChanged() {
	gclass := (*C.GtkRangeClass)(coreglib.PeekParentClass(_range))
	fnarg := gclass.value_changed

	var _arg0 *C.GtkRange // out

	_arg0 = (*C.GtkRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	C._gotk4_gtk4_Range_virtual_value_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(_range)
}

// RangeClass: instance of this type is always passed by reference.
type RangeClass struct {
	*rangeClass
}

// rangeClass is the struct that's finalized.
type rangeClass struct {
	native *C.GtkRangeClass
}

func (r *RangeClass) ParentClass() *WidgetClass {
	valptr := &r.native.parent_class
	var _v *WidgetClass // out
	_v = (*WidgetClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
