// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkcenterlayout.go.
var GTypeCenterLayout = coreglib.Type(C.gtk_center_layout_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCenterLayout, F: marshalCenterLayout},
	})
}

// CenterLayoutOverrider contains methods that are overridable.
type CenterLayoutOverrider interface {
}

// CenterLayout: GtkCenterLayout is a layout manager that manages up to three
// children.
//
// The start widget is allocated at the start of the layout (left in
// left-to-right locales and right in right-to-left ones), and the end widget at
// the end.
//
// The center widget is centered regarding the full width of the layout's.
type CenterLayout struct {
	_ [0]func() // equal guard
	LayoutManager
}

var (
	_ LayoutManagerer = (*CenterLayout)(nil)
)

func classInitCenterLayouter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCenterLayout(obj *coreglib.Object) *CenterLayout {
	return &CenterLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
	}
}

func marshalCenterLayout(p uintptr) (interface{}, error) {
	return wrapCenterLayout(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCenterLayout creates a new GtkCenterLayout.
//
// The function returns the following values:
//
//    - centerLayout: newly created GtkCenterLayout.
//
func NewCenterLayout() *CenterLayout {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("new_CenterLayout", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _centerLayout *CenterLayout // out

	_centerLayout = wrapCenterLayout(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _centerLayout
}

// CenterWidget returns the center widget of the layout.
//
// The function returns the following values:
//
//    - widget (optional): current center widget of self.
//
func (self *CenterLayout) CenterWidget() Widgetter {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("get_center_widget", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// EndWidget returns the end widget of the layout.
//
// The function returns the following values:
//
//    - widget (optional): current end widget of self.
//
func (self *CenterLayout) EndWidget() Widgetter {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("get_end_widget", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// StartWidget returns the start widget fo the layout.
//
// The function returns the following values:
//
//    - widget (optional): current start widget of self.
//
func (self *CenterLayout) StartWidget() Widgetter {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("get_start_widget", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// SetCenterWidget sets the new center widget of self.
//
// To remove the existing center widget, pass NULL.
//
// The function takes the following parameters:
//
//    - widget (optional): new center widget.
//
func (self *CenterLayout) SetCenterWidget(widget Widgetter) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if widget != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("set_center_widget", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// SetEndWidget sets the new end widget of self.
//
// To remove the existing center widget, pass NULL.
//
// The function takes the following parameters:
//
//    - widget (optional): new end widget.
//
func (self *CenterLayout) SetEndWidget(widget Widgetter) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if widget != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("set_end_widget", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// SetStartWidget sets the new start widget of self.
//
// To remove the existing start widget, pass NULL.
//
// The function takes the following parameters:
//
//    - widget (optional): new start widget.
//
func (self *CenterLayout) SetStartWidget(widget Widgetter) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if widget != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "CenterLayout").InvokeMethod("set_start_widget", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}
