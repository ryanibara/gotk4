// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtknative.go.
var GTypeNativeSurface = coreglib.Type(C.gtk_native_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeNativeSurface, F: marshalNativeSurface},
	})
}

// NativeSurfaceOverrider contains methods that are overridable.
type NativeSurfaceOverrider interface {
}

// NativeSurface: GtkNative is the interface implemented by all widgets that
// have their own GdkSurface.
//
// The obvious example of a GtkNative is GtkWindow.
//
// Every widget that is not itself a GtkNative is contained in one, and you can
// get it with gtk.Widget.GetNative().
//
// To get the surface of a GtkNative, use gtk.Native.GetSurface(). It is also
// possible to find the GtkNative to which a surface belongs, with
// gtk.Native().GetForSurface.
//
// In addition to a gdk.Surface, a GtkNative also provides a gsk.Renderer for
// rendering on that surface. To get the renderer, use gtk.Native.GetRenderer().
//
// This type has been renamed from Native.
//
// NativeSurface wraps an interface. This means the user can get the
// underlying type by calling Cast().
type NativeSurface struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*NativeSurface)(nil)
)

// NativeSurfacer describes NativeSurface's interface methods.
type NativeSurfacer interface {
	coreglib.Objector

	// Renderer returns the renderer that is used for this GtkNative.
	Renderer() gsk.Rendererer
	// Surface returns the surface of this GtkNative.
	Surface() gdk.Surfacer
	// SurfaceTransform retrieves the surface transform of self.
	SurfaceTransform() (x float64, y float64)
	// Realize realizes a GtkNative.
	Realize()
	// Unrealize unrealizes a GtkNative.
	Unrealize()
}

var _ NativeSurfacer = (*NativeSurface)(nil)

func ifaceInitNativeSurfacer(gifacePtr, data C.gpointer) {
}

func wrapNativeSurface(obj *coreglib.Object) *NativeSurface {
	return &NativeSurface{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalNativeSurface(p uintptr) (interface{}, error) {
	return wrapNativeSurface(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Renderer returns the renderer that is used for this GtkNative.
//
// The function returns the following values:
//
//    - renderer for self.
//
func (self *NativeSurface) Renderer() gsk.Rendererer {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _renderer gsk.Rendererer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gsk.Rendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gsk.Rendererer)
			return ok
		})
		rv, ok := casted.(gsk.Rendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gsk.Rendererer")
		}
		_renderer = rv
	}

	return _renderer
}

// Surface returns the surface of this GtkNative.
//
// The function returns the following values:
//
//    - surface of self.
//
func (self *NativeSurface) Surface() gdk.Surfacer {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _surface gdk.Surfacer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Surfacer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Surfacer)
			return ok
		})
		rv, ok := casted.(gdk.Surfacer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Surfacer")
		}
		_surface = rv
	}

	return _surface
}

// SurfaceTransform retrieves the surface transform of self.
//
// This is the translation from self's surface coordinates into self's widget
// coordinates.
//
// The function returns the following values:
//
//    - x: return location for the x coordinate.
//    - y: return location for the y coordinate.
//
func (self *NativeSurface) SurfaceTransform() (x float64, y float64) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument
	var _arg0 *C.void // out
	var _out0 *C.void // in
	var _out1 *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	runtime.KeepAlive(self)

	var _x float64 // out
	var _y float64 // out
	_out0 = *(**C.void)(unsafe.Pointer(&_outs[0]))
	_out1 = *(**C.void)(unsafe.Pointer(&_outs[1]))

	_x = *(*float64)(unsafe.Pointer(_out0))
	_y = *(*float64)(unsafe.Pointer(_out1))

	return _x, _y
}

// Realize realizes a GtkNative.
//
// This should only be used by subclasses.
func (self *NativeSurface) Realize() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	runtime.KeepAlive(self)
}

// Unrealize unrealizes a GtkNative.
//
// This should only be used by subclasses.
func (self *NativeSurface) Unrealize() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	runtime.KeepAlive(self)
}

// NativeSurfaceGetForSurface finds the GtkNative associated with the surface.
//
// The function takes the following parameters:
//
//    - surface: GdkSurface.
//
// The function returns the following values:
//
//    - native: GtkNative that is associated with surface.
//
func NativeSurfaceGetForSurface(surface gdk.Surfacer) *NativeSurface {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(surface).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "get_for_surface").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(surface)

	var _native *NativeSurface // out

	_native = wrapNativeSurface(coreglib.Take(unsafe.Pointer(_cret)))

	return _native
}
