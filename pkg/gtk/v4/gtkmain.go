// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// PRIORITY_RESIZE: use this priority for functionality related to size
// allocation.
//
// It is used internally by GTK+ to compute the sizes of widgets. This priority
// is higher than GDK_PRIORITY_REDRAW to avoid resizing a widget which was just
// redrawn.
const PRIORITY_RESIZE = 110

// DisableSetlocale prevents gtk_init and gtk_init_check from automatically
// calling setlocale (LC_ALL, "").
//
// You would want to use this function if you wanted to set the locale for your
// program to something other than the user’s locale, or if you wanted to set
// different values for different locale categories.
//
// Most programs should not need to call this function.
func DisableSetlocale() {
	_info := girepository.MustFind("Gtk", "disable_setlocale")
	_info.InvokeFunction(nil, nil)
}

// GetDefaultLanguage returns the Language for the default language currently in
// effect. (Note that this can change over the life of an application.) The
// default language is derived from the current locale. It determines, for
// example, whether GTK uses the right-to-left or left-to-right text direction.
//
// This function is equivalent to pango_language_get_default(). See that
// function for details.
//
// The function returns the following values:
//
//    - language: default language as a Language, must not be freed.
//
func GetDefaultLanguage() *pango.Language {
	_info := girepository.MustFind("Gtk", "get_default_language")
	_gret := _info.InvokeFunction(nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _language *pango.Language // out

	_language = (*pango.Language)(gextras.NewStructNative(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _language
}

// Init: call this function before using any other GTK functions in your GUI
// applications. It will initialize everything needed to operate the toolkit and
// parses some standard command line options.
//
// If you are using Application, you don't have to call gtk_init() or
// gtk_init_check(); the #GApplication::startup handler does it for you.
//
// This function will terminate your program if it was unable to initialize the
// windowing system for some reason. If you want your program to fall back to a
// textual interface you want to call gtk_init_check() instead.
//
// GTK calls signal (SIGPIPE, SIG_IGN) during initialization, to ignore SIGPIPE
// signals, since these are almost never wanted in graphical applications. If
// you do need to handle SIGPIPE for some reason, reset the handler after
// gtk_init(), but notice that other libraries (e.g. libdbus or gvfs) might do
// similar things.
func Init() {
	_info := girepository.MustFind("Gtk", "init")
	_info.InvokeFunction(nil, nil)
}

// InitCheck: this function does the same work as gtk_init() with only a single
// change: It does not terminate the program if the windowing system can’t be
// initialized. Instead it returns FALSE on failure.
//
// This way the application can fall back to some other means of communication
// with the user - for example a curses or command line interface.
//
// The function returns the following values:
//
//    - ok: TRUE if the windowing system has been successfully initialized, FALSE
//      otherwise.
//
func InitCheck() bool {
	_info := girepository.MustFind("Gtk", "init_check")
	_gret := _info.InvokeFunction(nil, nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsInitialized: use this function to check if GTK has been initialized with
// gtk_init() or gtk_init_check().
//
// The function returns the following values:
//
//    - ok: initialization status.
//
func IsInitialized() bool {
	_info := girepository.MustFind("Gtk", "is_initialized")
	_gret := _info.InvokeFunction(nil, nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
