// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeEditableLabel returns the GType for the type EditableLabel.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeEditableLabel() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "EditableLabel").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalEditableLabel)
	return gtype
}

// EditableLabelOverrider contains methods that are overridable.
type EditableLabelOverrider interface {
}

// EditableLabel: GtkEditableLabel is a label that allows users to edit the text
// by switching to an “edit mode”.
//
// !An example GtkEditableLabel (editable-label.png)
//
// GtkEditableLabel does not have API of its own, but it implements the
// gtk.Editable interface.
//
// The default bindings for activating the edit mode is to click or press the
// Enter key. The default bindings for leaving the edit mode are the Enter key
// (to save the results) or the Escape key (to cancel the editing).
//
// CSS nodes
//
//    editablelabel[.editing]
//    ╰── stack
//        ├── label
//        ╰── text
//
//
// GtkEditableLabel has a main node with the name editablelabel. When the entry
// is in editing mode, it gets the .editing style class.
//
// For all the subnodes added to the text node in various situations, see
// gtk.Text.
type EditableLabel struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Editable
}

var (
	_ Widgetter         = (*EditableLabel)(nil)
	_ coreglib.Objector = (*EditableLabel)(nil)
)

func classInitEditableLabeller(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapEditableLabel(obj *coreglib.Object) *EditableLabel {
	return &EditableLabel{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Editable: Editable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalEditableLabel(p uintptr) (interface{}, error) {
	return wrapEditableLabel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewEditableLabel creates a new GtkEditableLabel widget.
//
// The function takes the following parameters:
//
//    - str: text for the label.
//
// The function returns the following values:
//
//    - editableLabel: new GtkEditableLabel.
//
func NewEditableLabel(str string) *EditableLabel {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_args[0]))

	_info := girepository.MustFind("Gtk", "EditableLabel")
	_gret := _info.InvokeClassMethod("new_EditableLabel", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(str)

	var _editableLabel *EditableLabel // out

	_editableLabel = wrapEditableLabel(coreglib.Take(unsafe.Pointer(_cret)))

	return _editableLabel
}

// Editing returns whether the label is currently in “editing mode”.
//
// The function returns the following values:
//
//    - ok: TRUE if self is currently in editing mode.
//
func (self *EditableLabel) Editing() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_info := girepository.MustFind("Gtk", "EditableLabel")
	_gret := _info.InvokeClassMethod("get_editing", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// StartEditing switches the label into “editing mode”.
func (self *EditableLabel) StartEditing() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_info := girepository.MustFind("Gtk", "EditableLabel")
	_info.InvokeClassMethod("start_editing", _args[:], nil)

	runtime.KeepAlive(self)
}

// StopEditing switches the label out of “editing mode”.
//
// If commit is TRUE, the resulting text is kept as the gtk.Editable:text
// property value, otherwise the resulting text is discarded and the label will
// keep its previous gtk.Editable:text property value.
//
// The function takes the following parameters:
//
//    - commit: whether to set the edited text on the label.
//
func (self *EditableLabel) StopEditing(commit bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if commit {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "EditableLabel")
	_info.InvokeClassMethod("stop_editing", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(commit)
}
