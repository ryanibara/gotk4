// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk4_CheckButtonClass_activate(void*);
// extern void _gotk4_gtk4_CheckButtonClass_toggled(void*);
// extern void _gotk4_gtk4_CheckButton_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk4_CheckButton_ConnectToggled(gpointer, guintptr);
import "C"

// glib.Type values for gtkcheckbutton.go.
var GTypeCheckButton = coreglib.Type(C.gtk_check_button_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCheckButton, F: marshalCheckButton},
	})
}

// CheckButtonOverrider contains methods that are overridable.
type CheckButtonOverrider interface {
	Activate()
	Toggled()
}

// CheckButton: GtkCheckButton places a label next to an indicator.
//
// !Example GtkCheckButtons (check-button.png)
//
// A GtkCheckButton is created by calling either gtk.CheckButton.New or
// gtk.CheckButton.NewWithLabel.
//
// The state of a GtkCheckButton can be set specifically using
// gtk.CheckButton.SetActive(), and retrieved using gtk.CheckButton.GetActive().
//
//
// Inconsistent state
//
// In addition to "on" and "off", check buttons can be an "in between" state
// that is neither on nor off. This can be used e.g. when the user has selected
// a range of elements (such as some text or spreadsheet cells) that are
// affected by a check button, and the current values in that range are
// inconsistent.
//
// To set a GtkCheckButton to inconsistent state, use
// gtk.CheckButton.SetInconsistent().
//
//
// Grouping
//
// Check buttons can be grouped together, to form mutually exclusive groups -
// only one of the buttons can be toggled at a time, and toggling another one
// will switch the currently toggled one off.
//
// Grouped check buttons use a different indicator, and are commonly referred to
// as *radio buttons*.
//
// !Example GtkCheckButtons (radio-button.png)
//
// To add a GtkCheckButton to a group, use gtk.CheckButton.SetGroup().
//
// CSS nodes
//
//    checkbutton[.text-button]
//    ├── check
//    ╰── [label]
//
//
// A GtkCheckButton has a main node with name checkbutton. If the
// gtk.CheckButton:label property is set, it contains a label child. The
// indicator node is named check when no group is set, and radio if the
// checkbutton is grouped together with other checkbuttons.
//
//
// Accessibility
//
// GtkCheckButton uses the GTK_ACCESSIBLE_ROLE_CHECKBOX role.
type CheckButton struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Actionable
}

var (
	_ Widgetter         = (*CheckButton)(nil)
	_ coreglib.Objector = (*CheckButton)(nil)
)

func classInitCheckButtonner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkCheckButtonClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkCheckButtonClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Activate() }); ok {
		pclass.activate = (*[0]byte)(C._gotk4_gtk4_CheckButtonClass_activate)
	}

	if _, ok := goval.(interface{ Toggled() }); ok {
		pclass.toggled = (*[0]byte)(C._gotk4_gtk4_CheckButtonClass_toggled)
	}
}

//export _gotk4_gtk4_CheckButtonClass_activate
func _gotk4_gtk4_CheckButtonClass_activate(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Activate() })

	iface.Activate()
}

//export _gotk4_gtk4_CheckButtonClass_toggled
func _gotk4_gtk4_CheckButtonClass_toggled(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Toggled() })

	iface.Toggled()
}

func wrapCheckButton(obj *coreglib.Object) *CheckButton {
	return &CheckButton{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalCheckButton(p uintptr) (interface{}, error) {
	return wrapCheckButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_CheckButton_ConnectActivate
func _gotk4_gtk4_CheckButton_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate is emitted to when the check button is activated.
//
// The ::activate signal on GtkCheckButton is an action signal and emitting it
// causes the button to animate press then release.
//
// Applications should never connect to this signal, but use the
// gtk.CheckButton::toggled signal.
func (self *CheckButton) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "activate", false, unsafe.Pointer(C._gotk4_gtk4_CheckButton_ConnectActivate), f)
}

//export _gotk4_gtk4_CheckButton_ConnectToggled
func _gotk4_gtk4_CheckButton_ConnectToggled(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggled is emitted when the buttons's gtk.CheckButton:active property
// changes.
func (self *CheckButton) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "toggled", false, unsafe.Pointer(C._gotk4_gtk4_CheckButton_ConnectToggled), f)
}

// NewCheckButton creates a new GtkCheckButton.
//
// The function returns the following values:
//
//    - checkButton: new GtkCheckButton.
//
func NewCheckButton() *CheckButton {
	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("new_CheckButton", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// NewCheckButtonWithLabel creates a new GtkCheckButton with the given text.
//
// The function takes the following parameters:
//
//    - label (optional): text for the check button.
//
// The function returns the following values:
//
//    - checkButton: new GtkCheckButton.
//
func NewCheckButtonWithLabel(label string) *CheckButton {
	var _args [1]girepository.Argument

	if label != "" {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_args[0]))
	}

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("new_CheckButton_with_label", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(label)

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// NewCheckButtonWithMnemonic creates a new GtkCheckButton with the given text
// and a mnemonic.
//
// The function takes the following parameters:
//
//    - label (optional): text of the button, with an underscore in front of the
//      mnemonic character.
//
// The function returns the following values:
//
//    - checkButton: new GtkCheckButton.
//
func NewCheckButtonWithMnemonic(label string) *CheckButton {
	var _args [1]girepository.Argument

	if label != "" {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_args[0]))
	}

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("new_CheckButton_with_mnemonic", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(label)

	var _checkButton *CheckButton // out

	_checkButton = wrapCheckButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _checkButton
}

// Active returns whether the check button is active.
//
// The function returns the following values:
//
//    - ok: whether the check button is active.
//
func (self *CheckButton) Active() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("get_active", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Inconsistent returns whether the check button is in an inconsistent state.
//
// The function returns the following values:
//
//    - ok: TRUE if check_button is currently in an inconsistent state.
//
func (checkButton *CheckButton) Inconsistent() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(checkButton).Native()))

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("get_inconsistent", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(checkButton)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Label returns the label of the check button.
//
// The function returns the following values:
//
//    - utf8 (optional): label self shows next to the indicator. If no label is
//      shown, NULL will be returned.
//
func (self *CheckButton) Label() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("get_label", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// UseUnderline returns whether underlines in the label indicate mnemonics.
//
// The function returns the following values:
//
//    - ok: value of the gtk.CheckButton:use-underline property. See
//      gtk.CheckButton.SetUseUnderline() for details on how to set a new value.
//
func (self *CheckButton) UseUnderline() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gtk", "CheckButton").InvokeMethod("get_use_underline", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetActive changes the check buttons active state.
//
// The function takes the following parameters:
//
//    - setting: new value to set.
//
func (self *CheckButton) SetActive(setting bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if setting {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "CheckButton").InvokeMethod("set_active", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(setting)
}

// SetGroup adds self to the group of group.
//
// In a group of multiple check buttons, only one button can be active at a
// time. The behavior of a checkbutton in a group is also commonly known as a
// *radio button*.
//
// Setting the group of a check button also changes the css name of the
// indicator widget's CSS node to 'radio'.
//
// Setting up groups in a cycle leads to undefined behavior.
//
// Note that the same effect can be achieved via the gtk.Actionable API, by
// using the same action with parameter type and state type 's' for all buttons
// in the group, and giving each button its own target value.
//
// The function takes the following parameters:
//
//    - group (optional): another GtkCheckButton to form a group with.
//
func (self *CheckButton) SetGroup(group *CheckButton) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if group != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(group).Native()))
	}

	girepository.MustFind("Gtk", "CheckButton").InvokeMethod("set_group", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(group)
}

// SetInconsistent sets the GtkCheckButton to inconsistent state.
//
// You shoud turn off the inconsistent state again if the user checks the check
// button. This has to be done manually.
//
// The function takes the following parameters:
//
//    - inconsistent: TRUE if state is inconsistent.
//
func (checkButton *CheckButton) SetInconsistent(inconsistent bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(checkButton).Native()))
	if inconsistent {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "CheckButton").InvokeMethod("set_inconsistent", _args[:], nil)

	runtime.KeepAlive(checkButton)
	runtime.KeepAlive(inconsistent)
}

// SetLabel sets the text of self.
//
// If gtk.CheckButton:use-underline is TRUE, an underscore in label is
// interpreted as mnemonic indicator, see gtk.CheckButton.SetUseUnderline() for
// details on this behavior.
//
// The function takes the following parameters:
//
//    - label (optional): text shown next to the indicator, or NULL to show no
//      text.
//
func (self *CheckButton) SetLabel(label string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if label != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_args[1]))
	}

	girepository.MustFind("Gtk", "CheckButton").InvokeMethod("set_label", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(label)
}

// SetUseUnderline sets whether underlines in the label indicate mnemonics.
//
// If setting is TRUE, an underscore character in self's label indicates a
// mnemonic accelerator key. This behavior is similar to
// gtk.Label:use-underline.
//
// The function takes the following parameters:
//
//    - setting: new value to set.
//
func (self *CheckButton) SetUseUnderline(setting bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if setting {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "CheckButton").InvokeMethod("set_use_underline", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(setting)
}
