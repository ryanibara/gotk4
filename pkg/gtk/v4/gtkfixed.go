// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkfixed.go.
var GTypeFixed = coreglib.Type(C.gtk_fixed_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFixed, F: marshalFixed},
	})
}

// FixedOverrider contains methods that are overridable.
type FixedOverrider interface {
}

// Fixed: GtkFixed places its child widgets at fixed positions and with fixed
// sizes.
//
// GtkFixed performs no automatic layout management.
//
// For most applications, you should not use this container! It keeps you from
// having to learn about the other GTK containers, but it results in broken
// applications. With GtkFixed, the following things will result in truncated
// text, overlapping widgets, and other display bugs:
//
// - Themes, which may change widget sizes.
//
// - Fonts other than the one you used to write the app will of course change
// the size of widgets containing text; keep in mind that users may use a larger
// font because of difficulty reading the default, or they may be using a
// different OS that provides different fonts.
//
// - Translation of text into other languages changes its size. Also, display of
// non-English text will use a different font in many cases.
//
// In addition, GtkFixed does not pay attention to text direction and thus may
// produce unwanted results if your app is run under right-to-left languages
// such as Hebrew or Arabic. That is: normally GTK will order containers
// appropriately for the text direction, e.g. to put labels to the right of the
// thing they label when using an RTL language, but it canâ€™t do that with
// GtkFixed. So if you need to reorder widgets depending on the text direction,
// you would need to manually detect it and adjust child positions accordingly.
//
// Finally, fixed positioning makes it kind of annoying to add/remove UI
// elements, since you have to reposition all the other elements. This is a
// long-term maintenance problem for your application.
//
// If you know none of these things are an issue for your application, and
// prefer the simplicity of GtkFixed, by all means use the widget. But you
// should be aware of the tradeoffs.
type Fixed struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Fixed)(nil)
)

func classInitFixedder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapFixed(obj *coreglib.Object) *Fixed {
	return &Fixed{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalFixed(p uintptr) (interface{}, error) {
	return wrapFixed(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFixed creates a new GtkFixed.
//
// The function returns the following values:
//
//    - fixed: new GtkFixed.
//
func NewFixed() *Fixed {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "Fixed").InvokeMethod("new_Fixed", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _fixed *Fixed // out

	_fixed = wrapFixed(coreglib.Take(unsafe.Pointer(_cret)))

	return _fixed
}

// ChildTransform retrieves the transformation for widget set using
// gtk_fixed_set_child_transform().
//
// The function takes the following parameters:
//
//    - widget: GtkWidget, child of fixed.
//
// The function returns the following values:
//
//    - transform (optional): GskTransform or NULL in case no transform has been
//      set on widget.
//
func (fixed *Fixed) ChildTransform(widget Widgetter) *gsk.Transform {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fixed).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**Fixed)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Fixed").InvokeMethod("get_child_transform", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fixed)
	runtime.KeepAlive(widget)

	var _transform *gsk.Transform // out

	if _cret != nil {
		_transform = (*gsk.Transform)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.gsk_transform_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_transform)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gsk_transform_unref((*C.GskTransform)(intern.C))
			},
		)
	}

	return _transform
}

// Remove removes a child from fixed.
//
// The function takes the following parameters:
//
//    - widget: child widget to remove.
//
func (fixed *Fixed) Remove(widget Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fixed).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**Fixed)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Fixed").InvokeMethod("remove", args[:], nil)

	runtime.KeepAlive(fixed)
	runtime.KeepAlive(widget)
}

// SetChildTransform sets the transformation for widget.
//
// This is a convenience function that retrieves the gtk.FixedLayoutChild
// instance associated to widget and calls gtk.FixedLayoutChild.SetTransform().
//
// The function takes the following parameters:
//
//    - widget: GtkWidget, child of fixed.
//    - transform (optional): transformation assigned to widget or NULL to reset
//      widget's transform.
//
func (fixed *Fixed) SetChildTransform(widget Widgetter, transform *gsk.Transform) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(fixed).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	if transform != nil {
		_arg2 = (*C.void)(gextras.StructNative(unsafe.Pointer(transform)))
	}
	*(**Fixed)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Fixed").InvokeMethod("set_child_transform", args[:], nil)

	runtime.KeepAlive(fixed)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(transform)
}
