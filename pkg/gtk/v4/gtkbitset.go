// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// BitsetIter: opaque, stack-allocated struct for iterating over the elements of
// a GtkBitset.
//
// Before a GtkBitsetIter can be used, it needs to be initialized with
// gtk.BitsetIter().InitFirst, gtk.BitsetIter().InitLast or
// gtk.BitsetIter().InitAt.
//
// An instance of this type is always passed by reference.
type BitsetIter struct {
	*bitsetIter
}

// bitsetIter is the struct that's finalized.
type bitsetIter struct {
	native *C.GtkBitsetIter
}

// Value gets the current value that iter points to.
//
// If iter is not valid and gtk.BitsetIter.IsValid() returns FALSE, this
// function returns 0.
//
// The function returns the following values:
//
//    - guint: current value pointer to by iter.
//
func (iter *BitsetIter) Value() uint32 {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.guint // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	*(**BitsetIter)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iter)

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// IsValid checks if iter points to a valid value.
//
// The function returns the following values:
//
//    - ok: TRUE if iter points to a valid value.
//
func (iter *BitsetIter) IsValid() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	*(**BitsetIter)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
