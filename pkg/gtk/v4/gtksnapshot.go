// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/diamondburned/gotk4/pkg/graphene"
	"github.com/diamondburned/gotk4/pkg/gsk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// glib.Type values for gtksnapshot.go.
var GTypeSnapshot = externglib.Type(C.gtk_snapshot_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSnapshot, F: marshalSnapshot},
	})
}

// SnapshotOverrider contains methods that are overridable.
type SnapshotOverrider interface {
}

// Snapshot: GtkSnapshot assists in creating GskRenderNodes for widgets.
//
// It functions in a similar way to a cairo context, and maintains a stack of
// render nodes and their associated transformations.
//
// The node at the top of the stack is the the one that gtk_snapshot_append_…
// functions operate on. Use the gtk_snapshot_push_… functions and
// gtk_snapshot_pop() to change the current node.
//
// The typical way to obtain a GtkSnapshot object is as an argument to the
// GtkWidgetClass.snapshot() vfunc. If you need to create your own GtkSnapshot,
// use gtk.Snapshot.New.
type Snapshot struct {
	_ [0]func() // equal guard
	gdk.Snapshot
}

var (
	_ gdk.Snapshotter = (*Snapshot)(nil)
)

func classInitSnapshotter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSnapshot(obj *externglib.Object) *Snapshot {
	return &Snapshot{
		Snapshot: gdk.Snapshot{
			Object: obj,
		},
	}
}

func marshalSnapshot(p uintptr) (interface{}, error) {
	return wrapSnapshot(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSnapshot creates a new GtkSnapshot.
//
// The function returns the following values:
//
//    - snapshot: newly-allocated GtkSnapshot.
//
func NewSnapshot() *Snapshot {
	var _cret *C.GtkSnapshot // in

	_cret = C.gtk_snapshot_new()

	var _snapshot *Snapshot // out

	_snapshot = wrapSnapshot(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _snapshot
}

// AppendBorder appends a stroked border rectangle inside the given outline.
//
// The four sides of the border can have different widths and colors.
//
// The function takes the following parameters:
//
//    - outline: GskRoundedRect describing the outline of the border.
//    - borderWidth: stroke width of the border on the top, right, bottom and
//      left side respectively.
//    - borderColor: color used on the top, right, bottom and left side.
//
func (snapshot *Snapshot) AppendBorder(outline *gsk.RoundedRect, borderWidth [4]float32, borderColor [4]gdk.RGBA) {
	var _arg0 *C.GtkSnapshot    // out
	var _arg1 *C.GskRoundedRect // out
	var _arg2 *C.float          // out
	var _arg3 *C.GdkRGBA        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskRoundedRect)(gextras.StructNative(unsafe.Pointer(outline)))
	_arg2 = (*C.float)(unsafe.Pointer(&borderWidth))
	{
		var out [4]C.GdkRGBA
		_arg3 = &out[0]
		for i := 0; i < 4; i++ {
			out[i] = *(*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer((&borderColor[i]))))
		}
	}

	C.gtk_snapshot_append_border(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(outline)
	runtime.KeepAlive(borderWidth)
	runtime.KeepAlive(borderColor)
}

// AppendCairo creates a new GskCairoNode and appends it to the current render
// node of snapshot, without changing the current node.
//
// The function takes the following parameters:
//
//    - bounds for the new node.
//
// The function returns the following values:
//
//    - context: cairo_t suitable for drawing the contents of the newly created
//      render node.
//
func (snapshot *Snapshot) AppendCairo(bounds *graphene.Rect) *cairo.Context {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.graphene_rect_t // out
	var _cret *C.cairo_t         // in

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	_cret = C.gtk_snapshot_append_cairo(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)

	var _context *cairo.Context // out

	_context = cairo.WrapContext(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_context, func(v *cairo.Context) {
		C.cairo_destroy((*C.cairo_t)(unsafe.Pointer(v.Native())))
	})

	return _context
}

// AppendColor creates a new render node drawing the color into the given bounds
// and appends it to the current render node of snapshot.
//
// You should try to avoid calling this function if color is transparent.
//
// The function takes the following parameters:
//
//    - color: GdkRGBA to draw.
//    - bounds for the new node.
//
func (snapshot *Snapshot) AppendColor(color *gdk.RGBA, bounds *graphene.Rect) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GdkRGBA         // out
	var _arg2 *C.graphene_rect_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(color)))
	_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	C.gtk_snapshot_append_color(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(color)
	runtime.KeepAlive(bounds)
}

// AppendConicGradient appends a conic gradient node with the given stops to
// snapshot.
//
// The function takes the following parameters:
//
//    - bounds: rectangle to render the gradient into.
//    - center point of the conic gradient.
//    - rotation: clockwise rotation in degrees of the starting angle. 0 means
//      the starting angle is the top.
//    - stops: pointer to an array of GskColorStop defining the gradient.
//
func (snapshot *Snapshot) AppendConicGradient(bounds *graphene.Rect, center *graphene.Point, rotation float32, stops []gsk.ColorStop) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_rect_t  // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 C.float             // out
	var _arg4 *C.GskColorStop     // out
	var _arg5 C.gsize

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg2 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(center)))
	_arg3 = C.float(rotation)
	_arg5 = (C.gsize)(len(stops))
	_arg4 = (*C.GskColorStop)(C.calloc(C.size_t(len(stops)), C.size_t(C.sizeof_GskColorStop)))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice((*C.GskColorStop)(_arg4), len(stops))
		for i := range stops {
			out[i] = *(*C.GskColorStop)(gextras.StructNative(unsafe.Pointer((&stops[i]))))
		}
	}

	C.gtk_snapshot_append_conic_gradient(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(center)
	runtime.KeepAlive(rotation)
	runtime.KeepAlive(stops)
}

// AppendInsetShadow appends an inset shadow into the box given by outline.
//
// The function takes the following parameters:
//
//    - outline of the region surrounded by shadow.
//    - color of the shadow.
//    - dx: horizontal offset of shadow.
//    - dy: vertical offset of shadow.
//    - spread: how far the shadow spreads towards the inside.
//    - blurRadius: how much blur to apply to the shadow.
//
func (snapshot *Snapshot) AppendInsetShadow(outline *gsk.RoundedRect, color *gdk.RGBA, dx, dy, spread, blurRadius float32) {
	var _arg0 *C.GtkSnapshot    // out
	var _arg1 *C.GskRoundedRect // out
	var _arg2 *C.GdkRGBA        // out
	var _arg3 C.float           // out
	var _arg4 C.float           // out
	var _arg5 C.float           // out
	var _arg6 C.float           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskRoundedRect)(gextras.StructNative(unsafe.Pointer(outline)))
	_arg2 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(color)))
	_arg3 = C.float(dx)
	_arg4 = C.float(dy)
	_arg5 = C.float(spread)
	_arg6 = C.float(blurRadius)

	C.gtk_snapshot_append_inset_shadow(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(outline)
	runtime.KeepAlive(color)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
	runtime.KeepAlive(spread)
	runtime.KeepAlive(blurRadius)
}

// The function takes the following parameters:
//
//    - layout
//    - color
//
func (snapshot *Snapshot) AppendLayout(layout *pango.Layout, color *gdk.RGBA) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 *C.PangoLayout // out
	var _arg2 *C.GdkRGBA     // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg2 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(color)))

	C.gtk_snapshot_append_layout(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(layout)
	runtime.KeepAlive(color)
}

// AppendLinearGradient appends a linear gradient node with the given stops to
// snapshot.
//
// The function takes the following parameters:
//
//    - bounds: rectangle to render the linear gradient into.
//    - startPoint: point at which the linear gradient will begin.
//    - endPoint: point at which the linear gradient will finish.
//    - stops: pointer to an array of GskColorStop defining the gradient.
//
func (snapshot *Snapshot) AppendLinearGradient(bounds *graphene.Rect, startPoint, endPoint *graphene.Point, stops []gsk.ColorStop) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_rect_t  // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 *C.graphene_point_t // out
	var _arg4 *C.GskColorStop     // out
	var _arg5 C.gsize

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg2 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(startPoint)))
	_arg3 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(endPoint)))
	_arg5 = (C.gsize)(len(stops))
	_arg4 = (*C.GskColorStop)(C.calloc(C.size_t(len(stops)), C.size_t(C.sizeof_GskColorStop)))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice((*C.GskColorStop)(_arg4), len(stops))
		for i := range stops {
			out[i] = *(*C.GskColorStop)(gextras.StructNative(unsafe.Pointer((&stops[i]))))
		}
	}

	C.gtk_snapshot_append_linear_gradient(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(startPoint)
	runtime.KeepAlive(endPoint)
	runtime.KeepAlive(stops)
}

// AppendNode appends node to the current render node of snapshot, without
// changing the current node.
//
// If snapshot does not have a current node yet, node will become the initial
// node.
//
// The function takes the following parameters:
//
//    - node: RenderNode.
//
func (snapshot *Snapshot) AppendNode(node gsk.RenderNoder) {
	var _arg0 *C.GtkSnapshot   // out
	var _arg1 *C.GskRenderNode // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskRenderNode)(unsafe.Pointer(node.Native()))

	C.gtk_snapshot_append_node(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(node)
}

// AppendOutsetShadow appends an outset shadow node around the box given by
// outline.
//
// The function takes the following parameters:
//
//    - outline of the region surrounded by shadow.
//    - color of the shadow.
//    - dx: horizontal offset of shadow.
//    - dy: vertical offset of shadow.
//    - spread: how far the shadow spreads towards the outside.
//    - blurRadius: how much blur to apply to the shadow.
//
func (snapshot *Snapshot) AppendOutsetShadow(outline *gsk.RoundedRect, color *gdk.RGBA, dx, dy, spread, blurRadius float32) {
	var _arg0 *C.GtkSnapshot    // out
	var _arg1 *C.GskRoundedRect // out
	var _arg2 *C.GdkRGBA        // out
	var _arg3 C.float           // out
	var _arg4 C.float           // out
	var _arg5 C.float           // out
	var _arg6 C.float           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskRoundedRect)(gextras.StructNative(unsafe.Pointer(outline)))
	_arg2 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(color)))
	_arg3 = C.float(dx)
	_arg4 = C.float(dy)
	_arg5 = C.float(spread)
	_arg6 = C.float(blurRadius)

	C.gtk_snapshot_append_outset_shadow(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(outline)
	runtime.KeepAlive(color)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
	runtime.KeepAlive(spread)
	runtime.KeepAlive(blurRadius)
}

// AppendRadialGradient appends a radial gradient node with the given stops to
// snapshot.
//
// The function takes the following parameters:
//
//    - bounds: rectangle to render the readial gradient into.
//    - center point for the radial gradient.
//    - hradius: horizontal radius.
//    - vradius: vertical radius.
//    - start position (on the horizontal axis).
//    - end position (on the horizontal axis).
//    - stops: pointer to an array of GskColorStop defining the gradient.
//
func (snapshot *Snapshot) AppendRadialGradient(bounds *graphene.Rect, center *graphene.Point, hradius, vradius, start, end float32, stops []gsk.ColorStop) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_rect_t  // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 C.float             // out
	var _arg4 C.float             // out
	var _arg5 C.float             // out
	var _arg6 C.float             // out
	var _arg7 *C.GskColorStop     // out
	var _arg8 C.gsize

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg2 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(center)))
	_arg3 = C.float(hradius)
	_arg4 = C.float(vradius)
	_arg5 = C.float(start)
	_arg6 = C.float(end)
	_arg8 = (C.gsize)(len(stops))
	_arg7 = (*C.GskColorStop)(C.calloc(C.size_t(len(stops)), C.size_t(C.sizeof_GskColorStop)))
	defer C.free(unsafe.Pointer(_arg7))
	{
		out := unsafe.Slice((*C.GskColorStop)(_arg7), len(stops))
		for i := range stops {
			out[i] = *(*C.GskColorStop)(gextras.StructNative(unsafe.Pointer((&stops[i]))))
		}
	}

	C.gtk_snapshot_append_radial_gradient(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(center)
	runtime.KeepAlive(hradius)
	runtime.KeepAlive(vradius)
	runtime.KeepAlive(start)
	runtime.KeepAlive(end)
	runtime.KeepAlive(stops)
}

// AppendRepeatingLinearGradient appends a repeating linear gradient node with
// the given stops to snapshot.
//
// The function takes the following parameters:
//
//    - bounds: rectangle to render the linear gradient into.
//    - startPoint: point at which the linear gradient will begin.
//    - endPoint: point at which the linear gradient will finish.
//    - stops: pointer to an array of GskColorStop defining the gradient.
//
func (snapshot *Snapshot) AppendRepeatingLinearGradient(bounds *graphene.Rect, startPoint, endPoint *graphene.Point, stops []gsk.ColorStop) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_rect_t  // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 *C.graphene_point_t // out
	var _arg4 *C.GskColorStop     // out
	var _arg5 C.gsize

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg2 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(startPoint)))
	_arg3 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(endPoint)))
	_arg5 = (C.gsize)(len(stops))
	_arg4 = (*C.GskColorStop)(C.calloc(C.size_t(len(stops)), C.size_t(C.sizeof_GskColorStop)))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice((*C.GskColorStop)(_arg4), len(stops))
		for i := range stops {
			out[i] = *(*C.GskColorStop)(gextras.StructNative(unsafe.Pointer((&stops[i]))))
		}
	}

	C.gtk_snapshot_append_repeating_linear_gradient(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(startPoint)
	runtime.KeepAlive(endPoint)
	runtime.KeepAlive(stops)
}

// AppendRepeatingRadialGradient appends a repeating radial gradient node with
// the given stops to snapshot.
//
// The function takes the following parameters:
//
//    - bounds: rectangle to render the readial gradient into.
//    - center point for the radial gradient.
//    - hradius: horizontal radius.
//    - vradius: vertical radius.
//    - start position (on the horizontal axis).
//    - end position (on the horizontal axis).
//    - stops: pointer to an array of GskColorStop defining the gradient.
//
func (snapshot *Snapshot) AppendRepeatingRadialGradient(bounds *graphene.Rect, center *graphene.Point, hradius, vradius, start, end float32, stops []gsk.ColorStop) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_rect_t  // out
	var _arg2 *C.graphene_point_t // out
	var _arg3 C.float             // out
	var _arg4 C.float             // out
	var _arg5 C.float             // out
	var _arg6 C.float             // out
	var _arg7 *C.GskColorStop     // out
	var _arg8 C.gsize

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg2 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(center)))
	_arg3 = C.float(hradius)
	_arg4 = C.float(vradius)
	_arg5 = C.float(start)
	_arg6 = C.float(end)
	_arg8 = (C.gsize)(len(stops))
	_arg7 = (*C.GskColorStop)(C.calloc(C.size_t(len(stops)), C.size_t(C.sizeof_GskColorStop)))
	defer C.free(unsafe.Pointer(_arg7))
	{
		out := unsafe.Slice((*C.GskColorStop)(_arg7), len(stops))
		for i := range stops {
			out[i] = *(*C.GskColorStop)(gextras.StructNative(unsafe.Pointer((&stops[i]))))
		}
	}

	C.gtk_snapshot_append_repeating_radial_gradient(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(center)
	runtime.KeepAlive(hradius)
	runtime.KeepAlive(vradius)
	runtime.KeepAlive(start)
	runtime.KeepAlive(end)
	runtime.KeepAlive(stops)
}

// AppendTexture creates a new render node drawing the texture into the given
// bounds and appends it to the current render node of snapshot.
//
// The function takes the following parameters:
//
//    - texture: GdkTexture to render.
//    - bounds for the new node.
//
func (snapshot *Snapshot) AppendTexture(texture gdk.Texturer, bounds *graphene.Rect) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GdkTexture      // out
	var _arg2 *C.graphene_rect_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GdkTexture)(unsafe.Pointer(texture.Native()))
	_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	C.gtk_snapshot_append_texture(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(texture)
	runtime.KeepAlive(bounds)
}

// GLShaderPopTexture removes the top element from the stack of render nodes and
// adds it to the nearest GskGLShaderNode below it.
//
// This must be called the same number of times as the number of textures is
// needed for the shader in gtk.Snapshot.PushGLShader().
func (snapshot *Snapshot) GLShaderPopTexture() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_snapshot_gl_shader_pop_texture(_arg0)
	runtime.KeepAlive(snapshot)
}

// Perspective applies a perspective projection transform.
//
// See gsk.Transform.Perspective() for a discussion on the details.
//
// The function takes the following parameters:
//
//    - depth: distance of the z=0 plane.
//
func (snapshot *Snapshot) Perspective(depth float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.float(depth)

	C.gtk_snapshot_perspective(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(depth)
}

// Pop removes the top element from the stack of render nodes, and appends it to
// the node underneath it.
func (snapshot *Snapshot) Pop() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_snapshot_pop(_arg0)
	runtime.KeepAlive(snapshot)
}

// PushBlend blends together two images with the given blend mode.
//
// Until the first call to gtk.Snapshot.Pop(), the bottom image for the blend
// operation will be recorded. After that call, the top image to be blended will
// be recorded until the second call to gtk.Snapshot.Pop().
//
// Calling this function requires two subsequent calls to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - blendMode: blend mode to use.
//
func (snapshot *Snapshot) PushBlend(blendMode gsk.BlendMode) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.GskBlendMode // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.GskBlendMode(blendMode)

	C.gtk_snapshot_push_blend(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(blendMode)
}

// PushBlur blurs an image.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - radius: blur radius to use.
//
func (snapshot *Snapshot) PushBlur(radius float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.double(radius)

	C.gtk_snapshot_push_blur(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(radius)
}

// PushClip clips an image to a rectangle.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - bounds: rectangle to clip to.
//
func (snapshot *Snapshot) PushClip(bounds *graphene.Rect) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.graphene_rect_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	C.gtk_snapshot_push_clip(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
}

// PushColorMatrix modifies the colors of an image by applying an affine
// transformation in RGB space.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - colorMatrix: color matrix to use.
//    - colorOffset: color offset to use.
//
func (snapshot *Snapshot) PushColorMatrix(colorMatrix *graphene.Matrix, colorOffset *graphene.Vec4) {
	var _arg0 *C.GtkSnapshot       // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 *C.graphene_vec4_t   // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(colorMatrix)))
	_arg2 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(colorOffset)))

	C.gtk_snapshot_push_color_matrix(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(colorMatrix)
	runtime.KeepAlive(colorOffset)
}

// PushCrossFade snapshots a cross-fade operation between two images with the
// given progress.
//
// Until the first call to gtk.Snapshot.Pop(), the start image will be snapshot.
// After that call, the end image will be recorded until the second call to
// gtk.Snapshot.Pop().
//
// Calling this function requires two subsequent calls to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - progress between 0.0 and 1.0.
//
func (snapshot *Snapshot) PushCrossFade(progress float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.double(progress)

	C.gtk_snapshot_push_cross_fade(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(progress)
}

// PushGLShader: push a GskGLShaderNode.
//
// The node uses the given gsk.GLShader and uniform values Additionally this
// takes a list of n_children other nodes which will be passed to the
// GskGLShaderNode.
//
// The take_args argument is a block of data to use for uniform arguments, as
// per types and offsets defined by the shader. Normally this is generated by
// gsk.GLShader.FormatArgs() or gsk.ShaderArgsBuilder.
//
// The snapshotter takes ownership of take_args, so the caller should not free
// it after this.
//
// If the renderer doesn't support GL shaders, or if there is any problem when
// compiling the shader, then the node will draw pink. You should use
// gsk.GLShader.Compile() to ensure the shader will work for the renderer before
// using it.
//
// If the shader requires textures (see gsk.GLShader.GetNTextures()), then it is
// expected that you call gtk.Snapshot.GLShaderPopTexture() the number of times
// that are required. Each of these calls will generate a node that is added as
// a child to the GskGLShaderNode, which in turn will render these offscreen and
// pass as a texture to the shader.
//
// Once all textures (if any) are pop:ed, you must call the regular
// gtk.Snapshot.Pop().
//
// If you want to use pre-existing textures as input to the shader rather than
// rendering new ones, use gtk.Snapshot.AppendTexture() to push a texture node.
// These will be used directly rather than being re-rendered.
//
// For details on how to write shaders, see gsk.GLShader.
//
// The function takes the following parameters:
//
//    - shader: code to run.
//    - bounds: rectangle to render into.
//    - takeArgs: data block with arguments for the shader.
//
func (snapshot *Snapshot) PushGLShader(shader *gsk.GLShader, bounds *graphene.Rect, takeArgs *glib.Bytes) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GskGLShader     // out
	var _arg2 *C.graphene_rect_t // out
	var _arg3 *C.GBytes          // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskGLShader)(unsafe.Pointer(shader.Native()))
	_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	_arg3 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(takeArgs)))

	C.gtk_snapshot_push_gl_shader(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(takeArgs)
}

// PushOpacity modifies the opacity of an image.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - opacity to use.
//
func (snapshot *Snapshot) PushOpacity(opacity float64) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.double       // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.double(opacity)

	C.gtk_snapshot_push_opacity(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(opacity)
}

// PushRepeat creates a node that repeats the child node.
//
// The child is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - bounds within which to repeat.
//    - childBounds (optional) bounds of the child or NULL to use the full size
//      of the collected child node.
//
func (snapshot *Snapshot) PushRepeat(bounds, childBounds *graphene.Rect) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.graphene_rect_t // out
	var _arg2 *C.graphene_rect_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))
	if childBounds != nil {
		_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(childBounds)))
	}

	C.gtk_snapshot_push_repeat(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
	runtime.KeepAlive(childBounds)
}

// PushRoundedClip clips an image to a rounded rectangle.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - bounds: rounded rectangle to clip to.
//
func (snapshot *Snapshot) PushRoundedClip(bounds *gsk.RoundedRect) {
	var _arg0 *C.GtkSnapshot    // out
	var _arg1 *C.GskRoundedRect // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskRoundedRect)(gextras.StructNative(unsafe.Pointer(bounds)))

	C.gtk_snapshot_push_rounded_clip(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(bounds)
}

// PushShadow applies a shadow to an image.
//
// The image is recorded until the next call to gtk.Snapshot.Pop().
//
// The function takes the following parameters:
//
//    - shadow: first shadow specification.
//    - nShadows: number of shadow specifications.
//
func (snapshot *Snapshot) PushShadow(shadow *gsk.Shadow, nShadows uint) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 *C.GskShadow   // out
	var _arg2 C.gsize        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GskShadow)(gextras.StructNative(unsafe.Pointer(shadow)))
	_arg2 = C.gsize(nShadows)

	C.gtk_snapshot_push_shadow(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(shadow)
	runtime.KeepAlive(nShadows)
}

// RenderBackground creates a render node for the CSS background according to
// context, and appends it to the current node of snapshot, without changing the
// current node.
//
// The function takes the following parameters:
//
//    - context: GtkStyleContext to use.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func (snapshot *Snapshot) RenderBackground(context *StyleContext, x, y, width, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_background(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderFocus creates a render node for the focus outline according to context,
// and appends it to the current node of snapshot, without changing the current
// node.
//
// The function takes the following parameters:
//
//    - context: GtkStyleContext to use.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func (snapshot *Snapshot) RenderFocus(context *StyleContext, x, y, width, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_focus(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderFrame creates a render node for the CSS border according to context,
// and appends it to the current node of snapshot, without changing the current
// node.
//
// The function takes the following parameters:
//
//    - context: GtkStyleContext to use.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - width: rectangle width.
//    - height: rectangle height.
//
func (snapshot *Snapshot) RenderFrame(context *StyleContext, x, y, width, height float64) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 C.double           // out
	var _arg5 C.double           // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = C.double(width)
	_arg5 = C.double(height)

	C.gtk_snapshot_render_frame(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// RenderInsertionCursor draws a text caret using snapshot at the specified
// index of layout.
//
// The function takes the following parameters:
//
//    - context: GtkStyleContext.
//    - x: x origin.
//    - y: y origin.
//    - layout: PangoLayout of the text.
//    - index in the Layout.
//    - direction of the text.
//
func (snapshot *Snapshot) RenderInsertionCursor(context *StyleContext, x, y float64, layout *pango.Layout, index int, direction pango.Direction) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 *C.PangoLayout     // out
	var _arg5 C.int              // out
	var _arg6 C.PangoDirection   // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))
	_arg5 = C.int(index)
	_arg6 = C.PangoDirection(direction)

	C.gtk_snapshot_render_insertion_cursor(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(layout)
	runtime.KeepAlive(index)
	runtime.KeepAlive(direction)
}

// RenderLayout creates a render node for rendering layout according to the
// style information in context, and appends it to the current node of snapshot,
// without changing the current node.
//
// The function takes the following parameters:
//
//    - context: GtkStyleContext to use.
//    - x: x origin of the rectangle.
//    - y: y origin of the rectangle.
//    - layout to render.
//
func (snapshot *Snapshot) RenderLayout(context *StyleContext, x, y float64, layout *pango.Layout) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.GtkStyleContext // out
	var _arg2 C.double           // out
	var _arg3 C.double           // out
	var _arg4 *C.PangoLayout     // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.GtkStyleContext)(unsafe.Pointer(context.Native()))
	_arg2 = C.double(x)
	_arg3 = C.double(y)
	_arg4 = (*C.PangoLayout)(unsafe.Pointer(layout.Native()))

	C.gtk_snapshot_render_layout(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(layout)
}

// Restore restores snapshot to the state saved by a preceding call to
// gtk_snapshot_save() and removes that state from the stack of saved states.
func (snapshot *Snapshot) Restore() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_snapshot_restore(_arg0)
	runtime.KeepAlive(snapshot)
}

// Rotate rotates @snapshot's coordinate system by angle degrees in 2D space -
// or in 3D speak, rotates around the Z axis.
//
// To rotate around other axes, use gsk.Transform.Rotate3D().
//
// The function takes the following parameters:
//
//    - angle: rotation angle, in degrees (clockwise).
//
func (snapshot *Snapshot) Rotate(angle float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.float(angle)

	C.gtk_snapshot_rotate(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(angle)
}

// Rotate3D rotates snapshot's coordinate system by angle degrees around axis.
//
// For a rotation in 2D space, use gsk.Transform.Rotate().
//
// The function takes the following parameters:
//
//    - angle: rotation angle, in degrees (clockwise).
//    - axis: rotation axis.
//
func (snapshot *Snapshot) Rotate3D(angle float32, axis *graphene.Vec3) {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 C.float            // out
	var _arg2 *C.graphene_vec3_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(axis)))

	C.gtk_snapshot_rotate_3d(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(angle)
	runtime.KeepAlive(axis)
}

// Save makes a copy of the current state of snapshot and saves it on an
// internal stack.
//
// When gtk.Snapshot.Restore() is called, snapshot will be restored to the saved
// state. Multiple calls to gtk_snapshot_save() and gtk_snapshot_restore() can
// be nested; each call to gtk_snapshot_restore() restores the state from the
// matching paired gtk_snapshot_save().
//
// It is necessary to clear all saved states with corresponding calls to
// gtk_snapshot_restore().
func (snapshot *Snapshot) Save() {
	var _arg0 *C.GtkSnapshot // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	C.gtk_snapshot_save(_arg0)
	runtime.KeepAlive(snapshot)
}

// Scale scales snapshot's coordinate system in 2-dimensional space by the given
// factors.
//
// Use gtk.Snapshot.Scale3D() to scale in all 3 dimensions.
//
// The function takes the following parameters:
//
//    - factorX: scaling factor on the X axis.
//    - factorY: scaling factor on the Y axis.
//
func (snapshot *Snapshot) Scale(factorX, factorY float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out
	var _arg2 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)

	C.gtk_snapshot_scale(_arg0, _arg1, _arg2)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(factorX)
	runtime.KeepAlive(factorY)
}

// Scale3D scales snapshot's coordinate system by the given factors.
//
// The function takes the following parameters:
//
//    - factorX: scaling factor on the X axis.
//    - factorY: scaling factor on the Y axis.
//    - factorZ: scaling factor on the Z axis.
//
func (snapshot *Snapshot) Scale3D(factorX, factorY, factorZ float32) {
	var _arg0 *C.GtkSnapshot // out
	var _arg1 C.float        // out
	var _arg2 C.float        // out
	var _arg3 C.float        // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)
	_arg3 = C.float(factorZ)

	C.gtk_snapshot_scale_3d(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(factorX)
	runtime.KeepAlive(factorY)
	runtime.KeepAlive(factorZ)
}

// ToNode returns the render node that was constructed by snapshot.
//
// After calling this function, it is no longer possible to add more nodes to
// snapshot. The only function that should be called after this is
// g_object_unref().
//
// The function returns the following values:
//
//    - renderNode: constructed GskRenderNode.
//
func (snapshot *Snapshot) ToNode() gsk.RenderNoder {
	var _arg0 *C.GtkSnapshot   // out
	var _cret *C.GskRenderNode // in

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))

	_cret = C.gtk_snapshot_to_node(_arg0)
	runtime.KeepAlive(snapshot)

	var _renderNode gsk.RenderNoder // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gsk.RenderNoder is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gsk.RenderNoder)
			return ok
		})
		rv, ok := casted.(gsk.RenderNoder)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gsk.RenderNoder")
		}
		_renderNode = rv
	}

	return _renderNode
}

// ToPaintable returns a paintable encapsulating the render node that was
// constructed by snapshot.
//
// After calling this function, it is no longer possible to add more nodes to
// snapshot. The only function that should be called after this is
// g_object_unref().
//
// The function takes the following parameters:
//
//    - size (optional) of the resulting paintable or NULL to use the bounds of
//      the snapshot.
//
// The function returns the following values:
//
//    - paintable: new Paintable.
//
func (snapshot *Snapshot) ToPaintable(size *graphene.Size) gdk.Paintabler {
	var _arg0 *C.GtkSnapshot     // out
	var _arg1 *C.graphene_size_t // out
	var _cret *C.GdkPaintable    // in

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	if size != nil {
		_arg1 = (*C.graphene_size_t)(gextras.StructNative(unsafe.Pointer(size)))
	}

	_cret = C.gtk_snapshot_to_paintable(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(size)

	var _paintable gdk.Paintabler // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Paintabler is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(gdk.Paintabler)
			return ok
		})
		rv, ok := casted.(gdk.Paintabler)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Paintabler")
		}
		_paintable = rv
	}

	return _paintable
}

// Transform transforms snapshot's coordinate system with the given transform.
//
// The function takes the following parameters:
//
//    - transform (optional) to apply.
//
func (snapshot *Snapshot) Transform(transform *gsk.Transform) {
	var _arg0 *C.GtkSnapshot  // out
	var _arg1 *C.GskTransform // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	if transform != nil {
		_arg1 = (*C.GskTransform)(gextras.StructNative(unsafe.Pointer(transform)))
	}

	C.gtk_snapshot_transform(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(transform)
}

// TransformMatrix transforms snapshot's coordinate system with the given
// matrix.
//
// The function takes the following parameters:
//
//    - matrix to multiply the transform with.
//
func (snapshot *Snapshot) TransformMatrix(matrix *graphene.Matrix) {
	var _arg0 *C.GtkSnapshot       // out
	var _arg1 *C.graphene_matrix_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(matrix)))

	C.gtk_snapshot_transform_matrix(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(matrix)
}

// Translate translates snapshot's coordinate system by point in 2-dimensional
// space.
//
// The function takes the following parameters:
//
//    - point to translate the snapshot by.
//
func (snapshot *Snapshot) Translate(point *graphene.Point) {
	var _arg0 *C.GtkSnapshot      // out
	var _arg1 *C.graphene_point_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(point)))

	C.gtk_snapshot_translate(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(point)
}

// Translate3D translates snapshot's coordinate system by point.
//
// The function takes the following parameters:
//
//    - point to translate the snapshot by.
//
func (snapshot *Snapshot) Translate3D(point *graphene.Point3D) {
	var _arg0 *C.GtkSnapshot        // out
	var _arg1 *C.graphene_point3d_t // out

	_arg0 = (*C.GtkSnapshot)(unsafe.Pointer(snapshot.Native()))
	_arg1 = (*C.graphene_point3d_t)(gextras.StructNative(unsafe.Pointer(point)))

	C.gtk_snapshot_translate_3d(_arg0, _arg1)
	runtime.KeepAlive(snapshot)
	runtime.KeepAlive(point)
}
