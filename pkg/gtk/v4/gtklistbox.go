// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GtkWidget* _gotk4_gtk4_ListBoxCreateWidgetFunc(gpointer, gpointer);
// extern gboolean _gotk4_gtk4_ListBoxFilterFunc(void*, gpointer);
// extern int _gotk4_gtk4_ListBoxSortFunc(void*, void*, gpointer);
// extern void _gotk4_gtk4_ListBoxForEachFunc(void*, void*, gpointer);
// extern void _gotk4_gtk4_ListBoxRowClass_activate(void*);
// extern void _gotk4_gtk4_ListBoxRow_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBoxUpdateHeaderFunc(void*, void*, gpointer);
// extern void _gotk4_gtk4_ListBox_ConnectActivateCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectRowActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectRowSelected(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectSelectedRowsChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectToggleCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectUnselectAll(gpointer, guintptr);
// extern void callbackDelete(gpointer);
import "C"

// glib.Type values for gtklistbox.go.
var (
	GTypeListBox    = coreglib.Type(C.gtk_list_box_get_type())
	GTypeListBoxRow = coreglib.Type(C.gtk_list_box_row_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeListBox, F: marshalListBox},
		{T: GTypeListBoxRow, F: marshalListBoxRow},
	})
}

// ListBoxCreateWidgetFunc: called for list boxes that are bound to a GListModel
// with gtk_list_box_bind_model() for each item that gets added to the model.
type ListBoxCreateWidgetFunc func(item *coreglib.Object) (widget Widgetter)

//export _gotk4_gtk4_ListBoxCreateWidgetFunc
func _gotk4_gtk4_ListBoxCreateWidgetFunc(arg1 C.gpointer, arg2 C.gpointer) (cret *C.GtkWidget) {
	var fn ListBoxCreateWidgetFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ListBoxCreateWidgetFunc)
	}

	var _item *coreglib.Object // out

	_item = coreglib.Take(unsafe.Pointer(arg1))

	widget := fn(_item)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(widget).Native()))

	return cret
}

// ListBoxFilterFunc will be called whenever the row changes or is added and
// lets you control if the row should be visible or not.
type ListBoxFilterFunc func(row *ListBoxRow) (ok bool)

//export _gotk4_gtk4_ListBoxFilterFunc
func _gotk4_gtk4_ListBoxFilterFunc(arg1 *C.void, arg2 C.gpointer) (cret C.gboolean) {
	var fn ListBoxFilterFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ListBoxFilterFunc)
	}

	var _row *ListBoxRow // out

	_row = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg1)))

	ok := fn(_row)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ListBoxForEachFunc: function used by gtk_list_box_selected_foreach().
//
// It will be called on every selected child of the box.
type ListBoxForEachFunc func(box *ListBox, row *ListBoxRow)

//export _gotk4_gtk4_ListBoxForEachFunc
func _gotk4_gtk4_ListBoxForEachFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) {
	var fn ListBoxForEachFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ListBoxForEachFunc)
	}

	var _box *ListBox    // out
	var _row *ListBoxRow // out

	_box = wrapListBox(coreglib.Take(unsafe.Pointer(arg1)))
	_row = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg2)))

	fn(_box, _row)
}

// ListBoxSortFunc: compare two rows to determine which should be first.
type ListBoxSortFunc func(row1, row2 *ListBoxRow) (gint int32)

//export _gotk4_gtk4_ListBoxSortFunc
func _gotk4_gtk4_ListBoxSortFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) (cret C.int) {
	var fn ListBoxSortFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ListBoxSortFunc)
	}

	var _row1 *ListBoxRow // out
	var _row2 *ListBoxRow // out

	_row1 = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg1)))
	_row2 = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg2)))

	gint := fn(_row1, _row2)

	cret = C.int(gint)

	return cret
}

// ListBoxUpdateHeaderFunc: whenever row changes or which row is before row
// changes this is called, which lets you update the header on row.
//
// You may remove or set a new one via gtk.ListBoxRow.SetHeader() or just change
// the state of the current header widget.
type ListBoxUpdateHeaderFunc func(row, before *ListBoxRow)

//export _gotk4_gtk4_ListBoxUpdateHeaderFunc
func _gotk4_gtk4_ListBoxUpdateHeaderFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) {
	var fn ListBoxUpdateHeaderFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ListBoxUpdateHeaderFunc)
	}

	var _row *ListBoxRow    // out
	var _before *ListBoxRow // out

	_row = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_before = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg2)))
	}

	fn(_row, _before)
}

// ListBox: GtkListBox is a vertical list.
//
// A GtkListBox only contains GtkListBoxRow children. These rows can by
// dynamically sorted and filtered, and headers can be added dynamically
// depending on the row content. It also allows keyboard and mouse navigation
// and selection like a typical list.
//
// Using GtkListBox is often an alternative to GtkTreeView, especially when the
// list contents has a more complicated layout than what is allowed by a
// GtkCellRenderer, or when the contents is interactive (i.e. has a button in
// it).
//
// Although a GtkListBox must have only GtkListBoxRow children, you can add any
// kind of widget to it via gtk.ListBox.Prepend(), gtk.ListBox.Append() and
// gtk.ListBox.Insert() and a GtkListBoxRow widget will automatically be
// inserted between the list and the widget.
//
// GtkListBoxRows can be marked as activatable or selectable. If a row is
// activatable, gtk.ListBox::row-activated will be emitted for it when the user
// tries to activate it. If it is selectable, the row will be marked as selected
// when the user tries to select it.
//
//
// GtkListBox as GtkBuildable
//
// The GtkListBox implementation of the GtkBuildable interface supports setting
// a child as the placeholder by specifying “placeholder” as the “type”
// attribute of a <child> element. See gtk.ListBox.SetPlaceholder() for info.
//
// CSS nodes
//
//    list[.separators][.rich-list][.navigation-sidebar]
//    ╰── row[.activatable]
//
// GtkListBox uses a single CSS node named list. It may carry the .separators
// style class, when the gtk.ListBox:show-separators property is set. Each
// GtkListBoxRow uses a single CSS node named row. The row nodes get the
// .activatable style class added when appropriate.
//
// The main list node may also carry style classes to select the style of list
// presentation (section-list-widget.html#list-styles): .rich-list,
// .navigation-sidebar or .data-table.
//
//
// Accessibility
//
// GtkListBox uses the GTK_ACCESSIBLE_ROLE_LIST role and GtkListBoxRow uses the
// GTK_ACCESSIBLE_ROLE_LIST_ITEM role.
type ListBox struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*ListBox)(nil)
)

func wrapListBox(obj *coreglib.Object) *ListBox {
	return &ListBox{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalListBox(p uintptr) (interface{}, error) {
	return wrapListBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_ListBox_ConnectActivateCursorRow
func _gotk4_gtk4_ListBox_ConnectActivateCursorRow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

func (box *ListBox) ConnectActivateCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "activate-cursor-row", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectActivateCursorRow), f)
}

//export _gotk4_gtk4_ListBox_ConnectRowActivated
func _gotk4_gtk4_ListBox_ConnectRowActivated(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(row *ListBoxRow)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(row *ListBoxRow))
	}

	var _row *ListBoxRow // out

	_row = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg1)))

	f(_row)
}

// ConnectRowActivated is emitted when a row has been activated by the user.
func (box *ListBox) ConnectRowActivated(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "row-activated", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectRowActivated), f)
}

//export _gotk4_gtk4_ListBox_ConnectRowSelected
func _gotk4_gtk4_ListBox_ConnectRowSelected(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(row *ListBoxRow)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(row *ListBoxRow))
	}

	var _row *ListBoxRow // out

	if arg1 != nil {
		_row = wrapListBoxRow(coreglib.Take(unsafe.Pointer(arg1)))
	}

	f(_row)
}

// ConnectRowSelected is emitted when a new row is selected, or (with a NULL
// row) when the selection is cleared.
//
// When the box is using GTK_SELECTION_MULTIPLE, this signal will not give you
// the full picture of selection changes, and you should use the
// gtk.ListBox::selected-rows-changed signal instead.
func (box *ListBox) ConnectRowSelected(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "row-selected", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectRowSelected), f)
}

//export _gotk4_gtk4_ListBox_ConnectSelectAll
func _gotk4_gtk4_ListBox_ConnectSelectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectAll is emitted to select all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is <kbd>Ctrl</kbd>-<kbd>a</kbd>.
func (box *ListBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "select-all", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectSelectAll), f)
}

//export _gotk4_gtk4_ListBox_ConnectSelectedRowsChanged
func _gotk4_gtk4_ListBox_ConnectSelectedRowsChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectedRowsChanged is emitted when the set of selected rows changes.
func (box *ListBox) ConnectSelectedRowsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "selected-rows-changed", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectSelectedRowsChanged), f)
}

//export _gotk4_gtk4_ListBox_ConnectToggleCursorRow
func _gotk4_gtk4_ListBox_ConnectToggleCursorRow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

func (box *ListBox) ConnectToggleCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "toggle-cursor-row", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectToggleCursorRow), f)
}

//export _gotk4_gtk4_ListBox_ConnectUnselectAll
func _gotk4_gtk4_ListBox_ConnectUnselectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnselectAll is emitted to unselect all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is
// <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>a</kbd>.
func (box *ListBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectUnselectAll), f)
}

// NewListBox creates a new GtkListBox container.
//
// The function returns the following values:
//
//    - listBox: new GtkListBox.
//
func NewListBox() *ListBox {
	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("new_ListBox", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _listBox *ListBox // out

	_listBox = wrapListBox(coreglib.Take(unsafe.Pointer(_cret)))

	return _listBox
}

// Append a widget to the list.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to add.
//
func (box *ListBox) Append(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("append", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// BindModel binds model to box.
//
// If box was already bound to a model, that previous binding is destroyed.
//
// The contents of box are cleared and then filled with widgets that represent
// items from model. box is updated whenever model changes. If model is NULL,
// box is left empty.
//
// It is undefined to add or remove widgets directly (for example, with
// gtk.ListBox.Insert()) while box is bound to a model.
//
// Note that using a model is incompatible with the filtering and sorting
// functionality in GtkListBox. When using a model, filtering and sorting should
// be implemented by the model.
//
// The function takes the following parameters:
//
//    - model (optional): GListModel to be bound to box.
//    - createWidgetFunc (optional): function that creates widgets for items or
//      NULL in case you also passed NULL as model.
//
func (box *ListBox) BindModel(model gio.ListModeller, createWidgetFunc ListBoxCreateWidgetFunc) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if model != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}
	if createWidgetFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gtk4_ListBoxCreateWidgetFunc)
		_args[3] = C.gpointer(gbox.Assign(createWidgetFunc))
		_args[4] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("bind_model", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(model)
	runtime.KeepAlive(createWidgetFunc)
}

// DragHighlightRow: add a drag highlight to a row.
//
// This is a helper function for implementing DnD onto a GtkListBox. The passed
// in row will be highlighted by setting the GTK_STATE_FLAG_DROP_ACTIVE state
// and any previously highlighted row will be unhighlighted.
//
// The row will also be unhighlighted when the widget gets a drag leave event.
//
// The function takes the following parameters:
//
//    - row: GtkListBoxRow.
//
func (box *ListBox) DragHighlightRow(row *ListBoxRow) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("drag_highlight_row", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(row)
}

// DragUnhighlightRow: if a row has previously been highlighted via
// gtk_list_box_drag_highlight_row(), it will have the highlight removed.
func (box *ListBox) DragUnhighlightRow() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("drag_unhighlight_row", _args[:], nil)

	runtime.KeepAlive(box)
}

// ActivateOnSingleClick returns whether rows activate on single clicks.
//
// The function returns the following values:
//
//    - ok: TRUE if rows are activated on single click, FALSE otherwise.
//
func (box *ListBox) ActivateOnSingleClick() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_activate_on_single_click", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Adjustment gets the adjustment (if any) that the widget uses to for vertical
// scrolling.
//
// The function returns the following values:
//
//    - adjustment: adjustment.
//
func (box *ListBox) Adjustment() *Adjustment {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_adjustment", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _adjustment *Adjustment // out

	_adjustment = wrapAdjustment(coreglib.Take(unsafe.Pointer(_cret)))

	return _adjustment
}

// RowAtIndex gets the n-th child in the list (not counting headers).
//
// If index_ is negative or larger than the number of items in the list, NULL is
// returned.
//
// The function takes the following parameters:
//
//    - index_: index of the row.
//
// The function returns the following values:
//
//    - listBoxRow (optional): child GtkWidget or NULL.
//
func (box *ListBox) RowAtIndex(index_ int32) *ListBoxRow {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(index_)

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_row_at_index", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(index_)

	var _listBoxRow *ListBoxRow // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_listBoxRow = wrapListBoxRow(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _listBoxRow
}

// RowAtY gets the row at the y position.
//
// The function takes the following parameters:
//
//    - y: position.
//
// The function returns the following values:
//
//    - listBoxRow (optional): row or NULL in case no row exists for the given y
//      coordinate.
//
func (box *ListBox) RowAtY(y int32) *ListBoxRow {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(y)

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_row_at_y", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(y)

	var _listBoxRow *ListBoxRow // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_listBoxRow = wrapListBoxRow(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _listBoxRow
}

// SelectedRow gets the selected row, or NULL if no rows are selected.
//
// Note that the box may allow multiple selection, in which case you should use
// gtk.ListBox.SelectedForEach() to find all selected rows.
//
// The function returns the following values:
//
//    - listBoxRow (optional): selected row or NULL.
//
func (box *ListBox) SelectedRow() *ListBoxRow {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_selected_row", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _listBoxRow *ListBoxRow // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_listBoxRow = wrapListBoxRow(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _listBoxRow
}

// SelectedRows creates a list of all selected children.
//
// The function returns the following values:
//
//    - list: A GList containing the GtkWidget for each selected child. Free with
//      g_list_free() when done.
//
func (box *ListBox) SelectedRows() []*ListBoxRow {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_selected_rows", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _list []*ListBoxRow // out

	_list = make([]*ListBoxRow, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *ListBoxRow // out
		dst = wrapListBoxRow(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// ShowSeparators returns whether the list box should show separators between
// rows.
//
// The function returns the following values:
//
//    - ok: TRUE if the list box shows separators.
//
func (box *ListBox) ShowSeparators() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "ListBox").InvokeMethod("get_show_separators", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Insert the child into the box at position.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position.
//
// If position is -1, or larger than the total number of items in the box, then
// the child will be appended to the end.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to add.
//    - position to insert child in.
//
func (box *ListBox) Insert(child Widgetter, position int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(position)

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("insert", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
	runtime.KeepAlive(position)
}

// InvalidateFilter: update the filtering for all rows.
//
// Call this when result of the filter function on the box is changed due to an
// external factor. For instance, this would be used if the filter function just
// looked for a specific search string and the entry with the search string has
// changed.
func (box *ListBox) InvalidateFilter() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("invalidate_filter", _args[:], nil)

	runtime.KeepAlive(box)
}

// InvalidateHeaders: update the separators for all rows.
//
// Call this when result of the header function on the box is changed due to an
// external factor.
func (box *ListBox) InvalidateHeaders() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("invalidate_headers", _args[:], nil)

	runtime.KeepAlive(box)
}

// InvalidateSort: update the sorting for all rows.
//
// Call this when result of the sort function on the box is changed due to an
// external factor.
func (box *ListBox) InvalidateSort() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("invalidate_sort", _args[:], nil)

	runtime.KeepAlive(box)
}

// Prepend a widget to the list.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to add.
//
func (box *ListBox) Prepend(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("prepend", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// Remove removes a child from box.
//
// The function takes the following parameters:
//
//    - child to remove.
//
func (box *ListBox) Remove(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("remove", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// SelectAll: select all children of box, if the selection mode allows it.
func (box *ListBox) SelectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("select_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// SelectRow: make row the currently selected row.
//
// The function takes the following parameters:
//
//    - row (optional) to select or NULL.
//
func (box *ListBox) SelectRow(row *ListBoxRow) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if row != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("select_row", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(row)
}

// SelectedForEach calls a function for each selected child.
//
// Note that the selection cannot be modified from within this function.
//
// The function takes the following parameters:
//
//    - fn: function to call for each selected child.
//
func (box *ListBox) SelectedForEach(fn ListBoxForEachFunc) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_ListBoxForEachFunc)
	_args[2] = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_args[2]))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("selected_foreach", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(fn)
}

// SetActivateOnSingleClick: if single is TRUE, rows will be activated when you
// click on them, otherwise you need to double-click.
//
// The function takes the following parameters:
//
//    - single: boolean.
//
func (box *ListBox) SetActivateOnSingleClick(single bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if single {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_activate_on_single_click", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(single)
}

// SetAdjustment sets the adjustment (if any) that the widget uses to for
// vertical scrolling.
//
// For instance, this is used to get the page size for PageUp/Down key handling.
//
// In the normal case when the box is packed inside a GtkScrolledWindow the
// adjustment from that will be picked up automatically, so there is no need to
// manually do that.
//
// The function takes the following parameters:
//
//    - adjustment (optional): adjustment, or NULL.
//
func (box *ListBox) SetAdjustment(adjustment *Adjustment) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if adjustment != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_adjustment", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(adjustment)
}

// SetFilterFunc: by setting a filter function on the box one can decide
// dynamically which of the rows to show.
//
// For instance, to implement a search function on a list that filters the
// original list to only show the matching rows.
//
// The filter_func will be called for each row after the call, and it will
// continue to be called each time a row changes (via gtk.ListBoxRow.Changed())
// or when gtk.ListBox.InvalidateFilter() is called.
//
// Note that using a filter function is incompatible with using a model (see
// gtk.ListBox.BindModel()).
//
// The function takes the following parameters:
//
//    - filterFunc (optional): callback that lets you filter which rows to show.
//
func (box *ListBox) SetFilterFunc(filterFunc ListBoxFilterFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if filterFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_ListBoxFilterFunc)
		_args[2] = C.gpointer(gbox.Assign(filterFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_filter_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(filterFunc)
}

// SetHeaderFunc sets a header function.
//
// By setting a header function on the box one can dynamically add headers in
// front of rows, depending on the contents of the row and its position in the
// list.
//
// For instance, one could use it to add headers in front of the first item of a
// new kind, in a list sorted by the kind.
//
// The update_header can look at the current header widget using
// gtk.ListBoxRow.GetHeader() and either update the state of the widget as
// needed, or set a new one using gtk.ListBoxRow.SetHeader(). If no header is
// needed, set the header to NULL.
//
// Note that you may get many calls update_header to this for a particular row
// when e.g. changing things that don’t affect the header. In this case it is
// important for performance to not blindly replace an existing header with an
// identical one.
//
// The update_header function will be called for each row after the call, and it
// will continue to be called each time a row changes (via
// gtk.ListBoxRow.Changed()) and when the row before changes (either by
// gtk.ListBoxRow.Changed() on the previous row, or when the previous row
// becomes a different row). It is also called for all rows when
// gtk.ListBox.InvalidateHeaders() is called.
//
// The function takes the following parameters:
//
//    - updateHeader (optional): callback that lets you add row headers.
//
func (box *ListBox) SetHeaderFunc(updateHeader ListBoxUpdateHeaderFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if updateHeader != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_ListBoxUpdateHeaderFunc)
		_args[2] = C.gpointer(gbox.Assign(updateHeader))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_header_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(updateHeader)
}

// SetPlaceholder sets the placeholder widget that is shown in the list when it
// doesn't display any visible children.
//
// The function takes the following parameters:
//
//    - placeholder (optional) or NULL.
//
func (box *ListBox) SetPlaceholder(placeholder Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if placeholder != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(placeholder).Native()))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_placeholder", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(placeholder)
}

// SetShowSeparators sets whether the list box should show separators between
// rows.
//
// The function takes the following parameters:
//
//    - showSeparators: TRUE to show separators.
//
func (box *ListBox) SetShowSeparators(showSeparators bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if showSeparators {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_show_separators", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(showSeparators)
}

// SetSortFunc sets a sort function.
//
// By setting a sort function on the box one can dynamically reorder the rows of
// the list, based on the contents of the rows.
//
// The sort_func will be called for each row after the call, and will continue
// to be called each time a row changes (via gtk.ListBoxRow.Changed()) and when
// gtk.ListBox.InvalidateSort() is called.
//
// Note that using a sort function is incompatible with using a model (see
// gtk.ListBox.BindModel()).
//
// The function takes the following parameters:
//
//    - sortFunc (optional): sort function.
//
func (box *ListBox) SetSortFunc(sortFunc ListBoxSortFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if sortFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_ListBoxSortFunc)
		_args[2] = C.gpointer(gbox.Assign(sortFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("set_sort_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(sortFunc)
}

// UnselectAll: unselect all children of box, if the selection mode allows it.
func (box *ListBox) UnselectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("unselect_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// UnselectRow unselects a single row of box, if the selection mode allows it.
//
// The function takes the following parameters:
//
//    - row to unselected.
//
func (box *ListBox) UnselectRow(row *ListBoxRow) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	girepository.MustFind("Gtk", "ListBox").InvokeMethod("unselect_row", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(row)
}

// ListBoxRowOverrider contains methods that are overridable.
type ListBoxRowOverrider interface {
	Activate()
}

// ListBoxRow: GtkListBoxRow is the kind of widget that can be added to a
// GtkListBox.
type ListBoxRow struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Actionable
}

var (
	_ Widgetter         = (*ListBoxRow)(nil)
	_ coreglib.Objector = (*ListBoxRow)(nil)
)

func classInitListBoxRower(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkListBoxRowClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkListBoxRowClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Activate() }); ok {
		pclass.activate = (*[0]byte)(C._gotk4_gtk4_ListBoxRowClass_activate)
	}
}

//export _gotk4_gtk4_ListBoxRowClass_activate
func _gotk4_gtk4_ListBoxRowClass_activate(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Activate() })

	iface.Activate()
}

func wrapListBoxRow(obj *coreglib.Object) *ListBoxRow {
	return &ListBoxRow{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalListBoxRow(p uintptr) (interface{}, error) {
	return wrapListBoxRow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_ListBoxRow_ConnectActivate
func _gotk4_gtk4_ListBoxRow_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate: this is a keybinding signal, which will cause this row to be
// activated.
//
// If you want to be notified when the user activates a row (by key or not), use
// the gtk.ListBox::row-activated signal on the row’s parent GtkListBox.
func (row *ListBoxRow) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(row, "activate", false, unsafe.Pointer(C._gotk4_gtk4_ListBoxRow_ConnectActivate), f)
}

// NewListBoxRow creates a new GtkListBoxRow.
//
// The function returns the following values:
//
//    - listBoxRow: new GtkListBoxRow.
//
func NewListBoxRow() *ListBoxRow {
	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("new_ListBoxRow", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _listBoxRow *ListBoxRow // out

	_listBoxRow = wrapListBoxRow(coreglib.Take(unsafe.Pointer(_cret)))

	return _listBoxRow
}

// Changed marks row as changed, causing any state that depends on this to be
// updated.
//
// This affects sorting, filtering and headers.
//
// Note that calls to this method must be in sync with the data used for the row
// functions. For instance, if the list is mirroring some external data set, and
// *two* rows changed in the external data set then when you call
// gtk_list_box_row_changed() on the first row the sort function must only read
// the new data for the first of the two changed rows, otherwise the resorting
// of the rows will be wrong.
//
// This generally means that if you don’t fully control the data model you have
// to duplicate the data that affects the listbox row functions into the row
// widgets themselves. Another alternative is to call
// gtk.ListBox.InvalidateSort() on any model change, but that is more expensive.
func (row *ListBoxRow) Changed() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("changed", _args[:], nil)

	runtime.KeepAlive(row)
}

// Activatable gets whether the row is activatable.
//
// The function returns the following values:
//
//    - ok: TRUE if the row is activatable.
//
func (row *ListBoxRow) Activatable() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("get_activatable", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Child gets the child widget of row.
//
// The function returns the following values:
//
//    - widget (optional): child widget of row.
//
func (row *ListBoxRow) Child() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("get_child", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _widget Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Header returns the current header of the row.
//
// This can be used in a gtk.ListBoxUpdateHeaderFunc to see if there is a header
// set already, and if so to update the state of it.
//
// The function returns the following values:
//
//    - widget (optional): current header, or NULL if none.
//
func (row *ListBoxRow) Header() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("get_header", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _widget Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Index gets the current index of the row in its GtkListBox container.
//
// The function returns the following values:
//
//    - gint: index of the row, or -1 if the row is not in a listbox.
//
func (row *ListBoxRow) Index() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("get_index", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// Selectable gets whether the row can be selected.
//
// The function returns the following values:
//
//    - ok: TRUE if the row is selectable.
//
func (row *ListBoxRow) Selectable() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("get_selectable", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsSelected returns whether the child is currently selected in its GtkListBox
// container.
//
// The function returns the following values:
//
//    - ok: TRUE if row is selected.
//
func (row *ListBoxRow) IsSelected() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))

	_gret := girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("is_selected", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetActivatable: set whether the row is activatable.
//
// The function takes the following parameters:
//
//    - activatable: TRUE to mark the row as activatable.
//
func (row *ListBoxRow) SetActivatable(activatable bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))
	if activatable {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("set_activatable", _args[:], nil)

	runtime.KeepAlive(row)
	runtime.KeepAlive(activatable)
}

// SetChild sets the child widget of self.
//
// The function takes the following parameters:
//
//    - child (optional) widget.
//
func (row *ListBoxRow) SetChild(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))
	if child != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	}

	girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("set_child", _args[:], nil)

	runtime.KeepAlive(row)
	runtime.KeepAlive(child)
}

// SetHeader sets the current header of the row.
//
// This is only allowed to be called from a gtk.ListBoxUpdateHeaderFunc. It will
// replace any existing header in the row, and be shown in front of the row in
// the listbox.
//
// The function takes the following parameters:
//
//    - header (optional): header, or NULL.
//
func (row *ListBoxRow) SetHeader(header Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))
	if header != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(header).Native()))
	}

	girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("set_header", _args[:], nil)

	runtime.KeepAlive(row)
	runtime.KeepAlive(header)
}

// SetSelectable: set whether the row can be selected.
//
// The function takes the following parameters:
//
//    - selectable: TRUE to mark the row as selectable.
//
func (row *ListBoxRow) SetSelectable(selectable bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(row).Native()))
	if selectable {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "ListBoxRow").InvokeMethod("set_selectable", _args[:], nil)

	runtime.KeepAlive(row)
	runtime.KeepAlive(selectable)
}
