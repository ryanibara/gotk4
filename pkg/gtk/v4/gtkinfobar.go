// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk4_InfoBar_ConnectClose(gpointer, guintptr);
// extern void _gotk4_gtk4_InfoBar_ConnectResponse(gpointer, gint, guintptr);
import "C"

// glib.Type values for gtkinfobar.go.
var GTypeInfoBar = coreglib.Type(C.gtk_info_bar_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeInfoBar, F: marshalInfoBar},
	})
}

// InfoBar: GtkInfoBar can be show messages to the user without a dialog.
//
// !An example GtkInfoBar (info-bar.png)
//
// It is often temporarily shown at the top or bottom of a document. In contrast
// to gtk.Dialog, which has an action area at the bottom, GtkInfoBar has an
// action area at the side.
//
// The API of GtkInfoBar is very similar to GtkDialog, allowing you to add
// buttons to the action area with gtk.InfoBar.AddButton() or
// gtk.InfoBar.NewWithButtons. The sensitivity of action widgets can be
// controlled with gtk.InfoBar.SetResponseSensitive().
//
// To add widgets to the main content area of a GtkInfoBar, use
// gtk.InfoBar.AddChild().
//
// Similar to gtk.MessageDialog, the contents of a GtkInfoBar can by classified
// as error message, warning, informational message, etc, by using
// gtk.InfoBar.SetMessageType(). GTK may use the message type to determine how
// the message is displayed.
//
// A simple example for using a GtkInfoBar:
//
//    GtkWidget *message_label;
//    GtkWidget *widget;
//    GtkWidget *grid;
//    GtkInfoBar *bar;
//
//    // set up info bar
//    widget = gtk_info_bar_new ();
//    bar = GTK_INFO_BAR (widget);
//    grid = gtk_grid_new ();
//
//    message_label = gtk_label_new ("");
//    gtk_info_bar_add_child (bar, message_label);
//    gtk_info_bar_add_button (bar,
//                             _("_OK"),
//                             GTK_RESPONSE_OK);
//    g_signal_connect (bar,
//                      "response",
//                      G_CALLBACK (gtk_widget_hide),
//                      NULL);
//    gtk_grid_attach (GTK_GRID (grid),
//                     widget,
//                     0, 2, 1, 1);
//
//    // ...
//
//    // show an error message
//    gtk_label_set_text (GTK_LABEL (message_label), "An error occurred!");
//    gtk_info_bar_set_message_type (bar, GTK_MESSAGE_ERROR);
//    gtk_widget_show (bar);
//
//
//
// GtkInfoBar as GtkBuildable
//
// The GtkInfoBar implementation of the GtkBuildable interface exposes the
// content area and action area as internal children with the names
// “content_area” and “action_area”.
//
// GtkInfoBar supports a custom <action-widgets> element, which can contain
// multiple <action-widget> elements. The “response” attribute specifies a
// numeric response, and the content of the element is the id of widget (which
// should be a child of the dialogs action_area).
//
//
// CSS nodes
//
// GtkInfoBar has a single CSS node with name infobar. The node may get one of
// the style classes .info, .warning, .error or .question, depending on the
// message type. If the info bar shows a close button, that button will have the
// .close style class applied.
type InfoBar struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*InfoBar)(nil)
)

func wrapInfoBar(obj *coreglib.Object) *InfoBar {
	return &InfoBar{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalInfoBar(p uintptr) (interface{}, error) {
	return wrapInfoBar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_InfoBar_ConnectClose
func _gotk4_gtk4_InfoBar_ConnectClose(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectClose gets emitted when the user uses a keybinding to dismiss the info
// bar.
//
// The ::close signal is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is the Escape key.
func (infoBar *InfoBar) ConnectClose(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(infoBar, "close", false, unsafe.Pointer(C._gotk4_gtk4_InfoBar_ConnectClose), f)
}

//export _gotk4_gtk4_InfoBar_ConnectResponse
func _gotk4_gtk4_InfoBar_ConnectResponse(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) {
	var f func(responseId int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(responseId int))
	}

	var _responseId int // out

	_responseId = int(arg1)

	f(_responseId)
}

// ConnectResponse is emitted when an action widget is clicked.
//
// The signal is also emitted when the application programmer calls
// gtk.InfoBar.Response(). The response_id depends on which action widget was
// clicked.
func (infoBar *InfoBar) ConnectResponse(f func(responseId int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(infoBar, "response", false, unsafe.Pointer(C._gotk4_gtk4_InfoBar_ConnectResponse), f)
}

// NewInfoBar creates a new GtkInfoBar object.
//
// The function returns the following values:
//
//    - infoBar: new GtkInfoBar object.
//
func NewInfoBar() *InfoBar {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "InfoBar").InvokeMethod("new_InfoBar", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _infoBar *InfoBar // out

	_infoBar = wrapInfoBar(coreglib.Take(unsafe.Pointer(_cret)))

	return _infoBar
}

// AddChild adds a widget to the content area of the info bar.
//
// The function takes the following parameters:
//
//    - widget: child to be added.
//
func (infoBar *InfoBar) AddChild(widget Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**InfoBar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "InfoBar").InvokeMethod("add_child", args[:], nil)

	runtime.KeepAlive(infoBar)
	runtime.KeepAlive(widget)
}

// Revealed returns whether the info bar is currently revealed.
//
// The function returns the following values:
//
//    - ok: current value of the gtk.InfoBar:revealed property.
//
func (infoBar *InfoBar) Revealed() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	*(**InfoBar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "InfoBar").InvokeMethod("get_revealed", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(infoBar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowCloseButton returns whether the widget will display a standard close
// button.
//
// The function returns the following values:
//
//    - ok: TRUE if the widget displays standard close button.
//
func (infoBar *InfoBar) ShowCloseButton() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	*(**InfoBar)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "InfoBar").InvokeMethod("get_show_close_button", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(infoBar)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveActionWidget removes a widget from the action area of info_bar.
//
// The widget must have been put there by a call to
// gtk.InfoBar.AddActionWidget() or gtk.InfoBar.AddButton().
//
// The function takes the following parameters:
//
//    - widget: action widget to remove.
//
func (infoBar *InfoBar) RemoveActionWidget(widget Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**InfoBar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "InfoBar").InvokeMethod("remove_action_widget", args[:], nil)

	runtime.KeepAlive(infoBar)
	runtime.KeepAlive(widget)
}

// RemoveChild removes a widget from the content area of the info bar.
//
// The function takes the following parameters:
//
//    - widget: child that has been added to the content area.
//
func (infoBar *InfoBar) RemoveChild(widget Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(**InfoBar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "InfoBar").InvokeMethod("remove_child", args[:], nil)

	runtime.KeepAlive(infoBar)
	runtime.KeepAlive(widget)
}

// SetRevealed sets whether the GtkInfoBar is revealed.
//
// Changing this will make info_bar reveal or conceal itself via a sliding
// transition.
//
// Note: this does not show or hide info_bar in the gtk.Widget:visible sense, so
// revealing has no effect if gtk.Widget:visible is FALSE.
//
// The function takes the following parameters:
//
//    - revealed: new value of the property.
//
func (infoBar *InfoBar) SetRevealed(revealed bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	if revealed {
		_arg1 = C.TRUE
	}
	*(**InfoBar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "InfoBar").InvokeMethod("set_revealed", args[:], nil)

	runtime.KeepAlive(infoBar)
	runtime.KeepAlive(revealed)
}

// SetShowCloseButton: if true, a standard close button is shown.
//
// When clicked it emits the response GTK_RESPONSE_CLOSE.
//
// The function takes the following parameters:
//
//    - setting: TRUE to include a close button.
//
func (infoBar *InfoBar) SetShowCloseButton(setting bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(infoBar).Native()))
	if setting {
		_arg1 = C.TRUE
	}
	*(**InfoBar)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "InfoBar").InvokeMethod("set_show_close_button", args[:], nil)

	runtime.KeepAlive(infoBar)
	runtime.KeepAlive(setting)
}
