// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// BINARY_AGE: like gtk_get_binary_age(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const BINARY_AGE = 201

// INTERFACE_AGE: like gtk_get_interface_age(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const INTERFACE_AGE = 1

// MAJOR_VERSION: like gtk_get_major_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MAJOR_VERSION = 4

// MICRO_VERSION: like gtk_get_micro_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MICRO_VERSION = 1

// MINOR_VERSION: like gtk_get_minor_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MINOR_VERSION = 2

// CheckVersion checks that the GTK library in use is compatible with the given
// version.
//
// Generally you would pass in the constants GTK_MAJOR_VERSION,
// GTK_MINOR_VERSION, GTK_MICRO_VERSION as the three arguments to this function;
// that produces a check that the library in use is compatible with the version
// of GTK the application or module was compiled against.
//
// Compatibility is defined by two things: first the version of the running
// library is newer than the version
// required_major.required_minor.required_micro. Second the running library must
// be binary compatible with the version
// required_major.required_minor.required_micro (same major version.)
//
// This function is primarily for GTK modules; the module can call this function
// to check that it wasn’t loaded into an incompatible version of GTK. However,
// such a check isn’t completely reliable, since the module may be linked
// against an old version of GTK and calling the old version of
// gtk_check_version(), but still get loaded into an application using a newer
// version of GTK.
//
// The function takes the following parameters:
//
//    - requiredMajor: required major version.
//    - requiredMinor: required minor version.
//    - requiredMicro: required micro version.
//
// The function returns the following values:
//
//    - utf8 (optional): NULL if the GTK library is compatible with the given
//      version, or a string describing the version mismatch. The returned string
//      is owned by GTK and should not be modified or freed.
//
func CheckVersion(requiredMajor, requiredMinor, requiredMicro uint32) string {
	var args [3]girepository.Argument
	var _arg0 C.guint // out
	var _arg1 C.guint // out
	var _arg2 C.guint // out
	var _cret *C.void // in

	_arg0 = C.guint(requiredMajor)
	_arg1 = C.guint(requiredMinor)
	_arg2 = C.guint(requiredMicro)
	*(*uint32)(unsafe.Pointer(&args[0])) = _arg0
	*(*uint32)(unsafe.Pointer(&args[1])) = _arg1
	*(*uint32)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "check_version").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(requiredMajor)
	runtime.KeepAlive(requiredMinor)
	runtime.KeepAlive(requiredMicro)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// GetBinaryAge returns the binary age as passed to libtool.
//
// If libtool means nothing to you, don't worry about it.
//
// The function returns the following values:
//
//    - guint: binary age of the GTK library.
//
func GetBinaryAge() uint32 {
	var _cret C.guint // in

	_gret := girepository.MustFind("Gtk", "get_binary_age").Invoke(nil, nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// GetInterfaceAge returns the interface age as passed to libtool.
//
// If libtool means nothing to you, don't worry about it.
//
// The function returns the following values:
//
//    - guint: interface age of the GTK library.
//
func GetInterfaceAge() uint32 {
	var _cret C.guint // in

	_gret := girepository.MustFind("Gtk", "get_interface_age").Invoke(nil, nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// GetMajorVersion returns the major version number of the GTK library.
//
// For example, in GTK version 3.1.5 this is 3.
//
// This function is in the library, so it represents the GTK library your code
// is running against. Contrast with the GTK_MAJOR_VERSION macro, which
// represents the major version of the GTK headers you have included when
// compiling your code.
//
// The function returns the following values:
//
//    - guint: major version number of the GTK library.
//
func GetMajorVersion() uint32 {
	var _cret C.guint // in

	_gret := girepository.MustFind("Gtk", "get_major_version").Invoke(nil, nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// GetMicroVersion returns the micro version number of the GTK library.
//
// For example, in GTK version 3.1.5 this is 5.
//
// This function is in the library, so it represents the GTK library your code
// is are running against. Contrast with the GTK_MICRO_VERSION macro, which
// represents the micro version of the GTK headers you have included when
// compiling your code.
//
// The function returns the following values:
//
//    - guint: micro version number of the GTK library.
//
func GetMicroVersion() uint32 {
	var _cret C.guint // in

	_gret := girepository.MustFind("Gtk", "get_micro_version").Invoke(nil, nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// GetMinorVersion returns the minor version number of the GTK library.
//
// For example, in GTK version 3.1.5 this is 1.
//
// This function is in the library, so it represents the GTK library your code
// is are running against. Contrast with the GTK_MINOR_VERSION macro, which
// represents the minor version of the GTK headers you have included when
// compiling your code.
//
// The function returns the following values:
//
//    - guint: minor version number of the GTK library.
//
func GetMinorVersion() uint32 {
	var _cret C.guint // in

	_gret := girepository.MustFind("Gtk", "get_minor_version").Invoke(nil, nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}
