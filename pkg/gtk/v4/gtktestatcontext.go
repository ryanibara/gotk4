// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gtk/gtk.h>
import "C"

// The function takes the following parameters:
//
//    - domain
//    - file
//    - line
//    - fn
//    - expr
//    - accessible
//    - expectedRole
//    - actualRole
//
func TestAccessibleAssertionMessageRole(domain, file string, line int32, fn, expr string, accessible Accessibler, expectedRole, actualRole AccessibleRole) {
	var _arg1 *C.char             // out
	var _arg2 *C.char             // out
	var _arg3 C.int               // out
	var _arg4 *C.char             // out
	var _arg5 *C.char             // out
	var _arg6 *C.GtkAccessible    // out
	var _arg7 C.GtkAccessibleRole // out
	var _arg8 C.GtkAccessibleRole // out

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(domain)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.int(line)
	_arg4 = (*C.char)(unsafe.Pointer(C.CString(fn)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.char)(unsafe.Pointer(C.CString(expr)))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = (*C.GtkAccessible)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))
	_arg7 = C.GtkAccessibleRole(expectedRole)
	_arg8 = C.GtkAccessibleRole(actualRole)

	C.gtk_test_accessible_assertion_message_role(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(domain)
	runtime.KeepAlive(file)
	runtime.KeepAlive(line)
	runtime.KeepAlive(fn)
	runtime.KeepAlive(expr)
	runtime.KeepAlive(accessible)
	runtime.KeepAlive(expectedRole)
	runtime.KeepAlive(actualRole)
}

// TestAccessibleHasProperty checks whether the Accessible has property set.
//
// The function takes the following parameters:
//
//    - accessible: Accessible.
//    - property: AccessibleProperty.
//
// The function returns the following values:
//
//    - ok: TRUE if the property is set in the accessible.
//
func TestAccessibleHasProperty(accessible Accessibler, property AccessibleProperty) bool {
	var _arg1 *C.GtkAccessible        // out
	var _arg2 C.GtkAccessibleProperty // out
	var _cret C.gboolean              // in

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))
	_arg2 = C.GtkAccessibleProperty(property)

	_cret = C.gtk_test_accessible_has_property(_arg1, _arg2)
	runtime.KeepAlive(accessible)
	runtime.KeepAlive(property)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasRelation checks whether the Accessible has relation set.
//
// The function takes the following parameters:
//
//    - accessible: Accessible.
//    - relation: AccessibleRelation.
//
// The function returns the following values:
//
//    - ok: TRUE if the relation is set in the accessible.
//
func TestAccessibleHasRelation(accessible Accessibler, relation AccessibleRelation) bool {
	var _arg1 *C.GtkAccessible        // out
	var _arg2 C.GtkAccessibleRelation // out
	var _cret C.gboolean              // in

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))
	_arg2 = C.GtkAccessibleRelation(relation)

	_cret = C.gtk_test_accessible_has_relation(_arg1, _arg2)
	runtime.KeepAlive(accessible)
	runtime.KeepAlive(relation)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasRole checks whether the Accessible:accessible-role of the
// accessible is role.
//
// The function takes the following parameters:
//
//    - accessible: Accessible.
//    - role: AccessibleRole.
//
// The function returns the following values:
//
//    - ok: TRUE if the role matches.
//
func TestAccessibleHasRole(accessible Accessibler, role AccessibleRole) bool {
	var _arg1 *C.GtkAccessible    // out
	var _arg2 C.GtkAccessibleRole // out
	var _cret C.gboolean          // in

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))
	_arg2 = C.GtkAccessibleRole(role)

	_cret = C.gtk_test_accessible_has_role(_arg1, _arg2)
	runtime.KeepAlive(accessible)
	runtime.KeepAlive(role)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TestAccessibleHasState checks whether the Accessible has state set.
//
// The function takes the following parameters:
//
//    - accessible: Accessible.
//    - state: AccessibleState.
//
// The function returns the following values:
//
//    - ok: TRUE if the state is set in the accessible.
//
func TestAccessibleHasState(accessible Accessibler, state AccessibleState) bool {
	var _arg1 *C.GtkAccessible     // out
	var _arg2 C.GtkAccessibleState // out
	var _cret C.gboolean           // in

	_arg1 = (*C.GtkAccessible)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))
	_arg2 = C.GtkAccessibleState(state)

	_cret = C.gtk_test_accessible_has_state(_arg1, _arg2)
	runtime.KeepAlive(accessible)
	runtime.KeepAlive(state)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
