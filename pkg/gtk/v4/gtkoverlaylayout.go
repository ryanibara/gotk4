// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// glib.Type values for gtkoverlaylayout.go.
var (
	GTypeOverlayLayout      = externglib.Type(C.gtk_overlay_layout_get_type())
	GTypeOverlayLayoutChild = externglib.Type(C.gtk_overlay_layout_child_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeOverlayLayout, F: marshalOverlayLayout},
		{T: GTypeOverlayLayoutChild, F: marshalOverlayLayoutChild},
	})
}

// OverlayLayoutOverrider contains methods that are overridable.
type OverlayLayoutOverrider interface {
	externglib.Objector
}

// WrapOverlayLayoutOverrider wraps the OverlayLayoutOverrider
// interface implementation to access the instance methods.
func WrapOverlayLayoutOverrider(obj OverlayLayoutOverrider) *OverlayLayout {
	return wrapOverlayLayout(externglib.BaseObject(obj))
}

// OverlayLayout: GtkOverlayLayout is the layout manager used by GtkOverlay.
//
// It places widgets as overlays on top of the main child.
//
// This is not a reusable layout manager, since it expects its widget to be a
// GtkOverlay. It only listed here so that its layout properties get documented.
type OverlayLayout struct {
	_ [0]func() // equal guard
	LayoutManager
}

var (
	_ LayoutManagerer = (*OverlayLayout)(nil)
)

func classInitOverlayLayouter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapOverlayLayout(obj *externglib.Object) *OverlayLayout {
	return &OverlayLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
	}
}

func marshalOverlayLayout(p uintptr) (interface{}, error) {
	return wrapOverlayLayout(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewOverlayLayout creates a new GtkOverlayLayout instance.
//
// The function returns the following values:
//
//    - overlayLayout: newly created instance.
//
func NewOverlayLayout() *OverlayLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.gtk_overlay_layout_new()

	var _overlayLayout *OverlayLayout // out

	_overlayLayout = wrapOverlayLayout(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _overlayLayout
}

// OverlayLayoutChildOverrider contains methods that are overridable.
type OverlayLayoutChildOverrider interface {
	externglib.Objector
}

// WrapOverlayLayoutChildOverrider wraps the OverlayLayoutChildOverrider
// interface implementation to access the instance methods.
func WrapOverlayLayoutChildOverrider(obj OverlayLayoutChildOverrider) *OverlayLayoutChild {
	return wrapOverlayLayoutChild(externglib.BaseObject(obj))
}

// OverlayLayoutChild: GtkLayoutChild subclass for children in a
// GtkOverlayLayout.
type OverlayLayoutChild struct {
	_ [0]func() // equal guard
	LayoutChild
}

var (
	_ LayoutChilder = (*OverlayLayoutChild)(nil)
)

func classInitOverlayLayoutChilder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapOverlayLayoutChild(obj *externglib.Object) *OverlayLayoutChild {
	return &OverlayLayoutChild{
		LayoutChild: LayoutChild{
			Object: obj,
		},
	}
}

func marshalOverlayLayoutChild(p uintptr) (interface{}, error) {
	return wrapOverlayLayoutChild(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ClipOverlay retrieves whether the child is clipped.
//
// The function returns the following values:
//
//    - ok: whether the child is clipped.
//
func (child *OverlayLayoutChild) ClipOverlay() bool {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(externglib.InternObject(child).Native()))

	_cret = C.gtk_overlay_layout_child_get_clip_overlay(_arg0)
	runtime.KeepAlive(child)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Measure retrieves whether the child is measured.
//
// The function returns the following values:
//
//    - ok: whether the child is measured.
//
func (child *OverlayLayoutChild) Measure() bool {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _cret C.gboolean               // in

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(externglib.InternObject(child).Native()))

	_cret = C.gtk_overlay_layout_child_get_measure(_arg0)
	runtime.KeepAlive(child)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetClipOverlay sets whether to clip this child.
//
// The function takes the following parameters:
//
//    - clipOverlay: whether to clip this child.
//
func (child *OverlayLayoutChild) SetClipOverlay(clipOverlay bool) {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _arg1 C.gboolean               // out

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(externglib.InternObject(child).Native()))
	if clipOverlay {
		_arg1 = C.TRUE
	}

	C.gtk_overlay_layout_child_set_clip_overlay(_arg0, _arg1)
	runtime.KeepAlive(child)
	runtime.KeepAlive(clipOverlay)
}

// SetMeasure sets whether to measure this child.
//
// The function takes the following parameters:
//
//    - measure: whether to measure this child.
//
func (child *OverlayLayoutChild) SetMeasure(measure bool) {
	var _arg0 *C.GtkOverlayLayoutChild // out
	var _arg1 C.gboolean               // out

	_arg0 = (*C.GtkOverlayLayoutChild)(unsafe.Pointer(externglib.InternObject(child).Native()))
	if measure {
		_arg1 = C.TRUE
	}

	C.gtk_overlay_layout_child_set_measure(_arg0, _arg1)
	runtime.KeepAlive(child)
	runtime.KeepAlive(measure)
}
