// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GtkCellAreaContext* _gotk4_gtk4_CellAreaClass_copy_context(GtkCellArea*, GtkCellAreaContext*);
// extern GtkCellAreaContext* _gotk4_gtk4_CellAreaClass_create_context(GtkCellArea*);
// extern gboolean _gotk4_gtk4_CellAreaClass_is_activatable(GtkCellArea*);
// extern void _gotk4_gtk4_CellAreaClass_add(GtkCellArea*, GtkCellRenderer*);
// extern void _gotk4_gtk4_CellAreaClass_apply_attributes(GtkCellArea*, GtkTreeModel*, GtkTreeIter*, gboolean, gboolean);
// extern void _gotk4_gtk4_CellAreaClass_remove(GtkCellArea*, GtkCellRenderer*);
// extern void _gotk4_gtk4_CellArea_ConnectAddEditable(gpointer, GtkCellRenderer*, GtkCellEditable*, GdkRectangle*, gchar*, guintptr);
// extern void _gotk4_gtk4_CellArea_ConnectApplyAttributes(gpointer, GtkTreeModel*, GtkTreeIter*, gboolean, gboolean, guintptr);
// extern void _gotk4_gtk4_CellArea_ConnectFocusChanged(gpointer, GtkCellRenderer*, gchar*, guintptr);
// extern void _gotk4_gtk4_CellArea_ConnectRemoveEditable(gpointer, GtkCellRenderer*, GtkCellEditable*, guintptr);
import "C"

// glib.Type values for gtkcellarea.go.
var GTypeCellArea = coreglib.Type(C.gtk_cell_area_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCellArea, F: marshalCellArea},
	})
}

// CellAllocCallback: type of the callback functions used for iterating over the
// cell renderers and their allocated areas inside a CellArea, see
// gtk_cell_area_foreach_alloc().
type CellAllocCallback func(renderer CellRendererer, cellArea, cellBackground *gdk.Rectangle) (ok bool)

//export _gotk4_gtk4_CellAllocCallback
func _gotk4_gtk4_CellAllocCallback(arg1 *C.GtkCellRenderer, arg2 *C.GdkRectangle, arg3 *C.GdkRectangle, arg4 C.gpointer) (cret C.gboolean) {
	var fn CellAllocCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CellAllocCallback)
	}

	var _renderer CellRendererer       // out
	var _cellArea *gdk.Rectangle       // out
	var _cellBackground *gdk.Rectangle // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_cellBackground = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := fn(_renderer, _cellArea, _cellBackground)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// CellCallback: type of the callback functions used for iterating over the cell
// renderers of a CellArea, see gtk_cell_area_foreach().
type CellCallback func(renderer CellRendererer) (ok bool)

//export _gotk4_gtk4_CellCallback
func _gotk4_gtk4_CellCallback(arg1 *C.GtkCellRenderer, arg2 C.gpointer) (cret C.gboolean) {
	var fn CellCallback
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CellCallback)
	}

	var _renderer CellRendererer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}

	ok := fn(_renderer)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// CellAreaOverrider contains methods that are overridable.
type CellAreaOverrider interface {
	// Add adds renderer to area with the default child cell properties.
	//
	// The function takes the following parameters:
	//
	//    - renderer to add to area.
	//
	Add(renderer CellRendererer)
	// ApplyAttributes applies any connected attributes to the renderers in area
	// by pulling the values from tree_model.
	//
	// The function takes the following parameters:
	//
	//    - treeModel to pull values from.
	//    - iter in tree_model to apply values for.
	//    - isExpander: whether iter has children.
	//    - isExpanded: whether iter is expanded in the view and children are
	//      visible.
	//
	ApplyAttributes(treeModel TreeModeller, iter *TreeIter, isExpander, isExpanded bool)
	// CopyContext: this is sometimes needed for cases where rows need to share
	// alignments in one orientation but may be separately grouped in the
	// opposing orientation.
	//
	// For instance, IconView creates all icons (rows) to have the same width
	// and the cells theirin to have the same horizontal alignments. However
	// each row of icons may have a separate collective height. IconView uses
	// this to request the heights of each row based on a context which was
	// already used to request all the row widths that are to be displayed.
	//
	// The function takes the following parameters:
	//
	//    - context to copy.
	//
	// The function returns the following values:
	//
	//    - cellAreaContext: newly created CellAreaContext copy of context.
	//
	CopyContext(context *CellAreaContext) *CellAreaContext
	// CreateContext creates a CellAreaContext to be used with area for all
	// purposes. CellAreaContext stores geometry information for rows for which
	// it was operated on, it is important to use the same context for the same
	// row of data at all times (i.e. one should render and handle events with
	// the same CellAreaContext which was used to request the size of those rows
	// of data).
	//
	// The function returns the following values:
	//
	//    - cellAreaContext: newly created CellAreaContext which can be used with
	//      area.
	//
	CreateContext() *CellAreaContext
	// IsActivatable returns whether the area can do anything when activated,
	// after applying new attributes to area.
	//
	// The function returns the following values:
	//
	//    - ok: whether area can do anything when activated.
	//
	IsActivatable() bool
	// Remove removes renderer from area.
	//
	// The function takes the following parameters:
	//
	//    - renderer to remove from area.
	//
	Remove(renderer CellRendererer)
}

// CellArea: abstract class for laying out GtkCellRenderers
//
// The CellArea is an abstract class for CellLayout widgets (also referred to as
// "layouting widgets") to interface with an arbitrary number of CellRenderers
// and interact with the user for a given TreeModel row.
//
// The cell area handles events, focus navigation, drawing and size requests and
// allocations for a given row of data.
//
// Usually users dont have to interact with the CellArea directly unless they
// are implementing a cell-layouting widget themselves.
//
//
// Requesting area sizes
//
// As outlined in [GtkWidget’s geometry management
// section][geometry-management], GTK uses a height-for-width geometry
// management system to compute the sizes of widgets and user interfaces.
// CellArea uses the same semantics to calculate the size of an area for an
// arbitrary number of TreeModel rows.
//
// When requesting the size of a cell area one needs to calculate the size for a
// handful of rows, and this will be done differently by different layouting
// widgets. For instance a TreeViewColumn always lines up the areas from top to
// bottom while a IconView on the other hand might enforce that all areas
// received the same width and wrap the areas around, requesting height for more
// cell areas when allocated less width.
//
// It’s also important for areas to maintain some cell alignments with areas
// rendered for adjacent rows (cells can appear “columnized” inside an area even
// when the size of cells are different in each row). For this reason the
// CellArea uses a CellAreaContext object to store the alignments and sizes
// along the way (as well as the overall largest minimum and natural size for
// all the rows which have been calculated with the said context).
//
// The CellAreaContext is an opaque object specific to the CellArea which
// created it (see gtk_cell_area_create_context()). The owning cell-layouting
// widget can create as many contexts as it wishes to calculate sizes of rows
// which should receive the same size in at least one orientation (horizontally
// or vertically), However, it’s important that the same CellAreaContext which
// was used to request the sizes for a given TreeModel row be used when
// rendering or processing events for that row.
//
// In order to request the width of all the rows at the root level of a
// TreeModel one would do the following:
//
//    static gboolean
//    foo_focus (GtkWidget       *widget,
//               GtkDirectionType direction)
//    {
//      Foo        *foo  = FOO (widget);
//      FooPrivate *priv = foo->priv;
//      int         focus_row;
//      gboolean    have_focus = FALSE;
//
//      focus_row = priv->focus_row;
//
//      if (!gtk_widget_has_focus (widget))
//        gtk_widget_grab_focus (widget);
//
//      valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);
//      while (valid)
//        {
//          gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);
//
//          if (gtk_cell_area_focus (priv->area, direction))
//            {
//               priv->focus_row = focus_row;
//               have_focus = TRUE;
//               break;
//            }
//          else
//            {
//              if (direction == GTK_DIR_RIGHT ||
//                  direction == GTK_DIR_LEFT)
//                break;
//              else if (direction == GTK_DIR_UP ||
//                       direction == GTK_DIR_TAB_BACKWARD)
//               {
//                  if (focus_row == 0)
//                    break;
//                  else
//                   {
//                      focus_row--;
//                      valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);
//                   }
//                }
//              else
//                {
//                  if (focus_row == last_row)
//                    break;
//                  else
//                    {
//                      focus_row++;
//                      valid = gtk_tree_model_iter_next (priv->model, &iter);
//                    }
//                }
//            }
//        }
//        return have_focus;
//    }
//
// Note that the layouting widget is responsible for matching the
// GtkDirectionType values to the way it lays out its cells.
//
//
// Cell Properties
//
// The CellArea introduces cell properties for CellRenderers. This provides some
// general interfaces for defining the relationship cell areas have with their
// cells. For instance in a CellAreaBox a cell might “expand” and receive extra
// space when the area is allocated more than its full natural request, or a
// cell might be configured to “align” with adjacent rows which were requested
// and rendered with the same CellAreaContext.
//
// Use gtk_cell_area_class_install_cell_property() to install cell properties
// for a cell area class and gtk_cell_area_class_find_cell_property() or
// gtk_cell_area_class_list_cell_properties() to get information about existing
// cell properties.
//
// To set the value of a cell property, use gtk_cell_area_cell_set_property(),
// gtk_cell_area_cell_set() or gtk_cell_area_cell_set_valist(). To obtain the
// value of a cell property, use gtk_cell_area_cell_get_property(),
// gtk_cell_area_cell_get() or gtk_cell_area_cell_get_valist().
type CellArea struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned

	*coreglib.Object
	Buildable
	CellLayout
}

var (
	_ coreglib.Objector = (*CellArea)(nil)
)

// CellAreaer describes types inherited from class CellArea.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type CellAreaer interface {
	coreglib.Objector
	baseCellArea() *CellArea
}

var _ CellAreaer = (*CellArea)(nil)

func classInitCellAreaer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkCellAreaClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkCellAreaClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Add(renderer CellRendererer) }); ok {
		pclass.add = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_add)
	}

	if _, ok := goval.(interface {
		ApplyAttributes(treeModel TreeModeller, iter *TreeIter, isExpander, isExpanded bool)
	}); ok {
		pclass.apply_attributes = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_apply_attributes)
	}

	if _, ok := goval.(interface {
		CopyContext(context *CellAreaContext) *CellAreaContext
	}); ok {
		pclass.copy_context = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_copy_context)
	}

	if _, ok := goval.(interface{ CreateContext() *CellAreaContext }); ok {
		pclass.create_context = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_create_context)
	}

	if _, ok := goval.(interface{ IsActivatable() bool }); ok {
		pclass.is_activatable = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_is_activatable)
	}

	if _, ok := goval.(interface{ Remove(renderer CellRendererer) }); ok {
		pclass.remove = (*[0]byte)(C._gotk4_gtk4_CellAreaClass_remove)
	}
}

//export _gotk4_gtk4_CellAreaClass_add
func _gotk4_gtk4_CellAreaClass_add(arg0 *C.GtkCellArea, arg1 *C.GtkCellRenderer) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Add(renderer CellRendererer) })

	var _renderer CellRendererer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}

	iface.Add(_renderer)
}

//export _gotk4_gtk4_CellAreaClass_apply_attributes
func _gotk4_gtk4_CellAreaClass_apply_attributes(arg0 *C.GtkCellArea, arg1 *C.GtkTreeModel, arg2 *C.GtkTreeIter, arg3 C.gboolean, arg4 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ApplyAttributes(treeModel TreeModeller, iter *TreeIter, isExpander, isExpanded bool)
	})

	var _treeModel TreeModeller // out
	var _iter *TreeIter         // out
	var _isExpander bool        // out
	var _isExpanded bool        // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TreeModeller)
			return ok
		})
		rv, ok := casted.(TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_treeModel = rv
	}
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	if arg3 != 0 {
		_isExpander = true
	}
	if arg4 != 0 {
		_isExpanded = true
	}

	iface.ApplyAttributes(_treeModel, _iter, _isExpander, _isExpanded)
}

//export _gotk4_gtk4_CellAreaClass_copy_context
func _gotk4_gtk4_CellAreaClass_copy_context(arg0 *C.GtkCellArea, arg1 *C.GtkCellAreaContext) (cret *C.GtkCellAreaContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		CopyContext(context *CellAreaContext) *CellAreaContext
	})

	var _context *CellAreaContext // out

	_context = wrapCellAreaContext(coreglib.Take(unsafe.Pointer(arg1)))

	cellAreaContext := iface.CopyContext(_context)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(cellAreaContext).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(cellAreaContext).Native()))

	return cret
}

//export _gotk4_gtk4_CellAreaClass_create_context
func _gotk4_gtk4_CellAreaClass_create_context(arg0 *C.GtkCellArea) (cret *C.GtkCellAreaContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ CreateContext() *CellAreaContext })

	cellAreaContext := iface.CreateContext()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(cellAreaContext).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(cellAreaContext).Native()))

	return cret
}

//export _gotk4_gtk4_CellAreaClass_is_activatable
func _gotk4_gtk4_CellAreaClass_is_activatable(arg0 *C.GtkCellArea) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ IsActivatable() bool })

	ok := iface.IsActivatable()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_CellAreaClass_remove
func _gotk4_gtk4_CellAreaClass_remove(arg0 *C.GtkCellArea, arg1 *C.GtkCellRenderer) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Remove(renderer CellRendererer) })

	var _renderer CellRendererer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}

	iface.Remove(_renderer)
}

func wrapCellArea(obj *coreglib.Object) *CellArea {
	return &CellArea{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
		CellLayout: CellLayout{
			Object: obj,
		},
	}
}

func marshalCellArea(p uintptr) (interface{}, error) {
	return wrapCellArea(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (area *CellArea) baseCellArea() *CellArea {
	return area
}

// BaseCellArea returns the underlying base object.
func BaseCellArea(obj CellAreaer) *CellArea {
	return obj.baseCellArea()
}

//export _gotk4_gtk4_CellArea_ConnectAddEditable
func _gotk4_gtk4_CellArea_ConnectAddEditable(arg0 C.gpointer, arg1 *C.GtkCellRenderer, arg2 *C.GtkCellEditable, arg3 *C.GdkRectangle, arg4 *C.gchar, arg5 C.guintptr) {
	var f func(renderer CellRendererer, editable CellEditabler, cellArea *gdk.Rectangle, path string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(renderer CellRendererer, editable CellEditabler, cellArea *gdk.Rectangle, path string))
	}

	var _renderer CellRendererer // out
	var _editable CellEditabler  // out
	var _cellArea *gdk.Rectangle // out
	var _path string             // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gtk.CellEditabler is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellEditabler)
			return ok
		})
		rv, ok := casted.(CellEditabler)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellEditabler")
		}
		_editable = rv
	}
	_cellArea = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_path = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))

	f(_renderer, _editable, _cellArea, _path)
}

// ConnectAddEditable indicates that editing has started on renderer and that
// editable should be added to the owning cell-layouting widget at cell_area.
func (area *CellArea) ConnectAddEditable(f func(renderer CellRendererer, editable CellEditabler, cellArea *gdk.Rectangle, path string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "add-editable", false, unsafe.Pointer(C._gotk4_gtk4_CellArea_ConnectAddEditable), f)
}

//export _gotk4_gtk4_CellArea_ConnectApplyAttributes
func _gotk4_gtk4_CellArea_ConnectApplyAttributes(arg0 C.gpointer, arg1 *C.GtkTreeModel, arg2 *C.GtkTreeIter, arg3 C.gboolean, arg4 C.gboolean, arg5 C.guintptr) {
	var f func(model TreeModeller, iter *TreeIter, isExpander, isExpanded bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(model TreeModeller, iter *TreeIter, isExpander, isExpanded bool))
	}

	var _model TreeModeller // out
	var _iter *TreeIter     // out
	var _isExpander bool    // out
	var _isExpanded bool    // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.TreeModeller is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TreeModeller)
			return ok
		})
		rv, ok := casted.(TreeModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.TreeModeller")
		}
		_model = rv
	}
	_iter = (*TreeIter)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	if arg3 != 0 {
		_isExpander = true
	}
	if arg4 != 0 {
		_isExpanded = true
	}

	f(_model, _iter, _isExpander, _isExpanded)
}

// ConnectApplyAttributes: this signal is emitted whenever applying attributes
// to area from model.
func (area *CellArea) ConnectApplyAttributes(f func(model TreeModeller, iter *TreeIter, isExpander, isExpanded bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "apply-attributes", false, unsafe.Pointer(C._gotk4_gtk4_CellArea_ConnectApplyAttributes), f)
}

//export _gotk4_gtk4_CellArea_ConnectFocusChanged
func _gotk4_gtk4_CellArea_ConnectFocusChanged(arg0 C.gpointer, arg1 *C.GtkCellRenderer, arg2 *C.gchar, arg3 C.guintptr) {
	var f func(renderer CellRendererer, path string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(renderer CellRendererer, path string))
	}

	var _renderer CellRendererer // out
	var _path string             // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}
	_path = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	f(_renderer, _path)
}

// ConnectFocusChanged indicates that focus changed on this area. This signal is
// emitted either as a result of focus handling or event handling.
//
// It's possible that the signal is emitted even if the currently focused
// renderer did not change, this is because focus may change to the same
// renderer in the same cell area for a different row of data.
func (area *CellArea) ConnectFocusChanged(f func(renderer CellRendererer, path string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "focus-changed", false, unsafe.Pointer(C._gotk4_gtk4_CellArea_ConnectFocusChanged), f)
}

//export _gotk4_gtk4_CellArea_ConnectRemoveEditable
func _gotk4_gtk4_CellArea_ConnectRemoveEditable(arg0 C.gpointer, arg1 *C.GtkCellRenderer, arg2 *C.GtkCellEditable, arg3 C.guintptr) {
	var f func(renderer CellRendererer, editable CellEditabler)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(renderer CellRendererer, editable CellEditabler))
	}

	var _renderer CellRendererer // out
	var _editable CellEditabler  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_renderer = rv
	}
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gtk.CellEditabler is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellEditabler)
			return ok
		})
		rv, ok := casted.(CellEditabler)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellEditabler")
		}
		_editable = rv
	}

	f(_renderer, _editable)
}

// ConnectRemoveEditable indicates that editing finished on renderer and that
// editable should be removed from the owning cell-layouting widget.
func (area *CellArea) ConnectRemoveEditable(f func(renderer CellRendererer, editable CellEditabler)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "remove-editable", false, unsafe.Pointer(C._gotk4_gtk4_CellArea_ConnectRemoveEditable), f)
}

// Add adds renderer to area with the default child cell properties.
//
// The function takes the following parameters:
//
//    - renderer to add to area.
//
func (area *CellArea) Add(renderer CellRendererer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("add", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
}

// AddFocusSibling adds sibling to renderer’s focusable area, focus will be
// drawn around renderer and all of its siblings if renderer can focus for a
// given row.
//
// Events handled by focus siblings can also activate the given focusable
// renderer.
//
// The function takes the following parameters:
//
//    - renderer expected to have focus.
//    - sibling to add to renderer’s focus area.
//
func (area *CellArea) AddFocusSibling(renderer, sibling CellRendererer) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sibling).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("add_focus_sibling", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(sibling)
}

// ApplyAttributes applies any connected attributes to the renderers in area by
// pulling the values from tree_model.
//
// The function takes the following parameters:
//
//    - treeModel to pull values from.
//    - iter in tree_model to apply values for.
//    - isExpander: whether iter has children.
//    - isExpanded: whether iter is expanded in the view and children are
//      visible.
//
func (area *CellArea) ApplyAttributes(treeModel TreeModeller, iter *TreeIter, isExpander, isExpanded bool) {
	var args [5]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _arg2 *C.void    // out
	var _arg3 C.gboolean // out
	var _arg4 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(treeModel).Native()))
	_arg2 = (*C.void)(gextras.StructNative(unsafe.Pointer(iter)))
	if isExpander {
		_arg3 = C.TRUE
	}
	if isExpanded {
		_arg4 = C.TRUE
	}
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*TreeModeller)(unsafe.Pointer(&args[2])) = _arg2
	*(**TreeIter)(unsafe.Pointer(&args[3])) = _arg3
	*(*bool)(unsafe.Pointer(&args[4])) = _arg4

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("apply_attributes", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(treeModel)
	runtime.KeepAlive(iter)
	runtime.KeepAlive(isExpander)
	runtime.KeepAlive(isExpanded)
}

// AttributeConnect connects an attribute to apply values from column for the
// TreeModel in use.
//
// The function takes the following parameters:
//
//    - renderer to connect an attribute for.
//    - attribute name.
//    - column column to fetch attribute values from.
//
func (area *CellArea) AttributeConnect(renderer CellRendererer, attribute string, column int32) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.int(column)
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("attribute_connect", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(column)
}

// AttributeDisconnect disconnects attribute for the renderer in area so that
// attribute will no longer be updated with values from the model.
//
// The function takes the following parameters:
//
//    - renderer to disconnect an attribute for.
//    - attribute name.
//
func (area *CellArea) AttributeDisconnect(renderer CellRendererer, attribute string) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("attribute_disconnect", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(attribute)
}

// AttributeGetColumn returns the model column that an attribute has been mapped
// to, or -1 if the attribute is not mapped.
//
// The function takes the following parameters:
//
//    - renderer: CellRenderer.
//    - attribute on the renderer.
//
// The function returns the following values:
//
//    - gint: model column, or -1.
//
func (area *CellArea) AttributeGetColumn(renderer CellRendererer, attribute string) int32 {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("attribute_get_column", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(attribute)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// CellGetProperty gets the value of a cell property for renderer in area.
//
// The function takes the following parameters:
//
//    - renderer inside area.
//    - propertyName: name of the property to get.
//    - value: location to return the value.
//
func (area *CellArea) CellGetProperty(renderer CellRendererer, propertyName string, value *coreglib.Value) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.void)(unsafe.Pointer(value.Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("cell_get_property", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(value)
}

// CellSetProperty sets a cell property for renderer in area.
//
// The function takes the following parameters:
//
//    - renderer inside area.
//    - propertyName: name of the cell property to set.
//    - value to set the cell property to.
//
func (area *CellArea) CellSetProperty(renderer CellRendererer, propertyName string, value *coreglib.Value) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.void)(unsafe.Pointer(value.Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("cell_set_property", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(value)
}

// CopyContext: this is sometimes needed for cases where rows need to share
// alignments in one orientation but may be separately grouped in the opposing
// orientation.
//
// For instance, IconView creates all icons (rows) to have the same width and
// the cells theirin to have the same horizontal alignments. However each row of
// icons may have a separate collective height. IconView uses this to request
// the heights of each row based on a context which was already used to request
// all the row widths that are to be displayed.
//
// The function takes the following parameters:
//
//    - context to copy.
//
// The function returns the following values:
//
//    - cellAreaContext: newly created CellAreaContext copy of context.
//
func (area *CellArea) CopyContext(context *CellAreaContext) *CellAreaContext {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("copy_context", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(context)

	var _cellAreaContext *CellAreaContext // out

	_cellAreaContext = wrapCellAreaContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cellAreaContext
}

// CreateContext creates a CellAreaContext to be used with area for all
// purposes. CellAreaContext stores geometry information for rows for which it
// was operated on, it is important to use the same context for the same row of
// data at all times (i.e. one should render and handle events with the same
// CellAreaContext which was used to request the size of those rows of data).
//
// The function returns the following values:
//
//    - cellAreaContext: newly created CellAreaContext which can be used with
//      area.
//
func (area *CellArea) CreateContext() *CellAreaContext {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("create_context", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _cellAreaContext *CellAreaContext // out

	_cellAreaContext = wrapCellAreaContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cellAreaContext
}

// CurrentPathString gets the current TreePath string for the currently applied
// TreeIter, this is implicitly updated when gtk_cell_area_apply_attributes() is
// called and can be used to interact with renderers from CellArea subclasses.
//
// The function returns the following values:
//
//    - utf8: current TreePath string for the current attributes applied to area.
//      This string belongs to the area and should not be freed.
//
func (area *CellArea) CurrentPathString() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_current_path_string", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// EditWidget gets the CellEditable widget currently used to edit the currently
// edited cell.
//
// The function returns the following values:
//
//    - cellEditable: currently active CellEditable widget.
//
func (area *CellArea) EditWidget() *CellEditable {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_edit_widget", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _cellEditable *CellEditable // out

	_cellEditable = wrapCellEditable(coreglib.Take(unsafe.Pointer(_cret)))

	return _cellEditable
}

// EditedCell gets the CellRenderer in area that is currently being edited.
//
// The function returns the following values:
//
//    - cellRenderer: currently edited CellRenderer.
//
func (area *CellArea) EditedCell() CellRendererer {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_edited_cell", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _cellRenderer CellRendererer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_cellRenderer = rv
	}

	return _cellRenderer
}

// FocusCell retrieves the currently focused cell for area.
//
// The function returns the following values:
//
//    - cellRenderer: currently focused cell in area.
//
func (area *CellArea) FocusCell() CellRendererer {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_focus_cell", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _cellRenderer CellRendererer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.CellRendererer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(CellRendererer)
			return ok
		})
		rv, ok := casted.(CellRendererer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
		}
		_cellRenderer = rv
	}

	return _cellRenderer
}

// FocusFromSibling gets the CellRenderer which is expected to be focusable for
// which renderer is, or may be a sibling.
//
// This is handy for CellArea subclasses when handling events, after determining
// the renderer at the event location it can then chose to activate the focus
// cell for which the event cell may have been a sibling.
//
// The function takes the following parameters:
//
//    - renderer: CellRenderer.
//
// The function returns the following values:
//
//    - cellRenderer (optional) for which renderer is a sibling, or NULL.
//
func (area *CellArea) FocusFromSibling(renderer CellRendererer) CellRendererer {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_focus_from_sibling", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)

	var _cellRenderer CellRendererer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(CellRendererer)
				return ok
			})
			rv, ok := casted.(CellRendererer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
			}
			_cellRenderer = rv
		}
	}

	return _cellRenderer
}

// FocusSiblings gets the focus sibling cell renderers for renderer.
//
// The function takes the following parameters:
//
//    - renderer expected to have focus.
//
// The function returns the following values:
//
//    - list of CellRenderers. The returned list is internal and should not be
//      freed.
//
func (area *CellArea) FocusSiblings(renderer CellRendererer) []CellRendererer {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("get_focus_siblings", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)

	var _list []CellRendererer // out

	_list = make([]CellRendererer, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst CellRendererer // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gtk.CellRendererer is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(CellRendererer)
				return ok
			})
			rv, ok := casted.(CellRendererer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.CellRendererer")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// HasRenderer checks if area contains renderer.
//
// The function takes the following parameters:
//
//    - renderer to check.
//
// The function returns the following values:
//
//    - ok: TRUE if renderer is in the area.
//
func (area *CellArea) HasRenderer(renderer CellRendererer) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("has_renderer", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsActivatable returns whether the area can do anything when activated, after
// applying new attributes to area.
//
// The function returns the following values:
//
//    - ok: whether area can do anything when activated.
//
func (area *CellArea) IsActivatable() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	*(**CellArea)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("is_activatable", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsFocusSibling returns whether sibling is one of renderer’s focus siblings
// (see gtk_cell_area_add_focus_sibling()).
//
// The function takes the following parameters:
//
//    - renderer expected to have focus.
//    - sibling to check against renderer’s sibling list.
//
// The function returns the following values:
//
//    - ok: TRUE if sibling is a focus sibling of renderer.
//
func (area *CellArea) IsFocusSibling(renderer, sibling CellRendererer) bool {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _arg2 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sibling).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "CellArea").InvokeMethod("is_focus_sibling", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(sibling)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Remove removes renderer from area.
//
// The function takes the following parameters:
//
//    - renderer to remove from area.
//
func (area *CellArea) Remove(renderer CellRendererer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("remove", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
}

// RemoveFocusSibling removes sibling from renderer’s focus sibling list (see
// gtk_cell_area_add_focus_sibling()).
//
// The function takes the following parameters:
//
//    - renderer expected to have focus.
//    - sibling to remove from renderer’s focus area.
//
func (area *CellArea) RemoveFocusSibling(renderer, sibling CellRendererer) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(sibling).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1
	*(*CellRendererer)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("remove_focus_sibling", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(sibling)
}

// SetFocusCell: explicitly sets the currently focused cell to renderer.
//
// This is generally called by implementations of CellAreaClass.focus() or
// CellAreaClass.event(), however it can also be used to implement functions
// such as gtk_tree_view_set_cursor_on_cell().
//
// The function takes the following parameters:
//
//    - renderer to give focus to.
//
func (area *CellArea) SetFocusCell(renderer CellRendererer) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("set_focus_cell", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(renderer)
}

// StopEditing: explicitly stops the editing of the currently edited cell.
//
// If canceled is TRUE, the currently edited cell renderer will emit the
// ::editing-canceled signal, otherwise the the ::editing-done signal will be
// emitted on the current edit widget.
//
// See gtk_cell_area_get_edited_cell() and gtk_cell_area_get_edit_widget().
//
// The function takes the following parameters:
//
//    - canceled: whether editing was canceled.
//
func (area *CellArea) StopEditing(canceled bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if canceled {
		_arg1 = C.TRUE
	}
	*(**CellArea)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "CellArea").InvokeMethod("stop_editing", args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(canceled)
}
