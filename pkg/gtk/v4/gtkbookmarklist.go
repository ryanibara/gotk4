// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkbookmarklist.go.
var GTypeBookmarkList = coreglib.Type(C.gtk_bookmark_list_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeBookmarkList, F: marshalBookmarkList},
	})
}

// BookmarkListOverrider contains methods that are overridable.
type BookmarkListOverrider interface {
}

// BookmarkList: GtkBookmarkList is a list model that wraps GBookmarkFile.
//
// It presents a GListModel and fills it asynchronously with the GFileInfos
// returned from that function.
//
// The GFileInfos in the list have some attributes in the recent namespace
// added: recent::private (boolean) and recent:applications (stringv).
type BookmarkList struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*BookmarkList)(nil)
)

func classInitBookmarkLister(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapBookmarkList(obj *coreglib.Object) *BookmarkList {
	return &BookmarkList{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalBookmarkList(p uintptr) (interface{}, error) {
	return wrapBookmarkList(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewBookmarkList creates a new GtkBookmarkList with the given attributes.
//
// The function takes the following parameters:
//
//    - filename (optional): bookmark file to load.
//    - attributes (optional) to query.
//
// The function returns the following values:
//
//    - bookmarkList: new GtkBookmarkList.
//
func NewBookmarkList(filename, attributes string) *BookmarkList {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	if filename != "" {
		_arg0 = (*C.void)(unsafe.Pointer(C.CString(filename)))
		defer C.free(unsafe.Pointer(_arg0))
	}
	if attributes != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(attributes)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("new_BookmarkList", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(filename)
	runtime.KeepAlive(attributes)

	var _bookmarkList *BookmarkList // out

	_bookmarkList = wrapBookmarkList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _bookmarkList
}

// Attributes gets the attributes queried on the children.
//
// The function returns the following values:
//
//    - utf8 (optional): queried attributes.
//
func (self *BookmarkList) Attributes() string {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("get_attributes", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Filename returns the filename of the bookmark file that this list is loading.
//
// The function returns the following values:
//
//    - utf8: filename of the .xbel file.
//
func (self *BookmarkList) Filename() string {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("get_filename", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// IOPriority gets the IO priority to use while loading file.
//
// The function returns the following values:
//
//    - gint: IO priority.
//
func (self *BookmarkList) IOPriority() int32 {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("get_io_priority", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// IsLoading returns TRUE if the files are currently being loaded.
//
// Files will be added to self from time to time while loading is going on. The
// order in which are added is undefined and may change in between runs.
//
// The function returns the following values:
//
//    - ok: TRUE if self is loading.
//
func (self *BookmarkList) IsLoading() bool {
	var _args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("is_loading", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAttributes sets the attributes to be enumerated and starts the
// enumeration.
//
// If attributes is NULL, no attributes will be queried, but a list of Infos
// will still be created.
//
// The function takes the following parameters:
//
//    - attributes (optional) to enumerate.
//
func (self *BookmarkList) SetAttributes(attributes string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if attributes != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(attributes)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("set_attributes", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(attributes)
}

// SetIOPriority sets the IO priority to use while loading files.
//
// The default IO priority is G_PRIORITY_DEFAULT.
//
// The function takes the following parameters:
//
//    - ioPriority: IO priority to use.
//
func (self *BookmarkList) SetIOPriority(ioPriority int32) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.int(ioPriority)

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.int)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "BookmarkList").InvokeMethod("set_io_priority", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(ioPriority)
}
