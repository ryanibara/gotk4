// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
// extern void _gotk4_gtk4_CssProvider_ConnectParsingError(gpointer, GtkCssSection*, GError*, guintptr);
import "C"

// glib.Type values for gtkcssprovider.go.
var GTypeCSSProvider = externglib.Type(C.gtk_css_provider_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCSSProvider, F: marshalCSSProvider},
	})
}

// CSSProviderOverrider contains methods that are overridable.
type CSSProviderOverrider interface {
}

// CSSProvider: GtkCssProvider is an object implementing the GtkStyleProvider
// interface for CSS.
//
// It is able to parse CSS-like input in order to style widgets.
//
// An application can make GTK parse a specific CSS style sheet by calling
// gtk.CSSProvider.LoadFromFile() or gtk.CSSProvider.LoadFromResource() and
// adding the provider with gtk.StyleContext.AddProvider() or
// gtk.StyleContext().AddProviderForDisplay.
//
// In addition, certain files will be read when GTK is initialized. First, the
// file $XDG_CONFIG_HOME/gtk-4.0/gtk.css is loaded if it exists. Then, GTK loads
// the first existing file among
// XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk-VARIANT.css,
// $HOME/.themes/THEME/gtk-VERSION/gtk-VARIANT.css,
// $XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk-VARIANT.css and
// DATADIR/share/themes/THEME/gtk-VERSION/gtk-VARIANT.css, where THEME is the
// name of the current theme (see the gtk.Settings:gtk-theme-name setting),
// VARIANT is the variant to load (see the
// gtk.Settings:gtk-application-prefer-dark-theme setting), DATADIR is the
// prefix configured when GTK was compiled (unless overridden by the
// GTK_DATA_PREFIX environment variable), and VERSION is the GTK version number.
// If no file is found for the current version, GTK tries older versions all the
// way back to 4.0.
//
// To track errors while loading CSS, connect to the
// gtk.CSSProvider::parsing-error signal.
type CSSProvider struct {
	_ [0]func() // equal guard
	*externglib.Object

	StyleProvider
}

var (
	_ externglib.Objector = (*CSSProvider)(nil)
)

func classInitCSSProviderer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCSSProvider(obj *externglib.Object) *CSSProvider {
	return &CSSProvider{
		Object: obj,
		StyleProvider: StyleProvider{
			Object: obj,
		},
	}
}

func marshalCSSProvider(p uintptr) (interface{}, error) {
	return wrapCSSProvider(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_CssProvider_ConnectParsingError
func _gotk4_gtk4_CssProvider_ConnectParsingError(arg0 C.gpointer, arg1 *C.GtkCssSection, arg2 *C.GError, arg3 C.guintptr) {
	var f func(section *CSSSection, err error)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(section *CSSSection, err error))
	}

	var _section *CSSSection // out
	var _err error           // out

	_section = (*CSSSection)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.gtk_css_section_ref(arg1)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_css_section_unref((*C.GtkCssSection)(intern.C))
		},
	)
	_err = gerror.Take(unsafe.Pointer(arg2))

	f(_section, _err)
}

// ConnectParsingError signals that a parsing error occurred.
//
// The path, line and position describe the actual location of the error as
// accurately as possible.
//
// Parsing errors are never fatal, so the parsing will resume after the error.
// Errors may however cause parts of the given data or even all of it to not be
// parsed at all. So it is a useful idea to check that the parsing succeeds by
// connecting to this signal.
//
// Note that this signal may be emitted at any time as the css provider may opt
// to defer parsing parts or all of the input to a later time than when a
// loading function was called.
func (cssProvider *CSSProvider) ConnectParsingError(f func(section *CSSSection, err error)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(cssProvider, "parsing-error", false, unsafe.Pointer(C._gotk4_gtk4_CssProvider_ConnectParsingError), f)
}

// NewCSSProvider returns a newly created GtkCssProvider.
//
// The function returns the following values:
//
//    - cssProvider: new GtkCssProvider.
//
func NewCSSProvider() *CSSProvider {
	var _cret *C.GtkCssProvider // in

	_cret = C.gtk_css_provider_new()

	var _cssProvider *CSSProvider // out

	_cssProvider = wrapCSSProvider(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cssProvider
}

// LoadFromData loads data into css_provider.
//
// This clears any previously loaded information.
//
// The function takes the following parameters:
//
//    - data: CSS data loaded in memory.
//
func (cssProvider *CSSProvider) LoadFromData(data string) {
	var _arg0 *C.GtkCssProvider // out
	var _arg1 *C.char           // out
	var _arg2 C.gssize

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(cssProvider.Native()))
	_arg2 = (C.gssize)(len(data))
	_arg1 = (*C.char)(C.calloc(C.size_t((len(data) + 1)), C.size_t(C.sizeof_char)))
	copy(unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), len(data)), data)
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_css_provider_load_from_data(_arg0, _arg1, _arg2)
	runtime.KeepAlive(cssProvider)
	runtime.KeepAlive(data)
}

// LoadFromFile loads the data contained in file into css_provider.
//
// This clears any previously loaded information.
//
// The function takes the following parameters:
//
//    - file: GFile pointing to a file to load.
//
func (cssProvider *CSSProvider) LoadFromFile(file gio.Filer) {
	var _arg0 *C.GtkCssProvider // out
	var _arg1 *C.GFile          // out

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(cssProvider.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	C.gtk_css_provider_load_from_file(_arg0, _arg1)
	runtime.KeepAlive(cssProvider)
	runtime.KeepAlive(file)
}

// LoadFromPath loads the data contained in path into css_provider.
//
// This clears any previously loaded information.
//
// The function takes the following parameters:
//
//    - path of a filename to load, in the GLib filename encoding.
//
func (cssProvider *CSSProvider) LoadFromPath(path string) {
	var _arg0 *C.GtkCssProvider // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(cssProvider.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_css_provider_load_from_path(_arg0, _arg1)
	runtime.KeepAlive(cssProvider)
	runtime.KeepAlive(path)
}

// LoadFromResource loads the data contained in the resource at resource_path
// into the css_provider.
//
// This clears any previously loaded information.
//
// The function takes the following parameters:
//
//    - resourcePath: GResource resource path.
//
func (cssProvider *CSSProvider) LoadFromResource(resourcePath string) {
	var _arg0 *C.GtkCssProvider // out
	var _arg1 *C.char           // out

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(cssProvider.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(resourcePath)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gtk_css_provider_load_from_resource(_arg0, _arg1)
	runtime.KeepAlive(cssProvider)
	runtime.KeepAlive(resourcePath)
}

// LoadNamed loads a theme from the usual theme paths.
//
// The actual process of finding the theme might change between releases, but it
// is guaranteed that this function uses the same mechanism to load the theme
// that GTK uses for loading its own theme.
//
// The function takes the following parameters:
//
//    - name: theme name.
//    - variant (optional) to load, for example, "dark", or NULL for the default.
//
func (provider *CSSProvider) LoadNamed(name, variant string) {
	var _arg0 *C.GtkCssProvider // out
	var _arg1 *C.char           // out
	var _arg2 *C.char           // out

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(provider.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	if variant != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(variant)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.gtk_css_provider_load_named(_arg0, _arg1, _arg2)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(name)
	runtime.KeepAlive(variant)
}

// String converts the provider into a string representation in CSS format.
//
// Using gtk.CSSProvider.LoadFromData() with the return value from this function
// on a new provider created with gtk.CSSProvider.New will basically create a
// duplicate of this provider.
//
// The function returns the following values:
//
//    - utf8: new string representing the provider.
//
func (provider *CSSProvider) String() string {
	var _arg0 *C.GtkCssProvider // out
	var _cret *C.char           // in

	_arg0 = (*C.GtkCssProvider)(unsafe.Pointer(provider.Native()))

	_cret = C.gtk_css_provider_to_string(_arg0)
	runtime.KeepAlive(provider)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
