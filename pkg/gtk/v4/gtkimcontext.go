// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
// extern gboolean _gotk4_gtk4_IMContextClass_delete_surrounding(GtkIMContext*, int, int);
// extern gboolean _gotk4_gtk4_IMContextClass_filter_keypress(GtkIMContext*, GdkEvent*);
// extern gboolean _gotk4_gtk4_IMContextClass_get_surrounding(GtkIMContext*, char**, int*);
// extern gboolean _gotk4_gtk4_IMContextClass_get_surrounding_with_selection(GtkIMContext*, char**, int*, int*);
// extern gboolean _gotk4_gtk4_IMContextClass_retrieve_surrounding(GtkIMContext*);
// extern gboolean _gotk4_gtk4_IMContext_ConnectDeleteSurrounding(gpointer, gint, gint, guintptr);
// extern gboolean _gotk4_gtk4_IMContext_ConnectRetrieveSurrounding(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContextClass_commit(GtkIMContext*, char*);
// extern void _gotk4_gtk4_IMContextClass_focus_in(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_focus_out(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_get_preedit_string(GtkIMContext*, char**, PangoAttrList**, int*);
// extern void _gotk4_gtk4_IMContextClass_preedit_changed(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_preedit_end(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_preedit_start(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_reset(GtkIMContext*);
// extern void _gotk4_gtk4_IMContextClass_set_client_widget(GtkIMContext*, GtkWidget*);
// extern void _gotk4_gtk4_IMContextClass_set_cursor_location(GtkIMContext*, GdkRectangle*);
// extern void _gotk4_gtk4_IMContextClass_set_surrounding(GtkIMContext*, char*, int, int);
// extern void _gotk4_gtk4_IMContextClass_set_surrounding_with_selection(GtkIMContext*, char*, int, int, int);
// extern void _gotk4_gtk4_IMContextClass_set_use_preedit(GtkIMContext*, gboolean);
// extern void _gotk4_gtk4_IMContext_ConnectCommit(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectPreeditEnd(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectPreeditStart(gpointer, guintptr);
import "C"

// GTypeIMContext returns the GType for the type IMContext.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeIMContext() coreglib.Type {
	gtype := coreglib.Type(C.gtk_im_context_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalIMContext)
	return gtype
}

// IMContextOverrider contains methods that are overridable.
type IMContextOverrider interface {
	// The function takes the following parameters:
	//
	Commit(str string)
	// DeleteSurrounding asks the widget that the input context is attached to
	// delete characters around the cursor position by emitting the
	// GtkIMContext::delete_surrounding signal.
	//
	// Note that offset and n_chars are in characters not in bytes which differs
	// from the usage other places in IMContext.
	//
	// In order to use this function, you should first call
	// gtk_im_context_get_surrounding() to get the current context, and call
	// this function immediately afterwards to make sure that you know what you
	// are deleting. You should also account for the fact that even if the
	// signal was handled, the input context might not have deleted all the
	// characters that were requested to be deleted.
	//
	// This function is used by an input method that wants to make subsitutions
	// in the existing text in response to new input. It is not useful for
	// applications.
	//
	// The function takes the following parameters:
	//
	//    - offset from cursor position in chars; a negative value means start
	//      before the cursor.
	//    - nChars: number of characters to delete.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the signal was handled.
	//
	DeleteSurrounding(offset, nChars int) bool
	// FilterKeypress: allow an input method to internally handle key press and
	// release events.
	//
	// If this function returns TRUE, then no further processing should be done
	// for this key event.
	//
	// The function takes the following parameters:
	//
	//    - event: key event.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the input method handled the key event.
	//
	FilterKeypress(event gdk.Eventer) bool
	// FocusIn: notify the input method that the widget to which this input
	// context corresponds has gained focus.
	//
	// The input method may, for example, change the displayed feedback to
	// reflect this change.
	FocusIn()
	// FocusOut: notify the input method that the widget to which this input
	// context corresponds has lost focus.
	//
	// The input method may, for example, change the displayed feedback or reset
	// the contexts state to reflect this change.
	FocusOut()
	// PreeditString: retrieve the current preedit string for the input context,
	// and a list of attributes to apply to the string.
	//
	// This string should be displayed inserted at the insertion point.
	//
	// The function returns the following values:
	//
	//    - str: location to store the retrieved string. The string retrieved
	//      must be freed with g_free().
	//    - attrs: location to store the retrieved attribute list. When you are
	//      done with this list, you must unreference it with
	//      pango_attr_list_unref().
	//    - cursorPos: location to store position of cursor (in characters)
	//      within the preedit string.
	//
	PreeditString() (string, *pango.AttrList, int)
	// Surrounding retrieves context around the insertion point.
	//
	// Input methods typically want context in order to constrain input text
	// based on existing text; this is important for languages such as Thai
	// where only some sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// gtk.IMContext::retrieve-surrounding signal on the input method; in
	// response to this signal, a widget should provide as much context as is
	// available, up to an entire paragraph, by calling
	// gtk.IMContext.SetSurrounding().
	//
	// Note that there is no obligation for a widget to respond to the
	// ::retrieve-surrounding signal, so input methods must be prepared to
	// function without context.
	//
	// Deprecated: Use gtk.IMContext.GetSurroundingWithSelection() instead.
	//
	// The function returns the following values:
	//
	//    - text: location to store a UTF-8 encoded string of text holding
	//      context around the insertion point. If the function returns TRUE,
	//      then you must free the result stored in this location with g_free().
	//    - cursorIndex: location to store byte index of the insertion cursor
	//      within text.
	//    - ok: TRUE if surrounding text was provided; in this case you must free
	//      the result stored in text.
	//
	Surrounding() (string, int, bool)
	// SurroundingWithSelection retrieves context around the insertion point.
	//
	// Input methods typically want context in order to constrain input text
	// based on existing text; this is important for languages such as Thai
	// where only some sequences of characters are allowed.
	//
	// This function is implemented by emitting the
	// gtk.IMContext::retrieve-surrounding signal on the input method; in
	// response to this signal, a widget should provide as much context as is
	// available, up to an entire paragraph, by calling
	// gtk.IMContext.SetSurroundingWithSelection().
	//
	// Note that there is no obligation for a widget to respond to the
	// ::retrieve-surrounding signal, so input methods must be prepared to
	// function without context.
	//
	// The function returns the following values:
	//
	//    - text: location to store a UTF-8 encoded string of text holding
	//      context around the insertion point. If the function returns TRUE,
	//      then you must free the result stored in this location with g_free().
	//    - cursorIndex: location to store byte index of the insertion cursor
	//      within text.
	//    - anchorIndex: location to store byte index of the selection bound
	//      within text.
	//    - ok: TRUE if surrounding text was provided; in this case you must free
	//      the result stored in text.
	//
	SurroundingWithSelection() (text string, cursorIndex, anchorIndex int, ok bool)
	PreeditChanged()
	PreeditEnd()
	PreeditStart()
	// Reset: notify the input method that a change such as a change in cursor
	// position has been made.
	//
	// This will typically cause the input method to clear the preedit state.
	Reset()
	// The function returns the following values:
	//
	RetrieveSurrounding() bool
	// SetClientWidget: set the client widget for the input context.
	//
	// This is the GtkWidget holding the input focus. This widget is used in
	// order to correctly position status windows, and may also be used for
	// purposes internal to the input method.
	//
	// The function takes the following parameters:
	//
	//    - widget (optional): client widget. This may be NULL to indicate that
	//      the previous client widget no longer exists.
	//
	SetClientWidget(widget Widgetter)
	// SetCursorLocation: notify the input method that a change in cursor
	// position has been made.
	//
	// The location is relative to the client window.
	//
	// The function takes the following parameters:
	//
	//    - area: new location.
	//
	SetCursorLocation(area *gdk.Rectangle)
	// SetSurrounding sets surrounding context around the insertion point and
	// preedit string.
	//
	// This function is expected to be called in response to the
	// gtk.IMContext::retrieve-surrounding signal, and will likely have no
	// effect if called at other times.
	//
	// Deprecated: Use gtk.IMContext.SetSurroundingWithSelection() instead.
	//
	// The function takes the following parameters:
	//
	//    - text surrounding the insertion point, as UTF-8. the preedit string
	//      should not be included within text.
	//    - len: length of text, or -1 if text is nul-terminated.
	//    - cursorIndex: byte index of the insertion cursor within text.
	//
	SetSurrounding(text string, len, cursorIndex int)
	// SetSurroundingWithSelection sets surrounding context around the insertion
	// point and preedit string. This function is expected to be called in
	// response to the GtkIMContext::retrieve_surrounding signal, and will
	// likely have no effect if called at other times.
	//
	// The function takes the following parameters:
	//
	//    - text surrounding the insertion point, as UTF-8. the preedit string
	//      should not be included within text.
	//    - len: length of text, or -1 if text is nul-terminated.
	//    - cursorIndex: byte index of the insertion cursor within text.
	//    - anchorIndex: byte index of the selection bound within text.
	//
	SetSurroundingWithSelection(text string, len, cursorIndex, anchorIndex int)
	// SetUsePreedit sets whether the IM context should use the preedit string
	// to display feedback.
	//
	// If use_preedit is FALSE (default is TRUE), then the IM context may use
	// some other method to display feedback, such as displaying it in a child
	// of the root window.
	//
	// The function takes the following parameters:
	//
	//    - usePreedit: whether the IM context should use the preedit string.
	//
	SetUsePreedit(usePreedit bool)
}

// IMContext: GtkIMContext defines the interface for GTK input methods.
//
// GtkIMContext is used by GTK text input widgets like GtkText to map from key
// events to Unicode character strings.
//
// By default, GTK uses a platform-dependent default input method. On Windows,
// the default implementation is IME-based and on Wayland, it is using the
// Wayland text protocol. The choice can be overridden programmatically via the
// gtk.Settings:gtk-im-module setting. Users may set the GTK_IM_MODULE
// environment variable to override the default.
//
// Text widgets have a :im-module property (e.g. gtk.TextView:im-module) that
// may also be used to set input methods for specific widget instances. For
// instance, a certain entry widget might be expected to contain certain
// characters which would be easier to input with a specific input method.
//
// An input method may consume multiple key events in sequence before finally
// outputting the composed result. This is called *preediting*, and an input
// method may provide feedback about this process by displaying the intermediate
// composition states as preedit text.
//
// For instance, the built-in GTK input method GtkIMContextSimple implements the
// input of arbitrary Unicode code points by holding down the <kbd>Control</kbd>
// and <kbd>Shift</kbd> keys and then typing <kbd>U</kbd> followed by the
// hexadecimal digits of the code point. When releasing the <kbd>Control</kbd>
// and <kbd>Shift</kbd> keys, preediting ends and the character is inserted as
// text. For example,
//
//    Ctrl+Shift+u 2 0 A C
//
// results in the € sign.
//
// Additional input methods can be made available for use by GTK widgets as
// loadable modules. An input method module is a small shared library which
// provides a GIOExtension for the extension point named "gtk-im-module".
type IMContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*IMContext)(nil)
)

// IMContexter describes types inherited from class IMContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type IMContexter interface {
	coreglib.Objector
	baseIMContext() *IMContext
}

var _ IMContexter = (*IMContext)(nil)

func classInitIMContexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkIMContextClass)(unsafe.Pointer(gclassPtr))

	if _, ok := goval.(interface{ Commit(str string) }); ok {
		pclass.commit = (*[0]byte)(C._gotk4_gtk4_IMContextClass_commit)
	}

	if _, ok := goval.(interface{ DeleteSurrounding(offset, nChars int) bool }); ok {
		pclass.delete_surrounding = (*[0]byte)(C._gotk4_gtk4_IMContextClass_delete_surrounding)
	}

	if _, ok := goval.(interface{ FilterKeypress(event gdk.Eventer) bool }); ok {
		pclass.filter_keypress = (*[0]byte)(C._gotk4_gtk4_IMContextClass_filter_keypress)
	}

	if _, ok := goval.(interface{ FocusIn() }); ok {
		pclass.focus_in = (*[0]byte)(C._gotk4_gtk4_IMContextClass_focus_in)
	}

	if _, ok := goval.(interface{ FocusOut() }); ok {
		pclass.focus_out = (*[0]byte)(C._gotk4_gtk4_IMContextClass_focus_out)
	}

	if _, ok := goval.(interface {
		PreeditString() (string, *pango.AttrList, int)
	}); ok {
		pclass.get_preedit_string = (*[0]byte)(C._gotk4_gtk4_IMContextClass_get_preedit_string)
	}

	if _, ok := goval.(interface{ Surrounding() (string, int, bool) }); ok {
		pclass.get_surrounding = (*[0]byte)(C._gotk4_gtk4_IMContextClass_get_surrounding)
	}

	if _, ok := goval.(interface {
		SurroundingWithSelection() (text string, cursorIndex, anchorIndex int, ok bool)
	}); ok {
		pclass.get_surrounding_with_selection = (*[0]byte)(C._gotk4_gtk4_IMContextClass_get_surrounding_with_selection)
	}

	if _, ok := goval.(interface{ PreeditChanged() }); ok {
		pclass.preedit_changed = (*[0]byte)(C._gotk4_gtk4_IMContextClass_preedit_changed)
	}

	if _, ok := goval.(interface{ PreeditEnd() }); ok {
		pclass.preedit_end = (*[0]byte)(C._gotk4_gtk4_IMContextClass_preedit_end)
	}

	if _, ok := goval.(interface{ PreeditStart() }); ok {
		pclass.preedit_start = (*[0]byte)(C._gotk4_gtk4_IMContextClass_preedit_start)
	}

	if _, ok := goval.(interface{ Reset() }); ok {
		pclass.reset = (*[0]byte)(C._gotk4_gtk4_IMContextClass_reset)
	}

	if _, ok := goval.(interface{ RetrieveSurrounding() bool }); ok {
		pclass.retrieve_surrounding = (*[0]byte)(C._gotk4_gtk4_IMContextClass_retrieve_surrounding)
	}

	if _, ok := goval.(interface{ SetClientWidget(widget Widgetter) }); ok {
		pclass.set_client_widget = (*[0]byte)(C._gotk4_gtk4_IMContextClass_set_client_widget)
	}

	if _, ok := goval.(interface{ SetCursorLocation(area *gdk.Rectangle) }); ok {
		pclass.set_cursor_location = (*[0]byte)(C._gotk4_gtk4_IMContextClass_set_cursor_location)
	}

	if _, ok := goval.(interface {
		SetSurrounding(text string, len, cursorIndex int)
	}); ok {
		pclass.set_surrounding = (*[0]byte)(C._gotk4_gtk4_IMContextClass_set_surrounding)
	}

	if _, ok := goval.(interface {
		SetSurroundingWithSelection(text string, len, cursorIndex, anchorIndex int)
	}); ok {
		pclass.set_surrounding_with_selection = (*[0]byte)(C._gotk4_gtk4_IMContextClass_set_surrounding_with_selection)
	}

	if _, ok := goval.(interface{ SetUsePreedit(usePreedit bool) }); ok {
		pclass.set_use_preedit = (*[0]byte)(C._gotk4_gtk4_IMContextClass_set_use_preedit)
	}
}

//export _gotk4_gtk4_IMContextClass_commit
func _gotk4_gtk4_IMContextClass_commit(arg0 *C.GtkIMContext, arg1 *C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Commit(str string) })

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.Commit(_str)
}

//export _gotk4_gtk4_IMContextClass_delete_surrounding
func _gotk4_gtk4_IMContextClass_delete_surrounding(arg0 *C.GtkIMContext, arg1 C.int, arg2 C.int) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ DeleteSurrounding(offset, nChars int) bool })

	var _offset int // out
	var _nChars int // out

	_offset = int(arg1)
	_nChars = int(arg2)

	ok := iface.DeleteSurrounding(_offset, _nChars)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_IMContextClass_filter_keypress
func _gotk4_gtk4_IMContextClass_filter_keypress(arg0 *C.GtkIMContext, arg1 *C.GdkEvent) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FilterKeypress(event gdk.Eventer) bool })

	var _event gdk.Eventer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.Eventer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Eventer)
			return ok
		})
		rv, ok := casted.(gdk.Eventer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Eventer")
		}
		_event = rv
	}

	ok := iface.FilterKeypress(_event)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_IMContextClass_focus_in
func _gotk4_gtk4_IMContextClass_focus_in(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FocusIn() })

	iface.FocusIn()
}

//export _gotk4_gtk4_IMContextClass_focus_out
func _gotk4_gtk4_IMContextClass_focus_out(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FocusOut() })

	iface.FocusOut()
}

//export _gotk4_gtk4_IMContextClass_get_preedit_string
func _gotk4_gtk4_IMContextClass_get_preedit_string(arg0 *C.GtkIMContext, arg1 **C.char, arg2 **C.PangoAttrList, arg3 *C.int) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		PreeditString() (string, *pango.AttrList, int)
	})

	str, attrs, cursorPos := iface.PreeditString()

	*arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	*arg2 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(attrs)))
	*arg3 = C.int(cursorPos)
}

//export _gotk4_gtk4_IMContextClass_get_surrounding
func _gotk4_gtk4_IMContextClass_get_surrounding(arg0 *C.GtkIMContext, arg1 **C.char, arg2 *C.int) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Surrounding() (string, int, bool) })

	text, cursorIndex, ok := iface.Surrounding()

	*arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	*arg2 = C.int(cursorIndex)
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_IMContextClass_get_surrounding_with_selection
func _gotk4_gtk4_IMContextClass_get_surrounding_with_selection(arg0 *C.GtkIMContext, arg1 **C.char, arg2 *C.int, arg3 *C.int) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SurroundingWithSelection() (text string, cursorIndex, anchorIndex int, ok bool)
	})

	text, cursorIndex, anchorIndex, ok := iface.SurroundingWithSelection()

	*arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	*arg2 = C.int(cursorIndex)
	*arg3 = C.int(anchorIndex)
	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_IMContextClass_preedit_changed
func _gotk4_gtk4_IMContextClass_preedit_changed(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditChanged() })

	iface.PreeditChanged()
}

//export _gotk4_gtk4_IMContextClass_preedit_end
func _gotk4_gtk4_IMContextClass_preedit_end(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditEnd() })

	iface.PreeditEnd()
}

//export _gotk4_gtk4_IMContextClass_preedit_start
func _gotk4_gtk4_IMContextClass_preedit_start(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ PreeditStart() })

	iface.PreeditStart()
}

//export _gotk4_gtk4_IMContextClass_reset
func _gotk4_gtk4_IMContextClass_reset(arg0 *C.GtkIMContext) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Reset() })

	iface.Reset()
}

//export _gotk4_gtk4_IMContextClass_retrieve_surrounding
func _gotk4_gtk4_IMContextClass_retrieve_surrounding(arg0 *C.GtkIMContext) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ RetrieveSurrounding() bool })

	ok := iface.RetrieveSurrounding()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_IMContextClass_set_client_widget
func _gotk4_gtk4_IMContextClass_set_client_widget(arg0 *C.GtkIMContext, arg1 *C.GtkWidget) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetClientWidget(widget Widgetter) })

	var _widget Widgetter // out

	if arg1 != nil {
		{
			objptr := unsafe.Pointer(arg1)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	iface.SetClientWidget(_widget)
}

//export _gotk4_gtk4_IMContextClass_set_cursor_location
func _gotk4_gtk4_IMContextClass_set_cursor_location(arg0 *C.GtkIMContext, arg1 *C.GdkRectangle) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetCursorLocation(area *gdk.Rectangle) })

	var _area *gdk.Rectangle // out

	_area = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	iface.SetCursorLocation(_area)
}

//export _gotk4_gtk4_IMContextClass_set_surrounding
func _gotk4_gtk4_IMContextClass_set_surrounding(arg0 *C.GtkIMContext, arg1 *C.char, arg2 C.int, arg3 C.int) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SetSurrounding(text string, len, cursorIndex int)
	})

	var _text string     // out
	var _len int         // out
	var _cursorIndex int // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_len = int(arg2)
	_cursorIndex = int(arg3)

	iface.SetSurrounding(_text, _len, _cursorIndex)
}

//export _gotk4_gtk4_IMContextClass_set_surrounding_with_selection
func _gotk4_gtk4_IMContextClass_set_surrounding_with_selection(arg0 *C.GtkIMContext, arg1 *C.char, arg2 C.int, arg3 C.int, arg4 C.int) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SetSurroundingWithSelection(text string, len, cursorIndex, anchorIndex int)
	})

	var _text string     // out
	var _len int         // out
	var _cursorIndex int // out
	var _anchorIndex int // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_len = int(arg2)
	_cursorIndex = int(arg3)
	_anchorIndex = int(arg4)

	iface.SetSurroundingWithSelection(_text, _len, _cursorIndex, _anchorIndex)
}

//export _gotk4_gtk4_IMContextClass_set_use_preedit
func _gotk4_gtk4_IMContextClass_set_use_preedit(arg0 *C.GtkIMContext, arg1 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SetUsePreedit(usePreedit bool) })

	var _usePreedit bool // out

	if arg1 != 0 {
		_usePreedit = true
	}

	iface.SetUsePreedit(_usePreedit)
}

func wrapIMContext(obj *coreglib.Object) *IMContext {
	return &IMContext{
		Object: obj,
	}
}

func marshalIMContext(p uintptr) (interface{}, error) {
	return wrapIMContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (context *IMContext) baseIMContext() *IMContext {
	return context
}

// BaseIMContext returns the underlying base object.
func BaseIMContext(obj IMContexter) *IMContext {
	return obj.baseIMContext()
}

//export _gotk4_gtk4_IMContext_ConnectCommit
func _gotk4_gtk4_IMContext_ConnectCommit(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(str string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(str string))
	}

	var _str string // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_str)
}

// ConnectCommit signal is emitted when a complete input sequence has been
// entered by the user. This can be a single character immediately after a key
// press or the final result of preediting.
func (context *IMContext) ConnectCommit(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "commit", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectCommit), f)
}

//export _gotk4_gtk4_IMContext_ConnectDeleteSurrounding
func _gotk4_gtk4_IMContext_ConnectDeleteSurrounding(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) (cret C.gboolean) {
	var f func(offset, nChars int) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(offset, nChars int) (ok bool))
	}

	var _offset int // out
	var _nChars int // out

	_offset = int(arg1)
	_nChars = int(arg2)

	ok := f(_offset, _nChars)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectDeleteSurrounding signal is emitted when the input method needs to
// delete all or part of the context surrounding the cursor.
func (context *IMContext) ConnectDeleteSurrounding(f func(offset, nChars int) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "delete-surrounding", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectDeleteSurrounding), f)
}

//export _gotk4_gtk4_IMContext_ConnectPreeditChanged
func _gotk4_gtk4_IMContext_ConnectPreeditChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditChanged signal is emitted whenever the preedit sequence
// currently being entered has changed. It is also emitted at the end of a
// preedit sequence, in which case gtk_im_context_get_preedit_string() returns
// the empty string.
func (context *IMContext) ConnectPreeditChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditChanged), f)
}

//export _gotk4_gtk4_IMContext_ConnectPreeditEnd
func _gotk4_gtk4_IMContext_ConnectPreeditEnd(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditEnd signal is emitted when a preediting sequence has been
// completed or canceled.
func (context *IMContext) ConnectPreeditEnd(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-end", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditEnd), f)
}

//export _gotk4_gtk4_IMContext_ConnectPreeditStart
func _gotk4_gtk4_IMContext_ConnectPreeditStart(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreeditStart signal is emitted when a new preediting sequence starts.
func (context *IMContext) ConnectPreeditStart(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-start", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditStart), f)
}

//export _gotk4_gtk4_IMContext_ConnectRetrieveSurrounding
func _gotk4_gtk4_IMContext_ConnectRetrieveSurrounding(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectRetrieveSurrounding signal is emitted when the input method requires
// the context surrounding the cursor. The callback should set the input method
// surrounding context by calling the gtk_im_context_set_surrounding() method.
func (context *IMContext) ConnectRetrieveSurrounding(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "retrieve-surrounding", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectRetrieveSurrounding), f)
}

// DeleteSurrounding asks the widget that the input context is attached to
// delete characters around the cursor position by emitting the
// GtkIMContext::delete_surrounding signal.
//
// Note that offset and n_chars are in characters not in bytes which differs
// from the usage other places in IMContext.
//
// In order to use this function, you should first call
// gtk_im_context_get_surrounding() to get the current context, and call this
// function immediately afterwards to make sure that you know what you are
// deleting. You should also account for the fact that even if the signal was
// handled, the input context might not have deleted all the characters that
// were requested to be deleted.
//
// This function is used by an input method that wants to make subsitutions in
// the existing text in response to new input. It is not useful for
// applications.
//
// The function takes the following parameters:
//
//    - offset from cursor position in chars; a negative value means start before
//      the cursor.
//    - nChars: number of characters to delete.
//
// The function returns the following values:
//
//    - ok: TRUE if the signal was handled.
//
func (context *IMContext) DeleteSurrounding(offset, nChars int) bool {
	var _arg0 *C.GtkIMContext // out
	var _arg1 C.int           // out
	var _arg2 C.int           // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.int(offset)
	_arg2 = C.int(nChars)

	_cret = C.gtk_im_context_delete_surrounding(_arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(nChars)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FilterKey: allow an input method to forward key press and release events to
// another input methodm without necessarily having a GdkEvent available.
//
// The function takes the following parameters:
//
//    - press: whether to forward a key press or release event.
//    - surface the event is for.
//    - device that the event is for.
//    - time: timestamp for the event.
//    - keycode for the event.
//    - state: modifier state for the event.
//    - group: active keyboard group for the event.
//
// The function returns the following values:
//
//    - ok: TRUE if the input method handled the key event.
//
func (context *IMContext) FilterKey(press bool, surface gdk.Surfacer, device gdk.Devicer, time uint32, keycode uint, state gdk.ModifierType, group int) bool {
	var _arg0 *C.GtkIMContext   // out
	var _arg1 C.gboolean        // out
	var _arg2 *C.GdkSurface     // out
	var _arg3 *C.GdkDevice      // out
	var _arg4 C.guint32         // out
	var _arg5 C.guint           // out
	var _arg6 C.GdkModifierType // out
	var _arg7 C.int             // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if press {
		_arg1 = C.TRUE
	}
	_arg2 = (*C.GdkSurface)(unsafe.Pointer(coreglib.InternObject(surface).Native()))
	_arg3 = (*C.GdkDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))
	_arg4 = C.guint32(time)
	_arg5 = C.guint(keycode)
	_arg6 = C.GdkModifierType(state)
	_arg7 = C.int(group)

	_cret = C.gtk_im_context_filter_key(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(context)
	runtime.KeepAlive(press)
	runtime.KeepAlive(surface)
	runtime.KeepAlive(device)
	runtime.KeepAlive(time)
	runtime.KeepAlive(keycode)
	runtime.KeepAlive(state)
	runtime.KeepAlive(group)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FilterKeypress: allow an input method to internally handle key press and
// release events.
//
// If this function returns TRUE, then no further processing should be done for
// this key event.
//
// The function takes the following parameters:
//
//    - event: key event.
//
// The function returns the following values:
//
//    - ok: TRUE if the input method handled the key event.
//
func (context *IMContext) FilterKeypress(event gdk.Eventer) bool {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkEvent     // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEvent)(unsafe.Pointer(coreglib.InternObject(event).Native()))

	_cret = C.gtk_im_context_filter_keypress(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FocusIn: notify the input method that the widget to which this input context
// corresponds has gained focus.
//
// The input method may, for example, change the displayed feedback to reflect
// this change.
func (context *IMContext) FocusIn() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_focus_in(_arg0)
	runtime.KeepAlive(context)
}

// FocusOut: notify the input method that the widget to which this input context
// corresponds has lost focus.
//
// The input method may, for example, change the displayed feedback or reset the
// contexts state to reflect this change.
func (context *IMContext) FocusOut() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_focus_out(_arg0)
	runtime.KeepAlive(context)
}

// PreeditString: retrieve the current preedit string for the input context, and
// a list of attributes to apply to the string.
//
// This string should be displayed inserted at the insertion point.
//
// The function returns the following values:
//
//    - str: location to store the retrieved string. The string retrieved must be
//      freed with g_free().
//    - attrs: location to store the retrieved attribute list. When you are done
//      with this list, you must unreference it with pango_attr_list_unref().
//    - cursorPos: location to store position of cursor (in characters) within
//      the preedit string.
//
func (context *IMContext) PreeditString() (string, *pango.AttrList, int) {
	var _arg0 *C.GtkIMContext  // out
	var _arg1 *C.char          // in
	var _arg2 *C.PangoAttrList // in
	var _arg3 C.int            // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_get_preedit_string(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _str string            // out
	var _attrs *pango.AttrList // out
	var _cursorPos int         // out

	_str = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_attrs = (*pango.AttrList)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrs)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_cursorPos = int(_arg3)

	return _str, _attrs, _cursorPos
}

// Surrounding retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input text based
// on existing text; this is important for languages such as Thai where only
// some sequences of characters are allowed.
//
// This function is implemented by emitting the
// gtk.IMContext::retrieve-surrounding signal on the input method; in response
// to this signal, a widget should provide as much context as is available, up
// to an entire paragraph, by calling gtk.IMContext.SetSurrounding().
//
// Note that there is no obligation for a widget to respond to the
// ::retrieve-surrounding signal, so input methods must be prepared to function
// without context.
//
// Deprecated: Use gtk.IMContext.GetSurroundingWithSelection() instead.
//
// The function returns the following values:
//
//    - text: location to store a UTF-8 encoded string of text holding context
//      around the insertion point. If the function returns TRUE, then you must
//      free the result stored in this location with g_free().
//    - cursorIndex: location to store byte index of the insertion cursor within
//      text.
//    - ok: TRUE if surrounding text was provided; in this case you must free the
//      result stored in text.
//
func (context *IMContext) Surrounding() (string, int, bool) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.char         // in
	var _arg2 C.int           // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_im_context_get_surrounding(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(context)

	var _text string     // out
	var _cursorIndex int // out
	var _ok bool         // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_cursorIndex = int(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _text, _cursorIndex, _ok
}

// SurroundingWithSelection retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input text based
// on existing text; this is important for languages such as Thai where only
// some sequences of characters are allowed.
//
// This function is implemented by emitting the
// gtk.IMContext::retrieve-surrounding signal on the input method; in response
// to this signal, a widget should provide as much context as is available, up
// to an entire paragraph, by calling
// gtk.IMContext.SetSurroundingWithSelection().
//
// Note that there is no obligation for a widget to respond to the
// ::retrieve-surrounding signal, so input methods must be prepared to function
// without context.
//
// The function returns the following values:
//
//    - text: location to store a UTF-8 encoded string of text holding context
//      around the insertion point. If the function returns TRUE, then you must
//      free the result stored in this location with g_free().
//    - cursorIndex: location to store byte index of the insertion cursor within
//      text.
//    - anchorIndex: location to store byte index of the selection bound within
//      text.
//    - ok: TRUE if surrounding text was provided; in this case you must free the
//      result stored in text.
//
func (context *IMContext) SurroundingWithSelection() (text string, cursorIndex, anchorIndex int, ok bool) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.char         // in
	var _arg2 C.int           // in
	var _arg3 C.int           // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gtk_im_context_get_surrounding_with_selection(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _text string     // out
	var _cursorIndex int // out
	var _anchorIndex int // out
	var _ok bool         // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	_cursorIndex = int(_arg2)
	_anchorIndex = int(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _text, _cursorIndex, _anchorIndex, _ok
}

// Reset: notify the input method that a change such as a change in cursor
// position has been made.
//
// This will typically cause the input method to clear the preedit state.
func (context *IMContext) Reset() {
	var _arg0 *C.GtkIMContext // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gtk_im_context_reset(_arg0)
	runtime.KeepAlive(context)
}

// SetClientWidget: set the client widget for the input context.
//
// This is the GtkWidget holding the input focus. This widget is used in order
// to correctly position status windows, and may also be used for purposes
// internal to the input method.
//
// The function takes the following parameters:
//
//    - widget (optional): client widget. This may be NULL to indicate that the
//      previous client widget no longer exists.
//
func (context *IMContext) SetClientWidget(widget Widgetter) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if widget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	}

	C.gtk_im_context_set_client_widget(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(widget)
}

// SetCursorLocation: notify the input method that a change in cursor position
// has been made.
//
// The location is relative to the client window.
//
// The function takes the following parameters:
//
//    - area: new location.
//
func (context *IMContext) SetCursorLocation(area *gdk.Rectangle) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(area)))

	C.gtk_im_context_set_cursor_location(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(area)
}

// SetSurrounding sets surrounding context around the insertion point and
// preedit string.
//
// This function is expected to be called in response to the
// gtk.IMContext::retrieve-surrounding signal, and will likely have no effect if
// called at other times.
//
// Deprecated: Use gtk.IMContext.SetSurroundingWithSelection() instead.
//
// The function takes the following parameters:
//
//    - text surrounding the insertion point, as UTF-8. the preedit string should
//      not be included within text.
//    - len: length of text, or -1 if text is nul-terminated.
//    - cursorIndex: byte index of the insertion cursor within text.
//
func (context *IMContext) SetSurrounding(text string, len, cursorIndex int) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.char         // out
	var _arg2 C.int           // out
	var _arg3 C.int           // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(len)
	_arg3 = C.int(cursorIndex)

	C.gtk_im_context_set_surrounding(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(len)
	runtime.KeepAlive(cursorIndex)
}

// SetSurroundingWithSelection sets surrounding context around the insertion
// point and preedit string. This function is expected to be called in response
// to the GtkIMContext::retrieve_surrounding signal, and will likely have no
// effect if called at other times.
//
// The function takes the following parameters:
//
//    - text surrounding the insertion point, as UTF-8. the preedit string should
//      not be included within text.
//    - len: length of text, or -1 if text is nul-terminated.
//    - cursorIndex: byte index of the insertion cursor within text.
//    - anchorIndex: byte index of the selection bound within text.
//
func (context *IMContext) SetSurroundingWithSelection(text string, len, cursorIndex, anchorIndex int) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 *C.char         // out
	var _arg2 C.int           // out
	var _arg3 C.int           // out
	var _arg4 C.int           // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(len)
	_arg3 = C.int(cursorIndex)
	_arg4 = C.int(anchorIndex)

	C.gtk_im_context_set_surrounding_with_selection(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(len)
	runtime.KeepAlive(cursorIndex)
	runtime.KeepAlive(anchorIndex)
}

// SetUsePreedit sets whether the IM context should use the preedit string to
// display feedback.
//
// If use_preedit is FALSE (default is TRUE), then the IM context may use some
// other method to display feedback, such as displaying it in a child of the
// root window.
//
// The function takes the following parameters:
//
//    - usePreedit: whether the IM context should use the preedit string.
//
func (context *IMContext) SetUsePreedit(usePreedit bool) {
	var _arg0 *C.GtkIMContext // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.GtkIMContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if usePreedit {
		_arg1 = C.TRUE
	}

	C.gtk_im_context_set_use_preedit(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(usePreedit)
}
