// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// TestListAllTypes: return the type ids that have been registered after calling
// gtk_test_register_all_types().
//
// The function returns the following values:
//
//    - gTypes: 0-terminated array of type ids.
//
func TestListAllTypes() []externglib.Type {
	var _cret *C.GType // in
	var _arg1 C.guint  // in

	_cret = C.gtk_test_list_all_types(&_arg1)

	var _gTypes []externglib.Type // out

	{
		src := unsafe.Slice(_cret, _arg1)
		_gTypes = make([]externglib.Type, _arg1)
		for i := 0; i < int(_arg1); i++ {
			_gTypes[i] = externglib.Type(src[i])
		}
	}

	return _gTypes
}

// TestRegisterAllTypes: force registration of all core GTK object types.
//
// This allowes to refer to any of those object types via g_type_from_name()
// after calling this function.
func TestRegisterAllTypes() {
	C.gtk_test_register_all_types()
}

// TestWidgetWaitForDraw enters the main loop and waits for widget to be
// “drawn”.
//
// In this context that means it waits for the frame clock of widget to have run
// a full styling, layout and drawing cycle.
//
// This function is intended to be used for syncing with actions that depend on
// widget relayouting or on interaction with the display server.
//
// The function takes the following parameters:
//
//    - widget to wait for.
//
func TestWidgetWaitForDraw(widget Widgetter) {
	var _arg1 *C.GtkWidget // out

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.gtk_test_widget_wait_for_draw(_arg1)
	runtime.KeepAlive(widget)
}
