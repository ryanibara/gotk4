// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// TestListAllTypes: return the type ids that have been registered after calling
// gtk_test_register_all_types().
//
// The function returns the following values:
//
//    - gTypes: 0-terminated array of type ids.
//
func TestListAllTypes() []coreglib.Type {
	var _outs [1]girepository.Argument

	_info := girepository.MustFind("Gtk", "test_list_all_types")
	_gret := _info.InvokeFunction(nil, _outs[:])
	_cret := *(**C.GType)(unsafe.Pointer(&_gret))

	var _gTypes []coreglib.Type // out

	{
		src := unsafe.Slice((*C.GType)(*(**C.GType)(unsafe.Pointer(&_cret))), *(*C.guint)(unsafe.Pointer(&_outs[0])))
		_gTypes = make([]coreglib.Type, *(*C.guint)(unsafe.Pointer(&_outs[0])))
		for i := 0; i < int(*(*C.guint)(unsafe.Pointer(&_outs[0]))); i++ {
			_gTypes[i] = coreglib.Type(*(*C.GType)(unsafe.Pointer(&src[i])))
		}
	}

	return _gTypes
}

// TestRegisterAllTypes: force registration of all core GTK object types.
//
// This allowes to refer to any of those object types via g_type_from_name()
// after calling this function.
func TestRegisterAllTypes() {
	_info := girepository.MustFind("Gtk", "test_register_all_types")
	_info.InvokeFunction(nil, nil)
}

// TestWidgetWaitForDraw enters the main loop and waits for widget to be
// “drawn”.
//
// In this context that means it waits for the frame clock of widget to have run
// a full styling, layout and drawing cycle.
//
// This function is intended to be used for syncing with actions that depend on
// widget relayouting or on interaction with the display server.
//
// The function takes the following parameters:
//
//    - widget to wait for.
//
func TestWidgetWaitForDraw(widget Widgetter) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	_info := girepository.MustFind("Gtk", "test_widget_wait_for_draw")
	_info.InvokeFunction(_args[:], nil)

	runtime.KeepAlive(widget)
}
