// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkorientable.go.
var GTypeOrientable = coreglib.Type(C.gtk_orientable_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeOrientable, F: marshalOrientable},
	})
}

// OrientableOverrider contains methods that are overridable.
type OrientableOverrider interface {
}

// Orientable: GtkOrientable interface is implemented by all widgets that can be
// oriented horizontally or vertically.
//
// GtkOrientable is more flexible in that it allows the orientation to be
// changed at runtime, allowing the widgets to “flip”.
//
// Orientable wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Orientable struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Orientable)(nil)
)

// Orientabler describes Orientable's interface methods.
type Orientabler interface {
	coreglib.Objector

	baseOrientable() *Orientable
}

var _ Orientabler = (*Orientable)(nil)

func ifaceInitOrientabler(gifacePtr, data C.gpointer) {
}

func wrapOrientable(obj *coreglib.Object) *Orientable {
	return &Orientable{
		Object: obj,
	}
}

func marshalOrientable(p uintptr) (interface{}, error) {
	return wrapOrientable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Orientable) baseOrientable() *Orientable {
	return v
}

// BaseOrientable returns the underlying base object.
func BaseOrientable(obj Orientabler) *Orientable {
	return obj.baseOrientable()
}
