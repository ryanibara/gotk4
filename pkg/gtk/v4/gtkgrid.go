// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeGrid returns the GType for the type Grid.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeGrid() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "Grid").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalGrid)
	return gtype
}

// GridOverrider contains methods that are overridable.
type GridOverrider interface {
}

// Grid: GtkGrid is a container which arranges its child widgets in rows and
// columns.
//
// !An example GtkGrid (grid.png)
//
// It supports arbitrary positions and horizontal/vertical spans.
//
// Children are added using gtk.Grid.Attach(). They can span multiple rows or
// columns. It is also possible to add a child next to an existing child, using
// gtk.Grid.AttachNextTo(). To remove a child from the grid, use
// gtk.Grid.Remove().
//
// The behaviour of GtkGrid when several children occupy the same grid cell is
// undefined.
//
//
// GtkGrid as GtkBuildable
//
// Every child in a GtkGrid has access to a custom gtk.Buildable element, called
// ´<layout>´. It can by used to specify a position in the grid and optionally
// spans. All properties that can be used in the ´<layout>´ element are
// implemented by gtk.GridLayoutChild.
//
// It is implemented by GtkWidget using gtk.LayoutManager.
//
// To showcase it, here is a simple example:
//
//    <object class="GtkGrid" id="my_grid">
//      <child>
//        <object class="GtkButton" id="button1">
//          <property name="label">Button 1</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button2">
//          <property name="label">Button 2</property>
//          <layout>
//            <property name="column">1</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button3">
//          <property name="label">Button 3</property>
//          <layout>
//            <property name="column">2</property>
//            <property name="row">0</property>
//            <property name="row-span">2</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button4">
//          <property name="label">Button 4</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">1</property>
//            <property name="column-span">2</property>
//          </layout>
//        </object>
//      </child>
//    </object>
//
//
// It organizes the first two buttons side-by-side in one cell each. The third
// button is in the last column but spans across two rows. This is defined by
// the ´row-span´ property. The last button is located in the second row and
// spans across two columns, which is defined by the ´column-span´ property.
//
//
// CSS nodes
//
// GtkGrid uses a single CSS node with name grid.
//
//
// Accessibility
//
// GtkGrid uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type Grid struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Grid)(nil)
	_ coreglib.Objector = (*Grid)(nil)
)

func classInitGridder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapGrid(obj *coreglib.Object) *Grid {
	return &Grid{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalGrid(p uintptr) (interface{}, error) {
	return wrapGrid(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGrid creates a new grid widget.
//
// The function returns the following values:
//
//    - grid: new GtkGrid.
//
func NewGrid() *Grid {
	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("new_Grid", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _grid *Grid // out

	_grid = wrapGrid(coreglib.Take(unsafe.Pointer(_cret)))

	return _grid
}

// Attach adds a widget to the grid.
//
// The position of child is determined by column and row. The number of “cells”
// that child will occupy is determined by width and height.
//
// The function takes the following parameters:
//
//    - child: widget to add.
//    - column number to attach the left side of child to.
//    - row number to attach the top side of child to.
//    - width: number of columns that child will span.
//    - height: number of rows that child will span.
//
func (grid *Grid) Attach(child Widgetter, column, row, width, height int32) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(column)
	*(*C.int)(unsafe.Pointer(&_args[3])) = C.int(row)
	*(*C.int)(unsafe.Pointer(&_args[4])) = C.int(width)
	*(*C.int)(unsafe.Pointer(&_args[5])) = C.int(height)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("attach", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(child)
	runtime.KeepAlive(column)
	runtime.KeepAlive(row)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// BaselineRow returns which row defines the global baseline of grid.
//
// The function returns the following values:
//
//    - gint: row index defining the global baseline.
//
func (grid *Grid) BaselineRow() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_baseline_row", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// ChildAt gets the child of grid whose area covers the grid cell at column,
// row.
//
// The function takes the following parameters:
//
//    - column: left edge of the cell.
//    - row: top edge of the cell.
//
// The function returns the following values:
//
//    - widget (optional): child at the given position, or NULL.
//
func (grid *Grid) ChildAt(column, row int32) Widgetter {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(column)
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(row)

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_child_at", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)
	runtime.KeepAlive(column)
	runtime.KeepAlive(row)

	var _widget Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// ColumnHomogeneous returns whether all columns of grid have the same width.
//
// The function returns the following values:
//
//    - ok: whether all columns of grid have the same width.
//
func (grid *Grid) ColumnHomogeneous() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_column_homogeneous", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ColumnSpacing returns the amount of space between the columns of grid.
//
// The function returns the following values:
//
//    - guint: column spacing of grid.
//
func (grid *Grid) ColumnSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_column_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// RowHomogeneous returns whether all rows of grid have the same height.
//
// The function returns the following values:
//
//    - ok: whether all rows of grid have the same height.
//
func (grid *Grid) RowHomogeneous() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_row_homogeneous", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// RowSpacing returns the amount of space between the rows of grid.
//
// The function returns the following values:
//
//    - guint: row spacing of grid.
//
func (grid *Grid) RowSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_row_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// InsertColumn inserts a column at the specified position.
//
// Children which are attached at or to the right of this position are moved one
// column to the right. Children which span across this position are grown to
// span the new column.
//
// The function takes the following parameters:
//
//    - position to insert the column at.
//
func (grid *Grid) InsertColumn(position int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("insert_column", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(position)
}

// InsertRow inserts a row at the specified position.
//
// Children which are attached at or below this position are moved one row down.
// Children which span across this position are grown to span the new row.
//
// The function takes the following parameters:
//
//    - position to insert the row at.
//
func (grid *Grid) InsertRow(position int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("insert_row", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(position)
}

// QueryChild queries the attach points and spans of child inside the given
// GtkGrid.
//
// The function takes the following parameters:
//
//    - child: GtkWidget child of grid.
//
// The function returns the following values:
//
//    - column (optional) used to attach the left side of child.
//    - row (optional) used to attach the top side of child.
//    - width (optional): number of columns child spans.
//    - height (optional): number of rows child spans.
//
func (grid *Grid) QueryChild(child Widgetter) (column, row, width, height int32) {
	var _args [2]girepository.Argument
	var _outs [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "Grid").InvokeMethod("query_child", _args[:], _outs[:])

	runtime.KeepAlive(grid)
	runtime.KeepAlive(child)

	var _column int32 // out
	var _row int32    // out
	var _width int32  // out
	var _height int32 // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_column = *(*int32)(unsafe.Pointer(_outs[0]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[1])) != nil {
		_row = *(*int32)(unsafe.Pointer(_outs[1]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[2])) != nil {
		_width = *(*int32)(unsafe.Pointer(_outs[2]))
	}
	if *(**C.void)(unsafe.Pointer(&_outs[3])) != nil {
		_height = *(*int32)(unsafe.Pointer(_outs[3]))
	}

	return _column, _row, _width, _height
}

// Remove removes a child from grid.
//
// The child must have been added with gtk.Grid.Attach() or
// gtk.Grid.AttachNextTo().
//
// The function takes the following parameters:
//
//    - child widget to remove.
//
func (grid *Grid) Remove(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "Grid").InvokeMethod("remove", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(child)
}

// RemoveColumn removes a column from the grid.
//
// Children that are placed in this column are removed, spanning children that
// overlap this column have their width reduced by one, and children after the
// column are moved to the left.
//
// The function takes the following parameters:
//
//    - position of the column to remove.
//
func (grid *Grid) RemoveColumn(position int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("remove_column", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(position)
}

// RemoveRow removes a row from the grid.
//
// Children that are placed in this row are removed, spanning children that
// overlap this row have their height reduced by one, and children below the row
// are moved up.
//
// The function takes the following parameters:
//
//    - position of the row to remove.
//
func (grid *Grid) RemoveRow(position int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("remove_row", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(position)
}

// SetBaselineRow sets which row defines the global baseline for the entire
// grid.
//
// Each row in the grid can have its own local baseline, but only one of those
// is global, meaning it will be the baseline in the parent of the grid.
//
// The function takes the following parameters:
//
//    - row index.
//
func (grid *Grid) SetBaselineRow(row int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(row)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_baseline_row", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(row)
}

// SetColumnHomogeneous sets whether all columns of grid will have the same
// width.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to make columns homogeneous.
//
func (grid *Grid) SetColumnHomogeneous(homogeneous bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	if homogeneous {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_column_homogeneous", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(homogeneous)
}

// SetColumnSpacing sets the amount of space between columns of grid.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between columns.
//
func (grid *Grid) SetColumnSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_column_spacing", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(spacing)
}

// SetRowHomogeneous sets whether all rows of grid will have the same height.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to make rows homogeneous.
//
func (grid *Grid) SetRowHomogeneous(homogeneous bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	if homogeneous {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_row_homogeneous", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(homogeneous)
}

// SetRowSpacing sets the amount of space between rows of grid.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between rows.
//
func (grid *Grid) SetRowSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_row_spacing", _args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(spacing)
}
