// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkgrid.go.
var GTypeGrid = coreglib.Type(C.gtk_grid_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeGrid, F: marshalGrid},
	})
}

// GridOverrider contains methods that are overridable.
type GridOverrider interface {
}

// Grid: GtkGrid is a container which arranges its child widgets in rows and
// columns.
//
// !An example GtkGrid (grid.png)
//
// It supports arbitrary positions and horizontal/vertical spans.
//
// Children are added using gtk.Grid.Attach(). They can span multiple rows or
// columns. It is also possible to add a child next to an existing child, using
// gtk.Grid.AttachNextTo(). To remove a child from the grid, use
// gtk.Grid.Remove().
//
// The behaviour of GtkGrid when several children occupy the same grid cell is
// undefined.
//
//
// GtkGrid as GtkBuildable
//
// Every child in a GtkGrid has access to a custom gtk.Buildable element, called
// ´<layout>´. It can by used to specify a position in the grid and optionally
// spans. All properties that can be used in the ´<layout>´ element are
// implemented by gtk.GridLayoutChild.
//
// It is implemented by GtkWidget using gtk.LayoutManager.
//
// To showcase it, here is a simple example:
//
//    <object class="GtkGrid" id="my_grid">
//      <child>
//        <object class="GtkButton" id="button1">
//          <property name="label">Button 1</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button2">
//          <property name="label">Button 2</property>
//          <layout>
//            <property name="column">1</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button3">
//          <property name="label">Button 3</property>
//          <layout>
//            <property name="column">2</property>
//            <property name="row">0</property>
//            <property name="row-span">2</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button4">
//          <property name="label">Button 4</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">1</property>
//            <property name="column-span">2</property>
//          </layout>
//        </object>
//      </child>
//    </object>
//
//
// It organizes the first two buttons side-by-side in one cell each. The third
// button is in the last column but spans across two rows. This is defined by
// the ´row-span´ property. The last button is located in the second row and
// spans across two columns, which is defined by the ´column-span´ property.
//
//
// CSS nodes
//
// GtkGrid uses a single CSS node with name grid.
//
//
// Accessibility
//
// GtkGrid uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type Grid struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Grid)(nil)
	_ coreglib.Objector = (*Grid)(nil)
)

func classInitGridder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapGrid(obj *coreglib.Object) *Grid {
	return &Grid{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalGrid(p uintptr) (interface{}, error) {
	return wrapGrid(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGrid creates a new grid widget.
//
// The function returns the following values:
//
//    - grid: new GtkGrid.
//
func NewGrid() *Grid {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("new_Grid", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _grid *Grid // out

	_grid = wrapGrid(coreglib.Take(unsafe.Pointer(_cret)))

	return _grid
}

// ColumnHomogeneous returns whether all columns of grid have the same width.
//
// The function returns the following values:
//
//    - ok: whether all columns of grid have the same width.
//
func (grid *Grid) ColumnHomogeneous() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**Grid)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_column_homogeneous", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ColumnSpacing returns the amount of space between the columns of grid.
//
// The function returns the following values:
//
//    - guint: column spacing of grid.
//
func (grid *Grid) ColumnSpacing() uint {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.guint // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**Grid)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_column_spacing", args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// RowHomogeneous returns whether all rows of grid have the same height.
//
// The function returns the following values:
//
//    - ok: whether all rows of grid have the same height.
//
func (grid *Grid) RowHomogeneous() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**Grid)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_row_homogeneous", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RowSpacing returns the amount of space between the rows of grid.
//
// The function returns the following values:
//
//    - guint: row spacing of grid.
//
func (grid *Grid) RowSpacing() uint {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.guint // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	*(**Grid)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Grid").InvokeMethod("get_row_spacing", args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(grid)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Remove removes a child from grid.
//
// The child must have been added with gtk.Grid.Attach() or
// gtk.Grid.AttachNextTo().
//
// The function takes the following parameters:
//
//    - child widget to remove.
//
func (grid *Grid) Remove(child Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Grid)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Grid").InvokeMethod("remove", args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(child)
}

// SetColumnHomogeneous sets whether all columns of grid will have the same
// width.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to make columns homogeneous.
//
func (grid *Grid) SetColumnHomogeneous(homogeneous bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}
	*(**Grid)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_column_homogeneous", args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(homogeneous)
}

// SetColumnSpacing sets the amount of space between columns of grid.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between columns.
//
func (grid *Grid) SetColumnSpacing(spacing uint) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	_arg1 = C.guint(spacing)
	*(**Grid)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_column_spacing", args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(spacing)
}

// SetRowHomogeneous sets whether all rows of grid will have the same height.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to make rows homogeneous.
//
func (grid *Grid) SetRowHomogeneous(homogeneous bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}
	*(**Grid)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_row_homogeneous", args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(homogeneous)
}

// SetRowSpacing sets the amount of space between rows of grid.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between rows.
//
func (grid *Grid) SetRowSpacing(spacing uint) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(grid).Native()))
	_arg1 = C.guint(spacing)
	*(**Grid)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Grid").InvokeMethod("set_row_spacing", args[:], nil)

	runtime.KeepAlive(grid)
	runtime.KeepAlive(spacing)
}
