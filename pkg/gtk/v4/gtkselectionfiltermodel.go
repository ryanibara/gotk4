// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// GType values.
var (
	GTypeSelectionFilterModel = coreglib.Type(C.gtk_selection_filter_model_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSelectionFilterModel, F: marshalSelectionFilterModel},
	})
}

// SelectionFilterModelOverrider contains methods that are overridable.
type SelectionFilterModelOverrider interface {
}

// SelectionFilterModel: GtkSelectionFilterModel is a list model that presents
// the selection from a GtkSelectionModel.
type SelectionFilterModel struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*SelectionFilterModel)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeSelectionFilterModel,
		GoType:    reflect.TypeOf((*SelectionFilterModel)(nil)),
		InitClass: initClassSelectionFilterModel,
	})
}

func initClassSelectionFilterModel(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface {
		InitSelectionFilterModel(*SelectionFilterModelClass)
	}); ok {
		klass := (*SelectionFilterModelClass)(gextras.NewStructNative(gclass))
		goval.InitSelectionFilterModel(klass)
	}
}

func wrapSelectionFilterModel(obj *coreglib.Object) *SelectionFilterModel {
	return &SelectionFilterModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalSelectionFilterModel(p uintptr) (interface{}, error) {
	return wrapSelectionFilterModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSelectionFilterModel creates a new GtkSelectionFilterModel that will
// include the selected items from the underlying selection model.
//
// The function takes the following parameters:
//
//    - model (optional): selection model to filter, or NULL.
//
// The function returns the following values:
//
//    - selectionFilterModel: new GtkSelectionFilterModel.
//
func NewSelectionFilterModel(model SelectionModeller) *SelectionFilterModel {
	var _arg1 *C.GtkSelectionModel       // out
	var _cret *C.GtkSelectionFilterModel // in

	if model != nil {
		_arg1 = (*C.GtkSelectionModel)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}

	_cret = C.gtk_selection_filter_model_new(_arg1)
	runtime.KeepAlive(model)

	var _selectionFilterModel *SelectionFilterModel // out

	_selectionFilterModel = wrapSelectionFilterModel(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _selectionFilterModel
}

// Model gets the model currently filtered or NULL if none.
//
// The function returns the following values:
//
//    - selectionModel (optional): model that gets filtered.
//
func (self *SelectionFilterModel) Model() *SelectionModel {
	var _arg0 *C.GtkSelectionFilterModel // out
	var _cret *C.GtkSelectionModel       // in

	_arg0 = (*C.GtkSelectionFilterModel)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gtk_selection_filter_model_get_model(_arg0)
	runtime.KeepAlive(self)

	var _selectionModel *SelectionModel // out

	if _cret != nil {
		_selectionModel = wrapSelectionModel(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _selectionModel
}

// SetModel sets the model to be filtered.
//
// Note that GTK makes no effort to ensure that model conforms to the item type
// of self. It assumes that the caller knows what they are doing and have set up
// an appropriate filter to ensure that item types match.
//
// The function takes the following parameters:
//
//    - model (optional) to be filtered.
//
func (self *SelectionFilterModel) SetModel(model SelectionModeller) {
	var _arg0 *C.GtkSelectionFilterModel // out
	var _arg1 *C.GtkSelectionModel       // out

	_arg0 = (*C.GtkSelectionFilterModel)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if model != nil {
		_arg1 = (*C.GtkSelectionModel)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}

	C.gtk_selection_filter_model_set_model(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(model)
}

// SelectionFilterModelClass: instance of this type is always passed by
// reference.
type SelectionFilterModelClass struct {
	*selectionFilterModelClass
}

// selectionFilterModelClass is the struct that's finalized.
type selectionFilterModelClass struct {
	native *C.GtkSelectionFilterModelClass
}
