// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk4_EventControllerFocus_ConnectEnter(gpointer, guintptr);
// extern void _gotk4_gtk4_EventControllerFocus_ConnectLeave(gpointer, guintptr);
import "C"

// glib.Type values for gtkeventcontrollerfocus.go.
var GTypeEventControllerFocus = coreglib.Type(C.gtk_event_controller_focus_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeEventControllerFocus, F: marshalEventControllerFocus},
	})
}

// EventControllerFocusOverrider contains methods that are overridable.
type EventControllerFocusOverrider interface {
}

// EventControllerFocus: GtkEventControllerFocus is an event controller to keep
// track of keyboard focus.
//
// The event controller offers gtk.EventControllerFocus::enter and
// gtk.EventControllerFocus::leave signals, as well as
// gtk.EventControllerFocus:is-focus and gtk.EventControllerFocus:contains-focus
// properties which are updated to reflect focus changes inside the widget
// hierarchy that is rooted at the controllers widget.
type EventControllerFocus struct {
	_ [0]func() // equal guard
	EventController
}

var (
	_ EventControllerer = (*EventControllerFocus)(nil)
)

func classInitEventControllerFocusser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapEventControllerFocus(obj *coreglib.Object) *EventControllerFocus {
	return &EventControllerFocus{
		EventController: EventController{
			Object: obj,
		},
	}
}

func marshalEventControllerFocus(p uintptr) (interface{}, error) {
	return wrapEventControllerFocus(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_EventControllerFocus_ConnectEnter
func _gotk4_gtk4_EventControllerFocus_ConnectEnter(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectEnter is emitted whenever the focus enters into the widget or one of
// its descendents.
//
// Note that this means you may not get an ::enter signal even though the widget
// becomes the focus location, in certain cases (such as when the focus moves
// from a descendent of the widget to the widget itself). If you are interested
// in these cases, you can monitor the gtk.EventControllerFocus:is-focus
// property for changes.
func (self *EventControllerFocus) ConnectEnter(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "enter", false, unsafe.Pointer(C._gotk4_gtk4_EventControllerFocus_ConnectEnter), f)
}

//export _gotk4_gtk4_EventControllerFocus_ConnectLeave
func _gotk4_gtk4_EventControllerFocus_ConnectLeave(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectLeave is emitted whenever the focus leaves the widget hierarchy that
// is rooted at the widget that the controller is attached to.
//
// Note that this means you may not get a ::leave signal even though the focus
// moves away from the widget, in certain cases (such as when the focus moves
// from the widget to a descendent). If you are interested in these cases, you
// can monitor the gtk.EventControllerFocus:is-focus property for changes.
func (self *EventControllerFocus) ConnectLeave(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "leave", false, unsafe.Pointer(C._gotk4_gtk4_EventControllerFocus_ConnectLeave), f)
}

// NewEventControllerFocus creates a new event controller that will handle focus
// events.
//
// The function returns the following values:
//
//    - eventControllerFocus: new GtkEventControllerFocus.
//
func NewEventControllerFocus() *EventControllerFocus {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "EventControllerFocus").InvokeMethod("new_EventControllerFocus", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _eventControllerFocus *EventControllerFocus // out

	_eventControllerFocus = wrapEventControllerFocus(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _eventControllerFocus
}

// ContainsFocus returns TRUE if focus is within self or one of its children.
//
// The function returns the following values:
//
//    - ok: TRUE if focus is within self or one of its children.
//
func (self *EventControllerFocus) ContainsFocus() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**EventControllerFocus)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "EventControllerFocus").InvokeMethod("contains_focus", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsFocus returns TRUE if focus is within self, but not one of its children.
//
// The function returns the following values:
//
//    - ok: TRUE if focus is within self, but not one of its children.
//
func (self *EventControllerFocus) IsFocus() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**EventControllerFocus)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "EventControllerFocus").InvokeMethod("is_focus", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
