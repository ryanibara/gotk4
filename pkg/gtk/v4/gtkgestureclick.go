// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_GestureClick_ConnectPressed(gpointer, gint, gdouble, gdouble, guintptr);
// extern void _gotk4_gtk4_GestureClick_ConnectReleased(gpointer, gint, gdouble, gdouble, guintptr);
// extern void _gotk4_gtk4_GestureClick_ConnectStopped(gpointer, guintptr);
// extern void _gotk4_gtk4_GestureClick_ConnectUnpairedRelease(gpointer, gdouble, gdouble, guint, void*, guintptr);
import "C"

// GTypeGestureClick returns the GType for the type GestureClick.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeGestureClick() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "GestureClick").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalGestureClick)
	return gtype
}

// GestureClick: GtkGestureClick is a GtkGesture implementation for clicks.
//
// It is able to recognize multiple clicks on a nearby zone, which can be
// listened for through the gtk.GestureClick::pressed signal. Whenever time or
// distance between clicks exceed the GTK defaults, gtk.GestureClick::stopped is
// emitted, and the click counter is reset.
type GestureClick struct {
	_ [0]func() // equal guard
	GestureSingle
}

var (
	_ Gesturer = (*GestureClick)(nil)
)

func wrapGestureClick(obj *coreglib.Object) *GestureClick {
	return &GestureClick{
		GestureSingle: GestureSingle{
			Gesture: Gesture{
				EventController: EventController{
					Object: obj,
				},
			},
		},
	}
}

func marshalGestureClick(p uintptr) (interface{}, error) {
	return wrapGestureClick(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_GestureClick_ConnectPressed
func _gotk4_gtk4_GestureClick_ConnectPressed(arg0 C.gpointer, arg1 C.gint, arg2 C.gdouble, arg3 C.gdouble, arg4 C.guintptr) {
	var f func(nPress int32, x, y float64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(nPress int32, x, y float64))
	}

	var _nPress int32 // out
	var _x float64    // out
	var _y float64    // out

	_nPress = int32(arg1)
	_x = float64(arg2)
	_y = float64(arg3)

	f(_nPress, _x, _y)
}

// ConnectPressed is emitted whenever a button or touch press happens.
func (v *GestureClick) ConnectPressed(f func(nPress int32, x, y float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "pressed", false, unsafe.Pointer(C._gotk4_gtk4_GestureClick_ConnectPressed), f)
}

//export _gotk4_gtk4_GestureClick_ConnectReleased
func _gotk4_gtk4_GestureClick_ConnectReleased(arg0 C.gpointer, arg1 C.gint, arg2 C.gdouble, arg3 C.gdouble, arg4 C.guintptr) {
	var f func(nPress int32, x, y float64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(nPress int32, x, y float64))
	}

	var _nPress int32 // out
	var _x float64    // out
	var _y float64    // out

	_nPress = int32(arg1)
	_x = float64(arg2)
	_y = float64(arg3)

	f(_nPress, _x, _y)
}

// ConnectReleased is emitted when a button or touch is released.
//
// n_press will report the number of press that is paired to this event, note
// that gtk.GestureClick::stopped may have been emitted between the press and
// its release, n_press will only start over at the next press.
func (v *GestureClick) ConnectReleased(f func(nPress int32, x, y float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "released", false, unsafe.Pointer(C._gotk4_gtk4_GestureClick_ConnectReleased), f)
}

//export _gotk4_gtk4_GestureClick_ConnectStopped
func _gotk4_gtk4_GestureClick_ConnectStopped(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectStopped is emitted whenever any time/distance threshold has been
// exceeded.
func (v *GestureClick) ConnectStopped(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "stopped", false, unsafe.Pointer(C._gotk4_gtk4_GestureClick_ConnectStopped), f)
}

//export _gotk4_gtk4_GestureClick_ConnectUnpairedRelease
func _gotk4_gtk4_GestureClick_ConnectUnpairedRelease(arg0 C.gpointer, arg1 C.gdouble, arg2 C.gdouble, arg3 C.guint, arg4 *C.void, arg5 C.guintptr) {
	var f func(x, y float64, button uint32, sequence *gdk.EventSequence)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y float64, button uint32, sequence *gdk.EventSequence))
	}

	var _x float64                   // out
	var _y float64                   // out
	var _button uint32               // out
	var _sequence *gdk.EventSequence // out

	_x = float64(arg1)
	_y = float64(arg2)
	_button = uint32(arg3)
	_sequence = (*gdk.EventSequence)(gextras.NewStructNative(unsafe.Pointer(arg4)))

	f(_x, _y, _button, _sequence)
}

// ConnectUnpairedRelease is emitted whenever the gesture receives a release
// event that had no previous corresponding press.
//
// Due to implicit grabs, this can only happen on situations where input is
// grabbed elsewhere mid-press or the pressed widget voluntarily relinquishes
// its implicit grab.
func (v *GestureClick) ConnectUnpairedRelease(f func(x, y float64, button uint32, sequence *gdk.EventSequence)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "unpaired-release", false, unsafe.Pointer(C._gotk4_gtk4_GestureClick_ConnectUnpairedRelease), f)
}

// NewGestureClick returns a newly created GtkGesture that recognizes single and
// multiple presses.
//
// The function returns the following values:
//
//    - gestureClick: newly created GtkGestureClick.
//
func NewGestureClick() *GestureClick {
	_gret := girepository.MustFind("Gtk", "GestureClick").InvokeMethod("new_GestureClick", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _gestureClick *GestureClick // out

	_gestureClick = wrapGestureClick(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _gestureClick
}
