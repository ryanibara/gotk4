// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkprintsettings.go.
var GTypePrintSettings = coreglib.Type(C.gtk_print_settings_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypePrintSettings, F: marshalPrintSettings},
	})
}

const PRINT_SETTINGS_COLLATE = "collate"
const PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
const PRINT_SETTINGS_DITHER = "dither"
const PRINT_SETTINGS_DUPLEX = "duplex"
const PRINT_SETTINGS_FINISHINGS = "finishings"
const PRINT_SETTINGS_MEDIA_TYPE = "media-type"
const PRINT_SETTINGS_NUMBER_UP = "number-up"
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
const PRINT_SETTINGS_N_COPIES = "n-copies"
const PRINT_SETTINGS_ORIENTATION = "orientation"

// PRINT_SETTINGS_OUTPUT_BASENAME: key used by the “Print to file” printer to
// store the file name of the output without the path to the directory and the
// file extension.
const PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
const PRINT_SETTINGS_OUTPUT_BIN = "output-bin"

// PRINT_SETTINGS_OUTPUT_DIR: key used by the “Print to file” printer to store
// the directory to which the output should be written.
const PRINT_SETTINGS_OUTPUT_DIR = "output-dir"

// PRINT_SETTINGS_OUTPUT_FILE_FORMAT: key used by the “Print to file” printer to
// store the format of the output. The supported values are “PS” and “PDF”.
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"

// PRINT_SETTINGS_OUTPUT_URI: key used by the “Print to file” printer to store
// the URI to which the output should be written. GTK itself supports only
// “file://” URIs.
const PRINT_SETTINGS_OUTPUT_URI = "output-uri"
const PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
const PRINT_SETTINGS_PAGE_SET = "page-set"
const PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
const PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
const PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
const PRINT_SETTINGS_PRINTER = "printer"
const PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
const PRINT_SETTINGS_PRINT_PAGES = "print-pages"
const PRINT_SETTINGS_QUALITY = "quality"
const PRINT_SETTINGS_RESOLUTION = "resolution"
const PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
const PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
const PRINT_SETTINGS_REVERSE = "reverse"
const PRINT_SETTINGS_SCALE = "scale"
const PRINT_SETTINGS_USE_COLOR = "use-color"
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"

type PrintSettingsFunc func(key, value string)

//export _gotk4_gtk4_PrintSettingsFunc
func _gotk4_gtk4_PrintSettingsFunc(arg1 *C.char, arg2 *C.char, arg3 C.gpointer) {
	var fn PrintSettingsFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PrintSettingsFunc)
	}

	var _key string   // out
	var _value string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_value = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	fn(_key, _value)
}

// PrintSettings: GtkPrintSettings object represents the settings of a print
// dialog in a system-independent way.
//
// The main use for this object is that once you’ve printed you can get a
// settings object that represents the settings the user chose, and the next
// time you print you can pass that object in so that the user doesn’t have to
// re-set all his settings.
//
// Its also possible to enumerate the settings so that you can easily save the
// settings for the next time your app runs, or even store them in a document.
// The predefined keys try to use shared values as much as possible so that
// moving such a document between systems still works.
type PrintSettings struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*PrintSettings)(nil)
)

func wrapPrintSettings(obj *coreglib.Object) *PrintSettings {
	return &PrintSettings{
		Object: obj,
	}
}

func marshalPrintSettings(p uintptr) (interface{}, error) {
	return wrapPrintSettings(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPrintSettings creates a new GtkPrintSettings object.
//
// The function returns the following values:
//
//    - printSettings: new GtkPrintSettings object.
//
func NewPrintSettings() *PrintSettings {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("new_PrintSettings", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// NewPrintSettingsFromFile reads the print settings from file_name.
//
// Returns a new GtkPrintSettings object with the restored settings, or NULL if
// an error occurred. If the file could not be loaded then error is set to
// either a GFileError or GKeyFileError.
//
// See gtk.PrintSettings.ToFile().
//
// The function takes the following parameters:
//
//    - fileName: filename to read the settings from.
//
// The function returns the following values:
//
//    - printSettings: restored GtkPrintSettings.
//
func NewPrintSettingsFromFile(fileName string) (*PrintSettings, error) {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg0))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("new_PrintSettings_from_file", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(fileName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _printSettings, _goerr
}

// NewPrintSettingsFromGVariant: deserialize print settings from an a{sv}
// variant.
//
// The variant must be in the format produced by gtk.PrintSettings.ToGVariant().
//
// The function takes the following parameters:
//
//    - variant: a{sv} GVariant.
//
// The function returns the following values:
//
//    - printSettings: new GtkPrintSettings object.
//
func NewPrintSettingsFromGVariant(variant *glib.Variant) *PrintSettings {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(variant)))
	*(**glib.Variant)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("new_PrintSettings_from_gvariant", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(variant)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// NewPrintSettingsFromKeyFile reads the print settings from the group
// group_name in key_file.
//
// Returns a new GtkPrintSettings object with the restored settings, or NULL if
// an error occurred. If the file could not be loaded then error is set to
// either GFileError or GKeyFileError.
//
// The function takes the following parameters:
//
//    - keyFile: GKeyFile to retrieve the settings from.
//    - groupName (optional): name of the group to use, or NULL to use the
//      default “Print Settings”.
//
// The function returns the following values:
//
//    - printSettings: restored GtkPrintSettings.
//
func NewPrintSettingsFromKeyFile(keyFile *glib.KeyFile, groupName string) (*PrintSettings, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	*(**glib.KeyFile)(unsafe.Pointer(&args[0])) = _arg0
	*(*string)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("new_PrintSettings_from_key_file", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _printSettings *PrintSettings // out
	var _goerr error                  // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _printSettings, _goerr
}

// Copy copies a GtkPrintSettings object.
//
// The function returns the following values:
//
//    - printSettings: newly allocated copy of other.
//
func (other *PrintSettings) Copy() *PrintSettings {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(other).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("copy", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(other)

	var _printSettings *PrintSettings // out

	_printSettings = wrapPrintSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printSettings
}

// Get looks up the string value associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - utf8: string value for key.
//
func (settings *PrintSettings) Get(key string) string {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Bool returns the boolean represented by the value that is associated with
// key.
//
// The string “true” represents TRUE, any other string FALSE.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - ok: TRUE, if key maps to a true value.
//
func (settings *PrintSettings) Bool(key string) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_bool", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Collate gets the value of GTK_PRINT_SETTINGS_COLLATE.
//
// The function returns the following values:
//
//    - ok: whether to collate the printed pages.
//
func (settings *PrintSettings) Collate() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_collate", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DefaultSource gets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
//
// The function returns the following values:
//
//    - utf8: default source.
//
func (settings *PrintSettings) DefaultSource() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_default_source", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Dither gets the value of GTK_PRINT_SETTINGS_DITHER.
//
// The function returns the following values:
//
//    - utf8: dithering that is used.
//
func (settings *PrintSettings) Dither() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_dither", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Finishings gets the value of GTK_PRINT_SETTINGS_FINISHINGS.
//
// The function returns the following values:
//
//    - utf8: finishings.
//
func (settings *PrintSettings) Finishings() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_finishings", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MediaType gets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
//
// The function returns the following values:
//
//    - utf8: media type.
//
func (settings *PrintSettings) MediaType() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_media_type", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// OutputBin gets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
//
// The function returns the following values:
//
//    - utf8: output bin.
//
func (settings *PrintSettings) OutputBin() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_output_bin", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PaperSize gets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT, converted to a
// GtkPaperSize.
//
// The function returns the following values:
//
//    - paperSize: paper size.
//
func (settings *PrintSettings) PaperSize() *PaperSize {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_paper_size", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _paperSize *PaperSize // out

	_paperSize = (*PaperSize)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_paperSize)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gtk_paper_size_free((*C.GtkPaperSize)(intern.C))
		},
	)

	return _paperSize
}

// Printer: convenience function to obtain the value of
// GTK_PRINT_SETTINGS_PRINTER.
//
// The function returns the following values:
//
//    - utf8: printer name.
//
func (settings *PrintSettings) Printer() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_printer", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Reverse gets the value of GTK_PRINT_SETTINGS_REVERSE.
//
// The function returns the following values:
//
//    - ok: whether to reverse the order of the printed pages.
//
func (settings *PrintSettings) Reverse() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_reverse", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UseColor gets the value of GTK_PRINT_SETTINGS_USE_COLOR.
//
// The function returns the following values:
//
//    - ok: whether to use color.
//
func (settings *PrintSettings) UseColor() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("get_use_color", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasKey returns TRUE, if a value is associated with key.
//
// The function takes the following parameters:
//
//    - key: key.
//
// The function returns the following values:
//
//    - ok: TRUE, if key has a value.
//
func (settings *PrintSettings) HasKey(key string) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("has_key", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadFile reads the print settings from file_name.
//
// If the file could not be loaded then error is set to either a GFileError or
// GKeyFileError.
//
// See gtk.PrintSettings.ToFile().
//
// The function takes the following parameters:
//
//    - fileName: filename to read the settings from.
//
func (settings *PrintSettings) LoadFile(fileName string) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("load_file", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LoadKeyFile reads the print settings from the group group_name in key_file.
//
// If the file could not be loaded then error is set to either a GFileError or
// GKeyFileError.
//
// The function takes the following parameters:
//
//    - keyFile: GKeyFile to retrieve the settings from.
//    - groupName (optional): name of the group to use, or NULL to use the
//      default “Print Settings”.
//
func (settings *PrintSettings) LoadKeyFile(keyFile *glib.KeyFile, groupName string) error {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg2 = (*C.void)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1
	*(**glib.KeyFile)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("load_key_file", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Set associates value with key.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value (optional): string value, or NULL.
//
func (settings *PrintSettings) Set(key, value string) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value != "" {
		_arg2 = (*C.void)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetBool sets key to a boolean value.
//
// The function takes the following parameters:
//
//    - key: key.
//    - value: boolean.
//
func (settings *PrintSettings) SetBool(key string, value bool) {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _arg2 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value {
		_arg2 = C.TRUE
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_bool", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetCollate sets the value of GTK_PRINT_SETTINGS_COLLATE.
//
// The function takes the following parameters:
//
//    - collate: whether to collate the output.
//
func (settings *PrintSettings) SetCollate(collate bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if collate {
		_arg1 = C.TRUE
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_collate", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(collate)
}

// SetDefaultSource sets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
//
// The function takes the following parameters:
//
//    - defaultSource: default source.
//
func (settings *PrintSettings) SetDefaultSource(defaultSource string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(defaultSource)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_default_source", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(defaultSource)
}

// SetDither sets the value of GTK_PRINT_SETTINGS_DITHER.
//
// The function takes the following parameters:
//
//    - dither: dithering that is used.
//
func (settings *PrintSettings) SetDither(dither string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(dither)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_dither", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(dither)
}

// SetFinishings sets the value of GTK_PRINT_SETTINGS_FINISHINGS.
//
// The function takes the following parameters:
//
//    - finishings: finishings.
//
func (settings *PrintSettings) SetFinishings(finishings string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(finishings)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_finishings", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(finishings)
}

// SetMediaType sets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.
//
// The set of media types is defined in PWG 5101.1-2002 PWG.
//
// The function takes the following parameters:
//
//    - mediaType: media type.
//
func (settings *PrintSettings) SetMediaType(mediaType string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(mediaType)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_media_type", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(mediaType)
}

// SetOutputBin sets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.
//
// The function takes the following parameters:
//
//    - outputBin: output bin.
//
func (settings *PrintSettings) SetOutputBin(outputBin string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(outputBin)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_output_bin", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(outputBin)
}

// SetPaperSize sets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT,
// GTK_PRINT_SETTINGS_PAPER_WIDTH and GTK_PRINT_SETTINGS_PAPER_HEIGHT.
//
// The function takes the following parameters:
//
//    - paperSize: paper size.
//
func (settings *PrintSettings) SetPaperSize(paperSize *PaperSize) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(paperSize)))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_paper_size", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(paperSize)
}

// SetPrinter: convenience function to set GTK_PRINT_SETTINGS_PRINTER to
// printer.
//
// The function takes the following parameters:
//
//    - printer name.
//
func (settings *PrintSettings) SetPrinter(printer string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(printer)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_printer", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(printer)
}

// SetReverse sets the value of GTK_PRINT_SETTINGS_REVERSE.
//
// The function takes the following parameters:
//
//    - reverse: whether to reverse the output.
//
func (settings *PrintSettings) SetReverse(reverse bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if reverse {
		_arg1 = C.TRUE
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_reverse", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(reverse)
}

// SetUseColor sets the value of GTK_PRINT_SETTINGS_USE_COLOR.
//
// The function takes the following parameters:
//
//    - useColor: whether to use color.
//
func (settings *PrintSettings) SetUseColor(useColor bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if useColor {
		_arg1 = C.TRUE
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("set_use_color", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(useColor)
}

// ToFile: this function saves the print settings from settings to file_name.
//
// If the file could not be written then error is set to either a GFileError or
// GKeyFileError.
//
// The function takes the following parameters:
//
//    - fileName: file to save to.
//
func (settings *PrintSettings) ToFile(fileName string) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("to_file", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(fileName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ToGVariant: serialize print settings to an a{sv} variant.
//
// The function returns the following values:
//
//    - variant: new, floating, GVariant.
//
func (settings *PrintSettings) ToGVariant() *glib.Variant {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	*(**PrintSettings)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("to_gvariant", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(settings)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_variant_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	return _variant
}

// ToKeyFile: this function adds the print settings from settings to key_file.
//
// The function takes the following parameters:
//
//    - keyFile: GKeyFile to save the print settings to.
//    - groupName (optional): group to add the settings to in key_file, or NULL
//      to use the default “Print Settings”.
//
func (settings *PrintSettings) ToKeyFile(keyFile *glib.KeyFile, groupName string) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg2 = (*C.void)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1
	*(**glib.KeyFile)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("to_key_file", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
}

// Unset removes any value associated with key.
//
// This has the same effect as setting the value to NULL.
//
// The function takes the following parameters:
//
//    - key: key.
//
func (settings *PrintSettings) Unset(key string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**PrintSettings)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "PrintSettings").InvokeMethod("unset", args[:], nil)

	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
}

// PageRange: range of pages to print.
//
// See also gtk.PrintSettings.SetPageRanges().
//
// An instance of this type is always passed by reference.
type PageRange struct {
	*pageRange
}

// pageRange is the struct that's finalized.
type pageRange struct {
	native *C.GtkPageRange
}
