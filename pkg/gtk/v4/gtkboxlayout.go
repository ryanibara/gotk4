// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkboxlayout.go.
var GTypeBoxLayout = coreglib.Type(C.gtk_box_layout_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeBoxLayout, F: marshalBoxLayout},
	})
}

// BoxLayoutOverrider contains methods that are overridable.
type BoxLayoutOverrider interface {
}

// BoxLayout: GtkBoxLayout is a layout manager that arranges children in a
// single row or column.
//
// Whether it is a row or column depends on the value of its
// gtk.Orientable:orientation property. Within the other dimension all children
// all allocated the same size. The GtkBoxLayout will respect the
// gtk.Widget:halign and gtk.Widget:valign properties of each child widget.
//
// If you want all children to be assigned the same size, you can use the
// gtk.BoxLayout:homogeneous property.
//
// If you want to specify the amount of space placed between each child, you can
// use the gtk.BoxLayout:spacing property.
type BoxLayout struct {
	_ [0]func() // equal guard
	LayoutManager

	*coreglib.Object
	Orientable
}

var (
	_ LayoutManagerer   = (*BoxLayout)(nil)
	_ coreglib.Objector = (*BoxLayout)(nil)
)

func classInitBoxLayouter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapBoxLayout(obj *coreglib.Object) *BoxLayout {
	return &BoxLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalBoxLayout(p uintptr) (interface{}, error) {
	return wrapBoxLayout(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Homogeneous returns whether the layout is set to be homogeneous.
//
// The function returns the following values:
//
//    - ok: TRUE if the layout is homogeneous.
//
func (boxLayout *BoxLayout) Homogeneous() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(boxLayout).Native()))
	*(**BoxLayout)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BoxLayout").InvokeMethod("get_homogeneous", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(boxLayout)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Spacing returns the space that box_layout puts between children.
//
// The function returns the following values:
//
//    - guint: spacing of the layout.
//
func (boxLayout *BoxLayout) Spacing() uint32 {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.guint // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(boxLayout).Native()))
	*(**BoxLayout)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "BoxLayout").InvokeMethod("get_spacing", args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(boxLayout)

	var _guint uint32 // out

	_guint = uint32(_cret)

	return _guint
}

// SetHomogeneous sets whether the box layout will allocate the same size to all
// children.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to set the box layout as homogeneous.
//
func (boxLayout *BoxLayout) SetHomogeneous(homogeneous bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(boxLayout).Native()))
	if homogeneous {
		_arg1 = C.TRUE
	}
	*(**BoxLayout)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "BoxLayout").InvokeMethod("set_homogeneous", args[:], nil)

	runtime.KeepAlive(boxLayout)
	runtime.KeepAlive(homogeneous)
}

// SetSpacing sets how much spacing to put between children.
//
// The function takes the following parameters:
//
//    - spacing to apply between children.
//
func (boxLayout *BoxLayout) SetSpacing(spacing uint32) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(boxLayout).Native()))
	_arg1 = C.guint(spacing)
	*(**BoxLayout)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "BoxLayout").InvokeMethod("set_spacing", args[:], nil)

	runtime.KeepAlive(boxLayout)
	runtime.KeepAlive(spacing)
}
