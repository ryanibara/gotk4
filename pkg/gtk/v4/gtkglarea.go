// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GdkGLContext* _gotk4_gtk4_GLArea_ConnectCreateContext(gpointer, guintptr);
// extern gboolean _gotk4_gtk4_GLAreaClass_render(void*, void*);
// extern gboolean _gotk4_gtk4_GLArea_ConnectRender(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_GLAreaClass_resize(void*, int, int);
// extern void _gotk4_gtk4_GLArea_ConnectResize(gpointer, gint, gint, guintptr);
import "C"

// glib.Type values for gtkglarea.go.
var GTypeGLArea = coreglib.Type(C.gtk_gl_area_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeGLArea, F: marshalGLArea},
	})
}

// GLAreaOverrider contains methods that are overridable.
type GLAreaOverrider interface {
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	Render(context gdk.GLContexter) bool
	// The function takes the following parameters:
	//
	//    - width
	//    - height
	//
	Resize(width, height int32)
}

// GLArea: GtkGLArea is a widget that allows drawing with OpenGL.
//
// !An example GtkGLArea (glarea.png)
//
// GtkGLArea sets up its own gdk.GLContext, and creates a custom GL framebuffer
// that the widget will do GL rendering onto. It also ensures that this
// framebuffer is the default GL rendering target when rendering.
//
// In order to draw, you have to connect to the gtk.GLArea::render signal, or
// subclass GtkGLArea and override the GtkGLAreaClass.render virtual function.
//
// The GtkGLArea widget ensures that the GdkGLContext is associated with the
// widget's drawing area, and it is kept updated when the size and position of
// the drawing area changes.
//
//
// Drawing with GtkGLArea
//
// The simplest way to draw using OpenGL commands in a GtkGLArea is to create a
// widget instance and connect to the gtk.GLArea::render signal:
//
// The render() function will be called when the GtkGLArea is ready for you to
// draw its content:
//
//    static gboolean
//    render (GtkGLArea *area, GdkGLContext *context)
//    {
//      // inside this function it's safe to use GL; the given
//      // GLContext has been made current to the drawable
//      // surface used by the GtkGLArea and the viewport has
//      // already been set to be the size of the allocation
//
//      // we can start by clearing the buffer
//      glClearColor (0, 0, 0, 0);
//      glClear (GL_COLOR_BUFFER_BIT);
//
//      // draw your object
//      // draw_an_object ();
//
//      // we completed our drawing; the draw commands will be
//      // flushed at the end of the signal emission chain, and
//      // the buffers will be drawn on the window
//      return TRUE;
//    }
//
//    void setup_glarea (void)
//    {
//      // create a GtkGLArea instance
//      GtkWidget *gl_area = gtk_gl_area_new ();
//
//      // connect to the "render" signal
//      g_signal_connect (gl_area, "render", G_CALLBACK (render), NULL);
//    }
//
//
// If you need to initialize OpenGL state, e.g. buffer objects or shaders, you
// should use the gtk.Widget::realize signal; you can use the
// gtk.Widget::unrealize signal to clean up. Since the GdkGLContext creation and
// initialization may fail, you will need to check for errors, using
// gtk.GLArea.GetError().
//
// An example of how to safely initialize the GL state is:
//
//    static void
//    on_realize (GtkGLarea *area)
//    {
//      // We need to make the context current if we want to
//      // call GL API
//      gtk_gl_area_make_current (area);
//
//      // If there were errors during the initialization or
//      // when trying to make the context current, this
//      // function will return a #GError for you to catch
//      if (gtk_gl_area_get_error (area) != NULL)
//        return;
//
//      // You can also use gtk_gl_area_set_error() in order
//      // to show eventual initialization errors on the
//      // GtkGLArea widget itself
//      GError *internal_error = NULL;
//      init_buffer_objects (&error);
//      if (error != NULL)
//        {
//          gtk_gl_area_set_error (area, error);
//          g_error_free (error);
//          return;
//        }
//
//      init_shaders (&error);
//      if (error != NULL)
//        {
//          gtk_gl_area_set_error (area, error);
//          g_error_free (error);
//          return;
//        }
//    }
//
//
// If you need to change the options for creating the GdkGLContext you should
// use the gtk.GLArea::create-context signal.
type GLArea struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*GLArea)(nil)
)

func classInitGLAreaer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GtkGLAreaClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GtkGLAreaClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface {
		Render(context gdk.GLContexter) bool
	}); ok {
		pclass.render = (*[0]byte)(C._gotk4_gtk4_GLAreaClass_render)
	}

	if _, ok := goval.(interface{ Resize(width, height int32) }); ok {
		pclass.resize = (*[0]byte)(C._gotk4_gtk4_GLAreaClass_resize)
	}
}

//export _gotk4_gtk4_GLAreaClass_render
func _gotk4_gtk4_GLAreaClass_render(arg0 *C.void, arg1 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Render(context gdk.GLContexter) bool
	})

	var _context gdk.GLContexter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.GLContexter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.GLContexter)
			return ok
		})
		rv, ok := casted.(gdk.GLContexter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.GLContexter")
		}
		_context = rv
	}

	ok := iface.Render(_context)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gtk4_GLAreaClass_resize
func _gotk4_gtk4_GLAreaClass_resize(arg0 *C.void, arg1 C.int, arg2 C.int) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Resize(width, height int32) })

	var _width int32  // out
	var _height int32 // out

	_width = int32(arg1)
	_height = int32(arg2)

	iface.Resize(_width, _height)
}

func wrapGLArea(obj *coreglib.Object) *GLArea {
	return &GLArea{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalGLArea(p uintptr) (interface{}, error) {
	return wrapGLArea(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_GLArea_ConnectCreateContext
func _gotk4_gtk4_GLArea_ConnectCreateContext(arg0 C.gpointer, arg1 C.guintptr) (cret *C.GdkGLContext) {
	var f func() (glContext gdk.GLContexter)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (glContext gdk.GLContexter))
	}

	glContext := f()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(glContext).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(glContext).Native()))

	return cret
}

// ConnectCreateContext is emitted when the widget is being realized.
//
// This allows you to override how the GL context is created. This is useful
// when you want to reuse an existing GL context, or if you want to try creating
// different kinds of GL options.
//
// If context creation fails then the signal handler can use
// gtk.GLArea.SetError() to register a more detailed error of how the
// construction failed.
func (area *GLArea) ConnectCreateContext(f func() (glContext gdk.GLContexter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "create-context", false, unsafe.Pointer(C._gotk4_gtk4_GLArea_ConnectCreateContext), f)
}

//export _gotk4_gtk4_GLArea_ConnectRender
func _gotk4_gtk4_GLArea_ConnectRender(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) (cret C.gboolean) {
	var f func(context gdk.GLContexter) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(context gdk.GLContexter) (ok bool))
	}

	var _context gdk.GLContexter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.GLContexter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.GLContexter)
			return ok
		})
		rv, ok := casted.(gdk.GLContexter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.GLContexter")
		}
		_context = rv
	}

	ok := f(_context)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectRender is emitted every time the contents of the GtkGLArea should be
// redrawn.
//
// The context is bound to the area prior to emitting this function, and the
// buffers are painted to the window once the emission terminates.
func (area *GLArea) ConnectRender(f func(context gdk.GLContexter) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "render", false, unsafe.Pointer(C._gotk4_gtk4_GLArea_ConnectRender), f)
}

//export _gotk4_gtk4_GLArea_ConnectResize
func _gotk4_gtk4_GLArea_ConnectResize(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(width, height int32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(width, height int32))
	}

	var _width int32  // out
	var _height int32 // out

	_width = int32(arg1)
	_height = int32(arg2)

	f(_width, _height)
}

// ConnectResize is emitted once when the widget is realized, and then each time
// the widget is changed while realized.
//
// This is useful in order to keep GL state up to date with the widget size,
// like for instance camera properties which may depend on the width/height
// ratio.
//
// The GL context for the area is guaranteed to be current when this signal is
// emitted.
//
// The default handler sets up the GL viewport.
func (area *GLArea) ConnectResize(f func(width, height int32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(area, "resize", false, unsafe.Pointer(C._gotk4_gtk4_GLArea_ConnectResize), f)
}

// NewGLArea creates a new GtkGLArea widget.
//
// The function returns the following values:
//
//    - glArea: new GtkGLArea.
//
func NewGLArea() *GLArea {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("new_GLArea", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _glArea *GLArea // out

	_glArea = wrapGLArea(coreglib.Take(unsafe.Pointer(_cret)))

	return _glArea
}

// AttachBuffers binds buffers to the framebuffer.
//
// Ensures that the area framebuffer object is made the current draw and read
// target, and that all the required buffers for the area are created and bound
// to the framebuffer.
//
// This function is automatically called before emitting the gtk.GLArea::render
// signal, and doesn't normally need to be called by application code.
func (area *GLArea) AttachBuffers() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("attach_buffers", _args[:], nil)

	runtime.KeepAlive(area)
}

// AutoRender returns whether the area is in auto render mode or not.
//
// The function returns the following values:
//
//    - ok: TRUE if the area is auto rendering, FALSE otherwise.
//
func (area *GLArea) AutoRender() bool {
	var _args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_auto_render", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Context retrieves the GdkGLContext used by area.
//
// The function returns the following values:
//
//    - glContext: GdkGLContext.
//
func (area *GLArea) Context() gdk.GLContexter {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_context", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _glContext gdk.GLContexter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.GLContexter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.GLContexter)
			return ok
		})
		rv, ok := casted.(gdk.GLContexter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.GLContexter")
		}
		_glContext = rv
	}

	return _glContext
}

// Error gets the current error set on the area.
//
// The function returns the following values:
//
//    - err (optional) or NULL.
//
func (area *GLArea) Error() error {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_error", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _err error // out

	if _cret != nil {
		_err = gerror.Take(unsafe.Pointer(_cret))
	}

	return _err
}

// HasDepthBuffer returns whether the area has a depth buffer.
//
// The function returns the following values:
//
//    - ok: TRUE if the area has a depth buffer, FALSE otherwise.
//
func (area *GLArea) HasDepthBuffer() bool {
	var _args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_has_depth_buffer", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasStencilBuffer returns whether the area has a stencil buffer.
//
// The function returns the following values:
//
//    - ok: TRUE if the area has a stencil buffer, FALSE otherwise.
//
func (area *GLArea) HasStencilBuffer() bool {
	var _args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_has_stencil_buffer", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RequiredVersion retrieves the required version of OpenGL.
//
// See gtk.GLArea.SetRequiredVersion().
//
// The function returns the following values:
//
//    - major: return location for the required major version.
//    - minor: return location for the required minor version.
//
func (area *GLArea) RequiredVersion() (major int32, minor int32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument
	var _arg0 *C.void // out
	var _out0 *C.void // in
	var _out1 *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_required_version", _args[:], _outs[:])

	runtime.KeepAlive(area)

	var _major int32 // out
	var _minor int32 // out
	_out0 = *(**C.void)(unsafe.Pointer(&_outs[0]))
	_out1 = *(**C.void)(unsafe.Pointer(&_outs[1]))

	_major = *(*int32)(unsafe.Pointer(_out0))
	_minor = *(*int32)(unsafe.Pointer(_out1))

	return _major, _minor
}

// UseES returns whether the GtkGLArea should use OpenGL ES.
//
// See gtk.GLArea.SetUseES().
//
// The function returns the following values:
//
//    - ok: TRUE if the GtkGLArea should create an OpenGL ES context and FALSE
//      otherwise.
//
func (area *GLArea) UseES() bool {
	var _args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "GLArea").InvokeMethod("get_use_es", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(area)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MakeCurrent ensures that the GdkGLContext used by area is associated with the
// GtkGLArea.
//
// This function is automatically called before emitting the gtk.GLArea::render
// signal, and doesn't normally need to be called by application code.
func (area *GLArea) MakeCurrent() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("make_current", _args[:], nil)

	runtime.KeepAlive(area)
}

// QueueRender marks the currently rendered data (if any) as invalid, and queues
// a redraw of the widget.
//
// This ensures that the gtk.GLArea::render signal is emitted during the draw.
//
// This is only needed when gtk.GLArea.SetAutoRender() has been called with a
// FALSE value. The default behaviour is to emit gtk.GLArea::render on each
// draw.
func (area *GLArea) QueueRender() {
	var _args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("queue_render", _args[:], nil)

	runtime.KeepAlive(area)
}

// SetAutoRender sets whether the GtkGLArea is in auto render mode.
//
// If auto_render is TRUE the gtk.GLArea::render signal will be emitted every
// time the widget draws. This is the default and is useful if drawing the
// widget is faster.
//
// If auto_render is FALSE the data from previous rendering is kept around and
// will be used for drawing the widget the next time, unless the window is
// resized. In order to force a rendering gtk.GLArea.QueueRender() must be
// called. This mode is useful when the scene changes seldom, but takes a long
// time to redraw.
//
// The function takes the following parameters:
//
//    - autoRender: boolean.
//
func (area *GLArea) SetAutoRender(autoRender bool) {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if autoRender {
		_arg1 = C.TRUE
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gboolean)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_auto_render", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(autoRender)
}

// SetError sets an error on the area which will be shown instead of the GL
// rendering.
//
// This is useful in the gtk.GLArea::create-context signal if GL context
// creation fails.
//
// The function takes the following parameters:
//
//    - err (optional): new GError, or NULL to unset the error.
//
func (area *GLArea) SetError(err error) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if err != nil {
		_arg1 = (*C.void)(gerror.New(err))
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_error", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(err)
}

// SetHasDepthBuffer sets whether the GtkGLArea should use a depth buffer.
//
// If has_depth_buffer is TRUE the widget will allocate and enable a depth
// buffer for the target framebuffer. Otherwise there will be none.
//
// The function takes the following parameters:
//
//    - hasDepthBuffer: TRUE to add a depth buffer.
//
func (area *GLArea) SetHasDepthBuffer(hasDepthBuffer bool) {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if hasDepthBuffer {
		_arg1 = C.TRUE
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gboolean)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_has_depth_buffer", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(hasDepthBuffer)
}

// SetHasStencilBuffer sets whether the GtkGLArea should use a stencil buffer.
//
// If has_stencil_buffer is TRUE the widget will allocate and enable a stencil
// buffer for the target framebuffer. Otherwise there will be none.
//
// The function takes the following parameters:
//
//    - hasStencilBuffer: TRUE to add a stencil buffer.
//
func (area *GLArea) SetHasStencilBuffer(hasStencilBuffer bool) {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if hasStencilBuffer {
		_arg1 = C.TRUE
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gboolean)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_has_stencil_buffer", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(hasStencilBuffer)
}

// SetRequiredVersion sets the required version of OpenGL to be used when
// creating the context for the widget.
//
// This function must be called before the area has been realized.
//
// The function takes the following parameters:
//
//    - major version.
//    - minor version.
//
func (area *GLArea) SetRequiredVersion(major, minor int32) {
	var _args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.int   // out
	var _arg2 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	_arg1 = C.int(major)
	_arg2 = C.int(minor)

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.int)(unsafe.Pointer(&_args[1])) = _arg1
	*(*C.int)(unsafe.Pointer(&_args[2])) = _arg2

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_required_version", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(major)
	runtime.KeepAlive(minor)
}

// SetUseES sets whether the area should create an OpenGL or an OpenGL ES
// context.
//
// You should check the capabilities of the GLContext before drawing with either
// API.
//
// The function takes the following parameters:
//
//    - useEs: whether to use OpenGL or OpenGL ES.
//
func (area *GLArea) SetUseES(useEs bool) {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(area).Native()))
	if useEs {
		_arg1 = C.TRUE
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gboolean)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gtk", "GLArea").InvokeMethod("set_use_es", _args[:], nil)

	runtime.KeepAlive(area)
	runtime.KeepAlive(useEs)
}
