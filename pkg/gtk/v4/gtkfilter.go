// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gtkfilter.go.
var (
	GTypeFilterChange = coreglib.Type(C.gtk_filter_change_get_type())
	GTypeFilterMatch  = coreglib.Type(C.gtk_filter_match_get_type())
	GTypeFilter       = coreglib.Type(C.gtk_filter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFilterChange, F: marshalFilterChange},
		{T: GTypeFilterMatch, F: marshalFilterMatch},
		{T: GTypeFilter, F: marshalFilter},
	})
}

// FilterChange describes changes in a filter in more detail and allows objects
// using the filter to optimize refiltering items.
//
// If you are writing an implementation and are not sure which value to pass,
// GTK_FILTER_CHANGE_DIFFERENT is always a correct choice.
type FilterChange C.gint

const (
	// FilterChangeDifferent: filter change cannot be described with any of the
	// other enumeration values.
	FilterChangeDifferent FilterChange = iota
	// FilterChangeLessStrict: filter is less strict than it was before: All
	// items that it used to return TRUE for still return TRUE, others now may,
	// too.
	FilterChangeLessStrict
	// FilterChangeMoreStrict: filter is more strict than it was before: All
	// items that it used to return FALSE for still return FALSE, others now
	// may, too.
	FilterChangeMoreStrict
)

func marshalFilterChange(p uintptr) (interface{}, error) {
	return FilterChange(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FilterChange.
func (f FilterChange) String() string {
	switch f {
	case FilterChangeDifferent:
		return "Different"
	case FilterChangeLessStrict:
		return "LessStrict"
	case FilterChangeMoreStrict:
		return "MoreStrict"
	default:
		return fmt.Sprintf("FilterChange(%d)", f)
	}
}

// FilterMatch describes the known strictness of a filter.
//
// Note that for filters where the strictness is not known,
// GTK_FILTER_MATCH_SOME is always an acceptable value, even if a filter does
// match all or no items.
type FilterMatch C.gint

const (
	// FilterMatchSome: filter matches some items, gtk_filter_match() may return
	// TRUE or FALSE.
	FilterMatchSome FilterMatch = iota
	// FilterMatchNone: filter does not match any item, gtk_filter_match() will
	// always return FALSE.
	FilterMatchNone
	// FilterMatchAll: filter matches all items, gtk_filter_match() will alays
	// return TRUE.
	FilterMatchAll
)

func marshalFilterMatch(p uintptr) (interface{}, error) {
	return FilterMatch(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FilterMatch.
func (f FilterMatch) String() string {
	switch f {
	case FilterMatchSome:
		return "Some"
	case FilterMatchNone:
		return "None"
	case FilterMatchAll:
		return "All"
	default:
		return fmt.Sprintf("FilterMatch(%d)", f)
	}
}

// FilterOverrider contains methods that are overridable.
type FilterOverrider interface {
}

// Filter: GtkFilter object describes the filtering to be performed by a
// GtkFilterListModel.
//
// The model will use the filter to determine if it should include items or not
// by calling gtk.Filter.Match() for each item and only keeping the ones that
// the function returns TRUE for.
//
// Filters may change what items they match through their lifetime. In that
// case, they will emit the gtk.Filter::changed signal to notify that previous
// filter results are no longer valid and that items should be checked again via
// gtk.Filter.Match().
//
// GTK provides various pre-made filter implementations for common filtering
// operations. These filters often include properties that can be linked to
// various widgets to easily allow searches.
//
// However, in particular for large lists or complex search methods, it is also
// possible to subclass Filter and provide one's own filter.
type Filter struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Filter)(nil)
)

func classInitFilterer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapFilter(obj *coreglib.Object) *Filter {
	return &Filter{
		Object: obj,
	}
}

func marshalFilter(p uintptr) (interface{}, error) {
	return wrapFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
