// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
// extern void _gotk4_gtk4_Filter_ConnectChanged(gpointer, GtkFilterChange, guintptr);
// extern gboolean _gotk4_gtk4_FilterClass_match(GtkFilter*, gpointer);
// extern GtkFilterMatch _gotk4_gtk4_FilterClass_get_strictness(GtkFilter*);
// GtkFilterMatch _gotk4_gtk4_Filter_virtual_get_strictness(void* fnptr, GtkFilter* arg0) {
//   return ((GtkFilterMatch (*)(GtkFilter*))(fnptr))(arg0);
// };
// gboolean _gotk4_gtk4_Filter_virtual_match(void* fnptr, GtkFilter* arg0, gpointer arg1) {
//   return ((gboolean (*)(GtkFilter*, gpointer))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeFilterChange = coreglib.Type(C.gtk_filter_change_get_type())
	GTypeFilterMatch  = coreglib.Type(C.gtk_filter_match_get_type())
	GTypeFilter       = coreglib.Type(C.gtk_filter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFilterChange, F: marshalFilterChange},
		coreglib.TypeMarshaler{T: GTypeFilterMatch, F: marshalFilterMatch},
		coreglib.TypeMarshaler{T: GTypeFilter, F: marshalFilter},
	})
}

// FilterChange describes changes in a filter in more detail and allows objects
// using the filter to optimize refiltering items.
//
// If you are writing an implementation and are not sure which value to pass,
// GTK_FILTER_CHANGE_DIFFERENT is always a correct choice.
type FilterChange C.gint

const (
	// FilterChangeDifferent: filter change cannot be described with any of the
	// other enumeration values.
	FilterChangeDifferent FilterChange = iota
	// FilterChangeLessStrict: filter is less strict than it was before: All
	// items that it used to return TRUE for still return TRUE, others now may,
	// too.
	FilterChangeLessStrict
	// FilterChangeMoreStrict: filter is more strict than it was before: All
	// items that it used to return FALSE for still return FALSE, others now
	// may, too.
	FilterChangeMoreStrict
)

func marshalFilterChange(p uintptr) (interface{}, error) {
	return FilterChange(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FilterChange.
func (f FilterChange) String() string {
	switch f {
	case FilterChangeDifferent:
		return "Different"
	case FilterChangeLessStrict:
		return "LessStrict"
	case FilterChangeMoreStrict:
		return "MoreStrict"
	default:
		return fmt.Sprintf("FilterChange(%d)", f)
	}
}

// FilterMatch describes the known strictness of a filter.
//
// Note that for filters where the strictness is not known,
// GTK_FILTER_MATCH_SOME is always an acceptable value, even if a filter does
// match all or no items.
type FilterMatch C.gint

const (
	// FilterMatchSome: filter matches some items, gtk_filter_match() may return
	// TRUE or FALSE.
	FilterMatchSome FilterMatch = iota
	// FilterMatchNone: filter does not match any item, gtk_filter_match() will
	// always return FALSE.
	FilterMatchNone
	// FilterMatchAll: filter matches all items, gtk_filter_match() will alays
	// return TRUE.
	FilterMatchAll
)

func marshalFilterMatch(p uintptr) (interface{}, error) {
	return FilterMatch(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FilterMatch.
func (f FilterMatch) String() string {
	switch f {
	case FilterMatchSome:
		return "Some"
	case FilterMatchNone:
		return "None"
	case FilterMatchAll:
		return "All"
	default:
		return fmt.Sprintf("FilterMatch(%d)", f)
	}
}

// FilterOverrides contains methods that are overridable.
type FilterOverrides struct {
	// Strictness gets the known strictness of filters. If the strictness is not
	// known, GTK_FILTER_MATCH_SOME is returned.
	//
	// This value may change after emission of the Filter::changed signal.
	//
	// This function is meant purely for optimization purposes, filters can
	// choose to omit implementing it, but FilterListModel uses it.
	//
	// The function returns the following values:
	//
	//    - filterMatch strictness of self.
	//
	Strictness func() FilterMatch
	// Match checks if the given item is matched by the filter or not.
	//
	// The function takes the following parameters:
	//
	//    - item (optional) to check.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the filter matches the item and a filter model should
	//      keep it, FALSE if not.
	//
	Match func(item *coreglib.Object) bool
}

func defaultFilterOverrides(v *Filter) FilterOverrides {
	return FilterOverrides{
		Strictness: v.strictness,
		Match:      v.match,
	}
}

// Filter: GtkFilter object describes the filtering to be performed by a
// GtkFilterListModel.
//
// The model will use the filter to determine if it should include items or not
// by calling gtk.Filter.Match() for each item and only keeping the ones that
// the function returns TRUE for.
//
// Filters may change what items they match through their lifetime. In that
// case, they will emit the gtk.Filter::changed signal to notify that previous
// filter results are no longer valid and that items should be checked again via
// gtk.Filter.Match().
//
// GTK provides various pre-made filter implementations for common filtering
// operations. These filters often include properties that can be linked to
// various widgets to easily allow searches.
//
// However, in particular for large lists or complex search methods, it is also
// possible to subclass Filter and provide one's own filter.
type Filter struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Filter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Filter, *FilterClass, FilterOverrides](
		GTypeFilter,
		initFilterClass,
		wrapFilter,
		defaultFilterOverrides,
	)
}

func initFilterClass(gclass unsafe.Pointer, overrides FilterOverrides, classInitFunc func(*FilterClass)) {
	pclass := (*C.GtkFilterClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeFilter))))

	if overrides.Strictness != nil {
		pclass.get_strictness = (*[0]byte)(C._gotk4_gtk4_FilterClass_get_strictness)
	}

	if overrides.Match != nil {
		pclass.match = (*[0]byte)(C._gotk4_gtk4_FilterClass_match)
	}

	if classInitFunc != nil {
		class := (*FilterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFilter(obj *coreglib.Object) *Filter {
	return &Filter{
		Object: obj,
	}
}

func marshalFilter(p uintptr) (interface{}, error) {
	return wrapFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectChanged is emitted whenever the filter changed.
//
// Users of the filter should then check items again via gtk.Filter.Match().
//
// GtkFilterListModel handles this signal automatically.
//
// Depending on the change parameter, not all items need to be checked, but only
// some. Refer to the gtk.FilterChange documentation for details.
func (self *Filter) ConnectChanged(f func(change FilterChange)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "changed", false, unsafe.Pointer(C._gotk4_gtk4_Filter_ConnectChanged), f)
}

// Changed emits the Filter::changed signal to notify all users of the filter
// that the filter changed. Users of the filter should then check items again
// via gtk_filter_match().
//
// Depending on the change parameter, not all items need to be changed, but only
// some. Refer to the FilterChange documentation for details.
//
// This function is intended for implementors of Filter subclasses and should
// not be called from other functions.
//
// The function takes the following parameters:
//
//    - change: how the filter changed.
//
func (self *Filter) Changed(change FilterChange) {
	var _arg0 *C.GtkFilter      // out
	var _arg1 C.GtkFilterChange // out

	_arg0 = (*C.GtkFilter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.GtkFilterChange(change)

	C.gtk_filter_changed(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(change)
}

// Strictness gets the known strictness of filters. If the strictness is not
// known, GTK_FILTER_MATCH_SOME is returned.
//
// This value may change after emission of the Filter::changed signal.
//
// This function is meant purely for optimization purposes, filters can choose
// to omit implementing it, but FilterListModel uses it.
//
// The function returns the following values:
//
//    - filterMatch strictness of self.
//
func (self *Filter) Strictness() FilterMatch {
	var _arg0 *C.GtkFilter     // out
	var _cret C.GtkFilterMatch // in

	_arg0 = (*C.GtkFilter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gtk_filter_get_strictness(_arg0)
	runtime.KeepAlive(self)

	var _filterMatch FilterMatch // out

	_filterMatch = FilterMatch(_cret)

	return _filterMatch
}

// Match checks if the given item is matched by the filter or not.
//
// The function takes the following parameters:
//
//    - item to check.
//
// The function returns the following values:
//
//    - ok: TRUE if the filter matches the item and a filter model should keep
//      it, FALSE if not.
//
func (self *Filter) Match(item *coreglib.Object) bool {
	var _arg0 *C.GtkFilter // out
	var _arg1 C.gpointer   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkFilter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(item.Native()))

	_cret = C.gtk_filter_match(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(item)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Strictness gets the known strictness of filters. If the strictness is not
// known, GTK_FILTER_MATCH_SOME is returned.
//
// This value may change after emission of the Filter::changed signal.
//
// This function is meant purely for optimization purposes, filters can choose
// to omit implementing it, but FilterListModel uses it.
//
// The function returns the following values:
//
//    - filterMatch strictness of self.
//
func (self *Filter) strictness() FilterMatch {
	gclass := (*C.GtkFilterClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.get_strictness

	var _arg0 *C.GtkFilter     // out
	var _cret C.GtkFilterMatch // in

	_arg0 = (*C.GtkFilter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C._gotk4_gtk4_Filter_virtual_get_strictness(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(self)

	var _filterMatch FilterMatch // out

	_filterMatch = FilterMatch(_cret)

	return _filterMatch
}

// Match checks if the given item is matched by the filter or not.
//
// The function takes the following parameters:
//
//    - item (optional) to check.
//
// The function returns the following values:
//
//    - ok: TRUE if the filter matches the item and a filter model should keep
//      it, FALSE if not.
//
func (self *Filter) match(item *coreglib.Object) bool {
	gclass := (*C.GtkFilterClass)(coreglib.PeekParentClass(self))
	fnarg := gclass.match

	var _arg0 *C.GtkFilter // out
	var _arg1 C.gpointer   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GtkFilter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(item.Native()))

	_cret = C._gotk4_gtk4_Filter_virtual_match(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(item)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FilterClass: instance of this type is always passed by reference.
type FilterClass struct {
	*filterClass
}

// filterClass is the struct that's finalized.
type filterClass struct {
	native *C.GtkFilterClass
}
