// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gtk4_SearchEntry_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectNextMatch(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectPreviousMatch(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectSearchChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectSearchStarted(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectStopSearch(gpointer, guintptr);
import "C"

// glib.Type values for gtksearchentry.go.
var GTypeSearchEntry = coreglib.Type(C.gtk_search_entry_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeSearchEntry, F: marshalSearchEntry},
	})
}

// SearchEntry: GtkSearchEntry is an entry widget that has been tailored for use
// as a search entry.
//
// The main API for interacting with a GtkSearchEntry as entry is the
// GtkEditable interface.
//
// !An example GtkSearchEntry (search-entry.png)
//
// It will show an inactive symbolic “find” icon when the search entry is empty,
// and a symbolic “clear” icon when there is text. Clicking on the “clear” icon
// will empty the search entry.
//
// To make filtering appear more reactive, it is a good idea to not react to
// every change in the entry text immediately, but only after a short delay. To
// support this, GtkSearchEntry emits the gtk.SearchEntry::search-changed signal
// which can be used instead of the gtk.Editable::changed signal.
//
// The gtk.SearchEntry::previous-match, gtk.SearchEntry::next-match and
// gtk.SearchEntry::stop-search signals can be used to implement moving between
// search results and ending the search.
//
// Often, GtkSearchEntry will be fed events by means of being placed inside a
// gtk.SearchBar. If that is not the case, you can use
// gtk.SearchEntry.SetKeyCaptureWidget() to let it capture key input from
// another widget.
//
// GtkSearchEntry provides only minimal API and should be used with the
// gtk.Editable API.
//
// CSS Nodes
//
//    entry.search
//    ╰── text
//
//
// GtkSearchEntry has a single CSS node with name entry that carries a .search
// style class, and the text node is a child of that.
//
//
// Accessibility
//
// GtkSearchEntry uses the GTK_ACCESSIBLE_ROLE_SEARCH_BOX role.
type SearchEntry struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Editable
}

var (
	_ Widgetter         = (*SearchEntry)(nil)
	_ coreglib.Objector = (*SearchEntry)(nil)
)

func wrapSearchEntry(obj *coreglib.Object) *SearchEntry {
	return &SearchEntry{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Editable: Editable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalSearchEntry(p uintptr) (interface{}, error) {
	return wrapSearchEntry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_SearchEntry_ConnectActivate
func _gotk4_gtk4_SearchEntry_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate is emitted when the entry is activated.
//
// The keybindings for this signal are all forms of the Enter key.
func (entry *SearchEntry) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "activate", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectActivate), f)
}

//export _gotk4_gtk4_SearchEntry_ConnectNextMatch
func _gotk4_gtk4_SearchEntry_ConnectNextMatch(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectNextMatch is emitted when the user initiates a move to the next match
// for the current search string.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-g.
func (entry *SearchEntry) ConnectNextMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "next-match", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectNextMatch), f)
}

//export _gotk4_gtk4_SearchEntry_ConnectPreviousMatch
func _gotk4_gtk4_SearchEntry_ConnectPreviousMatch(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreviousMatch is emitted when the user initiates a move to the
// previous match for the current search string.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-Shift-g.
func (entry *SearchEntry) ConnectPreviousMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "previous-match", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectPreviousMatch), f)
}

//export _gotk4_gtk4_SearchEntry_ConnectSearchChanged
func _gotk4_gtk4_SearchEntry_ConnectSearchChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSearchChanged is emitted with a short delay of 150 milliseconds after
// the last change to the entry text.
func (entry *SearchEntry) ConnectSearchChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "search-changed", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectSearchChanged), f)
}

//export _gotk4_gtk4_SearchEntry_ConnectSearchStarted
func _gotk4_gtk4_SearchEntry_ConnectSearchStarted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSearchStarted is emitted when the user initiated a search on the
// entry.
func (entry *SearchEntry) ConnectSearchStarted(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "search-started", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectSearchStarted), f)
}

//export _gotk4_gtk4_SearchEntry_ConnectStopSearch
func _gotk4_gtk4_SearchEntry_ConnectStopSearch(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectStopSearch is emitted when the user stops a search via keyboard input.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement hiding the search entry in
// this case.
//
// The default bindings for this signal is Escape.
func (entry *SearchEntry) ConnectStopSearch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(entry, "stop-search", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectStopSearch), f)
}

// NewSearchEntry creates a GtkSearchEntry.
//
// The function returns the following values:
//
//    - searchEntry: new GtkSearchEntry.
//
func NewSearchEntry() *SearchEntry {
	_gret := girepository.MustFind("Gtk", "SearchEntry").InvokeMethod("new_SearchEntry", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _searchEntry *SearchEntry // out

	_searchEntry = wrapSearchEntry(coreglib.Take(unsafe.Pointer(_cret)))

	return _searchEntry
}

// KeyCaptureWidget gets the widget that entry is capturing key events from.
//
// The function returns the following values:
//
//    - widget: key capture widget.
//
func (entry *SearchEntry) KeyCaptureWidget() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(entry).Native()))

	_gret := girepository.MustFind("Gtk", "SearchEntry").InvokeMethod("get_key_capture_widget", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(entry)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// SetKeyCaptureWidget sets widget as the widget that entry will capture key
// events from.
//
// Key events are consumed by the search entry to start or continue a search.
//
// If the entry is part of a GtkSearchBar, it is preferable to call
// gtk.SearchBar.SetKeyCaptureWidget() instead, which will reveal the entry in
// addition to triggering the search entry.
//
// Note that despite the name of this function, the events are only 'captured'
// in the bubble phase, which means that editable child widgets of widget will
// receive text input before it gets captured. If that is not desired, you can
// capture and forward the events yourself with
// gtk.EventControllerKey.Forward().
//
// The function takes the following parameters:
//
//    - widget (optional): Widget.
//
func (entry *SearchEntry) SetKeyCaptureWidget(widget Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(entry).Native()))
	if widget != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	}

	girepository.MustFind("Gtk", "SearchEntry").InvokeMethod("set_key_capture_widget", _args[:], nil)

	runtime.KeepAlive(entry)
	runtime.KeepAlive(widget)
}
