// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GtkNotebook* _gotk4_gtk4_Notebook_ConnectCreateWindow(gpointer, GtkWidget*, guintptr);
// extern gboolean _gotk4_gtk4_Notebook_ConnectChangeCurrentPage(gpointer, gint, guintptr);
// extern gboolean _gotk4_gtk4_Notebook_ConnectSelectPage(gpointer, gboolean, guintptr);
// extern void _gotk4_gtk4_Notebook_ConnectPageAdded(gpointer, GtkWidget*, guint, guintptr);
// extern void _gotk4_gtk4_Notebook_ConnectPageRemoved(gpointer, GtkWidget*, guint, guintptr);
// extern void _gotk4_gtk4_Notebook_ConnectPageReordered(gpointer, GtkWidget*, guint, guintptr);
// extern void _gotk4_gtk4_Notebook_ConnectSwitchPage(gpointer, GtkWidget*, guint, guintptr);
import "C"

// glib.Type values for gtknotebook.go.
var (
	GTypeNotebookTab  = coreglib.Type(C.gtk_notebook_tab_get_type())
	GTypeNotebook     = coreglib.Type(C.gtk_notebook_get_type())
	GTypeNotebookPage = coreglib.Type(C.gtk_notebook_page_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeNotebookTab, F: marshalNotebookTab},
		{T: GTypeNotebook, F: marshalNotebook},
		{T: GTypeNotebookPage, F: marshalNotebookPage},
	})
}

// NotebookTab: parameter used in the action signals of GtkNotebook.
type NotebookTab C.gint

const (
	// NotebookTabFirst: first tab in the notebook.
	NotebookTabFirst NotebookTab = iota
	// NotebookTabLast: last tab in the notebook.
	NotebookTabLast
)

func marshalNotebookTab(p uintptr) (interface{}, error) {
	return NotebookTab(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NotebookTab.
func (n NotebookTab) String() string {
	switch n {
	case NotebookTabFirst:
		return "First"
	case NotebookTabLast:
		return "Last"
	default:
		return fmt.Sprintf("NotebookTab(%d)", n)
	}
}

// Notebook: GtkNotebook is a container whose children are pages switched
// between using tabs.
//
// !An example GtkNotebook (notebook.png)
//
// There are many configuration options for GtkNotebook. Among other things, you
// can choose on which edge the tabs appear (see gtk.Notebook.SetTabPos()),
// whether, if there are too many tabs to fit the notebook should be made bigger
// or scrolling arrows added (see gtk.Notebook.SetScrollable()), and whether
// there will be a popup menu allowing the users to switch pages. (see
// gtk.Notebook.PopupEnable()).
//
//
// GtkNotebook as GtkBuildable
//
// The GtkNotebook implementation of the GtkBuildable interface supports placing
// children into tabs by specifying “tab” as the “type” attribute of a <child>
// element. Note that the content of the tab must be created before the tab can
// be filled. A tab child can be specified without specifying a <child> type
// attribute.
//
// To add a child widget in the notebooks action area, specify "action-start" or
// “action-end” as the “type” attribute of the <child> element.
//
// An example of a UI definition fragment with GtkNotebook:
//
//    <object class="GtkNotebook">
//      <child>
//        <object class="GtkLabel" id="notebook-content">
//          <property name="label">Content</property>
//        </object>
//      </child>
//      <child type="tab">
//        <object class="GtkLabel" id="notebook-tab">
//          <property name="label">Tab</property>
//        </object>
//      </child>
//    </object>
//
//
// CSS nodes
//
//    notebook
//    ├── header.top
//    │   ├── [<action widget>]
//    │   ├── tabs
//    │   │   ├── [arrow]
//    │   │   ├── tab
//    │   │   │   ╰── <tab label>
//    ┊   ┊   ┊
//    │   │   ├── tab[.reorderable-page]
//    │   │   │   ╰── <tab label>
//    │   │   ╰── [arrow]
//    │   ╰── [<action widget>]
//    │
//    ╰── stack
//        ├── <child>
//        ┊
//        ╰── <child>
//
//
// GtkNotebook has a main CSS node with name notebook, a subnode with name
// header and below that a subnode with name tabs which contains one subnode per
// tab with name tab.
//
// If action widgets are present, their CSS nodes are placed next to the tabs
// node. If the notebook is scrollable, CSS nodes with name arrow are placed as
// first and last child of the tabs node.
//
// The main node gets the .frame style class when the notebook has a border (see
// gtk.Notebook.SetShowBorder()).
//
// The header node gets one of the style class .top, .bottom, .left or .right,
// depending on where the tabs are placed. For reorderable pages, the tab node
// gets the .reorderable-page class.
//
// A tab node gets the .dnd style class while it is moved with drag-and-drop.
//
// The nodes are always arranged from left-to-right, regardless of text
// direction.
//
//
// Accessibility
//
// GtkNotebook uses the following roles:
//
//    - GTK_ACCESSIBLE_ROLE_GROUP for the notebook widget
//    - GTK_ACCESSIBLE_ROLE_TAB_LIST for the list of tabs
//    - GTK_ACCESSIBLE_ROLE_TAB role for each tab
//    - GTK_ACCESSIBLE_ROLE_TAB_PANEL for each page.
type Notebook struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Notebook)(nil)
)

func wrapNotebook(obj *coreglib.Object) *Notebook {
	return &Notebook{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalNotebook(p uintptr) (interface{}, error) {
	return wrapNotebook(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_Notebook_ConnectChangeCurrentPage
func _gotk4_gtk4_Notebook_ConnectChangeCurrentPage(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) (cret C.gboolean) {
	var f func(object int32) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object int32) (ok bool))
	}

	var _object int32 // out

	_object = int32(arg1)

	ok := f(_object)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func (notebook *Notebook) ConnectChangeCurrentPage(f func(object int32) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "change-current-page", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectChangeCurrentPage), f)
}

//export _gotk4_gtk4_Notebook_ConnectCreateWindow
func _gotk4_gtk4_Notebook_ConnectCreateWindow(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guintptr) (cret *C.GtkNotebook) {
	var f func(page Widgetter) (notebook *Notebook)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(page Widgetter) (notebook *Notebook))
	}

	var _page Widgetter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_page = rv
	}

	notebook := f(_page)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))

	return cret
}

// ConnectCreateWindow signal is emitted when a detachable tab is dropped on the
// root window.
//
// A handler for this signal can create a window containing a notebook where the
// tab will be attached. It is also responsible for moving/resizing the window
// and adding the necessary properties to the notebook (e.g. the
// GtkNotebook:group-name ).
func (notebook *Notebook) ConnectCreateWindow(f func(page Widgetter) (notebook *Notebook)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "create-window", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectCreateWindow), f)
}

//export _gotk4_gtk4_Notebook_ConnectPageAdded
func _gotk4_gtk4_Notebook_ConnectPageAdded(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guint, arg3 C.guintptr) {
	var f func(child Widgetter, pageNum uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(child Widgetter, pageNum uint32))
	}

	var _child Widgetter // out
	var _pageNum uint32  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_child = rv
	}
	_pageNum = uint32(arg2)

	f(_child, _pageNum)
}

// ConnectPageAdded signal is emitted in the notebook right after a page is
// added to the notebook.
func (notebook *Notebook) ConnectPageAdded(f func(child Widgetter, pageNum uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "page-added", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectPageAdded), f)
}

//export _gotk4_gtk4_Notebook_ConnectPageRemoved
func _gotk4_gtk4_Notebook_ConnectPageRemoved(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guint, arg3 C.guintptr) {
	var f func(child Widgetter, pageNum uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(child Widgetter, pageNum uint32))
	}

	var _child Widgetter // out
	var _pageNum uint32  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_child = rv
	}
	_pageNum = uint32(arg2)

	f(_child, _pageNum)
}

// ConnectPageRemoved signal is emitted in the notebook right after a page is
// removed from the notebook.
func (notebook *Notebook) ConnectPageRemoved(f func(child Widgetter, pageNum uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "page-removed", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectPageRemoved), f)
}

//export _gotk4_gtk4_Notebook_ConnectPageReordered
func _gotk4_gtk4_Notebook_ConnectPageReordered(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guint, arg3 C.guintptr) {
	var f func(child Widgetter, pageNum uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(child Widgetter, pageNum uint32))
	}

	var _child Widgetter // out
	var _pageNum uint32  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_child = rv
	}
	_pageNum = uint32(arg2)

	f(_child, _pageNum)
}

// ConnectPageReordered signal is emitted in the notebook right after a page has
// been reordered.
func (notebook *Notebook) ConnectPageReordered(f func(child Widgetter, pageNum uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "page-reordered", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectPageReordered), f)
}

//export _gotk4_gtk4_Notebook_ConnectSelectPage
func _gotk4_gtk4_Notebook_ConnectSelectPage(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) (cret C.gboolean) {
	var f func(object bool) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object bool) (ok bool))
	}

	var _object bool // out

	if arg1 != 0 {
		_object = true
	}

	ok := f(_object)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func (notebook *Notebook) ConnectSelectPage(f func(object bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "select-page", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectSelectPage), f)
}

//export _gotk4_gtk4_Notebook_ConnectSwitchPage
func _gotk4_gtk4_Notebook_ConnectSwitchPage(arg0 C.gpointer, arg1 *C.GtkWidget, arg2 C.guint, arg3 C.guintptr) {
	var f func(page Widgetter, pageNum uint32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(page Widgetter, pageNum uint32))
	}

	var _page Widgetter // out
	var _pageNum uint32 // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_page = rv
	}
	_pageNum = uint32(arg2)

	f(_page, _pageNum)
}

// ConnectSwitchPage is emitted when the user or a function changes the current
// page.
func (notebook *Notebook) ConnectSwitchPage(f func(page Widgetter, pageNum uint32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(notebook, "switch-page", false, unsafe.Pointer(C._gotk4_gtk4_Notebook_ConnectSwitchPage), f)
}

// NewNotebook creates a new GtkNotebook widget with no pages.
//
// The function returns the following values:
//
//    - notebook: newly created GtkNotebook.
//
func NewNotebook() *Notebook {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("new_Notebook", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _notebook *Notebook // out

	_notebook = wrapNotebook(coreglib.Take(unsafe.Pointer(_cret)))

	return _notebook
}

// AppendPage appends a page to notebook.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional): GtkWidget to be used as the label for the page, or
//      NULL to use the default label, “page N”.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the appended page in the notebook, or -1
//      if function fails.
//
func (notebook *Notebook) AppendPage(child, tabLabel Widgetter) int32 {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("append_page", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// AppendPageMenu appends a page to notebook, specifying the widget to use as
// the label in the popup menu.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional): GtkWidget to be used as the label for the page, or
//      NULL to use the default label, “page N”.
//    - menuLabel (optional): widget to use as a label for the page-switch menu,
//      if that is enabled. If NULL, and tab_label is a Label or NULL, then the
//      menu label will be a newly created label with the same text as tab_label;
//      if tab_label is not a GtkLabel, menu_label must be specified if the
//      page-switch menu is to be used.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the appended page in the notebook, or -1
//      if function fails.
//
func (notebook *Notebook) AppendPageMenu(child, tabLabel, menuLabel Widgetter) int32 {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	if menuLabel != nil {
		_arg3 = (*C.void)(unsafe.Pointer(coreglib.InternObject(menuLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2
	*(*Widgetter)(unsafe.Pointer(&args[3])) = _arg3

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("append_page_menu", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)
	runtime.KeepAlive(menuLabel)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// DetachTab removes the child from the notebook.
//
// This function is very similar to gtk.Notebook.RemovePage(), but additionally
// informs the notebook that the removal is happening as part of a tab DND
// operation, which should not be cancelled.
//
// The function takes the following parameters:
//
//    - child: child.
//
func (notebook *Notebook) DetachTab(child Widgetter) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("detach_tab", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
}

// CurrentPage returns the page number of the current page.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the current page in the notebook. If the
//      notebook has no pages, then -1 will be returned.
//
func (notebook *Notebook) CurrentPage() int32 {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_current_page", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// GroupName gets the current group name for notebook.
//
// The function returns the following values:
//
//    - utf8 (optional): group name, or NULL if none is set.
//
func (notebook *Notebook) GroupName() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_group_name", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// MenuLabel retrieves the menu label widget of the page containing child.
//
// The function takes the following parameters:
//
//    - child: widget contained in a page of notebook.
//
// The function returns the following values:
//
//    - widget (optional): menu label, or NULL if the notebook page does not have
//      a menu label other than the default (the tab label).
//
func (notebook *Notebook) MenuLabel(child Widgetter) Widgetter {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_menu_label", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// MenuLabelText retrieves the text of the menu label for the page containing
// child.
//
// The function takes the following parameters:
//
//    - child widget of a page of the notebook.
//
// The function returns the following values:
//
//    - utf8 (optional): text of the tab label, or NULL if the widget does not
//      have a menu label other than the default menu label, or the menu label
//      widget is not a GtkLabel. The string is owned by the widget and must not
//      be freed.
//
func (notebook *Notebook) MenuLabelText(child Widgetter) string {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_menu_label_text", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// NPages gets the number of pages in a notebook.
//
// The function returns the following values:
//
//    - gint: number of pages in the notebook.
//
func (notebook *Notebook) NPages() int32 {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_n_pages", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// NthPage returns the child widget contained in page number page_num.
//
// The function takes the following parameters:
//
//    - pageNum: index of a page in the notebook, or -1 to get the last page.
//
// The function returns the following values:
//
//    - widget (optional): child widget, or NULL if page_num is out of bounds.
//
func (notebook *Notebook) NthPage(pageNum int32) Widgetter {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.int   // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = C.int(pageNum)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_nth_page", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(pageNum)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Page returns the GtkNotebookPage for child.
//
// The function takes the following parameters:
//
//    - child of notebook.
//
// The function returns the following values:
//
//    - notebookPage: GtkNotebookPage for child.
//
func (notebook *Notebook) Page(child Widgetter) *NotebookPage {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_page", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _notebookPage *NotebookPage // out

	_notebookPage = wrapNotebookPage(coreglib.Take(unsafe.Pointer(_cret)))

	return _notebookPage
}

// Pages returns a GListModel that contains the pages of the notebook.
//
// This can be used to keep an up-to-date view. The model also implements
// gtk.SelectionModel and can be used to track and modify the visible page.
//
// The function returns the following values:
//
//    - listModel: a GListModel for the notebook's children.
//
func (notebook *Notebook) Pages() *gio.ListModel {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_pages", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _listModel *gio.ListModel // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_listModel = &gio.ListModel{
			Object: obj,
		}
	}

	return _listModel
}

// Scrollable returns whether the tab label area has arrows for scrolling.
//
// The function returns the following values:
//
//    - ok: TRUE if arrows for scrolling are present.
//
func (notebook *Notebook) Scrollable() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_scrollable", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowBorder returns whether a bevel will be drawn around the notebook pages.
//
// The function returns the following values:
//
//    - ok: TRUE if the bevel is drawn.
//
func (notebook *Notebook) ShowBorder() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_show_border", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowTabs returns whether the tabs of the notebook are shown.
//
// The function returns the following values:
//
//    - ok: TRUE if the tabs are shown.
//
func (notebook *Notebook) ShowTabs() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_show_tabs", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TabDetachable returns whether the tab contents can be detached from notebook.
//
// The function takes the following parameters:
//
//    - child GtkWidget.
//
// The function returns the following values:
//
//    - ok: TRUE if the tab is detachable.
//
func (notebook *Notebook) TabDetachable(child Widgetter) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_tab_detachable", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TabLabel returns the tab label widget for the page child.
//
// NULL is returned if child is not in notebook or if no tab label has
// specifically been set for child.
//
// The function takes the following parameters:
//
//    - child: page.
//
// The function returns the following values:
//
//    - widget (optional): tab label.
//
func (notebook *Notebook) TabLabel(child Widgetter) Widgetter {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_tab_label", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// TabLabelText retrieves the text of the tab label for the page containing
// child.
//
// The function takes the following parameters:
//
//    - child: widget contained in a page of notebook.
//
// The function returns the following values:
//
//    - utf8 (optional): text of the tab label, or NULL if the tab label idget is
//      not a GtkLabel. The string is owned by the widget and must not be freed.
//
func (notebook *Notebook) TabLabelText(child Widgetter) string {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_tab_label_text", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// TabReorderable gets whether the tab can be reordered via drag and drop or
// not.
//
// The function takes the following parameters:
//
//    - child GtkWidget.
//
// The function returns the following values:
//
//    - ok: TRUE if the tab is reorderable.
//
func (notebook *Notebook) TabReorderable(child Widgetter) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("get_tab_reorderable", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InsertPage: insert a page into notebook at the given position.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional): GtkWidget to be used as the label for the page, or
//      NULL to use the default label, “page N”.
//    - position: index (starting at 0) at which to insert the page, or -1 to
//      append the page after all other pages.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the inserted page in the notebook, or -1
//      if function fails.
//
func (notebook *Notebook) InsertPage(child, tabLabel Widgetter, position int32) int32 {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 C.int   // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	_arg3 = C.int(position)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2
	*(*Widgetter)(unsafe.Pointer(&args[3])) = _arg3

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("insert_page", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)
	runtime.KeepAlive(position)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// InsertPageMenu: insert a page into notebook at the given position, specifying
// the widget to use as the label in the popup menu.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional): GtkWidget to be used as the label for the page, or
//      NULL to use the default label, “page N”.
//    - menuLabel (optional): widget to use as a label for the page-switch menu,
//      if that is enabled. If NULL, and tab_label is a Label or NULL, then the
//      menu label will be a newly created label with the same text as tab_label;
//      if tab_label is not a Label, menu_label must be specified if the
//      page-switch menu is to be used.
//    - position: index (starting at 0) at which to insert the page, or -1 to
//      append the page after all other pages.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the inserted page in the notebook.
//
func (notebook *Notebook) InsertPageMenu(child, tabLabel, menuLabel Widgetter, position int32) int32 {
	var args [5]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _arg4 C.int   // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	if menuLabel != nil {
		_arg3 = (*C.void)(unsafe.Pointer(coreglib.InternObject(menuLabel).Native()))
	}
	_arg4 = C.int(position)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2
	*(*Widgetter)(unsafe.Pointer(&args[3])) = _arg3
	*(*Widgetter)(unsafe.Pointer(&args[4])) = _arg4

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("insert_page_menu", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)
	runtime.KeepAlive(menuLabel)
	runtime.KeepAlive(position)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// NextPage switches to the next page.
//
// Nothing happens if the current page is the last page.
func (notebook *Notebook) NextPage() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("next_page", args[:], nil)

	runtime.KeepAlive(notebook)
}

// PageNum finds the index of the page which contains the given child widget.
//
// The function takes the following parameters:
//
//    - child: GtkWidget.
//
// The function returns the following values:
//
//    - gint: index of the page containing child, or -1 if child is not in the
//      notebook.
//
func (notebook *Notebook) PageNum(child Widgetter) int32 {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("page_num", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// PopupDisable disables the popup menu.
func (notebook *Notebook) PopupDisable() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("popup_disable", args[:], nil)

	runtime.KeepAlive(notebook)
}

// PopupEnable enables the popup menu.
//
// If the user clicks with the right mouse button on the tab labels, a menu with
// all the pages will be popped up.
func (notebook *Notebook) PopupEnable() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("popup_enable", args[:], nil)

	runtime.KeepAlive(notebook)
}

// PrependPage prepends a page to notebook.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional) to be used as the label for the page, or NULL to use
//      the default label, “page N”.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the prepended page in the notebook, or
//      -1 if function fails.
//
func (notebook *Notebook) PrependPage(child, tabLabel Widgetter) int32 {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("prepend_page", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// PrependPageMenu prepends a page to notebook, specifying the widget to use as
// the label in the popup menu.
//
// The function takes the following parameters:
//
//    - child: GtkWidget to use as the contents of the page.
//    - tabLabel (optional): GtkWidget to be used as the label for the page, or
//      NULL to use the default label, “page N”.
//    - menuLabel (optional): widget to use as a label for the page-switch menu,
//      if that is enabled. If NULL, and tab_label is a Label or NULL, then the
//      menu label will be a newly created label with the same text as tab_label;
//      if tab_label is not a Label, menu_label must be specified if the
//      page-switch menu is to be used.
//
// The function returns the following values:
//
//    - gint: index (starting from 0) of the prepended page in the notebook, or
//      -1 if function fails.
//
func (notebook *Notebook) PrependPageMenu(child, tabLabel, menuLabel Widgetter) int32 {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _cret C.int   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	if menuLabel != nil {
		_arg3 = (*C.void)(unsafe.Pointer(coreglib.InternObject(menuLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2
	*(*Widgetter)(unsafe.Pointer(&args[3])) = _arg3

	_gret := girepository.MustFind("Gtk", "Notebook").InvokeMethod("prepend_page_menu", args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)
	runtime.KeepAlive(menuLabel)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// PrevPage switches to the previous page.
//
// Nothing happens if the current page is the first page.
func (notebook *Notebook) PrevPage() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	*(**Notebook)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("prev_page", args[:], nil)

	runtime.KeepAlive(notebook)
}

// RemovePage removes a page from the notebook given its index in the notebook.
//
// The function takes the following parameters:
//
//    - pageNum: index of a notebook page, starting from 0. If -1, the last page
//      will be removed.
//
func (notebook *Notebook) RemovePage(pageNum int32) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = C.int(pageNum)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("remove_page", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(pageNum)
}

// ReorderChild reorders the page containing child, so that it appears in
// position position.
//
// If position is greater than or equal to the number of children in the list or
// negative, child will be moved to the end of the list.
//
// The function takes the following parameters:
//
//    - child to move.
//    - position: new position, or -1 to move to the end.
//
func (notebook *Notebook) ReorderChild(child Widgetter, position int32) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	_arg2 = C.int(position)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("reorder_child", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(position)
}

// SetCurrentPage switches to the page number page_num.
//
// Note that due to historical reasons, GtkNotebook refuses to switch to a page
// unless the child widget is visible. Therefore, it is recommended to show
// child widgets before adding them to a notebook.
//
// The function takes the following parameters:
//
//    - pageNum: index of the page to switch to, starting from 0. If negative,
//      the last page will be used. If greater than the number of pages in the
//      notebook, nothing will be done.
//
func (notebook *Notebook) SetCurrentPage(pageNum int32) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.int   // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = C.int(pageNum)
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_current_page", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(pageNum)
}

// SetGroupName sets a group name for notebook.
//
// Notebooks with the same name will be able to exchange tabs via drag and drop.
// A notebook with a NULL group name will not be able to exchange tabs with any
// other notebook.
//
// The function takes the following parameters:
//
//    - groupName (optional): name of the notebook group, or NULL to unset it.
//
func (notebook *Notebook) SetGroupName(groupName string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	if groupName != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_group_name", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(groupName)
}

// SetMenuLabel changes the menu label for the page containing child.
//
// The function takes the following parameters:
//
//    - child widget.
//    - menuLabel (optional): menu label, or NULL for default.
//
func (notebook *Notebook) SetMenuLabel(child, menuLabel Widgetter) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if menuLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(menuLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_menu_label", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(menuLabel)
}

// SetMenuLabelText creates a new label and sets it as the menu label of child.
//
// The function takes the following parameters:
//
//    - child widget.
//    - menuText: label text.
//
func (notebook *Notebook) SetMenuLabelText(child Widgetter, menuText string) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(menuText)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_menu_label_text", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(menuText)
}

// SetScrollable sets whether the tab label area will have arrows for scrolling
// if there are too many tabs to fit in the area.
//
// The function takes the following parameters:
//
//    - scrollable: TRUE if scroll arrows should be added.
//
func (notebook *Notebook) SetScrollable(scrollable bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	if scrollable {
		_arg1 = C.TRUE
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_scrollable", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(scrollable)
}

// SetShowBorder sets whether a bevel will be drawn around the notebook pages.
//
// This only has a visual effect when the tabs are not shown.
//
// The function takes the following parameters:
//
//    - showBorder: TRUE if a bevel should be drawn around the notebook.
//
func (notebook *Notebook) SetShowBorder(showBorder bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	if showBorder {
		_arg1 = C.TRUE
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_show_border", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(showBorder)
}

// SetShowTabs sets whether to show the tabs for the notebook or not.
//
// The function takes the following parameters:
//
//    - showTabs: TRUE if the tabs should be shown.
//
func (notebook *Notebook) SetShowTabs(showTabs bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	if showTabs {
		_arg1 = C.TRUE
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_show_tabs", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(showTabs)
}

// SetTabDetachable sets whether the tab can be detached from notebook to
// another notebook or widget.
//
// Note that two notebooks must share a common group identificator (see
// gtk.Notebook.SetGroupName()) to allow automatic tabs interchange between
// them.
//
// If you want a widget to interact with a notebook through DnD (i.e.: accept
// dragged tabs from it) it must be set as a drop destination and accept the
// target “GTK_NOTEBOOK_TAB”. The notebook will fill the selection with a
// GtkWidget** pointing to the child widget that corresponds to the dropped tab.
//
// Note that you should use gtk.Notebook.DetachTab() instead of
// gtk.Notebook.RemovePage() if you want to remove the tab from the source
// notebook as part of accepting a drop. Otherwise, the source notebook will
// think that the dragged tab was removed from underneath the ongoing drag
// operation, and will initiate a drag cancel animation.
//
//    static void
//    on_drag_data_received (GtkWidget        *widget,
//                           GdkDrop          *drop,
//                           GtkSelectionData *data,
//                           guint             time,
//                           gpointer          user_data)
//    {
//      GtkDrag *drag;
//      GtkWidget *notebook;
//      GtkWidget **child;
//
//      drag = gtk_drop_get_drag (drop);
//      notebook = g_object_get_data (drag, "gtk-notebook-drag-origin");
//      child = (void*) gtk_selection_data_get_data (data);
//
//      // process_widget (*child);
//
//      gtk_notebook_detach_tab (GTK_NOTEBOOK (notebook), *child);
//    }
//
//
// If you want a notebook to accept drags from other widgets, you will have to
// set your own DnD code to do it.
//
// The function takes the following parameters:
//
//    - child GtkWidget.
//    - detachable: whether the tab is detachable or not.
//
func (notebook *Notebook) SetTabDetachable(child Widgetter, detachable bool) {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _arg2 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if detachable {
		_arg2 = C.TRUE
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_tab_detachable", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(detachable)
}

// SetTabLabel changes the tab label for child.
//
// If NULL is specified for tab_label, then the page will have the label “page
// N”.
//
// The function takes the following parameters:
//
//    - child: page.
//    - tabLabel (optional): tab label widget to use, or NULL for default tab
//      label.
//
func (notebook *Notebook) SetTabLabel(child, tabLabel Widgetter) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if tabLabel != nil {
		_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(tabLabel).Native()))
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_tab_label", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabLabel)
}

// SetTabLabelText creates a new label and sets it as the tab label for the page
// containing child.
//
// The function takes the following parameters:
//
//    - child: page.
//    - tabText: label text.
//
func (notebook *Notebook) SetTabLabelText(child Widgetter, tabText string) {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(tabText)))
	defer C.free(unsafe.Pointer(_arg2))
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_tab_label_text", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(tabText)
}

// SetTabReorderable sets whether the notebook tab can be reordered via drag and
// drop or not.
//
// The function takes the following parameters:
//
//    - child GtkWidget.
//    - reorderable: whether the tab is reorderable or not.
//
func (notebook *Notebook) SetTabReorderable(child Widgetter, reorderable bool) {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _arg2 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(notebook).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	if reorderable {
		_arg2 = C.TRUE
	}
	*(**Notebook)(unsafe.Pointer(&args[1])) = _arg1
	*(*Widgetter)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gtk", "Notebook").InvokeMethod("set_tab_reorderable", args[:], nil)

	runtime.KeepAlive(notebook)
	runtime.KeepAlive(child)
	runtime.KeepAlive(reorderable)
}

// NotebookPage: GtkNotebookPage is an auxiliary object used by GtkNotebook.
type NotebookPage struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*NotebookPage)(nil)
)

func wrapNotebookPage(obj *coreglib.Object) *NotebookPage {
	return &NotebookPage{
		Object: obj,
	}
}

func marshalNotebookPage(p uintptr) (interface{}, error) {
	return wrapNotebookPage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Child returns the notebook child to which page belongs.
//
// The function returns the following values:
//
//    - widget: child to which page belongs.
//
func (page *NotebookPage) Child() Widgetter {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(page).Native()))
	*(**NotebookPage)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "NotebookPage").InvokeMethod("get_child", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(page)

	var _widget Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Widgetter)
			return ok
		})
		rv, ok := casted.(Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}
