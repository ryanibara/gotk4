// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeComboBoxText returns the GType for the type ComboBoxText.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeComboBoxText() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "ComboBoxText").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalComboBoxText)
	return gtype
}

// ComboBoxText: GtkComboBoxText is a simple variant of GtkComboBox for
// text-only use cases.
//
// !An example GtkComboBoxText (combo-box-text.png)
//
// GtkComboBoxText hides the model-view complexity of GtkComboBox.
//
// To create a GtkComboBoxText, use gtk.ComboBoxText.New or
// gtk.ComboBoxText.NewWithEntry.
//
// You can add items to a GtkComboBoxText with gtk.ComboBoxText.AppendText(),
// gtk.ComboBoxText.InsertText() or gtk.ComboBoxText.PrependText() and remove
// options with gtk.ComboBoxText.Remove().
//
// If the GtkComboBoxText contains an entry (via the gtk.ComboBox:has-entry
// property), its contents can be retrieved using
// gtk.ComboBoxText.GetActiveText().
//
// You should not call gtk.ComboBox.SetModel() or attempt to pack more cells
// into this combo box via its gtk.CellLayout interface.
//
//
// GtkComboBoxText as GtkBuildable
//
// The GtkComboBoxText implementation of the GtkBuildable interface supports
// adding items directly using the <items> element and specifying <item>
// elements for each item. Each <item> element can specify the “id”
// corresponding to the appended text and also supports the regular translation
// attributes “translatable”, “context” and “comments”.
//
// Here is a UI definition fragment specifying GtkComboBoxText items:
//
//    <object class="GtkComboBoxText">
//      <items>
//        <item translatable="yes" id="factory">Factory</item>
//        <item translatable="yes" id="home">Home</item>
//        <item translatable="yes" id="subway">Subway</item>
//      </items>
//    </object>
//
//
// CSS nodes
//
//    combobox
//    ╰── box.linked
//        ├── entry.combo
//        ├── button.combo
//        ╰── window.popup
//
//
// GtkComboBoxText has a single CSS node with name combobox. It adds the style
// class .combo to the main CSS nodes of its entry and button children, and the
// .linked class to the node of its internal box.
type ComboBoxText struct {
	_ [0]func() // equal guard
	ComboBox
}

var (
	_ Widgetter         = (*ComboBoxText)(nil)
	_ coreglib.Objector = (*ComboBoxText)(nil)
)

func wrapComboBoxText(obj *coreglib.Object) *ComboBoxText {
	return &ComboBoxText{
		ComboBox: ComboBox{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
			Object: obj,
			CellEditable: CellEditable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
			},
			CellLayout: CellLayout{
				Object: obj,
			},
		},
	}
}

func marshalComboBoxText(p uintptr) (interface{}, error) {
	return wrapComboBoxText(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewComboBoxText creates a new GtkComboBoxText.
//
// The function returns the following values:
//
//    - comboBoxText: new GtkComboBoxText.
//
func NewComboBoxText() *ComboBoxText {
	_gret := girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("new_ComboBoxText", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _comboBoxText *ComboBoxText // out

	_comboBoxText = wrapComboBoxText(coreglib.Take(unsafe.Pointer(_cret)))

	return _comboBoxText
}

// NewComboBoxTextWithEntry creates a new GtkComboBoxText with an entry.
//
// The function returns the following values:
//
//    - comboBoxText: new GtkComboBoxText.
//
func NewComboBoxTextWithEntry() *ComboBoxText {
	_gret := girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("new_ComboBoxText_with_entry", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _comboBoxText *ComboBoxText // out

	_comboBoxText = wrapComboBoxText(coreglib.Take(unsafe.Pointer(_cret)))

	return _comboBoxText
}

// Append appends text to the list of strings stored in combo_box.
//
// If id is non-NULL then it is used as the ID of the row.
//
// This is the same as calling gtk.ComboBoxText.Insert() with a position of -1.
//
// The function takes the following parameters:
//
//    - id (optional): string ID for this value, or NULL.
//    - text: string.
//
func (comboBox *ComboBoxText) Append(id, text string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	if id != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
		defer C.free(unsafe.Pointer(_args[1]))
	}
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[2]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("append", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(id)
	runtime.KeepAlive(text)
}

// AppendText appends text to the list of strings stored in combo_box.
//
// This is the same as calling gtk.ComboBoxText.InsertText() with a position of
// -1.
//
// The function takes the following parameters:
//
//    - text: string.
//
func (comboBox *ComboBoxText) AppendText(text string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("append_text", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(text)
}

// ActiveText returns the currently active string in combo_box.
//
// If no row is currently selected, NULL is returned. If combo_box contains an
// entry, this function will return its contents (which will not necessarily be
// an item from the list).
//
// The function returns the following values:
//
//    - utf8 (optional): newly allocated string containing the currently active
//      text. Must be freed with g_free().
//
func (comboBox *ComboBoxText) ActiveText() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))

	_gret := girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("get_active_text", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(comboBox)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// Insert inserts text at position in the list of strings stored in combo_box.
//
// If id is non-NULL then it is used as the ID of the row. See
// gtk.ComboBox:id-column.
//
// If position is negative then text is appended.
//
// The function takes the following parameters:
//
//    - position: index to insert text.
//    - id (optional): string ID for this value, or NULL.
//    - text: string to display.
//
func (comboBox *ComboBoxText) Insert(position int32, id, text string) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)
	if id != "" {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(id)))
		defer C.free(unsafe.Pointer(_args[2]))
	}
	*(**C.void)(unsafe.Pointer(&_args[3])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[3]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("insert", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(position)
	runtime.KeepAlive(id)
	runtime.KeepAlive(text)
}

// InsertText inserts text at position in the list of strings stored in
// combo_box.
//
// If position is negative then text is appended.
//
// This is the same as calling gtk.ComboBoxText.Insert() with a NULL ID string.
//
// The function takes the following parameters:
//
//    - position: index to insert text.
//    - text: string.
//
func (comboBox *ComboBoxText) InsertText(position int32, text string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[2]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("insert_text", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(position)
	runtime.KeepAlive(text)
}

// Prepend prepends text to the list of strings stored in combo_box.
//
// If id is non-NULL then it is used as the ID of the row.
//
// This is the same as calling gtk.ComboBoxText.Insert() with a position of 0.
//
// The function takes the following parameters:
//
//    - id (optional): string ID for this value, or NULL.
//    - text: string.
//
func (comboBox *ComboBoxText) Prepend(id, text string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	if id != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
		defer C.free(unsafe.Pointer(_args[1]))
	}
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[2]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("prepend", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(id)
	runtime.KeepAlive(text)
}

// PrependText prepends text to the list of strings stored in combo_box.
//
// This is the same as calling gtk.ComboBoxText.InsertText() with a position of
// 0.
//
// The function takes the following parameters:
//
//    - text: string.
//
func (comboBox *ComboBoxText) PrependText(text string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("prepend_text", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(text)
}

// Remove removes the string at position from combo_box.
//
// The function takes the following parameters:
//
//    - position: index of the item to remove.
//
func (comboBox *ComboBoxText) Remove(position int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(position)

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("remove", _args[:], nil)

	runtime.KeepAlive(comboBox)
	runtime.KeepAlive(position)
}

// RemoveAll removes all the text entries from the combo box.
func (comboBox *ComboBoxText) RemoveAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(comboBox).Native()))

	girepository.MustFind("Gtk", "ComboBoxText").InvokeMethod("remove_all", _args[:], nil)

	runtime.KeepAlive(comboBox)
}
