// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GtkWidget* _gotk4_gtk4_FlowBoxCreateWidgetFunc(gpointer, gpointer);
// extern gboolean _gotk4_gtk4_FlowBoxFilterFunc(void*, gpointer);
// extern int _gotk4_gtk4_FlowBoxSortFunc(void*, void*, gpointer);
// extern void _gotk4_gtk4_FlowBoxChildClass_activate(void*);
// extern void _gotk4_gtk4_FlowBoxChild_ConnectActivate(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBoxForEachFunc(void*, void*, gpointer);
// extern void _gotk4_gtk4_FlowBox_ConnectActivateCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectChildActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectToggleCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectUnselectAll(gpointer, guintptr);
// extern void callbackDelete(gpointer);
import "C"

// glib.Type values for gtkflowbox.go.
var (
	GTypeFlowBox      = coreglib.Type(C.gtk_flow_box_get_type())
	GTypeFlowBoxChild = coreglib.Type(C.gtk_flow_box_child_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFlowBox, F: marshalFlowBox},
		{T: GTypeFlowBoxChild, F: marshalFlowBoxChild},
	})
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a
// GListModel.
//
// This function is called for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func(item *coreglib.Object) (widget Widgetter)

//export _gotk4_gtk4_FlowBoxCreateWidgetFunc
func _gotk4_gtk4_FlowBoxCreateWidgetFunc(arg1 C.gpointer, arg2 C.gpointer) (cret *C.GtkWidget) {
	var fn FlowBoxCreateWidgetFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxCreateWidgetFunc)
	}

	var _item *coreglib.Object // out

	_item = coreglib.Take(unsafe.Pointer(arg1))

	widget := fn(_item)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(widget).Native()))

	return cret
}

// FlowBoxFilterFunc: function that will be called whenever a child changes or
// is added.
//
// It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func(child *FlowBoxChild) (ok bool)

//export _gotk4_gtk4_FlowBoxFilterFunc
func _gotk4_gtk4_FlowBoxFilterFunc(arg1 *C.void, arg2 C.gpointer) (cret C.gboolean) {
	var fn FlowBoxFilterFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxFilterFunc)
	}

	var _child *FlowBoxChild // out

	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))

	ok := fn(_child)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// FlowBoxForEachFunc: function used by gtk_flow_box_selected_foreach().
//
// It will be called on every selected child of the box.
type FlowBoxForEachFunc func(box *FlowBox, child *FlowBoxChild)

//export _gotk4_gtk4_FlowBoxForEachFunc
func _gotk4_gtk4_FlowBoxForEachFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) {
	var fn FlowBoxForEachFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxForEachFunc)
	}

	var _box *FlowBox        // out
	var _child *FlowBoxChild // out

	_box = wrapFlowBox(coreglib.Take(unsafe.Pointer(arg1)))
	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg2)))

	fn(_box, _child)
}

// FlowBoxSortFunc: function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func(child1, child2 *FlowBoxChild) (gint int32)

//export _gotk4_gtk4_FlowBoxSortFunc
func _gotk4_gtk4_FlowBoxSortFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) (cret C.int) {
	var fn FlowBoxSortFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FlowBoxSortFunc)
	}

	var _child1 *FlowBoxChild // out
	var _child2 *FlowBoxChild // out

	_child1 = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))
	_child2 = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg2)))

	gint := fn(_child1, _child2)

	cret = C.int(gint)

	return cret
}

// FlowBox: GtkFlowBox puts child widgets in reflowing grid.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a GtkScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only GtkFlowBoxChild children, you can add
// any kind of widget to it via gtk.FlowBox.Insert(), and a GtkFlowBoxChild
// widget will automatically be inserted between the box and the widget.
//
// Also see gtk.ListBox.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
//
//
// Accessibility
//
// GtkFlowBox uses the GTK_ACCESSIBLE_ROLE_GRID role, and GtkFlowBoxChild uses
// the GTK_ACCESSIBLE_ROLE_GRID_CELL role.
type FlowBox struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*FlowBox)(nil)
	_ coreglib.Objector = (*FlowBox)(nil)
)

func wrapFlowBox(obj *coreglib.Object) *FlowBox {
	return &FlowBox{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	return wrapFlowBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_FlowBox_ConnectActivateCursorChild
func _gotk4_gtk4_FlowBox_ConnectActivateCursorChild(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivateCursorChild is emitted when the user activates the box.
//
// This is a keybinding signal (class.SignalAction.html).
func (box *FlowBox) ConnectActivateCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "activate-cursor-child", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectActivateCursorChild), f)
}

//export _gotk4_gtk4_FlowBox_ConnectChildActivated
func _gotk4_gtk4_FlowBox_ConnectChildActivated(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(child *FlowBoxChild)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(child *FlowBoxChild))
	}

	var _child *FlowBoxChild // out

	_child = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(arg1)))

	f(_child)
}

// ConnectChildActivated is emitted when a child has been activated by the user.
func (box *FlowBox) ConnectChildActivated(f func(child *FlowBoxChild)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "child-activated", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectChildActivated), f)
}

//export _gotk4_gtk4_FlowBox_ConnectSelectAll
func _gotk4_gtk4_FlowBox_ConnectSelectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectAll is emitted to select all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default bindings for this signal is <kbd>Ctrl</kbd>-<kbd>a</kbd>.
func (box *FlowBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "select-all", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectSelectAll), f)
}

//export _gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged
func _gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectedChildrenChanged is emitted when the set of selected children
// changes.
//
// Use gtk.FlowBox.SelectedForEach() or gtk.FlowBox.GetSelectedChildren() to
// obtain the selected children.
func (box *FlowBox) ConnectSelectedChildrenChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "selected-children-changed", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged), f)
}

//export _gotk4_gtk4_FlowBox_ConnectToggleCursorChild
func _gotk4_gtk4_FlowBox_ConnectToggleCursorChild(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectToggleCursorChild is emitted to toggle the selection of the child that
// has the focus.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is <kbd>Ctrl</kbd>-<kbd>Space</kbd>.
func (box *FlowBox) ConnectToggleCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "toggle-cursor-child", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectToggleCursorChild), f)
}

//export _gotk4_gtk4_FlowBox_ConnectUnselectAll
func _gotk4_gtk4_FlowBox_ConnectUnselectAll(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnselectAll is emitted to unselect all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default bindings for this signal is
// <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>a</kbd>.
func (box *FlowBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(box, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectUnselectAll), f)
}

// NewFlowBox creates a GtkFlowBox.
//
// The function returns the following values:
//
//    - flowBox: new GtkFlowBox.
//
func NewFlowBox() *FlowBox {
	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("new_FlowBox", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _flowBox *FlowBox // out

	_flowBox = wrapFlowBox(coreglib.Take(unsafe.Pointer(_cret)))

	return _flowBox
}

// BindModel binds model to box.
//
// If box was already bound to a model, that previous binding is destroyed.
//
// The contents of box are cleared and then filled with widgets that represent
// items from model. box is updated whenever model changes. If model is NULL,
// box is left empty.
//
// It is undefined to add or remove widgets directly (for example, with
// gtk.FlowBox.Insert()) while box is bound to a model.
//
// Note that using a model is incompatible with the filtering and sorting
// functionality in GtkFlowBox. When using a model, filtering and sorting should
// be implemented by the model.
//
// The function takes the following parameters:
//
//    - model (optional): GListModel to be bound to box.
//    - createWidgetFunc: function that creates widgets for items.
//
func (box *FlowBox) BindModel(model gio.ListModeller, createWidgetFunc FlowBoxCreateWidgetFunc) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if model != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(model).Native()))
	}
	*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gtk4_FlowBoxCreateWidgetFunc)
	_args[3] = C.gpointer(gbox.Assign(createWidgetFunc))
	_args[4] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("bind_model", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(model)
	runtime.KeepAlive(createWidgetFunc)
}

// ActivateOnSingleClick returns whether children activate on single clicks.
//
// The function returns the following values:
//
//    - ok: TRUE if children are activated on single click, FALSE otherwise.
//
func (box *FlowBox) ActivateOnSingleClick() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_activate_on_single_click", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ChildAtIndex gets the nth child in the box.
//
// The function takes the following parameters:
//
//    - idx: position of the child.
//
// The function returns the following values:
//
//    - flowBoxChild (optional): child widget, which will always be a
//      GtkFlowBoxChild or NULL in case no child widget with the given index
//      exists.
//
func (box *FlowBox) ChildAtIndex(idx int32) *FlowBoxChild {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(idx)

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_child_at_index", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(idx)

	var _flowBoxChild *FlowBoxChild // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _flowBoxChild
}

// ChildAtPos gets the child in the (x, y) position.
//
// Both x and y are assumed to be relative to the origin of box.
//
// The function takes the following parameters:
//
//    - x coordinate of the child.
//    - y coordinate of the child.
//
// The function returns the following values:
//
//    - flowBoxChild (optional): child widget, which will always be a
//      GtkFlowBoxChild or NULL in case no child widget exists for the given x
//      and y coordinates.
//
func (box *FlowBox) ChildAtPos(x, y int32) *FlowBoxChild {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(x)
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(y)

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_child_at_pos", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _flowBoxChild *FlowBoxChild // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _flowBoxChild
}

// ColumnSpacing gets the horizontal spacing.
//
// The function returns the following values:
//
//    - guint: horizontal spacing.
//
func (box *FlowBox) ColumnSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_column_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// Homogeneous returns whether the box is homogeneous.
//
// The function returns the following values:
//
//    - ok: TRUE if the box is homogeneous.
//
func (box *FlowBox) Homogeneous() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_homogeneous", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// MaxChildrenPerLine gets the maximum number of children per line.
//
// The function returns the following values:
//
//    - guint: maximum number of children per line.
//
func (box *FlowBox) MaxChildrenPerLine() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_max_children_per_line", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// MinChildrenPerLine gets the minimum number of children per line.
//
// The function returns the following values:
//
//    - guint: minimum number of children per line.
//
func (box *FlowBox) MinChildrenPerLine() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_min_children_per_line", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// RowSpacing gets the vertical spacing.
//
// The function returns the following values:
//
//    - guint: vertical spacing.
//
func (box *FlowBox) RowSpacing() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_row_spacing", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// SelectedChildren creates a list of all selected children.
//
// The function returns the following values:
//
//    - list: A GList containing the GtkWidget for each selected child. Free with
//      g_list_free() when done.
//
func (box *FlowBox) SelectedChildren() []*FlowBoxChild {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBox").InvokeMethod("get_selected_children", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(box)

	var _list []*FlowBoxChild // out

	_list = make([]*FlowBoxChild, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *FlowBoxChild // out
		dst = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Insert inserts the widget into box at position.
//
// If a sort function is set, the widget will actually be inserted at the
// calculated position.
//
// If position is -1, or larger than the total number of children in the box,
// then the widget will be appended to the end.
//
// The function takes the following parameters:
//
//    - widget: GtkWidget to add.
//    - position to insert child in.
//
func (box *FlowBox) Insert(widget Widgetter, position int32) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(position)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("insert", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(position)
}

// InvalidateFilter updates the filtering for all children.
//
// Call this function when the result of the filter function on the box is
// changed due ot an external factor. For instance, this would be used if the
// filter function just looked for a specific search term, and the entry with
// the string has changed.
func (box *FlowBox) InvalidateFilter() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("invalidate_filter", _args[:], nil)

	runtime.KeepAlive(box)
}

// InvalidateSort updates the sorting for all children.
//
// Call this when the result of the sort function on box is changed due to an
// external factor.
func (box *FlowBox) InvalidateSort() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("invalidate_sort", _args[:], nil)

	runtime.KeepAlive(box)
}

// Remove removes a child from box.
//
// The function takes the following parameters:
//
//    - widget: child widget to remove.
//
func (box *FlowBox) Remove(widget Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("remove", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(widget)
}

// SelectAll: select all children of box, if the selection mode allows it.
func (box *FlowBox) SelectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("select_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// SelectChild selects a single child of box, if the selection mode allows it.
//
// The function takes the following parameters:
//
//    - child of box.
//
func (box *FlowBox) SelectChild(child *FlowBoxChild) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("select_child", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// SelectedForEach calls a function for each selected child.
//
// Note that the selection cannot be modified from within this function.
//
// The function takes the following parameters:
//
//    - fn: function to call for each selected child.
//
func (box *FlowBox) SelectedForEach(fn FlowBoxForEachFunc) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_FlowBoxForEachFunc)
	_args[2] = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_args[2]))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("selected_foreach", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(fn)
}

// SetActivateOnSingleClick: if single is TRUE, children will be activated when
// you click on them, otherwise you need to double-click.
//
// The function takes the following parameters:
//
//    - single: TRUE to emit child-activated on a single click.
//
func (box *FlowBox) SetActivateOnSingleClick(single bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if single {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_activate_on_single_click", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(single)
}

// SetColumnSpacing sets the horizontal space to add between children.
//
// The function takes the following parameters:
//
//    - spacing to use.
//
func (box *FlowBox) SetColumnSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_column_spacing", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(spacing)
}

// SetFilterFunc: by setting a filter function on the box one can decide
// dynamically which of the children to show.
//
// For instance, to implement a search function that only shows the children
// matching the search terms.
//
// The filter_func will be called for each child after the call, and it will
// continue to be called each time a child changes (via
// gtk.FlowBoxChild.Changed()) or when gtk.FlowBox.InvalidateFilter() is called.
//
// Note that using a filter function is incompatible with using a model (see
// gtk.FlowBox.BindModel()).
//
// The function takes the following parameters:
//
//    - filterFunc (optional): callback that lets you filter which children to
//      show.
//
func (box *FlowBox) SetFilterFunc(filterFunc FlowBoxFilterFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if filterFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_FlowBoxFilterFunc)
		_args[2] = C.gpointer(gbox.Assign(filterFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_filter_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(filterFunc)
}

// SetHAdjustment hooks up an adjustment to focus handling in box.
//
// The adjustment is also used for autoscrolling during rubberband selection.
// See gtk.ScrolledWindow.GetHAdjustment() for a typical way of obtaining the
// adjustment, and gtk.FlowBox.SetVAdjustment() for setting the vertical
// adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate system
// as the allocation for immediate children of the box.
//
// The function takes the following parameters:
//
//    - adjustment which should be adjusted when the focus is moved among the
//      descendents of container.
//
func (box *FlowBox) SetHAdjustment(adjustment *Adjustment) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_hadjustment", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(adjustment)
}

// SetHomogeneous sets whether or not all children of box are given equal space
// in the box.
//
// The function takes the following parameters:
//
//    - homogeneous: TRUE to create equal allotments, FALSE for variable
//      allotments.
//
func (box *FlowBox) SetHomogeneous(homogeneous bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if homogeneous {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_homogeneous", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(homogeneous)
}

// SetMaxChildrenPerLine sets the maximum number of children to request and
// allocate space for in box’s orientation.
//
// Setting the maximum number of children per line limits the overall natural
// size request to be no more than n_children children long in the given
// orientation.
//
// The function takes the following parameters:
//
//    - nChildren: maximum number of children per line.
//
func (box *FlowBox) SetMaxChildrenPerLine(nChildren uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(nChildren)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_max_children_per_line", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(nChildren)
}

// SetMinChildrenPerLine sets the minimum number of children to line up in box’s
// orientation before flowing.
//
// The function takes the following parameters:
//
//    - nChildren: minimum number of children per line.
//
func (box *FlowBox) SetMinChildrenPerLine(nChildren uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(nChildren)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_min_children_per_line", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(nChildren)
}

// SetRowSpacing sets the vertical space to add between children.
//
// The function takes the following parameters:
//
//    - spacing to use.
//
func (box *FlowBox) SetRowSpacing(spacing uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(spacing)

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_row_spacing", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(spacing)
}

// SetSortFunc: by setting a sort function on the box, one can dynamically
// reorder the children of the box, based on the contents of the children.
//
// The sort_func will be called for each child after the call, and will continue
// to be called each time a child changes (via gtk.FlowBoxChild.Changed()) and
// when gtk.FlowBox.InvalidateSort() is called.
//
// Note that using a sort function is incompatible with using a model (see
// gtk.FlowBox.BindModel()).
//
// The function takes the following parameters:
//
//    - sortFunc (optional): sort function.
//
func (box *FlowBox) SetSortFunc(sortFunc FlowBoxSortFunc) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	if sortFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[1])) = (*[0]byte)(C._gotk4_gtk4_FlowBoxSortFunc)
		_args[2] = C.gpointer(gbox.Assign(sortFunc))
		_args[3] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_sort_func", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(sortFunc)
}

// SetVAdjustment hooks up an adjustment to focus handling in box.
//
// The adjustment is also used for autoscrolling during rubberband selection.
// See gtk.ScrolledWindow.GetVAdjustment() for a typical way of obtaining the
// adjustment, and gtk.FlowBox.SetHAdjustment() for setting the horizontal
// adjustment.
//
// The adjustments have to be in pixel units and in the same coordinate system
// as the allocation for immediate children of the box.
//
// The function takes the following parameters:
//
//    - adjustment which should be adjusted when the focus is moved among the
//      descendents of container.
//
func (box *FlowBox) SetVAdjustment(adjustment *Adjustment) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(adjustment).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("set_vadjustment", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(adjustment)
}

// UnselectAll: unselect all children of box, if the selection mode allows it.
func (box *FlowBox) UnselectAll() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("unselect_all", _args[:], nil)

	runtime.KeepAlive(box)
}

// UnselectChild unselects a single child of box, if the selection mode allows
// it.
//
// The function takes the following parameters:
//
//    - child of box.
//
func (box *FlowBox) UnselectChild(child *FlowBoxChild) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(box).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBox").InvokeMethod("unselect_child", _args[:], nil)

	runtime.KeepAlive(box)
	runtime.KeepAlive(child)
}

// FlowBoxChildOverrider contains methods that are overridable.
type FlowBoxChildOverrider interface {
	Activate()
}

// FlowBoxChild: GtkFlowBoxChild is the kind of widget that can be added to a
// GtkFlowBox.
type FlowBoxChild struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*FlowBoxChild)(nil)
)

func classInitFlowBoxChilder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gtk", "FlowBoxChildClass")

	if _, ok := goval.(interface{ Activate() }); ok {
		o := pclass.StructFieldOffset("activate")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gtk4_FlowBoxChildClass_activate)
	}
}

//export _gotk4_gtk4_FlowBoxChildClass_activate
func _gotk4_gtk4_FlowBoxChildClass_activate(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Activate() })

	iface.Activate()
}

func wrapFlowBoxChild(obj *coreglib.Object) *FlowBoxChild {
	return &FlowBoxChild{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	return wrapFlowBoxChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_FlowBoxChild_ConnectActivate
func _gotk4_gtk4_FlowBoxChild_ConnectActivate(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectActivate is emitted when the user activates a child widget in a
// GtkFlowBox.
//
// This can be happen either by clicking or double-clicking, or via a
// keybinding.
//
// This is a keybinding signal (class.SignalAction.html), but it can be used by
// applications for their own purposes.
//
// The default bindings are <kbd>Space</kbd> and <kbd>Enter</kbd>.
func (child *FlowBoxChild) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(child, "activate", false, unsafe.Pointer(C._gotk4_gtk4_FlowBoxChild_ConnectActivate), f)
}

// NewFlowBoxChild creates a new GtkFlowBoxChild.
//
// This should only be used as a child of a GtkFlowBox.
//
// The function returns the following values:
//
//    - flowBoxChild: new GtkFlowBoxChild.
//
func NewFlowBoxChild() *FlowBoxChild {
	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("new_FlowBoxChild", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _flowBoxChild *FlowBoxChild // out

	_flowBoxChild = wrapFlowBoxChild(coreglib.Take(unsafe.Pointer(_cret)))

	return _flowBoxChild
}

// Changed marks child as changed, causing any state that depends on this to be
// updated.
//
// This affects sorting and filtering.
//
// Note that calls to this method must be in sync with the data used for the
// sorting and filtering functions. For instance, if the list is mirroring some
// external data set, and *two* children changed in the external data set when
// you call gtk_flow_box_child_changed() on the first child, the sort function
// must only read the new data for the first of the two changed children,
// otherwise the resorting of the children will be wrong.
//
// This generally means that if you don’t fully control the data model, you have
// to duplicate the data that affects the sorting and filtering functions into
// the widgets themselves.
//
// Another alternative is to call gtk.FlowBox.InvalidateSort() on any model
// change, but that is more expensive.
func (child *FlowBoxChild) Changed() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("changed", _args[:], nil)

	runtime.KeepAlive(child)
}

// Child gets the child widget of self.
//
// The function returns the following values:
//
//    - widget (optional): child widget of self.
//
func (self *FlowBoxChild) Child() Widgetter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("get_child", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _widget Widgetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Widgetter)
				return ok
			})
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Index gets the current index of the child in its GtkFlowBox container.
//
// The function returns the following values:
//
//    - gint: index of the child, or -1 if the child is not in a flow box.
//
func (child *FlowBoxChild) Index() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("get_index", _args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(child)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// IsSelected returns whether the child is currently selected in its GtkFlowBox
// container.
//
// The function returns the following values:
//
//    - ok: TRUE if child is selected.
//
func (child *FlowBoxChild) IsSelected() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))

	_gret := girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("is_selected", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(child)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetChild sets the child widget of self.
//
// The function takes the following parameters:
//
//    - child (optional) widget.
//
func (self *FlowBoxChild) SetChild(child Widgetter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if child != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(child).Native()))
	}

	girepository.MustFind("Gtk", "FlowBoxChild").InvokeMethod("set_child", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}
