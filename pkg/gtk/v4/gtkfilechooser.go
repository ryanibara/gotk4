// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeFileChooserAction returns the GType for the type FileChooserAction.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFileChooserAction() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "FileChooserAction").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFileChooserAction)
	return gtype
}

// GTypeFileChooserError returns the GType for the type FileChooserError.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFileChooserError() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "FileChooserError").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFileChooserError)
	return gtype
}

// GTypeFileChooser returns the GType for the type FileChooser.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFileChooser() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "FileChooser").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFileChooser)
	return gtype
}

// FileChooserAction describes whether a GtkFileChooser is being used to open
// existing files or to save to a possibly new file.
type FileChooserAction C.gint

const (
	// FileChooserActionOpen indicates open mode. The file chooser will only let
	// the user pick an existing file.
	FileChooserActionOpen FileChooserAction = iota
	// FileChooserActionSave indicates save mode. The file chooser will let the
	// user pick an existing file, or type in a new filename.
	FileChooserActionSave
	// FileChooserActionSelectFolder indicates an Open mode for selecting
	// folders. The file chooser will let the user pick an existing folder.
	FileChooserActionSelectFolder
)

func marshalFileChooserAction(p uintptr) (interface{}, error) {
	return FileChooserAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserAction.
func (f FileChooserAction) String() string {
	switch f {
	case FileChooserActionOpen:
		return "Open"
	case FileChooserActionSave:
		return "Save"
	case FileChooserActionSelectFolder:
		return "SelectFolder"
	default:
		return fmt.Sprintf("FileChooserAction(%d)", f)
	}
}

// FileChooserError: these identify the various errors that can occur while
// calling GtkFileChooser functions.
type FileChooserError C.gint

const (
	// FileChooserErrorNonexistent indicates that a file does not exist.
	FileChooserErrorNonexistent FileChooserError = iota
	// FileChooserErrorBadFilename indicates a malformed filename.
	FileChooserErrorBadFilename
	// FileChooserErrorAlreadyExists indicates a duplicate path (e.g. when
	// adding a bookmark).
	FileChooserErrorAlreadyExists
	// FileChooserErrorIncompleteHostname indicates an incomplete hostname (e.g.
	// "http://foo" without a slash after that).
	FileChooserErrorIncompleteHostname
)

func marshalFileChooserError(p uintptr) (interface{}, error) {
	return FileChooserError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FileChooserError.
func (f FileChooserError) String() string {
	switch f {
	case FileChooserErrorNonexistent:
		return "Nonexistent"
	case FileChooserErrorBadFilename:
		return "BadFilename"
	case FileChooserErrorAlreadyExists:
		return "AlreadyExists"
	case FileChooserErrorIncompleteHostname:
		return "IncompleteHostname"
	default:
		return fmt.Sprintf("FileChooserError(%d)", f)
	}
}

// FileChooserErrorQuark registers an error quark for GtkFileChooser errors.
//
// The function returns the following values:
//
//    - quark: error quark used for GtkFileChooser errors.
//
func FileChooserErrorQuark() glib.Quark {
	_info := girepository.MustFind("Gtk", "quark")
	_gret := _info.Invoke(nil, nil)
	_cret := *(*C.guint32)(unsafe.Pointer(&_gret))

	var _quark glib.Quark // out

	_quark = uint32(*(*C.guint32)(unsafe.Pointer(&_cret)))

	return _quark
}

// FileChooser: GtkFileChooser is an interface that can be implemented by file
// selection widgets.
//
// In GTK, the main objects that implement this interface are
// gtk.FileChooserWidget and gtk.FileChooserDialog.
//
// You do not need to write an object that implements the GtkFileChooser
// interface unless you are trying to adapt an existing file selector to expose
// a standard programming interface.
//
// GtkFileChooser allows for shortcuts to various places in the filesystem. In
// the default implementation these are displayed in the left pane. It may be a
// bit confusing at first that these shortcuts come from various sources and in
// various flavours, so lets explain the terminology here:
//
// - Bookmarks: are created by the user, by dragging folders from the right pane
// to the left pane, or by using the “Add”. Bookmarks can be renamed and deleted
// by the user.
//
// - Shortcuts: can be provided by the application. For example, a Paint program
// may want to add a shortcut for a Clipart folder. Shortcuts cannot be modified
// by the user.
//
// - Volumes: are provided by the underlying filesystem abstraction. They are
// the “roots” of the filesystem.
//
//
// File Names and Encodings
//
// When the user is finished selecting files in a GtkFileChooser, your program
// can get the selected filenames as GFiles.
//
//
// Adding options
//
// You can add extra widgets to a file chooser to provide options that are not
// present in the default design, by using gtk.FileChooser.AddChoice(). Each
// choice has an identifier and a user visible label; additionally, each choice
// can have multiple options. If a choice has no option, it will be rendered as
// a check button with the given label; if a choice has options, it will be
// rendered as a combo box.
//
// FileChooser wraps an interface. This means the user can get the
// underlying type by calling Cast().
type FileChooser struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FileChooser)(nil)
)

// FileChooserer describes FileChooser's interface methods.
type FileChooserer interface {
	coreglib.Objector

	// AddChoice adds a 'choice' to the file chooser.
	AddChoice(id, label string, options, optionLabels []string)
	// AddFilter adds filter to the list of filters that the user can select
	// between.
	AddFilter(filter *FileFilter)
	// AddShortcutFolder adds a folder to be displayed with the shortcut folders
	// in a file chooser.
	AddShortcutFolder(folder gio.Filer) error
	// Choice gets the currently selected option in the 'choice' with the given
	// ID.
	Choice(id string) string
	// CreateFolders gets whether file chooser will offer to create new folders.
	CreateFolders() bool
	// CurrentFolder gets the current folder of chooser as #GFile.
	CurrentFolder() *gio.File
	// CurrentName gets the current name in the file selector, as entered by the
	// user.
	CurrentName() string
	// File gets the GFile for the currently selected file in the file selector.
	File() *gio.File
	// Files lists all the selected files and subfolders in the current folder
	// of chooser as #GFile.
	Files() *gio.ListModel
	// Filter gets the current filter.
	Filter() *FileFilter
	// Filters gets the current set of user-selectable filters, as a list model.
	Filters() *gio.ListModel
	// SelectMultiple gets whether multiple files can be selected in the file
	// chooser.
	SelectMultiple() bool
	// ShortcutFolders queries the list of shortcut folders in the file chooser.
	ShortcutFolders() *gio.ListModel
	// RemoveChoice removes a 'choice' that has been added with
	// gtk_file_chooser_add_choice().
	RemoveChoice(id string)
	// RemoveFilter removes filter from the list of filters that the user can
	// select between.
	RemoveFilter(filter *FileFilter)
	// RemoveShortcutFolder removes a folder from the shortcut folders in a file
	// chooser.
	RemoveShortcutFolder(folder gio.Filer) error
	// SetChoice selects an option in a 'choice' that has been added with
	// gtk_file_chooser_add_choice().
	SetChoice(id, option string)
	// SetCreateFolders sets whether file chooser will offer to create new
	// folders.
	SetCreateFolders(createFolders bool)
	// SetCurrentFolder sets the current folder for chooser from a #GFile.
	SetCurrentFolder(file gio.Filer) error
	// SetCurrentName sets the current name in the file selector, as if entered
	// by the user.
	SetCurrentName(name string)
	// SetFile sets file as the current filename for the file chooser.
	SetFile(file gio.Filer) error
	// SetFilter sets the current filter.
	SetFilter(filter *FileFilter)
	// SetSelectMultiple sets whether multiple files can be selected in the file
	// chooser.
	SetSelectMultiple(selectMultiple bool)
}

var _ FileChooserer = (*FileChooser)(nil)

func wrapFileChooser(obj *coreglib.Object) *FileChooser {
	return &FileChooser{
		Object: obj,
	}
}

func marshalFileChooser(p uintptr) (interface{}, error) {
	return wrapFileChooser(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddChoice adds a 'choice' to the file chooser.
//
// This is typically implemented as a combobox or, for boolean choices, as a
// checkbutton. You can select a value using gtk.FileChooser.SetChoice() before
// the dialog is shown, and you can obtain the user-selected value in the
// gtk.Dialog::response signal handler using gtk.FileChooser.GetChoice().
//
// The function takes the following parameters:
//
//    - id for the added choice.
//    - label: user-visible label for the added choice.
//    - options (optional) ids for the options of the choice, or NULL for a
//      boolean choice.
//    - optionLabels (optional): user-visible labels for the options, must be the
//      same length as options.
//
func (chooser *FileChooser) AddChoice(id, label string, options, optionLabels []string) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_args[1]))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(label)))
	defer C.free(unsafe.Pointer(_args[2]))
	{
		*(***C.void)(unsafe.Pointer(&_args[3])) = (**C.void)(C.calloc(C.size_t((len(options) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_args[3]))
		{
			out := unsafe.Slice(_args[3], len(options)+1)
			var zero *C.void
			out[len(options)] = zero
			for i := range options {
				*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(C.CString(options[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	{
		*(***C.void)(unsafe.Pointer(&_args[4])) = (**C.void)(C.calloc(C.size_t((len(optionLabels) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_args[4]))
		{
			out := unsafe.Slice(_args[4], len(optionLabels)+1)
			var zero *C.void
			out[len(optionLabels)] = zero
			for i := range optionLabels {
				*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(C.CString(optionLabels[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("add_choice", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
	runtime.KeepAlive(label)
	runtime.KeepAlive(options)
	runtime.KeepAlive(optionLabels)
}

// AddFilter adds filter to the list of filters that the user can select
// between.
//
// When a filter is selected, only files that are passed by that filter are
// displayed.
//
// Note that the chooser takes ownership of the filter if it is floating, so you
// have to ref and sink it if you want to keep a reference.
//
// The function takes the following parameters:
//
//    - filter: GtkFileFilter.
//
func (chooser *FileChooser) AddFilter(filter *FileFilter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("add_filter", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// AddShortcutFolder adds a folder to be displayed with the shortcut folders in
// a file chooser.
//
// The function takes the following parameters:
//
//    - folder: GFile for the folder to add.
//
func (chooser *FileChooser) AddShortcutFolder(folder gio.Filer) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(folder).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("add_shortcut_folder", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Choice gets the currently selected option in the 'choice' with the given ID.
//
// The function takes the following parameters:
//
//    - id: ID of the choice to get.
//
// The function returns the following values:
//
//    - utf8: ID of the currently selected option.
//
func (chooser *FileChooser) Choice(id string) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_choice", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// CreateFolders gets whether file chooser will offer to create new folders.
//
// The function returns the following values:
//
//    - ok: TRUE if the Create Folder button should be displayed.
//
func (chooser *FileChooser) CreateFolders() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_create_folders", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CurrentFolder gets the current folder of chooser as #GFile.
//
// The function returns the following values:
//
//    - file: GFile for the current folder.
//
func (chooser *FileChooser) CurrentFolder() *gio.File {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_current_folder", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _file *gio.File // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_file = &gio.File{
			Object: obj,
		}
	}

	return _file
}

// CurrentName gets the current name in the file selector, as entered by the
// user.
//
// This is meant to be used in save dialogs, to get the currently typed filename
// when the file itself does not exist yet.
//
// The function returns the following values:
//
//    - utf8: raw text from the file chooser’s “Name” entry. Free with g_free().
//      Note that this string is not a full pathname or URI; it is whatever the
//      contents of the entry are. Note also that this string is in UTF-8
//      encoding, which is not necessarily the system’s encoding for filenames.
//
func (chooser *FileChooser) CurrentName() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_current_name", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// File gets the GFile for the currently selected file in the file selector.
//
// If multiple files are selected, one of the files will be returned at random.
//
// If the file chooser is in folder mode, this function returns the selected
// folder.
//
// The function returns the following values:
//
//    - file: selected GFile. You own the returned file; use g_object_unref() to
//      release it.
//
func (chooser *FileChooser) File() *gio.File {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_file", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _file *gio.File // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_file = &gio.File{
			Object: obj,
		}
	}

	return _file
}

// Files lists all the selected files and subfolders in the current folder of
// chooser as #GFile.
//
// The function returns the following values:
//
//    - listModel: list model containing a GFile for each selected file and
//      subfolder in the current folder. Free the returned list with
//      g_object_unref().
//
func (chooser *FileChooser) Files() *gio.ListModel {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_files", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _listModel *gio.ListModel // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_listModel = &gio.ListModel{
			Object: obj,
		}
	}

	return _listModel
}

// Filter gets the current filter.
//
// The function returns the following values:
//
//    - fileFilter (optional): current filter, or NULL.
//
func (chooser *FileChooser) Filter() *FileFilter {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_filter", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _fileFilter *FileFilter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_fileFilter = wrapFileFilter(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _fileFilter
}

// Filters gets the current set of user-selectable filters, as a list model.
//
// See gtk.FileChooser.AddFilter() and gtk.FileChooser.RemoveFilter() for
// changing individual filters.
//
// You should not modify the returned list model. Future changes to chooser may
// or may not affect the returned model.
//
// The function returns the following values:
//
//    - listModel: GListModel containing the current set of user-selectable
//      filters.
//
func (chooser *FileChooser) Filters() *gio.ListModel {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_filters", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _listModel *gio.ListModel // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_listModel = &gio.ListModel{
			Object: obj,
		}
	}

	return _listModel
}

// SelectMultiple gets whether multiple files can be selected in the file
// chooser.
//
// The function returns the following values:
//
//    - ok: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SelectMultiple() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_select_multiple", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ShortcutFolders queries the list of shortcut folders in the file chooser.
//
// You should not modify the returned list model. Future changes to chooser may
// or may not affect the returned model.
//
// The function returns the following values:
//
//    - listModel: list model of GFiles.
//
func (chooser *FileChooser) ShortcutFolders() *gio.ListModel {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_gret := _info.InvokeIfaceMethod("get_shortcut_folders", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(chooser)

	var _listModel *gio.ListModel // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_listModel = &gio.ListModel{
			Object: obj,
		}
	}

	return _listModel
}

// RemoveChoice removes a 'choice' that has been added with
// gtk_file_chooser_add_choice().
//
// The function takes the following parameters:
//
//    - id: ID of the choice to remove.
//
func (chooser *FileChooser) RemoveChoice(id string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("remove_choice", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
}

// RemoveFilter removes filter from the list of filters that the user can select
// between.
//
// The function takes the following parameters:
//
//    - filter: GtkFileFilter.
//
func (chooser *FileChooser) RemoveFilter(filter *FileFilter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("remove_filter", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// RemoveShortcutFolder removes a folder from the shortcut folders in a file
// chooser.
//
// The function takes the following parameters:
//
//    - folder: GFile for the folder to remove.
//
func (chooser *FileChooser) RemoveShortcutFolder(folder gio.Filer) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(folder).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("remove_shortcut_folder", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(folder)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetChoice selects an option in a 'choice' that has been added with
// gtk_file_chooser_add_choice().
//
// For a boolean choice, the possible options are "true" and "false".
//
// The function takes the following parameters:
//
//    - id: ID of the choice to set.
//    - option: ID of the option to select.
//
func (chooser *FileChooser) SetChoice(id, option string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(id)))
	defer C.free(unsafe.Pointer(_args[1]))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(option)))
	defer C.free(unsafe.Pointer(_args[2]))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_choice", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(id)
	runtime.KeepAlive(option)
}

// SetCreateFolders sets whether file chooser will offer to create new folders.
//
// This is only relevant if the action is not set to be
// GTK_FILE_CHOOSER_ACTION_OPEN.
//
// The function takes the following parameters:
//
//    - createFolders: TRUE if the Create Folder button should be displayed.
//
func (chooser *FileChooser) SetCreateFolders(createFolders bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if createFolders {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_create_folders", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(createFolders)
}

// SetCurrentFolder sets the current folder for chooser from a #GFile.
//
// The function takes the following parameters:
//
//    - file: GFile for the new folder.
//
func (chooser *FileChooser) SetCurrentFolder(file gio.Filer) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_current_folder", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetCurrentName sets the current name in the file selector, as if entered by
// the user.
//
// Note that the name passed in here is a UTF-8 string rather than a filename.
// This function is meant for such uses as a suggested name in a “Save As...”
// dialog. You can pass “Untitled.doc” or a similarly suitable suggestion for
// the name.
//
// If you want to preselect a particular existing file, you should use
// gtk.FileChooser.SetFile() instead.
//
// Please see the documentation for those functions for an example of using
// gtk.FileChooser.SetCurrentName() as well.
//
// The function takes the following parameters:
//
//    - name to use, as a UTF-8 string.
//
func (chooser *FileChooser) SetCurrentName(name string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_current_name", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(name)
}

// SetFile sets file as the current filename for the file chooser.
//
// This includes changing to the file’s parent folder and actually selecting the
// file in list. If the chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the
// file’s base name will also appear in the dialog’s file name entry.
//
// If the file name isn’t in the current folder of chooser, then the current
// folder of chooser will be changed to the folder containing filename.
//
// Note that the file must exist, or nothing will be done except for the
// directory change.
//
// If you are implementing a save dialog, you should use this function if you
// already have a file name to which the user may save; for example, when the
// user opens an existing file and then does “Save As…”. If you don’t have a
// file name already — for example, if the user just created a new file and is
// saving it for the first time, do not call this function.
//
// Instead, use something similar to this:
//
//    static void
//    prepare_file_chooser (GtkFileChooser *chooser,
//                          GFile          *existing_file)
//    {
//      gboolean document_is_new = (existing_file == NULL);
//
//      if (document_is_new)
//        {
//          GFile *default_file_for_saving = g_file_new_for_path ("./out.txt");
//          // the user just created a new document
//          gtk_file_chooser_set_current_folder (chooser, default_file_for_saving, NULL);
//          gtk_file_chooser_set_current_name (chooser, "Untitled document");
//          g_object_unref (default_file_for_saving);
//        }
//      else
//        {
//          // the user edited an existing document
//          gtk_file_chooser_set_file (chooser, existing_file, NULL);
//        }
//    }.
//
// The function takes the following parameters:
//
//    - file: GFile to set as current.
//
func (chooser *FileChooser) SetFile(file gio.Filer) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_file", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(file)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetFilter sets the current filter.
//
// Only the files that pass the filter will be displayed. If the user-selectable
// list of filters is non-empty, then the filter should be one of the filters in
// that list.
//
// Setting the current filter when the list of filters is empty is useful if you
// want to restrict the displayed set of files without letting the user change
// it.
//
// The function takes the following parameters:
//
//    - filter: GtkFileFilter.
//
func (chooser *FileChooser) SetFilter(filter *FileFilter) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(filter).Native()))

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_filter", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(filter)
}

// SetSelectMultiple sets whether multiple files can be selected in the file
// chooser.
//
// This is only relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN
// or GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
//
// The function takes the following parameters:
//
//    - selectMultiple: TRUE if multiple files can be selected.
//
func (chooser *FileChooser) SetSelectMultiple(selectMultiple bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(chooser).Native()))
	if selectMultiple {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "FileChooser")
	_info.InvokeIfaceMethod("set_select_multiple", _args[:], nil)

	runtime.KeepAlive(chooser)
	runtime.KeepAlive(selectMultiple)
}
