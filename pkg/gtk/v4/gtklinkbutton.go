// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gtk4_LinkButton_ConnectActivateLink(gpointer, guintptr);
import "C"

// glib.Type values for gtklinkbutton.go.
var GTypeLinkButton = coreglib.Type(C.gtk_link_button_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeLinkButton, F: marshalLinkButton},
	})
}

// LinkButton: GtkLinkButton is a button with a hyperlink.
//
// !An example GtkLinkButton (link-button.png)
//
// It is useful to show quick links to resources.
//
// A link button is created by calling either gtk.LinkButton.New or
// gtk.LinkButton.NewWithLabel. If using the former, the URI you pass to the
// constructor is used as a label for the widget.
//
// The URI bound to a GtkLinkButton can be set specifically using
// gtk.LinkButton.SetURI().
//
// By default, GtkLinkButton calls gtk.ShowURI() when the button is clicked.
// This behaviour can be overridden by connecting to the
// gtk.LinkButton::activate-link signal and returning TRUE from the signal
// handler.
//
//
// CSS nodes
//
// GtkLinkButton has a single CSS node with name button. To differentiate it
// from a plain GtkButton, it gets the .link style class.
//
//
// Accessibility
//
// GtkLinkButton uses the K_ACCESSIBLE_ROLE_LINK role.
type LinkButton struct {
	_ [0]func() // equal guard
	Button
}

var (
	_ Widgetter         = (*LinkButton)(nil)
	_ coreglib.Objector = (*LinkButton)(nil)
)

func wrapLinkButton(obj *coreglib.Object) *LinkButton {
	return &LinkButton{
		Button: Button{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalLinkButton(p uintptr) (interface{}, error) {
	return wrapLinkButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gtk4_LinkButton_ConnectActivateLink
func _gotk4_gtk4_LinkButton_ConnectActivateLink(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectActivateLink is emitted each time the GtkLinkButton is clicked.
//
// The default handler will call gtk.ShowURI() with the URI stored inside the
// gtk.LinkButton:uri property.
//
// To override the default behavior, you can connect to the ::activate-link
// signal and stop the propagation of the signal by returning TRUE from your
// handler.
func (linkButton *LinkButton) ConnectActivateLink(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(linkButton, "activate-link", false, unsafe.Pointer(C._gotk4_gtk4_LinkButton_ConnectActivateLink), f)
}

// NewLinkButton creates a new GtkLinkButton with the URI as its text.
//
// The function takes the following parameters:
//
//    - uri: valid URI.
//
// The function returns the following values:
//
//    - linkButton: new link button widget.
//
func NewLinkButton(uri string) *LinkButton {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg0))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "LinkButton").InvokeMethod("new_LinkButton", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(uri)

	var _linkButton *LinkButton // out

	_linkButton = wrapLinkButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _linkButton
}

// NewLinkButtonWithLabel creates a new GtkLinkButton containing a label.
//
// The function takes the following parameters:
//
//    - uri: valid URI.
//    - label (optional): text of the button.
//
// The function returns the following values:
//
//    - linkButton: new link button widget.
//
func NewLinkButtonWithLabel(uri, label string) *LinkButton {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg0))
	if label != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(label)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	*(*string)(unsafe.Pointer(&args[0])) = _arg0
	*(*string)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gtk", "LinkButton").InvokeMethod("new_LinkButton_with_label", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(uri)
	runtime.KeepAlive(label)

	var _linkButton *LinkButton // out

	_linkButton = wrapLinkButton(coreglib.Take(unsafe.Pointer(_cret)))

	return _linkButton
}

// URI retrieves the URI of the GtkLinkButton.
//
// The function returns the following values:
//
//    - utf8: valid URI. The returned string is owned by the link button and
//      should not be modified or freed.
//
func (linkButton *LinkButton) URI() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(linkButton).Native()))
	*(**LinkButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "LinkButton").InvokeMethod("get_uri", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(linkButton)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Visited retrieves the “visited” state of the GtkLinkButton.
//
// The button becomes visited when it is clicked. If the URI is changed on the
// button, the “visited” state is unset again.
//
// The state may also be changed using gtk.LinkButton.SetVisited().
//
// The function returns the following values:
//
//    - ok: TRUE if the link has been visited, FALSE otherwise.
//
func (linkButton *LinkButton) Visited() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(linkButton).Native()))
	*(**LinkButton)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gtk", "LinkButton").InvokeMethod("get_visited", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(linkButton)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetURI sets uri as the URI where the GtkLinkButton points.
//
// As a side-effect this unsets the “visited” state of the button.
//
// The function takes the following parameters:
//
//    - uri: valid URI.
//
func (linkButton *LinkButton) SetURI(uri string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(linkButton).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**LinkButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "LinkButton").InvokeMethod("set_uri", args[:], nil)

	runtime.KeepAlive(linkButton)
	runtime.KeepAlive(uri)
}

// SetVisited sets the “visited” state of the GtkLinkButton.
//
// See gtk.LinkButton.GetVisited() for more details.
//
// The function takes the following parameters:
//
//    - visited: new “visited” state.
//
func (linkButton *LinkButton) SetVisited(visited bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(linkButton).Native()))
	if visited {
		_arg1 = C.TRUE
	}
	*(**LinkButton)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gtk", "LinkButton").InvokeMethod("set_visited", args[:], nil)

	runtime.KeepAlive(linkButton)
	runtime.KeepAlive(visited)
}
