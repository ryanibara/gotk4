// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"reflect"
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gtk_viewport_get_type()), F: marshalViewporter},
	})
}

// Viewport: GtkViewport implements scrollability for widgets that lack their
// own scrolling capabilities.
//
// Use GtkViewport to scroll child widgets such as GtkGrid, GtkBox, and so on.
//
// The GtkViewport will start scrolling content only if allocated less than the
// child widgetâ€™s minimum size in a given orientation.
//
//
// CSS nodes
//
// GtkViewport has a single CSS node with name viewport.
//
//
// Accessibility
//
// GtkViewport uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type Viewport struct {
	_ [0]func() // equal guard
	Widget

	*externglib.Object
	Scrollable
}

var (
	_ Widgetter           = (*Viewport)(nil)
	_ externglib.Objector = (*Viewport)(nil)
)

func wrapViewport(obj *externglib.Object) *Viewport {
	return &Viewport{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalViewporter(p uintptr) (interface{}, error) {
	return wrapViewport(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewViewport creates a new GtkViewport.
//
// The new viewport uses the given adjustments, or default adjustments if none
// are given.
//
// The function takes the following parameters:
//
//    - hadjustment (optional): horizontal adjustment.
//    - vadjustment (optional): vertical adjustment.
//
// The function returns the following values:
//
//    - viewport: new GtkViewport.
//
func NewViewport(hadjustment, vadjustment *Adjustment) *Viewport {
	var _arg1 *C.GtkAdjustment // out
	var _arg2 *C.GtkAdjustment // out
	var _cret *C.GtkWidget     // in

	if hadjustment != nil {
		_arg1 = (*C.GtkAdjustment)(unsafe.Pointer(hadjustment.Native()))
	}
	if vadjustment != nil {
		_arg2 = (*C.GtkAdjustment)(unsafe.Pointer(vadjustment.Native()))
	}

	_cret = C.gtk_viewport_new(_arg1, _arg2)
	runtime.KeepAlive(hadjustment)
	runtime.KeepAlive(vadjustment)

	var _viewport *Viewport // out

	_viewport = wrapViewport(externglib.Take(unsafe.Pointer(_cret)))

	return _viewport
}

// Child gets the child widget of viewport.
//
// The function returns the following values:
//
//    - widget (optional): child widget of viewport.
//
func (viewport *Viewport) Child() Widgetter {
	var _arg0 *C.GtkViewport // out
	var _cret *C.GtkWidget   // in

	_arg0 = (*C.GtkViewport)(unsafe.Pointer(viewport.Native()))

	_cret = C.gtk_viewport_get_child(_arg0)
	runtime.KeepAlive(viewport)

	var _widget Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.Cast()
			rv, ok := casted.(Widgetter)
			if !ok {
				panic("object of type " + reflect.TypeOf(casted).String() + " (" + object.TypeFromInstance().String() + ") is not gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// ScrollToFocus gets whether the viewport is scrolling to keep the focused
// child in view.
//
// The function returns the following values:
//
//    - ok: TRUE if the viewport keeps the focus child scrolled to view.
//
func (viewport *Viewport) ScrollToFocus() bool {
	var _arg0 *C.GtkViewport // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GtkViewport)(unsafe.Pointer(viewport.Native()))

	_cret = C.gtk_viewport_get_scroll_to_focus(_arg0)
	runtime.KeepAlive(viewport)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetChild sets the child widget of viewport.
//
// The function takes the following parameters:
//
//    - child (optional) widget.
//
func (viewport *Viewport) SetChild(child Widgetter) {
	var _arg0 *C.GtkViewport // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.GtkViewport)(unsafe.Pointer(viewport.Native()))
	if child != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	}

	C.gtk_viewport_set_child(_arg0, _arg1)
	runtime.KeepAlive(viewport)
	runtime.KeepAlive(child)
}

// SetScrollToFocus sets whether the viewport should automatically scroll to
// keep the focused child in view.
//
// The function takes the following parameters:
//
//    - scrollToFocus: whether to keep the focus widget scrolled to view.
//
func (viewport *Viewport) SetScrollToFocus(scrollToFocus bool) {
	var _arg0 *C.GtkViewport // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.GtkViewport)(unsafe.Pointer(viewport.Native()))
	if scrollToFocus {
		_arg1 = C.TRUE
	}

	C.gtk_viewport_set_scroll_to_focus(_arg0, _arg1)
	runtime.KeepAlive(viewport)
	runtime.KeepAlive(scrollToFocus)
}
