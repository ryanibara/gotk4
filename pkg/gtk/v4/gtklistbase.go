// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gtk/gtk.h>
import "C"

// glib.Type values for gtklistbase.go.
var GTypeListBase = externglib.Type(C.gtk_list_base_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeListBase, F: marshalListBase},
	})
}

// ListBaseOverrider contains methods that are overridable.
type ListBaseOverrider interface {
}

// ListBase: GtkListBase is the abstract base class for GTK's list widgets.
type ListBase struct {
	_ [0]func() // equal guard
	Widget

	*externglib.Object
	Orientable
	Scrollable
}

var (
	_ Widgetter           = (*ListBase)(nil)
	_ externglib.Objector = (*ListBase)(nil)
)

// ListBaser describes types inherited from class ListBase.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type ListBaser interface {
	externglib.Objector
	baseListBase() *ListBase
}

var _ ListBaser = (*ListBase)(nil)

func classInitListBaser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapListBase(obj *externglib.Object) *ListBase {
	return &ListBase{
		Widget: Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalListBase(p uintptr) (interface{}, error) {
	return wrapListBase(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ListBase) baseListBase() *ListBase {
	return v
}

// BaseListBase returns the underlying base object.
func BaseListBase(obj ListBaser) *ListBase {
	return obj.baseListBase()
}
