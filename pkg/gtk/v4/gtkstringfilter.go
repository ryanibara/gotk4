// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeStringFilterMatchMode returns the GType for the type StringFilterMatchMode.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeStringFilterMatchMode() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "StringFilterMatchMode").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalStringFilterMatchMode)
	return gtype
}

// GTypeStringFilter returns the GType for the type StringFilter.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeStringFilter() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gtk", "StringFilter").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalStringFilter)
	return gtype
}

// StringFilterMatchMode specifies how search strings are matched inside text.
type StringFilterMatchMode C.gint

const (
	// StringFilterMatchModeExact: search string and text must match exactly.
	StringFilterMatchModeExact StringFilterMatchMode = iota
	// StringFilterMatchModeSubstring: search string must be contained as a
	// substring inside the text.
	StringFilterMatchModeSubstring
	// StringFilterMatchModePrefix: text must begin with the search string.
	StringFilterMatchModePrefix
)

func marshalStringFilterMatchMode(p uintptr) (interface{}, error) {
	return StringFilterMatchMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for StringFilterMatchMode.
func (s StringFilterMatchMode) String() string {
	switch s {
	case StringFilterMatchModeExact:
		return "Exact"
	case StringFilterMatchModeSubstring:
		return "Substring"
	case StringFilterMatchModePrefix:
		return "Prefix"
	default:
		return fmt.Sprintf("StringFilterMatchMode(%d)", s)
	}
}

// StringFilterOverrider contains methods that are overridable.
type StringFilterOverrider interface {
}

// StringFilter: GtkStringFilter determines whether to include items by
// comparing strings to a fixed search term.
//
// The strings are obtained from the items by evaluating a GtkExpression set
// with gtk.StringFilter.SetExpression(), and they are compared against a search
// term set with gtk.StringFilter.SetSearch().
//
// GtkStringFilter has several different modes of comparison - it can match the
// whole string, just a prefix, or any substring. Use
// gtk.StringFilter.SetMatchMode() choose a mode.
//
// It is also possible to make case-insensitive comparisons, with
// gtk.StringFilter.SetIgnoreCase().
type StringFilter struct {
	_ [0]func() // equal guard
	Filter
}

var (
	_ coreglib.Objector = (*StringFilter)(nil)
)

func classInitStringFilterer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStringFilter(obj *coreglib.Object) *StringFilter {
	return &StringFilter{
		Filter: Filter{
			Object: obj,
		},
	}
}

func marshalStringFilter(p uintptr) (interface{}, error) {
	return wrapStringFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewStringFilter creates a new string filter.
//
// You will want to set up the filter by providing a string to search for and by
// providing a property to look up on the item.
//
// The function takes the following parameters:
//
//    - expression (optional) to evaluate or NULL for none.
//
// The function returns the following values:
//
//    - stringFilter: new GtkStringFilter.
//
func NewStringFilter(expression Expressioner) *StringFilter {
	var _args [1]girepository.Argument

	if expression != nil {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(expression).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(expression).Native()))
	}

	_info := girepository.MustFind("Gtk", "StringFilter")
	_gret := _info.InvokeClassMethod("new_StringFilter", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(expression)

	var _stringFilter *StringFilter // out

	_stringFilter = wrapStringFilter(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _stringFilter
}

// Expression gets the expression that the string filter uses to obtain strings
// from items.
//
// The function returns the following values:
//
//    - expression (optional): GtkExpression.
//
func (self *StringFilter) Expression() Expressioner {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_info := girepository.MustFind("Gtk", "StringFilter")
	_gret := _info.InvokeClassMethod("get_expression", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _expression Expressioner // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Expressioner)
				return ok
			})
			rv, ok := casted.(Expressioner)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Expressioner")
			}
			_expression = rv
		}
	}

	return _expression
}

// IgnoreCase returns whether the filter ignores case differences.
//
// The function returns the following values:
//
//    - ok: TRUE if the filter ignores case.
//
func (self *StringFilter) IgnoreCase() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_info := girepository.MustFind("Gtk", "StringFilter")
	_gret := _info.InvokeClassMethod("get_ignore_case", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Search gets the search term.
//
// The function returns the following values:
//
//    - utf8 (optional): search term.
//
func (self *StringFilter) Search() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_info := girepository.MustFind("Gtk", "StringFilter")
	_gret := _info.InvokeClassMethod("get_search", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetExpression sets the expression that the string filter uses to obtain
// strings from items.
//
// The expression must have a value type of G_TYPE_STRING.
//
// The function takes the following parameters:
//
//    - expression (optional): GtkExpression.
//
func (self *StringFilter) SetExpression(expression Expressioner) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if expression != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(expression).Native()))
	}

	_info := girepository.MustFind("Gtk", "StringFilter")
	_info.InvokeClassMethod("set_expression", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(expression)
}

// SetIgnoreCase sets whether the filter ignores case differences.
//
// The function takes the following parameters:
//
//    - ignoreCase: TRUE to ignore case.
//
func (self *StringFilter) SetIgnoreCase(ignoreCase bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if ignoreCase {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gtk", "StringFilter")
	_info.InvokeClassMethod("set_ignore_case", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(ignoreCase)
}

// SetSearch sets the string to search for.
//
// The function takes the following parameters:
//
//    - search (optional): string to search for or NULL to clear the search.
//
func (self *StringFilter) SetSearch(search string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if search != "" {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(search)))
		defer C.free(unsafe.Pointer(_args[1]))
	}

	_info := girepository.MustFind("Gtk", "StringFilter")
	_info.InvokeClassMethod("set_search", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(search)
}
