// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_vec3_get_type()), F: marshalVec3},
	})
}

// Vec3: structure capable of holding a vector with three dimensions: x, y, and
// z.
//
// The contents of the #graphene_vec3_t structure are private and should never
// be accessed directly.
//
// An instance of this type is always passed by reference.
type Vec3 struct {
	*vec3
}

// vec3 is the struct that's finalized.
type vec3 struct {
	native *C.graphene_vec3_t
}

func marshalVec3(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Vec3{&vec3{(*C.graphene_vec3_t)(b)}}, nil
}

// NewVec3Alloc constructs a struct Vec3.
func NewVec3Alloc() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_alloc()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_vec3)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.graphene_vec3_free((*C.graphene_vec3_t)(intern.C))
		},
	)

	return _vec3
}

// Add adds each component of the two given vectors.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the resulting vector.
//
func (a *Vec3) Add(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_add(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Cross computes the cross product of the two given vectors.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the resulting vector.
//
func (a *Vec3) Cross(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_cross(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Divide divides each component of the first operand a by the corresponding
// component of the second operand b, and places the results into the vector
// res.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the resulting vector.
//
func (a *Vec3) Divide(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_divide(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Dot computes the dot product of the two given vectors.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - gfloat: value of the dot product.
//
func (a *Vec3) Dot(b *Vec3) float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	_cret = C.graphene_vec3_dot(_arg0, _arg1)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal checks whether the two given #graphene_vec3_t are equal.
//
// The function takes the following parameters:
//
//    - v2: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - ok: true if the two vectors are equal, and false otherwise.
//
func (v1 *Vec3) Equal(v2 *Vec3) bool {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v1)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v2)))

	_cret = C.graphene_vec3_equal(_arg0, _arg1)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// X retrieves the first component of the given vector v.
//
// The function returns the following values:
//
//    - gfloat: value of the first component of the vector.
//
func (v *Vec3) X() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	_cret = C.graphene_vec3_get_x(_arg0)
	runtime.KeepAlive(v)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XY creates a #graphene_vec2_t that contains the first and second components
// of the given #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for a #graphene_vec2_t.
//
func (v *Vec3) XY() *Vec2 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec2_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_get_xy(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec2 // out

	_res = (*Vec2)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// XY0 creates a #graphene_vec3_t that contains the first two components of the
// given #graphene_vec3_t, and the third component set to 0.
//
// The function returns the following values:
//
//    - res: return location for a #graphene_vec3_t.
//
func (v *Vec3) XY0() *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_get_xy0(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// XYZ0 converts a #graphene_vec3_t in a #graphene_vec4_t using 0.0 as the value
// for the fourth component of the resulting vector.
//
// The function returns the following values:
//
//    - res: return location for the vector.
//
func (v *Vec3) XYZ0() *Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_get_xyz0(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec4 // out

	_res = (*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// XYZ1 converts a #graphene_vec3_t in a #graphene_vec4_t using 1.0 as the value
// for the fourth component of the resulting vector.
//
// The function returns the following values:
//
//    - res: return location for the vector.
//
func (v *Vec3) XYZ1() *Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_get_xyz1(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec4 // out

	_res = (*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// Xyzw converts a #graphene_vec3_t in a #graphene_vec4_t using w as the value
// of the fourth component of the resulting vector.
//
// The function takes the following parameters:
//
//    - w: value of the W component.
//
// The function returns the following values:
//
//    - res: return location for the vector.
//
func (v *Vec3) Xyzw(w float32) *Vec4 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.graphene_vec4_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))
	_arg1 = C.float(w)

	C.graphene_vec3_get_xyzw(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(v)
	runtime.KeepAlive(w)

	var _res *Vec4 // out

	_res = (*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Y retrieves the second component of the given vector v.
//
// The function returns the following values:
//
//    - gfloat: value of the second component of the vector.
//
func (v *Vec3) Y() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	_cret = C.graphene_vec3_get_y(_arg0)
	runtime.KeepAlive(v)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Z retrieves the third component of the given vector v.
//
// The function returns the following values:
//
//    - gfloat: value of the third component of the vector.
//
func (v *Vec3) Z() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	_cret = C.graphene_vec3_get_z(_arg0)
	runtime.KeepAlive(v)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Init initializes a #graphene_vec3_t using the given values.
//
// This function can be called multiple times.
//
// The function takes the following parameters:
//
//    - x: x field of the vector.
//    - y: y field of the vector.
//    - z: z field of the vector.
//
// The function returns the following values:
//
//    - vec3: pointer to the initialized vector.
//
func (v *Vec3) Init(x float32, y float32, z float32) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.float            // out
	var _arg3 C.float            // out
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)

	_cret = C.graphene_vec3_init(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(v)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(z)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// InitFromFloat initializes a #graphene_vec3_t with the values from an array.
//
// The function takes the following parameters:
//
//    - src: array of 3 floating point values.
//
// The function returns the following values:
//
//    - vec3: initialized vector.
//
func (v *Vec3) InitFromFloat(src [3]float32) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.float           // out
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))
	_arg1 = (*C.float)(unsafe.Pointer(&src))

	_cret = C.graphene_vec3_init_from_float(_arg0, _arg1)
	runtime.KeepAlive(v)
	runtime.KeepAlive(src)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// InitFromVec3 initializes a #graphene_vec3_t with the values of another
// #graphene_vec3_t.
//
// The function takes the following parameters:
//
//    - src: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - vec3: initialized vector.
//
func (v *Vec3) InitFromVec3(src *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _cret *C.graphene_vec3_t // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(src)))

	_cret = C.graphene_vec3_init_from_vec3(_arg0, _arg1)
	runtime.KeepAlive(v)
	runtime.KeepAlive(src)

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// Interpolate: linearly interpolates v1 and v2 using the given factor.
//
// The function takes the following parameters:
//
//    - v2: #graphene_vec3_t.
//    - factor: interpolation factor.
//
// The function returns the following values:
//
//    - res: interpolated vector.
//
func (v1 *Vec3) Interpolate(v2 *Vec3, factor float64) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.double           // out
	var _arg3 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v1)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v2)))
	_arg2 = C.double(factor)

	C.graphene_vec3_interpolate(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
	runtime.KeepAlive(factor)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _res
}

// Length retrieves the length of the given vector v.
//
// The function returns the following values:
//
//    - gfloat: value of the length of the vector.
//
func (v *Vec3) Length() float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _cret C.float            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	_cret = C.graphene_vec3_length(_arg0)
	runtime.KeepAlive(v)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Max compares each component of the two given vectors and creates a vector
// that contains the maximum values.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the result vector.
//
func (a *Vec3) Max(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_max(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Min compares each component of the two given vectors and creates a vector
// that contains the minimum values.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the result vector.
//
func (a *Vec3) Min(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_min(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Multiply multiplies each component of the two given vectors.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the resulting vector.
//
func (a *Vec3) Multiply(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_multiply(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Near compares the two given #graphene_vec3_t vectors and checks whether their
// values are within the given epsilon.
//
// The function takes the following parameters:
//
//    - v2: #graphene_vec3_t.
//    - epsilon: threshold between the two vectors.
//
// The function returns the following values:
//
//    - ok: true if the two vectors are near each other.
//
func (v1 *Vec3) Near(v2 *Vec3, epsilon float32) bool {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.float            // out
	var _cret C._Bool            // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v1)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v2)))
	_arg2 = C.float(epsilon)

	_cret = C.graphene_vec3_near(_arg0, _arg1, _arg2)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
	runtime.KeepAlive(epsilon)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Negate negates the given #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the result vector.
//
func (v *Vec3) Negate() *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_negate(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// Normalize normalizes the given #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the normalized vector.
//
func (v *Vec3) Normalize() *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_normalize(_arg0, &_arg1)
	runtime.KeepAlive(v)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// Scale multiplies all components of the given vector with the given scalar
// factor.
//
// The function takes the following parameters:
//
//    - factor: scalar factor.
//
// The function returns the following values:
//
//    - res: return location for the result vector.
//
func (v *Vec3) Scale(factor float32) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 C.float            // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))
	_arg1 = C.float(factor)

	C.graphene_vec3_scale(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(v)
	runtime.KeepAlive(factor)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Subtract subtracts from each component of the first operand a the
// corresponding component of the second operand b and places each result into
// the components of res.
//
// The function takes the following parameters:
//
//    - b: #graphene_vec3_t.
//
// The function returns the following values:
//
//    - res: return location for the resulting vector.
//
func (a *Vec3) Subtract(b *Vec3) *Vec3 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 *C.graphene_vec3_t // out
	var _arg2 C.graphene_vec3_t  // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_vec3_subtract(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res *Vec3 // out

	_res = (*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// ToFloat copies the components of a #graphene_vec3_t into the given array.
//
// The function returns the following values:
//
//    - dest: return location for an array of floating point values.
//
func (v *Vec3) ToFloat() [3]float32 {
	var _arg0 *C.graphene_vec3_t // out
	var _arg1 [3]C.float         // in

	_arg0 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_vec3_to_float(_arg0, &_arg1[0])
	runtime.KeepAlive(v)

	var _dest [3]float32 // out

	_dest = *(*[3]float32)(unsafe.Pointer(&_arg1))

	return _dest
}

// Vec3One provides a constant pointer to a vector with three components, all
// sets to 1.
//
// The function returns the following values:
//
//    - vec3: constant vector.
//
func Vec3One() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_one()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// Vec3XAxis provides a constant pointer to a vector with three components with
// values set to (1, 0, 0).
//
// The function returns the following values:
//
//    - vec3: constant vector.
//
func Vec3XAxis() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_x_axis()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// Vec3YAxis provides a constant pointer to a vector with three components with
// values set to (0, 1, 0).
//
// The function returns the following values:
//
//    - vec3: constant vector.
//
func Vec3YAxis() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_y_axis()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// Vec3ZAxis provides a constant pointer to a vector with three components with
// values set to (0, 0, 1).
//
// The function returns the following values:
//
//    - vec3: constant vector.
//
func Vec3ZAxis() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_z_axis()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}

// Vec3Zero provides a constant pointer to a vector with three components, all
// sets to 0.
//
// The function returns the following values:
//
//    - vec3: constant vector.
//
func Vec3Zero() *Vec3 {
	var _cret *C.graphene_vec3_t // in

	_cret = C.graphene_vec3_zero()

	var _vec3 *Vec3 // out

	_vec3 = (*Vec3)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _vec3
}
