// Code generated by girgen. DO NOT EDIT.

package graphene

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: graphene-gobject-1.0 graphene-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <graphene-gobject.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.graphene_matrix_get_type()), F: marshalMatrix},
	})
}

// Matrix: structure capable of holding a 4x4 matrix.
//
// The contents of the #graphene_matrix_t structure are private and should never
// be accessed directly.
//
// An instance of this type is always passed by reference.
type Matrix struct {
	*matrix
}

// matrix is the struct that's finalized.
type matrix struct {
	native *C.graphene_matrix_t
}

func marshalMatrix(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Matrix{&matrix{(*C.graphene_matrix_t)(b)}}, nil
}

// NewMatrixAlloc constructs a struct Matrix.
func NewMatrixAlloc() *Matrix {
	var _cret *C.graphene_matrix_t // in

	_cret = C.graphene_matrix_alloc()

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_matrix)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.graphene_matrix_free((*C.graphene_matrix_t)(intern.C))
		},
	)

	return _matrix
}

// Decompose decomposes a transformation matrix into its component
// transformations.
//
// The algorithm for decomposing a matrix is taken from the CSS3 Transforms
// specification (http://dev.w3.org/csswg/css-transforms/); specifically, the
// decomposition code is based on the equivalent code published in "Graphics
// Gems II", edited by Jim Arvo, and available online
// (http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c).
func (m *Matrix) Decompose() (translate Vec3, scale Vec3, rotate Quaternion, shear Vec3, perspective Vec4, ok bool) {
	var _arg0 *C.graphene_matrix_t    // out
	var _arg1 C.graphene_vec3_t       // in
	var _arg2 C.graphene_vec3_t       // in
	var _arg3 C.graphene_quaternion_t // in
	var _arg4 C.graphene_vec3_t       // in
	var _arg5 C.graphene_vec4_t       // in
	var _cret C._Bool                 // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_decompose(_arg0, &_arg1, &_arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(m)

	var _translate Vec3    // out
	var _scale Vec3        // out
	var _rotate Quaternion // out
	var _shear Vec3        // out
	var _perspective Vec4  // out
	var _ok bool           // out

	_translate = *(*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	_scale = *(*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	_rotate = *(*Quaternion)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))
	_shear = *(*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg4))))
	_perspective = *(*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg5))))
	if _cret {
		_ok = true
	}

	return _translate, _scale, _rotate, _shear, _perspective, _ok
}

// Determinant computes the determinant of the given matrix.
func (m *Matrix) Determinant() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_determinant(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// Equal checks whether the two given #graphene_matrix_t matrices are equal.
func (a *Matrix) Equal(b *Matrix) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(b)))

	_cret = C.graphene_matrix_equal(_arg0, _arg1)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// EqualFast checks whether the two given #graphene_matrix_t matrices are
// byte-by-byte equal.
//
// While this function is faster than graphene_matrix_equal(), it can also
// return false negatives, so it should be used in conjuction with either
// graphene_matrix_equal() or graphene_matrix_near(). For instance:
//
//    if (graphene_matrix_equal_fast (a, b))
//      {
//        // matrices are definitely the same
//      }
//    else
//      {
//        if (graphene_matrix_equal (a, b))
//          // matrices contain the same values within an epsilon of FLT_EPSILON
//        else if (graphene_matrix_near (a, b, 0.0001))
//          // matrices contain the same values within an epsilon of 0.0001
//        else
//          // matrices are not equal
//      }.
func (a *Matrix) EqualFast(b *Matrix) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(b)))

	_cret = C.graphene_matrix_equal_fast(_arg0, _arg1)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Row retrieves the given row vector at index_ inside a matrix.
func (m *Matrix) Row(index_ uint) Vec4 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.uint               // out
	var _arg2 C.graphene_vec4_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.uint(index_)

	C.graphene_matrix_get_row(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(index_)

	var _res Vec4 // out

	_res = *(*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Value retrieves the value at the given row and col index.
func (m *Matrix) Value(row uint, col uint) float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.uint               // out
	var _arg2 C.uint               // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.uint(row)
	_arg2 = C.uint(col)

	_cret = C.graphene_matrix_get_value(_arg0, _arg1, _arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(row)
	runtime.KeepAlive(col)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XScale retrieves the scaling factor on the X axis in m.
func (m *Matrix) XScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_x_scale(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// XTranslation retrieves the translation component on the X axis from m.
func (m *Matrix) XTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_x_translation(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// YScale retrieves the scaling factor on the Y axis in m.
func (m *Matrix) YScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_y_scale(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// YTranslation retrieves the translation component on the Y axis from m.
func (m *Matrix) YTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_y_translation(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// ZScale retrieves the scaling factor on the Z axis in m.
func (m *Matrix) ZScale() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_z_scale(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// ZTranslation retrieves the translation component on the Z axis from m.
func (m *Matrix) ZTranslation() float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C.float              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_get_z_translation(_arg0)
	runtime.KeepAlive(m)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// InitFrom2D initializes a #graphene_matrix_t from the values of an affine
// transformation matrix.
//
// The arguments map to the following matrix layout:
//
//    ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
//    ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
//    ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠
//
// This function can be used to convert between an affine matrix type from other
// libraries and a #graphene_matrix_t.
func (m *Matrix) InitFrom2D(xx float64, yx float64, xy float64, yy float64, x0 float64, y0 float64) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.double             // out
	var _arg2 C.double             // out
	var _arg3 C.double             // out
	var _arg4 C.double             // out
	var _arg5 C.double             // out
	var _arg6 C.double             // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.double(xx)
	_arg2 = C.double(yx)
	_arg3 = C.double(xy)
	_arg4 = C.double(yy)
	_arg5 = C.double(x0)
	_arg6 = C.double(y0)

	_cret = C.graphene_matrix_init_from_2d(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(m)
	runtime.KeepAlive(xx)
	runtime.KeepAlive(yx)
	runtime.KeepAlive(xy)
	runtime.KeepAlive(yy)
	runtime.KeepAlive(x0)
	runtime.KeepAlive(y0)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitFromFloat initializes a #graphene_matrix_t with the given array of
// floating point values.
func (m *Matrix) InitFromFloat(v [16]float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.float             // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.float)(unsafe.Pointer(&v))

	_cret = C.graphene_matrix_init_from_float(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(v)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitFromMatrix initializes a #graphene_matrix_t using the values of the given
// matrix.
func (m *Matrix) InitFromMatrix(src *Matrix) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(src)))

	_cret = C.graphene_matrix_init_from_matrix(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(src)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitFromVec4 initializes a #graphene_matrix_t with the given four row
// vectors.
func (m *Matrix) InitFromVec4(v0 *Vec4, v1 *Vec4, v2 *Vec4, v3 *Vec4) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec4_t   // out
	var _arg2 *C.graphene_vec4_t   // out
	var _arg3 *C.graphene_vec4_t   // out
	var _arg4 *C.graphene_vec4_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(v0)))
	_arg2 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(v1)))
	_arg3 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(v2)))
	_arg4 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(v3)))

	_cret = C.graphene_matrix_init_from_vec4(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(m)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
	runtime.KeepAlive(v3)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitFrustum initializes a #graphene_matrix_t compatible with
// #graphene_frustum_t.
//
// See also: graphene_frustum_init_from_matrix().
func (m *Matrix) InitFrustum(left float32, right float32, bottom float32, top float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _arg5 C.float              // out
	var _arg6 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(left)
	_arg2 = C.float(right)
	_arg3 = C.float(bottom)
	_arg4 = C.float(top)
	_arg5 = C.float(zNear)
	_arg6 = C.float(zFar)

	_cret = C.graphene_matrix_init_frustum(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(m)
	runtime.KeepAlive(left)
	runtime.KeepAlive(right)
	runtime.KeepAlive(bottom)
	runtime.KeepAlive(top)
	runtime.KeepAlive(zNear)
	runtime.KeepAlive(zFar)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitIdentity initializes a #graphene_matrix_t with the identity matrix.
func (m *Matrix) InitIdentity() *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_init_identity(_arg0)
	runtime.KeepAlive(m)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitLookAt initializes a #graphene_matrix_t so that it positions the "camera"
// at the given eye coordinates towards an object at the center coordinates. The
// top of the camera is aligned to the direction of the up vector.
//
// Before the transform, the camera is assumed to be placed at the origin,
// looking towards the negative Z axis, with the top side of the camera facing
// in the direction of the Y axis and the right side in the direction of the X
// axis.
//
// In theory, one could use m to transform a model of such a camera into
// world-space. However, it is more common to use the inverse of m to transform
// another object from world coordinates to the view coordinates of the camera.
// Typically you would then apply the camera projection transform to get from
// view to screen coordinates.
func (m *Matrix) InitLookAt(eye *Vec3, center *Vec3, up *Vec3) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec3_t   // out
	var _arg2 *C.graphene_vec3_t   // out
	var _arg3 *C.graphene_vec3_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(eye)))
	_arg2 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(center)))
	_arg3 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(up)))

	_cret = C.graphene_matrix_init_look_at(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(m)
	runtime.KeepAlive(eye)
	runtime.KeepAlive(center)
	runtime.KeepAlive(up)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitOrtho initializes a #graphene_matrix_t with an orthographic projection.
func (m *Matrix) InitOrtho(left float32, right float32, top float32, bottom float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _arg5 C.float              // out
	var _arg6 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(left)
	_arg2 = C.float(right)
	_arg3 = C.float(top)
	_arg4 = C.float(bottom)
	_arg5 = C.float(zNear)
	_arg6 = C.float(zFar)

	_cret = C.graphene_matrix_init_ortho(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(m)
	runtime.KeepAlive(left)
	runtime.KeepAlive(right)
	runtime.KeepAlive(top)
	runtime.KeepAlive(bottom)
	runtime.KeepAlive(zNear)
	runtime.KeepAlive(zFar)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitPerspective initializes a #graphene_matrix_t with a perspective
// projection.
func (m *Matrix) InitPerspective(fovy float32, aspect float32, zNear float32, zFar float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _arg4 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(fovy)
	_arg2 = C.float(aspect)
	_arg3 = C.float(zNear)
	_arg4 = C.float(zFar)

	_cret = C.graphene_matrix_init_perspective(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(m)
	runtime.KeepAlive(fovy)
	runtime.KeepAlive(aspect)
	runtime.KeepAlive(zNear)
	runtime.KeepAlive(zFar)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitRotate initializes m to represent a rotation of angle degrees on the axis
// represented by the axis vector.
func (m *Matrix) InitRotate(angle float32, axis *Vec3) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 *C.graphene_vec3_t   // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(axis)))

	_cret = C.graphene_matrix_init_rotate(_arg0, _arg1, _arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(angle)
	runtime.KeepAlive(axis)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitScale initializes a #graphene_matrix_t with the given scaling factors.
func (m *Matrix) InitScale(x float32, y float32, z float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(x)
	_arg2 = C.float(y)
	_arg3 = C.float(z)

	_cret = C.graphene_matrix_init_scale(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(m)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(z)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitSkew initializes a #graphene_matrix_t with a skew transformation with the
// given factors.
func (m *Matrix) InitSkew(xSkew float32, ySkew float32) *Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _cret *C.graphene_matrix_t // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(xSkew)
	_arg2 = C.float(ySkew)

	_cret = C.graphene_matrix_init_skew(_arg0, _arg1, _arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(xSkew)
	runtime.KeepAlive(ySkew)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// InitTranslate initializes a #graphene_matrix_t with a translation to the
// given coordinates.
func (m *Matrix) InitTranslate(p *Point3D) *Matrix {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _cret *C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point3d_t)(gextras.StructNative(unsafe.Pointer(p)))

	_cret = C.graphene_matrix_init_translate(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(p)

	var _matrix *Matrix // out

	_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _matrix
}

// Interpolate: linearly interpolates the two given #graphene_matrix_t by
// interpolating the decomposed transformations separately.
//
// If either matrix cannot be reduced to their transformations then the
// interpolation cannot be performed, and this function will return an identity
// matrix.
func (a *Matrix) Interpolate(b *Matrix, factor float64) Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 C.double             // out
	var _arg3 C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(b)))
	_arg2 = C.double(factor)

	C.graphene_matrix_interpolate(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)
	runtime.KeepAlive(factor)

	var _res Matrix // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _res
}

// Inverse inverts the given matrix.
func (m *Matrix) Inverse() (Matrix, bool) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.graphene_matrix_t  // in
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_inverse(_arg0, &_arg1)
	runtime.KeepAlive(m)

	var _res Matrix // out
	var _ok bool    // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret {
		_ok = true
	}

	return _res, _ok
}

// Is2D checks whether the given #graphene_matrix_t is compatible with an a 2D
// affine transformation matrix.
func (m *Matrix) Is2D() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_is_2d(_arg0)
	runtime.KeepAlive(m)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsBackfaceVisible checks whether a #graphene_matrix_t has a visible back
// face.
func (m *Matrix) IsBackfaceVisible() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_is_backface_visible(_arg0)
	runtime.KeepAlive(m)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsIdentity checks whether the given #graphene_matrix_t is the identity
// matrix.
func (m *Matrix) IsIdentity() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_is_identity(_arg0)
	runtime.KeepAlive(m)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// IsSingular checks whether a matrix is singular.
func (m *Matrix) IsSingular() bool {
	var _arg0 *C.graphene_matrix_t // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_is_singular(_arg0)
	runtime.KeepAlive(m)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Multiply multiplies two #graphene_matrix_t.
//
// Matrix multiplication is not commutative in general; the order of the factors
// matters. The product of this multiplication is (a × b).
func (a *Matrix) Multiply(b *Matrix) Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_matrix_multiply(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _res Matrix // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Near compares the two given #graphene_matrix_t matrices and checks whether
// their values are within the given epsilon of each other.
func (a *Matrix) Near(b *Matrix, epsilon float32) bool {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_matrix_t // out
	var _arg2 C.float              // out
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(a)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(b)))
	_arg2 = C.float(epsilon)

	_cret = C.graphene_matrix_near(_arg0, _arg1, _arg2)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)
	runtime.KeepAlive(epsilon)

	var _ok bool // out

	if _cret {
		_ok = true
	}

	return _ok
}

// Normalize normalizes the given #graphene_matrix_t.
func (m *Matrix) Normalize() Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	C.graphene_matrix_normalize(_arg0, &_arg1)
	runtime.KeepAlive(m)

	var _res Matrix // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// Perspective applies a perspective of depth to the matrix.
func (m *Matrix) Perspective(depth float32) Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(depth)

	C.graphene_matrix_perspective(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(depth)

	var _res Matrix // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Print prints the contents of a matrix to the standard error stream.
//
// This function is only useful for debugging; there are no guarantees made on
// the format of the output.
func (m *Matrix) Print() {
	var _arg0 *C.graphene_matrix_t // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	C.graphene_matrix_print(_arg0)
	runtime.KeepAlive(m)
}

// ProjectPoint projects a #graphene_point_t using the matrix m.
func (m *Matrix) ProjectPoint(p *Point) Point {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_point_t  // out
	var _arg2 C.graphene_point_t   // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(p)))

	C.graphene_matrix_project_point(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(p)

	var _res Point // out

	_res = *(*Point)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// ProjectRect projects all corners of a #graphene_rect_t using the given
// matrix.
//
// See also: graphene_matrix_project_point().
func (m *Matrix) ProjectRect(r *Rect) Quad {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_rect_t   // out
	var _arg2 C.graphene_quad_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(r)))

	C.graphene_matrix_project_rect(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)

	var _res Quad // out

	_res = *(*Quad)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// ProjectRectBounds projects a #graphene_rect_t using the given matrix.
//
// The resulting rectangle is the axis aligned bounding rectangle capable of
// fully containing the projected rectangle.
func (m *Matrix) ProjectRectBounds(r *Rect) Rect {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_rect_t   // out
	var _arg2 C.graphene_rect_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(r)))

	C.graphene_matrix_project_rect_bounds(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)

	var _res Rect // out

	_res = *(*Rect)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Rotate adds a rotation transformation to m, using the given angle and axis
// vector.
//
// This is the equivalent of calling graphene_matrix_init_rotate() and then
// multiplying the matrix m with the rotation matrix.
func (m *Matrix) Rotate(angle float32, axis *Vec3) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 *C.graphene_vec3_t   // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(angle)
	_arg2 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(axis)))

	C.graphene_matrix_rotate(_arg0, _arg1, _arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(angle)
	runtime.KeepAlive(axis)
}

// RotateEuler adds a rotation transformation to m, using the given
// #graphene_euler_t.
func (m *Matrix) RotateEuler(e *Euler) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_euler_t  // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_euler_t)(gextras.StructNative(unsafe.Pointer(e)))

	C.graphene_matrix_rotate_euler(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(e)
}

// RotateQuaternion adds a rotation transformation to m, using the given
// #graphene_quaternion_t.
//
// This is the equivalent of calling graphene_quaternion_to_matrix() and then
// multiplying m with the rotation matrix.
func (m *Matrix) RotateQuaternion(q *Quaternion) {
	var _arg0 *C.graphene_matrix_t     // out
	var _arg1 *C.graphene_quaternion_t // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_quaternion_t)(gextras.StructNative(unsafe.Pointer(q)))

	C.graphene_matrix_rotate_quaternion(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(q)
}

// RotateX adds a rotation transformation around the X axis to m, using the
// given angle.
//
// See also: graphene_matrix_rotate().
func (m *Matrix) RotateX(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_x(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(angle)
}

// RotateY adds a rotation transformation around the Y axis to m, using the
// given angle.
//
// See also: graphene_matrix_rotate().
func (m *Matrix) RotateY(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_y(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(angle)
}

// RotateZ adds a rotation transformation around the Z axis to m, using the
// given angle.
//
// See also: graphene_matrix_rotate().
func (m *Matrix) RotateZ(angle float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(angle)

	C.graphene_matrix_rotate_z(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(angle)
}

// Scale adds a scaling transformation to m, using the three given factors.
//
// This is the equivalent of calling graphene_matrix_init_scale() and then
// multiplying the matrix m with the scale matrix.
func (m *Matrix) Scale(factorX float32, factorY float32, factorZ float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out
	var _arg2 C.float              // out
	var _arg3 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(factorX)
	_arg2 = C.float(factorY)
	_arg3 = C.float(factorZ)

	C.graphene_matrix_scale(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(m)
	runtime.KeepAlive(factorX)
	runtime.KeepAlive(factorY)
	runtime.KeepAlive(factorZ)
}

// SkewXY adds a skew of factor on the X and Y axis to the given matrix.
func (m *Matrix) SkewXY(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_xy(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(factor)
}

// SkewXZ adds a skew of factor on the X and Z axis to the given matrix.
func (m *Matrix) SkewXZ(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_xz(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(factor)
}

// SkewYZ adds a skew of factor on the Y and Z axis to the given matrix.
func (m *Matrix) SkewYZ(factor float32) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.float              // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = C.float(factor)

	C.graphene_matrix_skew_yz(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(factor)
}

// To2D converts a #graphene_matrix_t to an affine transformation matrix, if the
// given matrix is compatible.
//
// The returned values have the following layout:
//
//    ⎛ xx  yx ⎞   ⎛  a   b  0 ⎞
//    ⎜ xy  yy ⎟ = ⎜  c   d  0 ⎟
//    ⎝ x0  y0 ⎠   ⎝ tx  ty  1 ⎠
//
// This function can be used to convert between a #graphene_matrix_t and an
// affine matrix type from other libraries.
func (m *Matrix) To2D() (xx float64, yx float64, xy float64, yy float64, x0 float64, y0 float64, ok bool) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.double             // in
	var _arg2 C.double             // in
	var _arg3 C.double             // in
	var _arg4 C.double             // in
	var _arg5 C.double             // in
	var _arg6 C.double             // in
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	_cret = C.graphene_matrix_to_2d(_arg0, &_arg1, &_arg2, &_arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(m)

	var _xx float64 // out
	var _yx float64 // out
	var _xy float64 // out
	var _yy float64 // out
	var _x0 float64 // out
	var _y0 float64 // out
	var _ok bool    // out

	_xx = float64(_arg1)
	_yx = float64(_arg2)
	_xy = float64(_arg3)
	_yy = float64(_arg4)
	_x0 = float64(_arg5)
	_y0 = float64(_arg6)
	if _cret {
		_ok = true
	}

	return _xx, _yx, _xy, _yy, _x0, _y0, _ok
}

// ToFloat converts a #graphene_matrix_t to an array of floating point values.
func (m *Matrix) ToFloat() [16]float32 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 [16]C.float          // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	C.graphene_matrix_to_float(_arg0, &_arg1[0])
	runtime.KeepAlive(m)

	var _v [16]float32 // out

	_v = *(*[16]float32)(unsafe.Pointer(&_arg1))

	return _v
}

// TransformBounds transforms each corner of a #graphene_rect_t using the given
// matrix m.
//
// The result is the axis aligned bounding rectangle containing the coplanar
// quadrilateral.
//
// See also: graphene_matrix_transform_point().
func (m *Matrix) TransformBounds(r *Rect) Rect {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_rect_t   // out
	var _arg2 C.graphene_rect_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(r)))

	C.graphene_matrix_transform_bounds(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)

	var _res Rect // out

	_res = *(*Rect)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformBox transforms the vertices of a #graphene_box_t using the given
// matrix m.
//
// The result is the axis aligned bounding box containing the transformed
// vertices.
func (m *Matrix) TransformBox(b *Box) Box {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_box_t    // out
	var _arg2 C.graphene_box_t     // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_box_t)(gextras.StructNative(unsafe.Pointer(b)))

	C.graphene_matrix_transform_box(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(b)

	var _res Box // out

	_res = *(*Box)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformPoint transforms the given #graphene_point_t using the matrix m.
//
// Unlike graphene_matrix_transform_vec3(), this function will take into account
// the fourth row vector of the #graphene_matrix_t when computing the dot
// product of each row vector of the matrix.
//
// See also: graphene_simd4x4f_point3_mul().
func (m *Matrix) TransformPoint(p *Point) Point {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_point_t  // out
	var _arg2 C.graphene_point_t   // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(p)))

	C.graphene_matrix_transform_point(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(p)

	var _res Point // out

	_res = *(*Point)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformPoint3D transforms the given #graphene_point3d_t using the matrix m.
//
// Unlike graphene_matrix_transform_vec3(), this function will take into account
// the fourth row vector of the #graphene_matrix_t when computing the dot
// product of each row vector of the matrix.
//
// See also: graphene_simd4x4f_point3_mul().
func (m *Matrix) TransformPoint3D(p *Point3D) Point3D {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_point3d_t // out
	var _arg2 C.graphene_point3d_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point3d_t)(gextras.StructNative(unsafe.Pointer(p)))

	C.graphene_matrix_transform_point3d(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(p)

	var _res Point3D // out

	_res = *(*Point3D)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformRay: transform a #graphene_ray_t using the given matrix m.
func (m *Matrix) TransformRay(r *Ray) Ray {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_ray_t    // out
	var _arg2 C.graphene_ray_t     // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_ray_t)(gextras.StructNative(unsafe.Pointer(r)))

	C.graphene_matrix_transform_ray(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)

	var _res Ray // out

	_res = *(*Ray)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformRect transforms each corner of a #graphene_rect_t using the given
// matrix m.
//
// The result is a coplanar quadrilateral.
//
// See also: graphene_matrix_transform_point().
func (m *Matrix) TransformRect(r *Rect) Quad {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_rect_t   // out
	var _arg2 C.graphene_quad_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(r)))

	C.graphene_matrix_transform_rect(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)

	var _res Quad // out

	_res = *(*Quad)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformSphere transforms a #graphene_sphere_t using the given matrix m. The
// result is the bounding sphere containing the transformed sphere.
func (m *Matrix) TransformSphere(s *Sphere) Sphere {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_sphere_t // out
	var _arg2 C.graphene_sphere_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_sphere_t)(gextras.StructNative(unsafe.Pointer(s)))

	C.graphene_matrix_transform_sphere(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(s)

	var _res Sphere // out

	_res = *(*Sphere)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformVec3 transforms the given #graphene_vec3_t using the matrix m.
//
// This function will multiply the X, Y, and Z row vectors of the matrix m with
// the corresponding components of the vector v. The W row vector will be
// ignored.
//
// See also: graphene_simd4x4f_vec3_mul().
func (m *Matrix) TransformVec3(v *Vec3) Vec3 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec3_t   // out
	var _arg2 C.graphene_vec3_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_vec3_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_matrix_transform_vec3(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(v)

	var _res Vec3 // out

	_res = *(*Vec3)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// TransformVec4 transforms the given #graphene_vec4_t using the matrix m.
//
// See also: graphene_simd4x4f_vec4_mul().
func (m *Matrix) TransformVec4(v *Vec4) Vec4 {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_vec4_t   // out
	var _arg2 C.graphene_vec4_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_vec4_t)(gextras.StructNative(unsafe.Pointer(v)))

	C.graphene_matrix_transform_vec4(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(m)
	runtime.KeepAlive(v)

	var _res Vec4 // out

	_res = *(*Vec4)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _res
}

// Translate adds a translation transformation to m using the coordinates of the
// given #graphene_point3d_t.
//
// This is the equivalent of calling graphene_matrix_init_translate() and then
// multiplying m with the translation matrix.
func (m *Matrix) Translate(pos *Point3D) {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_point3d_t // out

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point3d_t)(gextras.StructNative(unsafe.Pointer(pos)))

	C.graphene_matrix_translate(_arg0, _arg1)
	runtime.KeepAlive(m)
	runtime.KeepAlive(pos)
}

// Transpose transposes the given matrix.
func (m *Matrix) Transpose() Matrix {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 C.graphene_matrix_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))

	C.graphene_matrix_transpose(_arg0, &_arg1)
	runtime.KeepAlive(m)

	var _res Matrix // out

	_res = *(*Matrix)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _res
}

// UnprojectPoint3D unprojects the given point using the projection matrix and a
// modelview matrix.
func (projection *Matrix) UnprojectPoint3D(modelview *Matrix, point *Point3D) Point3D {
	var _arg0 *C.graphene_matrix_t  // out
	var _arg1 *C.graphene_matrix_t  // out
	var _arg2 *C.graphene_point3d_t // out
	var _arg3 C.graphene_point3d_t  // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(projection)))
	_arg1 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(modelview)))
	_arg2 = (*C.graphene_point3d_t)(gextras.StructNative(unsafe.Pointer(point)))

	C.graphene_matrix_unproject_point3d(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(projection)
	runtime.KeepAlive(modelview)
	runtime.KeepAlive(point)

	var _res Point3D // out

	_res = *(*Point3D)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _res
}

// UntransformBounds undoes the transformation on the corners of a
// #graphene_rect_t using the given matrix, within the given axis aligned
// rectangular bounds.
func (m *Matrix) UntransformBounds(r *Rect, bounds *Rect) Rect {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_rect_t   // out
	var _arg2 *C.graphene_rect_t   // out
	var _arg3 C.graphene_rect_t    // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(r)))
	_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	C.graphene_matrix_untransform_bounds(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(m)
	runtime.KeepAlive(r)
	runtime.KeepAlive(bounds)

	var _res Rect // out

	_res = *(*Rect)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))

	return _res
}

// UntransformPoint undoes the transformation of a #graphene_point_t using the
// given matrix, within the given axis aligned rectangular bounds.
func (m *Matrix) UntransformPoint(p *Point, bounds *Rect) (Point, bool) {
	var _arg0 *C.graphene_matrix_t // out
	var _arg1 *C.graphene_point_t  // out
	var _arg2 *C.graphene_rect_t   // out
	var _arg3 C.graphene_point_t   // in
	var _cret C._Bool              // in

	_arg0 = (*C.graphene_matrix_t)(gextras.StructNative(unsafe.Pointer(m)))
	_arg1 = (*C.graphene_point_t)(gextras.StructNative(unsafe.Pointer(p)))
	_arg2 = (*C.graphene_rect_t)(gextras.StructNative(unsafe.Pointer(bounds)))

	_cret = C.graphene_matrix_untransform_point(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(m)
	runtime.KeepAlive(p)
	runtime.KeepAlive(bounds)

	var _res Point // out
	var _ok bool   // out

	_res = *(*Point)(gextras.NewStructNative(unsafe.Pointer((&_arg3))))
	if _cret {
		_ok = true
	}

	return _res, _ok
}
