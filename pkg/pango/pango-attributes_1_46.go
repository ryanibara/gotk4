// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

// GType values.
var (
	GTypeOverline = coreglib.Type(C.pango_overline_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeOverline, F: marshalOverline},
	})
}

// Overline: PangoOverline enumeration is used to specify whether text should be
// overlined, and if so, the type of line.
type Overline C.gint

const (
	// OverlineNone: no overline should be drawn.
	OverlineNone Overline = iota
	// OverlineSingle: draw a single line above the ink extents of the text
	// being underlined.
	OverlineSingle
)

func marshalOverline(p uintptr) (interface{}, error) {
	return Overline(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Overline.
func (o Overline) String() string {
	switch o {
	case OverlineNone:
		return "None"
	case OverlineSingle:
		return "Single"
	default:
		return fmt.Sprintf("Overline(%d)", o)
	}
}

// NewAttrOverlineColor: create a new overline color attribute.
//
// This attribute modifies the color of overlines. If not set, overlines will
// use the foreground color.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
// The function returns the following values:
//
//    - attribute: newly allocated PangoAttribute, which should be freed with
//      pango.Attribute.Destroy().
//
func NewAttrOverlineColor(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_overline_color_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrOverline: create a new overline-style attribute.
//
// The function takes the following parameters:
//
//    - overline style.
//
// The function returns the following values:
//
//    - attribute: newly allocated PangoAttribute, which should be freed with
//      pango.Attribute.Destroy().
//
func NewAttrOverline(overline Overline) *Attribute {
	var _arg1 C.PangoOverline   // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoOverline(overline)

	_cret = C.pango_attr_overline_new(_arg1)
	runtime.KeepAlive(overline)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}
