// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeContext returns the GType for the type Context.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeContext() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Pango", "Context").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalContext)
	return gtype
}

// Itemize breaks a piece of text into segments with consistent directional
// level and font.
//
// Each byte of text will be contained in exactly one of the items in the
// returned list; the generated list of items will be in logical order (the
// start offsets of the items are ascending).
//
// cached_iter should be an iterator over attrs currently positioned at a range
// before or containing start_index; cached_iter will be advanced to the range
// covering the position just after start_index + length. (i.e. if itemizing in
// a loop, just keep passing in the same cached_iter).
//
// The function takes the following parameters:
//
//    - context: structure holding information that affects the itemization
//      process.
//    - text to itemize. Must be valid UTF-8.
//    - startIndex: first byte in text to process.
//    - length: number of bytes (not characters) to process after start_index.
//      This must be >= 0.
//    - attrs: set of attributes that apply to text.
//    - cachedIter (optional): cached attribute iterator, or NULL.
//
// The function returns the following values:
//
//    - list: GList of pango.Item structures. The items should be freed using
//      pango.Item.Free() probably in combination with g_list_free_full().
//
func Itemize(context *Context, text string, startIndex, length int32, attrs *AttrList, cachedIter *AttrIterator) []*Item {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[1]))
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(startIndex)
	*(*C.int)(unsafe.Pointer(&_args[3])) = C.int(length)
	*(**C.void)(unsafe.Pointer(&_args[4])) = (*C.void)(gextras.StructNative(unsafe.Pointer(attrs)))
	if cachedIter != nil {
		*(**C.void)(unsafe.Pointer(&_args[5])) = (*C.void)(gextras.StructNative(unsafe.Pointer(cachedIter)))
	}

	_gret := girepository.MustFind("Pango", "itemize").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(startIndex)
	runtime.KeepAlive(length)
	runtime.KeepAlive(attrs)
	runtime.KeepAlive(cachedIter)

	var _list []*Item // out

	_list = make([]*Item, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *Item // out
		dst = (*Item)(gextras.NewStructNative(unsafe.Pointer(src)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(dst)),
			func(intern *struct{ C unsafe.Pointer }) {
				{
					args := [1]girepository.Argument{(*C.void)(intern.C)}
					girepository.MustFind("Pango", "Item").InvokeMethod("free", args[:], nil)
				}
			},
		)
		_list = append(_list, dst)
	})

	return _list
}

// Context: PangoContext stores global information used to control the
// itemization process.
//
// The information stored by `PangoContext includes the fontmap used to look up
// fonts, and default values such as the default language, default gravity, or
// default font.
//
// To obtain a PangoContext, use pango.FontMap.CreateContext().
type Context struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Context)(nil)
)

func wrapContext(obj *coreglib.Object) *Context {
	return &Context{
		Object: obj,
	}
}

func marshalContext(p uintptr) (interface{}, error) {
	return wrapContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewContext creates a new PangoContext initialized to default values.
//
// This function is not particularly useful as it should always be followed by a
// pango.Context.SetFontMap() call, and the function
// pango.FontMap.CreateContext() does these two steps together and hence users
// are recommended to use that.
//
// If you are using Pango as part of a higher-level system, that system may have
// it's own way of create a PangoContext. For instance, the GTK toolkit has,
// among others, gtk_widget_get_pango_context(). Use those instead.
//
// The function returns the following values:
//
//    - context: newly allocated PangoContext, which should be freed with
//      g_object_unref().
//
func NewContext() *Context {
	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("new_Context", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _context *Context // out

	_context = wrapContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _context
}

// Changed forces a change in the context, which will cause any PangoLayout
// using this context to re-layout.
//
// This function is only useful when implementing a new backend for Pango,
// something applications won't do. Backends should call this function if they
// have attached extra data to the context and such data is changed.
func (context *Context) Changed() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	girepository.MustFind("Pango", "Context").InvokeMethod("changed", _args[:], nil)

	runtime.KeepAlive(context)
}

// FontDescription: retrieve the default font description for the context.
//
// The function returns the following values:
//
//    - fontDescription: pointer to the context's default font description. This
//      value must not be modified or freed.
//
func (context *Context) FontDescription() *FontDescription {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_font_description", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _fontDescription *FontDescription // out

	_fontDescription = (*FontDescription)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _fontDescription
}

// FontMap gets the PangoFontMap used to look up fonts for this context.
//
// The function returns the following values:
//
//    - fontMap: font map for the PangoContext. This value is owned by Pango and
//      should not be unreferenced.
//
func (context *Context) FontMap() FontMapper {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_font_map", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _fontMap FontMapper // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontMapper is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontMapper)
			return ok
		})
		rv, ok := casted.(FontMapper)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontMapper")
		}
		_fontMap = rv
	}

	return _fontMap
}

// Language retrieves the global language tag for the context.
//
// The function returns the following values:
//
//    - language: global language tag.
//
func (context *Context) Language() *Language {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_language", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _language *Language // out

	_language = (*Language)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_language)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _language
}

// Matrix gets the transformation matrix that will be applied when rendering
// with this context.
//
// See pango.Context.SetMatrix().
//
// The function returns the following values:
//
//    - matrix (optional): matrix, or NULL if no matrix has been set (which is
//      the same as the identity matrix). The returned matrix is owned by Pango
//      and must not be modified or freed.
//
func (context *Context) Matrix() *Matrix {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_matrix", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _matrix *Matrix // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _matrix
}

// Metrics: get overall metric information for a particular font description.
//
// Since the metrics may be substantially different for different scripts, a
// language tag can be provided to indicate that the metrics should be retrieved
// that correspond to the script(s) used by that language.
//
// The PangoFontDescription is interpreted in the same way as by itemize, and
// the family name may be a comma separated list of names. If characters from
// multiple of these families would be used to render the string, then the
// returned fonts would be a composite of the metrics for the fonts loaded for
// the individual families.
//
// The function takes the following parameters:
//
//    - desc (optional): PangoFontDescription structure. NULL means that the font
//      description from the context will be used.
//    - language (optional) tag used to determine which script to get the metrics
//      for. NULL means that the language tag from the context will be used. If
//      no language tag is set on the context, metrics for the default language
//      (as determined by pango.Language.GetDefault will be returned.
//
// The function returns the following values:
//
//    - fontMetrics: PangoFontMetrics object. The caller must call
//      pango.FontMetrics.Unref() when finished using the object.
//
func (context *Context) Metrics(desc *FontDescription, language *Language) *FontMetrics {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if desc != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(desc)))
	}
	if language != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))
	}

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_metrics", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)
	runtime.KeepAlive(language)

	var _fontMetrics *FontMetrics // out

	_fontMetrics = (*FontMetrics)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_fontMetrics)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _fontMetrics
}

// RoundGlyphPositions returns whether font rendering with this context should
// round glyph positions and widths.
//
// The function returns the following values:
//
func (context *Context) RoundGlyphPositions() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_round_glyph_positions", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Serial returns the current serial number of context.
//
// The serial number is initialized to an small number larger than zero when a
// new context is created and is increased whenever the context is changed using
// any of the setter functions, or the PangoFontMap it uses to find fonts has
// changed. The serial may wrap, but will never have the value 0. Since it can
// wrap, never compare it with "less than", always use "not equals".
//
// This can be used to automatically detect changes to a PangoContext, and is
// only useful when implementing objects that need update when their
// PangoContext changes, like PangoLayout.
//
// The function returns the following values:
//
//    - guint: current serial number of context.
//
func (context *Context) Serial() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("get_serial", _args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// ListFamilies: list all families for a context.
//
// The function returns the following values:
//
//    - families: location to store a pointer to an array of PangoFontFamily.
//      This array should be freed with g_free().
//
func (context *Context) ListFamilies() []FontFamilier {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	girepository.MustFind("Pango", "Context").InvokeMethod("list_families", _args[:], _outs[:])

	runtime.KeepAlive(context)

	var _families []FontFamilier // out

	defer C.free(unsafe.Pointer(_outs[0]))
	{
		src := unsafe.Slice((**C.void)(_outs[0]), _outs[1])
		_families = make([]FontFamilier, _outs[1])
		for i := 0; i < int(_outs[1]); i++ {
			{
				objptr := unsafe.Pointer(src[i])
				if objptr == nil {
					panic("object of type pango.FontFamilier is nil")
				}

				object := coreglib.Take(objptr)
				casted := object.WalkCast(func(obj coreglib.Objector) bool {
					_, ok := obj.(FontFamilier)
					return ok
				})
				rv, ok := casted.(FontFamilier)
				if !ok {
					panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
				}
				_families[i] = rv
			}
		}
	}

	return _families
}

// LoadFont loads the font in one of the fontmaps in the context that is the
// closest match for desc.
//
// The function takes the following parameters:
//
//    - desc: PangoFontDescription describing the font to load.
//
// The function returns the following values:
//
//    - font (optional): newly allocated PangoFont that was loaded, or NULL if no
//      font matched.
//
func (context *Context) LoadFont(desc *FontDescription) Fonter {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(desc)))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("load_font", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)

	var _font Fonter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fonter)
				return ok
			})
			rv, ok := casted.(Fonter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fonter")
			}
			_font = rv
		}
	}

	return _font
}

// LoadFontset: load a set of fonts in the context that can be used to render a
// font matching desc.
//
// The function takes the following parameters:
//
//    - desc: PangoFontDescription describing the fonts to load.
//    - language: PangoLanguage the fonts will be used for.
//
// The function returns the following values:
//
//    - fontset (optional): newly allocated PangoFontset loaded, or NULL if no
//      font matched.
//
func (context *Context) LoadFontset(desc *FontDescription, language *Language) Fontsetter {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(desc)))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))

	_gret := girepository.MustFind("Pango", "Context").InvokeMethod("load_fontset", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)
	runtime.KeepAlive(language)

	var _fontset Fontsetter // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fontsetter)
				return ok
			})
			rv, ok := casted.(Fontsetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fontsetter")
			}
			_fontset = rv
		}
	}

	return _fontset
}

// SetFontDescription: set the default font description for the context.
//
// The function takes the following parameters:
//
//    - desc: new pango font description.
//
func (context *Context) SetFontDescription(desc *FontDescription) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(desc)))

	girepository.MustFind("Pango", "Context").InvokeMethod("set_font_description", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)
}

// SetFontMap sets the font map to be searched when fonts are looked-up in this
// context.
//
// This is only for internal use by Pango backends, a PangoContext obtained via
// one of the recommended methods should already have a suitable font map.
//
// The function takes the following parameters:
//
//    - fontMap: PangoFontMap to set.
//
func (context *Context) SetFontMap(fontMap FontMapper) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(fontMap).Native()))

	girepository.MustFind("Pango", "Context").InvokeMethod("set_font_map", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(fontMap)
}

// SetLanguage sets the global language tag for the context.
//
// The default language for the locale of the running process can be found using
// pango.Language.GetDefault.
//
// The function takes the following parameters:
//
//    - language: new language tag.
//
func (context *Context) SetLanguage(language *Language) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))

	girepository.MustFind("Pango", "Context").InvokeMethod("set_language", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(language)
}

// SetMatrix sets the transformation matrix that will be applied when rendering
// with this context.
//
// Note that reported metrics are in the user space coordinates before the
// application of the matrix, not device-space coordinates after the application
// of the matrix. So, they don't scale with the matrix, though they may change
// slightly for different matrices, depending on how the text is fit to the
// pixel grid.
//
// The function takes the following parameters:
//
//    - matrix (optional): PangoMatrix, or NULL to unset any existing matrix. (No
//      matrix set is the same as setting the identity matrix.).
//
func (context *Context) SetMatrix(matrix *Matrix) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if matrix != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(matrix)))
	}

	girepository.MustFind("Pango", "Context").InvokeMethod("set_matrix", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(matrix)
}

// SetRoundGlyphPositions sets whether font rendering with this context should
// round glyph positions and widths to integral positions, in device units.
//
// This is useful when the renderer can't handle subpixel positioning of glyphs.
//
// The default value is to round glyph positions, to remain compatible with
// previous Pango behavior.
//
// The function takes the following parameters:
//
//    - roundPositions: whether to round glyph positions.
//
func (context *Context) SetRoundGlyphPositions(roundPositions bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if roundPositions {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Pango", "Context").InvokeMethod("set_round_glyph_positions", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(roundPositions)
}
