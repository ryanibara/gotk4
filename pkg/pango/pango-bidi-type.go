// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// GetMirrorChar returns the mirrored character of a Unicode character.
//
// Mirror characters are determined by the Unicode mirrored property.
//
// Use g_unichar_get_mirror_char() instead; the docs for that function provide
// full details.
//
// The function takes the following parameters:
//
//    - ch: unicode character.
//    - mirroredCh: location to store the mirrored character.
//
// The function returns the following values:
//
//    - ok: TRUE if ch has a mirrored character and mirrored_ch is filled in,
//      FALSE otherwise.
//
func GetMirrorChar(ch uint32, mirroredCh *uint32) bool {
	var _arg1 C.gunichar  // out
	var _arg2 *C.gunichar // out
	var _cret C.gboolean  // in

	_arg1 = C.gunichar(ch)
	_arg2 = (*C.gunichar)(unsafe.Pointer(mirroredCh))

	_cret = C.pango_get_mirror_char(_arg1, _arg2)
	runtime.KeepAlive(ch)
	runtime.KeepAlive(mirroredCh)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnicharDirection determines the inherent direction of a character.
//
// The inherent direction is either PANGO_DIRECTION_LTR, PANGO_DIRECTION_RTL, or
// PANGO_DIRECTION_NEUTRAL.
//
// This function is useful to categorize characters into left-to-right letters,
// right-to-left letters, and everything else. If full Unicode bidirectional
// type of a character is needed, pango.BidiType.ForUnichar can be used instead.
//
// The function takes the following parameters:
//
//    - ch: unicode character.
//
// The function returns the following values:
//
//    - direction of the character.
//
func UnicharDirection(ch uint32) Direction {
	var _arg1 C.gunichar       // out
	var _cret C.PangoDirection // in

	_arg1 = C.gunichar(ch)

	_cret = C.pango_unichar_direction(_arg1)
	runtime.KeepAlive(ch)

	var _direction Direction // out

	_direction = Direction(_cret)

	return _direction
}
