// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// FontMap gets the PangoFontMap used to look up fonts for this context.
//
// The function returns the following values:
//
//    - fontMap: font map for the PangoContext. This value is owned by Pango and
//      should not be unreferenced.
//
func (context *Context) FontMap() FontMapper {
	var _arg0 *C.PangoContext // out
	var _cret *C.PangoFontMap // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.pango_context_get_font_map(_arg0)
	runtime.KeepAlive(context)

	var _fontMap FontMapper // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontMapper is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontMapper)
			return ok
		})
		rv, ok := casted.(FontMapper)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontMapper")
		}
		_fontMap = rv
	}

	return _fontMap
}

// Matrix gets the transformation matrix that will be applied when rendering
// with this context.
//
// See pango.Context.SetMatrix().
//
// The function returns the following values:
//
//    - matrix (optional): matrix, or NULL if no matrix has been set (which is
//      the same as the identity matrix). The returned matrix is owned by Pango
//      and must not be modified or freed.
//
func (context *Context) Matrix() *Matrix {
	var _arg0 *C.PangoContext // out
	var _cret *C.PangoMatrix  // in

	_arg0 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.pango_context_get_matrix(_arg0)
	runtime.KeepAlive(context)

	var _matrix *Matrix // out

	if _cret != nil {
		_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _matrix
}

// SetMatrix sets the transformation matrix that will be applied when rendering
// with this context.
//
// Note that reported metrics are in the user space coordinates before the
// application of the matrix, not device-space coordinates after the application
// of the matrix. So, they don't scale with the matrix, though they may change
// slightly for different matrices, depending on how the text is fit to the
// pixel grid.
//
// The function takes the following parameters:
//
//    - matrix (optional): PangoMatrix, or NULL to unset any existing matrix. (No
//      matrix set is the same as setting the identity matrix.).
//
func (context *Context) SetMatrix(matrix *Matrix) {
	var _arg0 *C.PangoContext // out
	var _arg1 *C.PangoMatrix  // out

	_arg0 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if matrix != nil {
		_arg1 = (*C.PangoMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	}

	C.pango_context_set_matrix(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(matrix)
}
