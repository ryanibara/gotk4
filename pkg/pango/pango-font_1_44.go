// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
// gboolean _gotk4_pango1_FontFamily_virtual_is_variable(void* fnptr, PangoFontFamily* arg0) {
//   return ((gboolean (*)(PangoFontFamily*))(fnptr))(arg0);
// };
import "C"

// HasChar returns whether the font provides a glyph for this character.
//
// Returns TRUE if font can render wc.
//
// The function takes the following parameters:
//
//    - wc: unicode character.
//
// The function returns the following values:
//
func (font *Font) HasChar(wc uint32) bool {
	var _arg0 *C.PangoFont // out
	var _arg1 C.gunichar   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))
	_arg1 = C.gunichar(wc)

	_cret = C.pango_font_has_char(_arg0, _arg1)
	runtime.KeepAlive(font)
	runtime.KeepAlive(wc)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsVariable: variable font is a font which has axes that can be modified to
// produce different faces.
//
// The function returns the following values:
//
//    - ok: TRUE if the family is variable.
//
func (family *FontFamily) IsVariable() bool {
	var _arg0 *C.PangoFontFamily // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(coreglib.InternObject(family).Native()))

	_cret = C.pango_font_family_is_variable(_arg0)
	runtime.KeepAlive(family)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// isVariable: variable font is a font which has axes that can be modified to
// produce different faces.
//
// The function returns the following values:
//
//    - ok: TRUE if the family is variable.
//
func (family *FontFamily) isVariable() bool {
	gclass := (*C.PangoFontFamilyClass)(coreglib.PeekParentClass(family))
	fnarg := gclass.is_variable

	var _arg0 *C.PangoFontFamily // out
	var _cret C.gboolean         // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(coreglib.InternObject(family).Native()))

	_cret = C._gotk4_pango1_FontFamily_virtual_is_variable(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(family)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
