// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// Alpha gets the current alpha for the specified part.
//
// The function takes the following parameters:
//
//    - part to get the alpha for.
//
// The function returns the following values:
//
//    - guint16: alpha for the specified part, or 0 if it hasn't been set and
//      should be inherited from the environment.
//
func (renderer *Renderer) Alpha(part RenderPart) uint16 {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _cret C.guint16         // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)

	_cret = C.pango_renderer_get_alpha(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// SetAlpha sets the alpha for part of the rendering.
//
// Note that the alpha may only be used if a color is specified for part as
// well.
//
// The function takes the following parameters:
//
//    - part to set the alpha for.
//    - alpha value between 1 and 65536, or 0 to unset the alpha.
//
func (renderer *Renderer) SetAlpha(part RenderPart, alpha uint16) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.guint16         // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.guint16(alpha)

	C.pango_renderer_set_alpha(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(alpha)
}
