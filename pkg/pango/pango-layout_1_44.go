// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// LineSpacing gets the line spacing factor of layout.
//
// See pango.Layout.SetLineSpacing().
//
// The function returns the following values:
//
func (layout *Layout) LineSpacing() float32 {
	var _arg0 *C.PangoLayout // out
	var _cret C.float        // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(coreglib.InternObject(layout).Native()))

	_cret = C.pango_layout_get_line_spacing(_arg0)
	runtime.KeepAlive(layout)

	var _gfloat float32 // out

	_gfloat = float32(_cret)

	return _gfloat
}

// SetLineSpacing sets a factor for line spacing.
//
// Typical values are: 0, 1, 1.5, 2. The default values is 0.
//
// If factor is non-zero, lines are placed so that
//
//    baseline2 = baseline1 + factor * height2
//
// where height2 is the line height of the second line (as determined by the
// font(s)). In this case, the spacing set with pango.Layout.SetSpacing() is
// ignored.
//
// If factor is zero, spacing is applied as before.
//
// The function takes the following parameters:
//
//    - factor: new line spacing factor.
//
func (layout *Layout) SetLineSpacing(factor float32) {
	var _arg0 *C.PangoLayout // out
	var _arg1 C.float        // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(coreglib.InternObject(layout).Native()))
	_arg1 = C.float(factor)

	C.pango_layout_set_line_spacing(_arg0, _arg1)
	runtime.KeepAlive(layout)
	runtime.KeepAlive(factor)
}
