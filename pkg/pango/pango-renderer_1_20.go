// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// Layout gets the layout currently being rendered using renderer.
//
// Calling this function only makes sense from inside a subclass's methods, like
// in its draw_shape vfunc, for example.
//
// The returned layout should not be modified while still being rendered.
//
// The function returns the following values:
//
//    - layout (optional): layout, or NULL if no layout is being rendered using
//      renderer at this time.
//
func (renderer *Renderer) Layout() *Layout {
	var _arg0 *C.PangoRenderer // out
	var _cret *C.PangoLayout   // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.pango_renderer_get_layout(_arg0)
	runtime.KeepAlive(renderer)

	var _layout *Layout // out

	if _cret != nil {
		_layout = wrapLayout(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _layout
}

// LayoutLine gets the layout line currently being rendered using renderer.
//
// Calling this function only makes sense from inside a subclass's methods, like
// in its draw_shape vfunc, for example.
//
// The returned layout line should not be modified while still being rendered.
//
// The function returns the following values:
//
//    - layoutLine (optional): layout line, or NULL if no layout line is being
//      rendered using renderer at this time.
//
func (renderer *Renderer) LayoutLine() *LayoutLine {
	var _arg0 *C.PangoRenderer   // out
	var _cret *C.PangoLayoutLine // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.pango_renderer_get_layout_line(_arg0)
	runtime.KeepAlive(renderer)

	var _layoutLine *LayoutLine // out

	if _cret != nil {
		_layoutLine = (*LayoutLine)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.pango_layout_line_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_layoutLine)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_layout_line_unref((*C.PangoLayoutLine)(intern.C))
			},
		)
	}

	return _layoutLine
}
