// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
// PangoFontFamily* _gotk4_pango1_FontMap_virtual_get_family(void* fnptr, PangoFontMap* arg0, char* arg1) {
//   return ((PangoFontFamily* (*)(PangoFontMap*, char*))(fnptr))(arg0, arg1);
// };
import "C"

// Family gets a font family by name.
//
// The function takes the following parameters:
//
//    - name: family name.
//
// The function returns the following values:
//
//    - fontFamily: PangoFontFamily.
//
func (fontmap *FontMap) Family(name string) FontFamilier {
	var _arg0 *C.PangoFontMap    // out
	var _arg1 *C.char            // out
	var _cret *C.PangoFontFamily // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_font_map_get_family(_arg0, _arg1)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(name)

	var _fontFamily FontFamilier // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontFamilier is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontFamilier)
			return ok
		})
		rv, ok := casted.(FontFamilier)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
		}
		_fontFamily = rv
	}

	return _fontFamily
}

// Family gets a font family by name.
//
// The function takes the following parameters:
//
//    - name: family name.
//
// The function returns the following values:
//
//    - fontFamily: PangoFontFamily.
//
func (fontmap *FontMap) family(name string) FontFamilier {
	gclass := (*C.PangoFontMapClass)(coreglib.PeekParentClass(fontmap))
	fnarg := gclass.get_family

	var _arg0 *C.PangoFontMap    // out
	var _arg1 *C.char            // out
	var _cret *C.PangoFontFamily // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_pango1_FontMap_virtual_get_family(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(name)

	var _fontFamily FontFamilier // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontFamilier is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontFamilier)
			return ok
		})
		rv, ok := casted.(FontFamilier)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
		}
		_fontFamily = rv
	}

	return _fontFamily
}
