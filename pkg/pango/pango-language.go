// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeLanguage returns the GType for the type Language.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeLanguage() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Pango", "Language").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalLanguage)
	return gtype
}

// Language: PangoLanguage structure is used to represent a language.
//
// PangoLanguage pointers can be efficiently copied and compared with each
// other.
//
// An instance of this type is always passed by reference.
type Language struct {
	*language
}

// language is the struct that's finalized.
type language struct {
	native unsafe.Pointer
}

func marshalLanguage(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Language{&language{(unsafe.Pointer)(b)}}, nil
}

// SampleString: get a string that is representative of the characters needed to
// render a particular language.
//
// The sample text may be a pangram, but is not necessarily. It is chosen to be
// demonstrative of normal text in the language, as well as exposing font
// feature requirements unique to the language. It is suitable for use as sample
// text in a font selection dialog.
//
// If language is NULL, the default language as found by
// pango.Language.GetDefault is used.
//
// If Pango does not have a sample string for language, the classic "The quick
// brown fox..." is returned. This can be detected by comparing the returned
// pointer value to that returned for (non-existent) language code "xx". That
// is, compare to:
//
//    pango_language_get_sample_string (pango_language_from_string ("xx")).
//
// The function returns the following values:
//
//    - utf8: sample string. This value is owned by Pango and should not be
//      freed.
//
func (language *Language) SampleString() string {
	var _args [1]girepository.Argument

	if language != nil {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))
	}

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(language)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Matches checks if a language tag matches one of the elements in a list of
// language ranges.
//
// A language tag is considered to match a range in the list if the range is
// '*', the range is exactly the tag, or the range is a prefix of the tag, and
// the character after it in the tag is '-'.
//
// The function takes the following parameters:
//
//    - rangeList: list of language ranges, separated by ';', ':', ',', or space
//      characters. Each element must either be '*', or a RFC 3066 language range
//      canonicalized as by pango.Language.FromString.
//
// The function returns the following values:
//
//    - ok: TRUE if a match was found.
//
func (language *Language) Matches(rangeList string) bool {
	var _args [2]girepository.Argument

	if language != nil {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))
	}
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(rangeList)))
	defer C.free(unsafe.Pointer(_args[1]))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(language)
	runtime.KeepAlive(rangeList)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// String gets the RFC-3066 format string representing the given language tag.
//
// The function returns the following values:
//
//    - utf8: string representing the language tag. This is owned by Pango and
//      should not be freed.
//
func (language *Language) String() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(language)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(language)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LanguageFromString: convert a language tag to a PangoLanguage.
//
// The language tag must be in a RFC-3066 format. PangoLanguage pointers can be
// efficiently copied (copy the pointer) and compared with other language tags
// (compare the pointer.)
//
// This function first canonicalizes the string by converting it to lowercase,
// mapping '_' to '-', and stripping all characters other than letters and '-'.
//
// Use pango.Language.GetDefault if you want to get the PangoLanguage for the
// current locale of the process.
//
// The function takes the following parameters:
//
//    - language (optional): string representing a language tag, or NULL.
//
// The function returns the following values:
//
//    - ret (optional): opaque pointer to a PangoLanguage structure, or NULL if
//      language was NULL. The returned pointer will be valid forever after, and
//      should not be freed.
//
func LanguageFromString(language string) *Language {
	var _args [1]girepository.Argument

	if language != "" {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(language)))
		defer C.free(unsafe.Pointer(_args[0]))
	}

	_gret := girepository.MustFind("Pango", "from_string").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(language)

	var _ret *Language // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_ret = (*Language)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _ret
}

// LanguageGetDefault returns the PangoLanguage for the current locale of the
// process.
//
// On Unix systems, this is the return value is derived from setlocale
// (LC_CTYPE, NULL), and the user can affect this through the environment
// variables LC_ALL, LC_CTYPE or LANG (checked in that order). The locale string
// typically is in the form lang_COUNTRY, where lang is an ISO-639 language
// code, and COUNTRY is an ISO-3166 country code. For instance, sv_FI for
// Swedish as written in Finland or pt_BR for Portuguese as written in Brazil.
//
// On Windows, the C library does not use any such environment variables, and
// setting them won't affect the behavior of functions like ctime(). The user
// sets the locale through the Regional Options in the Control Panel. The C
// library (in the setlocale() function) does not use country and language
// codes, but country and language names spelled out in English. However, this
// function does check the above environment variables, and does return a
// Unix-style locale string based on either said environment variables or the
// thread's current locale.
//
// Your application should call setlocale(LC_ALL, "") for the user settings to
// take effect. GTK does this in its initialization functions automatically (by
// calling gtk_set_locale()). See the setlocale() manpage for more details.
//
// Note that the default language can change over the life of an application.
//
// The function returns the following values:
//
//    - language: default language as a PangoLanguage, must not be freed.
//
func LanguageGetDefault() *Language {
	_gret := girepository.MustFind("Pango", "get_default").Invoke(nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _language *Language // out

	_language = (*Language)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _language
}

// LanguageGetPreferred returns the list of languages that the user prefers.
//
// The list is specified by the PANGO_LANGUAGE or LANGUAGE environment
// variables, in order of preference. Note that this list does not necessarily
// include the language returned by pango.Language.GetDefault.
//
// When choosing language-specific resources, such as the sample text returned
// by pango.Language.GetSampleString(), you should first try the default
// language, followed by the languages returned by this function.
//
// The function returns the following values:
//
//    - language (optional): NULL-terminated array of PangoLanguage*.
//
func LanguageGetPreferred() *Language {
	_gret := girepository.MustFind("Pango", "get_preferred").Invoke(nil, nil)
	_cret = *(***C.void)(unsafe.Pointer(&_gret))

	var _language *Language // out

	if *(***C.void)(unsafe.Pointer(&_cret)) != nil {
		_language = (*Language)(gextras.NewStructNative(unsafe.Pointer((*_cret))))
	}

	return _language
}
