// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <pango/pango.h>
// extern void _gotk4_pango1_RendererClass_prepare_run(PangoRenderer*, PangoLayoutRun*);
// extern void _gotk4_pango1_RendererClass_part_changed(PangoRenderer*, PangoRenderPart);
// extern void _gotk4_pango1_RendererClass_end(PangoRenderer*);
// extern void _gotk4_pango1_RendererClass_draw_trapezoid(PangoRenderer*, PangoRenderPart, double, double, double, double, double, double);
// extern void _gotk4_pango1_RendererClass_draw_shape(PangoRenderer*, PangoAttrShape*, int, int);
// extern void _gotk4_pango1_RendererClass_draw_rectangle(PangoRenderer*, PangoRenderPart, int, int, int, int);
// extern void _gotk4_pango1_RendererClass_draw_glyphs(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int);
// extern void _gotk4_pango1_RendererClass_draw_glyph_item(PangoRenderer*, char*, PangoGlyphItem*, int, int);
// extern void _gotk4_pango1_RendererClass_draw_glyph(PangoRenderer*, PangoFont*, PangoGlyph, double, double);
// extern void _gotk4_pango1_RendererClass_draw_error_underline(PangoRenderer*, int, int, int, int);
// extern void _gotk4_pango1_RendererClass_begin(PangoRenderer*);
// void _gotk4_pango1_Renderer_virtual_draw_error_underline(void* fnptr, PangoRenderer* arg0, int arg1, int arg2, int arg3, int arg4) {
//   ((void (*)(PangoRenderer*, int, int, int, int))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_pango1_Renderer_virtual_draw_glyph(void* fnptr, PangoRenderer* arg0, PangoFont* arg1, PangoGlyph arg2, double arg3, double arg4) {
//   ((void (*)(PangoRenderer*, PangoFont*, PangoGlyph, double, double))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_pango1_Renderer_virtual_draw_glyphs(void* fnptr, PangoRenderer* arg0, PangoFont* arg1, PangoGlyphString* arg2, int arg3, int arg4) {
//   ((void (*)(PangoRenderer*, PangoFont*, PangoGlyphString*, int, int))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_pango1_Renderer_virtual_draw_rectangle(void* fnptr, PangoRenderer* arg0, PangoRenderPart arg1, int arg2, int arg3, int arg4, int arg5) {
//   ((void (*)(PangoRenderer*, PangoRenderPart, int, int, int, int))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
// void _gotk4_pango1_Renderer_virtual_draw_trapezoid(void* fnptr, PangoRenderer* arg0, PangoRenderPart arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7) {
//   ((void (*)(PangoRenderer*, PangoRenderPart, double, double, double, double, double, double))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
// };
// void _gotk4_pango1_Renderer_virtual_part_changed(void* fnptr, PangoRenderer* arg0, PangoRenderPart arg1) {
//   ((void (*)(PangoRenderer*, PangoRenderPart))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeRenderPart = coreglib.Type(C.pango_render_part_get_type())
	GTypeRenderer   = coreglib.Type(C.pango_renderer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRenderPart, F: marshalRenderPart},
		coreglib.TypeMarshaler{T: GTypeRenderer, F: marshalRenderer},
	})
}

// RenderPart defines different items to render for such purposes as setting
// colors.
type RenderPart C.gint

const (
	// RenderPartForeground: text itself.
	RenderPartForeground RenderPart = iota
	// RenderPartBackground: area behind the text.
	RenderPartBackground
	// RenderPartUnderline: underlines.
	RenderPartUnderline
	// RenderPartStrikethrough: strikethrough lines.
	RenderPartStrikethrough
	// RenderPartOverline: overlines.
	RenderPartOverline
)

func marshalRenderPart(p uintptr) (interface{}, error) {
	return RenderPart(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RenderPart.
func (r RenderPart) String() string {
	switch r {
	case RenderPartForeground:
		return "Foreground"
	case RenderPartBackground:
		return "Background"
	case RenderPartUnderline:
		return "Underline"
	case RenderPartStrikethrough:
		return "Strikethrough"
	case RenderPartOverline:
		return "Overline"
	default:
		return fmt.Sprintf("RenderPart(%d)", r)
	}
}

// RendererOverrides contains methods that are overridable.
type RendererOverrides struct {
	Begin func()
	// DrawErrorUnderline: draw a squiggly line that approximately covers the
	// given rectangle in the style of an underline used to indicate a spelling
	// error.
	//
	// The width of the underline is rounded to an integer number of up/down
	// segments and the resulting rectangle is centered in the original
	// rectangle.
	//
	// This should be called while renderer is already active. Use
	// pango.Renderer.Activate() to activate a renderer.
	//
	// The function takes the following parameters:
	//
	//    - x: x coordinate of underline, in Pango units in user coordinate
	//      system.
	//    - y: y coordinate of underline, in Pango units in user coordinate
	//      system.
	//    - width of underline, in Pango units in user coordinate system.
	//    - height of underline, in Pango units in user coordinate system.
	//
	DrawErrorUnderline func(x, y, width, height int)
	// DrawGlyph draws a single glyph with coordinates in device space.
	//
	// The function takes the following parameters:
	//
	//    - font: Font.
	//    - glyph index of a single glyph.
	//    - x: x coordinate of left edge of baseline of glyph.
	//    - y: y coordinate of left edge of baseline of glyph.
	//
	DrawGlyph func(font Fonter, glyph Glyph, x, y float64)
	// DrawGlyphItem draws the glyphs in glyph_item with the specified
	// PangoRenderer, embedding the text associated with the glyphs in the
	// output if the output format supports it.
	//
	// This is useful for rendering text in PDF.
	//
	// Note that text is the start of the text for layout, which is then indexed
	// by glyph_item->item->offset.
	//
	// If text is NULL, this simply calls pango.Renderer.DrawGlyphs().
	//
	// The default implementation of this method simply falls back to
	// pango.Renderer.DrawGlyphs().
	//
	// The function takes the following parameters:
	//
	//    - text (optional): UTF-8 text that glyph_item refers to, or NULL.
	//    - glyphItem: PangoGlyphItem.
	//    - x: x position of left edge of baseline, in user space coordinates in
	//      Pango units.
	//    - y: y position of left edge of baseline, in user space coordinates in
	//      Pango units.
	//
	DrawGlyphItem func(text string, glyphItem *GlyphItem, x, y int)
	// DrawGlyphs draws the glyphs in glyphs with the specified PangoRenderer.
	//
	// The function takes the following parameters:
	//
	//    - font: PangoFont.
	//    - glyphs: PangoGlyphString.
	//    - x: x position of left edge of baseline, in user space coordinates in
	//      Pango units.
	//    - y: y position of left edge of baseline, in user space coordinates in
	//      Pango units.
	//
	DrawGlyphs func(font Fonter, glyphs *GlyphString, x, y int)
	// DrawRectangle draws an axis-aligned rectangle in user space coordinates
	// with the specified PangoRenderer.
	//
	// This should be called while renderer is already active. Use
	// pango.Renderer.Activate() to activate a renderer.
	//
	// The function takes the following parameters:
	//
	//    - part: type of object this rectangle is part of.
	//    - x: x position at which to draw rectangle, in user space coordinates
	//      in Pango units.
	//    - y: y position at which to draw rectangle, in user space coordinates
	//      in Pango units.
	//    - width of rectangle in Pango units.
	//    - height of rectangle in Pango units.
	//
	DrawRectangle func(part RenderPart, x, y, width, height int)
	// The function takes the following parameters:
	//
	//    - attr
	//    - x
	//    - y
	//
	DrawShape func(attr *AttrShape, x, y int)
	// DrawTrapezoid draws a trapezoid with the parallel sides aligned with the
	// X axis using the given PangoRenderer; coordinates are in device space.
	//
	// The function takes the following parameters:
	//
	//    - part: type of object this trapezoid is part of.
	//    - y1: y coordinate of top of trapezoid.
	//    - x11: x coordinate of left end of top of trapezoid.
	//    - x21: x coordinate of right end of top of trapezoid.
	//    - y2: y coordinate of bottom of trapezoid.
	//    - x12: x coordinate of left end of bottom of trapezoid.
	//    - x22: x coordinate of right end of bottom of trapezoid.
	//
	DrawTrapezoid func(part RenderPart, y1, x11, x21, y2, x12, x22 float64)
	End           func()
	// PartChanged informs Pango that the way that the rendering is done for
	// part has changed.
	//
	// This should be called if the rendering changes in a way that would
	// prevent multiple pieces being joined together into one drawing call. For
	// instance, if a subclass of PangoRenderer was to add a stipple option for
	// drawing underlines, it needs to call
	//
	//    pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
	//
	//
	// When the stipple changes or underlines with different stipples might be
	// joined together. Pango automatically calls this for changes to colors.
	// (See pango.Renderer.SetColor()).
	//
	// The function takes the following parameters:
	//
	//    - part for which rendering has changed.
	//
	PartChanged func(part RenderPart)
	// The function takes the following parameters:
	//
	PrepareRun func(run *LayoutRun)
}

func defaultRendererOverrides(v *Renderer) RendererOverrides {
	return RendererOverrides{
		Begin:              v.begin,
		DrawErrorUnderline: v.drawErrorUnderline,
		DrawGlyph:          v.drawGlyph,
		DrawGlyphItem:      v.drawGlyphItem,
		DrawGlyphs:         v.drawGlyphs,
		DrawRectangle:      v.drawRectangle,
		DrawShape:          v.drawShape,
		DrawTrapezoid:      v.drawTrapezoid,
		End:                v.end,
		PartChanged:        v.partChanged,
		PrepareRun:         v.prepareRun,
	}
}

// Renderer: PangoRenderer is a base class for objects that can render text
// provided as PangoGlyphString or PangoLayout.
//
// By subclassing PangoRenderer and overriding operations such as draw_glyphs
// and draw_rectangle, renderers for particular font backends and destinations
// can be created.
type Renderer struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Renderer)(nil)
)

// Rendererer describes types inherited from class Renderer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Rendererer interface {
	coreglib.Objector
	baseRenderer() *Renderer
}

var _ Rendererer = (*Renderer)(nil)

func init() {
	coreglib.RegisterClassInfo[*Renderer, *RendererClass, RendererOverrides](
		GTypeRenderer,
		initRendererClass,
		wrapRenderer,
		defaultRendererOverrides,
	)
}

func initRendererClass(gclass unsafe.Pointer, overrides RendererOverrides, classInitFunc func(*RendererClass)) {
	pclass := (*C.PangoRendererClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRenderer))))

	if overrides.Begin != nil {
		pclass.begin = (*[0]byte)(C._gotk4_pango1_RendererClass_begin)
	}

	if overrides.DrawErrorUnderline != nil {
		pclass.draw_error_underline = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_error_underline)
	}

	if overrides.DrawGlyph != nil {
		pclass.draw_glyph = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_glyph)
	}

	if overrides.DrawGlyphItem != nil {
		pclass.draw_glyph_item = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_glyph_item)
	}

	if overrides.DrawGlyphs != nil {
		pclass.draw_glyphs = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_glyphs)
	}

	if overrides.DrawRectangle != nil {
		pclass.draw_rectangle = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_rectangle)
	}

	if overrides.DrawShape != nil {
		pclass.draw_shape = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_shape)
	}

	if overrides.DrawTrapezoid != nil {
		pclass.draw_trapezoid = (*[0]byte)(C._gotk4_pango1_RendererClass_draw_trapezoid)
	}

	if overrides.End != nil {
		pclass.end = (*[0]byte)(C._gotk4_pango1_RendererClass_end)
	}

	if overrides.PartChanged != nil {
		pclass.part_changed = (*[0]byte)(C._gotk4_pango1_RendererClass_part_changed)
	}

	if overrides.PrepareRun != nil {
		pclass.prepare_run = (*[0]byte)(C._gotk4_pango1_RendererClass_prepare_run)
	}

	if classInitFunc != nil {
		class := (*RendererClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRenderer(obj *coreglib.Object) *Renderer {
	return &Renderer{
		Object: obj,
	}
}

func marshalRenderer(p uintptr) (interface{}, error) {
	return wrapRenderer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (renderer *Renderer) baseRenderer() *Renderer {
	return renderer
}

// BaseRenderer returns the underlying base object.
func BaseRenderer(obj Rendererer) *Renderer {
	return obj.baseRenderer()
}

// Activate does initial setup before rendering operations on renderer.
//
// pango.Renderer.Deactivate() should be called when done drawing. Calls such as
// pango.Renderer.DrawLayout() automatically activate the layout before drawing
// on it. Calls to pango_renderer_activate() and pango_renderer_deactivate() can
// be nested and the renderer will only be initialized and deinitialized once.
func (renderer *Renderer) Activate() {
	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	C.pango_renderer_activate(_arg0)
	runtime.KeepAlive(renderer)
}

// Deactivate cleans up after rendering operations on renderer.
//
// See docs for pango.Renderer.Activate().
func (renderer *Renderer) Deactivate() {
	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	C.pango_renderer_deactivate(_arg0)
	runtime.KeepAlive(renderer)
}

// DrawErrorUnderline: draw a squiggly line that approximately covers the given
// rectangle in the style of an underline used to indicate a spelling error.
//
// The width of the underline is rounded to an integer number of up/down
// segments and the resulting rectangle is centered in the original rectangle.
//
// This should be called while renderer is already active. Use
// pango.Renderer.Activate() to activate a renderer.
//
// The function takes the following parameters:
//
//    - x: x coordinate of underline, in Pango units in user coordinate system.
//    - y: y coordinate of underline, in Pango units in user coordinate system.
//    - width of underline, in Pango units in user coordinate system.
//    - height of underline, in Pango units in user coordinate system.
//
func (renderer *Renderer) DrawErrorUnderline(x, y, width, height int) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 C.int            // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out
	var _arg4 C.int            // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.pango_renderer_draw_error_underline(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// DrawGlyph draws a single glyph with coordinates in device space.
//
// The function takes the following parameters:
//
//    - font: Font.
//    - glyph index of a single glyph.
//    - x: x coordinate of left edge of baseline of glyph.
//    - y: y coordinate of left edge of baseline of glyph.
//
func (renderer *Renderer) DrawGlyph(font Fonter, glyph Glyph, x, y float64) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoFont     // out
	var _arg2 C.PangoGlyph     // out
	var _arg3 C.double         // out
	var _arg4 C.double         // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))
	_arg2 = C.guint32(glyph)
	_arg3 = C.double(x)
	_arg4 = C.double(y)

	C.pango_renderer_draw_glyph(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(font)
	runtime.KeepAlive(glyph)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// DrawGlyphs draws the glyphs in glyphs with the specified PangoRenderer.
//
// The function takes the following parameters:
//
//    - font: PangoFont.
//    - glyphs: PangoGlyphString.
//    - x: x position of left edge of baseline, in user space coordinates in
//      Pango units.
//    - y: y position of left edge of baseline, in user space coordinates in
//      Pango units.
//
func (renderer *Renderer) DrawGlyphs(font Fonter, glyphs *GlyphString, x, y int) {
	var _arg0 *C.PangoRenderer    // out
	var _arg1 *C.PangoFont        // out
	var _arg2 *C.PangoGlyphString // out
	var _arg3 C.int               // out
	var _arg4 C.int               // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))
	_arg2 = (*C.PangoGlyphString)(gextras.StructNative(unsafe.Pointer(glyphs)))
	_arg3 = C.int(x)
	_arg4 = C.int(y)

	C.pango_renderer_draw_glyphs(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(font)
	runtime.KeepAlive(glyphs)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// DrawLayout draws layout with the specified PangoRenderer.
//
// The function takes the following parameters:
//
//    - layout: PangoLayout.
//    - x: x position of left edge of baseline, in user space coordinates in
//      Pango units.
//    - y: y position of left edge of baseline, in user space coordinates in
//      Pango units.
//
func (renderer *Renderer) DrawLayout(layout *Layout, x, y int) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoLayout   // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoLayout)(unsafe.Pointer(coreglib.InternObject(layout).Native()))
	_arg2 = C.int(x)
	_arg3 = C.int(y)

	C.pango_renderer_draw_layout(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(layout)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// DrawLayoutLine draws line with the specified PangoRenderer.
//
// The function takes the following parameters:
//
//    - line: PangoLayoutLine.
//    - x: x position of left edge of baseline, in user space coordinates in
//      Pango units.
//    - y: y position of left edge of baseline, in user space coordinates in
//      Pango units.
//
func (renderer *Renderer) DrawLayoutLine(line *LayoutLine, x, y int) {
	var _arg0 *C.PangoRenderer   // out
	var _arg1 *C.PangoLayoutLine // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoLayoutLine)(gextras.StructNative(unsafe.Pointer(line)))
	_arg2 = C.int(x)
	_arg3 = C.int(y)

	C.pango_renderer_draw_layout_line(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(line)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// DrawRectangle draws an axis-aligned rectangle in user space coordinates with
// the specified PangoRenderer.
//
// This should be called while renderer is already active. Use
// pango.Renderer.Activate() to activate a renderer.
//
// The function takes the following parameters:
//
//    - part: type of object this rectangle is part of.
//    - x: x position at which to draw rectangle, in user space coordinates in
//      Pango units.
//    - y: y position at which to draw rectangle, in user space coordinates in
//      Pango units.
//    - width of rectangle in Pango units.
//    - height of rectangle in Pango units.
//
func (renderer *Renderer) DrawRectangle(part RenderPart, x, y, width, height int) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.int             // out
	var _arg3 C.int             // out
	var _arg4 C.int             // out
	var _arg5 C.int             // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.int(x)
	_arg3 = C.int(y)
	_arg4 = C.int(width)
	_arg5 = C.int(height)

	C.pango_renderer_draw_rectangle(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// DrawTrapezoid draws a trapezoid with the parallel sides aligned with the X
// axis using the given PangoRenderer; coordinates are in device space.
//
// The function takes the following parameters:
//
//    - part: type of object this trapezoid is part of.
//    - y1: y coordinate of top of trapezoid.
//    - x11: x coordinate of left end of top of trapezoid.
//    - x21: x coordinate of right end of top of trapezoid.
//    - y2: y coordinate of bottom of trapezoid.
//    - x12: x coordinate of left end of bottom of trapezoid.
//    - x22: x coordinate of right end of bottom of trapezoid.
//
func (renderer *Renderer) DrawTrapezoid(part RenderPart, y1, x11, x21, y2, x12, x22 float64) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.double          // out
	var _arg3 C.double          // out
	var _arg4 C.double          // out
	var _arg5 C.double          // out
	var _arg6 C.double          // out
	var _arg7 C.double          // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.double(y1)
	_arg3 = C.double(x11)
	_arg4 = C.double(x21)
	_arg5 = C.double(y2)
	_arg6 = C.double(x12)
	_arg7 = C.double(x22)

	C.pango_renderer_draw_trapezoid(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(y1)
	runtime.KeepAlive(x11)
	runtime.KeepAlive(x21)
	runtime.KeepAlive(y2)
	runtime.KeepAlive(x12)
	runtime.KeepAlive(x22)
}

// Color gets the current rendering color for the specified part.
//
// The function takes the following parameters:
//
//    - part to get the color for.
//
// The function returns the following values:
//
//    - color (optional) for the specified part, or NULL if it hasn't been set
//      and should be inherited from the environment.
//
func (renderer *Renderer) Color(part RenderPart) *Color {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _cret *C.PangoColor     // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)

	_cret = C.pango_renderer_get_color(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)

	var _color *Color // out

	if _cret != nil {
		_color = (*Color)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _color
}

// Matrix gets the transformation matrix that will be applied when rendering.
//
// See pango.Renderer.SetMatrix().
//
// The function returns the following values:
//
//    - matrix (optional): matrix, or NULL if no matrix has been set (which is
//      the same as the identity matrix). The returned matrix is owned by Pango
//      and must not be modified or freed.
//
func (renderer *Renderer) Matrix() *Matrix {
	var _arg0 *C.PangoRenderer // out
	var _cret *C.PangoMatrix   // in

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	_cret = C.pango_renderer_get_matrix(_arg0)
	runtime.KeepAlive(renderer)

	var _matrix *Matrix // out

	if _cret != nil {
		_matrix = (*Matrix)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _matrix
}

// PartChanged informs Pango that the way that the rendering is done for part
// has changed.
//
// This should be called if the rendering changes in a way that would prevent
// multiple pieces being joined together into one drawing call. For instance, if
// a subclass of PangoRenderer was to add a stipple option for drawing
// underlines, it needs to call
//
//    pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
//
//
// When the stipple changes or underlines with different stipples might be
// joined together. Pango automatically calls this for changes to colors. (See
// pango.Renderer.SetColor()).
//
// The function takes the following parameters:
//
//    - part for which rendering has changed.
//
func (renderer *Renderer) PartChanged(part RenderPart) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)

	C.pango_renderer_part_changed(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
}

// SetColor sets the color for part of the rendering.
//
// Also see pango.Renderer.SetAlpha().
//
// The function takes the following parameters:
//
//    - part to change the color of.
//    - color (optional): new color or NULL to unset the current color.
//
func (renderer *Renderer) SetColor(part RenderPart, color *Color) {
	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 *C.PangoColor     // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	if color != nil {
		_arg2 = (*C.PangoColor)(gextras.StructNative(unsafe.Pointer(color)))
	}

	C.pango_renderer_set_color(_arg0, _arg1, _arg2)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(color)
}

// SetMatrix sets the transformation matrix that will be applied when rendering.
//
// The function takes the following parameters:
//
//    - matrix (optional): PangoMatrix, or NULL to unset any existing matrix. (No
//      matrix set is the same as setting the identity matrix.).
//
func (renderer *Renderer) SetMatrix(matrix *Matrix) {
	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoMatrix   // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	if matrix != nil {
		_arg1 = (*C.PangoMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	}

	C.pango_renderer_set_matrix(_arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(matrix)
}

// drawErrorUnderline: draw a squiggly line that approximately covers the given
// rectangle in the style of an underline used to indicate a spelling error.
//
// The width of the underline is rounded to an integer number of up/down
// segments and the resulting rectangle is centered in the original rectangle.
//
// This should be called while renderer is already active. Use
// pango.Renderer.Activate() to activate a renderer.
//
// The function takes the following parameters:
//
//    - x: x coordinate of underline, in Pango units in user coordinate system.
//    - y: y coordinate of underline, in Pango units in user coordinate system.
//    - width of underline, in Pango units in user coordinate system.
//    - height of underline, in Pango units in user coordinate system.
//
func (renderer *Renderer) drawErrorUnderline(x, y, width, height int) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_error_underline

	var _arg0 *C.PangoRenderer // out
	var _arg1 C.int            // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out
	var _arg4 C.int            // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C._gotk4_pango1_Renderer_virtual_draw_error_underline(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// drawGlyph draws a single glyph with coordinates in device space.
//
// The function takes the following parameters:
//
//    - font: Font.
//    - glyph index of a single glyph.
//    - x: x coordinate of left edge of baseline of glyph.
//    - y: y coordinate of left edge of baseline of glyph.
//
func (renderer *Renderer) drawGlyph(font Fonter, glyph Glyph, x, y float64) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_glyph

	var _arg0 *C.PangoRenderer // out
	var _arg1 *C.PangoFont     // out
	var _arg2 C.PangoGlyph     // out
	var _arg3 C.double         // out
	var _arg4 C.double         // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))
	_arg2 = C.guint32(glyph)
	_arg3 = C.double(x)
	_arg4 = C.double(y)

	C._gotk4_pango1_Renderer_virtual_draw_glyph(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(font)
	runtime.KeepAlive(glyph)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// drawGlyphs draws the glyphs in glyphs with the specified PangoRenderer.
//
// The function takes the following parameters:
//
//    - font: PangoFont.
//    - glyphs: PangoGlyphString.
//    - x: x position of left edge of baseline, in user space coordinates in
//      Pango units.
//    - y: y position of left edge of baseline, in user space coordinates in
//      Pango units.
//
func (renderer *Renderer) drawGlyphs(font Fonter, glyphs *GlyphString, x, y int) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_glyphs

	var _arg0 *C.PangoRenderer    // out
	var _arg1 *C.PangoFont        // out
	var _arg2 *C.PangoGlyphString // out
	var _arg3 C.int               // out
	var _arg4 C.int               // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))
	_arg2 = (*C.PangoGlyphString)(gextras.StructNative(unsafe.Pointer(glyphs)))
	_arg3 = C.int(x)
	_arg4 = C.int(y)

	C._gotk4_pango1_Renderer_virtual_draw_glyphs(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(font)
	runtime.KeepAlive(glyphs)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// drawRectangle draws an axis-aligned rectangle in user space coordinates with
// the specified PangoRenderer.
//
// This should be called while renderer is already active. Use
// pango.Renderer.Activate() to activate a renderer.
//
// The function takes the following parameters:
//
//    - part: type of object this rectangle is part of.
//    - x: x position at which to draw rectangle, in user space coordinates in
//      Pango units.
//    - y: y position at which to draw rectangle, in user space coordinates in
//      Pango units.
//    - width of rectangle in Pango units.
//    - height of rectangle in Pango units.
//
func (renderer *Renderer) drawRectangle(part RenderPart, x, y, width, height int) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_rectangle

	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.int             // out
	var _arg3 C.int             // out
	var _arg4 C.int             // out
	var _arg5 C.int             // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.int(x)
	_arg3 = C.int(y)
	_arg4 = C.int(width)
	_arg5 = C.int(height)

	C._gotk4_pango1_Renderer_virtual_draw_rectangle(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// drawTrapezoid draws a trapezoid with the parallel sides aligned with the X
// axis using the given PangoRenderer; coordinates are in device space.
//
// The function takes the following parameters:
//
//    - part: type of object this trapezoid is part of.
//    - y1: y coordinate of top of trapezoid.
//    - x11: x coordinate of left end of top of trapezoid.
//    - x21: x coordinate of right end of top of trapezoid.
//    - y2: y coordinate of bottom of trapezoid.
//    - x12: x coordinate of left end of bottom of trapezoid.
//    - x22: x coordinate of right end of bottom of trapezoid.
//
func (renderer *Renderer) drawTrapezoid(part RenderPart, y1, x11, x21, y2, x12, x22 float64) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_trapezoid

	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out
	var _arg2 C.double          // out
	var _arg3 C.double          // out
	var _arg4 C.double          // out
	var _arg5 C.double          // out
	var _arg6 C.double          // out
	var _arg7 C.double          // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)
	_arg2 = C.double(y1)
	_arg3 = C.double(x11)
	_arg4 = C.double(x21)
	_arg5 = C.double(y2)
	_arg6 = C.double(x12)
	_arg7 = C.double(x22)

	C._gotk4_pango1_Renderer_virtual_draw_trapezoid(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
	runtime.KeepAlive(y1)
	runtime.KeepAlive(x11)
	runtime.KeepAlive(x21)
	runtime.KeepAlive(y2)
	runtime.KeepAlive(x12)
	runtime.KeepAlive(x22)
}

// partChanged informs Pango that the way that the rendering is done for part
// has changed.
//
// This should be called if the rendering changes in a way that would prevent
// multiple pieces being joined together into one drawing call. For instance, if
// a subclass of PangoRenderer was to add a stipple option for drawing
// underlines, it needs to call
//
//    pango_renderer_part_changed (render, PANGO_RENDER_PART_UNDERLINE);
//
//
// When the stipple changes or underlines with different stipples might be
// joined together. Pango automatically calls this for changes to colors. (See
// pango.Renderer.SetColor()).
//
// The function takes the following parameters:
//
//    - part for which rendering has changed.
//
func (renderer *Renderer) partChanged(part RenderPart) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.part_changed

	var _arg0 *C.PangoRenderer  // out
	var _arg1 C.PangoRenderPart // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = C.PangoRenderPart(part)

	C._gotk4_pango1_Renderer_virtual_part_changed(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(part)
}

// RendererClass class structure for Renderer.
//
// The following vfuncs take user space coordinates in Pango units and have
// default implementations:
//
// - draw_glyphs
//
// - draw_rectangle
//
// - draw_error_underline
//
// - draw_shape
//
// - draw_glyph_item
//
// The default draw_shape implementation draws nothing.
//
// The following vfuncs take device space coordinates as doubles and must be
// implemented:
//
// - draw_trapezoid
//
// - draw_glyph
//
// An instance of this type is always passed by reference.
type RendererClass struct {
	*rendererClass
}

// rendererClass is the struct that's finalized.
type rendererClass struct {
	native *C.PangoRendererClass
}
