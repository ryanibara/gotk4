// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <pango/pango.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_gravity_get_type()), F: marshalGravity},
		{T: externglib.Type(C.pango_gravity_hint_get_type()), F: marshalGravityHint},
	})
}

// Gravity: PangoGravity represents the orientation of glyphs in a segment of
// text.
//
// This is useful when rendering vertical text layouts. In those situations, the
// layout is rotated using a non-identity pango.Matrix, and then glyph
// orientation is controlled using PangoGravity.
//
// Not every value in this enumeration makes sense for every usage of
// PangoGravity; for example, PANGO_GRAVITY_AUTO only can be passed to
// pango.Context.SetBaseGravity() and can only be returned by
// pango.Context.GetBaseGravity().
//
// See also: pango.GravityHint.
type Gravity int

const (
	// GravitySouth glyphs stand upright (default).
	GravitySouth Gravity = iota
	// GravityEast glyphs are rotated 90 degrees clockwise.
	GravityEast
	// GravityNorth glyphs are upside-down.
	GravityNorth
	// GravityWest glyphs are rotated 90 degrees counter-clockwise.
	GravityWest
	// GravityAuto: gravity is resolved from the context matrix.
	GravityAuto
)

func marshalGravity(p uintptr) (interface{}, error) {
	return Gravity(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for Gravity.
func (g Gravity) String() string {
	switch g {
	case GravitySouth:
		return "South"
	case GravityEast:
		return "East"
	case GravityNorth:
		return "North"
	case GravityWest:
		return "West"
	case GravityAuto:
		return "Auto"
	default:
		return fmt.Sprintf("Gravity(%d)", g)
	}
}

// GravityGetForMatrix finds the gravity that best matches the rotation
// component in a PangoMatrix.
//
// The function takes the following parameters:
//
//    - matrix: PangoMatrix.
//
func GravityGetForMatrix(matrix *Matrix) Gravity {
	var _arg1 *C.PangoMatrix // out
	var _cret C.PangoGravity // in

	if matrix != nil {
		_arg1 = (*C.PangoMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	}

	_cret = C.pango_gravity_get_for_matrix(_arg1)
	runtime.KeepAlive(matrix)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

// GravityGetForScript returns the gravity to use in laying out a PangoItem.
//
// The gravity is determined based on the script, base gravity, and hint.
//
// If base_gravity is PANGO_GRAVITY_AUTO, it is first replaced with the
// preferred gravity of script. To get the preferred gravity of a script, pass
// PANGO_GRAVITY_AUTO and PANGO_GRAVITY_HINT_STRONG in.
//
// The function takes the following parameters:
//
//    - script to query.
//    - baseGravity: base gravity of the paragraph.
//    - hint: orientation hint.
//
func GravityGetForScript(script Script, baseGravity Gravity, hint GravityHint) Gravity {
	var _arg1 C.PangoScript      // out
	var _arg2 C.PangoGravity     // out
	var _arg3 C.PangoGravityHint // out
	var _cret C.PangoGravity     // in

	_arg1 = C.PangoScript(script)
	_arg2 = C.PangoGravity(baseGravity)
	_arg3 = C.PangoGravityHint(hint)

	_cret = C.pango_gravity_get_for_script(_arg1, _arg2, _arg3)
	runtime.KeepAlive(script)
	runtime.KeepAlive(baseGravity)
	runtime.KeepAlive(hint)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

// GravityGetForScriptAndWidth returns the gravity to use in laying out a single
// character or PangoItem.
//
// The gravity is determined based on the script, East Asian width, base
// gravity, and hint,
//
// This function is similar to pango.Gravity.GetForScript except that this
// function makes a distinction between narrow/half-width and wide/full-width
// characters also. Wide/full-width characters always stand *upright*, that is,
// they always take the base gravity, whereas narrow/full-width characters are
// always rotated in vertical context.
//
// If base_gravity is PANGO_GRAVITY_AUTO, it is first replaced with the
// preferred gravity of script.
//
// The function takes the following parameters:
//
//    - script to query.
//    - wide: TRUE for wide characters as returned by g_unichar_iswide().
//    - baseGravity: base gravity of the paragraph.
//    - hint: orientation hint.
//
func GravityGetForScriptAndWidth(script Script, wide bool, baseGravity Gravity, hint GravityHint) Gravity {
	var _arg1 C.PangoScript      // out
	var _arg2 C.gboolean         // out
	var _arg3 C.PangoGravity     // out
	var _arg4 C.PangoGravityHint // out
	var _cret C.PangoGravity     // in

	_arg1 = C.PangoScript(script)
	if wide {
		_arg2 = C.TRUE
	}
	_arg3 = C.PangoGravity(baseGravity)
	_arg4 = C.PangoGravityHint(hint)

	_cret = C.pango_gravity_get_for_script_and_width(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(script)
	runtime.KeepAlive(wide)
	runtime.KeepAlive(baseGravity)
	runtime.KeepAlive(hint)

	var _gravity Gravity // out

	_gravity = Gravity(_cret)

	return _gravity
}

// GravityToRotation converts a Gravity value to its natural rotation in
// radians.
//
// Note that pango.Matrix.Rotate() takes angle in degrees, not radians. So, to
// call pango.Matrix,rotate with the output of this function you should multiply
// it by (180. / G_PI).
//
// The function takes the following parameters:
//
//    - gravity to query, should not be PANGO_GRAVITY_AUTO.
//
func GravityToRotation(gravity Gravity) float64 {
	var _arg1 C.PangoGravity // out
	var _cret C.double       // in

	_arg1 = C.PangoGravity(gravity)

	_cret = C.pango_gravity_to_rotation(_arg1)
	runtime.KeepAlive(gravity)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// GravityHint: PangoGravityHint defines how horizontal scripts should behave in
// a vertical context.
//
// That is, English excerpts in a vertical paragraph for example.
//
// See also pango.Gravity.
type GravityHint int

const (
	// GravityHintNatural scripts will take their natural gravity based on the
	// base gravity and the script. This is the default.
	GravityHintNatural GravityHint = iota
	// GravityHintStrong always use the base gravity set, regardless of the
	// script.
	GravityHintStrong
	// GravityHintLine: for scripts not in their natural direction (eg. Latin in
	// East gravity), choose per-script gravity such that every script respects
	// the line progression. This means, Latin and Arabic will take opposite
	// gravities and both flow top-to-bottom for example.
	GravityHintLine
)

func marshalGravityHint(p uintptr) (interface{}, error) {
	return GravityHint(C.g_value_get_enum((*C.GValue)(unsafe.Pointer(p)))), nil
}

// String returns the name in string for GravityHint.
func (g GravityHint) String() string {
	switch g {
	case GravityHintNatural:
		return "Natural"
	case GravityHintStrong:
		return "Strong"
	case GravityHintLine:
		return "Line"
	default:
		return fmt.Sprintf("GravityHint(%d)", g)
	}
}
