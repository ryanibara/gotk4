// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
// PangoFontFace* _gotk4_pango1_FontFamily_virtual_get_face(void* fnptr, PangoFontFamily* arg0, char* arg1) {
//   return ((PangoFontFace* (*)(PangoFontFamily*, char*))(fnptr))(arg0, arg1);
// };
// PangoFontFamily* _gotk4_pango1_FontFace_virtual_get_family(void* fnptr, PangoFontFace* arg0) {
//   return ((PangoFontFamily* (*)(PangoFontFace*))(fnptr))(arg0);
// };
import "C"

// Face gets the PangoFontFace to which font belongs.
//
// The function returns the following values:
//
//    - fontFace: PangoFontFace.
//
func (font *Font) Face() FontFacer {
	var _arg0 *C.PangoFont     // out
	var _cret *C.PangoFontFace // in

	_arg0 = (*C.PangoFont)(unsafe.Pointer(coreglib.InternObject(font).Native()))

	_cret = C.pango_font_get_face(_arg0)
	runtime.KeepAlive(font)

	var _fontFace FontFacer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontFacer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontFacer)
			return ok
		})
		rv, ok := casted.(FontFacer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFacer")
		}
		_fontFace = rv
	}

	return _fontFace
}

// Family gets the PangoFontFamily that face belongs to.
//
// The function returns the following values:
//
//    - fontFamily: PangoFontFamily.
//
func (face *FontFace) Family() FontFamilier {
	var _arg0 *C.PangoFontFace   // out
	var _cret *C.PangoFontFamily // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(coreglib.InternObject(face).Native()))

	_cret = C.pango_font_face_get_family(_arg0)
	runtime.KeepAlive(face)

	var _fontFamily FontFamilier // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontFamilier is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontFamilier)
			return ok
		})
		rv, ok := casted.(FontFamilier)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
		}
		_fontFamily = rv
	}

	return _fontFamily
}

// Family gets the PangoFontFamily that face belongs to.
//
// The function returns the following values:
//
//    - fontFamily: PangoFontFamily.
//
func (face *FontFace) family() FontFamilier {
	gclass := (*C.PangoFontFaceClass)(coreglib.PeekParentClass(face))
	fnarg := gclass.get_family

	var _arg0 *C.PangoFontFace   // out
	var _cret *C.PangoFontFamily // in

	_arg0 = (*C.PangoFontFace)(unsafe.Pointer(coreglib.InternObject(face).Native()))

	_cret = C._gotk4_pango1_FontFace_virtual_get_family(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(face)

	var _fontFamily FontFamilier // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type pango.FontFamilier is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(FontFamilier)
			return ok
		})
		rv, ok := casted.(FontFamilier)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
		}
		_fontFamily = rv
	}

	return _fontFamily
}

// Face gets the PangoFontFace of family with the given name.
//
// The function takes the following parameters:
//
//    - name (optional) of a face. If the name is NULL, the family's default face
//      (fontconfig calls it "Regular") will be returned.
//
// The function returns the following values:
//
//    - fontFace (optional): PangoFontFace, or NULL if no face with the given
//      name exists.
//
func (family *FontFamily) Face(name string) FontFacer {
	var _arg0 *C.PangoFontFamily // out
	var _arg1 *C.char            // out
	var _cret *C.PangoFontFace   // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(coreglib.InternObject(family).Native()))
	if name != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.pango_font_family_get_face(_arg0, _arg1)
	runtime.KeepAlive(family)
	runtime.KeepAlive(name)

	var _fontFace FontFacer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(FontFacer)
				return ok
			})
			rv, ok := casted.(FontFacer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFacer")
			}
			_fontFace = rv
		}
	}

	return _fontFace
}

// Face gets the PangoFontFace of family with the given name.
//
// The function takes the following parameters:
//
//    - name (optional) of a face. If the name is NULL, the family's default face
//      (fontconfig calls it "Regular") will be returned.
//
// The function returns the following values:
//
//    - fontFace (optional): PangoFontFace, or NULL if no face with the given
//      name exists.
//
func (family *FontFamily) face(name string) FontFacer {
	gclass := (*C.PangoFontFamilyClass)(coreglib.PeekParentClass(family))
	fnarg := gclass.get_face

	var _arg0 *C.PangoFontFamily // out
	var _arg1 *C.char            // out
	var _cret *C.PangoFontFace   // in

	_arg0 = (*C.PangoFontFamily)(unsafe.Pointer(coreglib.InternObject(family).Native()))
	if name != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C._gotk4_pango1_FontFamily_virtual_get_face(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(family)
	runtime.KeepAlive(name)

	var _fontFace FontFacer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(FontFacer)
				return ok
			})
			rv, ok := casted.(FontFacer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFacer")
			}
			_fontFace = rv
		}
	}

	return _fontFace
}
