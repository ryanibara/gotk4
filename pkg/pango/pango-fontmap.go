// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <pango/pango.h>
// extern void _gotk4_pango1_FontMapClass_list_families(PangoFontMap*, PangoFontFamily***, int*);
// extern void _gotk4_pango1_FontMapClass_changed(PangoFontMap*);
// extern guint _gotk4_pango1_FontMapClass_get_serial(PangoFontMap*);
// extern PangoFontset* _gotk4_pango1_FontMapClass_load_fontset(PangoFontMap*, PangoContext*, PangoFontDescription*, PangoLanguage*);
// extern PangoFontFamily* _gotk4_pango1_FontMapClass_get_family(PangoFontMap*, char*);
// extern PangoFont* _gotk4_pango1_FontMapClass_load_font(PangoFontMap*, PangoContext*, PangoFontDescription*);
// PangoFont* _gotk4_pango1_FontMap_virtual_load_font(void* fnptr, PangoFontMap* arg0, PangoContext* arg1, PangoFontDescription* arg2) {
//   return ((PangoFont* (*)(PangoFontMap*, PangoContext*, PangoFontDescription*))(fnptr))(arg0, arg1, arg2);
// };
// PangoFontset* _gotk4_pango1_FontMap_virtual_load_fontset(void* fnptr, PangoFontMap* arg0, PangoContext* arg1, PangoFontDescription* arg2, PangoLanguage* arg3) {
//   return ((PangoFontset* (*)(PangoFontMap*, PangoContext*, PangoFontDescription*, PangoLanguage*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_pango1_FontMap_virtual_list_families(void* fnptr, PangoFontMap* arg0, PangoFontFamily*** arg1, int* arg2) {
//   ((void (*)(PangoFontMap*, PangoFontFamily***, int*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// GType values.
var (
	GTypeFontMap = coreglib.Type(C.pango_font_map_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontMap, F: marshalFontMap},
	})
}

// FontMapOverrides contains methods that are overridable.
type FontMapOverrides struct {
	// Changed forces a change in the context, which will cause any PangoContext
	// using this fontmap to change.
	//
	// This function is only useful when implementing a new backend for Pango,
	// something applications won't do. Backends should call this function if
	// they have attached extra data to the context and such data is changed.
	Changed func()
	// Family gets a font family by name.
	//
	// The function takes the following parameters:
	//
	//    - name: family name.
	//
	// The function returns the following values:
	//
	//    - fontFamily: PangoFontFamily.
	//
	Family func(name string) FontFamilier
	// Serial returns the current serial number of fontmap.
	//
	// The serial number is initialized to an small number larger than zero when
	// a new fontmap is created and is increased whenever the fontmap is
	// changed. It may wrap, but will never have the value 0. Since it can wrap,
	// never compare it with "less than", always use "not equals".
	//
	// The fontmap can only be changed using backend-specific API, like changing
	// fontmap resolution.
	//
	// This can be used to automatically detect changes to a PangoFontMap, like
	// in PangoContext.
	//
	// The function returns the following values:
	//
	//    - guint: current serial number of fontmap.
	//
	Serial func() uint
	// ListFamilies: list all families for a fontmap.
	//
	// The function returns the following values:
	//
	//    - families: location to store a pointer to an array of PangoFontFamily
	//      *. This array should be freed with g_free().
	//
	ListFamilies func() []FontFamilier
	// LoadFont: load the font in the fontmap that is the closest match for
	// desc.
	//
	// The function takes the following parameters:
	//
	//    - context: PangoContext the font will be used with.
	//    - desc: PangoFontDescription describing the font to load.
	//
	// The function returns the following values:
	//
	//    - font (optional): newly allocated PangoFont loaded, or NULL if no font
	//      matched.
	//
	LoadFont func(context *Context, desc *FontDescription) Fonter
	// LoadFontset: load a set of fonts in the fontmap that can be used to
	// render a font matching desc.
	//
	// The function takes the following parameters:
	//
	//    - context: PangoContext the font will be used with.
	//    - desc: PangoFontDescription describing the font to load.
	//    - language: PangoLanguage the fonts will be used for.
	//
	// The function returns the following values:
	//
	//    - fontset (optional): newly allocated PangoFontset loaded, or NULL if
	//      no font matched.
	//
	LoadFontset func(context *Context, desc *FontDescription, language *Language) Fontsetter
}

func defaultFontMapOverrides(v *FontMap) FontMapOverrides {
	return FontMapOverrides{
		Changed:      v.changed,
		Family:       v.family,
		Serial:       v.serial,
		ListFamilies: v.listFamilies,
		LoadFont:     v.loadFont,
		LoadFontset:  v.loadFontset,
	}
}

// FontMap: PangoFontMap represents the set of fonts available for a particular
// rendering system.
//
// This is a virtual object with implementations being specific to particular
// rendering systems.
type FontMap struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FontMap)(nil)
)

// FontMapper describes types inherited from class FontMap.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type FontMapper interface {
	coreglib.Objector
	baseFontMap() *FontMap
}

var _ FontMapper = (*FontMap)(nil)

func init() {
	coreglib.RegisterClassInfo[*FontMap, *FontMapClass, FontMapOverrides](
		GTypeFontMap,
		initFontMapClass,
		wrapFontMap,
		defaultFontMapOverrides,
	)
}

func initFontMapClass(gclass unsafe.Pointer, overrides FontMapOverrides, classInitFunc func(*FontMapClass)) {
	pclass := (*C.PangoFontMapClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeFontMap))))

	if overrides.Changed != nil {
		pclass.changed = (*[0]byte)(C._gotk4_pango1_FontMapClass_changed)
	}

	if overrides.Family != nil {
		pclass.get_family = (*[0]byte)(C._gotk4_pango1_FontMapClass_get_family)
	}

	if overrides.Serial != nil {
		pclass.get_serial = (*[0]byte)(C._gotk4_pango1_FontMapClass_get_serial)
	}

	if overrides.ListFamilies != nil {
		pclass.list_families = (*[0]byte)(C._gotk4_pango1_FontMapClass_list_families)
	}

	if overrides.LoadFont != nil {
		pclass.load_font = (*[0]byte)(C._gotk4_pango1_FontMapClass_load_font)
	}

	if overrides.LoadFontset != nil {
		pclass.load_fontset = (*[0]byte)(C._gotk4_pango1_FontMapClass_load_fontset)
	}

	if classInitFunc != nil {
		class := (*FontMapClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontMap(obj *coreglib.Object) *FontMap {
	return &FontMap{
		Object: obj,
	}
}

func marshalFontMap(p uintptr) (interface{}, error) {
	return wrapFontMap(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (fontmap *FontMap) baseFontMap() *FontMap {
	return fontmap
}

// BaseFontMap returns the underlying base object.
func BaseFontMap(obj FontMapper) *FontMap {
	return obj.baseFontMap()
}

// ListFamilies: list all families for a fontmap.
//
// The function returns the following values:
//
//    - families: location to store a pointer to an array of PangoFontFamily *.
//      This array should be freed with g_free().
//
func (fontmap *FontMap) ListFamilies() []FontFamilier {
	var _arg0 *C.PangoFontMap     // out
	var _arg1 **C.PangoFontFamily // in
	var _arg2 C.int               // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))

	C.pango_font_map_list_families(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(fontmap)

	var _families []FontFamilier // out

	defer C.free(unsafe.Pointer(_arg1))
	{
		src := unsafe.Slice((**C.PangoFontFamily)(_arg1), _arg2)
		_families = make([]FontFamilier, _arg2)
		for i := 0; i < int(_arg2); i++ {
			{
				objptr := unsafe.Pointer(src[i])
				if objptr == nil {
					panic("object of type pango.FontFamilier is nil")
				}

				object := coreglib.Take(objptr)
				casted := object.WalkCast(func(obj coreglib.Objector) bool {
					_, ok := obj.(FontFamilier)
					return ok
				})
				rv, ok := casted.(FontFamilier)
				if !ok {
					panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
				}
				_families[i] = rv
			}
		}
	}

	return _families
}

// LoadFont: load the font in the fontmap that is the closest match for desc.
//
// The function takes the following parameters:
//
//    - context: PangoContext the font will be used with.
//    - desc: PangoFontDescription describing the font to load.
//
// The function returns the following values:
//
//    - font (optional): newly allocated PangoFont loaded, or NULL if no font
//      matched.
//
func (fontmap *FontMap) LoadFont(context *Context, desc *FontDescription) Fonter {
	var _arg0 *C.PangoFontMap         // out
	var _arg1 *C.PangoContext         // out
	var _arg2 *C.PangoFontDescription // out
	var _cret *C.PangoFont            // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(desc)))

	_cret = C.pango_font_map_load_font(_arg0, _arg1, _arg2)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)

	var _font Fonter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fonter)
				return ok
			})
			rv, ok := casted.(Fonter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fonter")
			}
			_font = rv
		}
	}

	return _font
}

// LoadFontset: load a set of fonts in the fontmap that can be used to render a
// font matching desc.
//
// The function takes the following parameters:
//
//    - context: PangoContext the font will be used with.
//    - desc: PangoFontDescription describing the font to load.
//    - language: PangoLanguage the fonts will be used for.
//
// The function returns the following values:
//
//    - fontset (optional): newly allocated PangoFontset loaded, or NULL if no
//      font matched.
//
func (fontmap *FontMap) LoadFontset(context *Context, desc *FontDescription, language *Language) Fontsetter {
	var _arg0 *C.PangoFontMap         // out
	var _arg1 *C.PangoContext         // out
	var _arg2 *C.PangoFontDescription // out
	var _arg3 *C.PangoLanguage        // out
	var _cret *C.PangoFontset         // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(desc)))
	_arg3 = (*C.PangoLanguage)(gextras.StructNative(unsafe.Pointer(language)))

	_cret = C.pango_font_map_load_fontset(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)
	runtime.KeepAlive(language)

	var _fontset Fontsetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fontsetter)
				return ok
			})
			rv, ok := casted.(Fontsetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fontsetter")
			}
			_fontset = rv
		}
	}

	return _fontset
}

// listFamilies: list all families for a fontmap.
//
// The function returns the following values:
//
//    - families: location to store a pointer to an array of PangoFontFamily *.
//      This array should be freed with g_free().
//
func (fontmap *FontMap) listFamilies() []FontFamilier {
	gclass := (*C.PangoFontMapClass)(coreglib.PeekParentClass(fontmap))
	fnarg := gclass.list_families

	var _arg0 *C.PangoFontMap     // out
	var _arg1 **C.PangoFontFamily // in
	var _arg2 C.int               // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))

	C._gotk4_pango1_FontMap_virtual_list_families(unsafe.Pointer(fnarg), _arg0, &_arg1, &_arg2)
	runtime.KeepAlive(fontmap)

	var _families []FontFamilier // out

	defer C.free(unsafe.Pointer(_arg1))
	{
		src := unsafe.Slice((**C.PangoFontFamily)(_arg1), _arg2)
		_families = make([]FontFamilier, _arg2)
		for i := 0; i < int(_arg2); i++ {
			{
				objptr := unsafe.Pointer(src[i])
				if objptr == nil {
					panic("object of type pango.FontFamilier is nil")
				}

				object := coreglib.Take(objptr)
				casted := object.WalkCast(func(obj coreglib.Objector) bool {
					_, ok := obj.(FontFamilier)
					return ok
				})
				rv, ok := casted.(FontFamilier)
				if !ok {
					panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.FontFamilier")
				}
				_families[i] = rv
			}
		}
	}

	return _families
}

// loadFont: load the font in the fontmap that is the closest match for desc.
//
// The function takes the following parameters:
//
//    - context: PangoContext the font will be used with.
//    - desc: PangoFontDescription describing the font to load.
//
// The function returns the following values:
//
//    - font (optional): newly allocated PangoFont loaded, or NULL if no font
//      matched.
//
func (fontmap *FontMap) loadFont(context *Context, desc *FontDescription) Fonter {
	gclass := (*C.PangoFontMapClass)(coreglib.PeekParentClass(fontmap))
	fnarg := gclass.load_font

	var _arg0 *C.PangoFontMap         // out
	var _arg1 *C.PangoContext         // out
	var _arg2 *C.PangoFontDescription // out
	var _cret *C.PangoFont            // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(desc)))

	_cret = C._gotk4_pango1_FontMap_virtual_load_font(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)

	var _font Fonter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fonter)
				return ok
			})
			rv, ok := casted.(Fonter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fonter")
			}
			_font = rv
		}
	}

	return _font
}

// loadFontset: load a set of fonts in the fontmap that can be used to render a
// font matching desc.
//
// The function takes the following parameters:
//
//    - context: PangoContext the font will be used with.
//    - desc: PangoFontDescription describing the font to load.
//    - language: PangoLanguage the fonts will be used for.
//
// The function returns the following values:
//
//    - fontset (optional): newly allocated PangoFontset loaded, or NULL if no
//      font matched.
//
func (fontmap *FontMap) loadFontset(context *Context, desc *FontDescription, language *Language) Fontsetter {
	gclass := (*C.PangoFontMapClass)(coreglib.PeekParentClass(fontmap))
	fnarg := gclass.load_fontset

	var _arg0 *C.PangoFontMap         // out
	var _arg1 *C.PangoContext         // out
	var _arg2 *C.PangoFontDescription // out
	var _arg3 *C.PangoLanguage        // out
	var _cret *C.PangoFontset         // in

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))
	_arg1 = (*C.PangoContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(desc)))
	_arg3 = (*C.PangoLanguage)(gextras.StructNative(unsafe.Pointer(language)))

	_cret = C._gotk4_pango1_FontMap_virtual_load_fontset(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(fontmap)
	runtime.KeepAlive(context)
	runtime.KeepAlive(desc)
	runtime.KeepAlive(language)

	var _fontset Fontsetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Fontsetter)
				return ok
			})
			rv, ok := casted.(Fontsetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fontsetter")
			}
			_fontset = rv
		}
	}

	return _fontset
}

// FontMapClass structure holds the virtual functions for a particular FontMap
// implementation.
//
// An instance of this type is always passed by reference.
type FontMapClass struct {
	*fontMapClass
}

// fontMapClass is the struct that's finalized.
type fontMapClass struct {
	native *C.PangoFontMapClass
}

// ShapeEngineType: type of rendering-system-dependent engines that can handle
// fonts of this fonts loaded with this fontmap.
func (f *FontMapClass) ShapeEngineType() string {
	valptr := &f.native.shape_engine_type
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}
