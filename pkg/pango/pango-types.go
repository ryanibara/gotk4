// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// struct Rectangle {
//     int x;
//     int y;
//     int width;
//     int height;
// };
import "C"

// SCALE: scale between dimensions used for Pango distances and device units.
//
// The definition of device units is dependent on the output device; it will
// typically be pixels for a screen, and points for a printer. PANGO_SCALE is
// currently 1024, but this may be changed in the future.
//
// When setting font sizes, device units are always considered to be points (as
// in "12 point font"), rather than pixels.
const SCALE = 1024

// Glyph: PangoGlyph represents a single glyph in the output form of a string.
type Glyph = uint32

// ExtentsToPixels converts extents from Pango units to device units.
//
// The conversion is done by dividing by the PANGO_SCALE factor and performing
// rounding.
//
// The inclusive rectangle is converted by flooring the x/y coordinates and
// extending width/height, such that the final rectangle completely includes the
// original rectangle.
//
// The nearest rectangle is converted by rounding the coordinates of the
// rectangle to the nearest device unit (pixel).
//
// The rule to which argument to use is: if you want the resulting device-space
// rectangle to completely contain the original rectangle, pass it in as
// inclusive. If you want two touching-but-not-overlapping rectangles stay
// touching-but-not-overlapping after rounding to device units, pass them in as
// nearest.
//
// The function takes the following parameters:
//
//    - inclusive (optional): rectangle to round to pixels inclusively, or NULL.
//    - nearest (optional): rectangle to round to nearest pixels, or NULL.
//
func ExtentsToPixels(inclusive, nearest *Rectangle) {
	var _args [2]girepository.Argument

	if inclusive != nil {
		*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(inclusive)))
	}
	if nearest != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(nearest)))
	}

	girepository.MustFind("Pango", "extents_to_pixels").Invoke(_args[:], nil)

	runtime.KeepAlive(inclusive)
	runtime.KeepAlive(nearest)
}

// UnitsFromDouble converts a floating-point number to Pango units.
//
// The conversion is done by multiplying d by PANGO_SCALE and rounding the
// result to nearest integer.
//
// The function takes the following parameters:
//
//    - d: double floating-point value.
//
// The function returns the following values:
//
//    - gint: value in Pango units.
//
func UnitsFromDouble(d float64) int32 {
	var _args [1]girepository.Argument

	*(*C.double)(unsafe.Pointer(&_args[0])) = C.double(d)

	_gret := girepository.MustFind("Pango", "units_from_double").Invoke(_args[:], nil)
	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(d)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// UnitsToDouble converts a number in Pango units to floating-point.
//
// The conversion is done by dividing i by PANGO_SCALE.
//
// The function takes the following parameters:
//
//    - i: value in Pango units.
//
// The function returns the following values:
//
//    - gdouble: double value.
//
func UnitsToDouble(i int32) float64 {
	var _args [1]girepository.Argument

	*(*C.int)(unsafe.Pointer(&_args[0])) = C.int(i)

	_gret := girepository.MustFind("Pango", "units_to_double").Invoke(_args[:], nil)
	_cret = *(*C.double)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(i)

	var _gdouble float64 // out

	_gdouble = float64(*(*C.double)(unsafe.Pointer(&_cret)))

	return _gdouble
}

// Rectangle: PangoRectangle structure represents a rectangle.
//
// PangoRectangle is frequently used to represent the logical or ink extents of
// a single glyph or section of text. (See, for instance,
// pango.Font.GetGlyphExtents().)
//
// An instance of this type is always passed by reference.
type Rectangle struct {
	*rectangle
}

// rectangle is the struct that's finalized.
type rectangle struct {
	native unsafe.Pointer
}

// NewRectangle creates a new Rectangle instance from the given
// fields.
func NewRectangle(x, y, width, height int32) Rectangle {
	var f0 C.int // out
	f0 = C.int(x)
	var f1 C.int // out
	f1 = C.int(y)
	var f2 C.int // out
	f2 = C.int(width)
	var f3 C.int // out
	f3 = C.int(height)

	v := C.PangoRectangle{
		x:      f0,
		y:      f1,
		width:  f2,
		height: f3,
	}

	return *(*Rectangle)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) X() int32 {
	offset := girepository.MustFind("Pango", "Rectangle").StructFieldOffset("x")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.int)(unsafe.Pointer(&valptr)))
	return v
}

// Y coordinate of the the top side of the rectangle.
func (r *Rectangle) Y() int32 {
	offset := girepository.MustFind("Pango", "Rectangle").StructFieldOffset("y")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.int)(unsafe.Pointer(&valptr)))
	return v
}

// Width: width of the rectangle.
func (r *Rectangle) Width() int32 {
	offset := girepository.MustFind("Pango", "Rectangle").StructFieldOffset("width")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.int)(unsafe.Pointer(&valptr)))
	return v
}

// Height: height of the rectangle.
func (r *Rectangle) Height() int32 {
	offset := girepository.MustFind("Pango", "Rectangle").StructFieldOffset("height")
	valptr := unsafe.Add(unsafe.Pointer(r), offset)
	var v int32 // out
	v = int32(*(*C.int)(unsafe.Pointer(&valptr)))
	return v
}
