// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
// void _gotk4_pango1_FontMap_virtual_changed(void* fnptr, PangoFontMap* arg0) {
//   ((void (*)(PangoFontMap*))(fnptr))(arg0);
// };
import "C"

// Changed forces a change in the context, which will cause any PangoContext
// using this fontmap to change.
//
// This function is only useful when implementing a new backend for Pango,
// something applications won't do. Backends should call this function if they
// have attached extra data to the context and such data is changed.
func (fontmap *FontMap) Changed() {
	var _arg0 *C.PangoFontMap // out

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))

	C.pango_font_map_changed(_arg0)
	runtime.KeepAlive(fontmap)
}

// Changed forces a change in the context, which will cause any PangoContext
// using this fontmap to change.
//
// This function is only useful when implementing a new backend for Pango,
// something applications won't do. Backends should call this function if they
// have attached extra data to the context and such data is changed.
func (fontmap *FontMap) changed() {
	gclass := (*C.PangoFontMapClass)(coreglib.PeekParentClass(fontmap))
	fnarg := gclass.changed

	var _arg0 *C.PangoFontMap // out

	_arg0 = (*C.PangoFontMap)(unsafe.Pointer(coreglib.InternObject(fontmap).Native()))

	C._gotk4_pango1_FontMap_virtual_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(fontmap)
}
