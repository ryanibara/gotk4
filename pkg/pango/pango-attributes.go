// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"runtime"
	"runtime/cgo"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: pango
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <pango/pango.h>
// gboolean _gotk4_pango1_AttrFilterFunc(PangoAttribute*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.pango_attr_type_get_type()), F: marshalAttrType},
		{T: externglib.Type(C.pango_overline_get_type()), F: marshalOverline},
		{T: externglib.Type(C.pango_underline_get_type()), F: marshalUnderline},
		{T: externglib.Type(C.pango_show_flags_get_type()), F: marshalShowFlags},
		{T: externglib.Type(C.pango_attr_iterator_get_type()), F: marshalAttrIterator},
		{T: externglib.Type(C.pango_attr_list_get_type()), F: marshalAttrList},
		{T: externglib.Type(C.pango_attribute_get_type()), F: marshalAttribute},
		{T: externglib.Type(C.pango_color_get_type()), F: marshalColor},
	})
}

// ATTR_INDEX_FROM_TEXT_BEGINNING: value for start_index in PangoAttribute that
// indicates the beginning of the text.
const ATTR_INDEX_FROM_TEXT_BEGINNING = C.ATTR_INDEX_FROM_TEXT_BEGINNING

// ATTR_INDEX_TO_TEXT_END: value for end_index in PangoAttribute that indicates
// the end of the text.
const ATTR_INDEX_TO_TEXT_END = C.ATTR_INDEX_TO_TEXT_END

// AttrType: PangoAttrType distinguishes between different types of attributes.
//
// Along with the predefined values, it is possible to allocate additional
// values for custom attributes using attr_type_register. The predefined values
// are given below. The type of structure used to store the attribute is listed
// in parentheses after the description.
type AttrType C.gint

const (
	// AttrTypeInvalid does not happen.
	AttrTypeInvalid AttrType = iota
	// AttrTypeLanguage: language (pango.AttrLanguage).
	AttrTypeLanguage
	// AttrTypeFamily: font family name list (pango.AttrString).
	AttrTypeFamily
	// AttrTypeStyle: font slant style (pango.AttrInt).
	AttrTypeStyle
	// AttrTypeWeight: font weight (pango.AttrInt).
	AttrTypeWeight
	// AttrTypeVariant: font variant (normal or small caps) (pango.AttrInt).
	AttrTypeVariant
	// AttrTypeStretch: font stretch (pango.AttrInt).
	AttrTypeStretch
	// AttrTypeSize: font size in points scaled by PANGO_SCALE (pango.AttrInt).
	AttrTypeSize
	// AttrTypeFontDesc: font description (pango.AttrFontDesc).
	AttrTypeFontDesc
	// AttrTypeForeground: foreground color (pango.AttrColor).
	AttrTypeForeground
	// AttrTypeBackground: background color (pango.AttrColor).
	AttrTypeBackground
	// AttrTypeUnderline: whether the text has an underline (pango.AttrInt).
	AttrTypeUnderline
	// AttrTypeStrikethrough: whether the text is struck-through
	// (pango.AttrInt).
	AttrTypeStrikethrough
	// AttrTypeRise: baseline displacement (pango.AttrInt).
	AttrTypeRise
	// AttrTypeShape: shape (pango.AttrShape).
	AttrTypeShape
	// AttrTypeScale: font size scale factor (pango.AttrFloat).
	AttrTypeScale
	// AttrTypeFallback: whether fallback is enabled (pango.AttrInt).
	AttrTypeFallback
	// AttrTypeLetterSpacing: letter spacing (pangoattrint).
	AttrTypeLetterSpacing
	// AttrTypeUnderlineColor: underline color (pango.AttrColor).
	AttrTypeUnderlineColor
	// AttrTypeStrikethroughColor: strikethrough color (pango.AttrColor).
	AttrTypeStrikethroughColor
	// AttrTypeAbsoluteSize: font size in pixels scaled by PANGO_SCALE
	// (pango.AttrInt).
	AttrTypeAbsoluteSize
	// AttrTypeGravity: base text gravity (pango.AttrInt).
	AttrTypeGravity
	// AttrTypeGravityHint: gravity hint (pango.AttrInt).
	AttrTypeGravityHint
	// AttrTypeFontFeatures: openType font features (pango.AttrString). Since
	// 1.38.
	AttrTypeFontFeatures
	// AttrTypeForegroundAlpha: foreground alpha (pango.AttrInt). Since 1.38.
	AttrTypeForegroundAlpha
	// AttrTypeBackgroundAlpha: background alpha (pango.AttrInt). Since 1.38.
	AttrTypeBackgroundAlpha
	// AttrTypeAllowBreaks: whether breaks are allowed (pango.AttrInt). Since
	// 1.44.
	AttrTypeAllowBreaks
	// AttrTypeShow: how to render invisible characters (pango.AttrInt). Since
	// 1.44.
	AttrTypeShow
	// AttrTypeInsertHyphens: whether to insert hyphens at intra-word line
	// breaks (pango.AttrInt). Since 1.44.
	AttrTypeInsertHyphens
	// AttrTypeOverline: whether the text has an overline (pango.AttrInt). Since
	// 1.46.
	AttrTypeOverline
	// AttrTypeOverlineColor: overline color (pango.AttrColor). Since 1.46.
	AttrTypeOverlineColor
)

func marshalAttrType(p uintptr) (interface{}, error) {
	return AttrType(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AttrType.
func (a AttrType) String() string {
	switch a {
	case AttrTypeInvalid:
		return "Invalid"
	case AttrTypeLanguage:
		return "Language"
	case AttrTypeFamily:
		return "Family"
	case AttrTypeStyle:
		return "Style"
	case AttrTypeWeight:
		return "Weight"
	case AttrTypeVariant:
		return "Variant"
	case AttrTypeStretch:
		return "Stretch"
	case AttrTypeSize:
		return "Size"
	case AttrTypeFontDesc:
		return "FontDesc"
	case AttrTypeForeground:
		return "Foreground"
	case AttrTypeBackground:
		return "Background"
	case AttrTypeUnderline:
		return "Underline"
	case AttrTypeStrikethrough:
		return "Strikethrough"
	case AttrTypeRise:
		return "Rise"
	case AttrTypeShape:
		return "Shape"
	case AttrTypeScale:
		return "Scale"
	case AttrTypeFallback:
		return "Fallback"
	case AttrTypeLetterSpacing:
		return "LetterSpacing"
	case AttrTypeUnderlineColor:
		return "UnderlineColor"
	case AttrTypeStrikethroughColor:
		return "StrikethroughColor"
	case AttrTypeAbsoluteSize:
		return "AbsoluteSize"
	case AttrTypeGravity:
		return "Gravity"
	case AttrTypeGravityHint:
		return "GravityHint"
	case AttrTypeFontFeatures:
		return "FontFeatures"
	case AttrTypeForegroundAlpha:
		return "ForegroundAlpha"
	case AttrTypeBackgroundAlpha:
		return "BackgroundAlpha"
	case AttrTypeAllowBreaks:
		return "AllowBreaks"
	case AttrTypeShow:
		return "Show"
	case AttrTypeInsertHyphens:
		return "InsertHyphens"
	case AttrTypeOverline:
		return "Overline"
	case AttrTypeOverlineColor:
		return "OverlineColor"
	default:
		return fmt.Sprintf("AttrType(%d)", a)
	}
}

// AttrTypeGetName fetches the attribute type name.
//
// The attribute type name is the string passed in when registering the type
// using attr_type_register.
//
// The returned value is an interned string (see g_intern_string() for what that
// means) that should not be modified or freed.
//
// The function takes the following parameters:
//
//    - typ: attribute type ID to fetch the name for.
//
func AttrTypeGetName(typ AttrType) string {
	var _arg1 C.PangoAttrType // out
	var _cret *C.char         // in

	_arg1 = C.PangoAttrType(typ)

	_cret = C.pango_attr_type_get_name(_arg1)
	runtime.KeepAlive(typ)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// AttrTypeRegister: allocate a new attribute type ID.
//
// The attribute type name can be accessed later by using
// pango.AttrType.GetName.
//
// The function takes the following parameters:
//
//    - name: identifier for the type.
//
func AttrTypeRegister(name string) AttrType {
	var _arg1 *C.gchar        // out
	var _cret C.PangoAttrType // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_attr_type_register(_arg1)
	runtime.KeepAlive(name)

	var _attrType AttrType // out

	_attrType = AttrType(_cret)

	return _attrType
}

// Overline: PangoOverline enumeration is used to specify whether text should be
// overlined, and if so, the type of line.
type Overline C.gint

const (
	// OverlineNone: no overline should be drawn.
	OverlineNone Overline = iota
	// OverlineSingle: draw a single line above the ink extents of the text
	// being underlined.
	OverlineSingle
)

func marshalOverline(p uintptr) (interface{}, error) {
	return Overline(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Overline.
func (o Overline) String() string {
	switch o {
	case OverlineNone:
		return "None"
	case OverlineSingle:
		return "Single"
	default:
		return fmt.Sprintf("Overline(%d)", o)
	}
}

// Underline: PangoUnderline enumeration is used to specify whether text should
// be underlined, and if so, the type of underlining.
type Underline C.gint

const (
	// UnderlineNone: no underline should be drawn.
	UnderlineNone Underline = iota
	// UnderlineSingle: single underline should be drawn.
	UnderlineSingle
	// UnderlineDouble: double underline should be drawn.
	UnderlineDouble
	// UnderlineLow: single underline should be drawn at a position beneath the
	// ink extents of the text being underlined. This should be used only for
	// underlining single characters, such as for keyboard accelerators.
	// PANGO_UNDERLINE_SINGLE should be used for extended portions of text.
	UnderlineLow
	// UnderlineError: wavy underline should be drawn below. This underline is
	// typically used to indicate an error such as a possible mispelling; in
	// some cases a contrasting color may automatically be used. This type of
	// underlining is available since Pango 1.4.
	UnderlineError
	// UnderlineSingleLine: like PANGO_UNDERLINE_SINGLE, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineSingleLine
	// UnderlineDoubleLine: like PANGO_UNDERLINE_DOUBLE, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineDoubleLine
	// UnderlineErrorLine: like PANGO_UNDERLINE_ERROR, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineErrorLine
)

func marshalUnderline(p uintptr) (interface{}, error) {
	return Underline(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Underline.
func (u Underline) String() string {
	switch u {
	case UnderlineNone:
		return "None"
	case UnderlineSingle:
		return "Single"
	case UnderlineDouble:
		return "Double"
	case UnderlineLow:
		return "Low"
	case UnderlineError:
		return "Error"
	case UnderlineSingleLine:
		return "SingleLine"
	case UnderlineDoubleLine:
		return "DoubleLine"
	case UnderlineErrorLine:
		return "ErrorLine"
	default:
		return fmt.Sprintf("Underline(%d)", u)
	}
}

// ShowFlags: these flags affect how Pango treats characters that are normally
// not visible in the output.
type ShowFlags C.guint

const (
	// ShowNone: no special treatment for invisible characters.
	ShowNone ShowFlags = 0b0
	// ShowSpaces: render spaces, tabs and newlines visibly.
	ShowSpaces ShowFlags = 0b1
	// ShowLineBreaks: render line breaks visibly.
	ShowLineBreaks ShowFlags = 0b10
	// ShowIgnorables: render default-ignorable Unicode characters visibly.
	ShowIgnorables ShowFlags = 0b100
)

func marshalShowFlags(p uintptr) (interface{}, error) {
	return ShowFlags(externglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for ShowFlags.
func (s ShowFlags) String() string {
	if s == 0 {
		return "ShowFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(49)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case ShowNone:
			builder.WriteString("None|")
		case ShowSpaces:
			builder.WriteString("Spaces|")
		case ShowLineBreaks:
			builder.WriteString("LineBreaks|")
		case ShowIgnorables:
			builder.WriteString("Ignorables|")
		default:
			builder.WriteString(fmt.Sprintf("ShowFlags(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s ShowFlags) Has(other ShowFlags) bool {
	return (s & other) == other
}

// AttrDataCopyFunc: type of a function that can duplicate user data for an
// attribute.
type AttrDataCopyFunc func() (gpointer cgo.Handle)

//export _gotk4_pango1_AttrDataCopyFunc
func _gotk4_pango1_AttrDataCopyFunc(arg0 C.gconstpointer) (cret C.gpointer) {
	v := gbox.Get(uintptr(arg0))
	if v == nil {
		panic(`callback not found`)
	}

	fn := v.(AttrDataCopyFunc)
	gpointer := fn()

	cret = (C.gpointer)(unsafe.Pointer(gpointer))

	return cret
}

// AttrFilterFunc: type of a function filtering a list of attributes.
type AttrFilterFunc func(attribute *Attribute) (ok bool)

//export _gotk4_pango1_AttrFilterFunc
func _gotk4_pango1_AttrFilterFunc(arg0 *C.PangoAttribute, arg1 C.gpointer) (cret C.gboolean) {
	v := gbox.Get(uintptr(arg1))
	if v == nil {
		panic(`callback not found`)
	}

	var attribute *Attribute // out

	attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(arg0)))

	fn := v.(AttrFilterFunc)
	ok := fn(attribute)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// NewAttrAllowBreaks: create a new allow-breaks attribute.
//
// If breaks are disabled, the range will be kept in a single run, as far as
// possible.
//
// The function takes the following parameters:
//
//    - allowBreaks: TRUE if we line breaks are allowed.
//
func NewAttrAllowBreaks(allowBreaks bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if allowBreaks {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_allow_breaks_new(_arg1)
	runtime.KeepAlive(allowBreaks)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrBackgroundAlpha: create a new background alpha attribute.
//
// The function takes the following parameters:
//
//    - alpha value, between 1 and 65536.
//
func NewAttrBackgroundAlpha(alpha uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(alpha)

	_cret = C.pango_attr_background_alpha_new(_arg1)
	runtime.KeepAlive(alpha)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrBackground: create a new background color attribute.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
func NewAttrBackground(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_background_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrFallback: create a new font fallback attribute.
//
// If fallback is disabled, characters will only be used from the closest
// matching font on the system. No fallback will be done to other fonts on the
// system that might contain the characters in the text.
//
// The function takes the following parameters:
//
//    - enableFallback: TRUE if we should fall back on other fonts for
//    characters the active font is missing.
//
func NewAttrFallback(enableFallback bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if enableFallback {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_fallback_new(_arg1)
	runtime.KeepAlive(enableFallback)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrFamily: create a new font family attribute.
//
// The function takes the following parameters:
//
//    - family or comma separated list of families.
//
func NewAttrFamily(family string) *Attribute {
	var _arg1 *C.char           // out
	var _cret *C.PangoAttribute // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(family)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_attr_family_new(_arg1)
	runtime.KeepAlive(family)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrForegroundAlpha: create a new foreground alpha attribute.
//
// The function takes the following parameters:
//
//    - alpha value, between 1 and 65536.
//
func NewAttrForegroundAlpha(alpha uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(alpha)

	_cret = C.pango_attr_foreground_alpha_new(_arg1)
	runtime.KeepAlive(alpha)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrForeground: create a new foreground color attribute.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
func NewAttrForeground(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_foreground_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrGravityHint: create a new gravity hint attribute.
//
// The function takes the following parameters:
//
//    - hint: gravity hint value.
//
func NewAttrGravityHint(hint GravityHint) *Attribute {
	var _arg1 C.PangoGravityHint // out
	var _cret *C.PangoAttribute  // in

	_arg1 = C.PangoGravityHint(hint)

	_cret = C.pango_attr_gravity_hint_new(_arg1)
	runtime.KeepAlive(hint)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrGravity: create a new gravity attribute.
//
// The function takes the following parameters:
//
//    - gravity value; should not be PANGO_GRAVITY_AUTO.
//
func NewAttrGravity(gravity Gravity) *Attribute {
	var _arg1 C.PangoGravity    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoGravity(gravity)

	_cret = C.pango_attr_gravity_new(_arg1)
	runtime.KeepAlive(gravity)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrInsertHyphens: create a new insert-hyphens attribute.
//
// Pango will insert hyphens when breaking lines in the middle of a word. This
// attribute can be used to suppress the hyphen.
//
// The function takes the following parameters:
//
//    - insertHyphens: TRUE if hyphens should be inserted.
//
func NewAttrInsertHyphens(insertHyphens bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if insertHyphens {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_insert_hyphens_new(_arg1)
	runtime.KeepAlive(insertHyphens)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrLetterSpacing: create a new letter-spacing attribute.
//
// The function takes the following parameters:
//
//    - letterSpacing: amount of extra space to add between graphemes of the
//    text, in Pango units.
//
func NewAttrLetterSpacing(letterSpacing int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(letterSpacing)

	_cret = C.pango_attr_letter_spacing_new(_arg1)
	runtime.KeepAlive(letterSpacing)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrOverlineColor: create a new overline color attribute.
//
// This attribute modifies the color of overlines. If not set, overlines will
// use the foreground color.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
func NewAttrOverlineColor(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_overline_color_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrOverline: create a new overline-style attribute.
//
// The function takes the following parameters:
//
//    - overline style.
//
func NewAttrOverline(overline Overline) *Attribute {
	var _arg1 C.PangoOverline   // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoOverline(overline)

	_cret = C.pango_attr_overline_new(_arg1)
	runtime.KeepAlive(overline)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrRise: create a new baseline displacement attribute.
//
// The function takes the following parameters:
//
//    - rise: amount that the text should be displaced vertically, in Pango
//    units. Positive values displace the text upwards.
//
func NewAttrRise(rise int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(rise)

	_cret = C.pango_attr_rise_new(_arg1)
	runtime.KeepAlive(rise)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrScale: create a new font size scale attribute.
//
// The base font for the affected text will have its size multiplied by
// scale_factor.
//
// The function takes the following parameters:
//
//    - scaleFactor: factor to scale the font.
//
func NewAttrScale(scaleFactor float64) *Attribute {
	var _arg1 C.double          // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.double(scaleFactor)

	_cret = C.pango_attr_scale_new(_arg1)
	runtime.KeepAlive(scaleFactor)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrShow: create a new attribute that influences how invisible characters
// are rendered.
//
// The function takes the following parameters:
//
//    - flags: PangoShowFlags to apply.
//
func NewAttrShow(flags ShowFlags) *Attribute {
	var _arg1 C.PangoShowFlags  // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoShowFlags(flags)

	_cret = C.pango_attr_show_new(_arg1)
	runtime.KeepAlive(flags)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrStretch: create a new font stretch attribute.
//
// The function takes the following parameters:
//
//    - stretch: stretch.
//
func NewAttrStretch(stretch Stretch) *Attribute {
	var _arg1 C.PangoStretch    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoStretch(stretch)

	_cret = C.pango_attr_stretch_new(_arg1)
	runtime.KeepAlive(stretch)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrStrikethroughColor: create a new strikethrough color attribute.
//
// This attribute modifies the color of strikethrough lines. If not set,
// strikethrough lines will use the foreground color.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
func NewAttrStrikethroughColor(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_strikethrough_color_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrStrikethrough: create a new strike-through attribute.
//
// The function takes the following parameters:
//
//    - strikethrough: TRUE if the text should be struck-through.
//
func NewAttrStrikethrough(strikethrough bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if strikethrough {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_strikethrough_new(_arg1)
	runtime.KeepAlive(strikethrough)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrStyle: create a new font slant style attribute.
//
// The function takes the following parameters:
//
//    - style: slant style.
//
func NewAttrStyle(style Style) *Attribute {
	var _arg1 C.PangoStyle      // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoStyle(style)

	_cret = C.pango_attr_style_new(_arg1)
	runtime.KeepAlive(style)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrUnderlineColor: create a new underline color attribute.
//
// This attribute modifies the color of underlines. If not set, underlines will
// use the foreground color.
//
// The function takes the following parameters:
//
//    - red value (ranging from 0 to 65535).
//    - green value.
//    - blue value.
//
func NewAttrUnderlineColor(red, green, blue uint16) *Attribute {
	var _arg1 C.guint16         // out
	var _arg2 C.guint16         // out
	var _arg3 C.guint16         // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.guint16(red)
	_arg2 = C.guint16(green)
	_arg3 = C.guint16(blue)

	_cret = C.pango_attr_underline_color_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrUnderline: create a new underline-style attribute.
//
// The function takes the following parameters:
//
//    - underline style.
//
func NewAttrUnderline(underline Underline) *Attribute {
	var _arg1 C.PangoUnderline  // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoUnderline(underline)

	_cret = C.pango_attr_underline_new(_arg1)
	runtime.KeepAlive(underline)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrVariant: create a new font variant attribute (normal or small caps).
//
// The function takes the following parameters:
//
//    - variant: variant.
//
func NewAttrVariant(variant Variant) *Attribute {
	var _arg1 C.PangoVariant    // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoVariant(variant)

	_cret = C.pango_attr_variant_new(_arg1)
	runtime.KeepAlive(variant)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrWeight: create a new font weight attribute.
//
// The function takes the following parameters:
//
//    - weight: weight.
//
func NewAttrWeight(weight Weight) *Attribute {
	var _arg1 C.PangoWeight     // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoWeight(weight)

	_cret = C.pango_attr_weight_new(_arg1)
	runtime.KeepAlive(weight)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewMarkupParser: incrementally parses marked-up text to create a plain-text
// string and an attribute list.
//
// See the Pango Markup (pango_markup.html) docs for details about the supported
// markup.
//
// If accel_marker is nonzero, the given character will mark the character
// following it as an accelerator. For example, accel_marker might be an
// ampersand or underscore. All characters marked as an accelerator will receive
// a PANGO_UNDERLINE_LOW attribute, and the first character so marked will be
// returned in accel_char, when calling markup_parser_finish. Two accel_marker
// characters following each other produce a single literal accel_marker
// character.
//
// To feed markup to the parser, use g_markup_parse_context_parse() on the
// returned GMarkupParseContext. When done with feeding markup to the parser,
// use markup_parser_finish to get the data out of it, and then use
// g_markup_parse_context_free() to free it.
//
// This function is designed for applications that read Pango markup from
// streams. To simply parse a string containing Pango markup, the parse_markup
// API is recommended instead.
//
// The function takes the following parameters:
//
//    - accelMarker: character that precedes an accelerator, or 0 for none.
//
func NewMarkupParser(accelMarker uint32) *glib.MarkupParseContext {
	var _arg1 C.gunichar             // out
	var _cret *C.GMarkupParseContext // in

	_arg1 = C.gunichar(accelMarker)

	_cret = C.pango_markup_parser_new(_arg1)
	runtime.KeepAlive(accelMarker)

	var _markupParseContext *glib.MarkupParseContext // out

	_markupParseContext = (*glib.MarkupParseContext)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_markup_parse_context_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_markupParseContext)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_markup_parse_context_unref((*C.GMarkupParseContext)(intern.C))
		},
	)

	return _markupParseContext
}

// AttrColor: PangoAttrColor structure is used to represent attributes that are
// colors.
//
// An instance of this type is always passed by reference.
type AttrColor struct {
	*attrColor
}

// attrColor is the struct that's finalized.
type attrColor struct {
	native *C.PangoAttrColor
}

// Attr: common portion of the attribute.
func (a *AttrColor) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Color: PangoColor which is the value of the attribute.
func (a *AttrColor) Color() *Color {
	var v *Color // out
	v = (*Color)(gextras.NewStructNative(unsafe.Pointer((&a.native.color))))
	return v
}

// AttrFloat: PangoAttrFloat structure is used to represent attributes with a
// float or double value.
//
// An instance of this type is always passed by reference.
type AttrFloat struct {
	*attrFloat
}

// attrFloat is the struct that's finalized.
type attrFloat struct {
	native *C.PangoAttrFloat
}

// Attr: common portion of the attribute.
func (a *AttrFloat) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Value: value of the attribute.
func (a *AttrFloat) Value() float64 {
	var v float64 // out
	v = float64(a.native.value)
	return v
}

// AttrFontDesc: PangoAttrFontDesc structure is used to store an attribute that
// sets all aspects of the font description at once.
//
// An instance of this type is always passed by reference.
type AttrFontDesc struct {
	*attrFontDesc
}

// attrFontDesc is the struct that's finalized.
type attrFontDesc struct {
	native *C.PangoAttrFontDesc
}

// Attr: common portion of the attribute.
func (a *AttrFontDesc) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Desc: font description which is the value of this attribute.
func (a *AttrFontDesc) Desc() *FontDescription {
	var v *FontDescription // out
	v = (*FontDescription)(gextras.NewStructNative(unsafe.Pointer(a.native.desc)))
	return v
}

// NewAttrFontDesc: create a new font description attribute.
//
// This attribute allows setting family, style, weight, variant, stretch, and
// size simultaneously.
//
// The function takes the following parameters:
//
//    - desc: font description.
//
func NewAttrFontDesc(desc *FontDescription) *Attribute {
	var _arg1 *C.PangoFontDescription // out
	var _cret *C.PangoAttribute       // in

	_arg1 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(desc)))

	_cret = C.pango_attr_font_desc_new(_arg1)
	runtime.KeepAlive(desc)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// AttrFontFeatures: PangoAttrFontFeatures structure is used to represent
// OpenType font features as an attribute.
//
// An instance of this type is always passed by reference.
type AttrFontFeatures struct {
	*attrFontFeatures
}

// attrFontFeatures is the struct that's finalized.
type attrFontFeatures struct {
	native *C.PangoAttrFontFeatures
}

// Attr: common portion of the attribute.
func (a *AttrFontFeatures) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Features: featues, as a string in CSS syntax.
func (a *AttrFontFeatures) Features() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(a.native.features)))
	return v
}

// NewAttrFontFeatures: create a new font features tag attribute.
//
// The function takes the following parameters:
//
//    - features: string with OpenType font features, in CSS syntax.
//
func NewAttrFontFeatures(features string) *Attribute {
	var _arg1 *C.gchar          // out
	var _cret *C.PangoAttribute // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(features)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_attr_font_features_new(_arg1)
	runtime.KeepAlive(features)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// AttrInt: PangoAttrInt structure is used to represent attributes with an
// integer or enumeration value.
//
// An instance of this type is always passed by reference.
type AttrInt struct {
	*attrInt
}

// attrInt is the struct that's finalized.
type attrInt struct {
	native *C.PangoAttrInt
}

// Attr: common portion of the attribute.
func (a *AttrInt) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Value: value of the attribute.
func (a *AttrInt) Value() int {
	var v int // out
	v = int(a.native.value)
	return v
}

// AttrIterator: PangoAttrIterator is used to iterate through a PangoAttrList.
//
// A new iterator is created with pango.AttrList.GetIterator(). Once the
// iterator is created, it can be advanced through the style changes in the text
// using pango.AttrIterator.Next(). At each style change, the range of the
// current style segment and the attributes currently in effect can be queried.
//
// An instance of this type is always passed by reference.
type AttrIterator struct {
	*attrIterator
}

// attrIterator is the struct that's finalized.
type attrIterator struct {
	native *C.PangoAttrIterator
}

func marshalAttrIterator(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AttrIterator{&attrIterator{(*C.PangoAttrIterator)(b)}}, nil
}

// Copy a PangoAttrIterator.
func (iterator *AttrIterator) Copy() *AttrIterator {
	var _arg0 *C.PangoAttrIterator // out
	var _cret *C.PangoAttrIterator // in

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))

	_cret = C.pango_attr_iterator_copy(_arg0)
	runtime.KeepAlive(iterator)

	var _attrIterator *AttrIterator // out

	_attrIterator = (*AttrIterator)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrIterator)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attr_iterator_destroy((*C.PangoAttrIterator)(intern.C))
		},
	)

	return _attrIterator
}

// Destroy a PangoAttrIterator and free all associated memory.
func (iterator *AttrIterator) Destroy() {
	var _arg0 *C.PangoAttrIterator // out

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))

	C.pango_attr_iterator_destroy(_arg0)
	runtime.KeepAlive(iterator)
}

// Get: find the current attribute of a particular type at the iterator
// location. When multiple attributes of the same type overlap, the attribute
// whose range starts closest to the current location is used.
func (iterator *AttrIterator) Get(typ AttrType) *Attribute {
	var _arg0 *C.PangoAttrIterator // out
	var _arg1 C.PangoAttrType      // out
	var _cret *C.PangoAttribute    // in

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))
	_arg1 = C.PangoAttrType(typ)

	_cret = C.pango_attr_iterator_get(_arg0, _arg1)
	runtime.KeepAlive(iterator)
	runtime.KeepAlive(typ)

	var _attribute *Attribute // out

	if _cret != nil {
		_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _attribute
}

// Attrs gets a list of all attributes at the current position of the iterator.
func (iterator *AttrIterator) Attrs() []*Attribute {
	var _arg0 *C.PangoAttrIterator // out
	var _cret *C.GSList            // in

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))

	_cret = C.pango_attr_iterator_get_attrs(_arg0)
	runtime.KeepAlive(iterator)

	var _sList []*Attribute // out

	_sList = make([]*Attribute, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.PangoAttribute)(v)
		var dst *Attribute // out
		dst = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(src)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(dst)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
			},
		)
		_sList = append(_sList, dst)
	})

	return _sList
}

// Next: advance the iterator until the next change of style.
func (iterator *AttrIterator) Next() bool {
	var _arg0 *C.PangoAttrIterator // out
	var _cret C.gboolean           // in

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))

	_cret = C.pango_attr_iterator_next(_arg0)
	runtime.KeepAlive(iterator)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Range: get the range of the current segment. Note that the stored return
// values are signed, not unsigned like the values in PangoAttribute. To deal
// with this API oversight, stored return values that wouldn't fit into a signed
// integer are clamped to G_MAXINT.
func (iterator *AttrIterator) Range() (start int, end int) {
	var _arg0 *C.PangoAttrIterator // out
	var _arg1 C.gint               // in
	var _arg2 C.gint               // in

	_arg0 = (*C.PangoAttrIterator)(gextras.StructNative(unsafe.Pointer(iterator)))

	C.pango_attr_iterator_range(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(iterator)

	var _start int // out
	var _end int   // out

	_start = int(_arg1)
	_end = int(_arg2)

	return _start, _end
}

// AttrLanguage: PangoAttrLanguage structure is used to represent attributes
// that are languages.
//
// An instance of this type is always passed by reference.
type AttrLanguage struct {
	*attrLanguage
}

// attrLanguage is the struct that's finalized.
type attrLanguage struct {
	native *C.PangoAttrLanguage
}

// Attr: common portion of the attribute.
func (a *AttrLanguage) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Value: PangoLanguage which is the value of the attribute.
func (a *AttrLanguage) Value() *Language {
	var v *Language // out
	v = (*Language)(gextras.NewStructNative(unsafe.Pointer(a.native.value)))
	return v
}

// NewAttrLanguage: create a new language tag attribute.
//
// The function takes the following parameters:
//
//    - language tag.
//
func NewAttrLanguage(language *Language) *Attribute {
	var _arg1 *C.PangoLanguage  // out
	var _cret *C.PangoAttribute // in

	_arg1 = (*C.PangoLanguage)(gextras.StructNative(unsafe.Pointer(language)))

	_cret = C.pango_attr_language_new(_arg1)
	runtime.KeepAlive(language)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// AttrList: PangoAttrList represents a list of attributes that apply to a
// section of text.
//
// The attributes in a PangoAttrList are, in general, allowed to overlap in an
// arbitrary fashion. However, if the attributes are manipulated only through
// pango.AttrList.Change(), the overlap between properties will meet stricter
// criteria.
//
// Since the PangoAttrList structure is stored as a linear list, it is not
// suitable for storing attributes for large amounts of text. In general, you
// should not use a single PangoAttrList for more than one paragraph of text.
//
// An instance of this type is always passed by reference.
type AttrList struct {
	*attrList
}

// attrList is the struct that's finalized.
type attrList struct {
	native *C.PangoAttrList
}

func marshalAttrList(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AttrList{&attrList{(*C.PangoAttrList)(b)}}, nil
}

// NewAttrList constructs a struct AttrList.
func NewAttrList() *AttrList {
	var _cret *C.PangoAttrList // in

	_cret = C.pango_attr_list_new()

	var _attrList *AttrList // out

	_attrList = (*AttrList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrList)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
		},
	)

	return _attrList
}

// Change: insert the given attribute into the PangoAttrList.
//
// It will replace any attributes of the same type on that segment and be merged
// with any adjoining attributes that are identical.
//
// This function is slower than pango.AttrList.Insert() for creating an
// attribute list in order (potentially much slower for large lists). However,
// pango.AttrList.Insert() is not suitable for continually changing a set of
// attributes since it never removes or combines existing attributes.
func (list *AttrList) Change(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(attr)), nil)

	C.pango_attr_list_change(_arg0, _arg1)
	runtime.KeepAlive(list)
	runtime.KeepAlive(attr)
}

// Copy list and return an identical new list.
func (list *AttrList) Copy() *AttrList {
	var _arg0 *C.PangoAttrList // out
	var _cret *C.PangoAttrList // in

	if list != nil {
		_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	}

	_cret = C.pango_attr_list_copy(_arg0)
	runtime.KeepAlive(list)

	var _attrList *AttrList // out

	if _cret != nil {
		_attrList = (*AttrList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_attrList)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
			},
		)
	}

	return _attrList
}

// Equal checks whether list and other_list contain the same attributes and
// whether those attributes apply to the same ranges. Beware that this will
// return wrong values if any list contains duplicates.
func (list *AttrList) Equal(otherList *AttrList) bool {
	var _arg0 *C.PangoAttrList // out
	var _arg1 *C.PangoAttrList // out
	var _cret C.gboolean       // in

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(otherList)))

	_cret = C.pango_attr_list_equal(_arg0, _arg1)
	runtime.KeepAlive(list)
	runtime.KeepAlive(otherList)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Filter: given a PangoAttrList and callback function, removes any elements of
// list for which func returns TRUE and inserts them into a new list.
func (list *AttrList) Filter(fn AttrFilterFunc) *AttrList {
	var _arg0 *C.PangoAttrList      // out
	var _arg1 C.PangoAttrFilterFunc // out
	var _arg2 C.gpointer
	var _cret *C.PangoAttrList // in

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*[0]byte)(C._gotk4_pango1_AttrFilterFunc)
	_arg2 = C.gpointer(gbox.Assign(fn))
	defer gbox.Delete(uintptr(_arg2))

	_cret = C.pango_attr_list_filter(_arg0, _arg1, _arg2)
	runtime.KeepAlive(list)
	runtime.KeepAlive(fn)

	var _attrList *AttrList // out

	if _cret != nil {
		_attrList = (*AttrList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_attrList)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attr_list_unref((*C.PangoAttrList)(intern.C))
			},
		)
	}

	return _attrList
}

// Attributes gets a list of all attributes in list.
func (list *AttrList) Attributes() []*Attribute {
	var _arg0 *C.PangoAttrList // out
	var _cret *C.GSList        // in

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))

	_cret = C.pango_attr_list_get_attributes(_arg0)
	runtime.KeepAlive(list)

	var _sList []*Attribute // out

	_sList = make([]*Attribute, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.PangoAttribute)(v)
		var dst *Attribute // out
		dst = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(src)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(dst)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
			},
		)
		_sList = append(_sList, dst)
	})

	return _sList
}

// Iterator: create a iterator initialized to the beginning of the list. list
// must not be modified until this iterator is freed.
func (list *AttrList) Iterator() *AttrIterator {
	var _arg0 *C.PangoAttrList     // out
	var _cret *C.PangoAttrIterator // in

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))

	_cret = C.pango_attr_list_get_iterator(_arg0)
	runtime.KeepAlive(list)

	var _attrIterator *AttrIterator // out

	_attrIterator = (*AttrIterator)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attrIterator)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attr_iterator_destroy((*C.PangoAttrIterator)(intern.C))
		},
	)

	return _attrIterator
}

// Insert the given attribute into the PangoAttrList.
//
// It will be inserted after all other attributes with a matching start_index.
func (list *AttrList) Insert(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(attr)), nil)

	C.pango_attr_list_insert(_arg0, _arg1)
	runtime.KeepAlive(list)
	runtime.KeepAlive(attr)
}

// InsertBefore: insert the given attribute into the PangoAttrList.
//
// It will be inserted before all other attributes with a matching start_index.
func (list *AttrList) InsertBefore(attr *Attribute) {
	var _arg0 *C.PangoAttrList  // out
	var _arg1 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(attr)), nil)

	C.pango_attr_list_insert_before(_arg0, _arg1)
	runtime.KeepAlive(list)
	runtime.KeepAlive(attr)
}

// Splice: this function opens up a hole in list, fills it in with attributes
// from the left, and then merges other on top of the hole.
//
// This operation is equivalent to stretching every attribute that applies at
// position pos in list by an amount len, and then calling
// pango.AttrList.Change() with a copy of each attribute in other in sequence
// (offset in position by pos).
//
// This operation proves useful for, for instance, inserting a pre-edit string
// in the middle of an edit buffer.
func (list *AttrList) Splice(other *AttrList, pos int, len int) {
	var _arg0 *C.PangoAttrList // out
	var _arg1 *C.PangoAttrList // out
	var _arg2 C.gint           // out
	var _arg3 C.gint           // out

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(other)))
	_arg2 = C.gint(pos)
	_arg3 = C.gint(len)

	C.pango_attr_list_splice(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(list)
	runtime.KeepAlive(other)
	runtime.KeepAlive(pos)
	runtime.KeepAlive(len)
}

// Update indices of attributes in list for a change in the text they refer to.
//
// The change that this function applies is removing remove bytes at position
// pos and inserting add bytes instead.
//
// Attributes that fall entirely in the (pos, pos + remove) range are removed.
//
// Attributes that start or end inside the (pos, pos + remove) range are
// shortened to reflect the removal.
//
// Attributes start and end positions are updated if they are behind pos +
// remove.
func (list *AttrList) Update(pos int, remove int, add int) {
	var _arg0 *C.PangoAttrList // out
	var _arg1 C.int            // out
	var _arg2 C.int            // out
	var _arg3 C.int            // out

	_arg0 = (*C.PangoAttrList)(gextras.StructNative(unsafe.Pointer(list)))
	_arg1 = C.int(pos)
	_arg2 = C.int(remove)
	_arg3 = C.int(add)

	C.pango_attr_list_update(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(list)
	runtime.KeepAlive(pos)
	runtime.KeepAlive(remove)
	runtime.KeepAlive(add)
}

// AttrShape: PangoAttrShape structure is used to represent attributes which
// impose shape restrictions.
//
// An instance of this type is always passed by reference.
type AttrShape struct {
	*attrShape
}

// attrShape is the struct that's finalized.
type attrShape struct {
	native *C.PangoAttrShape
}

// NewAttrShape: create a new shape attribute.
//
// A shape is used to impose a particular ink and logical rectangle on the
// result of shaping a particular glyph. This might be used, for instance, for
// embedding a picture or a widget inside a PangoLayout.
//
// The function takes the following parameters:
//
//    - inkRect: ink rectangle to assign to each character.
//    - logicalRect: logical rectangle to assign to each character.
//
func NewAttrShape(inkRect, logicalRect *Rectangle) *Attribute {
	var _arg1 *C.PangoRectangle // out
	var _arg2 *C.PangoRectangle // out
	var _cret *C.PangoAttribute // in

	_arg1 = (*C.PangoRectangle)(gextras.StructNative(unsafe.Pointer(inkRect)))
	_arg2 = (*C.PangoRectangle)(gextras.StructNative(unsafe.Pointer(logicalRect)))

	_cret = C.pango_attr_shape_new(_arg1, _arg2)
	runtime.KeepAlive(inkRect)
	runtime.KeepAlive(logicalRect)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// AttrSize: PangoAttrSize structure is used to represent attributes which set
// font size.
//
// An instance of this type is always passed by reference.
type AttrSize struct {
	*attrSize
}

// attrSize is the struct that's finalized.
type attrSize struct {
	native *C.PangoAttrSize
}

// Attr: common portion of the attribute.
func (a *AttrSize) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Size: size of font, in units of 1/PANGO_SCALE of a point (for
// PANGO_ATTR_SIZE) or of a device unit (for PANGO_ATTR_ABSOLUTE_SIZE).
func (a *AttrSize) Size() int {
	var v int // out
	v = int(a.native.size)
	return v
}

// NewAttrSize: create a new font-size attribute in fractional points.
//
// The function takes the following parameters:
//
//    - size: font size, in PANGO_SCALEths of a point.
//
func NewAttrSize(size int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(size)

	_cret = C.pango_attr_size_new(_arg1)
	runtime.KeepAlive(size)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrSizeAbsolute: create a new font-size attribute in device units.
//
// The function takes the following parameters:
//
//    - size: font size, in PANGO_SCALEths of a device unit.
//
func NewAttrSizeAbsolute(size int) *Attribute {
	var _arg1 C.int             // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.int(size)

	_cret = C.pango_attr_size_new_absolute(_arg1)
	runtime.KeepAlive(size)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// AttrString: PangoAttrString structure is used to represent attributes with a
// string value.
//
// An instance of this type is always passed by reference.
type AttrString struct {
	*attrString
}

// attrString is the struct that's finalized.
type attrString struct {
	native *C.PangoAttrString
}

// Attr: common portion of the attribute.
func (a *AttrString) Attr() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&a.native.attr))))
	return v
}

// Value: string which is the value of the attribute.
func (a *AttrString) Value() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(a.native.value)))
	return v
}

// Attribute: PangoAttribute structure represents the common portions of all
// attributes.
//
// Particular types of attributes include this structure as their initial
// portion. The common portion of the attribute holds the range to which the
// value in the type-specific part of the attribute applies and should be
// initialized using pango.Attribute.Init(). By default, an attribute will have
// an all-inclusive range of [0,G_MAXUINT].
//
// An instance of this type is always passed by reference.
type Attribute struct {
	*attribute
}

// attribute is the struct that's finalized.
type attribute struct {
	native *C.PangoAttribute
}

func marshalAttribute(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Attribute{&attribute{(*C.PangoAttribute)(b)}}, nil
}

// Copy: make a copy of an attribute.
func (attr *Attribute) Copy() *Attribute {
	var _arg0 *C.PangoAttribute // out
	var _cret *C.PangoAttribute // in

	_arg0 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.pango_attribute_copy(_arg0)
	runtime.KeepAlive(attr)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// Destroy a PangoAttribute and free all associated memory.
func (attr *Attribute) Destroy() {
	var _arg0 *C.PangoAttribute // out

	_arg0 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	C.pango_attribute_destroy(_arg0)
	runtime.KeepAlive(attr)
}

// Equal: compare two attributes for equality. This compares only the actual
// value of the two attributes and not the ranges that the attributes apply to.
func (attr1 *Attribute) Equal(attr2 *Attribute) bool {
	var _arg0 *C.PangoAttribute // out
	var _arg1 *C.PangoAttribute // out
	var _cret C.gboolean        // in

	_arg0 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr1)))
	_arg1 = (*C.PangoAttribute)(gextras.StructNative(unsafe.Pointer(attr2)))

	_cret = C.pango_attribute_equal(_arg0, _arg1)
	runtime.KeepAlive(attr1)
	runtime.KeepAlive(attr2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Color: PangoColor structure is used to represent a color in an uncalibrated
// RGB color-space.
//
// An instance of this type is always passed by reference.
type Color struct {
	*color
}

// color is the struct that's finalized.
type color struct {
	native *C.PangoColor
}

func marshalColor(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Color{&color{(*C.PangoColor)(b)}}, nil
}

// NewColor creates a new Color instance from the given
// fields.
func NewColor(red, green, blue uint16) Color {
	var f0 C.guint16 // out
	f0 = C.guint16(red)
	var f1 C.guint16 // out
	f1 = C.guint16(green)
	var f2 C.guint16 // out
	f2 = C.guint16(blue)

	v := C.PangoColor{
		red:   f0,
		green: f1,
		blue:  f2,
	}

	return *(*Color)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Red: value of red component.
func (c *Color) Red() uint16 {
	var v uint16 // out
	v = uint16(c.native.red)
	return v
}

// Green: value of green component.
func (c *Color) Green() uint16 {
	var v uint16 // out
	v = uint16(c.native.green)
	return v
}

// Blue: value of blue component.
func (c *Color) Blue() uint16 {
	var v uint16 // out
	v = uint16(c.native.blue)
	return v
}

// Copy creates a copy of src.
//
// The copy should be freed with pango_color_free(). Primarily used by language
// bindings, not that useful otherwise (since colors can just be copied by
// assignment in C).
func (src *Color) Copy() *Color {
	var _arg0 *C.PangoColor // out
	var _cret *C.PangoColor // in

	if src != nil {
		_arg0 = (*C.PangoColor)(gextras.StructNative(unsafe.Pointer(src)))
	}

	_cret = C.pango_color_copy(_arg0)
	runtime.KeepAlive(src)

	var _color *Color // out

	if _cret != nil {
		_color = (*Color)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_color)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.pango_color_free((*C.PangoColor)(intern.C))
			},
		)
	}

	return _color
}

// Parse: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a value in the form #rgb, #rrggbb, #rrrgggbbb or #rrrrggggbbbb,
// where r, g and b are hex digits of the red, green, and blue components of the
// color, respectively. (White in the four forms is #fff, #ffffff, #fffffffff
// and #ffffffffffff.).
func (color *Color) Parse(spec string) bool {
	var _arg0 *C.PangoColor // out
	var _arg1 *C.char       // out
	var _cret C.gboolean    // in

	if color != nil {
		_arg0 = (*C.PangoColor)(gextras.StructNative(unsafe.Pointer(color)))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(spec)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.pango_color_parse(_arg0, _arg1)
	runtime.KeepAlive(color)
	runtime.KeepAlive(spec)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParseWithAlpha: fill in the fields of a color from a string specification.
//
// The string can either one of a large set of standard names. (Taken from the
// CSS Color specification (https://www.w3.org/TR/css-color-4/#named-colors), or
// it can be a hexadecimal value in the form #rgb, #rrggbb, #rrrgggbbb or
// #rrrrggggbbbb where r, g and b are hex digits of the red, green, and blue
// components of the color, respectively. (White in the four forms is #fff,
// #ffffff, #fffffffff and #ffffffffffff.)
//
// Additionally, parse strings of the form #rgba, #rrggbbaa, #rrrrggggbbbbaaaa,
// if alpha is not NULL, and set alpha to the value specified by the hex digits
// for a. If no alpha component is found in spec, alpha is set to 0xffff (for a
// solid color).
func (color *Color) ParseWithAlpha(spec string) (uint16, bool) {
	var _arg0 *C.PangoColor // out
	var _arg1 C.guint16     // in
	var _arg2 *C.char       // out
	var _cret C.gboolean    // in

	if color != nil {
		_arg0 = (*C.PangoColor)(gextras.StructNative(unsafe.Pointer(color)))
	}
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(spec)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.pango_color_parse_with_alpha(_arg0, &_arg1, _arg2)
	runtime.KeepAlive(color)
	runtime.KeepAlive(spec)

	var _alpha uint16 // out
	var _ok bool      // out

	_alpha = uint16(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _alpha, _ok
}

// String returns a textual specification of color.
//
// The string is in the hexadecimal form #rrrrggggbbbb, where r, g and b are hex
// digits representing the red, green, and blue components respectively.
func (color *Color) String() string {
	var _arg0 *C.PangoColor // out
	var _cret *C.gchar      // in

	_arg0 = (*C.PangoColor)(gextras.StructNative(unsafe.Pointer(color)))

	_cret = C.pango_color_to_string(_arg0)
	runtime.KeepAlive(color)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
