// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
// void _gotk4_pango1_Renderer_virtual_begin(void* fnptr, PangoRenderer* arg0) {
//   ((void (*)(PangoRenderer*))(fnptr))(arg0);
// };
// void _gotk4_pango1_Renderer_virtual_draw_shape(void* fnptr, PangoRenderer* arg0, PangoAttrShape* arg1, int arg2, int arg3) {
//   ((void (*)(PangoRenderer*, PangoAttrShape*, int, int))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_pango1_Renderer_virtual_end(void* fnptr, PangoRenderer* arg0) {
//   ((void (*)(PangoRenderer*))(fnptr))(arg0);
// };
// void _gotk4_pango1_Renderer_virtual_prepare_run(void* fnptr, PangoRenderer* arg0, PangoLayoutRun* arg1) {
//   ((void (*)(PangoRenderer*, PangoLayoutRun*))(fnptr))(arg0, arg1);
// };
import "C"

func (renderer *Renderer) begin() {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.begin

	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	C._gotk4_pango1_Renderer_virtual_begin(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(renderer)
}

// The function takes the following parameters:
//
//    - attr
//    - x
//    - y
//
func (renderer *Renderer) drawShape(attr *AttrShape, x, y int) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.draw_shape

	var _arg0 *C.PangoRenderer  // out
	var _arg1 *C.PangoAttrShape // out
	var _arg2 C.int             // out
	var _arg3 C.int             // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoAttrShape)(gextras.StructNative(unsafe.Pointer(attr)))
	_arg2 = C.int(x)
	_arg3 = C.int(y)

	C._gotk4_pango1_Renderer_virtual_draw_shape(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(attr)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

func (renderer *Renderer) end() {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.end

	var _arg0 *C.PangoRenderer // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))

	C._gotk4_pango1_Renderer_virtual_end(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(renderer)
}

// The function takes the following parameters:
//
func (renderer *Renderer) prepareRun(run *LayoutRun) {
	gclass := (*C.PangoRendererClass)(coreglib.PeekParentClass(renderer))
	fnarg := gclass.prepare_run

	var _arg0 *C.PangoRenderer  // out
	var _arg1 *C.PangoLayoutRun // out

	_arg0 = (*C.PangoRenderer)(unsafe.Pointer(coreglib.InternObject(renderer).Native()))
	_arg1 = (*C.PangoGlyphItem)(gextras.StructNative(unsafe.Pointer(run)))

	C._gotk4_pango1_Renderer_virtual_prepare_run(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(renderer)
	runtime.KeepAlive(run)
}
