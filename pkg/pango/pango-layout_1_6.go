// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// Ellipsize gets the type of ellipsization being performed for layout.
//
// See pango.Layout.SetEllipsize().
//
// Use pango.Layout.IsEllipsized() to query whether any paragraphs were actually
// ellipsized.
//
// The function returns the following values:
//
//    - ellipsizeMode: current ellipsization mode for layout.
//
func (layout *Layout) Ellipsize() EllipsizeMode {
	var _arg0 *C.PangoLayout       // out
	var _cret C.PangoEllipsizeMode // in

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(coreglib.InternObject(layout).Native()))

	_cret = C.pango_layout_get_ellipsize(_arg0)
	runtime.KeepAlive(layout)

	var _ellipsizeMode EllipsizeMode // out

	_ellipsizeMode = EllipsizeMode(_cret)

	return _ellipsizeMode
}

// SetEllipsize sets the type of ellipsization being performed for layout.
//
// Depending on the ellipsization mode ellipsize text is removed from the start,
// middle, or end of text so they fit within the width and height of layout set
// with pango.Layout.SetWidth() and pango.Layout.SetHeight().
//
// If the layout contains characters such as newlines that force it to be layed
// out in multiple paragraphs, then whether each paragraph is ellipsized
// separately or the entire layout is ellipsized as a whole depends on the set
// height of the layout. See pango.Layout.SetHeight() for details.
//
// The function takes the following parameters:
//
//    - ellipsize: new ellipsization mode for layout.
//
func (layout *Layout) SetEllipsize(ellipsize EllipsizeMode) {
	var _arg0 *C.PangoLayout       // out
	var _arg1 C.PangoEllipsizeMode // out

	_arg0 = (*C.PangoLayout)(unsafe.Pointer(coreglib.InternObject(layout).Native()))
	_arg1 = C.PangoEllipsizeMode(ellipsize)

	C.pango_layout_set_ellipsize(_arg0, _arg1)
	runtime.KeepAlive(layout)
	runtime.KeepAlive(ellipsize)
}
