// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <pango/pango.h>
import "C"

// NewAttrAllowBreaks: create a new allow-breaks attribute.
//
// If breaks are disabled, the range will be kept in a single run, as far as
// possible.
//
// The function takes the following parameters:
//
//   - allowBreaks: TRUE if we line breaks are allowed.
//
// The function returns the following values:
//
//   - attribute: newly allocated PangoAttribute, which should be freed with
//     pango.Attribute.Destroy().
//
func NewAttrAllowBreaks(allowBreaks bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if allowBreaks {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_allow_breaks_new(_arg1)
	runtime.KeepAlive(allowBreaks)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrInsertHyphens: create a new insert-hyphens attribute.
//
// Pango will insert hyphens when breaking lines in the middle of a word.
// This attribute can be used to suppress the hyphen.
//
// The function takes the following parameters:
//
//   - insertHyphens: TRUE if hyphens should be inserted.
//
// The function returns the following values:
//
//   - attribute: newly allocated PangoAttribute, which should be freed with
//     pango.Attribute.Destroy().
//
func NewAttrInsertHyphens(insertHyphens bool) *Attribute {
	var _arg1 C.gboolean        // out
	var _cret *C.PangoAttribute // in

	if insertHyphens {
		_arg1 = C.TRUE
	}

	_cret = C.pango_attr_insert_hyphens_new(_arg1)
	runtime.KeepAlive(insertHyphens)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}

// NewAttrShow: create a new attribute that influences how invisible characters
// are rendered.
//
// The function takes the following parameters:
//
//   - flags: PangoShowFlags to apply.
//
// The function returns the following values:
//
//   - attribute: newly allocated PangoAttribute, which should be freed with
//     pango.Attribute.Destroy().
//
func NewAttrShow(flags ShowFlags) *Attribute {
	var _arg1 C.PangoShowFlags  // out
	var _cret *C.PangoAttribute // in

	_arg1 = C.PangoShowFlags(flags)

	_cret = C.pango_attr_show_new(_arg1)
	runtime.KeepAlive(flags)

	var _attribute *Attribute // out

	_attribute = (*Attribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_attribute)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.pango_attribute_destroy((*C.PangoAttribute)(intern.C))
		},
	)

	return _attribute
}
