// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gdkpopup.go.
var GTypePopup = coreglib.Type(C.gdk_popup_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypePopup, F: marshalPopup},
	})
}

// Popup: GdkPopup is a surface that is attached to another surface.
//
// The GdkPopup is positioned relative to its parent surface.
//
// GdkPopups are typically used to implement menus and similar popups. They can
// be modal, which is indicated by the gdkpopup:autohide property.
//
// Popup wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Popup struct {
	_ [0]func() // equal guard
	Surface
}

var (
	_ Surfacer = (*Popup)(nil)
)

// Popupper describes Popup's interface methods.
type Popupper interface {
	coreglib.Objector

	// Autohide returns whether this popup is set to hide on outside clicks.
	Autohide() bool
	// Parent returns the parent surface of a popup.
	Parent() Surfacer
	// PositionX obtains the position of the popup relative to its parent.
	PositionX() int32
	// PositionY obtains the position of the popup relative to its parent.
	PositionY() int32
	// Present popup after having processed the PopupLayout rules.
	Present(width, height int32, layout *PopupLayout) bool
}

var _ Popupper = (*Popup)(nil)

func wrapPopup(obj *coreglib.Object) *Popup {
	return &Popup{
		Surface: Surface{
			Object: obj,
		},
	}
}

func marshalPopup(p uintptr) (interface{}, error) {
	return wrapPopup(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Autohide returns whether this popup is set to hide on outside clicks.
//
// The function returns the following values:
//
//    - ok: TRUE if popup will autohide.
//
func (popup *Popup) Autohide() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(popup).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(popup)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Parent returns the parent surface of a popup.
//
// The function returns the following values:
//
//    - surface: parent surface.
//
func (popup *Popup) Parent() Surfacer {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(popup).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(popup)

	var _surface Surfacer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Surfacer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Surfacer)
			return ok
		})
		rv, ok := casted.(Surfacer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Surfacer")
		}
		_surface = rv
	}

	return _surface
}

// PositionX obtains the position of the popup relative to its parent.
//
// The function returns the following values:
//
//    - gint: x coordinate of popup position.
//
func (popup *Popup) PositionX() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(popup).Native()))

	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(popup)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// PositionY obtains the position of the popup relative to its parent.
//
// The function returns the following values:
//
//    - gint: y coordinate of popup position.
//
func (popup *Popup) PositionY() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(popup).Native()))

	_cret = *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(popup)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// Present popup after having processed the PopupLayout rules.
//
// If the popup was previously now showing, it will be showed, otherwise it will
// change position according to layout.
//
// After calling this function, the result should be handled in response to the
// gdksurface::layout signal being emitted. The resulting popup position can be
// queried using gdk.Popup.GetPositionX(), gdk.Popup.GetPositionY(), and the
// resulting size will be sent as parameters in the layout signal. Use
// gdk.Popup.GetRectAnchor() and gdk.Popup.GetSurfaceAnchor() to get the
// resulting anchors.
//
// Presenting may fail, for example if the popup is set to autohide and is
// immediately hidden upon being presented. If presenting failed, the
// gdk.Surface::layout signal will not me emitted.
//
// The function takes the following parameters:
//
//    - width: unconstrained popup width to layout.
//    - height: unconstrained popup height to layout.
//    - layout: GdkPopupLayout object used to layout.
//
// The function returns the following values:
//
//    - ok: FALSE if it failed to be presented, otherwise TRUE.
//
func (popup *Popup) Present(width, height int32, layout *PopupLayout) bool {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(popup).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(width)
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(height)
	*(**C.void)(unsafe.Pointer(&_args[3])) = (*C.void)(gextras.StructNative(unsafe.Pointer(layout)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(popup)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(layout)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
