// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// KeyvalConvertCase obtains the upper- and lower-case versions of the keyval
// symbol.
//
// Examples of keyvals are K_KEY_a, K_KEY_Enter, K_KEY_F1, etc.
//
// The function takes the following parameters:
//
//    - symbol: keyval.
//
// The function returns the following values:
//
//    - lower: return location for lowercase version of symbol.
//    - upper: return location for uppercase version of symbol.
//
func KeyvalConvertCase(symbol uint32) (lower, upper uint32) {
	var _args [1]girepository.Argument
	var _outs [2]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(symbol)

	girepository.MustFind("Gdk", "keyval_convert_case").Invoke(_args[:], _outs[:])

	runtime.KeepAlive(symbol)

	var _lower uint32 // out
	var _upper uint32 // out

	_lower = *(*uint32)(unsafe.Pointer(_outs[0]))
	_upper = *(*uint32)(unsafe.Pointer(_outs[1]))

	return _lower, _upper
}

// KeyvalFromName converts a key name to a key value.
//
// The names are the same as those in the gdk/gdkkeysyms.h header file but
// without the leading “GDK_KEY_”.
//
// The function takes the following parameters:
//
//    - keyvalName: key name.
//
// The function returns the following values:
//
//    - guint: corresponding key value, or GDK_KEY_VoidSymbol if the key name is
//      not a valid key.
//
func KeyvalFromName(keyvalName string) uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(keyvalName)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gdk", "keyval_from_name").Invoke(_args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyvalName)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// KeyvalIsLower returns TRUE if the given key value is in lower case.
//
// The function takes the following parameters:
//
//    - keyval: key value.
//
// The function returns the following values:
//
//    - ok: TRUE if keyval is in lower case, or if keyval is not subject to case
//      conversion.
//
func KeyvalIsLower(keyval uint32) bool {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_is_lower").Invoke(_args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// KeyvalIsUpper returns TRUE if the given key value is in upper case.
//
// The function takes the following parameters:
//
//    - keyval: key value.
//
// The function returns the following values:
//
//    - ok: TRUE if keyval is in upper case, or if keyval is not subject to case
//      conversion.
//
func KeyvalIsUpper(keyval uint32) bool {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_is_upper").Invoke(_args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// KeyvalName converts a key value into a symbolic name.
//
// The names are the same as those in the gdk/gdkkeysyms.h header file but
// without the leading “GDK_KEY_”.
//
// The function takes the following parameters:
//
//    - keyval: key value.
//
// The function returns the following values:
//
//    - utf8 (optional): string containing the name of the key, or NULL if keyval
//      is not a valid key. The string should not be modified.
//
func KeyvalName(keyval uint32) string {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_name").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// KeyvalToLower converts a key value to lower case, if applicable.
//
// The function takes the following parameters:
//
//    - keyval: key value.
//
// The function returns the following values:
//
//    - guint: lower case form of keyval, or keyval itself if it is already in
//      lower case or it is not subject to case conversion.
//
func KeyvalToLower(keyval uint32) uint32 {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_to_lower").Invoke(_args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// KeyvalToUnicode: convert from a GDK key symbol to the corresponding Unicode
// character.
//
// Note that the conversion does not take the current locale into consideration,
// which might be expected for particular keyvals, such as GDK_KEY_KP_Decimal.
//
// The function takes the following parameters:
//
//    - keyval: GDK key symbol.
//
// The function returns the following values:
//
//    - guint32: corresponding unicode character, or 0 if there is no
//      corresponding character.
//
func KeyvalToUnicode(keyval uint32) uint32 {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_to_unicode").Invoke(_args[:], nil)
	_cret = *(*C.guint32)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _guint32 uint32 // out

	_guint32 = uint32(*(*C.guint32)(unsafe.Pointer(&_cret)))

	return _guint32
}

// KeyvalToUpper converts a key value to upper case, if applicable.
//
// The function takes the following parameters:
//
//    - keyval: key value.
//
// The function returns the following values:
//
//    - guint: upper case form of keyval, or keyval itself if it is already in
//      upper case or it is not subject to case conversion.
//
func KeyvalToUpper(keyval uint32) uint32 {
	var _args [1]girepository.Argument

	*(*C.guint)(unsafe.Pointer(&_args[0])) = C.guint(keyval)

	_gret := girepository.MustFind("Gdk", "keyval_to_upper").Invoke(_args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(keyval)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// UnicodeToKeyval: convert from a Unicode character to a key symbol.
//
// The function takes the following parameters:
//
//    - wc: unicode character.
//
// The function returns the following values:
//
//    - guint: corresponding GDK key symbol, if one exists. or, if there is no
//      corresponding symbol, wc | 0x01000000.
//
func UnicodeToKeyval(wc uint32) uint32 {
	var _args [1]girepository.Argument

	*(*C.guint32)(unsafe.Pointer(&_args[0])) = C.guint32(wc)

	_gret := girepository.MustFind("Gdk", "unicode_to_keyval").Invoke(_args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(wc)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}
