// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gdkdragsurface.go.
var GTypeDragSurface = coreglib.Type(C.gdk_drag_surface_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeDragSurface, F: marshalDragSurface},
	})
}

// DragSurfaceOverrider contains methods that are overridable.
type DragSurfaceOverrider interface {
}

// DragSurface is an interface for surfaces used during DND.
//
// DragSurface wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DragSurface struct {
	_ [0]func() // equal guard
	Surface
}

var (
	_ Surfacer = (*DragSurface)(nil)
)

// DragSurfacer describes DragSurface's interface methods.
type DragSurfacer interface {
	coreglib.Objector

	baseDragSurface() *DragSurface
}

var _ DragSurfacer = (*DragSurface)(nil)

func ifaceInitDragSurfacer(gifacePtr, data C.gpointer) {
}

func wrapDragSurface(obj *coreglib.Object) *DragSurface {
	return &DragSurface{
		Surface: Surface{
			Object: obj,
		},
	}
}

func marshalDragSurface(p uintptr) (interface{}, error) {
	return wrapDragSurface(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DragSurface) baseDragSurface() *DragSurface {
	return v
}

// BaseDragSurface returns the underlying base object.
func BaseDragSurface(obj DragSurfacer) *DragSurface {
	return obj.baseDragSurface()
}
