// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// #include <glib-object.h>
// extern void _gotk4_gdk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// GType values.
var (
	GTypeContentDeserializer = coreglib.Type(C.gdk_content_deserializer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContentDeserializer, F: marshalContentDeserializer},
	})
}

// ContentDeserializeAsync: read content from the given input stream and
// deserialize it, asynchronously.
//
// The default I/O priority is G_PRIORITY_DEFAULT (i.e. 0), and lower numbers
// indicate a higher priority.
//
// When the operation is finished, callback will be called. You must then call
// content_deserialize_finish to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object.
//    - stream: GInputStream to read the serialized content from.
//    - mimeType: mime type to deserialize from.
//    - typ: GType to deserialize from.
//    - ioPriority: i/O priority of the operation.
//    - callback (optional) to call when the operation is done.
//
func ContentDeserializeAsync(ctx context.Context, stream gio.InputStreamer, mimeType string, typ coreglib.Type, ioPriority int, callback gio.AsyncReadyCallback) {
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.GInputStream       // out
	var _arg2 *C.char               // out
	var _arg3 C.GType               // out
	var _arg4 C.int                 // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GType(typ)
	_arg4 = C.int(ioPriority)
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gdk_content_deserialize_async(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ContentDeserializeFinish finishes a content deserialization operation.
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//    - value: return location for the result of the operation.
//
func ContentDeserializeFinish(result gio.AsyncResulter, value *coreglib.Value) error {
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.GValue       // out
	var _cerr *C.GError       // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C.gdk_content_deserialize_finish(_arg1, _arg2, &_cerr)
	runtime.KeepAlive(result)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ContentDeserializer: GdkContentDeserializer is used to deserialize content
// received via inter-application data transfers.
//
// The GdkContentDeserializer transforms serialized content that is identified
// by a mime type into an object identified by a GType.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own deserialization
// functions, use content_register_deserializer.
//
// Also see gdk.ContentSerializer.
type ContentDeserializer struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.AsyncResult
}

var (
	_ coreglib.Objector = (*ContentDeserializer)(nil)
)

func wrapContentDeserializer(obj *coreglib.Object) *ContentDeserializer {
	return &ContentDeserializer{
		Object: obj,
		AsyncResult: gio.AsyncResult{
			Object: obj,
		},
	}
}

func marshalContentDeserializer(p uintptr) (interface{}, error) {
	return wrapContentDeserializer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Cancellable gets the cancellable for the current operation.
//
// This is the GCancellable that was passed to content_deserialize_async.
//
// The function returns the following values:
//
//    - cancellable for the current operation.
//
func (deserializer *ContentDeserializer) Cancellable() *gio.Cancellable {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GCancellable           // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_cancellable(_arg0)
	runtime.KeepAlive(deserializer)

	var _cancellable *gio.Cancellable // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_cancellable = &gio.Cancellable{
			Object: obj,
		}
	}

	return _cancellable
}

// GType gets the GType to create an instance of.
//
// The function returns the following values:
//
//    - gType: GType for the current operation.
//
func (deserializer *ContentDeserializer) GType() coreglib.Type {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.GType                   // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_gtype(_arg0)
	runtime.KeepAlive(deserializer)

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// InputStream gets the input stream for the current operation.
//
// This is the stream that was passed to content_deserialize_async.
//
// The function returns the following values:
//
//    - inputStream: input stream for the current operation.
//
func (deserializer *ContentDeserializer) InputStream() gio.InputStreamer {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GInputStream           // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_input_stream(_arg0)
	runtime.KeepAlive(deserializer)

	var _inputStream gio.InputStreamer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}

	return _inputStream
}

// MIMEType gets the mime type to deserialize from.
//
// The function returns the following values:
//
//    - utf8: mime type for the current operation.
//
func (deserializer *ContentDeserializer) MIMEType() string {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.char                   // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_mime_type(_arg0)
	runtime.KeepAlive(deserializer)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Priority gets the I/O priority for the current operation.
//
// This is the priority that was passed to [funccontent_deserialize_async].
//
// The function returns the following values:
//
//    - gint: i/O priority for the current operation.
//
func (deserializer *ContentDeserializer) Priority() int {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.int                     // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_priority(_arg0)
	runtime.KeepAlive(deserializer)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TaskData gets the data that was associated with the current operation.
//
// See gdk.ContentDeserializer.SetTaskData().
//
// The function returns the following values:
//
//    - gpointer (optional): task data for deserializer.
//
func (deserializer *ContentDeserializer) TaskData() unsafe.Pointer {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.gpointer                // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_task_data(_arg0)
	runtime.KeepAlive(deserializer)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// UserData gets the user data that was passed when the deserializer was
// registered.
//
// The function returns the following values:
//
//    - gpointer (optional): user data for this deserializer.
//
func (deserializer *ContentDeserializer) UserData() unsafe.Pointer {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret C.gpointer                // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_user_data(_arg0)
	runtime.KeepAlive(deserializer)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// Value gets the GValue to store the deserialized object in.
//
// The function returns the following values:
//
//    - value: GValue for the current operation.
//
func (deserializer *ContentDeserializer) Value() *coreglib.Value {
	var _arg0 *C.GdkContentDeserializer // out
	var _cret *C.GValue                 // in

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	_cret = C.gdk_content_deserializer_get_value(_arg0)
	runtime.KeepAlive(deserializer)

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// ReturnError: indicate that the deserialization has ended with an error.
//
// This function consumes error.
//
// The function takes the following parameters:
//
//    - err: GError.
//
func (deserializer *ContentDeserializer) ReturnError(err error) {
	var _arg0 *C.GdkContentDeserializer // out
	var _arg1 *C.GError                 // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))
	if err != nil {
		_arg1 = (*C.GError)(gerror.New(err))
	}

	C.gdk_content_deserializer_return_error(_arg0, _arg1)
	runtime.KeepAlive(deserializer)
	runtime.KeepAlive(err)
}

// ReturnSuccess: indicate that the deserialization has been successfully
// completed.
func (deserializer *ContentDeserializer) ReturnSuccess() {
	var _arg0 *C.GdkContentDeserializer // out

	_arg0 = (*C.GdkContentDeserializer)(unsafe.Pointer(coreglib.InternObject(deserializer).Native()))

	C.gdk_content_deserializer_return_success(_arg0)
	runtime.KeepAlive(deserializer)
}
