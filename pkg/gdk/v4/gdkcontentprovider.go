// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern void _gotk4_gdk4_ContentProvider_ConnectContentChanged(gpointer, guintptr);
// extern void _gotk4_gdk4_ContentProviderClass_detach_clipboard(GdkContentProvider*, GdkClipboard*);
// extern void _gotk4_gdk4_ContentProviderClass_content_changed(GdkContentProvider*);
// extern void _gotk4_gdk4_ContentProviderClass_attach_clipboard(GdkContentProvider*, GdkClipboard*);
// extern void _gotk4_gdk4_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// extern gboolean _gotk4_gdk4_ContentProviderClass_write_mime_type_finish(GdkContentProvider*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gdk4_ContentProviderClass_get_value(GdkContentProvider*, GValue*, GError**);
// extern GdkContentFormats* _gotk4_gdk4_ContentProviderClass_ref_storable_formats(GdkContentProvider*);
// extern GdkContentFormats* _gotk4_gdk4_ContentProviderClass_ref_formats(GdkContentProvider*);
// GdkContentFormats* _gotk4_gdk4_ContentProvider_virtual_ref_formats(void* fnptr, GdkContentProvider* arg0) {
//   return ((GdkContentFormats* (*)(GdkContentProvider*))(fnptr))(arg0);
// };
// GdkContentFormats* _gotk4_gdk4_ContentProvider_virtual_ref_storable_formats(void* fnptr, GdkContentProvider* arg0) {
//   return ((GdkContentFormats* (*)(GdkContentProvider*))(fnptr))(arg0);
// };
// gboolean _gotk4_gdk4_ContentProvider_virtual_get_value(void* fnptr, GdkContentProvider* arg0, GValue* arg1, GError** arg2) {
//   return ((gboolean (*)(GdkContentProvider*, GValue*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_gdk4_ContentProvider_virtual_write_mime_type_finish(void* fnptr, GdkContentProvider* arg0, GAsyncResult* arg1, GError** arg2) {
//   return ((gboolean (*)(GdkContentProvider*, GAsyncResult*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gdk4_ContentProvider_virtual_attach_clipboard(void* fnptr, GdkContentProvider* arg0, GdkClipboard* arg1) {
//   ((void (*)(GdkContentProvider*, GdkClipboard*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gdk4_ContentProvider_virtual_content_changed(void* fnptr, GdkContentProvider* arg0) {
//   ((void (*)(GdkContentProvider*))(fnptr))(arg0);
// };
// void _gotk4_gdk4_ContentProvider_virtual_detach_clipboard(void* fnptr, GdkContentProvider* arg0, GdkClipboard* arg1) {
//   ((void (*)(GdkContentProvider*, GdkClipboard*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gdk4_ContentProvider_virtual_write_mime_type_async(void* fnptr, GdkContentProvider* arg0, char* arg1, GOutputStream* arg2, int arg3, GCancellable* arg4, GAsyncReadyCallback arg5, gpointer arg6) {
//   ((void (*)(GdkContentProvider*, char*, GOutputStream*, int, GCancellable*, GAsyncReadyCallback, gpointer))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
// };
import "C"

// GType values.
var (
	GTypeContentProvider = coreglib.Type(C.gdk_content_provider_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContentProvider, F: marshalContentProvider},
	})
}

// ContentProviderOverrides contains methods that are overridable.
type ContentProviderOverrides struct {
	// The function takes the following parameters:
	//
	AttachClipboard func(clipboard *Clipboard)
	// ContentChanged emits the ::content-changed signal.
	ContentChanged func()
	// The function takes the following parameters:
	//
	DetachClipboard func(clipboard *Clipboard)
	// Value gets the contents of provider stored in value.
	//
	// The value will have been initialized to the GType the value should be
	// provided in. This given GType does not need to be listed in the formats
	// returned by gdk.ContentProvider.RefFormats(). However, if the given GType
	// is not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will
	// be reported.
	//
	// The function takes the following parameters:
	//
	//   - value: GValue to fill.
	//
	Value func(value *coreglib.Value) error
	// RefFormats gets the formats that the provider can provide its current
	// contents in.
	//
	// The function returns the following values:
	//
	//   - contentFormats formats of the provider.
	//
	RefFormats func() *ContentFormats
	// RefStorableFormats gets the formats that the provider suggests other
	// applications to store the data in.
	//
	// An example of such an application would be a clipboard manager.
	//
	// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
	//
	// The function returns the following values:
	//
	//   - contentFormats: storable formats of the provider.
	//
	RefStorableFormats func() *ContentFormats
	// WriteMIMETypeFinish finishes an asynchronous write operation.
	//
	// See gdk.ContentProvider.WriteMIMETypeAsync().
	//
	// The function takes the following parameters:
	//
	//   - result: GAsyncResult.
	//
	WriteMIMETypeFinish func(result gio.AsyncResulter) error
}

func defaultContentProviderOverrides(v *ContentProvider) ContentProviderOverrides {
	return ContentProviderOverrides{
		AttachClipboard:     v.attachClipboard,
		ContentChanged:      v.contentChanged,
		DetachClipboard:     v.detachClipboard,
		Value:               v.value,
		RefFormats:          v.refFormats,
		RefStorableFormats:  v.refStorableFormats,
		WriteMIMETypeFinish: v.writeMIMETypeFinish,
	}
}

// ContentProvider: GdkContentProvider is used to provide content for the
// clipboard or for drag-and-drop operations in a number of formats.
//
// To create a GdkContentProvider, use gdk.ContentProvider.NewForValue or
// gdk.ContentProvider.NewForBytes.
//
// GDK knows how to handle common text and image formats out-of-the-box. See
// gdk.ContentSerializer and gdk.ContentDeserializer if you want to add support
// for application-specific data formats.
type ContentProvider struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ContentProvider)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ContentProvider, *ContentProviderClass, ContentProviderOverrides](
		GTypeContentProvider,
		initContentProviderClass,
		wrapContentProvider,
		defaultContentProviderOverrides,
	)
}

func initContentProviderClass(gclass unsafe.Pointer, overrides ContentProviderOverrides, classInitFunc func(*ContentProviderClass)) {
	pclass := (*C.GdkContentProviderClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeContentProvider))))

	if overrides.AttachClipboard != nil {
		pclass.attach_clipboard = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_attach_clipboard)
	}

	if overrides.ContentChanged != nil {
		pclass.content_changed = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_content_changed)
	}

	if overrides.DetachClipboard != nil {
		pclass.detach_clipboard = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_detach_clipboard)
	}

	if overrides.Value != nil {
		pclass.get_value = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_get_value)
	}

	if overrides.RefFormats != nil {
		pclass.ref_formats = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_ref_formats)
	}

	if overrides.RefStorableFormats != nil {
		pclass.ref_storable_formats = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_ref_storable_formats)
	}

	if overrides.WriteMIMETypeFinish != nil {
		pclass.write_mime_type_finish = (*[0]byte)(C._gotk4_gdk4_ContentProviderClass_write_mime_type_finish)
	}

	if classInitFunc != nil {
		class := (*ContentProviderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapContentProvider(obj *coreglib.Object) *ContentProvider {
	return &ContentProvider{
		Object: obj,
	}
}

func marshalContentProvider(p uintptr) (interface{}, error) {
	return wrapContentProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectContentChanged is emitted whenever the content provided by this
// provider has changed.
func (provider *ContentProvider) ConnectContentChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(provider, "content-changed", false, unsafe.Pointer(C._gotk4_gdk4_ContentProvider_ConnectContentChanged), f)
}

// NewContentProviderForBytes: create a content provider that provides the given
// bytes as data for the given mime_type.
//
// The function takes the following parameters:
//
//   - mimeType: mime type.
//   - bytes: GBytes with the data for mime_type.
//
// The function returns the following values:
//
//   - contentProvider: new GdkContentProvider.
//
func NewContentProviderForBytes(mimeType string, bytes *glib.Bytes) *ContentProvider {
	var _arg1 *C.char               // out
	var _arg2 *C.GBytes             // out
	var _cret *C.GdkContentProvider // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))

	_cret = C.gdk_content_provider_new_for_bytes(_arg1, _arg2)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(bytes)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contentProvider
}

// NewContentProviderForValue: create a content provider that provides the given
// value.
//
// The function takes the following parameters:
//
//   - value: GValue.
//
// The function returns the following values:
//
//   - contentProvider: new GdkContentProvider.
//
func NewContentProviderForValue(value *coreglib.Value) *ContentProvider {
	var _arg1 *C.GValue             // out
	var _cret *C.GdkContentProvider // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.gdk_content_provider_new_for_value(_arg1)
	runtime.KeepAlive(value)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contentProvider
}

// NewContentProviderUnion creates a content provider that represents all the
// given providers.
//
// Whenever data needs to be written, the union provider will try the given
// providers in the given order and the first one supporting a format will be
// chosen to provide it.
//
// This allows an easy way to support providing data in different formats.
// For example, an image may be provided by its file and by the image contents
// with a call such as
//
//    gdk_content_provider_new_union ((GdkContentProvider *[2]) {
//                                      gdk_content_provider_new_typed (G_TYPE_FILE, file),
//                                      gdk_content_provider_new_typed (G_TYPE_TEXTURE, texture)
//                                    }, 2);.
//
// The function takes the following parameters:
//
//   - providers (optional): The ContentProviders to present the union of.
//
// The function returns the following values:
//
//   - contentProvider: new GdkContentProvider.
//
func NewContentProviderUnion(providers []*ContentProvider) *ContentProvider {
	var _arg1 **C.GdkContentProvider // out
	var _arg2 C.gsize
	var _cret *C.GdkContentProvider // in

	if providers != nil {
		_arg2 = (C.gsize)(len(providers))
		_arg1 = (**C.GdkContentProvider)(C.calloc(C.size_t(len(providers)), C.size_t(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice((**C.GdkContentProvider)(_arg1), len(providers))
			for i := range providers {
				out[i] = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(providers[i]).Native()))
				C.g_object_ref(C.gpointer(coreglib.InternObject(providers[i]).Native()))
			}
		}
	}

	_cret = C.gdk_content_provider_new_union(_arg1, _arg2)
	runtime.KeepAlive(providers)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _contentProvider
}

// ContentChanged emits the ::content-changed signal.
func (provider *ContentProvider) ContentChanged() {
	var _arg0 *C.GdkContentProvider // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C.gdk_content_provider_content_changed(_arg0)
	runtime.KeepAlive(provider)
}

// Value gets the contents of provider stored in value.
//
// The value will have been initialized to the GType the value should be
// provided in. This given GType does not need to be listed in the formats
// returned by gdk.ContentProvider.RefFormats(). However, if the given GType
// is not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will be
// reported.
//
// The function takes the following parameters:
//
//   - value: GValue to fill.
//
func (provider *ContentProvider) Value(value *coreglib.Value) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GValue             // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C.gdk_content_provider_get_value(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RefFormats gets the formats that the provider can provide its current
// contents in.
//
// The function returns the following values:
//
//   - contentFormats formats of the provider.
//
func (provider *ContentProvider) RefFormats() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gdk_content_provider_ref_formats(_arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// RefStorableFormats gets the formats that the provider suggests other
// applications to store the data in.
//
// An example of such an application would be a clipboard manager.
//
// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
//
// The function returns the following values:
//
//   - contentFormats: storable formats of the provider.
//
func (provider *ContentProvider) RefStorableFormats() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gdk_content_provider_ref_storable_formats(_arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// WriteMIMETypeAsync: asynchronously writes the contents of provider to stream
// in the given mime_type.
//
// When the operation is finished callback will be called. You must then call
// gdk.ContentProvider.WriteMIMETypeFinish() to get the result of the operation.
//
// The given mime type does not need to be listed in the formats returned
// by gdk.ContentProvider.RefFormats(). However, if the given GType is not
// supported, IO_ERROR_NOT_SUPPORTED will be reported.
//
// The given stream will not be closed.
//
// The function takes the following parameters:
//
//   - ctx (optional): optional GCancellable object, NULL to ignore.
//   - mimeType: mime type to provide the data in.
//   - stream: GOutputStream to write to.
//   - ioPriority: i/O priority of the request.
//   - callback (optional) to call when the request is satisfied.
//
func (provider *ContentProvider) WriteMIMETypeAsync(ctx context.Context, mimeType string, stream gio.OutputStreamer, ioPriority int, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkContentProvider // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 *C.GOutputStream      // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GOutputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gdk_content_provider_write_mime_type_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// WriteMIMETypeFinish finishes an asynchronous write operation.
//
// See gdk.ContentProvider.WriteMIMETypeAsync().
//
// The function takes the following parameters:
//
//   - result: GAsyncResult.
//
func (provider *ContentProvider) WriteMIMETypeFinish(result gio.AsyncResulter) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GAsyncResult       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	C.gdk_content_provider_write_mime_type_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// The function takes the following parameters:
//
func (provider *ContentProvider) attachClipboard(clipboard *Clipboard) {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.attach_clipboard

	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GdkClipboard       // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GdkClipboard)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	C._gotk4_gdk4_ContentProvider_virtual_attach_clipboard(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(clipboard)
}

// contentChanged emits the ::content-changed signal.
func (provider *ContentProvider) contentChanged() {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.content_changed

	var _arg0 *C.GdkContentProvider // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C._gotk4_gdk4_ContentProvider_virtual_content_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(provider)
}

// The function takes the following parameters:
//
func (provider *ContentProvider) detachClipboard(clipboard *Clipboard) {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.detach_clipboard

	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GdkClipboard       // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GdkClipboard)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	C._gotk4_gdk4_ContentProvider_virtual_detach_clipboard(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(clipboard)
}

// Value gets the contents of provider stored in value.
//
// The value will have been initialized to the GType the value should be
// provided in. This given GType does not need to be listed in the formats
// returned by gdk.ContentProvider.RefFormats(). However, if the given GType
// is not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will be
// reported.
//
// The function takes the following parameters:
//
//   - value: GValue to fill.
//
func (provider *ContentProvider) value(value *coreglib.Value) error {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.get_value

	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GValue             // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C._gotk4_gdk4_ContentProvider_virtual_get_value(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// refFormats gets the formats that the provider can provide its current
// contents in.
//
// The function returns the following values:
//
//   - contentFormats formats of the provider.
//
func (provider *ContentProvider) refFormats() *ContentFormats {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.ref_formats

	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C._gotk4_gdk4_ContentProvider_virtual_ref_formats(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// refStorableFormats gets the formats that the provider suggests other
// applications to store the data in.
//
// An example of such an application would be a clipboard manager.
//
// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
//
// The function returns the following values:
//
//   - contentFormats: storable formats of the provider.
//
func (provider *ContentProvider) refStorableFormats() *ContentFormats {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.ref_storable_formats

	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C._gotk4_gdk4_ContentProvider_virtual_ref_storable_formats(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// writeMIMETypeAsync: asynchronously writes the contents of provider to stream
// in the given mime_type.
//
// When the operation is finished callback will be called. You must then call
// gdk.ContentProvider.WriteMIMETypeFinish() to get the result of the operation.
//
// The given mime type does not need to be listed in the formats returned
// by gdk.ContentProvider.RefFormats(). However, if the given GType is not
// supported, IO_ERROR_NOT_SUPPORTED will be reported.
//
// The given stream will not be closed.
//
// The function takes the following parameters:
//
//   - ctx (optional): optional GCancellable object, NULL to ignore.
//   - mimeType: mime type to provide the data in.
//   - stream: GOutputStream to write to.
//   - ioPriority: i/O priority of the request.
//   - callback (optional) to call when the request is satisfied.
//
func (provider *ContentProvider) writeMIMETypeAsync(ctx context.Context, mimeType string, stream gio.OutputStreamer, ioPriority int, callback gio.AsyncReadyCallback) {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.write_mime_type_async

	var _arg0 *C.GdkContentProvider // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 *C.GOutputStream      // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GOutputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C._gotk4_gdk4_ContentProvider_virtual_write_mime_type_async(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// writeMIMETypeFinish finishes an asynchronous write operation.
//
// See gdk.ContentProvider.WriteMIMETypeAsync().
//
// The function takes the following parameters:
//
//   - result: GAsyncResult.
//
func (provider *ContentProvider) writeMIMETypeFinish(result gio.AsyncResulter) error {
	gclass := (*C.GdkContentProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.write_mime_type_finish

	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GAsyncResult       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	C._gotk4_gdk4_ContentProvider_virtual_write_mime_type_finish(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ContentProviderClass class structure for ContentProvider.
//
// An instance of this type is always passed by reference.
type ContentProviderClass struct {
	*contentProviderClass
}

// contentProviderClass is the struct that's finalized.
type contentProviderClass struct {
	native *C.GdkContentProviderClass
}
