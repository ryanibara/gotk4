// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// #include <glib-object.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.gdk_content_provider_get_type()), F: marshalContentProviderer},
	})
}

// ContentProviderOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ContentProviderOverrider interface {
	// The function takes the following parameters:
	//
	AttachClipboard(clipboard *Clipboard)
	// ContentChanged emits the ::content-changed signal.
	ContentChanged()
	// The function takes the following parameters:
	//
	DetachClipboard(clipboard *Clipboard)
	// Value gets the contents of provider stored in value.
	//
	// The value will have been initialized to the GType the value should be
	// provided in. This given GType does not need to be listed in the formats
	// returned by gdk.ContentProvider.RefFormats(). However, if the given GType
	// is not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will
	// be reported.
	//
	// The function takes the following parameters:
	//
	//    - value: GValue to fill.
	//
	Value(value *externglib.Value) error
	// RefFormats gets the formats that the provider can provide its current
	// contents in.
	//
	// The function returns the following values:
	//
	//    - contentFormats formats of the provider.
	//
	RefFormats() *ContentFormats
	// RefStorableFormats gets the formats that the provider suggests other
	// applications to store the data in.
	//
	// An example of such an application would be a clipboard manager.
	//
	// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
	//
	// The function returns the following values:
	//
	//    - contentFormats: storable formats of the provider.
	//
	RefStorableFormats() *ContentFormats
	// WriteMIMETypeAsync: asynchronously writes the contents of provider to
	// stream in the given mime_type.
	//
	// When the operation is finished callback will be called. You must then
	// call gdk.ContentProvider.WriteMIMETypeFinish() to get the result of the
	// operation.
	//
	// The given mime type does not need to be listed in the formats returned by
	// gdk.ContentProvider.RefFormats(). However, if the given GType is not
	// supported, IO_ERROR_NOT_SUPPORTED will be reported.
	//
	// The given stream will not be closed.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional): optional GCancellable object, NULL to ignore.
	//    - mimeType: mime type to provide the data in.
	//    - stream: GOutputStream to write to.
	//    - ioPriority: i/O priority of the request.
	//    - callback (optional) to call when the request is satisfied.
	//
	WriteMIMETypeAsync(ctx context.Context, mimeType string, stream gio.OutputStreamer, ioPriority int, callback gio.AsyncReadyCallback)
	// WriteMIMETypeFinish finishes an asynchronous write operation.
	//
	// See gdk.ContentProvider.WriteMIMETypeAsync().
	//
	// The function takes the following parameters:
	//
	//    - result: GAsyncResult.
	//
	WriteMIMETypeFinish(result gio.AsyncResulter) error
}

// ContentProvider: GdkContentProvider is used to provide content for the
// clipboard or for drag-and-drop operations in a number of formats.
//
// To create a GdkContentProvider, use gdk.ContentProvider.NewForValue or
// gdk.ContentProvider.NewForBytes.
//
// GDK knows how to handle common text and image formats out-of-the-box. See
// gdk.ContentSerializer and gdk.ContentDeserializer if you want to add support
// for application-specific data formats.
type ContentProvider struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*ContentProvider)(nil)
)

func wrapContentProvider(obj *externglib.Object) *ContentProvider {
	return &ContentProvider{
		Object: obj,
	}
}

func marshalContentProviderer(p uintptr) (interface{}, error) {
	return wrapContentProvider(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectContentChanged: emitted whenever the content provided by this provider
// has changed.
func (provider *ContentProvider) ConnectContentChanged(f func()) externglib.SignalHandle {
	return provider.Connect("content-changed", f)
}

// ContentChanged emits the ::content-changed signal.
func (provider *ContentProvider) ContentChanged() {
	var _arg0 *C.GdkContentProvider // out

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))

	C.gdk_content_provider_content_changed(_arg0)
	runtime.KeepAlive(provider)
}

// Value gets the contents of provider stored in value.
//
// The value will have been initialized to the GType the value should be
// provided in. This given GType does not need to be listed in the formats
// returned by gdk.ContentProvider.RefFormats(). However, if the given GType is
// not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will be
// reported.
//
// The function takes the following parameters:
//
//    - value: GValue to fill.
//
func (provider *ContentProvider) Value(value *externglib.Value) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GValue             // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	C.gdk_content_provider_get_value(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RefFormats gets the formats that the provider can provide its current
// contents in.
//
// The function returns the following values:
//
//    - contentFormats formats of the provider.
//
func (provider *ContentProvider) RefFormats() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))

	_cret = C.gdk_content_provider_ref_formats(_arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// RefStorableFormats gets the formats that the provider suggests other
// applications to store the data in.
//
// An example of such an application would be a clipboard manager.
//
// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
//
// The function returns the following values:
//
//    - contentFormats: storable formats of the provider.
//
func (provider *ContentProvider) RefStorableFormats() *ContentFormats {
	var _arg0 *C.GdkContentProvider // out
	var _cret *C.GdkContentFormats  // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))

	_cret = C.gdk_content_provider_ref_storable_formats(_arg0)
	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// WriteMIMETypeAsync: asynchronously writes the contents of provider to stream
// in the given mime_type.
//
// When the operation is finished callback will be called. You must then call
// gdk.ContentProvider.WriteMIMETypeFinish() to get the result of the operation.
//
// The given mime type does not need to be listed in the formats returned by
// gdk.ContentProvider.RefFormats(). However, if the given GType is not
// supported, IO_ERROR_NOT_SUPPORTED will be reported.
//
// The given stream will not be closed.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - mimeType: mime type to provide the data in.
//    - stream: GOutputStream to write to.
//    - ioPriority: i/O priority of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (provider *ContentProvider) WriteMIMETypeAsync(ctx context.Context, mimeType string, stream gio.OutputStreamer, ioPriority int, callback gio.AsyncReadyCallback) {
	var _arg0 *C.GdkContentProvider // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 *C.GOutputStream      // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GOutputStream)(unsafe.Pointer(stream.Native()))
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.gdk_content_provider_write_mime_type_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// WriteMIMETypeFinish finishes an asynchronous write operation.
//
// See gdk.ContentProvider.WriteMIMETypeAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
func (provider *ContentProvider) WriteMIMETypeFinish(result gio.AsyncResulter) error {
	var _arg0 *C.GdkContentProvider // out
	var _arg1 *C.GAsyncResult       // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GdkContentProvider)(unsafe.Pointer(provider.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.gdk_content_provider_write_mime_type_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
