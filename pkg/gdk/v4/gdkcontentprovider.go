// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gdk4_ContentProviderClass_get_value(void*, GValue*, GError**);
// extern gboolean _gotk4_gdk4_ContentProviderClass_write_mime_type_finish(void*, void*, GError**);
// extern void _gotk4_gdk4_AsyncReadyCallback(GObject*, void*, gpointer);
// extern void _gotk4_gdk4_ContentProviderClass_attach_clipboard(void*, void*);
// extern void _gotk4_gdk4_ContentProviderClass_content_changed(void*);
// extern void _gotk4_gdk4_ContentProviderClass_detach_clipboard(void*, void*);
// extern void _gotk4_gdk4_ContentProvider_ConnectContentChanged(gpointer, guintptr);
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, void*, gpointer);
// extern void* _gotk4_gdk4_ContentProviderClass_ref_formats(void*);
// extern void* _gotk4_gdk4_ContentProviderClass_ref_storable_formats(void*);
import "C"

// GTypeContentProvider returns the GType for the type ContentProvider.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeContentProvider() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gdk", "ContentProvider").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalContentProvider)
	return gtype
}

// ContentProviderOverrider contains methods that are overridable.
type ContentProviderOverrider interface {
	// The function takes the following parameters:
	//
	AttachClipboard(clipboard *Clipboard)
	// ContentChanged emits the ::content-changed signal.
	ContentChanged()
	// The function takes the following parameters:
	//
	DetachClipboard(clipboard *Clipboard)
	// Value gets the contents of provider stored in value.
	//
	// The value will have been initialized to the GType the value should be
	// provided in. This given GType does not need to be listed in the formats
	// returned by gdk.ContentProvider.RefFormats(). However, if the given GType
	// is not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will
	// be reported.
	//
	// The function takes the following parameters:
	//
	//    - value: GValue to fill.
	//
	Value(value *coreglib.Value) error
	// RefFormats gets the formats that the provider can provide its current
	// contents in.
	//
	// The function returns the following values:
	//
	//    - contentFormats formats of the provider.
	//
	RefFormats() *ContentFormats
	// RefStorableFormats gets the formats that the provider suggests other
	// applications to store the data in.
	//
	// An example of such an application would be a clipboard manager.
	//
	// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
	//
	// The function returns the following values:
	//
	//    - contentFormats: storable formats of the provider.
	//
	RefStorableFormats() *ContentFormats
	// WriteMIMETypeFinish finishes an asynchronous write operation.
	//
	// See gdk.ContentProvider.WriteMIMETypeAsync().
	//
	// The function takes the following parameters:
	//
	//    - result: GAsyncResult.
	//
	WriteMIMETypeFinish(result gio.AsyncResulter) error
}

// ContentProvider: GdkContentProvider is used to provide content for the
// clipboard or for drag-and-drop operations in a number of formats.
//
// To create a GdkContentProvider, use gdk.ContentProvider.NewForValue or
// gdk.ContentProvider.NewForBytes.
//
// GDK knows how to handle common text and image formats out-of-the-box. See
// gdk.ContentSerializer and gdk.ContentDeserializer if you want to add support
// for application-specific data formats.
type ContentProvider struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ContentProvider)(nil)
)

func classInitContentProviderer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gdk", "ContentProviderClass")

	if _, ok := goval.(interface{ AttachClipboard(clipboard *Clipboard) }); ok {
		o := pclass.StructFieldOffset("attach_clipboard")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_attach_clipboard)
	}

	if _, ok := goval.(interface{ ContentChanged() }); ok {
		o := pclass.StructFieldOffset("content_changed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_content_changed)
	}

	if _, ok := goval.(interface{ DetachClipboard(clipboard *Clipboard) }); ok {
		o := pclass.StructFieldOffset("detach_clipboard")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_detach_clipboard)
	}

	if _, ok := goval.(interface {
		Value(value *coreglib.Value) error
	}); ok {
		o := pclass.StructFieldOffset("get_value")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_get_value)
	}

	if _, ok := goval.(interface{ RefFormats() *ContentFormats }); ok {
		o := pclass.StructFieldOffset("ref_formats")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_ref_formats)
	}

	if _, ok := goval.(interface{ RefStorableFormats() *ContentFormats }); ok {
		o := pclass.StructFieldOffset("ref_storable_formats")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_ref_storable_formats)
	}

	if _, ok := goval.(interface {
		WriteMIMETypeFinish(result gio.AsyncResulter) error
	}); ok {
		o := pclass.StructFieldOffset("write_mime_type_finish")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gdk4_ContentProviderClass_write_mime_type_finish)
	}
}

//export _gotk4_gdk4_ContentProviderClass_attach_clipboard
func _gotk4_gdk4_ContentProviderClass_attach_clipboard(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ AttachClipboard(clipboard *Clipboard) })

	var _clipboard *Clipboard // out

	_clipboard = wrapClipboard(coreglib.Take(unsafe.Pointer(arg1)))

	iface.AttachClipboard(_clipboard)
}

//export _gotk4_gdk4_ContentProviderClass_content_changed
func _gotk4_gdk4_ContentProviderClass_content_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ContentChanged() })

	iface.ContentChanged()
}

//export _gotk4_gdk4_ContentProviderClass_detach_clipboard
func _gotk4_gdk4_ContentProviderClass_detach_clipboard(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ DetachClipboard(clipboard *Clipboard) })

	var _clipboard *Clipboard // out

	_clipboard = wrapClipboard(coreglib.Take(unsafe.Pointer(arg1)))

	iface.DetachClipboard(_clipboard)
}

//export _gotk4_gdk4_ContentProviderClass_get_value
func _gotk4_gdk4_ContentProviderClass_get_value(arg0 *C.void, arg1 *C.GValue, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Value(value *coreglib.Value) error
	})

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(arg1))

	_goerr := iface.Value(_value)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gdk4_ContentProviderClass_ref_formats
func _gotk4_gdk4_ContentProviderClass_ref_formats(arg0 *C.void) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ RefFormats() *ContentFormats })

	contentFormats := iface.RefFormats()

	cret = (*C.void)(gextras.StructNative(unsafe.Pointer(contentFormats)))

	return cret
}

//export _gotk4_gdk4_ContentProviderClass_ref_storable_formats
func _gotk4_gdk4_ContentProviderClass_ref_storable_formats(arg0 *C.void) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ RefStorableFormats() *ContentFormats })

	contentFormats := iface.RefStorableFormats()

	cret = (*C.void)(gextras.StructNative(unsafe.Pointer(contentFormats)))

	return cret
}

//export _gotk4_gdk4_ContentProviderClass_write_mime_type_finish
func _gotk4_gdk4_ContentProviderClass_write_mime_type_finish(arg0 *C.void, arg1 *C.void, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		WriteMIMETypeFinish(result gio.AsyncResulter) error
	})

	var _result gio.AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.AsyncResulter)
			return ok
		})
		rv, ok := casted.(gio.AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.WriteMIMETypeFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.GError)(gerror.New(_goerr))
	}

	return cret
}

func wrapContentProvider(obj *coreglib.Object) *ContentProvider {
	return &ContentProvider{
		Object: obj,
	}
}

func marshalContentProvider(p uintptr) (interface{}, error) {
	return wrapContentProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gdk4_ContentProvider_ConnectContentChanged
func _gotk4_gdk4_ContentProvider_ConnectContentChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectContentChanged is emitted whenever the content provided by this
// provider has changed.
func (provider *ContentProvider) ConnectContentChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(provider, "content-changed", false, unsafe.Pointer(C._gotk4_gdk4_ContentProvider_ConnectContentChanged), f)
}

// ContentChanged emits the ::content-changed signal.
func (provider *ContentProvider) ContentChanged() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_info.InvokeClassMethod("content_changed", _args[:], nil)

	runtime.KeepAlive(provider)
}

// Value gets the contents of provider stored in value.
//
// The value will have been initialized to the GType the value should be
// provided in. This given GType does not need to be listed in the formats
// returned by gdk.ContentProvider.RefFormats(). However, if the given GType is
// not supported, this operation can fail and IO_ERROR_NOT_SUPPORTED will be
// reported.
//
// The function takes the following parameters:
//
//    - value: GValue to fill.
//
func (provider *ContentProvider) Value(value *coreglib.Value) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	*(**C.GValue)(unsafe.Pointer(&_args[1])) = (*C.GValue)(unsafe.Pointer(value.Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_info.InvokeClassMethod("get_value", _args[:], nil)

	runtime.KeepAlive(provider)
	runtime.KeepAlive(value)

	var _goerr error // out

	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _goerr
}

// RefFormats gets the formats that the provider can provide its current
// contents in.
//
// The function returns the following values:
//
//    - contentFormats formats of the provider.
//
func (provider *ContentProvider) RefFormats() *ContentFormats {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_gret := _info.InvokeClassMethod("ref_formats", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _contentFormats
}

// RefStorableFormats gets the formats that the provider suggests other
// applications to store the data in.
//
// An example of such an application would be a clipboard manager.
//
// This can be assumed to be a subset of gdk.ContentProvider.RefFormats().
//
// The function returns the following values:
//
//    - contentFormats: storable formats of the provider.
//
func (provider *ContentProvider) RefStorableFormats() *ContentFormats {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_gret := _info.InvokeClassMethod("ref_storable_formats", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(provider)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _contentFormats
}

// WriteMIMETypeAsync: asynchronously writes the contents of provider to stream
// in the given mime_type.
//
// When the operation is finished callback will be called. You must then call
// gdk.ContentProvider.WriteMIMETypeFinish() to get the result of the operation.
//
// The given mime type does not need to be listed in the formats returned by
// gdk.ContentProvider.RefFormats(). However, if the given GType is not
// supported, IO_ERROR_NOT_SUPPORTED will be reported.
//
// The given stream will not be closed.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - mimeType: mime type to provide the data in.
//    - stream: GOutputStream to write to.
//    - ioPriority: i/O priority of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (provider *ContentProvider) WriteMIMETypeAsync(ctx context.Context, mimeType string, stream gio.OutputStreamer, ioPriority int32, callback gio.AsyncReadyCallback) {
	var _args [7]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[4] = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	*(**C.char)(unsafe.Pointer(&_args[1])) = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_args[1]))))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(*C.int)(unsafe.Pointer(&_args[3])) = C.int(ioPriority)
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[5])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[6] = C.gpointer(gbox.AssignOnce(callback))
	}

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_info.InvokeClassMethod("write_mime_type_async", _args[:], nil)

	runtime.KeepAlive(provider)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// WriteMIMETypeFinish finishes an asynchronous write operation.
//
// See gdk.ContentProvider.WriteMIMETypeAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
func (provider *ContentProvider) WriteMIMETypeFinish(result gio.AsyncResulter) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_info.InvokeClassMethod("write_mime_type_finish", _args[:], nil)

	runtime.KeepAlive(provider)
	runtime.KeepAlive(result)

	var _goerr error // out

	if *(**C.GError)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(*(**C.GError)(unsafe.Pointer(&_cerr))))
	}

	return _goerr
}
