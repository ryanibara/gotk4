// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gdk4_AsyncReadyCallback(void*, void*, gpointer);
// extern void _gotk4_gdk4_Clipboard_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gio2_AsyncReadyCallback(void*, void*, gpointer);
import "C"

// glib.Type values for gdkclipboard.go.
var GTypeClipboard = coreglib.Type(C.gdk_clipboard_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeClipboard, F: marshalClipboard},
	})
}

// Clipboard: GdkClipboard object represents data shared between applications or
// inside an application.
//
// To get a GdkClipboard object, use gdk.Display.GetClipboard() or
// gdk.Display.GetPrimaryClipboard(). You can find out about the data that is
// currently available in a clipboard using gdk.Clipboard.GetFormats().
//
// To make text or image data available in a clipboard, use
// gdk.Clipboard.SetText() or gdk.Clipboard.SetTexture(). For other data, you
// can use gdk.Clipboard.SetContent(), which takes a gdk.ContentProvider object.
//
// To read textual or image data from a clipboard, use
// gdk.Clipboard.ReadTextAsync() or gdk.Clipboard.ReadTextureAsync(). For other
// data, use gdk.Clipboard.ReadAsync(), which provides a GInputStream object.
type Clipboard struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Clipboard)(nil)
)

func wrapClipboard(obj *coreglib.Object) *Clipboard {
	return &Clipboard{
		Object: obj,
	}
}

func marshalClipboard(p uintptr) (interface{}, error) {
	return wrapClipboard(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gdk4_Clipboard_ConnectChanged
func _gotk4_gdk4_Clipboard_ConnectChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectChanged is emitted when the clipboard changes ownership.
func (clipboard *Clipboard) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(clipboard, "changed", false, unsafe.Pointer(C._gotk4_gdk4_Clipboard_ConnectChanged), f)
}

// Content returns the GdkContentProvider currently set on clipboard.
//
// If the clipboard is empty or its contents are not owned by the current
// process, NULL will be returned.
//
// The function returns the following values:
//
//    - contentProvider (optional): content of a clipboard or NULL if the
//      clipboard does not maintain any content.
//
func (clipboard *Clipboard) Content() *ContentProvider {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("get_content", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)

	var _contentProvider *ContentProvider // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_contentProvider = wrapContentProvider(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _contentProvider
}

// Display gets the GdkDisplay that the clipboard was created for.
//
// The function returns the following values:
//
//    - display: GdkDisplay.
//
func (clipboard *Clipboard) Display() *Display {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("get_display", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)

	var _display *Display // out

	_display = wrapDisplay(coreglib.Take(unsafe.Pointer(_cret)))

	return _display
}

// Formats gets the formats that the clipboard can provide its current contents
// in.
//
// The function returns the following values:
//
//    - contentFormats formats of the clipboard.
//
func (clipboard *Clipboard) Formats() *ContentFormats {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("get_formats", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.gdk_content_formats_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _contentFormats
}

// IsLocal returns if the clipboard is local.
//
// A clipboard is considered local if it was last claimed by the running
// application.
//
// Note that gdk.Clipboard.GetContent() may return NULL even on a local
// clipboard. In this case the clipboard is empty.
//
// The function returns the following values:
//
//    - ok: TRUE if the clipboard is local.
//
func (clipboard *Clipboard) IsLocal() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("is_local", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ReadAsync: asynchronously requests an input stream to read the clipboard's
// contents from.
//
// When the operation is finished callback will be called. You must then call
// gdk.Clipboard.ReadFinish() to get the result of the operation.
//
// The clipboard will choose the most suitable mime type from the given list to
// fulfill the request, preferring the ones listed first.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - mimeTypes: NULL-terminated array of mime types to choose from.
//    - ioPriority: i/O priority of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (clipboard *Clipboard) ReadAsync(ctx context.Context, mimeTypes []string, ioPriority int32, callback gio.AsyncReadyCallback) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[3] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	{
		*(***C.void)(unsafe.Pointer(&_args[1])) = (**C.void)(C.calloc(C.size_t((len(mimeTypes) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_args[1]))
		{
			out := unsafe.Slice(_args[1], len(mimeTypes)+1)
			var zero *C.void
			out[len(mimeTypes)] = zero
			for i := range mimeTypes {
				*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(C.CString(mimeTypes[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(ioPriority)
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[4])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[5] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_async", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeTypes)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReadFinish finishes an asynchronous clipboard read.
//
// See gdk.Clipboard.ReadAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - outMimeType (optional): pointer to store the chosen mime type in or NULL.
//    - inputStream (optional): GInputStream or NULL on error.
//
func (clipboard *Clipboard) ReadFinish(result gio.AsyncResulter) (string, gio.InputStreamer, error) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_finish", _args[:], _outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(result)

	var _outMimeType string            // out
	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_outMimeType = C.GoString((*C.gchar)(unsafe.Pointer(_outs[0])))
	}
	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.InputStreamer)
				return ok
			})
			rv, ok := casted.(gio.InputStreamer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
			}
			_inputStream = rv
		}
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _outMimeType, _inputStream, _goerr
}

// ReadTextAsync: asynchronously request the clipboard contents converted to a
// string.
//
// When the operation is finished callback will be called. You must then call
// gdk.Clipboard.ReadTextFinish() to get the result.
//
// This is a simple wrapper around gdk.Clipboard.ReadValueAsync(). Use that
// function or gdk.Clipboard.ReadAsync() directly if you need more control over
// the operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - callback (optional) to call when the request is satisfied.
//
func (clipboard *Clipboard) ReadTextAsync(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[1] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[3] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_text_async", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// ReadTextFinish finishes an asynchronous clipboard read.
//
// See gdk.Clipboard.ReadTextAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - utf8 (optional): new string or NULL on error.
//
func (clipboard *Clipboard) ReadTextFinish(result gio.AsyncResulter) (string, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_text_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(result)

	var _utf8 string // out
	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// ReadTextureAsync: asynchronously request the clipboard contents converted to
// a GdkPixbuf.
//
// When the operation is finished callback will be called. You must then call
// gdk.Clipboard.ReadTextureFinish() to get the result.
//
// This is a simple wrapper around gdk.Clipboard.ReadValueAsync(). Use that
// function or gdk.Clipboard.ReadAsync directly if you need more control over
// the operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - callback (optional) to call when the request is satisfied.
//
func (clipboard *Clipboard) ReadTextureAsync(ctx context.Context, callback gio.AsyncReadyCallback) {
	var _args [4]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[1] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[3] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_texture_async", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// ReadTextureFinish finishes an asynchronous clipboard read.
//
// See gdk.Clipboard.ReadTextureAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - texture (optional): new GdkTexture or NULL on error.
//
func (clipboard *Clipboard) ReadTextureFinish(result gio.AsyncResulter) (Texturer, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_texture_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(result)

	var _texture Texturer // out
	var _goerr error      // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Texturer)
				return ok
			})
			rv, ok := casted.(Texturer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Texturer")
			}
			_texture = rv
		}
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _texture, _goerr
}

// ReadValueFinish finishes an asynchronous clipboard read.
//
// See gdk.Clipboard.ReadValueAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - value: GValue containing the result.
//
func (clipboard *Clipboard) ReadValueFinish(result gio.AsyncResulter) (*coreglib.Value, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("read_value_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(result)

	var _value *coreglib.Value // out
	var _goerr error           // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _value, _goerr
}

// SetContent sets a new content provider on clipboard.
//
// The clipboard will claim the GdkDisplay's resources and advertise these new
// contents to other applications.
//
// In the rare case of a failure, this function will return FALSE. The clipboard
// will then continue reporting its old contents and ignore provider.
//
// If the contents are read by either an external application or the clipboard's
// read functions, clipboard will select the best format to transfer the
// contents and then request that format from provider.
//
// The function takes the following parameters:
//
//    - provider (optional): new contents of clipboard or NULL to clear the
//      clipboard.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the clipboard succeeded.
//
func (clipboard *Clipboard) SetContent(provider *ContentProvider) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	if provider != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	}

	_gret := girepository.MustFind("Gdk", "Clipboard").InvokeMethod("set_content", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(provider)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetText puts the given text into the clipboard.
//
// The function takes the following parameters:
//
//    - text: text to put into the clipboard.
//
func (clipboard *Clipboard) SetText(text string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("set_text", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(text)
}

// SetTexture puts the given texture into the clipboard.
//
// The function takes the following parameters:
//
//    - texture: GdkTexture to put into the clipboard.
//
func (clipboard *Clipboard) SetTexture(texture Texturer) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(texture).Native()))

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("set_texture", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(texture)
}

// Set sets the clipboard to contain the given value.
//
// The function takes the following parameters:
//
//    - value: GValue to set.
//
func (clipboard *Clipboard) Set(value *coreglib.Value) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(value.Native()))

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("set_value", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(value)
}

// StoreAsync: asynchronously instructs the clipboard to store its contents
// remotely.
//
// If the clipboard is not local, this function does nothing but report success.
//
// The callback must call gdk.Clipboard.StoreFinish().
//
// The purpose of this call is to preserve clipboard contents beyond the
// lifetime of an application, so this function is typically called on exit.
// Depending on the platform, the functionality may not be available unless a
// "clipboard manager" is running.
//
// This function is called automatically when a gtk.Application is shut down, so
// you likely don't need to call it.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - ioPriority: i/O priority of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (clipboard *Clipboard) StoreAsync(ctx context.Context, ioPriority int32, callback gio.AsyncReadyCallback) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[2] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(ioPriority)
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[3])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[4] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("store_async", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// StoreFinish finishes an asynchronous clipboard store.
//
// See gdk.Clipboard.StoreAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
func (clipboard *Clipboard) StoreFinish(result gio.AsyncResulter) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(clipboard).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	girepository.MustFind("Gdk", "Clipboard").InvokeMethod("store_finish", _args[:], nil)

	runtime.KeepAlive(clipboard)
	runtime.KeepAlive(result)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
