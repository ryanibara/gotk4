// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gdk4_AsyncReadyCallback(void*, void*, gpointer);
// extern void _gotk4_gio2_AsyncReadyCallback(void*, void*, gpointer);
import "C"

// glib.Type values for gdkdrop.go.
var GTypeDrop = coreglib.Type(C.gdk_drop_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeDrop, F: marshalDrop},
	})
}

// Drop: GdkDrop object represents the target of an ongoing DND operation.
//
// Possible drop sites get informed about the status of the ongoing drag
// operation with events of type GDK_DRAG_ENTER, GDK_DRAG_LEAVE, GDK_DRAG_MOTION
// and GDK_DROP_START. The GdkDrop object can be obtained from these gdk.Event
// types using gdk.DNDEvent.GetDrop().
//
// The actual data transfer is initiated from the target side via an async read,
// using one of the GdkDrop methods for this purpose: gdk.Drop.ReadAsync() or
// gdk.Drop.ReadValueAsync().
//
// GTK provides a higher level abstraction based on top of these functions, and
// so they are not normally needed in GTK applications. See the "Drag and Drop"
// section of the GTK documentation for more information.
type Drop struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Drop)(nil)
)

// Dropper describes types inherited from class Drop.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Dropper interface {
	coreglib.Objector
	baseDrop() *Drop
}

var _ Dropper = (*Drop)(nil)

func wrapDrop(obj *coreglib.Object) *Drop {
	return &Drop{
		Object: obj,
	}
}

func marshalDrop(p uintptr) (interface{}, error) {
	return wrapDrop(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *Drop) baseDrop() *Drop {
	return self
}

// BaseDrop returns the underlying base object.
func BaseDrop(obj Dropper) *Drop {
	return obj.baseDrop()
}

// Device returns the GdkDevice performing the drop.
//
// The function returns the following values:
//
//    - device: GdkDevice performing the drop.
//
func (self *Drop) Device() Devicer {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("get_device", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _device Devicer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Devicer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Devicer)
			return ok
		})
		rv, ok := casted.(Devicer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Devicer")
		}
		_device = rv
	}

	return _device
}

// Display gets the GdkDisplay that self was created for.
//
// The function returns the following values:
//
//    - display: GdkDisplay.
//
func (self *Drop) Display() *Display {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("get_display", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _display *Display // out

	_display = wrapDisplay(coreglib.Take(unsafe.Pointer(_cret)))

	return _display
}

// Drag: if this is an in-app drag-and-drop operation, returns the GdkDrag that
// corresponds to this drop.
//
// If it is not, NULL is returned.
//
// The function returns the following values:
//
//    - drag (optional): corresponding GdkDrag.
//
func (self *Drop) Drag() Dragger {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("get_drag", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _drag Dragger // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Dragger)
				return ok
			})
			rv, ok := casted.(Dragger)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Dragger")
			}
			_drag = rv
		}
	}

	return _drag
}

// Formats returns the GdkContentFormats that the drop offers the data to be
// read in.
//
// The function returns the following values:
//
//    - contentFormats: possible GdkContentFormats.
//
func (self *Drop) Formats() *ContentFormats {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("get_formats", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _contentFormats *ContentFormats // out

	_contentFormats = (*ContentFormats)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.gdk_content_formats_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_contentFormats)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gdk_content_formats_unref((*C.GdkContentFormats)(intern.C))
		},
	)

	return _contentFormats
}

// Surface returns the GdkSurface performing the drop.
//
// The function returns the following values:
//
//    - surface: GdkSurface performing the drop.
//
func (self *Drop) Surface() Surfacer {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("get_surface", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)

	var _surface Surfacer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Surfacer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Surfacer)
			return ok
		})
		rv, ok := casted.(Surfacer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Surfacer")
		}
		_surface = rv
	}

	return _surface
}

// ReadAsync: asynchronously read the dropped data from a GdkDrop in a format
// that complies with one of the mime types.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional GCancellable object, NULL to ignore.
//    - mimeTypes: pointer to an array of mime types.
//    - ioPriority: i/O priority for the read operation.
//    - callback (optional): GAsyncReadyCallback to call when the request is
//      satisfied.
//
func (self *Drop) ReadAsync(ctx context.Context, mimeTypes []string, ioPriority int32, callback gio.AsyncReadyCallback) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[3] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	{
		*(***C.void)(unsafe.Pointer(&_args[1])) = (**C.void)(C.calloc(C.size_t((len(mimeTypes) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_args[1]))
		{
			out := unsafe.Slice(_args[1], len(mimeTypes)+1)
			var zero *C.void
			out[len(mimeTypes)] = zero
			for i := range mimeTypes {
				*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(C.CString(mimeTypes[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	*(*C.int)(unsafe.Pointer(&_args[2])) = C.int(ioPriority)
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[4])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[5] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gdk", "Drop").InvokeMethod("read_async", _args[:], nil)

	runtime.KeepAlive(self)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(mimeTypes)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReadFinish finishes an async drop read operation.
//
// Note that you must not use blocking read calls on the returned stream in the
// GTK thread, since some platforms might require communication with GTK to
// complete the data transfer. You can use async APIs such as
// g_input_stream_read_bytes_async().
//
// See gdk.Drop.ReadAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - outMimeType: return location for the used mime type.
//    - inputStream (optional): GInputStream, or NULL.
//
func (self *Drop) ReadFinish(result gio.AsyncResulter) (string, gio.InputStreamer, error) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("read_finish", _args[:], _outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _outMimeType string            // out
	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	_outMimeType = C.GoString((*C.gchar)(unsafe.Pointer(_outs[0])))
	defer C.free(unsafe.Pointer(_outs[0]))
	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(gio.InputStreamer)
				return ok
			})
			rv, ok := casted.(gio.InputStreamer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
			}
			_inputStream = rv
		}
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _outMimeType, _inputStream, _goerr
}

// ReadValueFinish finishes an async drop read.
//
// See gdk.Drop.ReadValueAsync().
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
// The function returns the following values:
//
//    - value: GValue containing the result.
//
func (self *Drop) ReadValueFinish(result gio.AsyncResulter) (*coreglib.Value, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gdk", "Drop").InvokeMethod("read_value_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _value *coreglib.Value // out
	var _goerr error           // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _value, _goerr
}
