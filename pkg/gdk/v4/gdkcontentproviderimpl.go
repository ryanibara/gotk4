// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// NewContentProviderForBytes: create a content provider that provides the given
// bytes as data for the given mime_type.
//
// The function takes the following parameters:
//
//    - mimeType: mime type.
//    - bytes: GBytes with the data for mime_type.
//
// The function returns the following values:
//
//    - contentProvider: new GdkContentProvider.
//
func NewContentProviderForBytes(mimeType string, bytes *glib.Bytes) *ContentProvider {
	var _args [2]girepository.Argument

	*(**C.char)(unsafe.Pointer(&_args[0])) = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_args[0]))))
	*(**C.GBytes)(unsafe.Pointer(&_args[1])) = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_gret := _info.InvokeClassMethod("new_ContentProvider_for_bytes", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mimeType)
	runtime.KeepAlive(bytes)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _contentProvider
}

// NewContentProviderForValue: create a content provider that provides the given
// value.
//
// The function takes the following parameters:
//
//    - value: GValue.
//
// The function returns the following values:
//
//    - contentProvider: new GdkContentProvider.
//
func NewContentProviderForValue(value *coreglib.Value) *ContentProvider {
	var _args [1]girepository.Argument

	*(**C.GValue)(unsafe.Pointer(&_args[0])) = (*C.GValue)(unsafe.Pointer(value.Native()))

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_gret := _info.InvokeClassMethod("new_ContentProvider_for_value", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(value)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _contentProvider
}

// NewContentProviderUnion creates a content provider that represents all the
// given providers.
//
// Whenever data needs to be written, the union provider will try the given
// providers in the given order and the first one supporting a format will be
// chosen to provide it.
//
// This allows an easy way to support providing data in different formats. For
// example, an image may be provided by its file and by the image contents with
// a call such as
//
//    gdk_content_provider_new_union ((GdkContentProvider *[2]) {
//                                      gdk_content_provider_new_typed (G_TYPE_FILE, file),
//                                      gdk_content_provider_new_typed (G_TYPE_TEXTURE, texture)
//                                    }, 2);.
//
// The function takes the following parameters:
//
//    - providers (optional): The ContentProviders to present the union of.
//
// The function returns the following values:
//
//    - contentProvider: new GdkContentProvider.
//
func NewContentProviderUnion(providers []*ContentProvider) *ContentProvider {
	var _args [2]girepository.Argument

	if providers != nil {
		*(*C.gsize)(unsafe.Pointer(&_args[1])) = (C.gsize)(len(providers))
		*(***C.void)(unsafe.Pointer(&_args[0])) = (**C.void)(C.calloc(C.size_t(len(providers)), C.size_t(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice((**C.void)(*(***C.void)(unsafe.Pointer(&_args[0]))), len(providers))
			for i := range providers {
				*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(providers[i]).Native()))
				C.g_object_ref(C.gpointer(coreglib.InternObject(providers[i]).Native()))
			}
		}
	}

	_info := girepository.MustFind("Gdk", "ContentProvider")
	_gret := _info.InvokeClassMethod("new_ContentProvider_union", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(providers)

	var _contentProvider *ContentProvider // out

	_contentProvider = wrapContentProvider(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _contentProvider
}
