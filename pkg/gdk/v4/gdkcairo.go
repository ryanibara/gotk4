// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// CairoRectangle adds the given rectangle to the current path of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - rectangle: Rectangle.
//
func CairoRectangle(cr *cairo.Context, rectangle *Rectangle) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(rectangle)))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**Rectangle)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_rectangle").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(rectangle)
}

// CairoRegion adds the given region to the current path of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - region: #cairo_region_t.
//
func CairoRegion(cr *cairo.Context, region *cairo.Region) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(unsafe.Pointer(region.Native()))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**cairo.Region)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_region").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(region)
}

// CairoRegionCreateFromSurface creates region that covers the area where the
// given surface is more than 50% opaque.
//
// This function takes into account device offsets that might be set with
// cairo_surface_set_device_offset().
//
// The function takes the following parameters:
//
//    - surface: cairo surface.
//
// The function returns the following values:
//
//    - region: cairo_region_t; must be freed with cairo_region_destroy().
//
func CairoRegionCreateFromSurface(surface *cairo.Surface) *cairo.Region {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(surface.Native()))
	*(**cairo.Surface)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gdk", "cairo_region_create_from_surface").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(surface)

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	return _region
}

// CairoSetSourceRGBA sets the specified RGBA as the source color of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - rgba: RGBA.
//
func CairoSetSourceRGBA(cr *cairo.Context, rgba *RGBA) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(rgba)))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**RGBA)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_set_source_rgba").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(rgba)
}
