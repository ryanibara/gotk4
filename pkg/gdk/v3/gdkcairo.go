// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// CairoCreate creates a Cairo context for drawing to window.
//
// Note that calling cairo_reset_clip() on the resulting #cairo_t will produce
// undefined results, so avoid it at all costs.
//
// Typically, this function is used to draw on a Window out of the paint cycle
// of the toolkit; this should be avoided, as it breaks various assumptions and
// optimizations.
//
// If you are drawing on a native Window in response to a GDK_EXPOSE event you
// should use gdk_window_begin_draw_frame() and
// gdk_drawing_context_get_cairo_context() instead. GTK will automatically do
// this for you when drawing a widget.
//
// Deprecated: Use gdk_window_begin_draw_frame() and
// gdk_drawing_context_get_cairo_context() instead.
//
// The function takes the following parameters:
//
//    - window: Window.
//
// The function returns the following values:
//
//    - context: newly created Cairo context. Free with cairo_destroy() when you
//      are done drawing.
//
func CairoCreate(window Windower) *cairo.Context {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	*(*Windower)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gdk", "cairo_create").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(window)

	var _context *cairo.Context // out

	_context = cairo.WrapContext(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_context, func(v *cairo.Context) {
		C.cairo_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	return _context
}

// CairoGetDrawingContext retrieves the DrawingContext that created the Cairo
// context cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//
// The function returns the following values:
//
//    - drawingContext (optional) if any is set.
//
func CairoGetDrawingContext(cr *cairo.Context) *DrawingContext {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gdk", "cairo_get_drawing_context").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(cr)

	var _drawingContext *DrawingContext // out

	if _cret != nil {
		_drawingContext = wrapDrawingContext(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _drawingContext
}

// CairoRectangle adds the given rectangle to the current path of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - rectangle: Rectangle.
//
func CairoRectangle(cr *cairo.Context, rectangle *Rectangle) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(rectangle)))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**Rectangle)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_rectangle").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(rectangle)
}

// CairoRegion adds the given region to the current path of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - region: #cairo_region_t.
//
func CairoRegion(cr *cairo.Context, region *cairo.Region) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(unsafe.Pointer(region.Native()))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**cairo.Region)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_region").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(region)
}

// CairoRegionCreateFromSurface creates region that describes covers the area
// where the given surface is more than 50% opaque.
//
// This function takes into account device offsets that might be set with
// cairo_surface_set_device_offset().
//
// The function takes the following parameters:
//
//    - surface: cairo surface.
//
// The function returns the following values:
//
//    - region must be freed with cairo_region_destroy().
//
func CairoRegionCreateFromSurface(surface *cairo.Surface) *cairo.Region {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(surface.Native()))
	*(**cairo.Surface)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gdk", "cairo_region_create_from_surface").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(surface)

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})

	return _region
}

// CairoSetSourceColor sets the specified Color as the source color of cr.
//
// Deprecated: Use gdk_cairo_set_source_rgba() instead.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - color: Color.
//
func CairoSetSourceColor(cr *cairo.Context, color *Color) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**Color)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_set_source_color").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(color)
}

// CairoSetSourcePixbuf sets the given pixbuf as the source pattern for cr.
//
// The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned so that
// the origin of pixbuf is pixbuf_x, pixbuf_y.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - pixbuf: Pixbuf.
//    - pixbufX: x coordinate of location to place upper left corner of pixbuf.
//    - pixbufY: y coordinate of location to place upper left corner of pixbuf.
//
func CairoSetSourcePixbuf(cr *cairo.Context, pixbuf *gdkpixbuf.Pixbuf, pixbufX, pixbufY float64) {
	var args [4]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _arg2 C.gdouble // out
	var _arg3 C.gdouble // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	_arg2 = C.gdouble(pixbufX)
	_arg3 = C.gdouble(pixbufY)
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**gdkpixbuf.Pixbuf)(unsafe.Pointer(&args[1])) = _arg1
	*(*float64)(unsafe.Pointer(&args[2])) = _arg2
	*(*float64)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gdk", "cairo_set_source_pixbuf").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(pixbufX)
	runtime.KeepAlive(pixbufY)
}

// CairoSetSourceRGBA sets the specified RGBA as the source color of cr.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - rgba: RGBA.
//
func CairoSetSourceRGBA(cr *cairo.Context, rgba *RGBA) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(rgba)))
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(**RGBA)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gdk", "cairo_set_source_rgba").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(rgba)
}

// CairoSetSourceWindow sets the given window as the source pattern for cr.
//
// The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned so that
// the origin of window is x, y. The window contains all its subwindows when
// rendering.
//
// Note that the contents of window are undefined outside of the visible part of
// window, so use this function with care.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - window: Window.
//    - x: x coordinate of location to place upper left corner of window.
//    - y: y coordinate of location to place upper left corner of window.
//
func CairoSetSourceWindow(cr *cairo.Context, window Windower, x, y float64) {
	var args [4]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _arg2 C.gdouble // out
	var _arg3 C.gdouble // out

	_arg0 = (*C.void)(unsafe.Pointer(cr.Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = C.gdouble(x)
	_arg3 = C.gdouble(y)
	*(**cairo.Context)(unsafe.Pointer(&args[0])) = _arg0
	*(*Windower)(unsafe.Pointer(&args[1])) = _arg1
	*(*float64)(unsafe.Pointer(&args[2])) = _arg2
	*(*float64)(unsafe.Pointer(&args[3])) = _arg3

	girepository.MustFind("Gdk", "cairo_set_source_window").Invoke(args[:], nil)

	runtime.KeepAlive(cr)
	runtime.KeepAlive(window)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}
