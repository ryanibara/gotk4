// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// Beep emits a short beep associated to window in the appropriate display, if
// supported. Otherwise, emits a short beep on the display just as
// gdk_display_beep().
func (window *Window) Beep() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_beep(_arg0)
	runtime.KeepAlive(window)
}

// SetComposited sets a Window as composited, or unsets it. Composited windows
// do not automatically have their contents drawn to the screen. Drawing is
// redirected to an offscreen buffer and an expose event is emitted on the
// parent of the composited window. It is the responsibility of the parentâ€™s
// expose handler to manually merge the off-screen content onto the screen in
// whatever way it sees fit.
//
// It only makes sense for child windows to be composited; see
// gdk_window_set_opacity() if you need translucent toplevel windows.
//
// An additional effect of this call is that the area of this window is no
// longer clipped from regions marked for invalidation on its parent. Draws done
// on the parent window are also no longer clipped by the child.
//
// This call is only supported on some systems (currently, only X11 with new
// enough Xcomposite and Xdamage extensions). You must call
// gdk_display_supports_composite() to check if setting a window as composited
// is supported before attempting to do so.
//
// Deprecated: Compositing is an outdated technology that only ever worked on
// X11.
//
// The function takes the following parameters:
//
//    - composited: TRUE to set the window as composited.
//
func (window *Window) SetComposited(composited bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if composited {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_composited(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(composited)
}

// SetOpacity: set window to render as partially transparent, with opacity 0
// being fully transparent and 1 fully opaque. (Values of the opacity parameter
// are clamped to the [0,1] range.)
//
// For toplevel windows this depends on support from the windowing system that
// may not always be there. For instance, On X11, this works only on X screens
// with a compositing manager running. On Wayland, there is no per-window
// opacity value that the compositor would apply. Instead, use
// gdk_window_set_opaque_region (window, NULL) to tell the compositor that the
// entire window is (potentially) non-opaque, and draw your content with alpha,
// or use gtk_widget_set_opacity() to set an overall opacity for your widgets.
//
// For child windows this function only works for non-native windows.
//
// For setting up per-pixel alpha topelevels, see gdk_screen_get_rgba_visual(),
// and for non-toplevels, see gdk_window_set_composited().
//
// Support for non-toplevel windows was added in 3.8.
//
// The function takes the following parameters:
//
//    - opacity: opacity.
//
func (window *Window) SetOpacity(opacity float64) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gdouble(opacity)

	C.gdk_window_set_opacity(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(opacity)
}

// SetStartupID: when using GTK+, typically you should use
// gtk_window_set_startup_id() instead of this low-level function.
//
// The function takes the following parameters:
//
//    - startupId: string with startup-notification identifier.
//
func (window *Window) SetStartupID(startupId string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(startupId)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_startup_id(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(startupId)
}
