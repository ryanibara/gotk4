// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// Fullscreen moves the window into fullscreen mode. This means the window
// covers the entire screen and is above any panels or task bars.
//
// If the window was already fullscreen, then this function does nothing.
//
// On X11, asks the window manager to put window in a fullscreen state, if the
// window manager supports this operation. Not all window managers support this,
// and some deliberately ignore it or don’t have a concept of “fullscreen”; so
// you can’t rely on the fullscreenification actually happening. But it will
// happen with most standard window managers, and GDK makes a best effort to get
// it to happen.
func (window *Window) Fullscreen() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_fullscreen(_arg0)
	runtime.KeepAlive(window)
}

// SetSkipPagerHint toggles whether a window should appear in a pager (workspace
// switcher, or other desktop utility program that displays a small thumbnail
// representation of the windows on the desktop). If a window’s semantic type as
// specified with gdk_window_set_type_hint() already fully describes the window,
// this function should not be called in addition, instead you should allow the
// window to be treated according to standard policy for its semantic type.
//
// The function takes the following parameters:
//
//    - skipsPager: TRUE to skip the pager.
//
func (window *Window) SetSkipPagerHint(skipsPager bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if skipsPager {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_skip_pager_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(skipsPager)
}

// SetSkipTaskbarHint toggles whether a window should appear in a task list or
// window list. If a window’s semantic type as specified with
// gdk_window_set_type_hint() already fully describes the window, this function
// should not be called in addition, instead you should allow the window to be
// treated according to standard policy for its semantic type.
//
// The function takes the following parameters:
//
//    - skipsTaskbar: TRUE to skip the taskbar.
//
func (window *Window) SetSkipTaskbarHint(skipsTaskbar bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if skipsTaskbar {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_skip_taskbar_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(skipsTaskbar)
}

// Unfullscreen moves the window out of fullscreen mode. If the window was not
// fullscreen, does nothing.
//
// On X11, asks the window manager to move window out of the fullscreen state,
// if the window manager supports this operation. Not all window managers
// support this, and some deliberately ignore it or don’t have a concept of
// “fullscreen”; so you can’t rely on the unfullscreenification actually
// happening. But it will happen with most standard window managers, and GDK
// makes a best effort to get it to happen.
func (window *Window) Unfullscreen() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_unfullscreen(_arg0)
	runtime.KeepAlive(window)
}
