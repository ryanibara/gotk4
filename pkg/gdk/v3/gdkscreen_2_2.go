// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// #include <glib-object.h>
import "C"

// Display gets the display to which the screen belongs.
//
// The function returns the following values:
//
//    - display to which screen belongs.
//
func (screen *Screen) Display() *Display {
	var _arg0 *C.GdkScreen  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_display(_arg0)
	runtime.KeepAlive(screen)

	var _display *Display // out

	_display = wrapDisplay(coreglib.Take(unsafe.Pointer(_cret)))

	return _display
}

// Height gets the height of screen in pixels. The returned size is in
// ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
//
// Deprecated: Use per-monitor information instead.
//
// The function returns the following values:
//
//    - gint: height of screen in pixels.
//
func (screen *Screen) Height() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_height(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// HeightMm returns the height of screen in millimeters.
//
// Note that this value is somewhat ill-defined when the screen has multiple
// monitors of different resolution. It is recommended to use the monitor
// dimensions instead.
//
// Deprecated: Use per-monitor information instead.
//
// The function returns the following values:
//
//    - gint: heigth of screen in millimeters.
//
func (screen *Screen) HeightMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_height_mm(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MonitorAtPoint returns the monitor number in which the point (x,y) is
// located.
//
// Deprecated: Use gdk_display_get_monitor_at_point() instead.
//
// The function takes the following parameters:
//
//    - x coordinate in the virtual screen.
//    - y coordinate in the virtual screen.
//
// The function returns the following values:
//
//    - gint: monitor number in which the point (x,y) lies, or a monitor close to
//      (x,y) if the point is not in any monitor.
//
func (screen *Screen) MonitorAtPoint(x, y int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	_cret = C.gdk_screen_get_monitor_at_point(_arg0, _arg1, _arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MonitorAtWindow returns the number of the monitor in which the largest area
// of the bounding rectangle of window resides.
//
// Deprecated: Use gdk_display_get_monitor_at_window() instead.
//
// The function takes the following parameters:
//
//    - window: Window.
//
// The function returns the following values:
//
//    - gint: monitor number in which most of window is located, or if window
//      does not intersect any monitors, a monitor, close to window.
//
func (screen *Screen) MonitorAtWindow(window Windower) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.GdkWindow // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_screen_get_monitor_at_window(_arg0, _arg1)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(window)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MonitorGeometry retrieves the Rectangle representing the size and position of
// the individual monitor within the entire screen area. The returned geometry
// is in ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
//
// Monitor numbers start at 0. To obtain the number of monitors of screen, use
// gdk_screen_get_n_monitors().
//
// Note that the size of the entire screen area can be retrieved via
// gdk_screen_get_width() and gdk_screen_get_height().
//
// Deprecated: Use gdk_monitor_get_geometry() instead.
//
// The function takes the following parameters:
//
//    - monitorNum: monitor number.
//
// The function returns the following values:
//
//    - dest (optional) to be filled with the monitor geometry.
//
func (screen *Screen) MonitorGeometry(monitorNum int) *Rectangle {
	var _arg0 *C.GdkScreen   // out
	var _arg1 C.gint         // out
	var _arg2 C.GdkRectangle // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(monitorNum)

	C.gdk_screen_get_monitor_geometry(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(monitorNum)

	var _dest *Rectangle // out

	_dest = (*Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _dest
}

// NMonitors returns the number of monitors which screen consists of.
//
// Deprecated: Use gdk_display_get_n_monitors() instead.
//
// The function returns the following values:
//
//    - gint: number of monitors which screen consists of.
//
func (screen *Screen) NMonitors() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_n_monitors(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Number gets the index of screen among the screens in the display to which it
// belongs. (See gdk_screen_get_display())
//
// Deprecated: since version 3.22.
//
// The function returns the following values:
//
//    - gint: index.
//
func (screen *Screen) Number() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_number(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RootWindow gets the root window of screen.
//
// The function returns the following values:
//
//    - window: root window.
//
func (screen *Screen) RootWindow() Windower {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_root_window(_arg0)
	runtime.KeepAlive(screen)

	var _window Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	return _window
}

// Setting retrieves a desktop-wide setting such as double-click time for the
// Screen screen.
//
// FIXME needs a list of valid settings here, or a link to more information.
//
// The function takes the following parameters:
//
//    - name of the setting.
//    - value: location to store the value of the setting.
//
// The function returns the following values:
//
//    - ok: TRUE if the setting existed and a value was stored in value, FALSE
//      otherwise.
//
func (screen *Screen) Setting(name string, value *coreglib.Value) bool {
	var _arg0 *C.GdkScreen // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GValue    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.gdk_screen_get_setting(_arg0, _arg1, _arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SystemVisual: get the system’s default visual for screen. This is the visual
// for the root window of the display. The return value should not be freed.
//
// The function returns the following values:
//
//    - visual: system visual.
//
func (screen *Screen) SystemVisual() *Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_system_visual(_arg0)
	runtime.KeepAlive(screen)

	var _visual *Visual // out

	_visual = wrapVisual(coreglib.Take(unsafe.Pointer(_cret)))

	return _visual
}

// ToplevelWindows obtains a list of all toplevel windows known to GDK on the
// screen screen. A toplevel window is a child of the root window (see
// gdk_get_default_root_window()).
//
// The returned list should be freed with g_list_free(), but its elements need
// not be freed.
//
// The function returns the following values:
//
//    - list: list of toplevel windows, free with g_list_free().
//
func (screen *Screen) ToplevelWindows() []Windower {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GList     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_toplevel_windows(_arg0)
	runtime.KeepAlive(screen)

	var _list []Windower // out

	_list = make([]Windower, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GdkWindow)(v)
		var dst Windower // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gdk.Windower is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// Width gets the width of screen in pixels. The returned size is in
// ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
//
// Deprecated: Use per-monitor information instead.
//
// The function returns the following values:
//
//    - gint: width of screen in pixels.
//
func (screen *Screen) Width() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_width(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// WidthMm gets the width of screen in millimeters.
//
// Note that this value is somewhat ill-defined when the screen has multiple
// monitors of different resolution. It is recommended to use the monitor
// dimensions instead.
//
// Deprecated: Use per-monitor information instead.
//
// The function returns the following values:
//
//    - gint: width of screen in millimeters.
//
func (screen *Screen) WidthMm() int {
	var _arg0 *C.GdkScreen // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_width_mm(_arg0)
	runtime.KeepAlive(screen)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ListVisuals lists the available visuals for the specified screen. A visual
// describes a hardware image data format. For example, a visual might support
// 24-bit color, or 8-bit color, and might expect pixels to be in a certain
// format.
//
// Call g_list_free() on the return value when you’re finished with it.
//
// The function returns the following values:
//
//    - list: a list of visuals; the list must be freed, but not its contents.
//
func (screen *Screen) ListVisuals() []*Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GList     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_list_visuals(_arg0)
	runtime.KeepAlive(screen)

	var _list []*Visual // out

	_list = make([]*Visual, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GdkVisual)(v)
		var dst *Visual // out
		dst = wrapVisual(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// MakeDisplayName determines the name to pass to gdk_display_open() to get a
// Display with this screen as the default screen.
//
// Deprecated: since version 3.22.
//
// The function returns the following values:
//
//    - utf8: newly allocated string, free with g_free().
//
func (screen *Screen) MakeDisplayName() string {
	var _arg0 *C.GdkScreen // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_make_display_name(_arg0)
	runtime.KeepAlive(screen)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ScreenGetDefault gets the default screen for the default display. (See
// gdk_display_get_default ()).
//
// The function returns the following values:
//
//    - screen (optional) or NULL if there is no default display.
//
func ScreenGetDefault() *Screen {
	var _cret *C.GdkScreen // in

	_cret = C.gdk_screen_get_default()

	var _screen *Screen // out

	if _cret != nil {
		_screen = wrapScreen(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _screen
}
