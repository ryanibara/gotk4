// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// PassThrough returns whether input to the window is passed through to the
// window below.
//
// See gdk_window_set_pass_through() for details.
//
// The function returns the following values:
//
func (window *Window) PassThrough() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_pass_through(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPassThrough sets whether input to the window is passed through to the
// window below.
//
// The default value of this is FALSE, which means that pointer events that
// happen inside the window are send first to the window, but if the event is
// not selected by the event mask then the event is sent to the parent window,
// and so on up the hierarchy.
//
// If pass_through is TRUE then such pointer events happen as if the window
// wasn't there at all, and thus will be sent first to any windows below window.
// This is useful if the window is used in a transparent fashion. In the
// terminology of the web this would be called "pointer-events: none".
//
// Note that a window with pass_through TRUE can still have a subwindow without
// pass through, so you can get events on a subset of a window. And in that
// cases you would get the in-between related events such as the pointer
// enter/leave events on its way to the destination window.
//
// The function takes the following parameters:
//
//    - passThrough: boolean.
//
func (window *Window) SetPassThrough(passThrough bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if passThrough {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_pass_through(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(passThrough)
}
