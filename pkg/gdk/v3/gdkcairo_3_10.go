// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// CairoSurfaceCreateFromPixbuf creates an image surface with the same contents
// as the pixbuf.
//
// The function takes the following parameters:
//
//    - pixbuf: Pixbuf.
//    - scale of the new surface, or 0 to use same as window.
//    - forWindow (optional): window this will be drawn to, or NULL.
//
// The function returns the following values:
//
//    - surface: new cairo surface, must be freed with cairo_surface_destroy().
//
func CairoSurfaceCreateFromPixbuf(pixbuf *gdkpixbuf.Pixbuf, scale int, forWindow Windower) *cairo.Surface {
	var _arg1 *C.GdkPixbuf       // out
	var _arg2 C.int              // out
	var _arg3 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	_arg2 = C.int(scale)
	if forWindow != nil {
		_arg3 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(forWindow).Native()))
	}

	_cret = C.gdk_cairo_surface_create_from_pixbuf(_arg1, _arg2, _arg3)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(scale)
	runtime.KeepAlive(forWindow)

	var _surface *cairo.Surface // out

	_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
	})

	return _surface
}
