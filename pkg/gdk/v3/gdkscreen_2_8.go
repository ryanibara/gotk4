// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// RGBAVisual gets a visual to use for creating windows with an alpha channel.
// The windowing system on which GTK+ is running may not support this
// capability, in which case NULL will be returned. Even if a non-NULL value is
// returned, its possible that the window’s alpha channel won’t be honored when
// displaying the window on the screen: in particular, for X an appropriate
// windowing manager and compositing manager must be running to provide
// appropriate display.
//
// This functionality is not implemented in the Windows backend.
//
// For setting an overall opacity for a top-level window, see
// gdk_window_set_opacity().
//
// The function returns the following values:
//
//    - visual (optional) to use for windows with an alpha channel or NULL if the
//      capability is not available.
//
func (screen *Screen) RGBAVisual() *Visual {
	var _arg0 *C.GdkScreen // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))

	_cret = C.gdk_screen_get_rgba_visual(_arg0)
	runtime.KeepAlive(screen)

	var _visual *Visual // out

	if _cret != nil {
		_visual = wrapVisual(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _visual
}
