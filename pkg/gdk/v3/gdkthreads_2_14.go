// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// extern void callbackDelete(gpointer);
// extern gboolean _gotk4_glib2_SourceFunc(gpointer);
// extern gboolean _gotk4_gdk3_SourceFunc(gpointer);
import "C"

// ThreadsAddTimeoutSeconds: variant of gdk_threads_add_timeout_full() with
// second-granularity. See g_timeout_add_seconds_full() for a discussion of why
// it is a good idea to use this function if you donâ€™t need finer granularity.
//
// The function takes the following parameters:
//
//    - priority of the timeout source. Typically this will be in the range
//      between PRIORITY_DEFAULT_IDLE and PRIORITY_HIGH_IDLE.
//    - interval: time between calls to the function, in seconds.
//    - function to call.
//
// The function returns the following values:
//
//    - guint: ID (greater than 0) of the event source.
//
func ThreadsAddTimeoutSeconds(priority int, interval uint, function glib.SourceFunc) uint {
	var _arg1 C.gint        // out
	var _arg2 C.guint       // out
	var _arg3 C.GSourceFunc // out
	var _arg4 C.gpointer
	var _arg5 C.GDestroyNotify
	var _cret C.guint // in

	_arg1 = C.gint(priority)
	_arg2 = C.guint(interval)
	_arg3 = (*[0]byte)(C._gotk4_glib2_SourceFunc)
	_arg4 = C.gpointer(gbox.Assign(function))
	_arg5 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))

	_cret = C.gdk_threads_add_timeout_seconds_full(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(priority)
	runtime.KeepAlive(interval)
	runtime.KeepAlive(function)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}
