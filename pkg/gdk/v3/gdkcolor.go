// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeColor returns the GType for the type Color.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeColor() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gdk", "Color").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalColor)
	return gtype
}

// Color is used to describe a color, similar to the XColor struct used in the
// X11 drawing API.
//
// Deprecated: Use RGBA.
//
// An instance of this type is always passed by reference.
type Color struct {
	*color
}

// color is the struct that's finalized.
type color struct {
	native unsafe.Pointer
}

func marshalColor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Color{&color{(unsafe.Pointer)(b)}}, nil
}

// Pixel: for allocated colors, the pixel value used to draw this color on the
// screen. Not used anymore.
func (c *Color) Pixel() uint32 {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("pixel")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	var v uint32 // out
	v = uint32(*(*C.guint32)(unsafe.Pointer(&*valptr)))
	return v
}

// Red: red component of the color. This is a value between 0 and 65535, with
// 65535 indicating full intensity.
func (c *Color) Red() uint16 {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("red")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	var v uint16 // out
	v = uint16(*(*C.guint16)(unsafe.Pointer(&*valptr)))
	return v
}

// Green: green component of the color.
func (c *Color) Green() uint16 {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("green")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	var v uint16 // out
	v = uint16(*(*C.guint16)(unsafe.Pointer(&*valptr)))
	return v
}

// Blue: blue component of the color.
func (c *Color) Blue() uint16 {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("blue")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	var v uint16 // out
	v = uint16(*(*C.guint16)(unsafe.Pointer(&*valptr)))
	return v
}

// Pixel: for allocated colors, the pixel value used to draw this color on the
// screen. Not used anymore.
func (c *Color) SetPixel(pixel uint32) {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("pixel")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	*(*C.guint32)(unsafe.Pointer(&*valptr)) = C.guint32(pixel)
}

// Red: red component of the color. This is a value between 0 and 65535, with
// 65535 indicating full intensity.
func (c *Color) SetRed(red uint16) {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("red")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	*(*C.guint16)(unsafe.Pointer(&*valptr)) = C.guint16(red)
}

// Green: green component of the color.
func (c *Color) SetGreen(green uint16) {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("green")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	*(*C.guint16)(unsafe.Pointer(&*valptr)) = C.guint16(green)
}

// Blue: blue component of the color.
func (c *Color) SetBlue(blue uint16) {
	offset := girepository.MustFind("Gdk", "Color").StructFieldOffset("blue")
	valptr := (*uintptr)(unsafe.Add(c.native, offset))
	*(*C.guint16)(unsafe.Pointer(&*valptr)) = C.guint16(blue)
}

// Copy makes a copy of a Color.
//
// The result must be freed using gdk_color_free().
//
// Deprecated: Use RGBA.
//
// The function returns the following values:
//
//    - ret: copy of color.
//
func (color *Color) Copy() *Color {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(color)

	var _ret *Color // out

	_ret = (*Color)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				args := [1]girepository.Argument{(*C.void)(intern.C)}
				girepository.MustFind("Gdk", "Color").InvokeMethod("free", args[:], nil)
			}
		},
	)

	return _ret
}

// Equal compares two colors.
//
// Deprecated: Use RGBA.
//
// The function takes the following parameters:
//
//    - colorb: another Color.
//
// The function returns the following values:
//
//    - ok: TRUE if the two colors compare equal.
//
func (colora *Color) Equal(colorb *Color) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(colora)))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(gextras.StructNative(unsafe.Pointer(colorb)))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(colora)
	runtime.KeepAlive(colorb)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Hash: hash function suitable for using for a hash table that stores Colors.
//
// Deprecated: Use RGBA.
//
// The function returns the following values:
//
//    - guint: hash function applied to color.
//
func (color *Color) Hash() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))

	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(color)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// String returns a textual specification of color in the hexadecimal form
// “\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits representing the red,
// green and blue components respectively.
//
// The returned string can be parsed by gdk_color_parse().
//
// Deprecated: Use RGBA.
//
// The function returns the following values:
//
//    - utf8: newly-allocated text string.
//
func (color *Color) String() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(color)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(color)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ColorParse parses a textual specification of a color and fill in the red,
// green, and blue fields of a Color.
//
// The string can either one of a large set of standard names (taken from the
// X11 rgb.txt file), or it can be a hexadecimal value in the form “\#rgb”
// “\#rrggbb”, “\#rrrgggbbb” or “\#rrrrggggbbbb” where “r”, “g” and “b” are hex
// digits of the red, green, and blue components of the color, respectively.
// (White in the four forms is “\#fff”, “\#ffffff”, “\#fffffffff” and
// “\#ffffffffffff”).
//
// Deprecated: Use RGBA.
//
// The function takes the following parameters:
//
//    - spec: string specifying the color.
//
// The function returns the following values:
//
//    - color to fill in.
//    - ok: TRUE if the parsing succeeded.
//
func ColorParse(spec string) (*Color, bool) {
	var _args [1]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(spec)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gdk", "parse").Invoke(_args[:], _outs[:])
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(spec)

	var _color *Color // out
	var _ok bool      // out

	_color = (*Color)(gextras.NewStructNative(unsafe.Pointer(_outs[0])))
	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _color, _ok
}
