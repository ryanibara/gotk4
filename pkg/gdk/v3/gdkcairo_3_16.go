// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// CairoDrawFromGL: this is the main way to draw GL content in GTK+. It takes a
// render buffer ID (source_type == RENDERBUFFER) or a texture id (source_type
// == TEXTURE) and draws it onto cr with an OVER operation, respecting the
// current clip. The top left corner of the rectangle specified by x, y, width
// and height will be drawn at the current (0,0) position of the cairo_t.
//
// This will work for *all* cairo_t, as long as window is realized, but the
// fallback implementation that reads back the pixels from the buffer may be
// used in the general case. In the case of direct drawing to a window with no
// special effects applied to cr it will however use a more efficient approach.
//
// For RENDERBUFFER the code will always fall back to software for buffers with
// alpha components, so make sure you use TEXTURE if using alpha.
//
// Calling this may change the current GL context.
//
// The function takes the following parameters:
//
//    - cr: cairo context.
//    - window we're rendering for (not necessarily into).
//    - source: GL ID of the source buffer.
//    - sourceType: type of the source.
//    - bufferScale: scale-factor that the source buffer is allocated for.
//    - x: source x position in source to start copying from in GL coordinates.
//    - y: source y position in source to start copying from in GL coordinates.
//    - width of the region to draw.
//    - height of the region to draw.
//
func CairoDrawFromGL(cr *cairo.Context, window Windower, source, sourceType, bufferScale, x, y, width, height int) {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GdkWindow // out
	var _arg3 C.int        // out
	var _arg4 C.int        // out
	var _arg5 C.int        // out
	var _arg6 C.int        // out
	var _arg7 C.int        // out
	var _arg8 C.int        // out
	var _arg9 C.int        // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg3 = C.int(source)
	_arg4 = C.int(sourceType)
	_arg5 = C.int(bufferScale)
	_arg6 = C.int(x)
	_arg7 = C.int(y)
	_arg8 = C.int(width)
	_arg9 = C.int(height)

	C.gdk_cairo_draw_from_gl(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(window)
	runtime.KeepAlive(source)
	runtime.KeepAlive(sourceType)
	runtime.KeepAlive(bufferScale)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}
