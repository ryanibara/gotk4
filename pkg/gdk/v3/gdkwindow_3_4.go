// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// BeginMoveDragForDevice begins a window move operation (for a toplevel
// window). You might use this function to implement a “window move grip,” for
// example. The function works best with window managers that support the
// Extended Window Manager Hints (http://www.freedesktop.org/Standards/wm-spec)
// but has a fallback implementation for other window managers.
//
// The function takes the following parameters:
//
//    - device used for the operation.
//    - button being used to drag, or 0 for a keyboard-initiated drag.
//    - rootX: root window X coordinate of mouse click that began the drag.
//    - rootY: root window Y coordinate of mouse click that began the drag.
//    - timestamp of mouse click that began the drag.
//
func (window *Window) BeginMoveDragForDevice(device Devicer, button, rootX, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkDevice // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out
	var _arg5 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))
	_arg2 = C.gint(button)
	_arg3 = C.gint(rootX)
	_arg4 = C.gint(rootY)
	_arg5 = C.guint32(timestamp)

	C.gdk_window_begin_move_drag_for_device(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(window)
	runtime.KeepAlive(device)
	runtime.KeepAlive(button)
	runtime.KeepAlive(rootX)
	runtime.KeepAlive(rootY)
	runtime.KeepAlive(timestamp)
}

// BeginResizeDragForDevice begins a window resize operation (for a toplevel
// window). You might use this function to implement a “window resize grip,” for
// example; in fact Statusbar uses it. The function works best with window
// managers that support the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) but has a fallback
// implementation for other window managers.
//
// The function takes the following parameters:
//
//    - edge or corner from which the drag is started.
//    - device used for the operation.
//    - button being used to drag, or 0 for a keyboard-initiated drag.
//    - rootX: root window X coordinate of mouse click that began the drag.
//    - rootY: root window Y coordinate of mouse click that began the drag.
//    - timestamp of mouse click that began the drag (use gdk_event_get_time()).
//
func (window *Window) BeginResizeDragForDevice(edge WindowEdge, device Devicer, button, rootX, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWindowEdge // out
	var _arg2 *C.GdkDevice    // out
	var _arg3 C.gint          // out
	var _arg4 C.gint          // out
	var _arg5 C.gint          // out
	var _arg6 C.guint32       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkWindowEdge(edge)
	_arg2 = (*C.GdkDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))
	_arg3 = C.gint(button)
	_arg4 = C.gint(rootX)
	_arg5 = C.gint(rootY)
	_arg6 = C.guint32(timestamp)

	C.gdk_window_begin_resize_drag_for_device(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(window)
	runtime.KeepAlive(edge)
	runtime.KeepAlive(device)
	runtime.KeepAlive(button)
	runtime.KeepAlive(rootX)
	runtime.KeepAlive(rootY)
	runtime.KeepAlive(timestamp)
}
