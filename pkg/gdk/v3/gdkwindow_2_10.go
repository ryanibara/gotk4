// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// TypeHint: this function returns the type hint set for a window.
//
// The function returns the following values:
//
//    - windowTypeHint: type hint set for window.
//
func (window *Window) TypeHint() WindowTypeHint {
	var _arg0 *C.GdkWindow        // out
	var _cret C.GdkWindowTypeHint // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_type_hint(_arg0)
	runtime.KeepAlive(window)

	var _windowTypeHint WindowTypeHint // out

	_windowTypeHint = WindowTypeHint(_cret)

	return _windowTypeHint
}

// InputShapeCombineRegion: like gdk_window_shape_combine_region(), but the
// shape applies only to event handling. Mouse events which happen while the
// pointer position corresponds to an unset bit in the mask will be passed on
// the window below window.
//
// An input shape is typically used with RGBA windows. The alpha channel of the
// window defines which pixels are invisible and allows for nicely antialiased
// borders, and the input shape controls where the window is “clickable”.
//
// On the X11 platform, this requires version 1.1 of the shape extension.
//
// On the Win32 platform, this functionality is not present and the function
// does nothing.
//
// The function takes the following parameters:
//
//    - shapeRegion: region of window to be non-transparent.
//    - offsetX: x position of shape_region in window coordinates.
//    - offsetY: y position of shape_region in window coordinates.
//
func (window *Window) InputShapeCombineRegion(shapeRegion *cairo.Region, offsetX, offsetY int) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gint            // out
	var _arg3 C.gint            // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(shapeRegion.Native()))
	_arg2 = C.gint(offsetX)
	_arg3 = C.gint(offsetY)

	C.gdk_window_input_shape_combine_region(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(window)
	runtime.KeepAlive(shapeRegion)
	runtime.KeepAlive(offsetX)
	runtime.KeepAlive(offsetY)
}

// MergeChildInputShapes merges the input shape masks for any child windows into
// the input shape mask for window. i.e. the union of all input masks for window
// and its children will become the new input mask for window. See
// gdk_window_input_shape_combine_region().
//
// This function is distinct from gdk_window_set_child_input_shapes() because it
// includes window’s input shape mask in the set of shapes to be merged.
func (window *Window) MergeChildInputShapes() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_merge_child_input_shapes(_arg0)
	runtime.KeepAlive(window)
}

// SetChildInputShapes sets the input shape mask of window to the union of input
// shape masks for all children of window, ignoring the input shape mask of
// window itself. Contrast with gdk_window_merge_child_input_shapes() which
// includes the input shape mask of window in the masks to be merged.
func (window *Window) SetChildInputShapes() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_set_child_input_shapes(_arg0)
	runtime.KeepAlive(window)
}
