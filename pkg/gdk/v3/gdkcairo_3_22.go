// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// CairoGetDrawingContext retrieves the DrawingContext that created the Cairo
// context cr.
//
// The function takes the following parameters:
//
//   - cr: cairo context.
//
// The function returns the following values:
//
//   - drawingContext (optional) if any is set.
//
func CairoGetDrawingContext(cr *cairo.Context) *DrawingContext {
	var _arg1 *C.cairo_t           // out
	var _cret *C.GdkDrawingContext // in

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))

	_cret = C.gdk_cairo_get_drawing_context(_arg1)
	runtime.KeepAlive(cr)

	var _drawingContext *DrawingContext // out

	if _cret != nil {
		_drawingContext = wrapDrawingContext(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _drawingContext
}
