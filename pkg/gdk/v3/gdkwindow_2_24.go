// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// Display gets the Display associated with a Window.
//
// The function returns the following values:
//
//    - display associated with window.
//
func (window *Window) Display() *Display {
	var _arg0 *C.GdkWindow  // out
	var _cret *C.GdkDisplay // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_display(_arg0)
	runtime.KeepAlive(window)

	var _display *Display // out

	_display = wrapDisplay(coreglib.Take(unsafe.Pointer(_cret)))

	return _display
}

// Height returns the height of the given window.
//
// On the X11 platform the returned size is the size reported in the
// most-recently-processed configure event, rather than the current size on the
// X server.
//
// The function returns the following values:
//
//    - gint: height of window.
//
func (window *Window) Height() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.int        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_height(_arg0)
	runtime.KeepAlive(window)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Screen gets the Screen associated with a Window.
//
// The function returns the following values:
//
//    - screen associated with window.
//
func (window *Window) Screen() *Screen {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkScreen // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_screen(_arg0)
	runtime.KeepAlive(window)

	var _screen *Screen // out

	_screen = wrapScreen(coreglib.Take(unsafe.Pointer(_cret)))

	return _screen
}

// Visual gets the Visual describing the pixel format of window.
//
// The function returns the following values:
//
//    - visual: Visual.
//
func (window *Window) Visual() *Visual {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkVisual // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_visual(_arg0)
	runtime.KeepAlive(window)

	var _visual *Visual // out

	_visual = wrapVisual(coreglib.Take(unsafe.Pointer(_cret)))

	return _visual
}

// Width returns the width of the given window.
//
// On the X11 platform the returned size is the size reported in the
// most-recently-processed configure event, rather than the current size on the
// X server.
//
// The function returns the following values:
//
//    - gint: width of window.
//
func (window *Window) Width() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.int        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_width(_arg0)
	runtime.KeepAlive(window)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}
