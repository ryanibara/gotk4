// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// MonitorWorkarea retrieves the Rectangle representing the size and position of
// the “work area” on a monitor within the entire screen area. The returned
// geometry is in ”application pixels”, not in ”device pixels” (see
// gdk_screen_get_monitor_scale_factor()).
//
// The work area should be considered when positioning menus and similar popups,
// to avoid placing them below panels, docks or other desktop components.
//
// Note that not all backends may have a concept of workarea. This function will
// return the monitor geometry if a workarea is not available, or does not
// apply.
//
// Monitor numbers start at 0. To obtain the number of monitors of screen, use
// gdk_screen_get_n_monitors().
//
// Deprecated: Use gdk_monitor_get_workarea() instead.
//
// The function takes the following parameters:
//
//    - monitorNum: monitor number.
//
// The function returns the following values:
//
//    - dest (optional) to be filled with the monitor workarea.
//
func (screen *Screen) MonitorWorkarea(monitorNum int) *Rectangle {
	var _arg0 *C.GdkScreen   // out
	var _arg1 C.gint         // out
	var _arg2 C.GdkRectangle // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(monitorNum)

	C.gdk_screen_get_monitor_workarea(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(monitorNum)

	var _dest *Rectangle // out

	_dest = (*Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))

	return _dest
}
