// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// MonitorHeightMm gets the height in millimeters of the specified monitor.
//
// Deprecated: Use gdk_monitor_get_height_mm() instead.
//
// The function takes the following parameters:
//
//    - monitorNum: number of the monitor, between 0 and
//      gdk_screen_get_n_monitors (screen).
//
// The function returns the following values:
//
//    - gint: height of the monitor, or -1 if not available.
//
func (screen *Screen) MonitorHeightMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_height_mm(_arg0, _arg1)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(monitorNum)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MonitorPlugName returns the output name of the specified monitor. Usually
// something like VGA, DVI, or TV, not the actual product name of the display
// device.
//
// Deprecated: Use gdk_monitor_get_model() instead.
//
// The function takes the following parameters:
//
//    - monitorNum: number of the monitor, between 0 and
//      gdk_screen_get_n_monitors (screen).
//
// The function returns the following values:
//
//    - utf8 (optional): newly-allocated string containing the name of the
//      monitor, or NULL if the name cannot be determined.
//
func (screen *Screen) MonitorPlugName(monitorNum int) string {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_plug_name(_arg0, _arg1)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(monitorNum)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// MonitorWidthMm gets the width in millimeters of the specified monitor, if
// available.
//
// Deprecated: Use gdk_monitor_get_width_mm() instead.
//
// The function takes the following parameters:
//
//    - monitorNum: number of the monitor, between 0 and
//      gdk_screen_get_n_monitors (screen).
//
// The function returns the following values:
//
//    - gint: width of the monitor, or -1 if not available.
//
func (screen *Screen) MonitorWidthMm(monitorNum int) int {
	var _arg0 *C.GdkScreen // out
	var _arg1 C.gint       // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkScreen)(unsafe.Pointer(coreglib.InternObject(screen).Native()))
	_arg1 = C.gint(monitorNum)

	_cret = C.gdk_screen_get_monitor_width_mm(_arg0, _arg1)
	runtime.KeepAlive(screen)
	runtime.KeepAlive(monitorNum)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}
