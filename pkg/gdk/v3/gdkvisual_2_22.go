// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// BitsPerRGB returns the number of significant bits per red, green and blue
// value.
//
// Not all GDK backend provide a meaningful value for this function.
//
// Deprecated: Use gdk_visual_get_red_pixel_details() and its variants to learn
// about the pixel layout of TrueColor and DirectColor visuals.
//
// The function returns the following values:
//
//    - gint: number of significant bits per color value for visual.
//
func (visual *Visual) BitsPerRGB() int {
	var _arg0 *C.GdkVisual // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	_cret = C.gdk_visual_get_bits_per_rgb(_arg0)
	runtime.KeepAlive(visual)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// BluePixelDetails obtains values that are needed to calculate blue pixel
// values in TrueColor and DirectColor. The “mask” is the significant bits
// within the pixel. The “shift” is the number of bits left we must shift a
// primary for it to be in position (according to the "mask"). Finally,
// "precision" refers to how much precision the pixel value contains for a
// particular primary.
//
// The function returns the following values:
//
//    - mask (optional): pointer to a #guint32 to be filled in, or NULL.
//    - shift (optional): pointer to a #gint to be filled in, or NULL.
//    - precision (optional): pointer to a #gint to be filled in, or NULL.
//
func (visual *Visual) BluePixelDetails() (mask uint32, shift, precision int) {
	var _arg0 *C.GdkVisual // out
	var _arg1 C.guint32    // in
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	C.gdk_visual_get_blue_pixel_details(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(visual)

	var _mask uint32   // out
	var _shift int     // out
	var _precision int // out

	_mask = uint32(_arg1)
	_shift = int(_arg2)
	_precision = int(_arg3)

	return _mask, _shift, _precision
}

// ByteOrder returns the byte order of this visual.
//
// The information returned by this function is only relevant when working with
// XImages, and not all backends return meaningful information for this.
//
// Deprecated: This information is not useful.
//
// The function returns the following values:
//
//    - byteOrder stating the byte order of visual.
//
func (visual *Visual) ByteOrder() ByteOrder {
	var _arg0 *C.GdkVisual   // out
	var _cret C.GdkByteOrder // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	_cret = C.gdk_visual_get_byte_order(_arg0)
	runtime.KeepAlive(visual)

	var _byteOrder ByteOrder // out

	_byteOrder = ByteOrder(_cret)

	return _byteOrder
}

// ColormapSize returns the size of a colormap for this visual.
//
// You have to use platform-specific APIs to manipulate colormaps.
//
// Deprecated: This information is not useful, since GDK does not provide APIs
// to operate on colormaps.
//
// The function returns the following values:
//
//    - gint: size of a colormap that is suitable for visual.
//
func (visual *Visual) ColormapSize() int {
	var _arg0 *C.GdkVisual // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	_cret = C.gdk_visual_get_colormap_size(_arg0)
	runtime.KeepAlive(visual)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Depth returns the bit depth of this visual.
//
// The function returns the following values:
//
//    - gint: bit depth of this visual.
//
func (visual *Visual) Depth() int {
	var _arg0 *C.GdkVisual // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	_cret = C.gdk_visual_get_depth(_arg0)
	runtime.KeepAlive(visual)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// GreenPixelDetails obtains values that are needed to calculate green pixel
// values in TrueColor and DirectColor. The “mask” is the significant bits
// within the pixel. The “shift” is the number of bits left we must shift a
// primary for it to be in position (according to the "mask"). Finally,
// "precision" refers to how much precision the pixel value contains for a
// particular primary.
//
// The function returns the following values:
//
//    - mask (optional): pointer to a #guint32 to be filled in, or NULL.
//    - shift (optional): pointer to a #gint to be filled in, or NULL.
//    - precision (optional): pointer to a #gint to be filled in, or NULL.
//
func (visual *Visual) GreenPixelDetails() (mask uint32, shift, precision int) {
	var _arg0 *C.GdkVisual // out
	var _arg1 C.guint32    // in
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	C.gdk_visual_get_green_pixel_details(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(visual)

	var _mask uint32   // out
	var _shift int     // out
	var _precision int // out

	_mask = uint32(_arg1)
	_shift = int(_arg2)
	_precision = int(_arg3)

	return _mask, _shift, _precision
}

// RedPixelDetails obtains values that are needed to calculate red pixel values
// in TrueColor and DirectColor. The “mask” is the significant bits within the
// pixel. The “shift” is the number of bits left we must shift a primary for it
// to be in position (according to the "mask"). Finally, "precision" refers to
// how much precision the pixel value contains for a particular primary.
//
// The function returns the following values:
//
//    - mask (optional): pointer to a #guint32 to be filled in, or NULL.
//    - shift (optional): pointer to a #gint to be filled in, or NULL.
//    - precision (optional): pointer to a #gint to be filled in, or NULL.
//
func (visual *Visual) RedPixelDetails() (mask uint32, shift, precision int) {
	var _arg0 *C.GdkVisual // out
	var _arg1 C.guint32    // in
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	C.gdk_visual_get_red_pixel_details(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(visual)

	var _mask uint32   // out
	var _shift int     // out
	var _precision int // out

	_mask = uint32(_arg1)
	_shift = int(_arg2)
	_precision = int(_arg3)

	return _mask, _shift, _precision
}

// VisualType returns the type of visual this is (PseudoColor, TrueColor, etc).
//
// The function returns the following values:
//
//    - visualType stating the type of visual.
//
func (visual *Visual) VisualType() VisualType {
	var _arg0 *C.GdkVisual    // out
	var _cret C.GdkVisualType // in

	_arg0 = (*C.GdkVisual)(unsafe.Pointer(coreglib.InternObject(visual).Native()))

	_cret = C.gdk_visual_get_visual_type(_arg0)
	runtime.KeepAlive(visual)

	var _visualType VisualType // out

	_visualType = VisualType(_cret)

	return _visualType
}
