// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// NewCursorFromSurface creates a new cursor from a cairo image surface.
//
// Not all GDK backends support RGBA cursors. If they are not supported, a
// monochrome approximation will be displayed. The functions
// gdk_display_supports_cursor_alpha() and gdk_display_supports_cursor_color()
// can be used to determine whether RGBA cursors are supported;
// gdk_display_get_default_cursor_size() and
// gdk_display_get_maximal_cursor_size() give information about cursor sizes.
//
// On the X backend, support for RGBA cursors requires a sufficently new version
// of the X Render extension.
//
// The function takes the following parameters:
//
//    - display for which the cursor will be created.
//    - surface: cairo image surface containing the cursor pixel data.
//    - x: horizontal offset of the “hotspot” of the cursor.
//    - y: vertical offset of the “hotspot” of the cursor.
//
// The function returns the following values:
//
//    - cursor: new Cursor.
//
func NewCursorFromSurface(display *Display, surface *cairo.Surface, x, y float64) *Cursor {
	var _arg1 *C.GdkDisplay      // out
	var _arg2 *C.cairo_surface_t // out
	var _arg3 C.gdouble          // out
	var _arg4 C.gdouble          // out
	var _cret *C.GdkCursor       // in

	_arg1 = (*C.GdkDisplay)(unsafe.Pointer(coreglib.InternObject(display).Native()))
	_arg2 = (*C.cairo_surface_t)(unsafe.Pointer(surface.Native()))
	_arg3 = C.gdouble(x)
	_arg4 = C.gdouble(y)

	_cret = C.gdk_cursor_new_from_surface(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(display)
	runtime.KeepAlive(surface)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _cursor *Cursor // out

	_cursor = wrapCursor(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cursor
}

// Surface returns a cairo image surface with the image used to display the
// cursor.
//
// Note that depending on the capabilities of the windowing system and on the
// cursor, GDK may not be able to obtain the image data. In this case, NULL is
// returned.
//
// The function returns the following values:
//
//    - xHot (optional): location to store the hotspot x position, or NULL.
//    - yHot (optional): location to store the hotspot y position, or NULL.
//    - surface (optional): #cairo_surface_t representing cursor, or NULL.
//
func (cursor *Cursor) Surface() (xHot, yHot float64, surface *cairo.Surface) {
	var _arg0 *C.GdkCursor       // out
	var _arg1 C.gdouble          // in
	var _arg2 C.gdouble          // in
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GdkCursor)(unsafe.Pointer(coreglib.InternObject(cursor).Native()))

	_cret = C.gdk_cursor_get_surface(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(cursor)

	var _xHot float64           // out
	var _yHot float64           // out
	var _surface *cairo.Surface // out

	_xHot = float64(_arg1)
	_yHot = float64(_arg2)
	if _cret != nil {
		_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
			C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
		})
	}

	return _xHot, _yHot, _surface
}
