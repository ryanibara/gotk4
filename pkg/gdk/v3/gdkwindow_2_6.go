// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// ConfigureFinished does nothing, present only for compatiblity.
//
// Deprecated: this function is no longer needed.
func (window *Window) ConfigureFinished() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_configure_finished(_arg0)
	runtime.KeepAlive(window)
}

// EnableSynchronizedConfigure does nothing, present only for compatiblity.
//
// Deprecated: this function is no longer needed.
func (window *Window) EnableSynchronizedConfigure() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_enable_synchronized_configure(_arg0)
	runtime.KeepAlive(window)
}

// SetFocusOnMap: setting focus_on_map to FALSE hints the desktop environment
// that the window doesn’t want to receive input focus when it is mapped.
// focus_on_map should be turned off for windows that aren’t triggered
// interactively (such as popups from network activity).
//
// On X, it is the responsibility of the window manager to interpret this hint.
// Window managers following the freedesktop.org window manager extension
// specification should respect it.
//
// The function takes the following parameters:
//
//    - focusOnMap: TRUE if the window should receive input focus when mapped.
//
func (window *Window) SetFocusOnMap(focusOnMap bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if focusOnMap {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_focus_on_map(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(focusOnMap)
}
