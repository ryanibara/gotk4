// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// OffscreenWindowGetEmbedder gets the window that window is embedded in.
//
// The function takes the following parameters:
//
//    - window: Window.
//
// The function returns the following values:
//
//    - ret (optional): embedding Window, or NULL if window is not an mbedded
//      offscreen window.
//
func OffscreenWindowGetEmbedder(window Windower) Windower {
	var _arg1 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_offscreen_window_get_embedder(_arg1)
	runtime.KeepAlive(window)

	var _ret Windower // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_ret = rv
		}
	}

	return _ret
}

// OffscreenWindowSetEmbedder sets window to be embedded in embedder.
//
// To fully embed an offscreen window, in addition to calling this function, it
// is also necessary to handle the Window::pick-embedded-child signal on the
// embedder and the Window::to-embedder and Window::from-embedder signals on
// window.
//
// The function takes the following parameters:
//
//    - window: Window.
//    - embedder that window gets embedded in.
//
func OffscreenWindowSetEmbedder(window, embedder Windower) {
	var _arg1 *C.GdkWindow // out
	var _arg2 *C.GdkWindow // out

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(embedder).Native()))

	C.gdk_offscreen_window_set_embedder(_arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(embedder)
}

// EnsureNative tries to ensure that there is a window-system native window for
// this GdkWindow. This may fail in some situations, returning FALSE.
//
// Offscreen window and children of them can never have native windows.
//
// Some backends may not support native child windows.
//
// The function returns the following values:
//
//    - ok: TRUE if the window has a native window, FALSE otherwise.
//
func (window *Window) EnsureNative() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_ensure_native(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Flush: this function does nothing.
//
// Deprecated: since version 3.14.
func (window *Window) Flush() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_flush(_arg0)
	runtime.KeepAlive(window)
}

// GeometryChanged: this function informs GDK that the geometry of an embedded
// offscreen window has changed. This is necessary for GDK to keep track of
// which offscreen window the pointer is in.
func (window *Window) GeometryChanged() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_geometry_changed(_arg0)
	runtime.KeepAlive(window)
}

// Cursor retrieves a Cursor pointer for the cursor currently set on the
// specified Window, or NULL. If the return value is NULL then there is no
// custom cursor set on the specified window, and it is using the cursor for its
// parent window.
//
// The function returns the following values:
//
//    - cursor (optional) or NULL. The returned object is owned by the Window and
//      should not be unreferenced directly. Use gdk_window_set_cursor() to unset
//      the cursor of the window.
//
func (window *Window) Cursor() Cursorrer {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkCursor // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_cursor(_arg0)
	runtime.KeepAlive(window)

	var _cursor Cursorrer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Cursorrer)
				return ok
			})
			rv, ok := casted.(Cursorrer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Cursorrer")
			}
			_cursor = rv
		}
	}

	return _cursor
}

// RootCoords obtains the position of a window position in root window
// coordinates. This is similar to gdk_window_get_origin() but allows you to
// pass in any position in the window, not just the origin.
//
// The function takes the following parameters:
//
//    - x: x coordinate in window.
//    - y: y coordinate in window.
//
// The function returns the following values:
//
//    - rootX: return location for X coordinate.
//    - rootY: return location for Y coordinate.
//
func (window *Window) RootCoords(x, y int) (rootX, rootY int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	C.gdk_window_get_root_coords(_arg0, _arg1, _arg2, &_arg3, &_arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _rootX int // out
	var _rootY int // out

	_rootX = int(_arg3)
	_rootY = int(_arg4)

	return _rootX, _rootY
}

// IsDestroyed: check to see if a window is destroyed..
//
// The function returns the following values:
//
//    - ok: TRUE if the window is destroyed.
//
func (window *Window) IsDestroyed() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_is_destroyed(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Restack changes the position of window in the Z-order (stacking order), so
// that it is above sibling (if above is TRUE) or below sibling (if above is
// FALSE).
//
// If sibling is NULL, then this either raises (if above is TRUE) or lowers the
// window.
//
// If window is a toplevel, the window manager may choose to deny the request to
// move the window in the Z-order, gdk_window_restack() only requests the
// restack, does not guarantee it.
//
// The function takes the following parameters:
//
//    - sibling (optional) that is a sibling of window, or NULL.
//    - above: boolean.
//
func (window *Window) Restack(sibling Windower, above bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out
	var _arg2 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if sibling != nil {
		_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(sibling).Native()))
	}
	if above {
		_arg2 = C.TRUE
	}

	C.gdk_window_restack(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(sibling)
	runtime.KeepAlive(above)
}
