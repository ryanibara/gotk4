// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// OffscreenWindowGetEmbedder gets the window that window is embedded in.
//
// The function takes the following parameters:
//
//   - window: Window.
//
// The function returns the following values:
//
//   - ret (optional): embedding Window, or NULL if window is not an mbedded
//     offscreen window.
//
func OffscreenWindowGetEmbedder(window Windower) Windower {
	var _arg1 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_offscreen_window_get_embedder(_arg1)
	runtime.KeepAlive(window)

	var _ret Windower // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_ret = rv
		}
	}

	return _ret
}

// OffscreenWindowSetEmbedder sets window to be embedded in embedder.
//
// To fully embed an offscreen window, in addition to calling this function,
// it is also necessary to handle the Window::pick-embedded-child signal on the
// embedder and the Window::to-embedder and Window::from-embedder signals on
// window.
//
// The function takes the following parameters:
//
//   - window: Window.
//   - embedder that window gets embedded in.
//
func OffscreenWindowSetEmbedder(window, embedder Windower) {
	var _arg1 *C.GdkWindow // out
	var _arg2 *C.GdkWindow // out

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg2 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(embedder).Native()))

	C.gdk_offscreen_window_set_embedder(_arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(embedder)
}
