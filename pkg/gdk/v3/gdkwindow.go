// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
// #include <glib-object.h>
// extern void _gotk4_gdk3_Window_ConnectMovedToRect(gpointer, gpointer, gpointer, gboolean, gboolean, guintptr);
// extern void _gotk4_gdk3_WindowClass_to_embedder(GdkWindow*, gdouble, gdouble, gdouble*, gdouble*);
// extern void _gotk4_gdk3_WindowClass_from_embedder(GdkWindow*, gdouble, gdouble, gdouble*, gdouble*);
// extern gboolean _gotk4_gdk3_WindowChildFunc(GdkWindow*, gpointer);
// extern cairo_surface_t* _gotk4_gdk3_Window_ConnectCreateSurface(gpointer, gint, gint, guintptr);
// extern cairo_surface_t* _gotk4_gdk3_WindowClass_create_surface(GdkWindow*, gint, gint);
// extern GdkWindow* _gotk4_gdk3_Window_ConnectPickEmbeddedChild(gpointer, gdouble, gdouble, guintptr);
// cairo_surface_t* _gotk4_gdk3_Window_virtual_create_surface(void* fnptr, GdkWindow* arg0, gint arg1, gint arg2) {
//   return ((cairo_surface_t* (*)(GdkWindow*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gdk3_Window_virtual_from_embedder(void* fnptr, GdkWindow* arg0, gdouble arg1, gdouble arg2, gdouble* arg3, gdouble* arg4) {
//   ((void (*)(GdkWindow*, gdouble, gdouble, gdouble*, gdouble*))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_gdk3_Window_virtual_to_embedder(void* fnptr, GdkWindow* arg0, gdouble arg1, gdouble arg2, gdouble* arg3, gdouble* arg4) {
//   ((void (*)(GdkWindow*, gdouble, gdouble, gdouble*, gdouble*))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
import "C"

// GType values.
var (
	GTypeGravity              = coreglib.Type(C.gdk_gravity_get_type())
	GTypeWindowEdge           = coreglib.Type(C.gdk_window_edge_get_type())
	GTypeWindowType           = coreglib.Type(C.gdk_window_type_get_type())
	GTypeWindowWindowClass    = coreglib.Type(C.gdk_window_window_class_get_type())
	GTypeWMDecoration         = coreglib.Type(C.gdk_wm_decoration_get_type())
	GTypeWMFunction           = coreglib.Type(C.gdk_wm_function_get_type())
	GTypeWindowAttributesType = coreglib.Type(C.gdk_window_attributes_type_get_type())
	GTypeWindowHints          = coreglib.Type(C.gdk_window_hints_get_type())
	GTypeWindow               = coreglib.Type(C.gdk_window_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGravity, F: marshalGravity},
		coreglib.TypeMarshaler{T: GTypeWindowEdge, F: marshalWindowEdge},
		coreglib.TypeMarshaler{T: GTypeWindowType, F: marshalWindowType},
		coreglib.TypeMarshaler{T: GTypeWindowWindowClass, F: marshalWindowWindowClass},
		coreglib.TypeMarshaler{T: GTypeWMDecoration, F: marshalWMDecoration},
		coreglib.TypeMarshaler{T: GTypeWMFunction, F: marshalWMFunction},
		coreglib.TypeMarshaler{T: GTypeWindowAttributesType, F: marshalWindowAttributesType},
		coreglib.TypeMarshaler{T: GTypeWindowHints, F: marshalWindowHints},
		coreglib.TypeMarshaler{T: GTypeWindow, F: marshalWindow},
	})
}

// Gravity defines the reference point of a window and the meaning of
// coordinates passed to gtk_window_move(). See gtk_window_move() and the
// "implementation notes" section of the Extended Window Manager Hints
// (http://www.freedesktop.org/Standards/wm-spec) specification for more
// details.
type Gravity C.gint

const (
	// GravityNorthWest: reference point is at the top left corner.
	GravityNorthWest Gravity = 1
	// GravityNorth: reference point is in the middle of the top edge.
	GravityNorth Gravity = 2
	// GravityNorthEast: reference point is at the top right corner.
	GravityNorthEast Gravity = 3
	// GravityWest: reference point is at the middle of the left edge.
	GravityWest Gravity = 4
	// GravityCenter: reference point is at the center of the window.
	GravityCenter Gravity = 5
	// GravityEast: reference point is at the middle of the right edge.
	GravityEast Gravity = 6
	// GravitySouthWest: reference point is at the lower left corner.
	GravitySouthWest Gravity = 7
	// GravitySouth: reference point is at the middle of the lower edge.
	GravitySouth Gravity = 8
	// GravitySouthEast: reference point is at the lower right corner.
	GravitySouthEast Gravity = 9
	// GravityStatic: reference point is at the top left corner of the window
	// itself, ignoring window manager decorations.
	GravityStatic Gravity = 10
)

func marshalGravity(p uintptr) (interface{}, error) {
	return Gravity(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Gravity.
func (g Gravity) String() string {
	switch g {
	case GravityNorthWest:
		return "NorthWest"
	case GravityNorth:
		return "North"
	case GravityNorthEast:
		return "NorthEast"
	case GravityWest:
		return "West"
	case GravityCenter:
		return "Center"
	case GravityEast:
		return "East"
	case GravitySouthWest:
		return "SouthWest"
	case GravitySouth:
		return "South"
	case GravitySouthEast:
		return "SouthEast"
	case GravityStatic:
		return "Static"
	default:
		return fmt.Sprintf("Gravity(%d)", g)
	}
}

// WindowEdge determines a window edge or corner.
type WindowEdge C.gint

const (
	// WindowEdgeNorthWest: top left corner.
	WindowEdgeNorthWest WindowEdge = iota
	// WindowEdgeNorth: top edge.
	WindowEdgeNorth
	// WindowEdgeNorthEast: top right corner.
	WindowEdgeNorthEast
	// WindowEdgeWest: left edge.
	WindowEdgeWest
	// WindowEdgeEast: right edge.
	WindowEdgeEast
	// WindowEdgeSouthWest: lower left corner.
	WindowEdgeSouthWest
	// WindowEdgeSouth: lower edge.
	WindowEdgeSouth
	// WindowEdgeSouthEast: lower right corner.
	WindowEdgeSouthEast
)

func marshalWindowEdge(p uintptr) (interface{}, error) {
	return WindowEdge(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WindowEdge.
func (w WindowEdge) String() string {
	switch w {
	case WindowEdgeNorthWest:
		return "NorthWest"
	case WindowEdgeNorth:
		return "North"
	case WindowEdgeNorthEast:
		return "NorthEast"
	case WindowEdgeWest:
		return "West"
	case WindowEdgeEast:
		return "East"
	case WindowEdgeSouthWest:
		return "SouthWest"
	case WindowEdgeSouth:
		return "South"
	case WindowEdgeSouthEast:
		return "SouthEast"
	default:
		return fmt.Sprintf("WindowEdge(%d)", w)
	}
}

// WindowType describes the kind of window.
type WindowType C.gint

const (
	// WindowRoot: root window; this window has no parent, covers the entire
	// screen, and is created by the window system.
	WindowRoot WindowType = iota
	// WindowToplevel: toplevel window (used to implement Window).
	WindowToplevel
	// WindowChild: child window (used to implement e.g. Entry).
	WindowChild
	// WindowTemp: override redirect temporary window (used to implement Menu).
	WindowTemp
	// WindowForeign: foreign window (see gdk_window_foreign_new()).
	WindowForeign
	// WindowOffscreen: offscreen window (see [Offscreen
	// Windows][OFFSCREEN-WINDOWS]). Since 2.18.
	WindowOffscreen
	// WindowSubsurface: subsurface-based window; This window is visually tied
	// to a toplevel, and is moved/stacked with it. Currently this window type
	// is only implemented in Wayland. Since 3.14.
	WindowSubsurface
)

func marshalWindowType(p uintptr) (interface{}, error) {
	return WindowType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WindowType.
func (w WindowType) String() string {
	switch w {
	case WindowRoot:
		return "Root"
	case WindowToplevel:
		return "Toplevel"
	case WindowChild:
		return "Child"
	case WindowTemp:
		return "Temp"
	case WindowForeign:
		return "Foreign"
	case WindowOffscreen:
		return "Offscreen"
	case WindowSubsurface:
		return "Subsurface"
	default:
		return fmt.Sprintf("WindowType(%d)", w)
	}
}

// WindowWindowClass: GDK_INPUT_OUTPUT windows are the standard kind of window
// you might expect. Such windows receive events and are also displayed on
// screen. GDK_INPUT_ONLY windows are invisible; they are usually placed above
// other windows in order to trap or filter the events. You can’t draw on
// GDK_INPUT_ONLY windows.
type WindowWindowClass C.gint

const (
	// InputOutput: window for graphics and events.
	InputOutput WindowWindowClass = iota
	// InputOnly: window for events only.
	InputOnly
)

func marshalWindowWindowClass(p uintptr) (interface{}, error) {
	return WindowWindowClass(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WindowWindowClass.
func (w WindowWindowClass) String() string {
	switch w {
	case InputOutput:
		return "InputOutput"
	case InputOnly:
		return "InputOnly"
	default:
		return fmt.Sprintf("WindowWindowClass(%d)", w)
	}
}

// WMDecoration: these are hints originally defined by the Motif toolkit. The
// window manager can use them when determining how to decorate the window. The
// hint must be set before mapping the window.
type WMDecoration C.guint

const (
	// DecorAll: all decorations should be applied.
	DecorAll WMDecoration = 0b1
	// DecorBorder: frame should be drawn around the window.
	DecorBorder WMDecoration = 0b10
	// DecorResizeh: frame should have resize handles.
	DecorResizeh WMDecoration = 0b100
	// DecorTitle: titlebar should be placed above the window.
	DecorTitle WMDecoration = 0b1000
	// DecorMenu: button for opening a menu should be included.
	DecorMenu WMDecoration = 0b10000
	// DecorMinimize: minimize button should be included.
	DecorMinimize WMDecoration = 0b100000
	// DecorMaximize: maximize button should be included.
	DecorMaximize WMDecoration = 0b1000000
)

func marshalWMDecoration(p uintptr) (interface{}, error) {
	return WMDecoration(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WMDecoration.
func (w WMDecoration) String() string {
	if w == 0 {
		return "WMDecoration(0)"
	}

	var builder strings.Builder
	builder.Grow(82)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case DecorAll:
			builder.WriteString("All|")
		case DecorBorder:
			builder.WriteString("Border|")
		case DecorResizeh:
			builder.WriteString("Resizeh|")
		case DecorTitle:
			builder.WriteString("Title|")
		case DecorMenu:
			builder.WriteString("Menu|")
		case DecorMinimize:
			builder.WriteString("Minimize|")
		case DecorMaximize:
			builder.WriteString("Maximize|")
		default:
			builder.WriteString(fmt.Sprintf("WMDecoration(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WMDecoration) Has(other WMDecoration) bool {
	return (w & other) == other
}

// WMFunction: these are hints originally defined by the Motif toolkit. The
// window manager can use them when determining the functions to offer for the
// window. The hint must be set before mapping the window.
type WMFunction C.guint

const (
	// FuncAll: all functions should be offered.
	FuncAll WMFunction = 0b1
	// FuncResize: window should be resizable.
	FuncResize WMFunction = 0b10
	// FuncMove: window should be movable.
	FuncMove WMFunction = 0b100
	// FuncMinimize: window should be minimizable.
	FuncMinimize WMFunction = 0b1000
	// FuncMaximize: window should be maximizable.
	FuncMaximize WMFunction = 0b10000
	// FuncClose: window should be closable.
	FuncClose WMFunction = 0b100000
)

func marshalWMFunction(p uintptr) (interface{}, error) {
	return WMFunction(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WMFunction.
func (w WMFunction) String() string {
	if w == 0 {
		return "WMFunction(0)"
	}

	var builder strings.Builder
	builder.Grow(63)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case FuncAll:
			builder.WriteString("All|")
		case FuncResize:
			builder.WriteString("Resize|")
		case FuncMove:
			builder.WriteString("Move|")
		case FuncMinimize:
			builder.WriteString("Minimize|")
		case FuncMaximize:
			builder.WriteString("Maximize|")
		case FuncClose:
			builder.WriteString("Close|")
		default:
			builder.WriteString(fmt.Sprintf("WMFunction(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WMFunction) Has(other WMFunction) bool {
	return (w & other) == other
}

// WindowAttributesType: used to indicate which fields in the WindowAttr struct
// should be honored. For example, if you filled in the “cursor” and “x” fields
// of WindowAttr, pass “GDK_WA_X | GDK_WA_CURSOR” to gdk_window_new(). Fields in
// WindowAttr not covered by a bit in this enum are required; for example, the
// width/height, wclass, and window_type fields are required, they have no
// corresponding flag in WindowAttributesType.
type WindowAttributesType C.guint

const (
	// WaTitle: honor the title field.
	WaTitle WindowAttributesType = 0b10
	// WaX: honor the X coordinate field.
	WaX WindowAttributesType = 0b100
	// WaY: honor the Y coordinate field.
	WaY WindowAttributesType = 0b1000
	// WaCursor: honor the cursor field.
	WaCursor WindowAttributesType = 0b10000
	// WaVisual: honor the visual field.
	WaVisual WindowAttributesType = 0b100000
	// WaWmclass: honor the wmclass_class and wmclass_name fields.
	WaWmclass WindowAttributesType = 0b1000000
	// WaNoredir: honor the override_redirect field.
	WaNoredir WindowAttributesType = 0b10000000
	// WaTypeHint: honor the type_hint field.
	WaTypeHint WindowAttributesType = 0b100000000
)

func marshalWindowAttributesType(p uintptr) (interface{}, error) {
	return WindowAttributesType(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WindowAttributesType.
func (w WindowAttributesType) String() string {
	if w == 0 {
		return "WindowAttributesType(0)"
	}

	var builder strings.Builder
	builder.Grow(64)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case WaTitle:
			builder.WriteString("Title|")
		case WaX:
			builder.WriteString("X|")
		case WaY:
			builder.WriteString("Y|")
		case WaCursor:
			builder.WriteString("Cursor|")
		case WaVisual:
			builder.WriteString("Visual|")
		case WaWmclass:
			builder.WriteString("Wmclass|")
		case WaNoredir:
			builder.WriteString("Noredir|")
		case WaTypeHint:
			builder.WriteString("TypeHint|")
		default:
			builder.WriteString(fmt.Sprintf("WindowAttributesType(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WindowAttributesType) Has(other WindowAttributesType) bool {
	return (w & other) == other
}

// WindowHints: used to indicate which fields of a Geometry struct should be
// paid attention to. Also, the presence/absence of GDK_HINT_POS,
// GDK_HINT_USER_POS, and GDK_HINT_USER_SIZE is significant, though they don't
// directly refer to Geometry fields. GDK_HINT_USER_POS will be set
// automatically by Window if you call gtk_window_move(). GDK_HINT_USER_POS and
// GDK_HINT_USER_SIZE should be set if the user specified a size/position using
// a --geometry command-line argument; gtk_window_parse_geometry() automatically
// sets these flags.
type WindowHints C.guint

const (
	// HintPos indicates that the program has positioned the window.
	HintPos WindowHints = 0b1
	// HintMinSize: min size fields are set.
	HintMinSize WindowHints = 0b10
	// HintMaxSize: max size fields are set.
	HintMaxSize WindowHints = 0b100
	// HintBaseSize: base size fields are set.
	HintBaseSize WindowHints = 0b1000
	// HintAspect: aspect ratio fields are set.
	HintAspect WindowHints = 0b10000
	// HintResizeInc: resize increment fields are set.
	HintResizeInc WindowHints = 0b100000
	// HintWinGravity: window gravity field is set.
	HintWinGravity WindowHints = 0b1000000
	// HintUserPos indicates that the window’s position was explicitly set by
	// the user.
	HintUserPos WindowHints = 0b10000000
	// HintUserSize indicates that the window’s size was explicitly set by the
	// user.
	HintUserSize WindowHints = 0b100000000
)

func marshalWindowHints(p uintptr) (interface{}, error) {
	return WindowHints(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WindowHints.
func (w WindowHints) String() string {
	if w == 0 {
		return "WindowHints(0)"
	}

	var builder strings.Builder
	builder.Grow(109)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case HintPos:
			builder.WriteString("Pos|")
		case HintMinSize:
			builder.WriteString("MinSize|")
		case HintMaxSize:
			builder.WriteString("MaxSize|")
		case HintBaseSize:
			builder.WriteString("BaseSize|")
		case HintAspect:
			builder.WriteString("Aspect|")
		case HintResizeInc:
			builder.WriteString("ResizeInc|")
		case HintWinGravity:
			builder.WriteString("WinGravity|")
		case HintUserPos:
			builder.WriteString("UserPos|")
		case HintUserSize:
			builder.WriteString("UserSize|")
		default:
			builder.WriteString(fmt.Sprintf("WindowHints(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WindowHints) Has(other WindowHints) bool {
	return (w & other) == other
}

// WindowChildFunc: function of this type is passed to
// gdk_window_invalidate_maybe_recurse(). It gets called for each child of the
// window to determine whether to recursively invalidate it or now.
type WindowChildFunc func(window Windower) (ok bool)

// GetDefaultRootWindow obtains the root window (parent all other windows are
// inside) for the default display and screen.
//
// The function returns the following values:
//
//    - window: default root window.
//
func GetDefaultRootWindow() Windower {
	var _cret *C.GdkWindow // in

	_cret = C.gdk_get_default_root_window()

	var _window Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	return _window
}

// OffscreenWindowGetSurface gets the offscreen surface that an offscreen window
// renders into. If you need to keep this around over window resizes, you need
// to add a reference to it.
//
// The function takes the following parameters:
//
//    - window: Window.
//
// The function returns the following values:
//
//    - surface (optional): offscreen surface, or NULL if not offscreen.
//
func OffscreenWindowGetSurface(window Windower) *cairo.Surface {
	var _arg1 *C.GdkWindow       // out
	var _cret *C.cairo_surface_t // in

	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_offscreen_window_get_surface(_arg1)
	runtime.KeepAlive(window)

	var _surface *cairo.Surface // out

	if _cret != nil {
		_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
		C.cairo_surface_reference(_cret)
		runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
			C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
		})
	}

	return _surface
}

// WindowOverrides contains methods that are overridable.
type WindowOverrides struct {
	// The function takes the following parameters:
	//
	//    - width
	//    - height
	//
	// The function returns the following values:
	//
	CreateSurface func(width, height int) *cairo.Surface
	// The function takes the following parameters:
	//
	//    - embedderX
	//    - embedderY
	//    - offscreenX
	//    - offscreenY
	//
	FromEmbedder func(embedderX, embedderY float64, offscreenX, offscreenY *float64)
	// The function takes the following parameters:
	//
	//    - offscreenX
	//    - offscreenY
	//    - embedderX
	//    - embedderY
	//
	ToEmbedder func(offscreenX, offscreenY float64, embedderX, embedderY *float64)
}

func defaultWindowOverrides(v *Window) WindowOverrides {
	return WindowOverrides{
		CreateSurface: v.createSurface,
		FromEmbedder:  v.fromEmbedder,
		ToEmbedder:    v.toEmbedder,
	}
}

type Window struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Window)(nil)
)

// Windower describes types inherited from class Window.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Windower interface {
	coreglib.Objector
	baseWindow() *Window
}

var _ Windower = (*Window)(nil)

func init() {
	coreglib.RegisterClassInfo[*Window, *WindowClass, WindowOverrides](
		GTypeWindow,
		initWindowClass,
		wrapWindow,
		defaultWindowOverrides,
	)
}

func initWindowClass(gclass unsafe.Pointer, overrides WindowOverrides, classInitFunc func(*WindowClass)) {
	pclass := (*C.GdkWindowClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeWindow))))

	if overrides.CreateSurface != nil {
		pclass.create_surface = (*[0]byte)(C._gotk4_gdk3_WindowClass_create_surface)
	}

	if overrides.FromEmbedder != nil {
		pclass.from_embedder = (*[0]byte)(C._gotk4_gdk3_WindowClass_from_embedder)
	}

	if overrides.ToEmbedder != nil {
		pclass.to_embedder = (*[0]byte)(C._gotk4_gdk3_WindowClass_to_embedder)
	}

	if classInitFunc != nil {
		class := (*WindowClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWindow(obj *coreglib.Object) *Window {
	return &Window{
		Object: obj,
	}
}

func marshalWindow(p uintptr) (interface{}, error) {
	return wrapWindow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (window *Window) baseWindow() *Window {
	return window
}

// BaseWindow returns the underlying base object.
func BaseWindow(obj Windower) *Window {
	return obj.baseWindow()
}

// ConnectCreateSurface signal is emitted when an offscreen window needs its
// surface (re)created, which happens either when the window is first drawn to,
// or when the window is being resized. The first signal handler that returns a
// non-NULL surface will stop any further signal emission, and its surface will
// be used.
//
// Note that it is not possible to access the window's previous surface from
// within any callback of this signal. Calling
// gdk_offscreen_window_get_surface() will lead to a crash.
func (window *Window) ConnectCreateSurface(f func(width, height int) (surface *cairo.Surface)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(window, "create-surface", false, unsafe.Pointer(C._gotk4_gdk3_Window_ConnectCreateSurface), f)
}

// ConnectMovedToRect is emitted when the position of window is finalized after
// being moved to a destination rectangle.
//
// window might be flipped over the destination rectangle in order to keep it
// on-screen, in which case flipped_x and flipped_y will be set to TRUE
// accordingly.
//
// flipped_rect is the ideal position of window after any possible flipping, but
// before any possible sliding. final_rect is flipped_rect, but possibly
// translated in the case that flipping is still ineffective in keeping window
// on-screen.
func (window *Window) ConnectMovedToRect(f func(flippedRect, finalRect unsafe.Pointer, flippedX, flippedY bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(window, "moved-to-rect", false, unsafe.Pointer(C._gotk4_gdk3_Window_ConnectMovedToRect), f)
}

// ConnectPickEmbeddedChild signal is emitted to find an embedded child at the
// given position.
func (window *Window) ConnectPickEmbeddedChild(f func(x, y float64) (window Windower)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(window, "pick-embedded-child", false, unsafe.Pointer(C._gotk4_gdk3_Window_ConnectPickEmbeddedChild), f)
}

// NewWindow creates a new Window using the attributes from attributes. See
// WindowAttr and WindowAttributesType for more details. Note: to use this on
// displays other than the default display, parent must be specified.
//
// The function takes the following parameters:
//
//    - parent (optional) or NULL to create the window as a child of the default
//      root window for the default display.
//    - attributes of the new window.
//    - attributesMask: mask indicating which fields in attributes are valid.
//
// The function returns the following values:
//
//    - window: new Window.
//
func NewWindow(parent Windower, attributes *WindowAttr, attributesMask WindowAttributesType) *Window {
	var _arg1 *C.GdkWindow     // out
	var _arg2 *C.GdkWindowAttr // out
	var _arg3 C.gint           // out
	var _cret *C.GdkWindow     // in

	if parent != nil {
		_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	}
	_arg2 = (*C.GdkWindowAttr)(gextras.StructNative(unsafe.Pointer(attributes)))
	_arg3 = C.gint(attributesMask)

	_cret = C.gdk_window_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(attributesMask)

	var _window *Window // out

	_window = wrapWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _window
}

// BeginMoveDrag begins a window move operation (for a toplevel window).
//
// This function assumes that the drag is controlled by the client pointer
// device, use gdk_window_begin_move_drag_for_device() to begin a drag with a
// different device.
//
// The function takes the following parameters:
//
//    - button being used to drag, or 0 for a keyboard-initiated drag.
//    - rootX: root window X coordinate of mouse click that began the drag.
//    - rootY: root window Y coordinate of mouse click that began the drag.
//    - timestamp of mouse click that began the drag.
//
func (window *Window) BeginMoveDrag(button, rootX, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(button)
	_arg2 = C.gint(rootX)
	_arg3 = C.gint(rootY)
	_arg4 = C.guint32(timestamp)

	C.gdk_window_begin_move_drag(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(button)
	runtime.KeepAlive(rootX)
	runtime.KeepAlive(rootY)
	runtime.KeepAlive(timestamp)
}

// BeginPaintRect: convenience wrapper around gdk_window_begin_paint_region()
// which creates a rectangular region for you. See
// gdk_window_begin_paint_region() for details.
//
// Deprecated: Use gdk_window_begin_draw_frame() instead.
//
// The function takes the following parameters:
//
//    - rectangle you intend to draw to.
//
func (window *Window) BeginPaintRect(rectangle *Rectangle) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 *C.GdkRectangle // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(rectangle)))

	C.gdk_window_begin_paint_rect(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(rectangle)
}

// BeginPaintRegion indicates that you are beginning the process of redrawing
// region. A backing store (offscreen buffer) large enough to contain region
// will be created. The backing store will be initialized with the background
// color or background surface for window. Then, all drawing operations
// performed on window will be diverted to the backing store. When you call
// gdk_window_end_paint(), the backing store will be copied to window, making it
// visible onscreen. Only the part of window contained in region will be
// modified; that is, drawing operations are clipped to region.
//
// The net result of all this is to remove flicker, because the user sees the
// finished product appear all at once when you call gdk_window_end_paint(). If
// you draw to window directly without calling gdk_window_begin_paint_region(),
// the user may see flicker as individual drawing operations are performed in
// sequence. The clipping and background-initializing features of
// gdk_window_begin_paint_region() are conveniences for the programmer, so you
// can avoid doing that work yourself.
//
// When using GTK+, the widget system automatically places calls to
// gdk_window_begin_paint_region() and gdk_window_end_paint() around emissions
// of the expose_event signal. That is, if you’re writing an expose event
// handler, you can assume that the exposed area in EventExpose has already been
// cleared to the window background, is already set as the clip region, and
// already has a backing store. Therefore in most cases, application code need
// not call gdk_window_begin_paint_region(). (You can disable the automatic
// calls around expose events on a widget-by-widget basis by calling
// gtk_widget_set_double_buffered().)
//
// If you call this function multiple times before calling the matching
// gdk_window_end_paint(), the backing stores are pushed onto a stack.
// gdk_window_end_paint() copies the topmost backing store onscreen, subtracts
// the topmost region from all other regions in the stack, and pops the stack.
// All drawing operations affect only the topmost backing store in the stack.
// One matching call to gdk_window_end_paint() is required for each call to
// gdk_window_begin_paint_region().
//
// Deprecated: Use gdk_window_begin_draw_frame() instead.
//
// The function takes the following parameters:
//
//    - region you intend to draw to.
//
func (window *Window) BeginPaintRegion(region *cairo.Region) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))

	C.gdk_window_begin_paint_region(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(region)
}

// BeginResizeDrag begins a window resize operation (for a toplevel window).
//
// This function assumes that the drag is controlled by the client pointer
// device, use gdk_window_begin_resize_drag_for_device() to begin a drag with a
// different device.
//
// The function takes the following parameters:
//
//    - edge or corner from which the drag is started.
//    - button being used to drag, or 0 for a keyboard-initiated drag.
//    - rootX: root window X coordinate of mouse click that began the drag.
//    - rootY: root window Y coordinate of mouse click that began the drag.
//    - timestamp of mouse click that began the drag (use gdk_event_get_time()).
//
func (window *Window) BeginResizeDrag(edge WindowEdge, button, rootX, rootY int, timestamp uint32) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWindowEdge // out
	var _arg2 C.gint          // out
	var _arg3 C.gint          // out
	var _arg4 C.gint          // out
	var _arg5 C.guint32       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkWindowEdge(edge)
	_arg2 = C.gint(button)
	_arg3 = C.gint(rootX)
	_arg4 = C.gint(rootY)
	_arg5 = C.guint32(timestamp)

	C.gdk_window_begin_resize_drag(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(window)
	runtime.KeepAlive(edge)
	runtime.KeepAlive(button)
	runtime.KeepAlive(rootX)
	runtime.KeepAlive(rootY)
	runtime.KeepAlive(timestamp)
}

// Deiconify: attempt to deiconify (unminimize) window. On X11 the window
// manager may choose to ignore the request to deiconify. When using GTK+, use
// gtk_window_deiconify() instead of the Window variant. Or better yet, you
// probably want to use gtk_window_present_with_time(), which raises the window,
// focuses it, unminimizes it, and puts it on the current desktop.
func (window *Window) Deiconify() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_deiconify(_arg0)
	runtime.KeepAlive(window)
}

// Destroy destroys the window system resources associated with window and
// decrements window's reference count. The window system resources for all
// children of window are also destroyed, but the children’s reference counts
// are not decremented.
//
// Note that a window will not be destroyed automatically when its reference
// count reaches zero. You must call this function yourself before that happens.
func (window *Window) Destroy() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_destroy(_arg0)
	runtime.KeepAlive(window)
}

// EndPaint indicates that the backing store created by the most recent call to
// gdk_window_begin_paint_region() should be copied onscreen and deleted,
// leaving the next-most-recent backing store or no backing store at all as the
// active paint region. See gdk_window_begin_paint_region() for full details.
//
// It is an error to call this function without a matching
// gdk_window_begin_paint_region() first.
func (window *Window) EndPaint() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_end_paint(_arg0)
	runtime.KeepAlive(window)
}

// Focus sets keyboard focus to window. In most cases,
// gtk_window_present_with_time() should be used on a Window, rather than
// calling this function.
//
// The function takes the following parameters:
//
//    - timestamp of the event triggering the window focus.
//
func (window *Window) Focus(timestamp uint32) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.guint32    // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.guint32(timestamp)

	C.gdk_window_focus(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(timestamp)
}

// FreezeToplevelUpdatesLibgtkOnly: temporarily freezes a window and all its
// descendants such that it won't receive expose events. The window will begin
// receiving expose events again when
// gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
// gdk_window_freeze_toplevel_updates_libgtk_only() has been called more than
// once, gdk_window_thaw_toplevel_updates_libgtk_only() must be called an equal
// number of times to begin processing exposes.
//
// This function is not part of the GDK public API and is only for use by GTK+.
//
// Deprecated: This symbol was never meant to be used outside of GTK+.
func (window *Window) FreezeToplevelUpdatesLibgtkOnly() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_freeze_toplevel_updates_libgtk_only(_arg0)
	runtime.KeepAlive(window)
}

// FreezeUpdates: temporarily freezes a window such that it won’t receive expose
// events. The window will begin receiving expose events again when
// gdk_window_thaw_updates() is called. If gdk_window_freeze_updates() has been
// called more than once, gdk_window_thaw_updates() must be called an equal
// number of times to begin processing exposes.
func (window *Window) FreezeUpdates() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_freeze_updates(_arg0)
	runtime.KeepAlive(window)
}

// FullscreenOnMonitor moves the window into fullscreen mode on the given
// monitor. This means the window covers the entire screen and is above any
// panels or task bars.
//
// If the window was already fullscreen, then this function does nothing.
//
// The function takes the following parameters:
//
//    - monitor: which monitor to display fullscreen on.
//
func (window *Window) FullscreenOnMonitor(monitor int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(monitor)

	C.gdk_window_fullscreen_on_monitor(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(monitor)
}

// Children gets the list of children of window known to GDK. This function only
// returns children created via GDK, so for example it’s useless when used with
// the root window; it only returns windows an application created itself.
//
// The returned list must be freed, but the elements in the list need not be.
//
// The function returns the following values:
//
//    - list: list of child windows inside window.
//
func (window *Window) Children() []Windower {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GList     // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_children(_arg0)
	runtime.KeepAlive(window)

	var _list []Windower // out

	_list = make([]Windower, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GdkWindow)(v)
		var dst Windower // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gdk.Windower is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// ClipRegion computes the region of a window that potentially can be written to
// by drawing primitives. This region may not take into account other factors
// such as if the window is obscured by other windows, but no area outside of
// this region will be affected by drawing primitives.
//
// The function returns the following values:
//
//    - region This must be freed with cairo_region_destroy() when you are done.
//
func (window *Window) ClipRegion() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_clip_region(_arg0)
	runtime.KeepAlive(window)

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.cairo_region_t)(unsafe.Pointer(v.Native())))
	})

	return _region
}

// Decorations returns the decorations set on the GdkWindow with
// gdk_window_set_decorations().
//
// The function returns the following values:
//
//    - decorations: window decorations will be written here.
//    - ok: TRUE if the window has decorations set, FALSE otherwise.
//
func (window *Window) Decorations() (WMDecoration, bool) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.GdkWMDecoration // in
	var _cret C.gboolean        // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_decorations(_arg0, &_arg1)
	runtime.KeepAlive(window)

	var _decorations WMDecoration // out
	var _ok bool                  // out

	_decorations = WMDecoration(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _decorations, _ok
}

// Events gets the event mask for window for all master input devices. See
// gdk_window_set_events().
//
// The function returns the following values:
//
//    - eventMask: event mask for window.
//
func (window *Window) Events() EventMask {
	var _arg0 *C.GdkWindow   // out
	var _cret C.GdkEventMask // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_events(_arg0)
	runtime.KeepAlive(window)

	var _eventMask EventMask // out

	_eventMask = EventMask(_cret)

	return _eventMask
}

// FrameExtents obtains the bounding box of the window, including window manager
// titlebar/borders if any. The frame position is given in root window
// coordinates. To get the position of the window itself (rather than the frame)
// in root window coordinates, use gdk_window_get_origin().
//
// The function returns the following values:
//
//    - rect: rectangle to fill with bounding box of the window frame.
//
func (window *Window) FrameExtents() *Rectangle {
	var _arg0 *C.GdkWindow   // out
	var _arg1 C.GdkRectangle // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_get_frame_extents(_arg0, &_arg1)
	runtime.KeepAlive(window)

	var _rect *Rectangle // out

	_rect = (*Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _rect
}

// Geometry: any of the return location arguments to this function may be NULL,
// if you aren’t interested in getting the value of that field.
//
// The X and Y coordinates returned are relative to the parent window of window,
// which for toplevels usually means relative to the window decorations
// (titlebar, etc.) rather than relative to the root window (screen-size
// background window).
//
// On the X11 platform, the geometry is obtained from the X server, so reflects
// the latest position of window; this may be out-of-sync with the position of
// window delivered in the most-recently-processed EventConfigure.
// gdk_window_get_position() in contrast gets the position from the most recent
// configure event.
//
// Note: If window is not a toplevel, it is much better to call
// gdk_window_get_position(), gdk_window_get_width() and gdk_window_get_height()
// instead, because it avoids the roundtrip to the X server and because these
// functions support the full 32-bit coordinate space, whereas
// gdk_window_get_geometry() is restricted to the 16-bit coordinates of X11.
//
// The function returns the following values:
//
//    - x (optional): return location for X coordinate of window (relative to its
//      parent).
//    - y (optional): return location for Y coordinate of window (relative to its
//      parent).
//    - width (optional): return location for width of window.
//    - height (optional): return location for height of window.
//
func (window *Window) Geometry() (x, y, width, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in
	var _arg3 C.gint       // in
	var _arg4 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_get_geometry(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)
	runtime.KeepAlive(window)

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(_arg1)
	_y = int(_arg2)
	_width = int(_arg3)
	_height = int(_arg4)

	return _x, _y, _width, _height
}

// Origin obtains the position of a window in root window coordinates. (Compare
// with gdk_window_get_position() and gdk_window_get_geometry() which return the
// position of a window relative to its parent window.).
//
// The function returns the following values:
//
//    - x (optional): return location for X coordinate.
//    - y (optional): return location for Y coordinate.
//    - gint: not meaningful, ignore.
//
func (window *Window) Origin() (x, y, gint int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in
	var _cret C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_origin(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(window)

	var _x int    // out
	var _y int    // out
	var _gint int // out

	_x = int(_arg1)
	_y = int(_arg2)
	_gint = int(_cret)

	return _x, _y, _gint
}

// Parent obtains the parent of window, as known to GDK. Does not query the X
// server; thus this returns the parent as passed to gdk_window_new(), not the
// actual parent. This should never matter unless you’re using Xlib calls mixed
// with GDK calls on the X11 platform. It may also matter for toplevel windows,
// because the window manager may choose to reparent them.
//
// Note that you should use gdk_window_get_effective_parent() when writing
// generic code that walks up a window hierarchy, because
// gdk_window_get_parent() will most likely not do what you expect if there are
// offscreen windows in the hierarchy.
//
// The function returns the following values:
//
//    - ret: parent of window.
//
func (window *Window) Parent() Windower {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_parent(_arg0)
	runtime.KeepAlive(window)

	var _ret Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_ret = rv
	}

	return _ret
}

// Pointer obtains the current pointer position and modifier state. The position
// is given in coordinates relative to the upper left corner of window.
//
// Deprecated: Use gdk_window_get_device_position() instead.
//
// The function returns the following values:
//
//    - x (optional): return location for X coordinate of pointer or NULL to not
//      return the X coordinate.
//    - y (optional): return location for Y coordinate of pointer or NULL to not
//      return the Y coordinate.
//    - mask (optional): return location for modifier mask or NULL to not return
//      the modifier mask.
//    - ret (optional): window containing the pointer (as with
//      gdk_window_at_pointer()), or NULL if the window containing the pointer
//      isn’t known to GDK.
//
func (window *Window) Pointer() (x, y int, mask ModifierType, ret Windower) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.gint            // in
	var _arg2 C.gint            // in
	var _arg3 C.GdkModifierType // in
	var _cret *C.GdkWindow      // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_pointer(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(window)

	var _x int             // out
	var _y int             // out
	var _mask ModifierType // out
	var _ret Windower      // out

	_x = int(_arg1)
	_y = int(_arg2)
	_mask = ModifierType(_arg3)
	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_ret = rv
		}
	}

	return _x, _y, _mask, _ret
}

// Position obtains the position of the window as reported in the
// most-recently-processed EventConfigure. Contrast with
// gdk_window_get_geometry() which queries the X server for the current window
// position, regardless of which events have been received or processed.
//
// The position coordinates are relative to the window’s parent window.
//
// The function returns the following values:
//
//    - x (optional): x coordinate of window.
//    - y (optional): y coordinate of window.
//
func (window *Window) Position() (x, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_get_position(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(window)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

// RootOrigin obtains the top-left corner of the window manager frame in root
// window coordinates.
//
// The function returns the following values:
//
//    - x: return location for X position of window frame.
//    - y: return location for Y position of window frame.
//
func (window *Window) RootOrigin() (x, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_get_root_origin(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(window)

	var _x int // out
	var _y int // out

	_x = int(_arg1)
	_y = int(_arg2)

	return _x, _y
}

// SourceEvents returns the event mask for window corresponding to the device
// class specified by source.
//
// The function takes the following parameters:
//
//    - source to define the source class.
//
// The function returns the following values:
//
//    - eventMask: source event mask for window.
//
func (window *Window) SourceEvents(source InputSource) EventMask {
	var _arg0 *C.GdkWindow     // out
	var _arg1 C.GdkInputSource // out
	var _cret C.GdkEventMask   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkInputSource(source)

	_cret = C.gdk_window_get_source_events(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(source)

	var _eventMask EventMask // out

	_eventMask = EventMask(_cret)

	return _eventMask
}

// State gets the bitwise OR of the currently active window state flags, from
// the WindowState enumeration.
//
// The function returns the following values:
//
//    - windowState: window state bitfield.
//
func (window *Window) State() WindowState {
	var _arg0 *C.GdkWindow     // out
	var _cret C.GdkWindowState // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_state(_arg0)
	runtime.KeepAlive(window)

	var _windowState WindowState // out

	_windowState = WindowState(_cret)

	return _windowState
}

// Toplevel gets the toplevel window that’s an ancestor of window.
//
// Any window type but GDK_WINDOW_CHILD is considered a toplevel window, as is a
// GDK_WINDOW_CHILD window that has a root window as parent.
//
// Note that you should use gdk_window_get_effective_toplevel() when you want to
// get to a window’s toplevel as seen on screen, because
// gdk_window_get_toplevel() will most likely not do what you expect if there
// are offscreen windows in the hierarchy.
//
// The function returns the following values:
//
//    - ret: toplevel window containing window.
//
func (window *Window) Toplevel() Windower {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GdkWindow // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_toplevel(_arg0)
	runtime.KeepAlive(window)

	var _ret Windower // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_ret = rv
	}

	return _ret
}

// UpdateArea transfers ownership of the update area from window to the caller
// of the function. That is, after calling this function, window will no longer
// have an invalid/dirty region; the update area is removed from window and
// handed to you. If a window has no update area, gdk_window_get_update_area()
// returns NULL. You are responsible for calling cairo_region_destroy() on the
// returned region if it’s non-NULL.
//
// The function returns the following values:
//
//    - region: update area for window.
//
func (window *Window) UpdateArea() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_update_area(_arg0)
	runtime.KeepAlive(window)

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.cairo_region_t)(unsafe.Pointer(v.Native())))
	})

	return _region
}

// UserData retrieves the user data for window, which is normally the widget
// that window belongs to. See gdk_window_set_user_data().
//
// The function returns the following values:
//
//    - data (optional): return location for user data.
//
func (window *Window) UserData() unsafe.Pointer {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gpointer   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_get_user_data(_arg0, &_arg1)
	runtime.KeepAlive(window)

	var _data unsafe.Pointer // out

	_data = (unsafe.Pointer)(unsafe.Pointer(_arg1))

	return _data
}

// VisibleRegion computes the region of the window that is potentially visible.
// This does not necessarily take into account if the window is obscured by
// other windows, but no area outside of this region is visible.
//
// The function returns the following values:
//
//    - region This must be freed with cairo_region_destroy() when you are done.
//
func (window *Window) VisibleRegion() *cairo.Region {
	var _arg0 *C.GdkWindow      // out
	var _cret *C.cairo_region_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_visible_region(_arg0)
	runtime.KeepAlive(window)

	var _region *cairo.Region // out

	{
		_pp := &struct{ p unsafe.Pointer }{unsafe.Pointer(_cret)}
		_region = (*cairo.Region)(unsafe.Pointer(_pp))
	}
	runtime.SetFinalizer(_region, func(v *cairo.Region) {
		C.cairo_region_destroy((*C.cairo_region_t)(unsafe.Pointer(v.Native())))
	})

	return _region
}

// WindowType gets the type of the window. See WindowType.
//
// The function returns the following values:
//
//    - windowType: type of window.
//
func (window *Window) WindowType() WindowType {
	var _arg0 *C.GdkWindow    // out
	var _cret C.GdkWindowType // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_window_type(_arg0)
	runtime.KeepAlive(window)

	var _windowType WindowType // out

	_windowType = WindowType(_cret)

	return _windowType
}

// Hide: for toplevel windows, withdraws them, so they will no longer be known
// to the window manager; for all windows, unmaps them, so they won’t be
// displayed. Normally done automatically as part of gtk_widget_hide().
func (window *Window) Hide() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_hide(_arg0)
	runtime.KeepAlive(window)
}

// Iconify asks to iconify (minimize) window. The window manager may choose to
// ignore the request, but normally will honor it. Using gtk_window_iconify() is
// preferred, if you have a Window widget.
//
// This function only makes sense when window is a toplevel window.
func (window *Window) Iconify() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_iconify(_arg0)
	runtime.KeepAlive(window)
}

// InvalidateMaybeRecurse adds region to the update area for window. The update
// area is the region that needs to be redrawn, or “dirty region.” The call
// gdk_window_process_updates() sends one or more expose events to the window,
// which together cover the entire update area. An application would normally
// redraw the contents of window in response to those expose events.
//
// GDK will call gdk_window_process_all_updates() on your behalf whenever your
// program returns to the main loop and becomes idle, so normally there’s no
// need to do that manually, you just need to invalidate regions that you know
// should be redrawn.
//
// The child_func parameter controls whether the region of each child window
// that intersects region will also be invalidated. Only children for which
// child_func returns UE will have the area invalidated.
//
// The function takes the following parameters:
//
//    - region: #cairo_region_t.
//    - childFunc (optional): function to use to decide if to recurse to a child,
//      NULL means never recurse.
//
func (window *Window) InvalidateMaybeRecurse(region *cairo.Region, childFunc WindowChildFunc) {
	var _arg0 *C.GdkWindow         // out
	var _arg1 *C.cairo_region_t    // out
	var _arg2 C.GdkWindowChildFunc // out
	var _arg3 C.gpointer

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))
	if childFunc != nil {
		_arg2 = (*[0]byte)(C._gotk4_gdk3_WindowChildFunc)
		_arg3 = C.gpointer(gbox.Assign(childFunc))
		defer gbox.Delete(uintptr(_arg3))
	}

	C.gdk_window_invalidate_maybe_recurse(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(window)
	runtime.KeepAlive(region)
	runtime.KeepAlive(childFunc)
}

// InvalidateRect: convenience wrapper around gdk_window_invalidate_region()
// which invalidates a rectangular region. See gdk_window_invalidate_region()
// for details.
//
// The function takes the following parameters:
//
//    - rect (optional): rectangle to invalidate or NULL to invalidate the whole
//      window.
//    - invalidateChildren: whether to also invalidate child windows.
//
func (window *Window) InvalidateRect(rect *Rectangle, invalidateChildren bool) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 *C.GdkRectangle // out
	var _arg2 C.gboolean      // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if rect != nil {
		_arg1 = (*C.GdkRectangle)(gextras.StructNative(unsafe.Pointer(rect)))
	}
	if invalidateChildren {
		_arg2 = C.TRUE
	}

	C.gdk_window_invalidate_rect(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(rect)
	runtime.KeepAlive(invalidateChildren)
}

// InvalidateRegion adds region to the update area for window. The update area
// is the region that needs to be redrawn, or “dirty region.” The call
// gdk_window_process_updates() sends one or more expose events to the window,
// which together cover the entire update area. An application would normally
// redraw the contents of window in response to those expose events.
//
// GDK will call gdk_window_process_all_updates() on your behalf whenever your
// program returns to the main loop and becomes idle, so normally there’s no
// need to do that manually, you just need to invalidate regions that you know
// should be redrawn.
//
// The invalidate_children parameter controls whether the region of each child
// window that intersects region will also be invalidated. If FALSE, then the
// update area for child windows will remain unaffected. See
// gdk_window_invalidate_maybe_recurse if you need fine grained control over
// which children are invalidated.
//
// The function takes the following parameters:
//
//    - region: #cairo_region_t.
//    - invalidateChildren: TRUE to also invalidate child windows.
//
func (window *Window) InvalidateRegion(region *cairo.Region, invalidateChildren bool) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gboolean        // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))
	if invalidateChildren {
		_arg2 = C.TRUE
	}

	C.gdk_window_invalidate_region(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(region)
	runtime.KeepAlive(invalidateChildren)
}

// IsViewable: check if the window and all ancestors of the window are mapped.
// (This is not necessarily "viewable" in the X sense, since we only check as
// far as we have GDK window parents, not to the root window.).
//
// The function returns the following values:
//
//    - ok: TRUE if the window is viewable.
//
func (window *Window) IsViewable() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_is_viewable(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsVisible checks whether the window has been mapped (with gdk_window_show()
// or gdk_window_show_unraised()).
//
// The function returns the following values:
//
//    - ok: TRUE if the window is mapped.
//
func (window *Window) IsVisible() bool {
	var _arg0 *C.GdkWindow // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_is_visible(_arg0)
	runtime.KeepAlive(window)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Lower lowers window to the bottom of the Z-order (stacking order), so that
// other windows with the same parent window appear above window. This is true
// whether or not the other windows are visible.
//
// If window is a toplevel, the window manager may choose to deny the request to
// move the window in the Z-order, gdk_window_lower() only requests the restack,
// does not guarantee it.
//
// Note that gdk_window_show() raises the window again, so don’t call this
// function before gdk_window_show(). (Try gdk_window_show_unraised().).
func (window *Window) Lower() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_lower(_arg0)
	runtime.KeepAlive(window)
}

// Maximize maximizes the window. If the window was already maximized, then this
// function does nothing.
//
// On X11, asks the window manager to maximize window, if the window manager
// supports this operation. Not all window managers support this, and some
// deliberately ignore it or don’t have a concept of “maximized”; so you can’t
// rely on the maximization actually happening. But it will happen with most
// standard window managers, and GDK makes a best effort to get it to happen.
//
// On Windows, reliably maximizes the window.
func (window *Window) Maximize() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_maximize(_arg0)
	runtime.KeepAlive(window)
}

// MergeChildShapes merges the shape masks for any child windows into the shape
// mask for window. i.e. the union of all masks for window and its children will
// become the new mask for window. See gdk_window_shape_combine_region().
//
// This function is distinct from gdk_window_set_child_shapes() because it
// includes window’s shape mask in the set of shapes to be merged.
func (window *Window) MergeChildShapes() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_merge_child_shapes(_arg0)
	runtime.KeepAlive(window)
}

// Move repositions a window relative to its parent window. For toplevel
// windows, window managers may ignore or modify the move; you should probably
// use gtk_window_move() on a Window widget anyway, instead of using GDK
// functions. For child windows, the move will reliably succeed.
//
// If you’re also planning to resize the window, use gdk_window_move_resize() to
// both move and resize simultaneously, for a nicer visual effect.
//
// The function takes the following parameters:
//
//    - x: x coordinate relative to window’s parent.
//    - y: y coordinate relative to window’s parent.
//
func (window *Window) Move(x, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)

	C.gdk_window_move(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// MoveResize: equivalent to calling gdk_window_move() and gdk_window_resize(),
// except that both operations are performed at once, avoiding strange visual
// effects. (i.e. the user may be able to see the window first move, then
// resize, if you don’t use gdk_window_move_resize().).
//
// The function takes the following parameters:
//
//    - x: new X position relative to window’s parent.
//    - y: new Y position relative to window’s parent.
//    - width: new width.
//    - height: new height.
//
func (window *Window) MoveResize(x, y, width, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out
	var _arg4 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(x)
	_arg2 = C.gint(y)
	_arg3 = C.gint(width)
	_arg4 = C.gint(height)

	C.gdk_window_move_resize(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// PeekChildren: like gdk_window_get_children(), but does not copy the list of
// children, so the list does not need to be freed.
//
// The function returns the following values:
//
//    - list: a reference to the list of child windows in window.
//
func (window *Window) PeekChildren() []Windower {
	var _arg0 *C.GdkWindow // out
	var _cret *C.GList     // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_peek_children(_arg0)
	runtime.KeepAlive(window)

	var _list []Windower // out

	_list = make([]Windower, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.GdkWindow)(v)
		var dst Windower // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gdk.Windower is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// ProcessUpdates sends one or more expose events to window. The areas in each
// expose event will cover the entire update area for the window (see
// gdk_window_invalidate_region() for details). Normally GDK calls
// gdk_window_process_all_updates() on your behalf, so there’s no need to call
// this function unless you want to force expose events to be delivered
// immediately and synchronously (vs. the usual case, where GDK delivers them in
// an idle handler). Occasionally this is useful to produce nicer scrolling
// behavior, for example.
//
// Deprecated: since version 3.22.
//
// The function takes the following parameters:
//
//    - updateChildren: whether to also process updates for child windows.
//
func (window *Window) ProcessUpdates(updateChildren bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if updateChildren {
		_arg1 = C.TRUE
	}

	C.gdk_window_process_updates(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(updateChildren)
}

// Raise raises window to the top of the Z-order (stacking order), so that other
// windows with the same parent window appear below window. This is true whether
// or not the windows are visible.
//
// If window is a toplevel, the window manager may choose to deny the request to
// move the window in the Z-order, gdk_window_raise() only requests the restack,
// does not guarantee it.
func (window *Window) Raise() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_raise(_arg0)
	runtime.KeepAlive(window)
}

// RegisterDND registers a window as a potential drop destination.
func (window *Window) RegisterDND() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_register_dnd(_arg0)
	runtime.KeepAlive(window)
}

// Reparent reparents window into the given new_parent. The window being
// reparented will be unmapped as a side effect.
//
// The function takes the following parameters:
//
//    - newParent: new parent to move window into.
//    - x: x location inside the new parent.
//    - y: y location inside the new parent.
//
func (window *Window) Reparent(newParent Windower, x, y int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out
	var _arg2 C.gint       // out
	var _arg3 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(newParent).Native()))
	_arg2 = C.gint(x)
	_arg3 = C.gint(y)

	C.gdk_window_reparent(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(window)
	runtime.KeepAlive(newParent)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// Resize resizes window; for toplevel windows, asks the window manager to
// resize the window. The window manager may not allow the resize. When using
// GTK+, use gtk_window_resize() instead of this low-level GDK function.
//
// Windows may not be resized below 1x1.
//
// If you’re also planning to move the window, use gdk_window_move_resize() to
// both move and resize simultaneously, for a nicer visual effect.
//
// The function takes the following parameters:
//
//    - width: new width of the window.
//    - height: new height of the window.
//
func (window *Window) Resize(width, height int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(width)
	_arg2 = C.gint(height)

	C.gdk_window_resize(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// Scroll the contents of window, both pixels and children, by the given amount.
// window itself does not move. Portions of the window that the scroll operation
// brings in from offscreen areas are invalidated. The invalidated region may be
// bigger than what would strictly be necessary.
//
// For X11, a minimum area will be invalidated if the window has no subwindows,
// or if the edges of the window’s parent do not extend beyond the edges of the
// window. In other cases, a multi-step process is used to scroll the window
// which may produce temporary visual artifacts and unnecessary invalidations.
//
// The function takes the following parameters:
//
//    - dx: amount to scroll in the X direction.
//    - dy: amount to scroll in the Y direction.
//
func (window *Window) Scroll(dx, dy int) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(dx)
	_arg2 = C.gint(dy)

	C.gdk_window_scroll(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// SetBackground sets the background color of window.
//
// However, when using GTK+, influence the background of a widget using a style
// class or CSS — if you’re an application — or with
// gtk_style_context_set_background() — if you're implementing a custom widget.
//
// Deprecated: Don't use this function.
//
// The function takes the following parameters:
//
//    - color: Color.
//
func (window *Window) SetBackground(color *Color) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkColor  // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkColor)(gextras.StructNative(unsafe.Pointer(color)))

	C.gdk_window_set_background(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(color)
}

// SetBackgroundPattern sets the background of window.
//
// A background of NULL means that the window won't have any background. On the
// X11 backend it's also possible to inherit the background from the parent
// window using gdk_x11_get_parent_relative_pattern().
//
// The windowing system will normally fill a window with its background when the
// window is obscured then exposed.
//
// Deprecated: Don't use this function.
//
// The function takes the following parameters:
//
//    - pattern (optional) to use, or NULL.
//
func (window *Window) SetBackgroundPattern(pattern *cairo.Pattern) {
	var _arg0 *C.GdkWindow       // out
	var _arg1 *C.cairo_pattern_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if pattern != nil {
		_arg1 = (*C.cairo_pattern_t)(unsafe.Pointer(pattern.Native()))
	}

	C.gdk_window_set_background_pattern(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(pattern)
}

// SetBackgroundRGBA sets the background color of window.
//
// See also gdk_window_set_background_pattern().
//
// Deprecated: Don't use this function.
//
// The function takes the following parameters:
//
//    - rgba: RGBA color.
//
func (window *Window) SetBackgroundRGBA(rgba *RGBA) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkRGBA   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))

	C.gdk_window_set_background_rgba(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(rgba)
}

// SetChildShapes sets the shape mask of window to the union of shape masks for
// all children of window, ignoring the shape mask of window itself. Contrast
// with gdk_window_merge_child_shapes() which includes the shape mask of window
// in the masks to be merged.
func (window *Window) SetChildShapes() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_set_child_shapes(_arg0)
	runtime.KeepAlive(window)
}

// SetCursor sets the default mouse pointer for a Window.
//
// Note that cursor must be for the same display as window.
//
// Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
// the cursor. To make the cursor invisible, use GDK_BLANK_CURSOR. Passing NULL
// for the cursor argument to gdk_window_set_cursor() means that window will use
// the cursor of its parent window. Most windows should use this default.
//
// The function takes the following parameters:
//
//    - cursor (optional): cursor.
//
func (window *Window) SetCursor(cursor Cursorrer) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkCursor // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if cursor != nil {
		_arg1 = (*C.GdkCursor)(unsafe.Pointer(coreglib.InternObject(cursor).Native()))
	}

	C.gdk_window_set_cursor(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(cursor)
}

// SetDecorations: “Decorations” are the features the window manager adds to a
// toplevel Window. This function sets the traditional Motif window manager
// hints that tell the window manager which decorations you would like your
// window to have. Usually you should use gtk_window_set_decorated() on a Window
// instead of using the GDK function directly.
//
// The decorations argument is the logical OR of the fields in the WMDecoration
// enumeration. If K_DECOR_ALL is included in the mask, the other bits indicate
// which decorations should be turned off. If K_DECOR_ALL is not included, then
// the other bits indicate which decorations should be turned on.
//
// Most window managers honor a decorations hint of 0 to disable all
// decorations, but very few honor all possible combinations of bits.
//
// The function takes the following parameters:
//
//    - decorations: decoration hint mask.
//
func (window *Window) SetDecorations(decorations WMDecoration) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 C.GdkWMDecoration // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkWMDecoration(decorations)

	C.gdk_window_set_decorations(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(decorations)
}

// SetEvents: event mask for a window determines which events will be reported
// for that window from all master input devices. For example, an event mask
// including K_BUTTON_PRESS_MASK means the window should report button press
// events. The event mask is the bitwise OR of values from the EventMask
// enumeration.
//
// See the [input handling overview][event-masks] for details.
//
// The function takes the following parameters:
//
//    - eventMask: event mask for window.
//
func (window *Window) SetEvents(eventMask EventMask) {
	var _arg0 *C.GdkWindow   // out
	var _arg1 C.GdkEventMask // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkEventMask(eventMask)

	C.gdk_window_set_events(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(eventMask)
}

// SetFunctions sets hints about the window management functions to make
// available via buttons on the window frame.
//
// On the X backend, this function sets the traditional Motif window manager
// hint for this purpose. However, few window managers do anything reliable or
// interesting with this hint. Many ignore it entirely.
//
// The functions argument is the logical OR of values from the WMFunction
// enumeration. If the bitmask includes K_FUNC_ALL, then the other bits indicate
// which functions to disable; if it doesn’t include K_FUNC_ALL, it indicates
// which functions to enable.
//
// The function takes the following parameters:
//
//    - functions: bitmask of operations to allow on window.
//
func (window *Window) SetFunctions(functions WMFunction) {
	var _arg0 *C.GdkWindow    // out
	var _arg1 C.GdkWMFunction // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkWMFunction(functions)

	C.gdk_window_set_functions(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(functions)
}

// SetGeometryHints sets the geometry hints for window. Hints flagged in
// geom_mask are set, hints not flagged in geom_mask are unset. To unset all
// hints, use a geom_mask of 0 and a geometry of NULL.
//
// This function provides hints to the windowing system about acceptable sizes
// for a toplevel window. The purpose of this is to constrain user resizing, but
// the windowing system will typically (but is not required to) also constrain
// the current size of the window to the provided values and constrain
// programatic resizing via gdk_window_resize() or gdk_window_move_resize().
//
// Note that on X11, this effect has no effect on windows of type
// GDK_WINDOW_TEMP or windows where override redirect has been turned on via
// gdk_window_set_override_redirect() since these windows are not resizable by
// the user.
//
// Since you can’t count on the windowing system doing the constraints for
// programmatic resizes, you should generally call gdk_window_constrain_size()
// yourself to determine appropriate sizes.
//
// The function takes the following parameters:
//
//    - geometry hints.
//    - geomMask: bitmask indicating fields of geometry to pay attention to.
//
func (window *Window) SetGeometryHints(geometry *Geometry, geomMask WindowHints) {
	var _arg0 *C.GdkWindow     // out
	var _arg1 *C.GdkGeometry   // out
	var _arg2 C.GdkWindowHints // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkGeometry)(gextras.StructNative(unsafe.Pointer(geometry)))
	_arg2 = C.GdkWindowHints(geomMask)

	C.gdk_window_set_geometry_hints(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(geometry)
	runtime.KeepAlive(geomMask)
}

// SetGroup sets the group leader window for window. By default, GDK sets the
// group leader for all toplevel windows to a global window implicitly created
// by GDK. With this function you can override this default.
//
// The group leader window allows the window manager to distinguish all windows
// that belong to a single application. It may for example allow users to
// minimize/unminimize all windows belonging to an application at once. You
// should only set a non-default group window if your application pretends to be
// multiple applications.
//
// The function takes the following parameters:
//
//    - leader (optional): group leader window, or NULL to restore the default
//      group leader window.
//
func (window *Window) SetGroup(leader Windower) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if leader != nil {
		_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(leader).Native()))
	}

	C.gdk_window_set_group(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(leader)
}

// SetIconList sets a list of icons for the window. One of these will be used to
// represent the window when it has been iconified. The icon is usually shown in
// an icon box or some sort of task bar. Which icon size is shown depends on the
// window manager. The window manager can scale the icon but setting several
// size icons can give better image quality since the window manager may only
// need to scale the icon by a small amount or not at all.
//
// Note that some platforms don't support window icons.
//
// The function takes the following parameters:
//
//    - pixbufs: A list of pixbufs, of different sizes.
//
func (window *Window) SetIconList(pixbufs []*gdkpixbuf.Pixbuf) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GList     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	for i := len(pixbufs) - 1; i >= 0; i-- {
		src := pixbufs[i]
		var dst *C.GdkPixbuf // out
		dst = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(src).Native()))
		_arg1 = C.g_list_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_list_free(_arg1)

	C.gdk_window_set_icon_list(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(pixbufs)
}

// SetIconName windows may have a name used while minimized, distinct from the
// name they display in their titlebar. Most of the time this is a bad idea from
// a user interface standpoint. But you can set such a name with this function,
// if you like.
//
// After calling this with a non-NULL name, calls to gdk_window_set_title() will
// not update the icon title.
//
// Using NULL for name unsets the icon title; further calls to
// gdk_window_set_title() will again update the icon title as well.
//
// Note that some platforms don't support window icons.
//
// The function takes the following parameters:
//
//    - name (optional) of window while iconified (minimized).
//
func (window *Window) SetIconName(name string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.gdk_window_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(name)
}

// SetModalHint: application can use this hint to tell the window manager that a
// certain window has modal behaviour. The window manager can use this
// information to handle modal windows in a special way.
//
// You should only use this on windows for which you have previously called
// gdk_window_set_transient_for().
//
// The function takes the following parameters:
//
//    - modal: TRUE if the window is modal, FALSE otherwise.
//
func (window *Window) SetModalHint(modal bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if modal {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_modal_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(modal)
}

// SetOverrideRedirect: override redirect window is not under the control of the
// window manager. This means it won’t have a titlebar, won’t be minimizable,
// etc. - it will be entirely under the control of the application. The window
// manager can’t see the override redirect window at all.
//
// Override redirect should only be used for short-lived temporary windows, such
// as popup menus. Menu uses an override redirect window in its implementation,
// for example.
//
// The function takes the following parameters:
//
//    - overrideRedirect: TRUE if window should be override redirect.
//
func (window *Window) SetOverrideRedirect(overrideRedirect bool) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if overrideRedirect {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_override_redirect(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(overrideRedirect)
}

// SetRole: when using GTK+, typically you should use gtk_window_set_role()
// instead of this low-level function.
//
// The window manager and session manager use a window’s role to distinguish it
// from other kinds of window in the same application. When an application is
// restarted after being saved in a previous session, all windows with the same
// title and role are treated as interchangeable. So if you have two windows
// with the same title that should be distinguished for session management
// purposes, you should set the role on those windows. It doesn’t matter what
// string you use for the role, as long as you have a different role for each
// non-interchangeable kind of window.
//
// The function takes the following parameters:
//
//    - role: string indicating its role.
//
func (window *Window) SetRole(role string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(role)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_role(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(role)
}

// SetStaticGravities: used to set the bit gravity of the given window to
// static, and flag it so all children get static subwindow gravity. This is
// used if you are implementing scary features that involve deep knowledge of
// the windowing system. Don’t worry about it.
//
// Deprecated: static gravities haven't worked on anything but X11 for a long
// time.
//
// The function takes the following parameters:
//
//    - useStatic: TRUE to turn on static gravity.
//
// The function returns the following values:
//
//    - ok: FALSE.
//
func (window *Window) SetStaticGravities(useStatic bool) bool {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if useStatic {
		_arg1 = C.TRUE
	}

	_cret = C.gdk_window_set_static_gravities(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(useStatic)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetTitle sets the title of a toplevel window, to be displayed in the
// titlebar. If you haven’t explicitly set the icon name for the window (using
// gdk_window_set_icon_name()), the icon name will be set to title as well.
// title must be in UTF-8 encoding (as with all user-readable strings in
// GDK/GTK+). title may not be NULL.
//
// The function takes the following parameters:
//
//    - title of window.
//
func (window *Window) SetTitle(title string) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gdk_window_set_title(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(title)
}

// SetTransientFor indicates to the window manager that window is a transient
// dialog associated with the application window parent. This allows the window
// manager to do things like center window on parent and keep window above
// parent.
//
// See gtk_window_set_transient_for() if you’re using Window or Dialog.
//
// The function takes the following parameters:
//
//    - parent: another toplevel Window.
//
func (window *Window) SetTransientFor(parent Windower) {
	var _arg0 *C.GdkWindow // out
	var _arg1 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(parent).Native()))

	C.gdk_window_set_transient_for(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(parent)
}

// SetTypeHint: application can use this call to provide a hint to the window
// manager about the functionality of a window. The window manager can use this
// information when determining the decoration and behaviour of the window.
//
// The hint must be set before the window is mapped.
//
// The function takes the following parameters:
//
//    - hint of the function this window will have.
//
func (window *Window) SetTypeHint(hint WindowTypeHint) {
	var _arg0 *C.GdkWindow        // out
	var _arg1 C.GdkWindowTypeHint // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.GdkWindowTypeHint(hint)

	C.gdk_window_set_type_hint(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(hint)
}

// SetUserData: for most purposes this function is deprecated in favor of
// g_object_set_data(). However, for historical reasons GTK+ stores the Widget
// that owns a Window as user data on the Window. So, custom widget
// implementations should use this function for that. If GTK+ receives an event
// for a Window, and the user data for the window is non-NULL, GTK+ will assume
// the user data is a Widget, and forward the event to that widget.
//
// The function takes the following parameters:
//
//    - userData (optional): user data.
//
func (window *Window) SetUserData(userData *coreglib.Object) {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gpointer   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(userData.Native()))

	C.gdk_window_set_user_data(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(userData)
}

// ShapeCombineRegion makes pixels in window outside shape_region be
// transparent, so that the window may be nonrectangular.
//
// If shape_region is NULL, the shape will be unset, so the whole window will be
// opaque again. offset_x and offset_y are ignored if shape_region is NULL.
//
// On the X11 platform, this uses an X server extension which is widely
// available on most common platforms, but not available on very old X servers,
// and occasionally the implementation will be buggy. On servers without the
// shape extension, this function will do nothing.
//
// This function works on both toplevel and child windows.
//
// The function takes the following parameters:
//
//    - shapeRegion (optional): region of window to be non-transparent.
//    - offsetX: x position of shape_region in window coordinates.
//    - offsetY: y position of shape_region in window coordinates.
//
func (window *Window) ShapeCombineRegion(shapeRegion *cairo.Region, offsetX, offsetY int) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out
	var _arg2 C.gint            // out
	var _arg3 C.gint            // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if shapeRegion != nil {
		_arg1 = (*C.cairo_region_t)(unsafe.Pointer(shapeRegion.Native()))
	}
	_arg2 = C.gint(offsetX)
	_arg3 = C.gint(offsetY)

	C.gdk_window_shape_combine_region(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(window)
	runtime.KeepAlive(shapeRegion)
	runtime.KeepAlive(offsetX)
	runtime.KeepAlive(offsetY)
}

// Show: like gdk_window_show_unraised(), but also raises the window to the top
// of the window stack (moves the window to the front of the Z-order).
//
// This function maps a window so it’s visible onscreen. Its opposite is
// gdk_window_hide().
//
// When implementing a Widget, you should call this function on the widget's
// Window as part of the “map” method.
func (window *Window) Show() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_show(_arg0)
	runtime.KeepAlive(window)
}

// ShowUnraised shows a Window onscreen, but does not modify its stacking order.
// In contrast, gdk_window_show() will raise the window to the top of the window
// stack.
//
// On the X11 platform, in Xlib terms, this function calls XMapWindow() (it also
// updates some internal GDK state, which means that you can’t really use
// XMapWindow() directly on a GDK window).
func (window *Window) ShowUnraised() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_show_unraised(_arg0)
	runtime.KeepAlive(window)
}

// Stick: “Pins” a window such that it’s on all workspaces and does not scroll
// with viewports, for window managers that have scrollable viewports. (When
// using Window, gtk_window_stick() may be more useful.)
//
// On the X11 platform, this function depends on window manager support, so may
// have no effect with many window managers. However, GDK will do the best it
// can to convince the window manager to stick the window. For window managers
// that don’t support this operation, there’s nothing you can do to force it to
// happen.
func (window *Window) Stick() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_stick(_arg0)
	runtime.KeepAlive(window)
}

// ThawToplevelUpdatesLibgtkOnly thaws a window frozen with
// gdk_window_freeze_toplevel_updates_libgtk_only().
//
// This function is not part of the GDK public API and is only for use by GTK+.
//
// Deprecated: This symbol was never meant to be used outside of GTK+.
func (window *Window) ThawToplevelUpdatesLibgtkOnly() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_thaw_toplevel_updates_libgtk_only(_arg0)
	runtime.KeepAlive(window)
}

// ThawUpdates thaws a window frozen with gdk_window_freeze_updates().
func (window *Window) ThawUpdates() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_thaw_updates(_arg0)
	runtime.KeepAlive(window)
}

// Unmaximize unmaximizes the window. If the window wasn’t maximized, then this
// function does nothing.
//
// On X11, asks the window manager to unmaximize window, if the window manager
// supports this operation. Not all window managers support this, and some
// deliberately ignore it or don’t have a concept of “maximized”; so you can’t
// rely on the unmaximization actually happening. But it will happen with most
// standard window managers, and GDK makes a best effort to get it to happen.
//
// On Windows, reliably unmaximizes the window.
func (window *Window) Unmaximize() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_unmaximize(_arg0)
	runtime.KeepAlive(window)
}

// Unstick: reverse operation for gdk_window_stick(); see gdk_window_stick(),
// and gtk_window_unstick().
func (window *Window) Unstick() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_unstick(_arg0)
	runtime.KeepAlive(window)
}

// Withdraw withdraws a window (unmaps it and asks the window manager to forget
// about it). This function is not really useful as gdk_window_hide()
// automatically withdraws toplevel windows before hiding them.
func (window *Window) Withdraw() {
	var _arg0 *C.GdkWindow // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	C.gdk_window_withdraw(_arg0)
	runtime.KeepAlive(window)
}

// The function takes the following parameters:
//
//    - width
//    - height
//
// The function returns the following values:
//
func (window *Window) createSurface(width, height int) *cairo.Surface {
	gclass := (*C.GdkWindowClass)(coreglib.PeekParentClass(window))
	fnarg := gclass.create_surface

	var _arg0 *C.GdkWindow       // out
	var _arg1 C.gint             // out
	var _arg2 C.gint             // out
	var _cret *C.cairo_surface_t // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gint(width)
	_arg2 = C.gint(height)

	_cret = C._gotk4_gdk3_Window_virtual_create_surface(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _surface *cairo.Surface // out

	_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
	})

	return _surface
}

// The function takes the following parameters:
//
//    - embedderX
//    - embedderY
//    - offscreenX
//    - offscreenY
//
func (window *Window) fromEmbedder(embedderX, embedderY float64, offscreenX, offscreenY *float64) {
	gclass := (*C.GdkWindowClass)(coreglib.PeekParentClass(window))
	fnarg := gclass.from_embedder

	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out
	var _arg2 C.gdouble    // out
	var _arg3 *C.gdouble   // out
	var _arg4 *C.gdouble   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gdouble(embedderX)
	_arg2 = C.gdouble(embedderY)
	_arg3 = (*C.gdouble)(unsafe.Pointer(offscreenX))
	_arg4 = (*C.gdouble)(unsafe.Pointer(offscreenY))

	C._gotk4_gdk3_Window_virtual_from_embedder(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(embedderX)
	runtime.KeepAlive(embedderY)
	runtime.KeepAlive(offscreenX)
	runtime.KeepAlive(offscreenY)
}

// The function takes the following parameters:
//
//    - offscreenX
//    - offscreenY
//    - embedderX
//    - embedderY
//
func (window *Window) toEmbedder(offscreenX, offscreenY float64, embedderX, embedderY *float64) {
	gclass := (*C.GdkWindowClass)(coreglib.PeekParentClass(window))
	fnarg := gclass.to_embedder

	var _arg0 *C.GdkWindow // out
	var _arg1 C.gdouble    // out
	var _arg2 C.gdouble    // out
	var _arg3 *C.gdouble   // out
	var _arg4 *C.gdouble   // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = C.gdouble(offscreenX)
	_arg2 = C.gdouble(offscreenY)
	_arg3 = (*C.gdouble)(unsafe.Pointer(embedderX))
	_arg4 = (*C.gdouble)(unsafe.Pointer(embedderY))

	C._gotk4_gdk3_Window_virtual_to_embedder(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(offscreenX)
	runtime.KeepAlive(offscreenY)
	runtime.KeepAlive(embedderX)
	runtime.KeepAlive(embedderY)
}

// WindowAtPointer obtains the window underneath the mouse pointer, returning
// the location of that window in win_x, win_y. Returns NULL if the window under
// the mouse pointer is not known to GDK (if the window belongs to another
// application and a Window hasn’t been created for it with
// gdk_window_foreign_new())
//
// NOTE: For multihead-aware widgets or applications use
// gdk_display_get_window_at_pointer() instead.
//
// Deprecated: Use gdk_device_get_window_at_position() instead.
//
// The function returns the following values:
//
//    - winX (optional): return location for origin of the window under the
//      pointer.
//    - winY (optional): return location for origin of the window under the
//      pointer.
//    - window under the mouse pointer.
//
func WindowAtPointer() (winX, winY int, window Windower) {
	var _arg1 C.gint       // in
	var _arg2 C.gint       // in
	var _cret *C.GdkWindow // in

	_cret = C.gdk_window_at_pointer(&_arg1, &_arg2)

	var _winX int        // out
	var _winY int        // out
	var _window Windower // out

	_winX = int(_arg1)
	_winY = int(_arg2)
	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	return _winX, _winY, _window
}

// WindowConstrainSize constrains a desired width and height according to a set
// of geometry hints (such as minimum and maximum size).
//
// The function takes the following parameters:
//
//    - geometry: Geometry structure.
//    - flags: mask indicating what portions of geometry are set.
//    - width: desired width of window.
//    - height: desired height of the window.
//
// The function returns the following values:
//
//    - newWidth: location to store resulting width.
//    - newHeight: location to store resulting height.
//
func WindowConstrainSize(geometry *Geometry, flags WindowHints, width, height int) (newWidth, newHeight int) {
	var _arg1 *C.GdkGeometry   // out
	var _arg2 C.GdkWindowHints // out
	var _arg3 C.gint           // out
	var _arg4 C.gint           // out
	var _arg5 C.gint           // in
	var _arg6 C.gint           // in

	_arg1 = (*C.GdkGeometry)(gextras.StructNative(unsafe.Pointer(geometry)))
	_arg2 = C.GdkWindowHints(flags)
	_arg3 = C.gint(width)
	_arg4 = C.gint(height)

	C.gdk_window_constrain_size(_arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6)
	runtime.KeepAlive(geometry)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _newWidth int  // out
	var _newHeight int // out

	_newWidth = int(_arg5)
	_newHeight = int(_arg6)

	return _newWidth, _newHeight
}

// WindowProcessAllUpdates calls gdk_window_process_updates() for all windows
// (see Window) in the application.
//
// Deprecated: since version 3.22.
func WindowProcessAllUpdates() {
	C.gdk_window_process_all_updates()
}

// WindowSetDebugUpdates: with update debugging enabled, calls to
// gdk_window_invalidate_region() clear the invalidated region of the screen to
// a noticeable color, and GDK pauses for a short time before sending exposes to
// windows during gdk_window_process_updates(). The net effect is that you can
// see the invalid region for each window and watch redraws as they occur. This
// allows you to diagnose inefficiencies in your application.
//
// In essence, because the GDK rendering model prevents all flicker, if you are
// redrawing the same region 400 times you may never notice, aside from noticing
// a speed problem. Enabling update debugging causes GTK to flicker slowly and
// noticeably, so you can see exactly what’s being redrawn when, in what order.
//
// The --gtk-debug=updates command line option passed to GTK+ programs enables
// this debug option at application startup time. That's usually more useful
// than calling gdk_window_set_debug_updates() yourself, though you might want
// to use this function to enable updates sometime after application startup
// time.
//
// Deprecated: since version 3.22.
//
// The function takes the following parameters:
//
//    - setting: TRUE to turn on update debugging.
//
func WindowSetDebugUpdates(setting bool) {
	var _arg1 C.gboolean // out

	if setting {
		_arg1 = C.TRUE
	}

	C.gdk_window_set_debug_updates(_arg1)
	runtime.KeepAlive(setting)
}

// Geometry struct gives the window manager information about a window’s
// geometry constraints. Normally you would set these on the GTK+ level using
// gtk_window_set_geometry_hints(). Window then sets the hints on the Window it
// creates.
//
// gdk_window_set_geometry_hints() expects the hints to be fully valid already
// and simply passes them to the window manager; in contrast,
// gtk_window_set_geometry_hints() performs some interpretation. For example,
// Window will apply the hints to the geometry widget instead of the toplevel
// window, if you set a geometry widget. Also, the
// min_width/min_height/max_width/max_height fields may be set to -1, and Window
// will substitute the size request of the window or geometry widget. If the
// minimum size hint is not provided, Window will use its requisition as the
// minimum size. If the minimum size is provided and a geometry widget is set,
// Window will take the minimum size as the minimum size of the geometry widget
// rather than the entire window. The base size is treated similarly.
//
// The canonical use-case for gtk_window_set_geometry_hints() is to get a
// terminal widget to resize properly. Here, the terminal text area should be
// the geometry widget; Window will then automatically set the base size to the
// size of other widgets in the terminal window, such as the menubar and
// scrollbar. Then, the width_inc and height_inc fields should be set to the
// size of one character in the terminal. Finally, the base size should be set
// to the size of one character. The net effect is that the minimum size of the
// terminal will have a 1x1 character terminal area, and only terminal sizes on
// the “character grid” will be allowed.
//
// Here’s an example of how the terminal example would be implemented, assuming
// a terminal area widget called “terminal” and a toplevel window “toplevel”:
//
//    	GdkGeometry hints;
//
//    	hints.base_width = terminal->char_width;
//            hints.base_height = terminal->char_height;
//            hints.min_width = terminal->char_width;
//            hints.min_height = terminal->char_height;
//            hints.width_inc = terminal->char_width;
//            hints.height_inc = terminal->char_height;
//
//     gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
//                                    GTK_WIDGET (terminal),
//                                    &hints,
//                                    GDK_HINT_RESIZE_INC |
//                                    GDK_HINT_MIN_SIZE |
//                                    GDK_HINT_BASE_SIZE);
//
// The other useful fields are the min_aspect and max_aspect fields; these
// contain a width/height ratio as a floating point number. If a geometry widget
// is set, the aspect applies to the geometry widget rather than the entire
// window. The most common use of these hints is probably to set min_aspect and
// max_aspect to the same value, thus forcing the window to keep a constant
// aspect ratio.
//
// An instance of this type is always passed by reference.
type Geometry struct {
	*geometry
}

// geometry is the struct that's finalized.
type geometry struct {
	native *C.GdkGeometry
}

// MinWidth: minimum width of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) MinWidth() int {
	valptr := &g.native.min_width
	var _v int // out
	_v = int(*valptr)
	return _v
}

// MinHeight: minimum height of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) MinHeight() int {
	valptr := &g.native.min_height
	var _v int // out
	_v = int(*valptr)
	return _v
}

// MaxWidth: maximum width of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) MaxWidth() int {
	valptr := &g.native.max_width
	var _v int // out
	_v = int(*valptr)
	return _v
}

// MaxHeight: maximum height of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) MaxHeight() int {
	valptr := &g.native.max_height
	var _v int // out
	_v = int(*valptr)
	return _v
}

// BaseWidth: allowed window widths are base_width + width_inc * N where N is
// any integer (-1 allowed with Window).
func (g *Geometry) BaseWidth() int {
	valptr := &g.native.base_width
	var _v int // out
	_v = int(*valptr)
	return _v
}

// BaseHeight: allowed window widths are base_height + height_inc * N where N is
// any integer (-1 allowed with Window).
func (g *Geometry) BaseHeight() int {
	valptr := &g.native.base_height
	var _v int // out
	_v = int(*valptr)
	return _v
}

// WidthInc: width resize increment.
func (g *Geometry) WidthInc() int {
	valptr := &g.native.width_inc
	var _v int // out
	_v = int(*valptr)
	return _v
}

// HeightInc: height resize increment.
func (g *Geometry) HeightInc() int {
	valptr := &g.native.height_inc
	var _v int // out
	_v = int(*valptr)
	return _v
}

// MinAspect: minimum width/height ratio.
func (g *Geometry) MinAspect() float64 {
	valptr := &g.native.min_aspect
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// MaxAspect: maximum width/height ratio.
func (g *Geometry) MaxAspect() float64 {
	valptr := &g.native.max_aspect
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// WinGravity: window gravity, see gtk_window_set_gravity().
func (g *Geometry) WinGravity() Gravity {
	valptr := &g.native.win_gravity
	var _v Gravity // out
	_v = Gravity(*valptr)
	return _v
}

// MinWidth: minimum width of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) SetMinWidth(minWidth int) {
	valptr := &g.native.min_width
	*valptr = C.gint(minWidth)
}

// MinHeight: minimum height of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) SetMinHeight(minHeight int) {
	valptr := &g.native.min_height
	*valptr = C.gint(minHeight)
}

// MaxWidth: maximum width of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) SetMaxWidth(maxWidth int) {
	valptr := &g.native.max_width
	*valptr = C.gint(maxWidth)
}

// MaxHeight: maximum height of window (or -1 to use requisition, with Window
// only).
func (g *Geometry) SetMaxHeight(maxHeight int) {
	valptr := &g.native.max_height
	*valptr = C.gint(maxHeight)
}

// BaseWidth: allowed window widths are base_width + width_inc * N where N is
// any integer (-1 allowed with Window).
func (g *Geometry) SetBaseWidth(baseWidth int) {
	valptr := &g.native.base_width
	*valptr = C.gint(baseWidth)
}

// BaseHeight: allowed window widths are base_height + height_inc * N where N is
// any integer (-1 allowed with Window).
func (g *Geometry) SetBaseHeight(baseHeight int) {
	valptr := &g.native.base_height
	*valptr = C.gint(baseHeight)
}

// WidthInc: width resize increment.
func (g *Geometry) SetWidthInc(widthInc int) {
	valptr := &g.native.width_inc
	*valptr = C.gint(widthInc)
}

// HeightInc: height resize increment.
func (g *Geometry) SetHeightInc(heightInc int) {
	valptr := &g.native.height_inc
	*valptr = C.gint(heightInc)
}

// MinAspect: minimum width/height ratio.
func (g *Geometry) SetMinAspect(minAspect float64) {
	valptr := &g.native.min_aspect
	*valptr = C.gdouble(minAspect)
}

// MaxAspect: maximum width/height ratio.
func (g *Geometry) SetMaxAspect(maxAspect float64) {
	valptr := &g.native.max_aspect
	*valptr = C.gdouble(maxAspect)
}

// WindowAttr attributes to use for a newly-created window.
//
// An instance of this type is always passed by reference.
type WindowAttr struct {
	*windowAttr
}

// windowAttr is the struct that's finalized.
type windowAttr struct {
	native *C.GdkWindowAttr
}

// Title: title of the window (for toplevel windows).
func (w *WindowAttr) Title() string {
	valptr := &w.native.title
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// EventMask: event mask (see gdk_window_set_events()).
func (w *WindowAttr) EventMask() int {
	valptr := &w.native.event_mask
	var _v int // out
	_v = int(*valptr)
	return _v
}

// X coordinate relative to parent window (see gdk_window_move()).
func (w *WindowAttr) X() int {
	valptr := &w.native.x
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Y coordinate relative to parent window (see gdk_window_move()).
func (w *WindowAttr) Y() int {
	valptr := &w.native.y
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Width: width of window.
func (w *WindowAttr) Width() int {
	valptr := &w.native.width
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Height: height of window.
func (w *WindowAttr) Height() int {
	valptr := &w.native.height
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Wclass (normal window) or K_INPUT_ONLY (invisible window that receives
// events).
func (w *WindowAttr) Wclass() WindowWindowClass {
	valptr := &w.native.wclass
	var _v WindowWindowClass // out
	_v = WindowWindowClass(*valptr)
	return _v
}

// Visual for window.
func (w *WindowAttr) Visual() *Visual {
	valptr := &w.native.visual
	var _v *Visual // out
	_v = wrapVisual(coreglib.Take(unsafe.Pointer(*valptr)))
	return _v
}

// WindowType: type of window.
func (w *WindowAttr) WindowType() WindowType {
	valptr := &w.native.window_type
	var _v WindowType // out
	_v = WindowType(*valptr)
	return _v
}

// Cursor: cursor for the window (see gdk_window_set_cursor()).
func (w *WindowAttr) Cursor() Cursorrer {
	valptr := &w.native.cursor
	var _v Cursorrer // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gdk.Cursorrer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Cursorrer)
			return ok
		})
		rv, ok := casted.(Cursorrer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Cursorrer")
		}
		_v = rv
	}
	return _v
}

// WmclassName: don’t use (see gtk_window_set_wmclass()).
func (w *WindowAttr) WmclassName() string {
	valptr := &w.native.wmclass_name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// WmclassClass: don’t use (see gtk_window_set_wmclass()).
func (w *WindowAttr) WmclassClass() string {
	valptr := &w.native.wmclass_class
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// OverrideRedirect: TRUE to bypass the window manager.
func (w *WindowAttr) OverrideRedirect() bool {
	valptr := &w.native.override_redirect
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// TypeHint: hint of the function of the window.
func (w *WindowAttr) TypeHint() WindowTypeHint {
	valptr := &w.native.type_hint
	var _v WindowTypeHint // out
	_v = WindowTypeHint(*valptr)
	return _v
}

// EventMask: event mask (see gdk_window_set_events()).
func (w *WindowAttr) SetEventMask(eventMask int) {
	valptr := &w.native.event_mask
	*valptr = C.gint(eventMask)
}

// X coordinate relative to parent window (see gdk_window_move()).
func (w *WindowAttr) SetX(x int) {
	valptr := &w.native.x
	*valptr = C.gint(x)
}

// Y coordinate relative to parent window (see gdk_window_move()).
func (w *WindowAttr) SetY(y int) {
	valptr := &w.native.y
	*valptr = C.gint(y)
}

// Width: width of window.
func (w *WindowAttr) SetWidth(width int) {
	valptr := &w.native.width
	*valptr = C.gint(width)
}

// Height: height of window.
func (w *WindowAttr) SetHeight(height int) {
	valptr := &w.native.height
	*valptr = C.gint(height)
}

// OverrideRedirect: TRUE to bypass the window manager.
func (w *WindowAttr) SetOverrideRedirect(overrideRedirect bool) {
	valptr := &w.native.override_redirect
	if overrideRedirect {
		*valptr = C.TRUE
	}
}

// WindowClass: instance of this type is always passed by reference.
type WindowClass struct {
	*windowClass
}

// windowClass is the struct that's finalized.
type windowClass struct {
	native *C.GdkWindowClass
}
