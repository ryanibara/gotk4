// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// EventPadAxis: generated during GDK_SOURCE_TABLET_PAD interaction with tactile
// sensors.
//
// An instance of this type is always passed by reference.
type EventPadAxis struct {
	*eventPadAxis
}

// eventPadAxis is the struct that's finalized.
type eventPadAxis struct {
	native *C.GdkEventPadAxis
}

// Type: type of the event (GDK_PAD_RING or GDK_PAD_STRIP).
func (e *EventPadAxis) Type() EventType {
	valptr := &e.native._type
	var _v EventType // out
	_v = EventType(*valptr)
	return _v
}

// Window: window which received the event.
func (e *EventPadAxis) Window() Windower {
	valptr := &e.native.window
	var _v Windower // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_v = rv
	}
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadAxis) SendEvent() int8 {
	valptr := &e.native.send_event
	var _v int8 // out
	_v = int8(*valptr)
	return _v
}

// Time: time of the event in milliseconds.
func (e *EventPadAxis) Time() uint32 {
	valptr := &e.native.time
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Group: pad group the ring/strip belongs to. A GDK_SOURCE_TABLET_PAD device
// may have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadAxis) Group() uint {
	valptr := &e.native.group
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Index: number of strip/ring that was interacted. This number is 0-indexed.
func (e *EventPadAxis) Index() uint {
	valptr := &e.native.index
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Mode: current mode of group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadAxis) Mode() uint {
	valptr := &e.native.mode
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Value: current value for the given axis.
func (e *EventPadAxis) Value() float64 {
	valptr := &e.native.value
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadAxis) SetSendEvent(sendEvent int8) {
	valptr := &e.native.send_event
	*valptr = C.gint8(sendEvent)
}

// Time: time of the event in milliseconds.
func (e *EventPadAxis) SetTime(time uint32) {
	valptr := &e.native.time
	*valptr = C.guint32(time)
}

// Group: pad group the ring/strip belongs to. A GDK_SOURCE_TABLET_PAD device
// may have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadAxis) SetGroup(group uint) {
	valptr := &e.native.group
	*valptr = C.guint(group)
}

// Index: number of strip/ring that was interacted. This number is 0-indexed.
func (e *EventPadAxis) SetIndex(index uint) {
	valptr := &e.native.index
	*valptr = C.guint(index)
}

// Mode: current mode of group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadAxis) SetMode(mode uint) {
	valptr := &e.native.mode
	*valptr = C.guint(mode)
}

// Value: current value for the given axis.
func (e *EventPadAxis) SetValue(value float64) {
	valptr := &e.native.value
	*valptr = C.gdouble(value)
}

// EventPadButton: generated during GDK_SOURCE_TABLET_PAD button presses and
// releases.
//
// An instance of this type is always passed by reference.
type EventPadButton struct {
	*eventPadButton
}

// eventPadButton is the struct that's finalized.
type eventPadButton struct {
	native *C.GdkEventPadButton
}

// Type: type of the event (GDK_PAD_BUTTON_PRESS or GDK_PAD_BUTTON_RELEASE).
func (e *EventPadButton) Type() EventType {
	valptr := &e.native._type
	var _v EventType // out
	_v = EventType(*valptr)
	return _v
}

// Window: window which received the event.
func (e *EventPadButton) Window() Windower {
	valptr := &e.native.window
	var _v Windower // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_v = rv
	}
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadButton) SendEvent() int8 {
	valptr := &e.native.send_event
	var _v int8 // out
	_v = int8(*valptr)
	return _v
}

// Time: time of the event in milliseconds.
func (e *EventPadButton) Time() uint32 {
	valptr := &e.native.time
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Group: pad group the button belongs to. A GDK_SOURCE_TABLET_PAD device may
// have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadButton) Group() uint {
	valptr := &e.native.group
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Button: pad button that was pressed.
func (e *EventPadButton) Button() uint {
	valptr := &e.native.button
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Mode: current mode of group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadButton) Mode() uint {
	valptr := &e.native.mode
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadButton) SetSendEvent(sendEvent int8) {
	valptr := &e.native.send_event
	*valptr = C.gint8(sendEvent)
}

// Time: time of the event in milliseconds.
func (e *EventPadButton) SetTime(time uint32) {
	valptr := &e.native.time
	*valptr = C.guint32(time)
}

// Group: pad group the button belongs to. A GDK_SOURCE_TABLET_PAD device may
// have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadButton) SetGroup(group uint) {
	valptr := &e.native.group
	*valptr = C.guint(group)
}

// Button: pad button that was pressed.
func (e *EventPadButton) SetButton(button uint) {
	valptr := &e.native.button
	*valptr = C.guint(button)
}

// Mode: current mode of group. Different groups in a GDK_SOURCE_TABLET_PAD
// device may have different current modes.
func (e *EventPadButton) SetMode(mode uint) {
	valptr := &e.native.mode
	*valptr = C.guint(mode)
}

// EventPadGroupMode: generated during GDK_SOURCE_TABLET_PAD mode switches in a
// group.
//
// An instance of this type is always passed by reference.
type EventPadGroupMode struct {
	*eventPadGroupMode
}

// eventPadGroupMode is the struct that's finalized.
type eventPadGroupMode struct {
	native *C.GdkEventPadGroupMode
}

// Type: type of the event (GDK_PAD_GROUP_MODE).
func (e *EventPadGroupMode) Type() EventType {
	valptr := &e.native._type
	var _v EventType // out
	_v = EventType(*valptr)
	return _v
}

// Window: window which received the event.
func (e *EventPadGroupMode) Window() Windower {
	valptr := &e.native.window
	var _v Windower // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_v = rv
	}
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadGroupMode) SendEvent() int8 {
	valptr := &e.native.send_event
	var _v int8 // out
	_v = int8(*valptr)
	return _v
}

// Time: time of the event in milliseconds.
func (e *EventPadGroupMode) Time() uint32 {
	valptr := &e.native.time
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Group: pad group that is switching mode. A GDK_SOURCE_TABLET_PAD device may
// have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadGroupMode) Group() uint {
	valptr := &e.native.group
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Mode: new mode of group. Different groups in a GDK_SOURCE_TABLET_PAD device
// may have different current modes.
func (e *EventPadGroupMode) Mode() uint {
	valptr := &e.native.mode
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// SendEvent: TRUE if the event was sent explicitly.
func (e *EventPadGroupMode) SetSendEvent(sendEvent int8) {
	valptr := &e.native.send_event
	*valptr = C.gint8(sendEvent)
}

// Time: time of the event in milliseconds.
func (e *EventPadGroupMode) SetTime(time uint32) {
	valptr := &e.native.time
	*valptr = C.guint32(time)
}

// Group: pad group that is switching mode. A GDK_SOURCE_TABLET_PAD device may
// have one or more groups containing a set of buttons/rings/strips each.
func (e *EventPadGroupMode) SetGroup(group uint) {
	valptr := &e.native.group
	*valptr = C.guint(group)
}

// Mode: new mode of group. Different groups in a GDK_SOURCE_TABLET_PAD device
// may have different current modes.
func (e *EventPadGroupMode) SetMode(mode uint) {
	valptr := &e.native.mode
	*valptr = C.guint(mode)
}
