// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// EventsGetAngle: if both events contain X/Y information, this function will
// return TRUE and return in angle the relative angle from event1 to event2.
// The rotation direction for positive angles is from the positive X axis
// towards the positive Y axis.
//
// The function takes the following parameters:
//
//   - event1: first Event.
//   - event2: second Event.
//
// The function returns the following values:
//
//   - angle: return location for the relative angle between both events.
//   - ok: TRUE if the angle could be calculated.
//
func EventsGetAngle(event1, event2 *Event) (float64, bool) {
	var _arg1 *C.GdkEvent // out
	var _arg2 *C.GdkEvent // out
	var _arg3 C.gdouble   // in
	var _cret C.gboolean  // in

	_arg1 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event1)))
	_arg2 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event2)))

	_cret = C.gdk_events_get_angle(_arg1, _arg2, &_arg3)
	runtime.KeepAlive(event1)
	runtime.KeepAlive(event2)

	var _angle float64 // out
	var _ok bool       // out

	_angle = float64(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _angle, _ok
}

// EventsGetCenter: if both events contain X/Y information, the center of both
// coordinates will be returned in x and y.
//
// The function takes the following parameters:
//
//   - event1: first Event.
//   - event2: second Event.
//
// The function returns the following values:
//
//   - x: return location for the X coordinate of the center.
//   - y: return location for the Y coordinate of the center.
//   - ok: TRUE if the center could be calculated.
//
func EventsGetCenter(event1, event2 *Event) (x, y float64, ok bool) {
	var _arg1 *C.GdkEvent // out
	var _arg2 *C.GdkEvent // out
	var _arg3 C.gdouble   // in
	var _arg4 C.gdouble   // in
	var _cret C.gboolean  // in

	_arg1 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event1)))
	_arg2 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event2)))

	_cret = C.gdk_events_get_center(_arg1, _arg2, &_arg3, &_arg4)
	runtime.KeepAlive(event1)
	runtime.KeepAlive(event2)

	var _x float64 // out
	var _y float64 // out
	var _ok bool   // out

	_x = float64(_arg3)
	_y = float64(_arg4)
	if _cret != 0 {
		_ok = true
	}

	return _x, _y, _ok
}

// EventsGetDistance: if both events have X/Y information, the distance between
// both coordinates (as in a straight line going from event1 to event2) will be
// returned.
//
// The function takes the following parameters:
//
//   - event1: first Event.
//   - event2: second Event.
//
// The function returns the following values:
//
//   - distance: return location for the distance.
//   - ok: TRUE if the distance could be calculated.
//
func EventsGetDistance(event1, event2 *Event) (float64, bool) {
	var _arg1 *C.GdkEvent // out
	var _arg2 *C.GdkEvent // out
	var _arg3 C.gdouble   // in
	var _cret C.gboolean  // in

	_arg1 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event1)))
	_arg2 = (*C.GdkEvent)(gextras.StructNative(unsafe.Pointer(event2)))

	_cret = C.gdk_events_get_distance(_arg1, _arg2, &_arg3)
	runtime.KeepAlive(event1)
	runtime.KeepAlive(event2)

	var _distance float64 // out
	var _ok bool          // out

	_distance = float64(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _distance, _ok
}
