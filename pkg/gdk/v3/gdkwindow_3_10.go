// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gdk/gdk.h>
import "C"

// CreateSimilarImageSurface: create a new image surface that is efficient to
// draw on the given window.
//
// Initially the surface contents are all 0 (transparent if contents have
// transparency, black otherwise.)
//
// The width and height of the new surface are not affected by the scaling
// factor of the window, or by the scale argument; they are the size of the
// surface in device pixels. If you wish to create an image surface capable of
// holding the contents of window you can use:
//
//      int scale = gdk_window_get_scale_factor (window);
//      int width = gdk_window_get_width (window) * scale;
//      int height = gdk_window_get_height (window) * scale;
//
//      // format is set elsewhere
//      cairo_surface_t *surface =
//        gdk_window_create_similar_image_surface (window,
//                                                 format,
//                                                 width, height,
//                                                 scale);
//
// Note that unlike cairo_surface_create_similar_image(), the new surface's
// device scale is set to scale, or to the scale factor of window if scale is 0.
//
// The function takes the following parameters:
//
//    - format for the new surface.
//    - width of the new surface.
//    - height of the new surface.
//    - scale of the new surface, or 0 to use same as window.
//
// The function returns the following values:
//
//    - surface: pointer to the newly allocated surface. The caller owns the
//      surface and should call cairo_surface_destroy() when done with it.
//
//      This function always returns a valid pointer, but it will return a
//      pointer to a “nil” surface if other is already in an error state or any
//      other error occurs.
//
func (window *Window) CreateSimilarImageSurface(format cairo.Format, width, height, scale int) *cairo.Surface {
	var _arg0 *C.GdkWindow       // out
	var _arg1 C.cairo_format_t   // out
	var _arg2 C.int              // out
	var _arg3 C.int              // out
	var _arg4 C.int              // out
	var _cret *C.cairo_surface_t // in

	if window != nil {
		_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	}
	_arg1 = C.cairo_format_t(format)
	_arg2 = C.int(width)
	_arg3 = C.int(height)
	_arg4 = C.int(scale)

	_cret = C.gdk_window_create_similar_image_surface(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(format)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(scale)

	var _surface *cairo.Surface // out

	_surface = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_surface, func(v *cairo.Surface) {
		C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
	})

	return _surface
}

// ChildrenWithUserData gets the list of children of window known to GDK with a
// particular user_data set on it.
//
// The returned list must be freed, but the elements in the list need not be.
//
// The list is returned in (relative) stacking order, i.e. the lowest window is
// first.
//
// The function takes the following parameters:
//
//    - userData (optional): user data to look for.
//
// The function returns the following values:
//
//    - list: list of child windows inside window.
//
func (window *Window) ChildrenWithUserData(userData unsafe.Pointer) []Windower {
	var _arg0 *C.GdkWindow // out
	var _arg1 C.gpointer   // out
	var _cret *C.GList     // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(userData))

	_cret = C.gdk_window_get_children_with_user_data(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(userData)

	var _list []Windower // out

	_list = make([]Windower, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GdkWindow)(v)
		var dst Windower // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gdk.Windower is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// DevicePositionDouble obtains the current device position in doubles and
// modifier state. The position is given in coordinates relative to the upper
// left corner of window.
//
// The function takes the following parameters:
//
//    - device: pointer Device to query to.
//
// The function returns the following values:
//
//    - x (optional): return location for the X coordinate of device, or NULL.
//    - y (optional): return location for the Y coordinate of device, or NULL.
//    - mask (optional): return location for the modifier mask, or NULL.
//    - ret (optional): window underneath device (as with
//      gdk_device_get_window_at_position()), or NULL if the window is not known
//      to GDK.
//
func (window *Window) DevicePositionDouble(device Devicer) (x, y float64, mask ModifierType, ret Windower) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.GdkDevice      // out
	var _arg2 C.gdouble         // in
	var _arg3 C.gdouble         // in
	var _arg4 C.GdkModifierType // in
	var _cret *C.GdkWindow      // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.GdkDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))

	_cret = C.gdk_window_get_device_position_double(_arg0, _arg1, &_arg2, &_arg3, &_arg4)
	runtime.KeepAlive(window)
	runtime.KeepAlive(device)

	var _x float64         // out
	var _y float64         // out
	var _mask ModifierType // out
	var _ret Windower      // out

	_x = float64(_arg2)
	_y = float64(_arg3)
	_mask = ModifierType(_arg4)
	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Windower)
				return ok
			})
			rv, ok := casted.(Windower)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
			}
			_ret = rv
		}
	}

	return _x, _y, _mask, _ret
}

// ScaleFactor returns the internal scale factor that maps from window
// coordiantes to the actual device pixels. On traditional systems this is 1,
// but on very high density outputs this can be a higher value (often 2).
//
// A higher value means that drawing is automatically scaled up to a higher
// resolution, so any code doing drawing will automatically look nicer. However,
// if you are supplying pixel-based data the scale value can be used to
// determine whether to use a pixel resource with higher resolution data.
//
// The scale of a window may change during runtime, if this happens a configure
// event will be sent to the toplevel window.
//
// The function returns the following values:
//
//    - gint: scale factor.
//
func (window *Window) ScaleFactor() int {
	var _arg0 *C.GdkWindow // out
	var _cret C.gint       // in

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))

	_cret = C.gdk_window_get_scale_factor(_arg0)
	runtime.KeepAlive(window)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetOpaqueRegion: for optimisation purposes, compositing window managers may
// like to not draw obscured regions of windows, or turn off blending during for
// these regions. With RGB windows with no transparency, this is just the shape
// of the window, but with ARGB32 windows, the compositor does not know what
// regions of the window are transparent or not.
//
// This function only works for toplevel windows.
//
// GTK+ will update this property automatically if the window background is
// opaque, as we know where the opaque regions are. If your window background is
// not opaque, please update this property in your Widget::style-updated
// handler.
//
// The function takes the following parameters:
//
//    - region (optional): region, or NULL.
//
func (window *Window) SetOpaqueRegion(region *cairo.Region) {
	var _arg0 *C.GdkWindow      // out
	var _arg1 *C.cairo_region_t // out

	_arg0 = (*C.GdkWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	if region != nil {
		_arg1 = (*C.cairo_region_t)(unsafe.Pointer(region.Native()))
	}

	C.gdk_window_set_opaque_region(_arg0, _arg1)
	runtime.KeepAlive(window)
	runtime.KeepAlive(region)
}
