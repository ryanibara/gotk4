// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewCharsetConverter creates a new Converter.
//
// The function takes the following parameters:
//
//    - toCharset: destination charset.
//    - fromCharset: source charset.
//
// The function returns the following values:
//
//    - charsetConverter: new Converter or NULL on error.
//
func NewCharsetConverter(toCharset, fromCharset string) (*CharsetConverter, error) {
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _cret *C.GCharsetConverter // in
	var _cerr *C.GError            // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(toCharset)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(fromCharset)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_charset_converter_new(_arg1, _arg2, &_cerr)
	runtime.KeepAlive(toCharset)
	runtime.KeepAlive(fromCharset)

	var _charsetConverter *CharsetConverter // out
	var _goerr error                        // out

	_charsetConverter = wrapCharsetConverter(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _charsetConverter, _goerr
}

// NumFallbacks gets the number of fallbacks that converter has applied so far.
//
// The function returns the following values:
//
//    - guint: number of fallbacks that converter has applied.
//
func (converter *CharsetConverter) NumFallbacks() uint {
	var _arg0 *C.GCharsetConverter // out
	var _cret C.guint              // in

	_arg0 = (*C.GCharsetConverter)(unsafe.Pointer(coreglib.InternObject(converter).Native()))

	_cret = C.g_charset_converter_get_num_fallbacks(_arg0)
	runtime.KeepAlive(converter)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// UseFallback gets the Converter:use-fallback property.
//
// The function returns the following values:
//
//    - ok: TRUE if fallbacks are used by converter.
//
func (converter *CharsetConverter) UseFallback() bool {
	var _arg0 *C.GCharsetConverter // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GCharsetConverter)(unsafe.Pointer(coreglib.InternObject(converter).Native()))

	_cret = C.g_charset_converter_get_use_fallback(_arg0)
	runtime.KeepAlive(converter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUseFallback sets the Converter:use-fallback property.
//
// The function takes the following parameters:
//
//    - useFallback: TRUE to use fallbacks.
//
func (converter *CharsetConverter) SetUseFallback(useFallback bool) {
	var _arg0 *C.GCharsetConverter // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GCharsetConverter)(unsafe.Pointer(coreglib.InternObject(converter).Native()))
	if useFallback {
		_arg1 = C.TRUE
	}

	C.g_charset_converter_set_use_fallback(_arg0, _arg1)
	runtime.KeepAlive(converter)
	runtime.KeepAlive(useFallback)
}
