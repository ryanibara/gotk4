// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// void _gotk4_gio2_MemoryMonitor_virtual_low_memory_warning(void* fnptr, GMemoryMonitor* arg0, GMemoryMonitorWarningLevel arg1) {
//   ((void (*)(GMemoryMonitor*, GMemoryMonitorWarningLevel))(fnptr))(arg0, arg1);
// };
import "C"

// The function takes the following parameters:
//
func (monitor *MemoryMonitor) lowMemoryWarning(level MemoryMonitorWarningLevel) {
	gclass := (*C.GMemoryMonitorInterface)(coreglib.PeekParentClass(monitor))
	fnarg := gclass.low_memory_warning

	var _arg0 *C.GMemoryMonitor            // out
	var _arg1 C.GMemoryMonitorWarningLevel // out

	_arg0 = (*C.GMemoryMonitor)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))
	_arg1 = C.GMemoryMonitorWarningLevel(level)

	C._gotk4_gio2_MemoryMonitor_virtual_low_memory_warning(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(monitor)
	runtime.KeepAlive(level)
}
