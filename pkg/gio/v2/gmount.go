// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GDrive* _gotk4_gio2_MountIface_get_drive(GMount*);
// extern GFile* _gotk4_gio2_MountIface_get_default_location(GMount*);
// extern GFile* _gotk4_gio2_MountIface_get_root(GMount*);
// extern GIcon* _gotk4_gio2_MountIface_get_icon(GMount*);
// extern GIcon* _gotk4_gio2_MountIface_get_symbolic_icon(GMount*);
// extern GVolume* _gotk4_gio2_MountIface_get_volume(GMount*);
// extern char* _gotk4_gio2_MountIface_get_name(GMount*);
// extern char* _gotk4_gio2_MountIface_get_uuid(GMount*);
// extern gboolean _gotk4_gio2_MountIface_can_eject(GMount*);
// extern gboolean _gotk4_gio2_MountIface_can_unmount(GMount*);
// extern gboolean _gotk4_gio2_MountIface_eject_finish(GMount*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_MountIface_eject_with_operation_finish(GMount*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_MountIface_remount_finish(GMount*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_MountIface_unmount_finish(GMount*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_MountIface_unmount_with_operation_finish(GMount*, GAsyncResult*, GError**);
// extern gchar* _gotk4_gio2_MountIface_get_sort_key(GMount*);
// extern gchar** _gotk4_gio2_MountIface_guess_content_type_finish(GMount*, GAsyncResult*, GError**);
// extern gchar** _gotk4_gio2_MountIface_guess_content_type_sync(GMount*, gboolean, GCancellable*, GError**);
// extern void _gotk4_gio2_MountIface_changed(GMount*);
// extern void _gotk4_gio2_MountIface_pre_unmount(GMount*);
// extern void _gotk4_gio2_MountIface_unmounted(GMount*);
// extern void _gotk4_gio2_Mount_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gio2_Mount_ConnectPreUnmount(gpointer, guintptr);
// extern void _gotk4_gio2_Mount_ConnectUnmounted(gpointer, guintptr);
import "C"

// glib.Type values for gmount.go.
var GTypeMount = coreglib.Type(C.g_mount_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeMount, F: marshalMount},
	})
}

// MountOverrider contains methods that are overridable.
type MountOverrider interface {
	// CanEject checks if mount can be ejected.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the mount can be ejected.
	//
	CanEject() bool
	// CanUnmount checks if mount can be unmounted.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the mount can be unmounted.
	//
	CanUnmount() bool
	Changed()
	// EjectFinish finishes ejecting a mount. If any errors occurred during the
	// operation, error will be set to contain the errors and FALSE will be
	// returned.
	//
	// Deprecated: Use g_mount_eject_with_operation_finish() instead.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	EjectFinish(result AsyncResulter) error
	// EjectWithOperationFinish finishes ejecting a mount. If any errors
	// occurred during the operation, error will be set to contain the errors
	// and FALSE will be returned.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	EjectWithOperationFinish(result AsyncResulter) error
	// DefaultLocation gets the default location of mount. The default location
	// of the given mount is a path that reflects the main entry point for the
	// user (e.g. the home directory, or the root of the volume).
	//
	// The function returns the following values:
	//
	//    - file: #GFile. The returned object should be unreffed with
	//      g_object_unref() when no longer needed.
	//
	DefaultLocation() *File
	// Drive gets the drive for the mount.
	//
	// This is a convenience method for getting the #GVolume and then using that
	// object to get the #GDrive.
	//
	// The function returns the following values:
	//
	//    - drive (optional) or NULL if mount is not associated with a volume or
	//      a drive. The returned object should be unreffed with g_object_unref()
	//      when no longer needed.
	//
	Drive() *Drive
	// Icon gets the icon for mount.
	//
	// The function returns the following values:
	//
	//    - icon: #GIcon. The returned object should be unreffed with
	//      g_object_unref() when no longer needed.
	//
	Icon() *Icon
	// Name gets the name of mount.
	//
	// The function returns the following values:
	//
	//    - utf8: name for the given mount. The returned string should be freed
	//      with g_free() when no longer needed.
	//
	Name() string
	// Root gets the root directory on mount.
	//
	// The function returns the following values:
	//
	//    - file: #GFile. The returned object should be unreffed with
	//      g_object_unref() when no longer needed.
	//
	Root() *File
	// SortKey gets the sort key for mount, if any.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): sorting key for mount or NULL if no such key is
	//      available.
	//
	SortKey() string
	// SymbolicIcon gets the symbolic icon for mount.
	//
	// The function returns the following values:
	//
	//    - icon: #GIcon. The returned object should be unreffed with
	//      g_object_unref() when no longer needed.
	//
	SymbolicIcon() *Icon
	// UUID gets the UUID for the mount. The reference is typically based on the
	// file system UUID for the mount in question and should be considered an
	// opaque string. Returns NULL if there is no UUID available.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): UUID for mount or NULL if no UUID can be computed.
	//      The returned string should be freed with g_free() when no longer
	//      needed.
	//
	UUID() string
	// Volume gets the volume for the mount.
	//
	// The function returns the following values:
	//
	//    - volume (optional) or NULL if mount is not associated with a volume.
	//      The returned object should be unreffed with g_object_unref() when no
	//      longer needed.
	//
	Volume() *Volume
	// GuessContentTypeFinish finishes guessing content types of mount. If any
	// errors occurred during the operation, error will be set to contain the
	// errors and FALSE will be returned. In particular, you may get an
	// G_IO_ERROR_NOT_SUPPORTED if the mount does not support content guessing.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - utf8s: NULL-terminated array of content types or NULL on error.
	//      Caller should free this array with g_strfreev() when done with it.
	//
	GuessContentTypeFinish(result AsyncResulter) ([]string, error)
	// GuessContentTypeSync tries to guess the type of content stored on mount.
	// Returns one or more textual identifiers of well-known content types
	// (typically prefixed with "x-content/"), e.g. x-content/image-dcf for
	// camera memory cards. See the shared-mime-info
	// (http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
	// specification for more on x-content types.
	//
	// This is a synchronous operation and as such may block doing IO; see
	// g_mount_guess_content_type() for the asynchronous version.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional): optional #GCancellable object, NULL to ignore.
	//    - forceRescan: whether to force a rescan of the content. Otherwise a
	//      cached result will be used if available.
	//
	// The function returns the following values:
	//
	//    - utf8s: NULL-terminated array of content types or NULL on error.
	//      Caller should free this array with g_strfreev() when done with it.
	//
	GuessContentTypeSync(ctx context.Context, forceRescan bool) ([]string, error)
	PreUnmount()
	// RemountFinish finishes remounting a mount. If any errors occurred during
	// the operation, error will be set to contain the errors and FALSE will be
	// returned.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	RemountFinish(result AsyncResulter) error
	// UnmountFinish finishes unmounting a mount. If any errors occurred during
	// the operation, error will be set to contain the errors and FALSE will be
	// returned.
	//
	// Deprecated: Use g_mount_unmount_with_operation_finish() instead.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	UnmountFinish(result AsyncResulter) error
	// UnmountWithOperationFinish finishes unmounting a mount. If any errors
	// occurred during the operation, error will be set to contain the errors
	// and FALSE will be returned.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	UnmountWithOperationFinish(result AsyncResulter) error
	Unmounted()
}

// Mount interface represents user-visible mounts. Note, when porting from
// GnomeVFS, #GMount is the moral equivalent of VFSVolume.
//
// #GMount is a "mounted" filesystem that you can access. Mounted is in quotes
// because it's not the same as a unix mount, it might be a gvfs mount, but you
// can still access the files on it if you use GIO. Might or might not be
// related to a volume object.
//
// Unmounting a #GMount instance is an asynchronous operation. For more
// information about asynchronous operations, see Result and #GTask. To unmount
// a #GMount instance, first call g_mount_unmount_with_operation() with (at
// least) the #GMount instance and a ReadyCallback. The callback will be fired
// when the operation has resolved (either with success or failure), and a
// Result structure will be passed to the callback. That callback should then
// call g_mount_unmount_with_operation_finish() with the #GMount and the Result
// data to see if the operation was completed successfully. If an error is
// present when g_mount_unmount_with_operation_finish() is called, then it will
// be filled with any error information.
//
// Mount wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Mount struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Mount)(nil)
)

// Mounter describes Mount's interface methods.
type Mounter interface {
	coreglib.Objector

	// CanEject checks if mount can be ejected.
	CanEject() bool
	// CanUnmount checks if mount can be unmounted.
	CanUnmount() bool
	// EjectFinish finishes ejecting a mount.
	EjectFinish(result AsyncResulter) error
	// EjectWithOperationFinish finishes ejecting a mount.
	EjectWithOperationFinish(result AsyncResulter) error
	// DefaultLocation gets the default location of mount.
	DefaultLocation() *File
	// Drive gets the drive for the mount.
	Drive() *Drive
	// Icon gets the icon for mount.
	Icon() *Icon
	// Name gets the name of mount.
	Name() string
	// Root gets the root directory on mount.
	Root() *File
	// SortKey gets the sort key for mount, if any.
	SortKey() string
	// SymbolicIcon gets the symbolic icon for mount.
	SymbolicIcon() *Icon
	// UUID gets the UUID for the mount.
	UUID() string
	// Volume gets the volume for the mount.
	Volume() *Volume
	// GuessContentTypeFinish finishes guessing content types of mount.
	GuessContentTypeFinish(result AsyncResulter) ([]string, error)
	// GuessContentTypeSync tries to guess the type of content stored on mount.
	GuessContentTypeSync(ctx context.Context, forceRescan bool) ([]string, error)
	// IsShadowed determines if mount is shadowed.
	IsShadowed() bool
	// RemountFinish finishes remounting a mount.
	RemountFinish(result AsyncResulter) error
	// Shadow increments the shadow count on mount.
	Shadow()
	// UnmountFinish finishes unmounting a mount.
	UnmountFinish(result AsyncResulter) error
	// UnmountWithOperationFinish finishes unmounting a mount.
	UnmountWithOperationFinish(result AsyncResulter) error
	// Unshadow decrements the shadow count on mount.
	Unshadow()

	// Changed is emitted when the mount has been changed.
	ConnectChanged(func()) coreglib.SignalHandle
	// Pre-unmount: this signal may be emitted when the #GMount is about to be
	// unmounted.
	ConnectPreUnmount(func()) coreglib.SignalHandle
	// Unmounted: this signal is emitted when the #GMount have been unmounted.
	ConnectUnmounted(func()) coreglib.SignalHandle
}

var _ Mounter = (*Mount)(nil)

func ifaceInitMounter(gifacePtr, data C.gpointer) {
	iface := (*C.GMountIface)(unsafe.Pointer(gifacePtr))
	iface.can_eject = (*[0]byte)(C._gotk4_gio2_MountIface_can_eject)
	iface.can_unmount = (*[0]byte)(C._gotk4_gio2_MountIface_can_unmount)
	iface.changed = (*[0]byte)(C._gotk4_gio2_MountIface_changed)
	iface.eject_finish = (*[0]byte)(C._gotk4_gio2_MountIface_eject_finish)
	iface.eject_with_operation_finish = (*[0]byte)(C._gotk4_gio2_MountIface_eject_with_operation_finish)
	iface.get_default_location = (*[0]byte)(C._gotk4_gio2_MountIface_get_default_location)
	iface.get_drive = (*[0]byte)(C._gotk4_gio2_MountIface_get_drive)
	iface.get_icon = (*[0]byte)(C._gotk4_gio2_MountIface_get_icon)
	iface.get_name = (*[0]byte)(C._gotk4_gio2_MountIface_get_name)
	iface.get_root = (*[0]byte)(C._gotk4_gio2_MountIface_get_root)
	iface.get_sort_key = (*[0]byte)(C._gotk4_gio2_MountIface_get_sort_key)
	iface.get_symbolic_icon = (*[0]byte)(C._gotk4_gio2_MountIface_get_symbolic_icon)
	iface.get_uuid = (*[0]byte)(C._gotk4_gio2_MountIface_get_uuid)
	iface.get_volume = (*[0]byte)(C._gotk4_gio2_MountIface_get_volume)
	iface.guess_content_type_finish = (*[0]byte)(C._gotk4_gio2_MountIface_guess_content_type_finish)
	iface.guess_content_type_sync = (*[0]byte)(C._gotk4_gio2_MountIface_guess_content_type_sync)
	iface.pre_unmount = (*[0]byte)(C._gotk4_gio2_MountIface_pre_unmount)
	iface.remount_finish = (*[0]byte)(C._gotk4_gio2_MountIface_remount_finish)
	iface.unmount_finish = (*[0]byte)(C._gotk4_gio2_MountIface_unmount_finish)
	iface.unmount_with_operation_finish = (*[0]byte)(C._gotk4_gio2_MountIface_unmount_with_operation_finish)
	iface.unmounted = (*[0]byte)(C._gotk4_gio2_MountIface_unmounted)
}

//export _gotk4_gio2_MountIface_can_eject
func _gotk4_gio2_MountIface_can_eject(arg0 *C.GMount) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	ok := iface.CanEject()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_MountIface_can_unmount
func _gotk4_gio2_MountIface_can_unmount(arg0 *C.GMount) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	ok := iface.CanUnmount()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_MountIface_changed
func _gotk4_gio2_MountIface_changed(arg0 *C.GMount) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	iface.Changed()
}

//export _gotk4_gio2_MountIface_eject_finish
func _gotk4_gio2_MountIface_eject_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.EjectFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_eject_with_operation_finish
func _gotk4_gio2_MountIface_eject_with_operation_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.EjectWithOperationFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_get_default_location
func _gotk4_gio2_MountIface_get_default_location(arg0 *C.GMount) (cret *C.GFile) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	file := iface.DefaultLocation()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

//export _gotk4_gio2_MountIface_get_drive
func _gotk4_gio2_MountIface_get_drive(arg0 *C.GMount) (cret *C.GDrive) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	drive := iface.Drive()

	if drive != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(drive).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(drive).Native()))
	}

	return cret
}

//export _gotk4_gio2_MountIface_get_icon
func _gotk4_gio2_MountIface_get_icon(arg0 *C.GMount) (cret *C.GIcon) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	icon := iface.Icon()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(icon).Native()))

	return cret
}

//export _gotk4_gio2_MountIface_get_name
func _gotk4_gio2_MountIface_get_name(arg0 *C.GMount) (cret *C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	utf8 := iface.Name()

	cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))

	return cret
}

//export _gotk4_gio2_MountIface_get_root
func _gotk4_gio2_MountIface_get_root(arg0 *C.GMount) (cret *C.GFile) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	file := iface.Root()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

//export _gotk4_gio2_MountIface_get_sort_key
func _gotk4_gio2_MountIface_get_sort_key(arg0 *C.GMount) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	utf8 := iface.SortKey()

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
		defer C.free(unsafe.Pointer(cret))
	}

	return cret
}

//export _gotk4_gio2_MountIface_get_symbolic_icon
func _gotk4_gio2_MountIface_get_symbolic_icon(arg0 *C.GMount) (cret *C.GIcon) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	icon := iface.SymbolicIcon()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(icon).Native()))

	return cret
}

//export _gotk4_gio2_MountIface_get_uuid
func _gotk4_gio2_MountIface_get_uuid(arg0 *C.GMount) (cret *C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	utf8 := iface.UUID()

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

//export _gotk4_gio2_MountIface_get_volume
func _gotk4_gio2_MountIface_get_volume(arg0 *C.GMount) (cret *C.GVolume) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	volume := iface.Volume()

	if volume != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(volume).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(volume).Native()))
	}

	return cret
}

//export _gotk4_gio2_MountIface_guess_content_type_finish
func _gotk4_gio2_MountIface_guess_content_type_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret **C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	utf8s, _goerr := iface.GuessContentTypeFinish(_result)

	{
		cret = (**C.void)(C.calloc(C.size_t((len(utf8s) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice(cret, len(utf8s)+1)
			var zero *C.void
			out[len(utf8s)] = zero
			for i := range utf8s {
				out[i] = (*C.void)(unsafe.Pointer(C.CString(utf8s[i])))
			}
		}
	}
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_guess_content_type_sync
func _gotk4_gio2_MountIface_guess_content_type_sync(arg0 *C.GMount, arg1 C.gboolean, arg2 *C.GCancellable, _cerr **C.GError) (cret **C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _cancellable context.Context // out
	var _forceRescan bool            // out

	if arg2 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg2))
	}
	if arg1 != 0 {
		_forceRescan = true
	}

	utf8s, _goerr := iface.GuessContentTypeSync(_cancellable, _forceRescan)

	{
		cret = (**C.void)(C.calloc(C.size_t((len(utf8s) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice(cret, len(utf8s)+1)
			var zero *C.void
			out[len(utf8s)] = zero
			for i := range utf8s {
				out[i] = (*C.void)(unsafe.Pointer(C.CString(utf8s[i])))
			}
		}
	}
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_pre_unmount
func _gotk4_gio2_MountIface_pre_unmount(arg0 *C.GMount) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	iface.PreUnmount()
}

//export _gotk4_gio2_MountIface_remount_finish
func _gotk4_gio2_MountIface_remount_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.RemountFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_unmount_finish
func _gotk4_gio2_MountIface_unmount_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.UnmountFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_unmount_with_operation_finish
func _gotk4_gio2_MountIface_unmount_with_operation_finish(arg0 *C.GMount, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.UnmountWithOperationFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_MountIface_unmounted
func _gotk4_gio2_MountIface_unmounted(arg0 *C.GMount) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(MountOverrider)

	iface.Unmounted()
}

func wrapMount(obj *coreglib.Object) *Mount {
	return &Mount{
		Object: obj,
	}
}

func marshalMount(p uintptr) (interface{}, error) {
	return wrapMount(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_Mount_ConnectChanged
func _gotk4_gio2_Mount_ConnectChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectChanged is emitted when the mount has been changed.
func (mount *Mount) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(mount, "changed", false, unsafe.Pointer(C._gotk4_gio2_Mount_ConnectChanged), f)
}

//export _gotk4_gio2_Mount_ConnectPreUnmount
func _gotk4_gio2_Mount_ConnectPreUnmount(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectPreUnmount: this signal may be emitted when the #GMount is about to be
// unmounted.
//
// This signal depends on the backend and is only emitted if GIO was used to
// unmount.
func (mount *Mount) ConnectPreUnmount(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(mount, "pre-unmount", false, unsafe.Pointer(C._gotk4_gio2_Mount_ConnectPreUnmount), f)
}

//export _gotk4_gio2_Mount_ConnectUnmounted
func _gotk4_gio2_Mount_ConnectUnmounted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectUnmounted: this signal is emitted when the #GMount have been
// unmounted. If the recipient is holding references to the object they should
// release them so the object can be finalized.
func (mount *Mount) ConnectUnmounted(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(mount, "unmounted", false, unsafe.Pointer(C._gotk4_gio2_Mount_ConnectUnmounted), f)
}

// CanEject checks if mount can be ejected.
//
// The function returns the following values:
//
//    - ok: TRUE if the mount can be ejected.
//
func (mount *Mount) CanEject() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CanUnmount checks if mount can be unmounted.
//
// The function returns the following values:
//
//    - ok: TRUE if the mount can be unmounted.
//
func (mount *Mount) CanUnmount() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EjectFinish finishes ejecting a mount. If any errors occurred during the
// operation, error will be set to contain the errors and FALSE will be
// returned.
//
// Deprecated: Use g_mount_eject_with_operation_finish() instead.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (mount *Mount) EjectFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// EjectWithOperationFinish finishes ejecting a mount. If any errors occurred
// during the operation, error will be set to contain the errors and FALSE will
// be returned.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (mount *Mount) EjectWithOperationFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DefaultLocation gets the default location of mount. The default location of
// the given mount is a path that reflects the main entry point for the user
// (e.g. the home directory, or the root of the volume).
//
// The function returns the following values:
//
//    - file: #GFile. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (mount *Mount) DefaultLocation() *File {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}

// Drive gets the drive for the mount.
//
// This is a convenience method for getting the #GVolume and then using that
// object to get the #GDrive.
//
// The function returns the following values:
//
//    - drive (optional) or NULL if mount is not associated with a volume or a
//      drive. The returned object should be unreffed with g_object_unref() when
//      no longer needed.
//
func (mount *Mount) Drive() *Drive {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _drive *Drive // out

	if _cret != nil {
		_drive = wrapDrive(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _drive
}

// Icon gets the icon for mount.
//
// The function returns the following values:
//
//    - icon: #GIcon. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (mount *Mount) Icon() *Icon {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _icon
}

// Name gets the name of mount.
//
// The function returns the following values:
//
//    - utf8: name for the given mount. The returned string should be freed with
//      g_free() when no longer needed.
//
func (mount *Mount) Name() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Root gets the root directory on mount.
//
// The function returns the following values:
//
//    - file: #GFile. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (mount *Mount) Root() *File {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}

// SortKey gets the sort key for mount, if any.
//
// The function returns the following values:
//
//    - utf8 (optional): sorting key for mount or NULL if no such key is
//      available.
//
func (mount *Mount) SortKey() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SymbolicIcon gets the symbolic icon for mount.
//
// The function returns the following values:
//
//    - icon: #GIcon. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (mount *Mount) SymbolicIcon() *Icon {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _icon
}

// UUID gets the UUID for the mount. The reference is typically based on the
// file system UUID for the mount in question and should be considered an opaque
// string. Returns NULL if there is no UUID available.
//
// The function returns the following values:
//
//    - utf8 (optional): UUID for mount or NULL if no UUID can be computed. The
//      returned string should be freed with g_free() when no longer needed.
//
func (mount *Mount) UUID() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// Volume gets the volume for the mount.
//
// The function returns the following values:
//
//    - volume (optional) or NULL if mount is not associated with a volume. The
//      returned object should be unreffed with g_object_unref() when no longer
//      needed.
//
func (mount *Mount) Volume() *Volume {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _volume *Volume // out

	if _cret != nil {
		_volume = wrapVolume(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _volume
}

// GuessContentTypeFinish finishes guessing content types of mount. If any
// errors occurred during the operation, error will be set to contain the errors
// and FALSE will be returned. In particular, you may get an
// G_IO_ERROR_NOT_SUPPORTED if the mount does not support content guessing.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of content types or NULL on error. Caller
//      should free this array with g_strfreev() when done with it.
//
func (mount *Mount) GuessContentTypeFinish(result AsyncResulter) ([]string, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _cret **C.gchar // in
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _utf8s []string // out
	var _goerr error    // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8s, _goerr
}

// GuessContentTypeSync tries to guess the type of content stored on mount.
// Returns one or more textual identifiers of well-known content types
// (typically prefixed with "x-content/"), e.g. x-content/image-dcf for camera
// memory cards. See the shared-mime-info
// (http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
// specification for more on x-content types.
//
// This is a synchronous operation and as such may block doing IO; see
// g_mount_guess_content_type() for the asynchronous version.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - forceRescan: whether to force a rescan of the content. Otherwise a cached
//      result will be used if available.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of content types or NULL on error. Caller
//      should free this array with g_strfreev() when done with it.
//
func (mount *Mount) GuessContentTypeSync(ctx context.Context, forceRescan bool) ([]string, error) {
	var args [3]girepository.Argument
	var _arg0 *C.void    // out
	var _arg2 *C.void    // out
	var _arg1 C.gboolean // out
	var _cret **C.gchar  // in
	var _cerr *C.void    // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	if forceRescan {
		_arg1 = C.TRUE
	}
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1
	*(*context.Context)(unsafe.Pointer(&args[2])) = _arg2

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(forceRescan)

	var _utf8s []string // out
	var _goerr error    // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8s, _goerr
}

// IsShadowed determines if mount is shadowed. Applications or libraries should
// avoid displaying mount in the user interface if it is shadowed.
//
// A mount is said to be shadowed if there exists one or more user visible
// objects (currently #GMount objects) with a root that is inside the root of
// mount.
//
// One application of shadow mounts is when exposing a single file system that
// is used to address several logical volumes. In this situation, a Monitor
// implementation would create two #GVolume objects (for example, one for the
// camera functionality of the device and one for a SD card reader on the
// device) with activation URIs gphoto2://[usb:001,002]/store1/ and
// gphoto2://[usb:001,002]/store2/. When the underlying mount (with root
// gphoto2://[usb:001,002]/) is mounted, said Monitor implementation would
// create two #GMount objects (each with their root matching the corresponding
// volume activation root) that would shadow the original mount.
//
// The proxy monitor in GVfs 2.26 and later, automatically creates and manage
// shadow mounts (and shadows the underlying mount) if the activation root on a
// #GVolume is set.
//
// The function returns the following values:
//
//    - ok: TRUE if mount is shadowed.
//
func (mount *Mount) IsShadowed() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(mount)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemountFinish finishes remounting a mount. If any errors occurred during the
// operation, error will be set to contain the errors and FALSE will be
// returned.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (mount *Mount) RemountFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Shadow increments the shadow count on mount. Usually used by Monitor
// implementations when creating a shadow mount for mount, see
// g_mount_is_shadowed() for more information. The caller will need to emit the
// #GMount::changed signal on mount manually.
func (mount *Mount) Shadow() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	runtime.KeepAlive(mount)
}

// UnmountFinish finishes unmounting a mount. If any errors occurred during the
// operation, error will be set to contain the errors and FALSE will be
// returned.
//
// Deprecated: Use g_mount_unmount_with_operation_finish() instead.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (mount *Mount) UnmountFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// UnmountWithOperationFinish finishes unmounting a mount. If any errors
// occurred during the operation, error will be set to contain the errors and
// FALSE will be returned.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (mount *Mount) UnmountWithOperationFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Mount)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(mount)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Unshadow decrements the shadow count on mount. Usually used by Monitor
// implementations when destroying a shadow mount for mount, see
// g_mount_is_shadowed() for more information. The caller will need to emit the
// #GMount::changed signal on mount manually.
func (mount *Mount) Unshadow() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(mount).Native()))
	*(**Mount)(unsafe.Pointer(&args[0])) = _arg0

	runtime.KeepAlive(mount)
}
