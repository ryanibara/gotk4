// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gsimpleproxyresolver.go.
var GTypeSimpleProxyResolver = coreglib.Type(C.g_simple_proxy_resolver_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeSimpleProxyResolver, F: marshalSimpleProxyResolver},
	})
}

// SimpleProxyResolverOverrider contains methods that are overridable.
type SimpleProxyResolverOverrider interface {
}

// SimpleProxyResolver is a simple Resolver implementation that handles a single
// default proxy, multiple URI-scheme-specific proxies, and a list of hosts that
// proxies should not be used for.
//
// ProxyResolver is never the default proxy resolver, but it can be used as the
// base class for another proxy resolver implementation, or it can be created
// and used manually, such as with g_socket_client_set_proxy_resolver().
type SimpleProxyResolver struct {
	_ [0]func() // equal guard
	*coreglib.Object

	ProxyResolver
}

var (
	_ coreglib.Objector = (*SimpleProxyResolver)(nil)
)

func classInitSimpleProxyResolverer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapSimpleProxyResolver(obj *coreglib.Object) *SimpleProxyResolver {
	return &SimpleProxyResolver{
		Object: obj,
		ProxyResolver: ProxyResolver{
			Object: obj,
		},
	}
}

func marshalSimpleProxyResolver(p uintptr) (interface{}, error) {
	return wrapSimpleProxyResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SetDefaultProxy sets the default proxy on resolver, to be used for any URIs
// that don't match ProxyResolver:ignore-hosts or a proxy set via
// g_simple_proxy_resolver_set_uri_proxy().
//
// If default_proxy starts with "socks://", ProxyResolver will treat it as
// referring to all three of the socks5, socks4a, and socks4 proxy types.
//
// The function takes the following parameters:
//
//    - defaultProxy: default proxy to use.
//
func (resolver *SimpleProxyResolver) SetDefaultProxy(defaultProxy string) {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(defaultProxy)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gio", "SimpleProxyResolver").InvokeMethod("set_default_proxy", _args[:], nil)

	runtime.KeepAlive(resolver)
	runtime.KeepAlive(defaultProxy)
}

// SetURIProxy adds a URI-scheme-specific proxy to resolver; URIs whose scheme
// matches uri_scheme (and which don't match ProxyResolver:ignore-hosts) will be
// proxied via proxy.
//
// As with ProxyResolver:default-proxy, if proxy starts with "socks://",
// ProxyResolver will treat it as referring to all three of the socks5, socks4a,
// and socks4 proxy types.
//
// The function takes the following parameters:
//
//    - uriScheme: URI scheme to add a proxy for.
//    - proxy to use for uri_scheme.
//
func (resolver *SimpleProxyResolver) SetURIProxy(uriScheme, proxy string) {
	var _args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(uriScheme)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(proxy)))
	defer C.free(unsafe.Pointer(_arg2))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1
	*(**C.void)(unsafe.Pointer(&_args[2])) = _arg2

	girepository.MustFind("Gio", "SimpleProxyResolver").InvokeMethod("set_uri_proxy", _args[:], nil)

	runtime.KeepAlive(resolver)
	runtime.KeepAlive(uriScheme)
	runtime.KeepAlive(proxy)
}
