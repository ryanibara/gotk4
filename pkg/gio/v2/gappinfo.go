// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern GAppInfo* _gotk4_gio2_AppInfoIface_dup(void*);
// extern GIcon* _gotk4_gio2_AppInfoIface_get_icon(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_commandline(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_description(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_display_name(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_executable(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_id(void*);
// extern char* _gotk4_gio2_AppInfoIface_get_name(void*);
// extern char* _gotk4_gio2_AppLaunchContextClass_get_display(void*, void*, void*);
// extern char* _gotk4_gio2_AppLaunchContextClass_get_startup_notify_id(void*, void*, void*);
// extern char** _gotk4_gio2_AppInfoIface_get_supported_types(void*);
// extern gboolean _gotk4_gio2_AppInfoIface_add_supports_type(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_can_delete(void*);
// extern gboolean _gotk4_gio2_AppInfoIface_can_remove_supports_type(void*);
// extern gboolean _gotk4_gio2_AppInfoIface_equal(void*, void*);
// extern gboolean _gotk4_gio2_AppInfoIface_launch(void*, void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_launch_uris(void*, void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_launch_uris_finish(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_remove_supports_type(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_set_as_default_for_extension(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_set_as_default_for_type(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_set_as_last_used_for_type(void*, void*, GError**);
// extern gboolean _gotk4_gio2_AppInfoIface_should_show(void*);
// extern gboolean _gotk4_gio2_AppInfoIface_supports_files(void*);
// extern gboolean _gotk4_gio2_AppInfoIface_supports_uris(void*);
// extern void _gotk4_gio2_AppLaunchContextClass_launch_failed(void*, void*);
// extern void _gotk4_gio2_AppLaunchContextClass_launched(void*, void*, void*);
// extern void _gotk4_gio2_AppLaunchContext_ConnectLaunchFailed(gpointer, void*, guintptr);
// extern void _gotk4_gio2_AppLaunchContext_ConnectLaunched(gpointer, void*, void*, guintptr);
// extern void _gotk4_gio2_AsyncReadyCallback(void*, void*, gpointer);
import "C"

// GTypeAppInfo returns the GType for the type AppInfo.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeAppInfo() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "AppInfo").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalAppInfo)
	return gtype
}

// GTypeAppLaunchContext returns the GType for the type AppLaunchContext.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeAppLaunchContext() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "AppLaunchContext").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalAppLaunchContext)
	return gtype
}

// AppInfo and LaunchContext are used for describing and launching applications
// installed on the system.
//
// As of GLib 2.20, URIs will always be converted to POSIX paths (using
// g_file_get_path()) when using g_app_info_launch() even if the application
// requested an URI and not a POSIX path. For example for a desktop-file based
// application with Exec key totem U and a single URI, sftp://foo/file.avi, then
// /home/user/.gvfs/sftp on foo/file.avi will be passed. This will only work if
// a set of suitable GIO extensions (such as gvfs 2.26 compiled with FUSE
// support), is available and operational; if this is not the case, the URI will
// be passed unmodified to the application. Some URIs, such as mailto:, of
// course cannot be mapped to a POSIX path (in gvfs there's no FUSE mount for
// it); such URIs will be passed unmodified to the application.
//
// Specifically for gvfs 2.26 and later, the POSIX URI will be mapped back to
// the GIO URI in the #GFile constructors (since gvfs implements the #GVfs
// extension point). As such, if the application needs to examine the URI, it
// needs to use g_file_get_uri() or similar on #GFile. In other words, an
// application cannot assume that the URI passed to e.g.
// g_file_new_for_commandline_arg() is equal to the result of g_file_get_uri().
// The following snippet illustrates this:
//
//    GFile *f;
//    char *uri;
//
//    file = g_file_new_for_commandline_arg (uri_from_commandline);
//
//    uri = g_file_get_uri (file);
//    strcmp (uri, uri_from_commandline) == 0;
//    g_free (uri);
//
//    if (g_file_has_uri_scheme (file, "cdda"))
//      {
//        // do something special with uri
//      }
//    g_object_unref (file);
//
// This code will work when both cdda://sr0/Track 1.wav and
// /home/user/.gvfs/cdda on sr0/Track 1.wav is passed to the application. It
// should be noted that it's generally not safe for applications to rely on the
// format of a particular URIs. Different launcher applications (e.g. file
// managers) may have different ideas of what a given URI means.
//
// AppInfo wraps an interface. This means the user can get the
// underlying type by calling Cast().
type AppInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*AppInfo)(nil)
)

// AppInfor describes AppInfo's interface methods.
type AppInfor interface {
	coreglib.Objector

	// AddSupportsType adds a content type to the application information to
	// indicate the application is capable of opening files with the given
	// content type.
	AddSupportsType(contentType string) error
	// CanDelete obtains the information whether the Info can be deleted.
	CanDelete() bool
	// CanRemoveSupportsType checks if a supported content type can be removed
	// from an application.
	CanRemoveSupportsType() bool
	// Delete tries to delete a Info.
	Delete() bool
	// Dup creates a duplicate of a Info.
	Dup() *AppInfo
	// Equal checks if two Infos are equal.
	Equal(appinfo2 AppInfor) bool
	// Commandline gets the commandline with which the application will be
	// started.
	Commandline() string
	// Description gets a human-readable description of an installed
	// application.
	Description() string
	// DisplayName gets the display name of the application.
	DisplayName() string
	// Executable gets the executable's name for the installed application.
	Executable() string
	// Icon gets the icon for the application.
	Icon() *Icon
	// ID gets the ID of an application.
	ID() string
	// Name gets the installed name of the application.
	Name() string
	// SupportedTypes retrieves the list of content types that app_info claims
	// to support.
	SupportedTypes() []string
	// Launch launches the application.
	Launch(files []Filer, context *AppLaunchContext) error
	// LaunchURIs launches the application.
	LaunchURIs(uris []string, context *AppLaunchContext) error
	// LaunchURIsAsync: async version of g_app_info_launch_uris().
	LaunchURIsAsync(ctx context.Context, uris []string, context *AppLaunchContext, callback AsyncReadyCallback)
	// LaunchURIsFinish finishes a g_app_info_launch_uris_async() operation.
	LaunchURIsFinish(result AsyncResulter) error
	// RemoveSupportsType removes a supported type from an application, if
	// possible.
	RemoveSupportsType(contentType string) error
	// SetAsDefaultForExtension sets the application as the default handler for
	// the given file extension.
	SetAsDefaultForExtension(extension string) error
	// SetAsDefaultForType sets the application as the default handler for a
	// given type.
	SetAsDefaultForType(contentType string) error
	// SetAsLastUsedForType sets the application as the last used application
	// for a given type.
	SetAsLastUsedForType(contentType string) error
	// ShouldShow checks if the application info should be shown in menus that
	// list available applications.
	ShouldShow() bool
	// SupportsFiles checks if the application accepts files as arguments.
	SupportsFiles() bool
	// SupportsURIs checks if the application supports reading files and
	// directories from URIs.
	SupportsURIs() bool
}

var _ AppInfor = (*AppInfo)(nil)

func wrapAppInfo(obj *coreglib.Object) *AppInfo {
	return &AppInfo{
		Object: obj,
	}
}

func marshalAppInfo(p uintptr) (interface{}, error) {
	return wrapAppInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddSupportsType adds a content type to the application information to
// indicate the application is capable of opening files with the given content
// type.
//
// The function takes the following parameters:
//
//    - contentType: string.
//
func (appinfo *AppInfo) AddSupportsType(contentType string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[1]))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(contentType)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CanDelete obtains the information whether the Info can be deleted. See
// g_app_info_delete().
//
// The function returns the following values:
//
//    - ok: TRUE if appinfo can be deleted.
//
func (appinfo *AppInfo) CanDelete() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// CanRemoveSupportsType checks if a supported content type can be removed from
// an application.
//
// The function returns the following values:
//
//    - ok: TRUE if it is possible to remove supported content types from a given
//      appinfo, FALSE if not.
//
func (appinfo *AppInfo) CanRemoveSupportsType() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Delete tries to delete a Info.
//
// On some platforms, there may be a difference between user-defined Infos which
// can be deleted, and system-wide ones which cannot. See
// g_app_info_can_delete().
//
// The function returns the following values:
//
//    - ok: TRUE if appinfo has been deleted.
//
func (appinfo *AppInfo) Delete() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Dup creates a duplicate of a Info.
//
// The function returns the following values:
//
//    - appInfo: duplicate of appinfo.
//
func (appinfo *AppInfo) Dup() *AppInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _appInfo *AppInfo // out

	_appInfo = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _appInfo
}

// Equal checks if two Infos are equal.
//
// Note that the check *may not* compare each individual field, and only does an
// identity check. In case detecting changes in the contents is needed, program
// code must additionally compare relevant fields.
//
// The function takes the following parameters:
//
//    - appinfo2: second Info.
//
// The function returns the following values:
//
//    - ok: TRUE if appinfo1 is equal to appinfo2. FALSE otherwise.
//
func (appinfo1 *AppInfo) Equal(appinfo2 AppInfor) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo1).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo2).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo1)
	runtime.KeepAlive(appinfo2)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Commandline gets the commandline with which the application will be started.
//
// The function returns the following values:
//
//    - filename (optional): string containing the appinfo's commandline, or NULL
//      if this information is not available.
//
func (appinfo *AppInfo) Commandline() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _filename string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _filename
}

// Description gets a human-readable description of an installed application.
//
// The function returns the following values:
//
//    - utf8 (optional): string containing a description of the application
//      appinfo, or NULL if none.
//
func (appinfo *AppInfo) Description() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// DisplayName gets the display name of the application. The display name is
// often more descriptive to the user than the name itself.
//
// The function returns the following values:
//
//    - utf8: display name of the application for appinfo, or the name if no
//      display name is available.
//
func (appinfo *AppInfo) DisplayName() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Executable gets the executable's name for the installed application.
//
// The function returns the following values:
//
//    - filename: string containing the appinfo's application binaries name.
//
func (appinfo *AppInfo) Executable() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _filename string // out

	_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _filename
}

// Icon gets the icon for the application.
//
// The function returns the following values:
//
//    - icon (optional): default #GIcon for appinfo or NULL if there is no
//      default icon.
//
func (appinfo *AppInfo) Icon() *Icon {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _icon *Icon // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_icon = wrapIcon(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _icon
}

// ID gets the ID of an application. An id is a string that identifies the
// application. The exact format of the id is platform dependent. For instance,
// on Unix this is the desktop file id from the xdg menu specification.
//
// Note that the returned ID may be NULL, depending on how the appinfo has been
// constructed.
//
// The function returns the following values:
//
//    - utf8 (optional): string containing the application's ID.
//
func (appinfo *AppInfo) ID() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Name gets the installed name of the application.
//
// The function returns the following values:
//
//    - utf8: name of the application for appinfo.
//
func (appinfo *AppInfo) Name() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SupportedTypes retrieves the list of content types that app_info claims to
// support. If this information is not provided by the environment, this
// function will return NULL. This function does not take in consideration
// associations added with g_app_info_add_supports_type(), but only those
// exported directly by the application.
//
// The function returns the following values:
//
//    - utf8s: a list of content types.
//
func (appinfo *AppInfo) SupportedTypes() []string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(***C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _utf8s []string // out

	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// Launch launches the application. Passes files to the launched application as
// arguments, using the optional context to get information about the details of
// the launcher (like what screen it is on). On error, error will be set
// accordingly.
//
// To launch the application without arguments pass a NULL files list.
//
// Note that even if the launch is successful the application launched can fail
// to start if it runs into problems during startup. There is no way to detect
// this.
//
// Some URIs can be changed when passed through a GFile (for instance
// unsupported URIs with strange formats like mailto:), so if you have a textual
// URI you want to pass in as argument, consider using g_app_info_launch_uris()
// instead.
//
// The launched application inherits the environment of the launching process,
// but it can be modified with g_app_launch_context_setenv() and
// g_app_launch_context_unsetenv().
//
// On UNIX, this function sets the GIO_LAUNCHED_DESKTOP_FILE environment
// variable with the path of the launched desktop file and
// GIO_LAUNCHED_DESKTOP_FILE_PID to the process id of the launched process. This
// can be used to ignore GIO_LAUNCHED_DESKTOP_FILE, should it be inherited by
// further processes. The DISPLAY and DESKTOP_STARTUP_ID environment variables
// are also set, based on information provided in context.
//
// The function takes the following parameters:
//
//    - files (optional) of #GFile objects.
//    - context (optional) or NULL.
//
func (appinfo *AppInfo) Launch(files []Filer, context *AppLaunchContext) error {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	if files != nil {
		for i := len(files) - 1; i >= 0; i-- {
			src := files[i]
			var dst *C.void // out
			*(**C.void)(unsafe.Pointer(&dst)) = (*C.void)(unsafe.Pointer(coreglib.InternObject(src).Native()))
			*(**C.void)(unsafe.Pointer(&_args[1])) = C.g_list_prepend(*(**C.void)(unsafe.Pointer(&_args[1])), C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_args[1])
	}
	if context != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(files)
	runtime.KeepAlive(context)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LaunchURIs launches the application. This passes the uris to the launched
// application as arguments, using the optional context to get information about
// the details of the launcher (like what screen it is on). On error, error will
// be set accordingly.
//
// To launch the application without arguments pass a NULL uris list.
//
// Note that even if the launch is successful the application launched can fail
// to start if it runs into problems during startup. There is no way to detect
// this.
//
// The function takes the following parameters:
//
//    - uris (optional) containing URIs to launch.
//    - context (optional) or NULL.
//
func (appinfo *AppInfo) LaunchURIs(uris []string, context *AppLaunchContext) error {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	if uris != nil {
		for i := len(uris) - 1; i >= 0; i-- {
			src := uris[i]
			var dst *C.void // out
			*(**C.void)(unsafe.Pointer(&dst)) = (*C.void)(unsafe.Pointer(C.CString(src)))
			defer C.free(unsafe.Pointer(dst))
			*(**C.void)(unsafe.Pointer(&_args[1])) = C.g_list_prepend(*(**C.void)(unsafe.Pointer(&_args[1])), C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_args[1])
	}
	if context != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(uris)
	runtime.KeepAlive(context)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LaunchURIsAsync: async version of g_app_info_launch_uris().
//
// The callback is invoked immediately after the application launch, but it
// waits for activation in case of D-Bus–activated applications and also
// provides extended error information for sandboxed applications, see notes for
// g_app_info_launch_default_for_uri_async().
//
// The function takes the following parameters:
//
//    - ctx (optional): #GCancellable.
//    - uris (optional) containing URIs to launch.
//    - context (optional) or NULL.
//    - callback (optional) to call when the request is done.
//
func (appinfo *AppInfo) LaunchURIsAsync(ctx context.Context, uris []string, context *AppLaunchContext, callback AsyncReadyCallback) {
	var _args [6]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[3] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	if uris != nil {
		for i := len(uris) - 1; i >= 0; i-- {
			src := uris[i]
			var dst *C.void // out
			*(**C.void)(unsafe.Pointer(&dst)) = (*C.void)(unsafe.Pointer(C.CString(src)))
			defer C.free(unsafe.Pointer(dst))
			*(**C.void)(unsafe.Pointer(&_args[1])) = C.g_list_prepend(*(**C.void)(unsafe.Pointer(&_args[1])), C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_args[1])
	}
	if context != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[4])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[5] = C.gpointer(gbox.AssignOnce(callback))
	}

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(uris)
	runtime.KeepAlive(context)
	runtime.KeepAlive(callback)
}

// LaunchURIsFinish finishes a g_app_info_launch_uris_async() operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (appinfo *AppInfo) LaunchURIsFinish(result AsyncResulter) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(result)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveSupportsType removes a supported type from an application, if possible.
//
// The function takes the following parameters:
//
//    - contentType: string.
//
func (appinfo *AppInfo) RemoveSupportsType(contentType string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[1]))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(contentType)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAsDefaultForExtension sets the application as the default handler for the
// given file extension.
//
// The function takes the following parameters:
//
//    - extension: string containing the file extension (without the dot).
//
func (appinfo *AppInfo) SetAsDefaultForExtension(extension string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(extension)))
	defer C.free(unsafe.Pointer(_args[1]))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(extension)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAsDefaultForType sets the application as the default handler for a given
// type.
//
// The function takes the following parameters:
//
//    - contentType: content type.
//
func (appinfo *AppInfo) SetAsDefaultForType(contentType string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[1]))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(contentType)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAsLastUsedForType sets the application as the last used application for a
// given type. This will make the application appear as first in the list
// returned by g_app_info_get_recommended_for_type(), regardless of the default
// application for that content type.
//
// The function takes the following parameters:
//
//    - contentType: content type.
//
func (appinfo *AppInfo) SetAsLastUsedForType(contentType string) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[1]))

	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(contentType)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ShouldShow checks if the application info should be shown in menus that list
// available applications.
//
// The function returns the following values:
//
//    - ok: TRUE if the appinfo should be shown, FALSE otherwise.
//
func (appinfo *AppInfo) ShouldShow() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SupportsFiles checks if the application accepts files as arguments.
//
// The function returns the following values:
//
//    - ok: TRUE if the appinfo supports files.
//
func (appinfo *AppInfo) SupportsFiles() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SupportsURIs checks if the application supports reading files and directories
// from URIs.
//
// The function returns the following values:
//
//    - ok: TRUE if the appinfo supports URIs.
//
func (appinfo *AppInfo) SupportsURIs() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(appinfo)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// AppInfoGetAll gets a list of all of the applications currently registered on
// this system.
//
// For desktop files, this includes applications that have NoDisplay=true set or
// are excluded from display by means of OnlyShowIn or NotShowIn. See
// g_app_info_should_show(). The returned list does not include applications
// which have the Hidden key set.
//
// The function returns the following values:
//
//    - list: newly allocated #GList of references to Infos.
//
func AppInfoGetAll() []*AppInfo {
	_gret := girepository.MustFind("Gio", "get_all").Invoke(nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _list []*AppInfo // out

	_list = make([]*AppInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *AppInfo // out
		dst = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// AppInfoGetAllForType gets a list of all Infos for a given content type,
// including the recommended and fallback Infos. See
// g_app_info_get_recommended_for_type() and g_app_info_get_fallback_for_type().
//
// The function takes the following parameters:
//
//    - contentType: content type to find a Info for.
//
// The function returns the following values:
//
//    - list of Infos for given content_type or NULL on error.
//
func AppInfoGetAllForType(contentType string) []*AppInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "get_all_for_type").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(contentType)

	var _list []*AppInfo // out

	_list = make([]*AppInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *AppInfo // out
		dst = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// AppInfoGetDefaultForType gets the default Info for a given content type.
//
// The function takes the following parameters:
//
//    - contentType: content type to find a Info for.
//    - mustSupportUris: if TRUE, the Info is expected to support URIs.
//
// The function returns the following values:
//
//    - appInfo (optional) for given content_type or NULL on error.
//
func AppInfoGetDefaultForType(contentType string, mustSupportUris bool) *AppInfo {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[0]))
	if mustSupportUris {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_gret := girepository.MustFind("Gio", "get_default_for_type").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(contentType)
	runtime.KeepAlive(mustSupportUris)

	var _appInfo *AppInfo // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_appInfo = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _appInfo
}

// AppInfoGetDefaultForURIScheme gets the default application for handling URIs
// with the given URI scheme. A URI scheme is the initial part of the URI, up to
// but not including the ':', e.g. "http", "ftp" or "sip".
//
// The function takes the following parameters:
//
//    - uriScheme: string containing a URI scheme.
//
// The function returns the following values:
//
//    - appInfo (optional) for given uri_scheme or NULL on error.
//
func AppInfoGetDefaultForURIScheme(uriScheme string) *AppInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(uriScheme)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "get_default_for_uri_scheme").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(uriScheme)

	var _appInfo *AppInfo // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_appInfo = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _appInfo
}

// AppInfoGetFallbackForType gets a list of fallback Infos for a given content
// type, i.e. those applications which claim to support the given content type
// by MIME type subclassing and not directly.
//
// The function takes the following parameters:
//
//    - contentType: content type to find a Info for.
//
// The function returns the following values:
//
//    - list of Infos for given content_type or NULL on error.
//
func AppInfoGetFallbackForType(contentType string) []*AppInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "get_fallback_for_type").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(contentType)

	var _list []*AppInfo // out

	_list = make([]*AppInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *AppInfo // out
		dst = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// AppInfoGetRecommendedForType gets a list of recommended Infos for a given
// content type, i.e. those applications which claim to support the given
// content type exactly, and not by MIME type subclassing. Note that the first
// application of the list is the last used one, i.e. the last one for which
// g_app_info_set_as_last_used_for_type() has been called.
//
// The function takes the following parameters:
//
//    - contentType: content type to find a Info for.
//
// The function returns the following values:
//
//    - list of Infos for given content_type or NULL on error.
//
func AppInfoGetRecommendedForType(contentType string) []*AppInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "get_recommended_for_type").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(contentType)

	var _list []*AppInfo // out

	_list = make([]*AppInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *AppInfo // out
		dst = wrapAppInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// AppInfoLaunchDefaultForURI: utility function that launches the default
// application registered to handle the specified uri. Synchronous I/O is done
// on the uri to detect the type of the file if required.
//
// The D-Bus–activated applications don't have to be started if your application
// terminates too soon after this function. To prevent this, use
// g_app_info_launch_default_for_uri_async() instead.
//
// The function takes the following parameters:
//
//    - uri to show.
//    - context (optional): optional LaunchContext.
//
func AppInfoLaunchDefaultForURI(uri string, context *AppLaunchContext) error {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_args[0]))
	if context != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}

	girepository.MustFind("Gio", "launch_default_for_uri").Invoke(_args[:], nil)

	runtime.KeepAlive(uri)
	runtime.KeepAlive(context)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AppInfoLaunchDefaultForURIAsync: async version of
// g_app_info_launch_default_for_uri().
//
// This version is useful if you are interested in receiving error information
// in the case where the application is sandboxed and the portal may present an
// application chooser dialog to the user.
//
// This is also useful if you want to be sure that the D-Bus–activated
// applications are really started before termination and if you are interested
// in receiving error information from their activation.
//
// The function takes the following parameters:
//
//    - ctx (optional): #GCancellable.
//    - uri to show.
//    - context (optional): optional LaunchContext.
//    - callback (optional) to call when the request is done.
//
func AppInfoLaunchDefaultForURIAsync(ctx context.Context, uri string, context *AppLaunchContext, callback AsyncReadyCallback) {
	var _args [5]girepository.Argument

	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[2] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_args[0]))
	if context != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[3])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[4] = C.gpointer(gbox.AssignOnce(callback))
	}

	girepository.MustFind("Gio", "launch_default_for_uri_async").Invoke(_args[:], nil)

	runtime.KeepAlive(ctx)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(context)
	runtime.KeepAlive(callback)
}

// AppInfoLaunchDefaultForURIFinish finishes an asynchronous
// launch-default-for-uri operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func AppInfoLaunchDefaultForURIFinish(result AsyncResulter) error {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	girepository.MustFind("Gio", "launch_default_for_uri_finish").Invoke(_args[:], nil)

	runtime.KeepAlive(result)

	var _goerr error // out

	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AppInfoResetTypeAssociations removes all changes to the type associations
// done by g_app_info_set_as_default_for_type(),
// g_app_info_set_as_default_for_extension(), g_app_info_add_supports_type() or
// g_app_info_remove_supports_type().
//
// The function takes the following parameters:
//
//    - contentType: content type.
//
func AppInfoResetTypeAssociations(contentType string) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(contentType)))
	defer C.free(unsafe.Pointer(_args[0]))

	girepository.MustFind("Gio", "reset_type_associations").Invoke(_args[:], nil)

	runtime.KeepAlive(contentType)
}

// AppInfoMonitorGet gets the InfoMonitor for the current thread-default main
// context.
//
// The InfoMonitor will emit a "changed" signal in the thread-default main
// context whenever the list of installed applications (as reported by
// g_app_info_get_all()) may have changed.
//
// You must only call g_object_unref() on the return value from under the same
// main context as you created it.
//
// The function returns the following values:
//
//    - appInfoMonitor: reference to a InfoMonitor.
//
func AppInfoMonitorGet() *AppInfoMonitor {
	_gret := girepository.MustFind("Gio", "get").Invoke(nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _appInfoMonitor *AppInfoMonitor // out

	_appInfoMonitor = wrapAppInfoMonitor(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _appInfoMonitor
}

// AppLaunchContextOverrider contains methods that are overridable.
type AppLaunchContextOverrider interface {
	// Display gets the display string for the context. This is used to ensure
	// new applications are started on the same display as the launching
	// application, by setting the DISPLAY environment variable.
	//
	// The function takes the following parameters:
	//
	//    - info: Info.
	//    - files of #GFile objects.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): display string for the display.
	//
	Display(info AppInfor, files []Filer) string
	// StartupNotifyID initiates startup notification for the application and
	// returns the DESKTOP_STARTUP_ID for the launched operation, if supported.
	//
	// Startup notification IDs are defined in the FreeDesktop.Org Startup
	// Notifications standard
	// (http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt).
	//
	// The function takes the following parameters:
	//
	//    - info: Info.
	//    - files of of #GFile objects.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): startup notification ID for the application, or NULL
	//      if not supported.
	//
	StartupNotifyID(info AppInfor, files []Filer) string
	// LaunchFailed: called when an application has failed to launch, so that it
	// can cancel the application startup notification started in
	// g_app_launch_context_get_startup_notify_id().
	//
	// The function takes the following parameters:
	//
	//    - startupNotifyId: startup notification id that was returned by
	//      g_app_launch_context_get_startup_notify_id().
	//
	LaunchFailed(startupNotifyId string)
	// The function takes the following parameters:
	//
	//    - info
	//    - platformData
	//
	Launched(info AppInfor, platformData *glib.Variant)
}

// AppLaunchContext: integrating the launch with the launching application. This
// is used to handle for instance startup notification and launching the new
// application on the same screen as the launching window.
type AppLaunchContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*AppLaunchContext)(nil)
)

func classInitAppLaunchContexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gio", "AppLaunchContextClass")

	if _, ok := goval.(interface {
		Display(info AppInfor, files []Filer) string
	}); ok {
		o := pclass.StructFieldOffset("get_display")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_AppLaunchContextClass_get_display)
	}

	if _, ok := goval.(interface {
		StartupNotifyID(info AppInfor, files []Filer) string
	}); ok {
		o := pclass.StructFieldOffset("get_startup_notify_id")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_AppLaunchContextClass_get_startup_notify_id)
	}

	if _, ok := goval.(interface{ LaunchFailed(startupNotifyId string) }); ok {
		o := pclass.StructFieldOffset("launch_failed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_AppLaunchContextClass_launch_failed)
	}

	if _, ok := goval.(interface {
		Launched(info AppInfor, platformData *glib.Variant)
	}); ok {
		o := pclass.StructFieldOffset("launched")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_AppLaunchContextClass_launched)
	}
}

//export _gotk4_gio2_AppLaunchContextClass_get_display
func _gotk4_gio2_AppLaunchContextClass_get_display(arg0 *C.void, arg1 *C.void, arg2 *C.void) (cret *C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Display(info AppInfor, files []Filer) string
	})

	var _info AppInfor // out
	var _files []Filer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AppInfor)
			return ok
		})
		rv, ok := casted.(AppInfor)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AppInfor")
		}
		_info = rv
	}
	_files = make([]Filer, 0, gextras.ListSize(unsafe.Pointer(arg2)))
	gextras.MoveList(unsafe.Pointer(arg2), false, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst Filer // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gio.Filer is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Filer)
				return ok
			})
			rv, ok := casted.(Filer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
			}
			dst = rv
		}
		_files = append(_files, dst)
	})

	utf8 := iface.Display(_info, _files)

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

//export _gotk4_gio2_AppLaunchContextClass_get_startup_notify_id
func _gotk4_gio2_AppLaunchContextClass_get_startup_notify_id(arg0 *C.void, arg1 *C.void, arg2 *C.void) (cret *C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		StartupNotifyID(info AppInfor, files []Filer) string
	})

	var _info AppInfor // out
	var _files []Filer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AppInfor)
			return ok
		})
		rv, ok := casted.(AppInfor)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AppInfor")
		}
		_info = rv
	}
	_files = make([]Filer, 0, gextras.ListSize(unsafe.Pointer(arg2)))
	gextras.MoveList(unsafe.Pointer(arg2), false, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst Filer // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gio.Filer is nil")
			}

			object := coreglib.Take(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Filer)
				return ok
			})
			rv, ok := casted.(Filer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
			}
			dst = rv
		}
		_files = append(_files, dst)
	})

	utf8 := iface.StartupNotifyID(_info, _files)

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

//export _gotk4_gio2_AppLaunchContextClass_launch_failed
func _gotk4_gio2_AppLaunchContextClass_launch_failed(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ LaunchFailed(startupNotifyId string) })

	var _startupNotifyId string // out

	_startupNotifyId = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.LaunchFailed(_startupNotifyId)
}

//export _gotk4_gio2_AppLaunchContextClass_launched
func _gotk4_gio2_AppLaunchContextClass_launched(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Launched(info AppInfor, platformData *glib.Variant)
	})

	var _info AppInfor              // out
	var _platformData *glib.Variant // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AppInfor)
			return ok
		})
		rv, ok := casted.(AppInfor)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AppInfor")
		}
		_info = rv
	}
	_platformData = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	C.g_variant_ref(arg2)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_platformData)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	iface.Launched(_info, _platformData)
}

func wrapAppLaunchContext(obj *coreglib.Object) *AppLaunchContext {
	return &AppLaunchContext{
		Object: obj,
	}
}

func marshalAppLaunchContext(p uintptr) (interface{}, error) {
	return wrapAppLaunchContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_AppLaunchContext_ConnectLaunchFailed
func _gotk4_gio2_AppLaunchContext_ConnectLaunchFailed(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(startupNotifyId string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(startupNotifyId string))
	}

	var _startupNotifyId string // out

	_startupNotifyId = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_startupNotifyId)
}

// ConnectLaunchFailed signal is emitted when a Info launch fails. The startup
// notification id is provided, so that the launcher can cancel the startup
// notification.
func (context *AppLaunchContext) ConnectLaunchFailed(f func(startupNotifyId string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "launch-failed", false, unsafe.Pointer(C._gotk4_gio2_AppLaunchContext_ConnectLaunchFailed), f)
}

//export _gotk4_gio2_AppLaunchContext_ConnectLaunched
func _gotk4_gio2_AppLaunchContext_ConnectLaunched(arg0 C.gpointer, arg1 *C.void, arg2 *C.void, arg3 C.guintptr) {
	var f func(info AppInfor, platformData *glib.Variant)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(info AppInfor, platformData *glib.Variant))
	}

	var _info AppInfor              // out
	var _platformData *glib.Variant // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AppInfor)
			return ok
		})
		rv, ok := casted.(AppInfor)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AppInfor")
		}
		_info = rv
	}
	_platformData = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	C.g_variant_ref(arg2)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_platformData)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	f(_info, _platformData)
}

// ConnectLaunched signal is emitted when a Info is successfully launched. The
// platform_data is an GVariant dictionary mapping strings to variants (ie
// a{sv}), which contains additional, platform-specific data about this launch.
// On UNIX, at least the "pid" and "startup-notification-id" keys will be
// present.
func (context *AppLaunchContext) ConnectLaunched(f func(info AppInfor, platformData *glib.Variant)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "launched", false, unsafe.Pointer(C._gotk4_gio2_AppLaunchContext_ConnectLaunched), f)
}

// NewAppLaunchContext creates a new application launch context. This is not
// normally used, instead you instantiate a subclass of this, such as
// AppLaunchContext.
//
// The function returns the following values:
//
//    - appLaunchContext: LaunchContext.
//
func NewAppLaunchContext() *AppLaunchContext {
	_gret := girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("new_AppLaunchContext", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _appLaunchContext *AppLaunchContext // out

	_appLaunchContext = wrapAppLaunchContext(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _appLaunchContext
}

// Display gets the display string for the context. This is used to ensure new
// applications are started on the same display as the launching application, by
// setting the DISPLAY environment variable.
//
// The function takes the following parameters:
//
//    - info: Info.
//    - files of #GFile objects.
//
// The function returns the following values:
//
//    - utf8 (optional): display string for the display.
//
func (context *AppLaunchContext) Display(info AppInfor, files []Filer) string {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	for i := len(files) - 1; i >= 0; i-- {
		src := files[i]
		var dst *C.void // out
		*(**C.void)(unsafe.Pointer(&dst)) = (*C.void)(unsafe.Pointer(coreglib.InternObject(src).Native()))
		*(**C.void)(unsafe.Pointer(&_args[2])) = C.g_list_prepend(*(**C.void)(unsafe.Pointer(&_args[2])), C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_list_free(_args[2])

	_gret := girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("get_display", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(info)
	runtime.KeepAlive(files)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// Environment gets the complete environment variable list to be passed to the
// child process when context is used to launch an application. This is a
// NULL-terminated array of strings, where each string has the form KEY=VALUE.
//
// The function returns the following values:
//
//    - filenames: the child's environment.
//
func (context *AppLaunchContext) Environment() []string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_gret := girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("get_environment", _args[:], nil)
	_cret = *(***C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)

	var _filenames []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_filenames = make([]string, i)
		for i := range src {
			_filenames[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _filenames
}

// StartupNotifyID initiates startup notification for the application and
// returns the DESKTOP_STARTUP_ID for the launched operation, if supported.
//
// Startup notification IDs are defined in the FreeDesktop.Org Startup
// Notifications standard
// (http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt).
//
// The function takes the following parameters:
//
//    - info: Info.
//    - files of of #GFile objects.
//
// The function returns the following values:
//
//    - utf8 (optional): startup notification ID for the application, or NULL if
//      not supported.
//
func (context *AppLaunchContext) StartupNotifyID(info AppInfor, files []Filer) string {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	for i := len(files) - 1; i >= 0; i-- {
		src := files[i]
		var dst *C.void // out
		*(**C.void)(unsafe.Pointer(&dst)) = (*C.void)(unsafe.Pointer(coreglib.InternObject(src).Native()))
		*(**C.void)(unsafe.Pointer(&_args[2])) = C.g_list_prepend(*(**C.void)(unsafe.Pointer(&_args[2])), C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_list_free(_args[2])

	_gret := girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("get_startup_notify_id", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(context)
	runtime.KeepAlive(info)
	runtime.KeepAlive(files)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// LaunchFailed: called when an application has failed to launch, so that it can
// cancel the application startup notification started in
// g_app_launch_context_get_startup_notify_id().
//
// The function takes the following parameters:
//
//    - startupNotifyId: startup notification id that was returned by
//      g_app_launch_context_get_startup_notify_id().
//
func (context *AppLaunchContext) LaunchFailed(startupNotifyId string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(startupNotifyId)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("launch_failed", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(startupNotifyId)
}

// Setenv arranges for variable to be set to value in the child's environment
// when context is used to launch an application.
//
// The function takes the following parameters:
//
//    - variable: environment variable to set.
//    - value for to set the variable to.
//
func (context *AppLaunchContext) Setenv(variable, value string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(variable)))
	defer C.free(unsafe.Pointer(_args[1]))
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_args[2]))

	girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("setenv", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(variable)
	runtime.KeepAlive(value)
}

// Unsetenv arranges for variable to be unset in the child's environment when
// context is used to launch an application.
//
// The function takes the following parameters:
//
//    - variable: environment variable to remove.
//
func (context *AppLaunchContext) Unsetenv(variable string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(variable)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gio", "AppLaunchContext").InvokeMethod("unsetenv", _args[:], nil)

	runtime.KeepAlive(context)
	runtime.KeepAlive(variable)
}
