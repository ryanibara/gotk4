// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMemoryInputStream = coreglib.Type(C.g_memory_input_stream_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMemoryInputStream, F: marshalMemoryInputStream},
	})
}

// MemoryInputStreamOverrides contains methods that are overridable.
type MemoryInputStreamOverrides struct {
}

func defaultMemoryInputStreamOverrides(v *MemoryInputStream) MemoryInputStreamOverrides {
	return MemoryInputStreamOverrides{}
}

// MemoryInputStream is a class for using arbitrary memory chunks as input for
// GIO streaming input operations.
//
// As of GLib 2.34, InputStream implements InputStream.
type MemoryInputStream struct {
	_ [0]func() // equal guard
	InputStream

	*coreglib.Object
	PollableInputStream
	Seekable
}

var (
	_ InputStreamer     = (*MemoryInputStream)(nil)
	_ coreglib.Objector = (*MemoryInputStream)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MemoryInputStream, *MemoryInputStreamClass, MemoryInputStreamOverrides](
		GTypeMemoryInputStream,
		initMemoryInputStreamClass,
		wrapMemoryInputStream,
		defaultMemoryInputStreamOverrides,
	)
}

func initMemoryInputStreamClass(gclass unsafe.Pointer, overrides MemoryInputStreamOverrides, classInitFunc func(*MemoryInputStreamClass)) {
	if classInitFunc != nil {
		class := (*MemoryInputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMemoryInputStream(obj *coreglib.Object) *MemoryInputStream {
	return &MemoryInputStream{
		InputStream: InputStream{
			Object: obj,
		},
		Object: obj,
		PollableInputStream: PollableInputStream{
			InputStream: InputStream{
				Object: obj,
			},
		},
		Seekable: Seekable{
			Object: obj,
		},
	}
}

func marshalMemoryInputStream(p uintptr) (interface{}, error) {
	return wrapMemoryInputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewMemoryInputStream creates a new empty InputStream.
//
// The function returns the following values:
//
//    - memoryInputStream: new Stream.
//
func NewMemoryInputStream() *MemoryInputStream {
	var _cret *C.GInputStream // in

	_cret = C.g_memory_input_stream_new()

	var _memoryInputStream *MemoryInputStream // out

	_memoryInputStream = wrapMemoryInputStream(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _memoryInputStream
}

// NewMemoryInputStreamFromBytes creates a new InputStream with data from the
// given bytes.
//
// The function takes the following parameters:
//
//    - bytes: #GBytes.
//
// The function returns the following values:
//
//    - memoryInputStream: new Stream read from bytes.
//
func NewMemoryInputStreamFromBytes(bytes *glib.Bytes) *MemoryInputStream {
	var _arg1 *C.GBytes       // out
	var _cret *C.GInputStream // in

	_arg1 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))

	_cret = C.g_memory_input_stream_new_from_bytes(_arg1)
	runtime.KeepAlive(bytes)

	var _memoryInputStream *MemoryInputStream // out

	_memoryInputStream = wrapMemoryInputStream(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _memoryInputStream
}

// AddBytes appends bytes to data that can be read from the input stream.
//
// The function takes the following parameters:
//
//    - bytes: input data.
//
func (stream *MemoryInputStream) AddBytes(bytes *glib.Bytes) {
	var _arg0 *C.GMemoryInputStream // out
	var _arg1 *C.GBytes             // out

	_arg0 = (*C.GMemoryInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))

	C.g_memory_input_stream_add_bytes(_arg0, _arg1)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(bytes)
}

// MemoryInputStreamClass: instance of this type is always passed by reference.
type MemoryInputStreamClass struct {
	*memoryInputStreamClass
}

// memoryInputStreamClass is the struct that's finalized.
type memoryInputStreamClass struct {
	native *C.GMemoryInputStreamClass
}

func (m *MemoryInputStreamClass) ParentClass() *InputStreamClass {
	valptr := &m.native.parent_class
	var _v *InputStreamClass // out
	_v = (*InputStreamClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
