// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GIOStream* _gotk4_gio2_ProxyInterface_connect(GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**);
// extern GIOStream* _gotk4_gio2_ProxyInterface_connect_finish(GProxy*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_ProxyInterface_supports_hostname(GProxy*);
import "C"

// glib.Type values for gproxy.go.
var GTypeProxy = coreglib.Type(C.g_proxy_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeProxy, F: marshalProxy},
	})
}

// PROXY_EXTENSION_POINT_NAME: extension point for proxy functionality. See
// [Extending GIO][extending-gio].
const PROXY_EXTENSION_POINT_NAME = "gio-proxy"

// ProxyOverrider contains methods that are overridable.
type ProxyOverrider interface {
	// ConnectProxy: given connection to communicate with a proxy (eg, a
	// Connection that is connected to the proxy server), this does the
	// necessary handshake to connect to proxy_address, and if required, wraps
	// the OStream to handle proxy payload.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional): #GCancellable.
	//    - connection: OStream.
	//    - proxyAddress: Address.
	//
	// The function returns the following values:
	//
	//    - ioStream that will replace connection. This might be the same as
	//      connection, in which case a reference will be added.
	//
	ConnectProxy(ctx context.Context, connection IOStreamer, proxyAddress *ProxyAddress) (IOStreamer, error)
	// ConnectFinish: see g_proxy_connect().
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - ioStream: OStream.
	//
	ConnectFinish(result AsyncResulter) (IOStreamer, error)
	// SupportsHostname: some proxy protocols expect to be passed a hostname,
	// which they will resolve to an IP address themselves. Others, like SOCKS4,
	// do not allow this. This function will return FALSE if proxy is
	// implementing such a protocol. When FALSE is returned, the caller should
	// resolve the destination hostname first, and then pass a Address
	// containing the stringified IP address to g_proxy_connect() or
	// g_proxy_connect_async().
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if hostname resolution is supported.
	//
	SupportsHostname() bool
}

// Proxy handles connecting to a remote host via a given type of proxy server.
// It is implemented by the 'gio-proxy' extension point. The extensions are
// named after their proxy protocol name. As an example, a SOCKS5 proxy
// implementation can be retrieved with the name 'socks5' using the function
// g_io_extension_point_get_extension_by_name().
//
// Proxy wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Proxy struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Proxy)(nil)
)

// Proxier describes Proxy's interface methods.
type Proxier interface {
	coreglib.Objector

	// ConnectProxy: given connection to communicate with a proxy (eg, a
	// Connection that is connected to the proxy server), this does the
	// necessary handshake to connect to proxy_address, and if required, wraps
	// the OStream to handle proxy payload.
	ConnectProxy(ctx context.Context, connection IOStreamer, proxyAddress *ProxyAddress) (IOStreamer, error)
	// ConnectFinish: see g_proxy_connect().
	ConnectFinish(result AsyncResulter) (IOStreamer, error)
	// SupportsHostname: some proxy protocols expect to be passed a hostname,
	// which they will resolve to an IP address themselves.
	SupportsHostname() bool
}

var _ Proxier = (*Proxy)(nil)

func ifaceInitProxier(gifacePtr, data C.gpointer) {
	iface := (*C.GProxyInterface)(unsafe.Pointer(gifacePtr))
	iface.connect = (*[0]byte)(C._gotk4_gio2_ProxyInterface_connect)
	iface.connect_finish = (*[0]byte)(C._gotk4_gio2_ProxyInterface_connect_finish)
	iface.supports_hostname = (*[0]byte)(C._gotk4_gio2_ProxyInterface_supports_hostname)
}

//export _gotk4_gio2_ProxyInterface_connect
func _gotk4_gio2_ProxyInterface_connect(arg0 *C.GProxy, arg1 *C.GIOStream, arg2 *C.GProxyAddress, arg3 *C.GCancellable, _cerr **C.GError) (cret *C.GIOStream) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ProxyOverrider)

	var _cancellable context.Context // out
	var _connection IOStreamer       // out
	var _proxyAddress *ProxyAddress  // out

	if arg3 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg3))
	}
	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(IOStreamer)
			return ok
		})
		rv, ok := casted.(IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_connection = rv
	}
	_proxyAddress = wrapProxyAddress(coreglib.Take(unsafe.Pointer(arg2)))

	ioStream, _goerr := iface.ConnectProxy(_cancellable, _connection, _proxyAddress)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(ioStream).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(ioStream).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_ProxyInterface_connect_finish
func _gotk4_gio2_ProxyInterface_connect_finish(arg0 *C.GProxy, arg1 *C.GAsyncResult, _cerr **C.GError) (cret *C.GIOStream) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ProxyOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	ioStream, _goerr := iface.ConnectFinish(_result)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(ioStream).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(ioStream).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_ProxyInterface_supports_hostname
func _gotk4_gio2_ProxyInterface_supports_hostname(arg0 *C.GProxy) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ProxyOverrider)

	ok := iface.SupportsHostname()

	if ok {
		cret = C.TRUE
	}

	return cret
}

func wrapProxy(obj *coreglib.Object) *Proxy {
	return &Proxy{
		Object: obj,
	}
}

func marshalProxy(p uintptr) (interface{}, error) {
	return wrapProxy(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectProxy: given connection to communicate with a proxy (eg, a Connection
// that is connected to the proxy server), this does the necessary handshake to
// connect to proxy_address, and if required, wraps the OStream to handle proxy
// payload.
//
// The function takes the following parameters:
//
//    - ctx (optional): #GCancellable.
//    - connection: OStream.
//    - proxyAddress: Address.
//
// The function returns the following values:
//
//    - ioStream that will replace connection. This might be the same as
//      connection, in which case a reference will be added.
//
func (proxy *Proxy) ConnectProxy(ctx context.Context, connection IOStreamer, proxyAddress *ProxyAddress) (IOStreamer, error) {
	var args [4]girepository.Argument
	var _arg0 *C.void // out
	var _arg3 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(proxy).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg2 = (*C.void)(unsafe.Pointer(coreglib.InternObject(proxyAddress).Native()))
	*(**Proxy)(unsafe.Pointer(&args[1])) = _arg1
	*(*context.Context)(unsafe.Pointer(&args[2])) = _arg2
	*(*IOStreamer)(unsafe.Pointer(&args[3])) = _arg3

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(proxy)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(connection)
	runtime.KeepAlive(proxyAddress)

	var _ioStream IOStreamer // out
	var _goerr error         // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(IOStreamer)
			return ok
		})
		rv, ok := casted.(IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_ioStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ioStream, _goerr
}

// ConnectFinish: see g_proxy_connect().
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - ioStream: OStream.
//
func (proxy *Proxy) ConnectFinish(result AsyncResulter) (IOStreamer, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(proxy).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**Proxy)(unsafe.Pointer(&args[1])) = _arg1

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(proxy)
	runtime.KeepAlive(result)

	var _ioStream IOStreamer // out
	var _goerr error         // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(IOStreamer)
			return ok
		})
		rv, ok := casted.(IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_ioStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ioStream, _goerr
}

// SupportsHostname: some proxy protocols expect to be passed a hostname, which
// they will resolve to an IP address themselves. Others, like SOCKS4, do not
// allow this. This function will return FALSE if proxy is implementing such a
// protocol. When FALSE is returned, the caller should resolve the destination
// hostname first, and then pass a Address containing the stringified IP address
// to g_proxy_connect() or g_proxy_connect_async().
//
// The function returns the following values:
//
//    - ok: TRUE if hostname resolution is supported.
//
func (proxy *Proxy) SupportsHostname() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(proxy).Native()))
	*(**Proxy)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(proxy)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ProxyGetDefaultForProtocol: find the gio-proxy extension point for a proxy
// implementation that supports the specified protocol.
//
// The function takes the following parameters:
//
//    - protocol: proxy protocol name (e.g. http, socks, etc).
//
// The function returns the following values:
//
//    - proxy (optional): return a #GProxy or NULL if protocol is not supported.
//
func ProxyGetDefaultForProtocol(protocol string) *Proxy {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg0))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "get_default_for_protocol").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(protocol)

	var _proxy *Proxy // out

	if _cret != nil {
		_proxy = wrapProxy(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _proxy
}
