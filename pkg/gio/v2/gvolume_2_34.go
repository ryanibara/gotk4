// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// GIcon* _gotk4_gio2_Volume_virtual_get_symbolic_icon(void* fnptr, GVolume* arg0) {
//   return ((GIcon* (*)(GVolume*))(fnptr))(arg0);
// };
import "C"

// SymbolicIcon gets the symbolic icon for volume.
//
// The function returns the following values:
//
//    - icon: #GIcon. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (volume *Volume) SymbolicIcon() *Icon {
	var _arg0 *C.GVolume // out
	var _cret *C.GIcon   // in

	_arg0 = (*C.GVolume)(unsafe.Pointer(coreglib.InternObject(volume).Native()))

	_cret = C.g_volume_get_symbolic_icon(_arg0)
	runtime.KeepAlive(volume)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _icon
}

// symbolicIcon gets the symbolic icon for volume.
//
// The function returns the following values:
//
//    - icon: #GIcon. The returned object should be unreffed with
//      g_object_unref() when no longer needed.
//
func (volume *Volume) symbolicIcon() *Icon {
	gclass := (*C.GVolumeIface)(coreglib.PeekParentClass(volume))
	fnarg := gclass.get_symbolic_icon

	var _arg0 *C.GVolume // out
	var _cret *C.GIcon   // in

	_arg0 = (*C.GVolume)(unsafe.Pointer(coreglib.InternObject(volume).Native()))

	_cret = C._gotk4_gio2_Volume_virtual_get_symbolic_icon(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(volume)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _icon
}
