// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// BusAcquiredCallback: invoked when a connection to a message bus has been
// obtained.
type BusAcquiredCallback func(connection *DBusConnection, name string)

//export _gotk4_gio2_BusAcquiredCallback
func _gotk4_gio2_BusAcquiredCallback(arg0 *C.GDBusConnection, arg1 *C.gchar, arg2 C.gpointer) {
	v := gbox.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var connection *DBusConnection // out
	var name string                // out

	connection = wrapDBusConnection(externglib.Take(unsafe.Pointer(arg0)))
	name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	fn := v.(BusAcquiredCallback)
	fn(connection, name)
}

// BusNameAcquiredCallback: invoked when the name is acquired.
type BusNameAcquiredCallback func(connection *DBusConnection, name string)

//export _gotk4_gio2_BusNameAcquiredCallback
func _gotk4_gio2_BusNameAcquiredCallback(arg0 *C.GDBusConnection, arg1 *C.gchar, arg2 C.gpointer) {
	v := gbox.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var connection *DBusConnection // out
	var name string                // out

	connection = wrapDBusConnection(externglib.Take(unsafe.Pointer(arg0)))
	name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	fn := v.(BusNameAcquiredCallback)
	fn(connection, name)
}

// BusNameLostCallback: invoked when the name is lost or connection has been
// closed.
type BusNameLostCallback func(connection *DBusConnection, name string)

//export _gotk4_gio2_BusNameLostCallback
func _gotk4_gio2_BusNameLostCallback(arg0 *C.GDBusConnection, arg1 *C.gchar, arg2 C.gpointer) {
	v := gbox.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var connection *DBusConnection // out
	var name string                // out

	connection = wrapDBusConnection(externglib.Take(unsafe.Pointer(arg0)))
	name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	fn := v.(BusNameLostCallback)
	fn(connection, name)
}

// BusUnownName stops owning a name.
//
// Note that there may still be D-Bus traffic to process (relating to owning and
// unowning the name) in the current thread-default Context after this function
// has returned. You should continue to iterate the Context until the Notify
// function passed to g_bus_own_name() is called, in order to avoid memory leaks
// through callbacks queued on the Context after itâ€™s stopped being iterated.
//
// The function takes the following parameters:
//
//    - ownerId: identifier obtained from g_bus_own_name().
//
func BusUnownName(ownerId uint) {
	var _arg1 C.guint // out

	_arg1 = C.guint(ownerId)

	C.g_bus_unown_name(_arg1)
	runtime.KeepAlive(ownerId)
}
