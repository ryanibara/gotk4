// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeInetSocketAddress = coreglib.Type(C.g_inet_socket_address_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInetSocketAddress, F: marshalInetSocketAddress},
	})
}

// InetSocketAddressOverrides contains methods that are overridable.
type InetSocketAddressOverrides struct {
}

func defaultInetSocketAddressOverrides(v *InetSocketAddress) InetSocketAddressOverrides {
	return InetSocketAddressOverrides{}
}

// InetSocketAddress: IPv4 or IPv6 socket address; that is, the combination of a
// Address and a port number.
type InetSocketAddress struct {
	_ [0]func() // equal guard
	SocketAddress
}

var (
	_ SocketAddresser = (*InetSocketAddress)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InetSocketAddress, *InetSocketAddressClass, InetSocketAddressOverrides](
		GTypeInetSocketAddress,
		initInetSocketAddressClass,
		wrapInetSocketAddress,
		defaultInetSocketAddressOverrides,
	)
}

func initInetSocketAddressClass(gclass unsafe.Pointer, overrides InetSocketAddressOverrides, classInitFunc func(*InetSocketAddressClass)) {
	if classInitFunc != nil {
		class := (*InetSocketAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInetSocketAddress(obj *coreglib.Object) *InetSocketAddress {
	return &InetSocketAddress{
		SocketAddress: SocketAddress{
			Object: obj,
			SocketConnectable: SocketConnectable{
				Object: obj,
			},
		},
	}
}

func marshalInetSocketAddress(p uintptr) (interface{}, error) {
	return wrapInetSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// InetSocketAddressClass: instance of this type is always passed by reference.
type InetSocketAddressClass struct {
	*inetSocketAddressClass
}

// inetSocketAddressClass is the struct that's finalized.
type inetSocketAddressClass struct {
	native *C.GInetSocketAddressClass
}

func (i *InetSocketAddressClass) ParentClass() *SocketAddressClass {
	valptr := &i.native.parent_class
	var _v *SocketAddressClass // out
	_v = (*SocketAddressClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
