// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeInetSocketAddress returns the GType for the type InetSocketAddress.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeInetSocketAddress() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "InetSocketAddress").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalInetSocketAddress)
	return gtype
}

// InetSocketAddressOverrider contains methods that are overridable.
type InetSocketAddressOverrider interface {
}

// InetSocketAddress: IPv4 or IPv6 socket address; that is, the combination of a
// Address and a port number.
type InetSocketAddress struct {
	_ [0]func() // equal guard
	SocketAddress
}

var (
	_ SocketAddresser = (*InetSocketAddress)(nil)
)

func classInitInetSocketAddresser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapInetSocketAddress(obj *coreglib.Object) *InetSocketAddress {
	return &InetSocketAddress{
		SocketAddress: SocketAddress{
			Object: obj,
			SocketConnectable: SocketConnectable{
				Object: obj,
			},
		},
	}
}

func marshalInetSocketAddress(p uintptr) (interface{}, error) {
	return wrapInetSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewInetSocketAddress creates a new SocketAddress for address and port.
//
// The function takes the following parameters:
//
//    - address: Address.
//    - port number.
//
// The function returns the following values:
//
//    - inetSocketAddress: new SocketAddress.
//
func NewInetSocketAddress(address *InetAddress, port uint16) *InetSocketAddress {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(address).Native()))
	*(*C.guint16)(unsafe.Pointer(&_args[1])) = C.guint16(port)

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("new_InetSocketAddress", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)
	runtime.KeepAlive(port)

	var _inetSocketAddress *InetSocketAddress // out

	_inetSocketAddress = wrapInetSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _inetSocketAddress
}

// NewInetSocketAddressFromString creates a new SocketAddress for address and
// port.
//
// If address is an IPv6 address, it can also contain a scope ID (separated from
// the address by a %).
//
// The function takes the following parameters:
//
//    - address: string form of an IP address.
//    - port number.
//
// The function returns the following values:
//
//    - inetSocketAddress (optional): new SocketAddress, or NULL if address
//      cannot be parsed.
//
func NewInetSocketAddressFromString(address string, port uint32) *InetSocketAddress {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(address)))
	defer C.free(unsafe.Pointer(_args[0]))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(port)

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("new_InetSocketAddress_from_string", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)
	runtime.KeepAlive(port)

	var _inetSocketAddress *InetSocketAddress // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_inetSocketAddress = wrapInetSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _inetSocketAddress
}

// Address gets address's Address.
//
// The function returns the following values:
//
//    - inetAddress for address, which must be g_object_ref()'d if it will be
//      stored.
//
func (address *InetSocketAddress) Address() *InetAddress {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("get_address", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)

	var _inetAddress *InetAddress // out

	_inetAddress = wrapInetAddress(coreglib.Take(unsafe.Pointer(_cret)))

	return _inetAddress
}

// Flowinfo gets the sin6_flowinfo field from address, which must be an IPv6
// address.
//
// The function returns the following values:
//
//    - guint32: flowinfo field.
//
func (address *InetSocketAddress) Flowinfo() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("get_flowinfo", _args[:], nil)
	_cret = *(*C.guint32)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)

	var _guint32 uint32 // out

	_guint32 = uint32(*(*C.guint32)(unsafe.Pointer(&_cret)))

	return _guint32
}

// Port gets address's port.
//
// The function returns the following values:
//
//    - guint16: port for address.
//
func (address *InetSocketAddress) Port() uint16 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("get_port", _args[:], nil)
	_cret = *(*C.guint16)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)

	var _guint16 uint16 // out

	_guint16 = uint16(*(*C.guint16)(unsafe.Pointer(&_cret)))

	return _guint16
}

// ScopeID gets the sin6_scope_id field from address, which must be an IPv6
// address.
//
// The function returns the following values:
//
//    - guint32: scope id field.
//
func (address *InetSocketAddress) ScopeID() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_gret := girepository.MustFind("Gio", "InetSocketAddress").InvokeMethod("get_scope_id", _args[:], nil)
	_cret = *(*C.guint32)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(address)

	var _guint32 uint32 // out

	_guint32 = uint32(*(*C.guint32)(unsafe.Pointer(&_cret)))

	return _guint32
}
