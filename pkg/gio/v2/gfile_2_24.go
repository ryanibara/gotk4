// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// HasParent checks if file has a parent, and optionally, if it is parent.
//
// If parent is NULL then this function returns TRUE if file has any parent at
// all. If parent is non-NULL then TRUE is only returned if file is an immediate
// child of parent.
//
// The function takes the following parameters:
//
//    - parent (optional) to check for, or NULL.
//
// The function returns the following values:
//
//    - ok: TRUE if file is an immediate child of parent (or any parent in the
//      case that parent is NULL).
//
func (file *File) HasParent(parent Filer) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	if parent != nil {
		_arg1 = (*C.GFile)(unsafe.Pointer(coreglib.InternObject(parent).Native()))
	}

	_cret = C.g_file_has_parent(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(parent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
