// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// NewDBusAuthObserver creates a new BusAuthObserver object.
//
// The function returns the following values:
//
//    - dBusAuthObserver Free with g_object_unref().
//
func NewDBusAuthObserver() *DBusAuthObserver {
	_info := girepository.MustFind("Gio", "DBusAuthObserver")
	_gret := _info.InvokeClassMethod("new_DBusAuthObserver", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _dBusAuthObserver *DBusAuthObserver // out

	_dBusAuthObserver = wrapDBusAuthObserver(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusAuthObserver
}

// AllowMechanism emits the BusAuthObserver::allow-mechanism signal on observer.
//
// The function takes the following parameters:
//
//    - mechanism: name of the mechanism, e.g. DBUS_COOKIE_SHA1.
//
// The function returns the following values:
//
//    - ok: TRUE if mechanism can be used to authenticate the other peer, FALSE
//      if not.
//
func (observer *DBusAuthObserver) AllowMechanism(mechanism string) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(observer).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(mechanism)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "DBusAuthObserver")
	_gret := _info.InvokeClassMethod("allow_mechanism", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(observer)
	runtime.KeepAlive(mechanism)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// AuthorizeAuthenticatedPeer emits the
// BusAuthObserver::authorize-authenticated-peer signal on observer.
//
// The function takes the following parameters:
//
//    - stream for the BusConnection.
//    - credentials (optional) credentials received from the peer or NULL.
//
// The function returns the following values:
//
//    - ok: TRUE if the peer is authorized, FALSE if not.
//
func (observer *DBusAuthObserver) AuthorizeAuthenticatedPeer(stream IOStreamer, credentials *Credentials) bool {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(observer).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	if credentials != nil {
		*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(credentials).Native()))
	}

	_info := girepository.MustFind("Gio", "DBusAuthObserver")
	_gret := _info.InvokeClassMethod("authorize_authenticated_peer", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(observer)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(credentials)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
