// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gio2_SocketListenerClass_changed(GSocketListener*);
import "C"

// glib.Type values for gsocketlistener.go.
var GTypeSocketListener = coreglib.Type(C.g_socket_listener_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeSocketListener, F: marshalSocketListener},
	})
}

// SocketListenerOverrider contains methods that are overridable.
type SocketListenerOverrider interface {
	Changed()
}

// SocketListener is an object that keeps track of a set of server sockets and
// helps you accept sockets from any of the socket, either sync or async.
//
// Add addresses and ports to listen on using g_socket_listener_add_address()
// and g_socket_listener_add_inet_port(). These will be listened on until
// g_socket_listener_close() is called. Dropping your final reference to the
// Listener will not cause g_socket_listener_close() to be called implicitly, as
// some references to the Listener may be held internally.
//
// If you want to implement a network server, also look at Service and
// SocketService which are subclasses of Listener that make this even easier.
type SocketListener struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SocketListener)(nil)
)

func classInitSocketListenerer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GSocketListenerClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GSocketListenerClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Changed() }); ok {
		pclass.changed = (*[0]byte)(C._gotk4_gio2_SocketListenerClass_changed)
	}
}

//export _gotk4_gio2_SocketListenerClass_changed
func _gotk4_gio2_SocketListenerClass_changed(arg0 *C.GSocketListener) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Changed() })

	iface.Changed()
}

func wrapSocketListener(obj *coreglib.Object) *SocketListener {
	return &SocketListener{
		Object: obj,
	}
}

func marshalSocketListener(p uintptr) (interface{}, error) {
	return wrapSocketListener(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSocketListener creates a new Listener with no sockets to listen for. New
// listeners can be added with e.g. g_socket_listener_add_address() or
// g_socket_listener_add_inet_port().
//
// The function returns the following values:
//
//    - socketListener: new Listener.
//
func NewSocketListener() *SocketListener {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("new_SocketListener", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _socketListener *SocketListener // out

	_socketListener = wrapSocketListener(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _socketListener
}

// Accept blocks waiting for a client to connect to any of the sockets added to
// the listener. Returns a Connection for the socket that was accepted.
//
// If source_object is not NULL it will be filled out with the source object
// specified when the corresponding socket or address was added to the listener.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - sourceObject (optional): location where #GObject pointer will be stored,
//      or NULL.
//    - socketConnection on success, NULL on error.
//
func (listener *SocketListener) Accept(ctx context.Context) (*coreglib.Object, *SocketConnection, error) {
	var args [2]girepository.Argument
	var outs [1]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _out0 *C.void // in
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**SocketListener)(unsafe.Pointer(&args[0])) = _arg0
	*(*context.Context)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("accept", args[:], outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(listener)
	runtime.KeepAlive(ctx)

	var _sourceObject *coreglib.Object      // out
	var _socketConnection *SocketConnection // out
	var _goerr error                        // out

	if _out0 != nil {
		_sourceObject = coreglib.Take(unsafe.Pointer(_out0))
	}
	_socketConnection = wrapSocketConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _sourceObject, _socketConnection, _goerr
}

// AcceptFinish finishes an async accept operation. See
// g_socket_listener_accept_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - sourceObject (optional): optional #GObject identifying this source.
//    - socketConnection on success, NULL on error.
//
func (listener *SocketListener) AcceptFinish(result AsyncResulter) (*coreglib.Object, *SocketConnection, error) {
	var args [2]girepository.Argument
	var outs [1]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _out0 *C.void // in
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**SocketListener)(unsafe.Pointer(&args[1])) = _arg1
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("accept_finish", args[:], outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(listener)
	runtime.KeepAlive(result)

	var _sourceObject *coreglib.Object      // out
	var _socketConnection *SocketConnection // out
	var _goerr error                        // out

	if _out0 != nil {
		_sourceObject = coreglib.Take(unsafe.Pointer(_out0))
	}
	_socketConnection = wrapSocketConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _sourceObject, _socketConnection, _goerr
}

// AcceptSocket blocks waiting for a client to connect to any of the sockets
// added to the listener. Returns the #GSocket that was accepted.
//
// If you want to accept the high-level Connection, not a #GSocket, which is
// often the case, then you should use g_socket_listener_accept() instead.
//
// If source_object is not NULL it will be filled out with the source object
// specified when the corresponding socket or address was added to the listener.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - sourceObject (optional): location where #GObject pointer will be stored,
//      or NULL.
//    - socket on success, NULL on error.
//
func (listener *SocketListener) AcceptSocket(ctx context.Context) (*coreglib.Object, *Socket, error) {
	var args [2]girepository.Argument
	var outs [1]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _out0 *C.void // in
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**SocketListener)(unsafe.Pointer(&args[0])) = _arg0
	*(*context.Context)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("accept_socket", args[:], outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(listener)
	runtime.KeepAlive(ctx)

	var _sourceObject *coreglib.Object // out
	var _socket *Socket                // out
	var _goerr error                   // out

	if _out0 != nil {
		_sourceObject = coreglib.Take(unsafe.Pointer(_out0))
	}
	_socket = wrapSocket(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _sourceObject, _socket, _goerr
}

// AcceptSocketFinish finishes an async accept operation. See
// g_socket_listener_accept_socket_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - sourceObject (optional): optional #GObject identifying this source.
//    - socket on success, NULL on error.
//
func (listener *SocketListener) AcceptSocketFinish(result AsyncResulter) (*coreglib.Object, *Socket, error) {
	var args [2]girepository.Argument
	var outs [1]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _out0 *C.void // in
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**SocketListener)(unsafe.Pointer(&args[1])) = _arg1
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("accept_socket_finish", args[:], outs[:])
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(listener)
	runtime.KeepAlive(result)

	var _sourceObject *coreglib.Object // out
	var _socket *Socket                // out
	var _goerr error                   // out

	if _out0 != nil {
		_sourceObject = coreglib.Take(unsafe.Pointer(_out0))
	}
	_socket = wrapSocket(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _sourceObject, _socket, _goerr
}

// AddAnyInetPort listens for TCP connections on any available port number for
// both IPv6 and IPv4 (if each is available).
//
// This is useful if you need to have a socket for incoming connections but
// don't care about the specific port number.
//
// source_object will be passed out in the various calls to accept to identify
// this particular source, which is useful if you're listening on multiple
// addresses and do different things depending on what address is connected to.
//
// The function takes the following parameters:
//
//    - sourceObject (optional): optional #GObject identifying this source.
//
// The function returns the following values:
//
//    - guint16: port number, or 0 in case of failure.
//
func (listener *SocketListener) AddAnyInetPort(sourceObject *coreglib.Object) (uint16, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _cret C.guint16 // in
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	if sourceObject != nil {
		_arg1 = (*C.void)(unsafe.Pointer(sourceObject.Native()))
	}
	*(**SocketListener)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "SocketListener").InvokeMethod("add_any_inet_port", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(listener)
	runtime.KeepAlive(sourceObject)

	var _guint16 uint16 // out
	var _goerr error    // out

	_guint16 = uint16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint16, _goerr
}

// AddInetPort: helper function for g_socket_listener_add_address() that creates
// a TCP/IP socket listening on IPv4 and IPv6 (if supported) on the specified
// port on all interfaces.
//
// source_object will be passed out in the various calls to accept to identify
// this particular source, which is useful if you're listening on multiple
// addresses and do different things depending on what address is connected to.
//
// Call g_socket_listener_close() to stop listening on port; this will not be
// done automatically when you drop your final reference to listener, as
// references may be held internally.
//
// The function takes the following parameters:
//
//    - port: IP port number (non-zero).
//    - sourceObject (optional): optional #GObject identifying this source.
//
func (listener *SocketListener) AddInetPort(port uint16, sourceObject *coreglib.Object) error {
	var args [3]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 C.guint16 // out
	var _arg2 *C.void   // out
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	_arg1 = C.guint16(port)
	if sourceObject != nil {
		_arg2 = (*C.void)(unsafe.Pointer(sourceObject.Native()))
	}
	*(**SocketListener)(unsafe.Pointer(&args[1])) = _arg1
	*(*uint16)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gio", "SocketListener").InvokeMethod("add_inet_port", args[:], nil)

	runtime.KeepAlive(listener)
	runtime.KeepAlive(port)
	runtime.KeepAlive(sourceObject)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AddSocket adds socket to the set of sockets that we try to accept new clients
// from. The socket must be bound to a local address and listened to.
//
// source_object will be passed out in the various calls to accept to identify
// this particular source, which is useful if you're listening on multiple
// addresses and do different things depending on what address is connected to.
//
// The socket will not be automatically closed when the listener is finalized
// unless the listener held the final reference to the socket. Before GLib 2.42,
// the socket was automatically closed on finalization of the listener, even if
// references to it were held elsewhere.
//
// The function takes the following parameters:
//
//    - socket: listening #GSocket.
//    - sourceObject (optional): optional #GObject identifying this source.
//
func (listener *SocketListener) AddSocket(socket *Socket, sourceObject *coreglib.Object) error {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(socket).Native()))
	if sourceObject != nil {
		_arg2 = (*C.void)(unsafe.Pointer(sourceObject.Native()))
	}
	*(**SocketListener)(unsafe.Pointer(&args[1])) = _arg1
	*(**Socket)(unsafe.Pointer(&args[2])) = _arg2

	girepository.MustFind("Gio", "SocketListener").InvokeMethod("add_socket", args[:], nil)

	runtime.KeepAlive(listener)
	runtime.KeepAlive(socket)
	runtime.KeepAlive(sourceObject)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Close closes all the sockets in the listener.
func (listener *SocketListener) Close() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(listener).Native()))
	*(**SocketListener)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gio", "SocketListener").InvokeMethod("close", args[:], nil)

	runtime.KeepAlive(listener)
}
