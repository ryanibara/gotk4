// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_AsyncReadyCallback(void*, void*, gpointer);
// extern void* _gotk4_gio2_LoadableIconIface_load(void*, int, void**, void*, GError**);
// extern void* _gotk4_gio2_LoadableIconIface_load_finish(void*, void*, void**, GError**);
import "C"

// GTypeLoadableIcon returns the GType for the type LoadableIcon.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeLoadableIcon() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "LoadableIcon").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalLoadableIcon)
	return gtype
}

// LoadableIcon extends the #GIcon interface and adds the ability to load icons
// from streams.
//
// LoadableIcon wraps an interface. This means the user can get the
// underlying type by calling Cast().
type LoadableIcon struct {
	_ [0]func() // equal guard
	Icon
}

var ()

// LoadableIconner describes LoadableIcon's interface methods.
type LoadableIconner interface {
	coreglib.Objector

	// Load loads a loadable icon.
	Load(ctx context.Context, size int32) (string, InputStreamer, error)
	// LoadAsync loads an icon asynchronously.
	LoadAsync(ctx context.Context, size int32, callback AsyncReadyCallback)
	// LoadFinish finishes an asynchronous icon load started in
	// g_loadable_icon_load_async().
	LoadFinish(res AsyncResulter) (string, InputStreamer, error)
}

var _ LoadableIconner = (*LoadableIcon)(nil)

func wrapLoadableIcon(obj *coreglib.Object) *LoadableIcon {
	return &LoadableIcon{
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalLoadableIcon(p uintptr) (interface{}, error) {
	return wrapLoadableIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Load loads a loadable icon. For the asynchronous version of this function,
// see g_loadable_icon_load_async().
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - size: integer.
//
// The function returns the following values:
//
//    - typ (optional): location to store the type of the loaded icon, NULL to
//      ignore.
//    - inputStream to read the icon from.
//
func (icon *LoadableIcon) Load(ctx context.Context, size int32) (string, InputStreamer, error) {
	var _args [3]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[2] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(size)

	_info := girepository.MustFind("Gio", "LoadableIcon")
	_gret := _info.InvokeIfaceMethod("load", _args[:], _outs[:])
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(size)

	var _typ string                // out
	var _inputStream InputStreamer // out
	var _goerr error               // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_typ = C.GoString((*C.gchar)(unsafe.Pointer(_outs[0])))
		defer C.free(unsafe.Pointer(_outs[0]))
	}
	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(InputStreamer)
			return ok
		})
		rv, ok := casted.(InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _typ, _inputStream, _goerr
}

// LoadAsync loads an icon asynchronously. To finish this function, see
// g_loadable_icon_load_finish(). For the synchronous, blocking version of this
// function, see g_loadable_icon_load().
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - size: integer.
//    - callback (optional) to call when the request is satisfied.
//
func (icon *LoadableIcon) LoadAsync(ctx context.Context, size int32, callback AsyncReadyCallback) {
	var _args [5]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_args[2] = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(size)
	if callback != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[3])) = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_args[4] = C.gpointer(gbox.AssignOnce(callback))
	}

	_info := girepository.MustFind("Gio", "LoadableIcon")
	_info.InvokeIfaceMethod("load_async", _args[:], nil)

	runtime.KeepAlive(icon)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(size)
	runtime.KeepAlive(callback)
}

// LoadFinish finishes an asynchronous icon load started in
// g_loadable_icon_load_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
// The function returns the following values:
//
//    - typ (optional): location to store the type of the loaded icon, NULL to
//      ignore.
//    - inputStream to read the icon from.
//
func (icon *LoadableIcon) LoadFinish(res AsyncResulter) (string, InputStreamer, error) {
	var _args [2]girepository.Argument
	var _outs [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))

	_info := girepository.MustFind("Gio", "LoadableIcon")
	_gret := _info.InvokeIfaceMethod("load_finish", _args[:], _outs[:])
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)
	runtime.KeepAlive(res)

	var _typ string                // out
	var _inputStream InputStreamer // out
	var _goerr error               // out

	if *(**C.void)(unsafe.Pointer(&_outs[0])) != nil {
		_typ = C.GoString((*C.gchar)(unsafe.Pointer(_outs[0])))
		defer C.free(unsafe.Pointer(_outs[0]))
	}
	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(InputStreamer)
			return ok
		})
		rv, ok := casted.(InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _typ, _inputStream, _goerr
}
