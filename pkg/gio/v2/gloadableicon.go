// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern GInputStream* _gotk4_gio2_LoadableIconIface_load_finish(GLoadableIcon*, GAsyncResult*, char**, GError**);
import "C"

// glib.Type values for gloadableicon.go.
var GTypeLoadableIcon = coreglib.Type(C.g_loadable_icon_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeLoadableIcon, F: marshalLoadableIcon},
	})
}

// LoadableIconOverrider contains methods that are overridable.
type LoadableIconOverrider interface {
	// LoadFinish finishes an asynchronous icon load started in
	// g_loadable_icon_load_async().
	//
	// The function takes the following parameters:
	//
	//    - res: Result.
	//
	// The function returns the following values:
	//
	//    - typ (optional): location to store the type of the loaded icon, NULL
	//      to ignore.
	//    - inputStream to read the icon from.
	//
	LoadFinish(res AsyncResulter) (string, InputStreamer, error)
}

// LoadableIcon extends the #GIcon interface and adds the ability to load icons
// from streams.
//
// LoadableIcon wraps an interface. This means the user can get the
// underlying type by calling Cast().
type LoadableIcon struct {
	_ [0]func() // equal guard
	Icon
}

var ()

// LoadableIconner describes LoadableIcon's interface methods.
type LoadableIconner interface {
	coreglib.Objector

	// LoadFinish finishes an asynchronous icon load started in
	// g_loadable_icon_load_async().
	LoadFinish(res AsyncResulter) (string, InputStreamer, error)
}

var _ LoadableIconner = (*LoadableIcon)(nil)

func ifaceInitLoadableIconner(gifacePtr, data C.gpointer) {
	iface := (*C.GLoadableIconIface)(unsafe.Pointer(gifacePtr))
	iface.load_finish = (*[0]byte)(C._gotk4_gio2_LoadableIconIface_load_finish)
}

//export _gotk4_gio2_LoadableIconIface_load_finish
func _gotk4_gio2_LoadableIconIface_load_finish(arg0 *C.GLoadableIcon, arg1 *C.GAsyncResult, arg2 **C.char, _cerr **C.GError) (cret *C.GInputStream) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(LoadableIconOverrider)

	var _res AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_res = rv
	}

	typ, inputStream, _goerr := iface.LoadFinish(_res)

	if typ != "" {
		*arg2 = (*C.void)(unsafe.Pointer(C.CString(typ)))
	}
	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(inputStream).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(inputStream).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

func wrapLoadableIcon(obj *coreglib.Object) *LoadableIcon {
	return &LoadableIcon{
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalLoadableIcon(p uintptr) (interface{}, error) {
	return wrapLoadableIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LoadFinish finishes an asynchronous icon load started in
// g_loadable_icon_load_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
// The function returns the following values:
//
//    - typ (optional): location to store the type of the loaded icon, NULL to
//      ignore.
//    - inputStream to read the icon from.
//
func (icon *LoadableIcon) LoadFinish(res AsyncResulter) (string, InputStreamer, error) {
	var args [2]girepository.Argument
	var outs [1]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _out0 *C.void // in
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(**LoadableIcon)(unsafe.Pointer(&args[1])) = _arg1
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)
	runtime.KeepAlive(res)

	var _typ string                // out
	var _inputStream InputStreamer // out
	var _goerr error               // out

	if _out0 != nil {
		_typ = C.GoString((*C.gchar)(unsafe.Pointer(_out0)))
		defer C.free(unsafe.Pointer(_out0))
	}
	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(InputStreamer)
			return ok
		})
		rv, ok := casted.(InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _typ, _inputStream, _goerr
}
