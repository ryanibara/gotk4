// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewInetSocketAddress creates a new SocketAddress for address and port.
//
// The function takes the following parameters:
//
//    - address: Address.
//    - port number.
//
// The function returns the following values:
//
//    - inetSocketAddress: new SocketAddress.
//
func NewInetSocketAddress(address *InetAddress, port uint16) *InetSocketAddress {
	var _arg1 *C.GInetAddress   // out
	var _arg2 C.guint16         // out
	var _cret *C.GSocketAddress // in

	_arg1 = (*C.GInetAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))
	_arg2 = C.guint16(port)

	_cret = C.g_inet_socket_address_new(_arg1, _arg2)
	runtime.KeepAlive(address)
	runtime.KeepAlive(port)

	var _inetSocketAddress *InetSocketAddress // out

	_inetSocketAddress = wrapInetSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _inetSocketAddress
}

// Address gets address's Address.
//
// The function returns the following values:
//
//    - inetAddress for address, which must be g_object_ref()'d if it will be
//      stored.
//
func (address *InetSocketAddress) Address() *InetAddress {
	var _arg0 *C.GInetSocketAddress // out
	var _cret *C.GInetAddress       // in

	_arg0 = (*C.GInetSocketAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_cret = C.g_inet_socket_address_get_address(_arg0)
	runtime.KeepAlive(address)

	var _inetAddress *InetAddress // out

	_inetAddress = wrapInetAddress(coreglib.Take(unsafe.Pointer(_cret)))

	return _inetAddress
}

// Port gets address's port.
//
// The function returns the following values:
//
//    - guint16: port for address.
//
func (address *InetSocketAddress) Port() uint16 {
	var _arg0 *C.GInetSocketAddress // out
	var _cret C.guint16             // in

	_arg0 = (*C.GInetSocketAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_cret = C.g_inet_socket_address_get_port(_arg0)
	runtime.KeepAlive(address)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}
