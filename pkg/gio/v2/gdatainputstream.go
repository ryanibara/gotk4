// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gdatainputstream.go.
var GTypeDataInputStream = coreglib.Type(C.g_data_input_stream_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeDataInputStream, F: marshalDataInputStream},
	})
}

// DataInputStreamOverrider contains methods that are overridable.
type DataInputStreamOverrider interface {
}

// DataInputStream: data input stream implements Stream and includes functions
// for reading structured data directly from a binary input stream.
type DataInputStream struct {
	_ [0]func() // equal guard
	BufferedInputStream
}

var (
	_ FilterInputStreamer = (*DataInputStream)(nil)
)

func classInitDataInputStreamer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapDataInputStream(obj *coreglib.Object) *DataInputStream {
	return &DataInputStream{
		BufferedInputStream: BufferedInputStream{
			FilterInputStream: FilterInputStream{
				InputStream: InputStream{
					Object: obj,
				},
			},
			Seekable: Seekable{
				Object: obj,
			},
		},
	}
}

func marshalDataInputStream(p uintptr) (interface{}, error) {
	return wrapDataInputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewDataInputStream creates a new data input stream for the base_stream.
//
// The function takes the following parameters:
//
//    - baseStream: Stream.
//
// The function returns the following values:
//
//    - dataInputStream: new InputStream.
//
func NewDataInputStream(baseStream InputStreamer) *DataInputStream {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(baseStream).Native()))
	*(*InputStreamer)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("new_DataInputStream", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(baseStream)

	var _dataInputStream *DataInputStream // out

	_dataInputStream = wrapDataInputStream(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dataInputStream
}

// ReadByte reads an unsigned 8-bit/1-byte value from stream.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - guint8: unsigned 8-bit/1-byte value read from the stream or 0 if an error
//      occurred.
//
func (stream *DataInputStream) ReadByte(ctx context.Context) (byte, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.guchar // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_byte", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _guint8 byte // out
	var _goerr error // out

	_guint8 = byte(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint8, _goerr
}

// ReadInt16 reads a 16-bit/2-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order() and
// g_data_input_stream_set_byte_order().
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - gint16: signed 16-bit/2-byte value read from stream or 0 if an error
//      occurred.
//
func (stream *DataInputStream) ReadInt16(ctx context.Context) (int16, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gint16 // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_int16", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _gint16 int16 // out
	var _goerr error  // out

	_gint16 = int16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gint16, _goerr
}

// ReadInt32 reads a signed 32-bit/4-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order() and
// g_data_input_stream_set_byte_order().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - gint32: signed 32-bit/4-byte value read from the stream or 0 if an error
//      occurred.
//
func (stream *DataInputStream) ReadInt32(ctx context.Context) (int32, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gint32 // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_int32", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _gint32 int32 // out
	var _goerr error  // out

	_gint32 = int32(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gint32, _goerr
}

// ReadInt64 reads a 64-bit/8-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order() and
// g_data_input_stream_set_byte_order().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - gint64: signed 64-bit/8-byte value read from stream or 0 if an error
//      occurred.
//
func (stream *DataInputStream) ReadInt64(ctx context.Context) (int64, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gint64 // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_int64", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _gint64 int64 // out
	var _goerr error  // out

	_gint64 = int64(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gint64, _goerr
}

// ReadUint16 reads an unsigned 16-bit/2-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order() and
// g_data_input_stream_set_byte_order().
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - guint16: unsigned 16-bit/2-byte value read from the stream or 0 if an
//      error occurred.
//
func (stream *DataInputStream) ReadUint16(ctx context.Context) (uint16, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _cret C.guint16 // in
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_uint16", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _guint16 uint16 // out
	var _goerr error    // out

	_guint16 = uint16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint16, _goerr
}

// ReadUint32 reads an unsigned 32-bit/4-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order() and
// g_data_input_stream_set_byte_order().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - guint32: unsigned 32-bit/4-byte value read from the stream or 0 if an
//      error occurred.
//
func (stream *DataInputStream) ReadUint32(ctx context.Context) (uint32, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _cret C.guint32 // in
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_uint32", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _guint32 uint32 // out
	var _goerr error    // out

	_guint32 = uint32(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint32, _goerr
}

// ReadUint64 reads an unsigned 64-bit/8-byte value from stream.
//
// In order to get the correct byte order for this read operation, see
// g_data_input_stream_get_byte_order().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - guint64: unsigned 64-bit/8-byte read from stream or 0 if an error
//      occurred.
//
func (stream *DataInputStream) ReadUint64(ctx context.Context) (uint64, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void   // out
	var _arg1 *C.void   // out
	var _cret C.guint64 // in
	var _cerr *C.void   // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DataInputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DataInputStream").InvokeMethod("read_uint64", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _guint64 uint64 // out
	var _goerr error    // out

	_guint64 = uint64(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint64, _goerr
}
