// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// glib.Type values for gnativevolumemonitor.go.
var GTypeNativeVolumeMonitor = externglib.Type(C.g_native_volume_monitor_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeNativeVolumeMonitor, F: marshalNativeVolumeMonitor},
	})
}

const NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor"

// NativeVolumeMonitorOverrider contains methods that are overridable.
type NativeVolumeMonitorOverrider interface {
}

type NativeVolumeMonitor struct {
	_ [0]func() // equal guard
	VolumeMonitor
}

var (
	_ externglib.Objector = (*NativeVolumeMonitor)(nil)
)

// NativeVolumeMonitorrer describes types inherited from class NativeVolumeMonitor.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type NativeVolumeMonitorrer interface {
	externglib.Objector
	baseNativeVolumeMonitor() *NativeVolumeMonitor
}

var _ NativeVolumeMonitorrer = (*NativeVolumeMonitor)(nil)

func classInitNativeVolumeMonitorrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNativeVolumeMonitor(obj *externglib.Object) *NativeVolumeMonitor {
	return &NativeVolumeMonitor{
		VolumeMonitor: VolumeMonitor{
			Object: obj,
		},
	}
}

func marshalNativeVolumeMonitor(p uintptr) (interface{}, error) {
	return wrapNativeVolumeMonitor(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *NativeVolumeMonitor) baseNativeVolumeMonitor() *NativeVolumeMonitor {
	return v
}

// BaseNativeVolumeMonitor returns the underlying base object.
func BaseNativeVolumeMonitor(obj NativeVolumeMonitorrer) *NativeVolumeMonitor {
	return obj.baseNativeVolumeMonitor()
}
