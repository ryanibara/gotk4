// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Name gets task’s name. See g_task_set_name().
//
// The function returns the following values:
//
//    - utf8 (optional) task’s name, or NULL.
//
func (task *Task) Name() string {
	var _arg0 *C.GTask // out
	var _cret *C.gchar // in

	_arg0 = (*C.GTask)(unsafe.Pointer(coreglib.InternObject(task).Native()))

	_cret = C.g_task_get_name(_arg0)
	runtime.KeepAlive(task)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetName sets task’s name, used in debugging and profiling. The name defaults
// to NULL.
//
// The task name should describe in a human readable way what the task does. For
// example, ‘Open file’ or ‘Connect to network host’. It is used to set the name
// of the #GSource used for idle completion of the task.
//
// This function may only be called before the task is first used in a thread
// other than the one it was constructed in.
//
// The function takes the following parameters:
//
//    - name (optional): human readable name for the task, or NULL to unset it.
//
func (task *Task) SetName(name string) {
	var _arg0 *C.GTask // out
	var _arg1 *C.gchar // out

	_arg0 = (*C.GTask)(unsafe.Pointer(coreglib.InternObject(task).Native()))
	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.g_task_set_name(_arg0, _arg1)
	runtime.KeepAlive(task)
	runtime.KeepAlive(name)
}
