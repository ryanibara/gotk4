// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// RegisterObject: version of g_dbus_connection_register_object() using closures
// instead of a BusInterfaceVTable for easier binding in other languages.
//
// The function takes the following parameters:
//
//    - objectPath: object path to register at.
//    - interfaceInfo: introspection data for the interface.
//    - methodCallClosure (optional) for handling incoming method calls.
//    - getPropertyClosure (optional) for getting a property.
//    - setPropertyClosure (optional) for setting a property.
//
// The function returns the following values:
//
//    - guint: 0 if error is set, otherwise a registration ID (never 0) that can
//      be used with g_dbus_connection_unregister_object() .
//
func (connection *DBusConnection) RegisterObject(objectPath string, interfaceInfo *DBusInterfaceInfo, methodCallClosure, getPropertyClosure, setPropertyClosure coreglib.AnyClosure) (uint, error) {
	var _arg0 *C.GDBusConnection    // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.GDBusInterfaceInfo // out
	var _arg3 *C.GClosure           // out
	var _arg4 *C.GClosure           // out
	var _arg5 *C.GClosure           // out
	var _cret C.guint               // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GDBusConnection)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GDBusInterfaceInfo)(gextras.StructNative(unsafe.Pointer(interfaceInfo)))
	_arg3 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), methodCallClosure))
	_arg4 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), getPropertyClosure))
	_arg5 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), setPropertyClosure))

	_cret = C.g_dbus_connection_register_object_with_closures(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(connection)
	runtime.KeepAlive(objectPath)
	runtime.KeepAlive(interfaceInfo)
	runtime.KeepAlive(methodCallClosure)
	runtime.KeepAlive(getPropertyClosure)
	runtime.KeepAlive(setPropertyClosure)

	var _guint uint  // out
	var _goerr error // out

	_guint = uint(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint, _goerr
}
