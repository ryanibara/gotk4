// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

//export _gotk4_gio2_CancellableSourceFunc
func _gotk4_gio2_CancellableSourceFunc(arg1 *C.GCancellable, arg2 C.gpointer) (cret C.gboolean) {
	var fn CancellableSourceFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CancellableSourceFunc)
	}

	var _cancellable context.Context // out

	if arg1 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg1))
	}

	ok := fn(_cancellable)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_PollableSourceFunc
func _gotk4_gio2_PollableSourceFunc(arg1 *C.GObject, arg2 C.gpointer) (cret C.gboolean) {
	var fn PollableSourceFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PollableSourceFunc)
	}

	var _pollableStream *coreglib.Object // out

	_pollableStream = coreglib.Take(unsafe.Pointer(arg1))

	ok := fn(_pollableStream)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
