// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gio2_OutputStreamClass_close_finish(GOutputStream*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_OutputStreamClass_close_fn(GOutputStream*, GCancellable*, GError**);
// extern gboolean _gotk4_gio2_OutputStreamClass_flush(GOutputStream*, GCancellable*, GError**);
// extern gboolean _gotk4_gio2_OutputStreamClass_flush_finish(GOutputStream*, GAsyncResult*, GError**);
// extern gssize _gotk4_gio2_OutputStreamClass_splice_finish(GOutputStream*, GAsyncResult*, GError**);
// extern gssize _gotk4_gio2_OutputStreamClass_write_finish(GOutputStream*, GAsyncResult*, GError**);
import "C"

// glib.Type values for goutputstream.go.
var GTypeOutputStream = coreglib.Type(C.g_output_stream_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeOutputStream, F: marshalOutputStream},
	})
}

// OutputStreamOverrider contains methods that are overridable.
type OutputStreamOverrider interface {
	// CloseFinish closes an output stream.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	CloseFinish(result AsyncResulter) error
	// The function takes the following parameters:
	//
	CloseFn(ctx context.Context) error
	// Flush forces a write of all user-space buffered data for the given
	// stream. Will block during the operation. Closing the stream will
	// implicitly cause a flush.
	//
	// This function is optional for inherited classes.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional): optional cancellable object.
	//
	Flush(ctx context.Context) error
	// FlushFinish finishes flushing an output stream.
	//
	// The function takes the following parameters:
	//
	//    - result: GAsyncResult.
	//
	FlushFinish(result AsyncResulter) error
	// SpliceFinish finishes an asynchronous stream splice operation.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - gssize of the number of bytes spliced. Note that if the number of
	//      bytes spliced is greater than G_MAXSSIZE, then that will be returned,
	//      and there is no way to determine the actual number of bytes spliced.
	//
	SpliceFinish(result AsyncResulter) (int, error)
	// WriteFinish finishes a stream write operation.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - gssize containing the number of bytes written to the stream.
	//
	WriteFinish(result AsyncResulter) (int, error)
}

// OutputStream has functions to write to a stream (g_output_stream_write()), to
// close a stream (g_output_stream_close()) and to flush pending writes
// (g_output_stream_flush()).
//
// To copy the content of an input stream to an output stream without manually
// handling the reads and writes, use g_output_stream_splice().
//
// See the documentation for OStream for details of thread safety of streaming
// APIs.
//
// All of these functions have async variants too.
type OutputStream struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*OutputStream)(nil)
)

// OutputStreamer describes types inherited from class OutputStream.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type OutputStreamer interface {
	coreglib.Objector
	baseOutputStream() *OutputStream
}

var _ OutputStreamer = (*OutputStream)(nil)

func classInitOutputStreamer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GOutputStreamClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GOutputStreamClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface {
		CloseFinish(result AsyncResulter) error
	}); ok {
		pclass.close_finish = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_close_finish)
	}

	if _, ok := goval.(interface {
		CloseFn(ctx context.Context) error
	}); ok {
		pclass.close_fn = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_close_fn)
	}

	if _, ok := goval.(interface {
		Flush(ctx context.Context) error
	}); ok {
		pclass.flush = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_flush)
	}

	if _, ok := goval.(interface {
		FlushFinish(result AsyncResulter) error
	}); ok {
		pclass.flush_finish = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_flush_finish)
	}

	if _, ok := goval.(interface {
		SpliceFinish(result AsyncResulter) (int, error)
	}); ok {
		pclass.splice_finish = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_splice_finish)
	}

	if _, ok := goval.(interface {
		WriteFinish(result AsyncResulter) (int, error)
	}); ok {
		pclass.write_finish = (*[0]byte)(C._gotk4_gio2_OutputStreamClass_write_finish)
	}
}

//export _gotk4_gio2_OutputStreamClass_close_finish
func _gotk4_gio2_OutputStreamClass_close_finish(arg0 *C.GOutputStream, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		CloseFinish(result AsyncResulter) error
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.CloseFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_OutputStreamClass_close_fn
func _gotk4_gio2_OutputStreamClass_close_fn(arg0 *C.GOutputStream, arg1 *C.GCancellable, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		CloseFn(ctx context.Context) error
	})

	var _cancellable context.Context // out

	if arg1 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg1))
	}

	_goerr := iface.CloseFn(_cancellable)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_OutputStreamClass_flush
func _gotk4_gio2_OutputStreamClass_flush(arg0 *C.GOutputStream, arg1 *C.GCancellable, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Flush(ctx context.Context) error
	})

	var _cancellable context.Context // out

	if arg1 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg1))
	}

	_goerr := iface.Flush(_cancellable)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_OutputStreamClass_flush_finish
func _gotk4_gio2_OutputStreamClass_flush_finish(arg0 *C.GOutputStream, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		FlushFinish(result AsyncResulter) error
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.FlushFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_OutputStreamClass_splice_finish
func _gotk4_gio2_OutputStreamClass_splice_finish(arg0 *C.GOutputStream, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gssize) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SpliceFinish(result AsyncResulter) (int, error)
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	gssize, _goerr := iface.SpliceFinish(_result)

	cret = C.gssize(gssize)
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_OutputStreamClass_write_finish
func _gotk4_gio2_OutputStreamClass_write_finish(arg0 *C.GOutputStream, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gssize) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		WriteFinish(result AsyncResulter) (int, error)
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	gssize, _goerr := iface.WriteFinish(_result)

	cret = C.gssize(gssize)
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

func wrapOutputStream(obj *coreglib.Object) *OutputStream {
	return &OutputStream{
		Object: obj,
	}
}

func marshalOutputStream(p uintptr) (interface{}, error) {
	return wrapOutputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (stream *OutputStream) baseOutputStream() *OutputStream {
	return stream
}

// BaseOutputStream returns the underlying base object.
func BaseOutputStream(obj OutputStreamer) *OutputStream {
	return obj.baseOutputStream()
}

// ClearPending clears the pending flag on stream.
func (stream *OutputStream) ClearPending() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("clear_pending", args[:], nil)

	runtime.KeepAlive(stream)
}

// Close closes the stream, releasing resources related to it.
//
// Once the stream is closed, all other operations will return
// G_IO_ERROR_CLOSED. Closing a stream multiple times will not return an error.
//
// Closing a stream will automatically flush any outstanding buffers in the
// stream.
//
// Streams will be automatically closed when the last reference is dropped, but
// you might want to call this function to make sure resources are released as
// early as possible.
//
// Some streams might keep the backing store of the stream (e.g. a file
// descriptor) open after the stream is closed. See the documentation for the
// individual stream for details.
//
// On failure the first error that happened will be reported, but the close
// operation will finish as much as possible. A stream that failed to close will
// still return G_IO_ERROR_CLOSED for all operations. Still, it is important to
// check and report the error to the user, otherwise there might be a loss of
// data as all data might not be written.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned. Cancelling a close will
// still leave the stream closed, but there some streams can use a faster close
// that doesn't block to e.g. check errors. On cancellation (as with any error)
// there is no guarantee that all written data will reach the target.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional cancellable object.
//
func (stream *OutputStream) Close(ctx context.Context) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("close", args[:], nil)

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CloseFinish closes an output stream.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (stream *OutputStream) CloseFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("close_finish", args[:], nil)

	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Flush forces a write of all user-space buffered data for the given stream.
// Will block during the operation. Closing the stream will implicitly cause a
// flush.
//
// This function is optional for inherited classes.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional cancellable object.
//
func (stream *OutputStream) Flush(ctx context.Context) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("flush", args[:], nil)

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// FlushFinish finishes flushing an output stream.
//
// The function takes the following parameters:
//
//    - result: GAsyncResult.
//
func (stream *OutputStream) FlushFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("flush_finish", args[:], nil)

	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// HasPending checks if an output stream has pending actions.
//
// The function returns the following values:
//
//    - ok: TRUE if stream has pending actions.
//
func (stream *OutputStream) HasPending() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("has_pending", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsClosed checks if an output stream has already been closed.
//
// The function returns the following values:
//
//    - ok: TRUE if stream is closed. FALSE otherwise.
//
func (stream *OutputStream) IsClosed() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("is_closed", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsClosing checks if an output stream is being closed. This can be used inside
// e.g. a flush implementation to see if the flush (or other i/o operation) is
// called from within the closing operation.
//
// The function returns the following values:
//
//    - ok: TRUE if stream is being closed. FALSE otherwise.
//
func (stream *OutputStream) IsClosing() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("is_closing", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPending sets stream to have actions pending. If the pending flag is
// already set or stream is closed, it will return FALSE and set error.
func (stream *OutputStream) SetPending() error {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gio", "OutputStream").InvokeMethod("set_pending", args[:], nil)

	runtime.KeepAlive(stream)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SpliceFinish finishes an asynchronous stream splice operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - gssize of the number of bytes spliced. Note that if the number of bytes
//      spliced is greater than G_MAXSSIZE, then that will be returned, and there
//      is no way to determine the actual number of bytes spliced.
//
func (stream *OutputStream) SpliceFinish(result AsyncResulter) (int, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gssize // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("splice_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _gssize int  // out
	var _goerr error // out

	_gssize = int(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gssize, _goerr
}

// WriteBytes: wrapper function for g_output_stream_write() which takes a
// #GBytes as input. This can be more convenient for use by language bindings or
// in other cases where the refcounted nature of #GBytes is helpful over a bare
// pointer interface.
//
// However, note that this function may still perform partial writes, just like
// g_output_stream_write(). If that occurs, to continue writing, you will need
// to create a new #GBytes containing just the remaining bytes, using
// g_bytes_new_from_bytes(). Passing the same #GBytes instance multiple times
// potentially can result in duplicated data in the output stream.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional cancellable object.
//    - bytes to write.
//
// The function returns the following values:
//
//    - gssize: number of bytes written, or -1 on error.
//
func (stream *OutputStream) WriteBytes(ctx context.Context, bytes *glib.Bytes) (int, error) {
	var args [3]girepository.Argument
	var _arg0 *C.void  // out
	var _arg2 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gssize // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.void)(gextras.StructNative(unsafe.Pointer(bytes)))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1
	*(*context.Context)(unsafe.Pointer(&args[2])) = _arg2

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("write_bytes", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(bytes)

	var _gssize int  // out
	var _goerr error // out

	_gssize = int(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gssize, _goerr
}

// WriteBytesFinish finishes a stream write-from-#GBytes operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - gssize containing the number of bytes written to the stream.
//
func (stream *OutputStream) WriteBytesFinish(result AsyncResulter) (int, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gssize // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("write_bytes_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _gssize int  // out
	var _goerr error // out

	_gssize = int(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gssize, _goerr
}

// WriteFinish finishes a stream write operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - gssize containing the number of bytes written to the stream.
//
func (stream *OutputStream) WriteFinish(result AsyncResulter) (int, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret C.gssize // in
	var _cerr *C.void  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**OutputStream)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "OutputStream").InvokeMethod("write_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _gssize int  // out
	var _goerr error // out

	_gssize = int(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gssize, _goerr
}
