// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gcharsetconverter.go.
var GTypeCharsetConverter = coreglib.Type(C.g_charset_converter_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCharsetConverter, F: marshalCharsetConverter},
	})
}

// CharsetConverterOverrider contains methods that are overridable.
type CharsetConverterOverrider interface {
}

// CharsetConverter is an implementation of #GConverter based on GIConv.
type CharsetConverter struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Converter
	Initable
}

var (
	_ coreglib.Objector = (*CharsetConverter)(nil)
)

func classInitCharsetConverterer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCharsetConverter(obj *coreglib.Object) *CharsetConverter {
	return &CharsetConverter{
		Object: obj,
		Converter: Converter{
			Object: obj,
		},
		Initable: Initable{
			Object: obj,
		},
	}
}

func marshalCharsetConverter(p uintptr) (interface{}, error) {
	return wrapCharsetConverter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCharsetConverter creates a new Converter.
//
// The function takes the following parameters:
//
//    - toCharset: destination charset.
//    - fromCharset: source charset.
//
// The function returns the following values:
//
//    - charsetConverter: new Converter or NULL on error.
//
func NewCharsetConverter(toCharset, fromCharset string) (*CharsetConverter, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(C.CString(toCharset)))
	defer C.free(unsafe.Pointer(_arg0))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(fromCharset)))
	defer C.free(unsafe.Pointer(_arg1))
	*(*string)(unsafe.Pointer(&args[0])) = _arg0
	*(*string)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "CharsetConverter").InvokeMethod("new_CharsetConverter", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toCharset)
	runtime.KeepAlive(fromCharset)

	var _charsetConverter *CharsetConverter // out
	var _goerr error                        // out

	_charsetConverter = wrapCharsetConverter(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _charsetConverter, _goerr
}

// NumFallbacks gets the number of fallbacks that converter has applied so far.
//
// The function returns the following values:
//
//    - guint: number of fallbacks that converter has applied.
//
func (converter *CharsetConverter) NumFallbacks() uint {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.guint // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(converter).Native()))
	*(**CharsetConverter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "CharsetConverter").InvokeMethod("get_num_fallbacks", args[:], nil)
	_cret = *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(converter)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// UseFallback gets the Converter:use-fallback property.
//
// The function returns the following values:
//
//    - ok: TRUE if fallbacks are used by converter.
//
func (converter *CharsetConverter) UseFallback() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(converter).Native()))
	*(**CharsetConverter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "CharsetConverter").InvokeMethod("get_use_fallback", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(converter)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUseFallback sets the Converter:use-fallback property.
//
// The function takes the following parameters:
//
//    - useFallback: TRUE to use fallbacks.
//
func (converter *CharsetConverter) SetUseFallback(useFallback bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(converter).Native()))
	if useFallback {
		_arg1 = C.TRUE
	}
	*(**CharsetConverter)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "CharsetConverter").InvokeMethod("set_use_fallback", args[:], nil)

	runtime.KeepAlive(converter)
	runtime.KeepAlive(useFallback)
}
