// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCharsetConverter = coreglib.Type(C.g_charset_converter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCharsetConverter, F: marshalCharsetConverter},
	})
}

// CharsetConverterOverrides contains methods that are overridable.
type CharsetConverterOverrides struct {
}

func defaultCharsetConverterOverrides(v *CharsetConverter) CharsetConverterOverrides {
	return CharsetConverterOverrides{}
}

// CharsetConverter is an implementation of #GConverter based on GIConv.
type CharsetConverter struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Converter
	Initable
}

var (
	_ coreglib.Objector = (*CharsetConverter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CharsetConverter, *CharsetConverterClass, CharsetConverterOverrides](
		GTypeCharsetConverter,
		initCharsetConverterClass,
		wrapCharsetConverter,
		defaultCharsetConverterOverrides,
	)
}

func initCharsetConverterClass(gclass unsafe.Pointer, overrides CharsetConverterOverrides, classInitFunc func(*CharsetConverterClass)) {
	if classInitFunc != nil {
		class := (*CharsetConverterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCharsetConverter(obj *coreglib.Object) *CharsetConverter {
	return &CharsetConverter{
		Object: obj,
		Converter: Converter{
			Object: obj,
		},
		Initable: Initable{
			Object: obj,
		},
	}
}

func marshalCharsetConverter(p uintptr) (interface{}, error) {
	return wrapCharsetConverter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CharsetConverterClass: instance of this type is always passed by reference.
type CharsetConverterClass struct {
	*charsetConverterClass
}

// charsetConverterClass is the struct that's finalized.
type charsetConverterClass struct {
	native *C.GCharsetConverterClass
}
