// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"runtime"
	"runtime/cgo"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gio2_SettingsClass_change_event(GSettings*, GQuark*, gint);
// extern gboolean _gotk4_gio2_SettingsClass_writable_change_event(GSettings*, GQuark);
// extern gboolean _gotk4_gio2_SettingsGetMapping(GVariant*, gpointer*, gpointer);
// extern gboolean _gotk4_gio2_Settings_ConnectChangeEvent(gpointer, gpointer, gint, guintptr);
// extern gboolean _gotk4_gio2_Settings_ConnectWritableChangeEvent(gpointer, guint, guintptr);
// extern void _gotk4_gio2_SettingsClass_changed(GSettings*, gchar*);
// extern void _gotk4_gio2_SettingsClass_writable_changed(GSettings*, gchar*);
// extern void _gotk4_gio2_Settings_ConnectChanged(gpointer, gchar*, guintptr);
// extern void _gotk4_gio2_Settings_ConnectWritableChanged(gpointer, gchar*, guintptr);
import "C"

// glib.Type values for gsettings.go.
var (
	GTypeSettingsBindFlags = externglib.Type(C.g_settings_bind_flags_get_type())
	GTypeSettings          = externglib.Type(C.g_settings_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSettingsBindFlags, F: marshalSettingsBindFlags},
		{T: GTypeSettings, F: marshalSettings},
	})
}

// SettingsBindFlags flags used when creating a binding. These flags determine
// in which direction the binding works. The default is to synchronize in both
// directions.
type SettingsBindFlags C.guint

const (
	// SettingsBindDefault: equivalent to
	// G_SETTINGS_BIND_GET|G_SETTINGS_BIND_SET.
	SettingsBindDefault SettingsBindFlags = 0b0
	// SettingsBindGet: update the #GObject property when the setting changes.
	// It is an error to use this flag if the property is not writable.
	SettingsBindGet SettingsBindFlags = 0b1
	// SettingsBindSet: update the setting when the #GObject property changes.
	// It is an error to use this flag if the property is not readable.
	SettingsBindSet SettingsBindFlags = 0b10
	// SettingsBindNoSensitivity: do not try to bind a "sensitivity" property to
	// the writability of the setting.
	SettingsBindNoSensitivity SettingsBindFlags = 0b100
	// SettingsBindGetNoChanges: when set in addition to SETTINGS_BIND_GET, set
	// the #GObject property value initially from the setting, but do not listen
	// for changes of the setting.
	SettingsBindGetNoChanges SettingsBindFlags = 0b1000
	// SettingsBindInvertBoolean: when passed to g_settings_bind(), uses a pair
	// of mapping functions that invert the boolean value when mapping between
	// the setting and the property. The setting and property must both be
	// booleans. You cannot pass this flag to g_settings_bind_with_mapping().
	SettingsBindInvertBoolean SettingsBindFlags = 0b10000
)

func marshalSettingsBindFlags(p uintptr) (interface{}, error) {
	return SettingsBindFlags(externglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for SettingsBindFlags.
func (s SettingsBindFlags) String() string {
	if s == 0 {
		return "SettingsBindFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(128)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case SettingsBindDefault:
			builder.WriteString("Default|")
		case SettingsBindGet:
			builder.WriteString("Get|")
		case SettingsBindSet:
			builder.WriteString("Set|")
		case SettingsBindNoSensitivity:
			builder.WriteString("NoSensitivity|")
		case SettingsBindGetNoChanges:
			builder.WriteString("GetNoChanges|")
		case SettingsBindInvertBoolean:
			builder.WriteString("InvertBoolean|")
		default:
			builder.WriteString(fmt.Sprintf("SettingsBindFlags(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s SettingsBindFlags) Has(other SettingsBindFlags) bool {
	return (s & other) == other
}

// SettingsBindGetMapping: type for the function that is used to convert from
// #GSettings to an object property. The value is already initialized to hold
// values of the appropriate type.
type SettingsBindGetMapping func(value *externglib.Value, variant *glib.Variant) (ok bool)

//export _gotk4_gio2_SettingsBindGetMapping
func _gotk4_gio2_SettingsBindGetMapping(arg1 *C.GValue, arg2 *C.GVariant, arg3 C.gpointer) (cret C.gboolean) {
	var fn SettingsBindGetMapping
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(SettingsBindGetMapping)
	}

	var _value *externglib.Value // out
	var _variant *glib.Variant   // out

	_value = externglib.ValueFromNative(unsafe.Pointer(arg1))
	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	C.g_variant_ref(arg2)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	ok := fn(_value, _variant)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// SettingsBindSetMapping: type for the function that is used to convert an
// object property value to a #GVariant for storing it in #GSettings.
type SettingsBindSetMapping func(value *externglib.Value, expectedType *glib.VariantType) (variant *glib.Variant)

//export _gotk4_gio2_SettingsBindSetMapping
func _gotk4_gio2_SettingsBindSetMapping(arg1 *C.GValue, arg2 *C.GVariantType, arg3 C.gpointer) (cret *C.GVariant) {
	var fn SettingsBindSetMapping
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(SettingsBindSetMapping)
	}

	var _value *externglib.Value        // out
	var _expectedType *glib.VariantType // out

	_value = externglib.ValueFromNative(unsafe.Pointer(arg1))
	_expectedType = (*glib.VariantType)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	variant := fn(_value, _expectedType)

	cret = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant)))

	return cret
}

// SettingsGetMapping: type of the function that is used to convert from a value
// stored in a #GSettings to a value that is useful to the application.
//
// If the value is successfully mapped, the result should be stored at result
// and TRUE returned. If mapping fails (for example, if value is not in the
// right format) then FALSE should be returned.
//
// If value is NULL then it means that the mapping function is being given a
// "last chance" to successfully return a valid value. TRUE must be returned in
// this case.
type SettingsGetMapping func(value *glib.Variant) (result cgo.Handle, ok bool)

//export _gotk4_gio2_SettingsGetMapping
func _gotk4_gio2_SettingsGetMapping(arg1 *C.GVariant, arg2 *C.gpointer, arg3 C.gpointer) (cret C.gboolean) {
	var fn SettingsGetMapping
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(SettingsGetMapping)
	}

	var _value *glib.Variant // out

	_value = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.g_variant_ref(arg1)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_value)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	result, ok := fn(_value)

	*arg2 = (C.gpointer)(unsafe.Pointer(result))
	if ok {
		cret = C.TRUE
	}

	return cret
}

// SettingsOverrider contains methods that are overridable.
type SettingsOverrider interface {
	externglib.Objector
	// The function takes the following parameters:
	//
	//    - keys
	//    - nKeys
	//
	// The function returns the following values:
	//
	ChangeEvent(keys *glib.Quark, nKeys int) bool
	// The function takes the following parameters:
	//
	Changed(key string)
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	WritableChangeEvent(key glib.Quark) bool
	// The function takes the following parameters:
	//
	WritableChanged(key string)
}

// WrapSettingsOverrider wraps the SettingsOverrider
// interface implementation to access the instance methods.
func WrapSettingsOverrider(obj SettingsOverrider) *Settings {
	return wrapSettings(externglib.BaseObject(obj))
}

// Settings class provides a convenient API for storing and retrieving
// application settings.
//
// Reads and writes can be considered to be non-blocking. Reading settings with
// #GSettings is typically extremely fast: on approximately the same order of
// magnitude (but slower than) a Table lookup. Writing settings is also
// extremely fast in terms of time to return to your application, but can be
// extremely expensive for other threads and other processes. Many settings
// backends (including dconf) have lazy initialisation which means in the common
// case of the user using their computer without modifying any settings a lot of
// work can be avoided. For dconf, the D-Bus service doesn't even need to be
// started in this case. For this reason, you should only ever modify #GSettings
// keys in response to explicit user action. Particular care should be paid to
// ensure that modifications are not made during startup -- for example, when
// setting the initial value of preferences widgets. The built-in
// g_settings_bind() functionality is careful not to write settings in response
// to notify signals as a result of modifications that it makes to widgets.
//
// When creating a GSettings instance, you have to specify a schema that
// describes the keys in your settings and their types and default values, as
// well as some other information.
//
// Normally, a schema has a fixed path that determines where the settings are
// stored in the conceptual global tree of settings. However, schemas can also
// be '[relocatable][gsettings-relocatable]', i.e. not equipped with a fixed
// path. This is useful e.g. when the schema describes an 'account', and you
// want to be able to store a arbitrary number of accounts.
//
// Paths must start with and end with a forward slash character ('/') and must
// not contain two sequential slash characters. Paths should be chosen based on
// a domain name associated with the program or library to which the settings
// belong. Examples of paths are "/org/gtk/settings/file-chooser/" and
// "/ca/desrt/dconf-editor/". Paths should not start with "/apps/", "/desktop/"
// or "/system/" as they often did in GConf.
//
// Unlike other configuration systems (like GConf), GSettings does not restrict
// keys to basic types like strings and numbers. GSettings stores values as
// #GVariant, and allows any Type for keys. Key names are restricted to
// lowercase characters, numbers and '-'. Furthermore, the names must begin with
// a lowercase character, must not end with a '-', and must not contain
// consecutive dashes.
//
// Similar to GConf, the default values in GSettings schemas can be localized,
// but the localized values are stored in gettext catalogs and looked up with
// the domain that is specified in the gettext-domain attribute of the
// <schemalist> or <schema> elements and the category that is specified in the
// l10n attribute of the <default> element. The string which is translated
// includes all text in the <default> element, including any surrounding
// quotation marks.
//
// The l10n attribute must be set to messages or time, and sets the [locale
// category for
// translation](https://www.gnu.org/software/gettext/manual/html_node/Aspects.html#index-locale-categories-1).
// The messages category should be used by default; use time for translatable
// date or time formats. A translation comment can be added as an XML comment
// immediately above the <default> element — it is recommended to add these
// comments to aid translators understand the meaning and implications of the
// default value. An optional translation context attribute can be set on the
// <default> element to disambiguate multiple defaults which use the same
// string.
//
// For example:
//
//    <!-- Translators: A list of words which are not allowed to be typed, in
//         GVariant serialization syntax.
//         See: https://developer.gnome.org/glib/stable/gvariant-text.html -->
//    <default l10n='messages' context='Banned words'>['bad', 'words']</default>
//
// Translations of default values must remain syntactically valid serialized
// #GVariants (e.g. retaining any surrounding quotation marks) or runtime errors
// will occur.
//
// GSettings uses schemas in a compact binary form that is created by the
// [glib-compile-schemas][glib-compile-schemas] utility. The input is a schema
// description in an XML format.
//
// A DTD for the gschema XML format can be found here: gschema.dtd
// (https://git.gnome.org/browse/glib/tree/gio/gschema.dtd)
//
// The [glib-compile-schemas][glib-compile-schemas] tool expects schema files to
// have the extension .gschema.xml.
//
// At runtime, schemas are identified by their id (as specified in the id
// attribute of the <schema> element). The convention for schema ids is to use a
// dotted name, similar in style to a D-Bus bus name, e.g.
// "org.gnome.SessionManager". In particular, if the settings are for a specific
// service that owns a D-Bus bus name, the D-Bus bus name and schema id should
// match. For schemas which deal with settings not associated with one named
// application, the id should not use StudlyCaps, e.g.
// "org.gnome.font-rendering".
//
// In addition to #GVariant types, keys can have types that have enumerated
// types. These can be described by a <choice>, <enum> or <flags> element, as
// seen in the [example][schema-enumerated]. The underlying type of such a key
// is string, but you can use g_settings_get_enum(), g_settings_set_enum(),
// g_settings_get_flags(), g_settings_set_flags() access the numeric values
// corresponding to the string value of enum and flags keys.
//
// An example for default value:
//
//    <schemalist>
//      <schema id="org.gtk.Test" path="/org/gtk/Test/" gettext-domain="test">
//
//        <key name="greeting" type="s">
//          <default l10n="messages">"Hello, earthlings"</default>
//          <summary>A greeting</summary>
//          <description>
//            Greeting of the invading martians
//          </description>
//        </key>
//
//        <key name="box" type="(ii)">
//          <default>(20,30)</default>
//        </key>
//
//        <key name="empty-string" type="s">
//          <default>""</default>
//          <summary>Empty strings have to be provided in GVariant form</summary>
//        </key>
//
//      </schema>
//    </schemalist>
//
// An example for ranges, choices and enumerated types:
//
//    <schemalist>
//
//      <enum id="org.gtk.Test.myenum">
//        <value nick="first" value="1"/>
//        <value nick="second" value="2"/>
//      </enum>
//
//      <flags id="org.gtk.Test.myflags">
//        <value nick="flag1" value="1"/>
//        <value nick="flag2" value="2"/>
//        <value nick="flag3" value="4"/>
//      </flags>
//
//      <schema id="org.gtk.Test">
//
//        <key name="key-with-range" type="i">
//          <range min="1" max="100"/>
//          <default>10</default>
//        </key>
//
//        <key name="key-with-choices" type="s">
//          <choices>
//            <choice value='Elisabeth'/>
//            <choice value='Annabeth'/>
//            <choice value='Joe'/>
//          </choices>
//          <aliases>
//            <alias value='Anna' target='Annabeth'/>
//            <alias value='Beth' target='Elisabeth'/>
//          </aliases>
//          <default>'Joe'</default>
//        </key>
//
//        <key name='enumerated-key' enum='org.gtk.Test.myenum'>
//          <default>'first'</default>
//        </key>
//
//        <key name='flags-key' flags='org.gtk.Test.myflags'>
//          <default>["flag1","flag2"]</default>
//        </key>
//      </schema>
//    </schemalist>
//
//
// Vendor overrides
//
// Default values are defined in the schemas that get installed by an
// application. Sometimes, it is necessary for a vendor or distributor to adjust
// these defaults. Since patching the XML source for the schema is inconvenient
// and error-prone, [glib-compile-schemas][glib-compile-schemas] reads so-called
// vendor override' files. These are keyfiles in the same directory as the XML
// schema sources which can override default values. The schema id serves as the
// group name in the key file, and the values are expected in serialized
// GVariant form, as in the following example:
//
//    [org.gtk.Example]
//    key1='string'
//    key2=1.5
//
// glib-compile-schemas expects schema files to have the extension
// .gschema.override.
//
//
// Binding
//
// A very convenient feature of GSettings lets you bind #GObject properties
// directly to settings, using g_settings_bind(). Once a GObject property has
// been bound to a setting, changes on either side are automatically propagated
// to the other side. GSettings handles details like mapping between GObject and
// GVariant types, and preventing infinite cycles.
//
// This makes it very easy to hook up a preferences dialog to the underlying
// settings. To make this even more convenient, GSettings looks for a boolean
// property with the name "sensitivity" and automatically binds it to the
// writability of the bound setting. If this 'magic' gets in the way, it can be
// suppressed with the SETTINGS_BIND_NO_SENSITIVITY flag.
//
//
// Relocatable schemas
//
// A relocatable schema is one with no path attribute specified on its <schema>
// element. By using g_settings_new_with_path(), a #GSettings object can be
// instantiated for a relocatable schema, assigning a path to the instance.
// Paths passed to g_settings_new_with_path() will typically be constructed
// dynamically from a constant prefix plus some form of instance identifier; but
// they must still be valid GSettings paths. Paths could also be constant and
// used with a globally installed schema originating from a dependency library.
//
// For example, a relocatable schema could be used to store geometry information
// for different windows in an application. If the schema ID was
// org.foo.MyApp.Window, it could be instantiated for paths
// /org/foo/MyApp/main/, /org/foo/MyApp/document-1/, /org/foo/MyApp/document-2/,
// etc. If any of the paths are well-known they can be specified as <child>
// elements in the parent schema, e.g.:
//
//    <schema id="org.foo.MyApp" path="/org/foo/MyApp/">
//      <child name="main" schema="org.foo.MyApp.Window"/>
//    </schema>
//
//
// Build system integration
//
// GSettings comes with autotools integration to simplify compiling and
// installing schemas. To add GSettings support to an application, add the
// following to your configure.ac:
//
//    GLIB_GSETTINGS
//
// In the appropriate Makefile.am, use the following snippet to compile and
// install the named schema:
//
//    gsettings_SCHEMAS = org.foo.MyApp.gschema.xml
//    EXTRA_DIST = $(gsettings_SCHEMAS)
//
//    GSETTINGS_RULES@
//
// No changes are needed to the build system to mark a schema XML file for
// translation. Assuming it sets the gettext-domain attribute, a schema may be
// marked for translation by adding it to POTFILES.in, assuming gettext 0.19 is
// in use (the preferred method for translation):
//
//    data/org.foo.MyApp.gschema.xml
//
// Alternatively, if intltool 0.50.1 is in use:
//
//    [type: gettext/gsettings]data/org.foo.MyApp.gschema.xml
//
// GSettings will use gettext to look up translations for the <summary> and
// <description> elements, and also any <default> elements which have a l10n
// attribute set. Translations must not be included in the .gschema.xml file by
// the build system, for example by using intltool XML rules with a
// .gschema.xml.in template.
//
// If an enumerated type defined in a C header file is to be used in a GSettings
// schema, it can either be defined manually using an <enum> element in the
// schema XML, or it can be extracted automatically from the C header. This
// approach is preferred, as it ensures the two representations are always
// synchronised. To do so, add the following to the relevant Makefile.am:
//
//    gsettings_ENUM_NAMESPACE = org.foo.MyApp
//    gsettings_ENUM_FILES = my-app-enums.h my-app-misc.h
//
// gsettings_ENUM_NAMESPACE specifies the schema namespace for the enum files,
// which are specified in gsettings_ENUM_FILES. This will generate a
// org.foo.MyApp.enums.xml file containing the extracted enums, which will be
// automatically included in the schema compilation, install and uninstall
// rules. It should not be committed to version control or included in
// EXTRA_DIST.
type Settings struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Settings)(nil)
)

func classInitSettingser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GSettingsClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GSettingsClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface {
		ChangeEvent(keys *glib.Quark, nKeys int) bool
	}); ok {
		pclass.change_event = (*[0]byte)(C._gotk4_gio2_SettingsClass_change_event)
	}

	if _, ok := goval.(interface{ Changed(key string) }); ok {
		pclass.changed = (*[0]byte)(C._gotk4_gio2_SettingsClass_changed)
	}

	if _, ok := goval.(interface{ WritableChangeEvent(key glib.Quark) bool }); ok {
		pclass.writable_change_event = (*[0]byte)(C._gotk4_gio2_SettingsClass_writable_change_event)
	}

	if _, ok := goval.(interface{ WritableChanged(key string) }); ok {
		pclass.writable_changed = (*[0]byte)(C._gotk4_gio2_SettingsClass_writable_changed)
	}
}

//export _gotk4_gio2_SettingsClass_change_event
func _gotk4_gio2_SettingsClass_change_event(arg0 *C.GSettings, arg1 *C.GQuark, arg2 C.gint) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ChangeEvent(keys *glib.Quark, nKeys int) bool
	})

	var _keys *glib.Quark // out
	var _nKeys int        // out

	_keys = (*uint32)(unsafe.Pointer(arg1))
	_nKeys = int(arg2)

	ok := iface.ChangeEvent(_keys, _nKeys)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_SettingsClass_changed
func _gotk4_gio2_SettingsClass_changed(arg0 *C.GSettings, arg1 *C.gchar) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Changed(key string) })

	var _key string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.Changed(_key)
}

//export _gotk4_gio2_SettingsClass_writable_change_event
func _gotk4_gio2_SettingsClass_writable_change_event(arg0 *C.GSettings, arg1 C.GQuark) (cret C.gboolean) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ WritableChangeEvent(key glib.Quark) bool })

	var _key glib.Quark // out

	_key = uint32(arg1)

	ok := iface.WritableChangeEvent(_key)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_SettingsClass_writable_changed
func _gotk4_gio2_SettingsClass_writable_changed(arg0 *C.GSettings, arg1 *C.gchar) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ WritableChanged(key string) })

	var _key string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.WritableChanged(_key)
}

func wrapSettings(obj *externglib.Object) *Settings {
	return &Settings{
		Object: obj,
	}
}

func marshalSettings(p uintptr) (interface{}, error) {
	return wrapSettings(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_Settings_ConnectChangeEvent
func _gotk4_gio2_Settings_ConnectChangeEvent(arg0 C.gpointer, arg1 C.gpointer, arg2 C.gint, arg3 C.guintptr) (cret C.gboolean) {
	var f func(keys []glib.Quark) (ok bool)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(keys []glib.Quark) (ok bool))
	}

	var _keys []glib.Quark // out

	{
		src := unsafe.Slice((*C.GQuark)(arg1), arg2)
		_keys = make([]glib.Quark, arg2)
		for i := 0; i < int(arg2); i++ {
			_keys[i] = uint32(src[i])
		}
	}

	ok := f(_keys)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectChangeEvent: "change-event" signal is emitted once per change event
// that affects this settings object. You should connect to this signal only if
// you are interested in viewing groups of changes before they are split out
// into multiple emissions of the "changed" signal. For most use cases it is
// more appropriate to use the "changed" signal.
//
// In the event that the change event applies to one or more specified keys,
// keys will be an array of #GQuark of length n_keys. In the event that the
// change event applies to the #GSettings object as a whole (ie: potentially
// every key has been changed) then keys will be NULL and n_keys will be 0.
//
// The default handler for this signal invokes the "changed" signal for each
// affected key. If any other connected handler returns TRUE then this default
// functionality will be suppressed.
func (settings *Settings) ConnectChangeEvent(f func(keys []glib.Quark) (ok bool)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(settings, "change-event", false, unsafe.Pointer(C._gotk4_gio2_Settings_ConnectChangeEvent), f)
}

//export _gotk4_gio2_Settings_ConnectChanged
func _gotk4_gio2_Settings_ConnectChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(key string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(key string))
	}

	var _key string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_key)
}

// ConnectChanged: "changed" signal is emitted when a key has potentially
// changed. You should call one of the g_settings_get() calls to check the new
// value.
//
// This signal supports detailed connections. You can connect to the detailed
// signal "changed::x" in order to only receive callbacks when key "x" changes.
//
// Note that settings only emits this signal if you have read key at least once
// while a signal handler was already connected for key.
func (settings *Settings) ConnectChanged(f func(key string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(settings, "changed", false, unsafe.Pointer(C._gotk4_gio2_Settings_ConnectChanged), f)
}

//export _gotk4_gio2_Settings_ConnectWritableChangeEvent
func _gotk4_gio2_Settings_ConnectWritableChangeEvent(arg0 C.gpointer, arg1 C.guint, arg2 C.guintptr) (cret C.gboolean) {
	var f func(key uint) (ok bool)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(key uint) (ok bool))
	}

	var _key uint // out

	_key = uint(arg1)

	ok := f(_key)

	if ok {
		cret = C.TRUE
	}

	return cret
}

// ConnectWritableChangeEvent: "writable-change-event" signal is emitted once
// per writability change event that affects this settings object. You should
// connect to this signal if you are interested in viewing groups of changes
// before they are split out into multiple emissions of the "writable-changed"
// signal. For most use cases it is more appropriate to use the
// "writable-changed" signal.
//
// In the event that the writability change applies only to a single key, key
// will be set to the #GQuark for that key. In the event that the writability
// change affects the entire settings object, key will be 0.
//
// The default handler for this signal invokes the "writable-changed" and
// "changed" signals for each affected key. This is done because changes in
// writability might also imply changes in value (if for example, a new
// mandatory setting is introduced). If any other connected handler returns TRUE
// then this default functionality will be suppressed.
func (settings *Settings) ConnectWritableChangeEvent(f func(key uint) (ok bool)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(settings, "writable-change-event", false, unsafe.Pointer(C._gotk4_gio2_Settings_ConnectWritableChangeEvent), f)
}

//export _gotk4_gio2_Settings_ConnectWritableChanged
func _gotk4_gio2_Settings_ConnectWritableChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(key string)
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(key string))
	}

	var _key string // out

	_key = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_key)
}

// ConnectWritableChanged: "writable-changed" signal is emitted when the
// writability of a key has potentially changed. You should call
// g_settings_is_writable() in order to determine the new status.
//
// This signal supports detailed connections. You can connect to the detailed
// signal "writable-changed::x" in order to only receive callbacks when the
// writability of "x" changes.
func (settings *Settings) ConnectWritableChanged(f func(key string)) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(settings, "writable-changed", false, unsafe.Pointer(C._gotk4_gio2_Settings_ConnectWritableChanged), f)
}

// NewSettings creates a new #GSettings object with the schema specified by
// schema_id.
//
// It is an error for the schema to not exist: schemas are an essential part of
// a program, as they provide type information. If schemas need to be
// dynamically loaded (for example, from an optional runtime dependency),
// g_settings_schema_source_lookup() can be used to test for their existence
// before loading them.
//
// Signals on the newly created #GSettings object will be dispatched via the
// thread-default Context in effect at the time of the call to g_settings_new().
// The new #GSettings will hold a reference on the context. See
// g_main_context_push_thread_default().
//
// The function takes the following parameters:
//
//    - schemaId: id of the schema.
//
// The function returns the following values:
//
//    - settings: new #GSettings object.
//
func NewSettings(schemaId string) *Settings {
	var _arg1 *C.gchar     // out
	var _cret *C.GSettings // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(schemaId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_new(_arg1)
	runtime.KeepAlive(schemaId)

	var _settings *Settings // out

	_settings = wrapSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _settings
}

// NewSettingsWithPath creates a new #GSettings object with the relocatable
// schema specified by schema_id and a given path.
//
// You only need to do this if you want to directly create a settings object
// with a schema that doesn't have a specified path of its own. That's quite
// rare.
//
// It is a programmer error to call this function for a schema that has an
// explicitly specified path.
//
// It is a programmer error if path is not a valid path. A valid path begins and
// ends with '/' and does not contain two consecutive '/' characters.
//
// The function takes the following parameters:
//
//    - schemaId: id of the schema.
//    - path to use.
//
// The function returns the following values:
//
//    - settings: new #GSettings object.
//
func NewSettingsWithPath(schemaId, path string) *Settings {
	var _arg1 *C.gchar     // out
	var _arg2 *C.gchar     // out
	var _cret *C.GSettings // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(schemaId)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_settings_new_with_path(_arg1, _arg2)
	runtime.KeepAlive(schemaId)
	runtime.KeepAlive(path)

	var _settings *Settings // out

	_settings = wrapSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _settings
}

// Apply applies any changes that have been made to the settings. This function
// does nothing unless settings is in 'delay-apply' mode; see
// g_settings_delay(). In the normal case settings are always applied
// immediately.
func (settings *Settings) Apply() {
	var _arg0 *C.GSettings // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	C.g_settings_apply(_arg0)
	runtime.KeepAlive(settings)
}

// Bind: create a binding between the key in the settings object and the
// property property of object.
//
// The binding uses the default GIO mapping functions to map between the
// settings and property values. These functions handle booleans, numeric types
// and string types in a straightforward way. Use g_settings_bind_with_mapping()
// if you need a custom mapping, or map between types that are not supported by
// the default mapping functions.
//
// Unless the flags include G_SETTINGS_BIND_NO_SENSITIVITY, this function also
// establishes a binding between the writability of key and the "sensitive"
// property of object (if object has a boolean property by that name). See
// g_settings_bind_writable() for more details about writable bindings.
//
// Note that the lifecycle of the binding is tied to object, and that you can
// have only one binding per object property. If you bind the same property
// twice on the same object, the second binding overrides the first one.
//
// The function takes the following parameters:
//
//    - key to bind.
//    - object: #GObject.
//    - property: name of the property to bind.
//    - flags for the binding.
//
func (settings *Settings) Bind(key string, object *externglib.Object, property string, flags SettingsBindFlags) {
	var _arg0 *C.GSettings         // out
	var _arg1 *C.gchar             // out
	var _arg2 C.gpointer           // out
	var _arg3 *C.gchar             // out
	var _arg4 C.GSettingsBindFlags // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.GSettingsBindFlags(flags)

	C.g_settings_bind(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
	runtime.KeepAlive(flags)
}

// BindWritable: create a binding between the writability of key in the settings
// object and the property property of object. The property must be boolean;
// "sensitive" or "visible" properties of widgets are the most likely
// candidates.
//
// Writable bindings are always uni-directional; changes of the writability of
// the setting will be propagated to the object property, not the other way.
//
// When the inverted argument is TRUE, the binding inverts the value as it
// passes from the setting to the object, i.e. property will be set to TRUE if
// the key is not writable.
//
// Note that the lifecycle of the binding is tied to object, and that you can
// have only one binding per object property. If you bind the same property
// twice on the same object, the second binding overrides the first one.
//
// The function takes the following parameters:
//
//    - key to bind.
//    - object: #GObject.
//    - property: name of a boolean property to bind.
//    - inverted: whether to 'invert' the value.
//
func (settings *Settings) BindWritable(key string, object *externglib.Object, property string, inverted bool) {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gpointer   // out
	var _arg3 *C.gchar     // out
	var _arg4 C.gboolean   // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg3))
	if inverted {
		_arg4 = C.TRUE
	}

	C.g_settings_bind_writable(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
	runtime.KeepAlive(inverted)
}

// CreateAction creates a #GAction corresponding to a given #GSettings key.
//
// The action has the same name as the key.
//
// The value of the key becomes the state of the action and the action is
// enabled when the key is writable. Changing the state of the action results in
// the key being written to. Changes to the value or writability of the key
// cause appropriate change notifications to be emitted for the action.
//
// For boolean-valued keys, action activations take no parameter and result in
// the toggling of the value. For all other types, activations take the new
// value for the key (which must have the correct type).
//
// The function takes the following parameters:
//
//    - key: name of a key in settings.
//
// The function returns the following values:
//
//    - action: new #GAction.
//
func (settings *Settings) CreateAction(key string) ActionOverrider {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GAction   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_create_action(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _action ActionOverrider // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Actioner is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(ActionOverrider)
			return ok
		})
		rv, ok := casted.(ActionOverrider)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Actioner")
		}
		_action = rv
	}

	return _action
}

// Delay changes the #GSettings object into 'delay-apply' mode. In this mode,
// changes to settings are not immediately propagated to the backend, but kept
// locally until g_settings_apply() is called.
func (settings *Settings) Delay() {
	var _arg0 *C.GSettings // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	C.g_settings_delay(_arg0)
	runtime.KeepAlive(settings)
}

// Boolean gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for booleans.
//
// It is a programmer error to give a key that isn't specified as having a
// boolean type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - ok: boolean.
//
func (settings *Settings) Boolean(key string) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_boolean(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Child creates a child settings object which has a base path of
// base-path/name, where base-path is the base path of settings.
//
// The schema for the child settings object must have been declared in the
// schema of settings using a <child> element.
//
// The function takes the following parameters:
//
//    - name of the child schema.
//
// The function returns the following values:
//
//    - ret: 'child' settings object.
//
func (settings *Settings) Child(name string) *Settings {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GSettings // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_child(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(name)

	var _ret *Settings // out

	_ret = wrapSettings(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _ret
}

// DefaultValue gets the "default value" of a key.
//
// This is the value that would be read if g_settings_reset() were to be called
// on the key.
//
// Note that this may be a different value than returned by
// g_settings_schema_key_get_default_value() if the system administrator has
// provided a default value.
//
// Comparing the return values of g_settings_get_default_value() and
// g_settings_get_value() is not sufficient for determining if a value has been
// set because the user may have explicitly set the value to something that
// happens to be equal to the default. The difference here is that if the
// default changes in the future, the user's key will still be set.
//
// This function may be useful for adding an indication to a UI of what the
// default value was before the user set it.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings.
//
// The function takes the following parameters:
//
//    - key to get the default value for.
//
// The function returns the following values:
//
//    - variant (optional): default value.
//
func (settings *Settings) DefaultValue(key string) *glib.Variant {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GVariant  // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_default_value(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _variant *glib.Variant // out

	if _cret != nil {
		_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_variant)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}

	return _variant
}

// Double gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for doubles.
//
// It is a programmer error to give a key that isn't specified as having a
// 'double' type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - gdouble: double.
//
func (settings *Settings) Double(key string) float64 {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gdouble    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_double(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Enum gets the value that is stored in settings for key and converts it to the
// enum value that it represents.
//
// In order to use this function the type of the value must be a string and it
// must be marked in the schema file as an enumerated type.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings or is not marked as an enumerated type.
//
// If the value stored in the configuration database is not a valid value for
// the enumerated type then this function will return the default value.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - gint: enum value.
//
func (settings *Settings) Enum(key string) int {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gint       // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_enum(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Flags gets the value that is stored in settings for key and converts it to
// the flags value that it represents.
//
// In order to use this function the type of the value must be an array of
// strings and it must be marked in the schema file as a flags type.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings or is not marked as a flags type.
//
// If the value stored in the configuration database is not a valid value for
// the flags type then this function will return the default value.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - guint flags value.
//
func (settings *Settings) Flags(key string) uint {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.guint      // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_flags(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// HasUnapplied returns whether the #GSettings object has any unapplied changes.
// This can only be the case if it is in 'delayed-apply' mode.
//
// The function returns the following values:
//
//    - ok: TRUE if settings has unapplied changes.
//
func (settings *Settings) HasUnapplied() bool {
	var _arg0 *C.GSettings // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.g_settings_get_has_unapplied(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Int gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 32-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int32
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - gint: integer.
//
func (settings *Settings) Int(key string) int {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gint       // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_int(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Int64 gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 64-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int64
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - gint64: 64-bit integer.
//
func (settings *Settings) Int64(key string) int64 {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gint64     // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_int64(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// Mapped gets the value that is stored at key in settings, subject to
// application-level validation/mapping.
//
// You should use this function when the application needs to perform some
// processing on the value of the key (for example, parsing). The mapping
// function performs that processing. If the function indicates that the
// processing was unsuccessful (due to a parse error, for example) then the
// mapping is tried again with another value.
//
// This allows a robust 'fall back to defaults' behaviour to be implemented
// somewhat automatically.
//
// The first value that is tried is the user's setting for the key. If the
// mapping function fails to map this value, other values may be tried in an
// unspecified order (system or site defaults, translated schema default values,
// untranslated schema default values, etc).
//
// If the mapping function fails for all possible values, one additional attempt
// is made: the mapping function is called with a NULL value. If the mapping
// function still indicates failure at this point then the application will be
// aborted.
//
// The result parameter for the mapping function is pointed to a #gpointer which
// is initially set to NULL. The same pointer is given to each invocation of
// mapping. The final value of that #gpointer is what is returned by this
// function. NULL is valid; it is returned just as any other value would be.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//    - mapping: function to map the value in the settings database to the value
//      used by the application.
//
// The function returns the following values:
//
//    - gpointer (optional): result, which may be NULL.
//
func (settings *Settings) Mapped(key string, mapping SettingsGetMapping) cgo.Handle {
	var _arg0 *C.GSettings          // out
	var _arg1 *C.gchar              // out
	var _arg2 C.GSettingsGetMapping // out
	var _arg3 C.gpointer
	var _cret C.gpointer // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*[0]byte)(C._gotk4_gio2_SettingsGetMapping)
	_arg3 = C.gpointer(gbox.Assign(mapping))
	defer gbox.Delete(uintptr(_arg3))

	_cret = C.g_settings_get_mapped(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(mapping)

	var _gpointer cgo.Handle // out

	_gpointer = (cgo.Handle)(unsafe.Pointer(_cret))

	return _gpointer
}

// Range queries the range of a key.
//
// Deprecated: Use g_settings_schema_key_get_range() instead.
//
// The function takes the following parameters:
//
//    - key to query the range of.
//
// The function returns the following values:
//
func (settings *Settings) Range(key string) *glib.Variant {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GVariant  // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_range(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	return _variant
}

// String gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for strings.
//
// It is a programmer error to give a key that isn't specified as having a
// string type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - utf8: newly-allocated string.
//
func (settings *Settings) String(key string) string {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.gchar     // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_string(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Strv: convenience variant of g_settings_get() for string arrays.
//
// It is a programmer error to give a key that isn't specified as having an
// array of strings type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - utf8s: a newly-allocated, NULL-terminated array of strings, the value
//      that is stored at key in settings.
//
func (settings *Settings) Strv(key string) []string {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret **C.gchar    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_strv(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Uint gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 32-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint32 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - guint: unsigned integer.
//
func (settings *Settings) Uint(key string) uint {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.guint      // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_uint(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Uint64 gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 64-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint64 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - guint64: 64-bit unsigned integer.
//
func (settings *Settings) Uint64(key string) uint64 {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.guint64    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_uint64(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// UserValue checks the "user value" of a key, if there is one.
//
// The user value of a key is the last value that was set by the user.
//
// After calling g_settings_reset() this function should always return NULL
// (assuming something is not wrong with the system configuration).
//
// It is possible that g_settings_get_value() will return a different value than
// this function. This can happen in the case that the user set a value for a
// key that was subsequently locked down by the system administrator -- this
// function will return the user's old value.
//
// This function may be useful for adding a "reset" option to a UI or for
// providing indication that a particular value has been changed.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings.
//
// The function takes the following parameters:
//
//    - key to get the user value for.
//
// The function returns the following values:
//
//    - variant (optional) user's value, if set.
//
func (settings *Settings) UserValue(key string) *glib.Variant {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GVariant  // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_user_value(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _variant *glib.Variant // out

	if _cret != nil {
		_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_variant)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}

	return _variant
}

// Value gets the value that is stored in settings for key.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - variant: new #GVariant.
//
func (settings *Settings) Value(key string) *glib.Variant {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret *C.GVariant  // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_value(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	return _variant
}

// IsWritable finds out if a key can be written or not.
//
// The function takes the following parameters:
//
//    - name of a key.
//
// The function returns the following values:
//
//    - ok: TRUE if the key name is writable.
//
func (settings *Settings) IsWritable(name string) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_is_writable(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(name)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ListChildren gets the list of children on settings.
//
// The list is exactly the list of strings for which it is not an error to call
// g_settings_get_child().
//
// There is little reason to call this function from "normal" code, since you
// should already know what children are in your schema. This function may still
// be useful there for introspection reasons, however.
//
// You should free the return value with g_strfreev() when you are done with it.
//
// The function returns the following values:
//
//    - utf8s: list of the children on settings, in no defined order.
//
func (settings *Settings) ListChildren() []string {
	var _arg0 *C.GSettings // out
	var _cret **C.gchar    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.g_settings_list_children(_arg0)
	runtime.KeepAlive(settings)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// ListKeys introspects the list of keys on settings.
//
// You should probably not be calling this function from "normal" code (since
// you should already know what keys are in your schema). This function is
// intended for introspection reasons.
//
// You should free the return value with g_strfreev() when you are done with it.
//
// Deprecated: Use g_settings_schema_list_keys() instead.
//
// The function returns the following values:
//
//    - utf8s: list of the keys on settings, in no defined order.
//
func (settings *Settings) ListKeys() []string {
	var _arg0 *C.GSettings // out
	var _cret **C.gchar    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	_cret = C.g_settings_list_keys(_arg0)
	runtime.KeepAlive(settings)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// RangeCheck checks if the given value is of the correct type and within the
// permitted range for key.
//
// Deprecated: Use g_settings_schema_key_range_check() instead.
//
// The function takes the following parameters:
//
//    - key to check.
//    - value to check.
//
// The function returns the following values:
//
//    - ok: TRUE if value is valid for key.
//
func (settings *Settings) RangeCheck(key string, value *glib.Variant) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GVariant  // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(value)))

	_cret = C.g_settings_range_check(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Reset resets key to its default value.
//
// This call resets the key, as much as possible, to its default value. That
// might be the value specified in the schema or the one set by the
// administrator.
//
// The function takes the following parameters:
//
//    - key: name of a key.
//
func (settings *Settings) Reset(key string) {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_settings_reset(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
}

// Revert reverts all non-applied changes to the settings. This function does
// nothing unless settings is in 'delay-apply' mode; see g_settings_delay(). In
// the normal case settings are always applied immediately.
//
// Change notifications will be emitted for affected keys.
func (settings *Settings) Revert() {
	var _arg0 *C.GSettings // out

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))

	C.g_settings_revert(_arg0)
	runtime.KeepAlive(settings)
}

// SetBoolean sets key in settings to value.
//
// A convenience variant of g_settings_set() for booleans.
//
// It is a programmer error to give a key that isn't specified as having a
// boolean type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetBoolean(key string, value bool) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gboolean   // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value {
		_arg2 = C.TRUE
	}

	_cret = C.g_settings_set_boolean(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetDouble sets key in settings to value.
//
// A convenience variant of g_settings_set() for doubles.
//
// It is a programmer error to give a key that isn't specified as having a
// 'double' type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetDouble(key string, value float64) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gdouble    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gdouble(value)

	_cret = C.g_settings_set_double(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetEnum looks up the enumerated type nick for value and writes it to key,
// within settings.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings or is not marked as an enumerated type, or for value not to be a
// valid value for the named type.
//
// After performing the write, accessing key directly with
// g_settings_get_string() will return the 'nick' associated with value.
//
// The function takes the following parameters:
//
//    - key: key, within settings.
//    - value: enumerated value.
//
// The function returns the following values:
//
//    - ok: TRUE, if the set succeeds.
//
func (settings *Settings) SetEnum(key string, value int) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gint       // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(value)

	_cret = C.g_settings_set_enum(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFlags looks up the flags type nicks for the bits specified by value, puts
// them in an array of strings and writes the array to key, within settings.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings or is not marked as a flags type, or for value to contain any bits
// that are not value for the named type.
//
// After performing the write, accessing key directly with g_settings_get_strv()
// will return an array of 'nicks'; one for each bit in value.
//
// The function takes the following parameters:
//
//    - key: key, within settings.
//    - value flags value.
//
// The function returns the following values:
//
//    - ok: TRUE, if the set succeeds.
//
func (settings *Settings) SetFlags(key string, value uint) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(value)

	_cret = C.g_settings_set_flags(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetInt sets key in settings to value.
//
// A convenience variant of g_settings_set() for 32-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int32
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetInt(key string, value int) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gint       // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(value)

	_cret = C.g_settings_set_int(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetInt64 sets key in settings to value.
//
// A convenience variant of g_settings_set() for 64-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int64
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetInt64(key string, value int64) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gint64     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint64(value)

	_cret = C.g_settings_set_int64(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetString sets key in settings to value.
//
// A convenience variant of g_settings_set() for strings.
//
// It is a programmer error to give a key that isn't specified as having a
// string type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetString(key, value string) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.gchar     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_settings_set_string(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetStrv sets key in settings to value.
//
// A convenience variant of g_settings_set() for string arrays. If value is
// NULL, then key is set to be the empty array.
//
// It is a programmer error to give a key that isn't specified as having an
// array of strings type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value (optional) to set it to, or NULL.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetStrv(key string, value []string) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 **C.gchar    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	{
		_arg2 = (**C.gchar)(C.calloc(C.size_t((len(value) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg2))
		{
			out := unsafe.Slice(_arg2, len(value)+1)
			var zero *C.gchar
			out[len(value)] = zero
			for i := range value {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(value[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_cret = C.g_settings_set_strv(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUint sets key in settings to value.
//
// A convenience variant of g_settings_set() for 32-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint32 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetUint(key string, value uint) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.guint      // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(value)

	_cret = C.g_settings_set_uint(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUint64 sets key in settings to value.
//
// A convenience variant of g_settings_set() for 64-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint64 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetUint64(key string, value uint64) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.guint64    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint64(value)

	_cret = C.g_settings_set_uint64(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetValue sets key in settings to value.
//
// It is a programmer error to give a key that isn't contained in the schema for
// settings or for value to have the incorrect type, per the schema.
//
// If value is floating then this function consumes the reference.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value of the correct type.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetValue(key string, value *glib.Variant) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 *C.GVariant  // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(externglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(value)))

	_cret = C.g_settings_set_value(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SettingsListRelocatableSchemas: deprecated.
//
// Deprecated: Use g_settings_schema_source_list_schemas() instead.
//
// The function returns the following values:
//
//    - utf8s: list of relocatable #GSettings schemas that are available, in no
//      defined order. The list must not be modified or freed.
//
func SettingsListRelocatableSchemas() []string {
	var _cret **C.gchar // in

	_cret = C.g_settings_list_relocatable_schemas()

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// SettingsListSchemas: deprecated.
//
// Deprecated: Use g_settings_schema_source_list_schemas() instead. If you used
// g_settings_list_schemas() to check for the presence of a particular schema,
// use g_settings_schema_source_lookup() instead of your whole loop.
//
// The function returns the following values:
//
//    - utf8s: list of #GSettings schemas that are available, in no defined
//      order. The list must not be modified or freed.
//
func SettingsListSchemas() []string {
	var _cret **C.gchar // in

	_cret = C.g_settings_list_schemas()

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// SettingsSync ensures that all pending operations are complete for the default
// backend.
//
// Writes made to a #GSettings are handled asynchronously. For this reason, it
// is very unlikely that the changes have it to disk by the time
// g_settings_set() returns.
//
// This call will block until all of the writes have made it to the backend.
// Since the mainloop is not running, no change notifications will be dispatched
// during this call (but some may be queued by the time the call is done).
func SettingsSync() {
	C.g_settings_sync()
}

// SettingsUnbind removes an existing binding for property on object.
//
// Note that bindings are automatically removed when the object is finalized, so
// it is rarely necessary to call this function.
//
// The function takes the following parameters:
//
//    - object: object.
//    - property whose binding is removed.
//
func SettingsUnbind(object *externglib.Object, property string) {
	var _arg1 C.gpointer // out
	var _arg2 *C.gchar   // out

	_arg1 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_settings_unbind(_arg1, _arg2)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
}
