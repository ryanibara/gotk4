// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// IsTcryptHiddenVolume: check to see whether the mount operation is being used
// for a TCRYPT hidden volume.
//
// The function returns the following values:
//
//    - ok: TRUE if mount operation is for hidden volume.
//
func (op *MountOperation) IsTcryptHiddenVolume() bool {
	var _arg0 *C.GMountOperation // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.g_mount_operation_get_is_tcrypt_hidden_volume(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsTcryptSystemVolume: check to see whether the mount operation is being used
// for a TCRYPT system volume.
//
// The function returns the following values:
//
//    - ok: TRUE if mount operation is for system volume.
//
func (op *MountOperation) IsTcryptSystemVolume() bool {
	var _arg0 *C.GMountOperation // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.g_mount_operation_get_is_tcrypt_system_volume(_arg0)
	runtime.KeepAlive(op)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Pim gets a PIM from the mount operation.
//
// The function returns the following values:
//
//    - guint: veraCrypt PIM within op.
//
func (op *MountOperation) Pim() uint {
	var _arg0 *C.GMountOperation // out
	var _cret C.guint            // in

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_cret = C.g_mount_operation_get_pim(_arg0)
	runtime.KeepAlive(op)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SetIsTcryptHiddenVolume sets the mount operation to use a hidden volume if
// hidden_volume is TRUE.
//
// The function takes the following parameters:
//
//    - hiddenVolume: boolean value.
//
func (op *MountOperation) SetIsTcryptHiddenVolume(hiddenVolume bool) {
	var _arg0 *C.GMountOperation // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if hiddenVolume {
		_arg1 = C.TRUE
	}

	C.g_mount_operation_set_is_tcrypt_hidden_volume(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(hiddenVolume)
}

// SetIsTcryptSystemVolume sets the mount operation to use a system volume if
// system_volume is TRUE.
//
// The function takes the following parameters:
//
//    - systemVolume: boolean value.
//
func (op *MountOperation) SetIsTcryptSystemVolume(systemVolume bool) {
	var _arg0 *C.GMountOperation // out
	var _arg1 C.gboolean         // out

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if systemVolume {
		_arg1 = C.TRUE
	}

	C.g_mount_operation_set_is_tcrypt_system_volume(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(systemVolume)
}

// SetPim sets the mount operation's PIM to pim.
//
// The function takes the following parameters:
//
//    - pim: unsigned integer.
//
func (op *MountOperation) SetPim(pim uint) {
	var _arg0 *C.GMountOperation // out
	var _arg1 C.guint            // out

	_arg0 = (*C.GMountOperation)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	_arg1 = C.guint(pim)

	C.g_mount_operation_set_pim(_arg0, _arg1)
	runtime.KeepAlive(op)
	runtime.KeepAlive(pim)
}
