// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SetOptionContextDescription adds a description to the application option
// context.
//
// See g_option_context_set_description() for more information.
//
// The function takes the following parameters:
//
//    - description (optional): string to be shown in --help output after the
//      list of options, or NULL.
//
func (application *Application) SetOptionContextDescription(description string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	if description != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.g_application_set_option_context_description(_arg0, _arg1)
	runtime.KeepAlive(application)
	runtime.KeepAlive(description)
}

// SetOptionContextParameterString sets the parameter string to be used by the
// commandline handling of application.
//
// This function registers the argument to be passed to g_option_context_new()
// when the internal Context of application is created.
//
// See g_option_context_new() for more information about parameter_string.
//
// The function takes the following parameters:
//
//    - parameterString (optional): string which is displayed in the first line
//      of --help output, after the usage summary programname [OPTION...].
//
func (application *Application) SetOptionContextParameterString(parameterString string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	if parameterString != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(parameterString)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.g_application_set_option_context_parameter_string(_arg0, _arg1)
	runtime.KeepAlive(application)
	runtime.KeepAlive(parameterString)
}

// SetOptionContextSummary adds a summary to the application option context.
//
// See g_option_context_set_summary() for more information.
//
// The function takes the following parameters:
//
//    - summary (optional): string to be shown in --help output before the list
//      of options, or NULL.
//
func (application *Application) SetOptionContextSummary(summary string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	if summary != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(summary)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.g_application_set_option_context_summary(_arg0, _arg1)
	runtime.KeepAlive(application)
	runtime.KeepAlive(summary)
}
