// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
// extern gchar* _gotk4_gio2_InetAddressClass_to_string(GInetAddress*);
import "C"

// GType values.
var (
	GTypeInetAddress = coreglib.Type(C.g_inet_address_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInetAddress, F: marshalInetAddress},
	})
}

// InetAddressOverrides contains methods that are overridable.
type InetAddressOverrides struct {
	// String converts address to string form.
	//
	// The function returns the following values:
	//
	//    - utf8: representation of address as a string, which should be freed
	//      after use.
	//
	String func() string
}

func defaultInetAddressOverrides(v *InetAddress) InetAddressOverrides {
	return InetAddressOverrides{
		String: v.str,
	}
}

// InetAddress represents an IPv4 or IPv6 internet address. Use
// g_resolver_lookup_by_name() or g_resolver_lookup_by_name_async() to look up
// the Address for a hostname. Use g_resolver_lookup_by_address() or
// g_resolver_lookup_by_address_async() to look up the hostname for a Address.
//
// To actually connect to a remote host, you will need a SocketAddress (which
// includes a Address as well as a port number).
type InetAddress struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*InetAddress)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InetAddress, *InetAddressClass, InetAddressOverrides](
		GTypeInetAddress,
		initInetAddressClass,
		wrapInetAddress,
		defaultInetAddressOverrides,
	)
}

func initInetAddressClass(gclass unsafe.Pointer, overrides InetAddressOverrides, classInitFunc func(*InetAddressClass)) {
	pclass := (*C.GInetAddressClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeInetAddress))))

	if overrides.String != nil {
		pclass.to_string = (*[0]byte)(C._gotk4_gio2_InetAddressClass_to_string)
	}

	if classInitFunc != nil {
		class := (*InetAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInetAddress(obj *coreglib.Object) *InetAddress {
	return &InetAddress{
		Object: obj,
	}
}

func marshalInetAddress(p uintptr) (interface{}, error) {
	return wrapInetAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// InetAddressClass: instance of this type is always passed by reference.
type InetAddressClass struct {
	*inetAddressClass
}

// inetAddressClass is the struct that's finalized.
type inetAddressClass struct {
	native *C.GInetAddressClass
}
