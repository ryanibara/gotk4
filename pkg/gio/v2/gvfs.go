// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gio2_VfsClass_is_active(void*);
// extern void _gotk4_gio2_VfsClass_add_writable_namespaces(void*, void*);
// extern void _gotk4_gio2_VfsClass_local_file_moved(void*, void*, void*);
// extern void _gotk4_gio2_VfsClass_local_file_removed(void*, void*);
// extern void callbackDelete(gpointer);
// extern void* _gotk4_gio2_VFSFileLookupFunc(void*, void*, gpointer);
// extern void* _gotk4_gio2_VfsClass_get_file_for_path(void*, void*);
// extern void* _gotk4_gio2_VfsClass_get_file_for_uri(void*, void*);
// extern void* _gotk4_gio2_VfsClass_parse_name(void*, void*);
// extern void** _gotk4_gio2_VfsClass_get_supported_uri_schemes(void*);
import "C"

// GTypeVFS returns the GType for the type VFS.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeVFS() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "Vfs").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalVFS)
	return gtype
}

// VFS_EXTENSION_POINT_NAME: extension point for #GVfs functionality. See
// [Extending GIO][extending-gio].
const VFS_EXTENSION_POINT_NAME = "gio-vfs"

// VFSFileLookupFunc: this function type is used by g_vfs_register_uri_scheme()
// to make it possible for a client to associate an URI scheme to a different
// #GFile implementation.
//
// The client should return a reference to the new file that has been created
// for uri, or NULL to continue with the default implementation.
type VFSFileLookupFunc func(vfs *VFS, identifier string) (file *File)

//export _gotk4_gio2_VFSFileLookupFunc
func _gotk4_gio2_VFSFileLookupFunc(arg1 *C.void, arg2 *C.void, arg3 C.gpointer) (cret *C.void) {
	var fn VFSFileLookupFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(VFSFileLookupFunc)
	}

	var _vfs *VFS          // out
	var _identifier string // out

	_vfs = wrapVFS(coreglib.Take(unsafe.Pointer(arg1)))
	_identifier = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	file := fn(_vfs, _identifier)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

// VFSOverrider contains methods that are overridable.
type VFSOverrider interface {
	// The function takes the following parameters:
	//
	AddWritableNamespaces(list *FileAttributeInfoList)
	// FileForPath gets a #GFile for path.
	//
	// The function takes the following parameters:
	//
	//    - path: string containing a VFS path.
	//
	// The function returns the following values:
	//
	//    - file: #GFile. Free the returned object with g_object_unref().
	//
	FileForPath(path string) *File
	// FileForURI gets a #GFile for uri.
	//
	// This operation never fails, but the returned object might not support any
	// I/O operation if the URI is malformed or if the URI scheme is not
	// supported.
	//
	// The function takes the following parameters:
	//
	//    - uri: string containing a URI.
	//
	// The function returns the following values:
	//
	//    - file: #GFile. Free the returned object with g_object_unref().
	//
	FileForURI(uri string) *File
	// SupportedURISchemes gets a list of URI schemes supported by vfs.
	//
	// The function returns the following values:
	//
	//    - utf8s: NULL-terminated array of strings. The returned array belongs
	//      to GIO and must not be freed or modified.
	//
	SupportedURISchemes() []string
	// IsActive checks if the VFS is active.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if construction of the vfs was successful and it is now
	//      active.
	//
	IsActive() bool
	// The function takes the following parameters:
	//
	//    - source
	//    - dest
	//
	LocalFileMoved(source, dest string)
	// The function takes the following parameters:
	//
	LocalFileRemoved(filename string)
	// ParseName: this operation never fails, but the returned object might not
	// support any I/O operations if the parse_name cannot be parsed by the
	// #GVfs module.
	//
	// The function takes the following parameters:
	//
	//    - parseName: string to be parsed by the VFS module.
	//
	// The function returns the following values:
	//
	//    - file for the given parse_name. Free the returned object with
	//      g_object_unref().
	//
	ParseName(parseName string) *File
}

// VFS: entry point for using GIO functionality.
type VFS struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*VFS)(nil)
)

func classInitVFSer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gio", "VfsClass")

	if _, ok := goval.(interface {
		AddWritableNamespaces(list *FileAttributeInfoList)
	}); ok {
		o := pclass.StructFieldOffset("add_writable_namespaces")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_add_writable_namespaces)
	}

	if _, ok := goval.(interface{ FileForPath(path string) *File }); ok {
		o := pclass.StructFieldOffset("get_file_for_path")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_get_file_for_path)
	}

	if _, ok := goval.(interface{ FileForURI(uri string) *File }); ok {
		o := pclass.StructFieldOffset("get_file_for_uri")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_get_file_for_uri)
	}

	if _, ok := goval.(interface{ SupportedURISchemes() []string }); ok {
		o := pclass.StructFieldOffset("get_supported_uri_schemes")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_get_supported_uri_schemes)
	}

	if _, ok := goval.(interface{ IsActive() bool }); ok {
		o := pclass.StructFieldOffset("is_active")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_is_active)
	}

	if _, ok := goval.(interface{ LocalFileMoved(source, dest string) }); ok {
		o := pclass.StructFieldOffset("local_file_moved")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_local_file_moved)
	}

	if _, ok := goval.(interface{ LocalFileRemoved(filename string) }); ok {
		o := pclass.StructFieldOffset("local_file_removed")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_local_file_removed)
	}

	if _, ok := goval.(interface{ ParseName(parseName string) *File }); ok {
		o := pclass.StructFieldOffset("parse_name")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_VfsClass_parse_name)
	}
}

//export _gotk4_gio2_VfsClass_add_writable_namespaces
func _gotk4_gio2_VfsClass_add_writable_namespaces(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		AddWritableNamespaces(list *FileAttributeInfoList)
	})

	var _list *FileAttributeInfoList // out

	_list = (*FileAttributeInfoList)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.g_file_attribute_info_list_ref(arg1)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_list)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	iface.AddWritableNamespaces(_list)
}

//export _gotk4_gio2_VfsClass_get_file_for_path
func _gotk4_gio2_VfsClass_get_file_for_path(arg0 *C.void, arg1 *C.void) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FileForPath(path string) *File })

	var _path string // out

	_path = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	file := iface.FileForPath(_path)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

//export _gotk4_gio2_VfsClass_get_file_for_uri
func _gotk4_gio2_VfsClass_get_file_for_uri(arg0 *C.void, arg1 *C.void) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ FileForURI(uri string) *File })

	var _uri string // out

	_uri = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	file := iface.FileForURI(_uri)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

//export _gotk4_gio2_VfsClass_get_supported_uri_schemes
func _gotk4_gio2_VfsClass_get_supported_uri_schemes(arg0 *C.void) (cret **C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SupportedURISchemes() []string })

	utf8s := iface.SupportedURISchemes()

	{
		cret = (**C.void)(C.calloc(C.size_t((len(utf8s) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(cret))
		{
			out := unsafe.Slice(cret, len(utf8s)+1)
			var zero *C.void
			out[len(utf8s)] = zero
			for i := range utf8s {
				out[i] = (*C.void)(unsafe.Pointer(C.CString(utf8s[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	return cret
}

//export _gotk4_gio2_VfsClass_is_active
func _gotk4_gio2_VfsClass_is_active(arg0 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ IsActive() bool })

	ok := iface.IsActive()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gio2_VfsClass_local_file_moved
func _gotk4_gio2_VfsClass_local_file_moved(arg0 *C.void, arg1 *C.void, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ LocalFileMoved(source, dest string) })

	var _source string // out
	var _dest string   // out

	_source = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_dest = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	iface.LocalFileMoved(_source, _dest)
}

//export _gotk4_gio2_VfsClass_local_file_removed
func _gotk4_gio2_VfsClass_local_file_removed(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ LocalFileRemoved(filename string) })

	var _filename string // out

	_filename = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.LocalFileRemoved(_filename)
}

//export _gotk4_gio2_VfsClass_parse_name
func _gotk4_gio2_VfsClass_parse_name(arg0 *C.void, arg1 *C.void) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ ParseName(parseName string) *File })

	var _parseName string // out

	_parseName = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	file := iface.ParseName(_parseName)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}

func wrapVFS(obj *coreglib.Object) *VFS {
	return &VFS{
		Object: obj,
	}
}

func marshalVFS(p uintptr) (interface{}, error) {
	return wrapVFS(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FileForPath gets a #GFile for path.
//
// The function takes the following parameters:
//
//    - path: string containing a VFS path.
//
// The function returns the following values:
//
//    - file: #GFile. Free the returned object with g_object_unref().
//
func (vfs *VFS) FileForPath(path string) *File {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("get_file_for_path", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)
	runtime.KeepAlive(path)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}

// FileForURI gets a #GFile for uri.
//
// This operation never fails, but the returned object might not support any I/O
// operation if the URI is malformed or if the URI scheme is not supported.
//
// The function takes the following parameters:
//
//    - uri: string containing a URI.
//
// The function returns the following values:
//
//    - file: #GFile. Free the returned object with g_object_unref().
//
func (vfs *VFS) FileForURI(uri string) *File {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("get_file_for_uri", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)
	runtime.KeepAlive(uri)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}

// SupportedURISchemes gets a list of URI schemes supported by vfs.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of strings. The returned array belongs to
//      GIO and must not be freed or modified.
//
func (vfs *VFS) SupportedURISchemes() []string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("get_supported_uri_schemes", _args[:], nil)
	_cret := *(***C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)

	var _utf8s []string // out

	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// IsActive checks if the VFS is active.
//
// The function returns the following values:
//
//    - ok: TRUE if construction of the vfs was successful and it is now active.
//
func (vfs *VFS) IsActive() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("is_active", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ParseName: this operation never fails, but the returned object might not
// support any I/O operations if the parse_name cannot be parsed by the #GVfs
// module.
//
// The function takes the following parameters:
//
//    - parseName: string to be parsed by the VFS module.
//
// The function returns the following values:
//
//    - file for the given parse_name. Free the returned object with
//      g_object_unref().
//
func (vfs *VFS) ParseName(parseName string) *File {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(parseName)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("parse_name", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)
	runtime.KeepAlive(parseName)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}

// RegisterURIScheme registers uri_func and parse_name_func as the #GFile URI
// and parse name lookup functions for URIs with a scheme matching scheme. Note
// that scheme is registered only within the running application, as opposed to
// desktop-wide as it happens with GVfs backends.
//
// When a #GFile is requested with an URI containing scheme (e.g. through
// g_file_new_for_uri()), uri_func will be called to allow a custom constructor.
// The implementation of uri_func should not be blocking, and must not call
// g_vfs_register_uri_scheme() or g_vfs_unregister_uri_scheme().
//
// When g_file_parse_name() is called with a parse name obtained from such file,
// parse_name_func will be called to allow the #GFile to be created again. In
// that case, it's responsibility of parse_name_func to make sure the parse name
// matches what the custom #GFile implementation returned when
// g_file_get_parse_name() was previously called. The implementation of
// parse_name_func should not be blocking, and must not call
// g_vfs_register_uri_scheme() or g_vfs_unregister_uri_scheme().
//
// It's an error to call this function twice with the same scheme. To unregister
// a custom URI scheme, use g_vfs_unregister_uri_scheme().
//
// The function takes the following parameters:
//
//    - scheme: URI scheme, e.g. "http".
//    - uriFunc (optional): FileLookupFunc.
//    - parseNameFunc (optional): FileLookupFunc.
//
// The function returns the following values:
//
//    - ok: TRUE if scheme was successfully registered, or FALSE if a handler for
//      scheme already exists.
//
func (vfs *VFS) RegisterURIScheme(scheme string, uriFunc, parseNameFunc VFSFileLookupFunc) bool {
	var _args [8]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_args[1]))
	if uriFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[2])) = (*[0]byte)(C._gotk4_gio2_VFSFileLookupFunc)
		_args[3] = C.gpointer(gbox.Assign(uriFunc))
		_args[4] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}
	if parseNameFunc != nil {
		*(*C.gpointer)(unsafe.Pointer(&_args[5])) = (*[0]byte)(C._gotk4_gio2_VFSFileLookupFunc)
		_args[6] = C.gpointer(gbox.Assign(parseNameFunc))
		_args[7] = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("register_uri_scheme", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)
	runtime.KeepAlive(scheme)
	runtime.KeepAlive(uriFunc)
	runtime.KeepAlive(parseNameFunc)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// UnregisterURIScheme unregisters the URI handler for scheme previously
// registered with g_vfs_register_uri_scheme().
//
// The function takes the following parameters:
//
//    - scheme: URI scheme, e.g. "http".
//
// The function returns the following values:
//
//    - ok: TRUE if scheme was successfully unregistered, or FALSE if a handler
//      for scheme does not exist.
//
func (vfs *VFS) UnregisterURIScheme(scheme string) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(vfs).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "Vfs")
	_gret := _info.InvokeClassMethod("unregister_uri_scheme", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(vfs)
	runtime.KeepAlive(scheme)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// VFSGetDefault gets the default #GVfs for the system.
//
// The function returns the following values:
//
//    - vfs which will be the local file system #GVfs if no other implementation
//      is available.
//
func VFSGetDefault() *VFS {
	_info := girepository.MustFind("Gio", "get_default")
	_gret := _info.Invoke(nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _vfs *VFS // out

	_vfs = wrapVFS(coreglib.Take(unsafe.Pointer(_cret)))

	return _vfs
}

// VFSGetLocal gets the local #GVfs for the system.
//
// The function returns the following values:
//
//    - vfs: #GVfs.
//
func VFSGetLocal() *VFS {
	_info := girepository.MustFind("Gio", "get_local")
	_gret := _info.Invoke(nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _vfs *VFS // out

	_vfs = wrapVFS(coreglib.Take(unsafe.Pointer(_cret)))

	return _vfs
}
