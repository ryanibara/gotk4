// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// gboolean _gotk4_gio2_Drive_virtual_is_removable(void* fnptr, GDrive* arg0) {
//   return ((gboolean (*)(GDrive*))(fnptr))(arg0);
// };
import "C"

// IsRemovable checks if the #GDrive and/or its media is considered removable by
// the user. See g_drive_is_media_removable().
//
// The function returns the following values:
//
//    - ok: TRUE if drive and/or its media is considered removable, FALSE
//      otherwise.
//
func (drive *Drive) IsRemovable() bool {
	var _arg0 *C.GDrive  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GDrive)(unsafe.Pointer(coreglib.InternObject(drive).Native()))

	_cret = C.g_drive_is_removable(_arg0)
	runtime.KeepAlive(drive)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// isRemovable checks if the #GDrive and/or its media is considered removable by
// the user. See g_drive_is_media_removable().
//
// The function returns the following values:
//
//    - ok: TRUE if drive and/or its media is considered removable, FALSE
//      otherwise.
//
func (drive *Drive) isRemovable() bool {
	gclass := (*C.GDriveIface)(coreglib.PeekParentClass(drive))
	fnarg := gclass.is_removable

	var _arg0 *C.GDrive  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GDrive)(unsafe.Pointer(coreglib.InternObject(drive).Native()))

	_cret = C._gotk4_gio2_Drive_virtual_is_removable(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(drive)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
