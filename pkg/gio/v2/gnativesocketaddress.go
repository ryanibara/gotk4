// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// glib.Type values for gnativesocketaddress.go.
var GTypeNativeSocketAddress = externglib.Type(C.g_native_socket_address_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeNativeSocketAddress, F: marshalNativeSocketAddress},
	})
}

// NativeSocketAddressOverrider contains methods that are overridable.
type NativeSocketAddressOverrider interface {
	externglib.Objector
}

// WrapNativeSocketAddressOverrider wraps the NativeSocketAddressOverrider
// interface implementation to access the instance methods.
func WrapNativeSocketAddressOverrider(obj NativeSocketAddressOverrider) *NativeSocketAddress {
	return wrapNativeSocketAddress(externglib.BaseObject(obj))
}

// NativeSocketAddress: socket address of some unknown native type.
type NativeSocketAddress struct {
	_ [0]func() // equal guard
	SocketAddress
}

var (
	_ SocketAddresser = (*NativeSocketAddress)(nil)
)

func classInitNativeSocketAddresser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNativeSocketAddress(obj *externglib.Object) *NativeSocketAddress {
	return &NativeSocketAddress{
		SocketAddress: SocketAddress{
			Object: obj,
			SocketConnectable: SocketConnectable{
				Object: obj,
			},
		},
	}
}

func marshalNativeSocketAddress(p uintptr) (interface{}, error) {
	return wrapNativeSocketAddress(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNativeSocketAddress creates a new SocketAddress for native and len.
//
// The function takes the following parameters:
//
//    - native (optional) address object.
//    - len: length of native, in bytes.
//
// The function returns the following values:
//
//    - nativeSocketAddress: new SocketAddress.
//
func NewNativeSocketAddress(native cgo.Handle, len uint) *NativeSocketAddress {
	var _arg1 C.gpointer        // out
	var _arg2 C.gsize           // out
	var _cret *C.GSocketAddress // in

	_arg1 = (C.gpointer)(unsafe.Pointer(native))
	_arg2 = C.gsize(len)

	_cret = C.g_native_socket_address_new(_arg1, _arg2)
	runtime.KeepAlive(native)
	runtime.KeepAlive(len)

	var _nativeSocketAddress *NativeSocketAddress // out

	_nativeSocketAddress = wrapNativeSocketAddress(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _nativeSocketAddress
}
