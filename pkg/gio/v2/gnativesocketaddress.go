// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gnativesocketaddress.go.
var GTypeNativeSocketAddress = coreglib.Type(C.g_native_socket_address_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeNativeSocketAddress, F: marshalNativeSocketAddress},
	})
}

// NativeSocketAddressOverrider contains methods that are overridable.
type NativeSocketAddressOverrider interface {
}

// NativeSocketAddress: socket address of some unknown native type.
type NativeSocketAddress struct {
	_ [0]func() // equal guard
	SocketAddress
}

var (
	_ SocketAddresser = (*NativeSocketAddress)(nil)
)

func classInitNativeSocketAddresser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNativeSocketAddress(obj *coreglib.Object) *NativeSocketAddress {
	return &NativeSocketAddress{
		SocketAddress: SocketAddress{
			Object: obj,
			SocketConnectable: SocketConnectable{
				Object: obj,
			},
		},
	}
}

func marshalNativeSocketAddress(p uintptr) (interface{}, error) {
	return wrapNativeSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNativeSocketAddress creates a new SocketAddress for native and len.
//
// The function takes the following parameters:
//
//    - native (optional) address object.
//    - len: length of native, in bytes.
//
// The function returns the following values:
//
//    - nativeSocketAddress: new SocketAddress.
//
func NewNativeSocketAddress(native unsafe.Pointer, len uint) *NativeSocketAddress {
	var _args [2]girepository.Argument
	var _arg0 C.gpointer // out
	var _arg1 C.gsize    // out
	var _cret *C.void    // in

	_arg0 = (C.gpointer)(unsafe.Pointer(native))
	_arg1 = C.gsize(len)

	*(*C.gpointer)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gsize)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "NativeSocketAddress").InvokeMethod("new_NativeSocketAddress", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(native)
	runtime.KeepAlive(len)

	var _nativeSocketAddress *NativeSocketAddress // out

	_nativeSocketAddress = wrapNativeSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _nativeSocketAddress
}
