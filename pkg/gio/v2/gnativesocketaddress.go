// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNativeSocketAddress = coreglib.Type(C.g_native_socket_address_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNativeSocketAddress, F: marshalNativeSocketAddress},
	})
}

// NativeSocketAddressOverrides contains methods that are overridable.
type NativeSocketAddressOverrides struct {
}

func defaultNativeSocketAddressOverrides(v *NativeSocketAddress) NativeSocketAddressOverrides {
	return NativeSocketAddressOverrides{}
}

// NativeSocketAddress: socket address of some unknown native type.
type NativeSocketAddress struct {
	_ [0]func() // equal guard
	SocketAddress
}

var (
	_ SocketAddresser = (*NativeSocketAddress)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NativeSocketAddress, *NativeSocketAddressClass, NativeSocketAddressOverrides](
		GTypeNativeSocketAddress,
		initNativeSocketAddressClass,
		wrapNativeSocketAddress,
		defaultNativeSocketAddressOverrides,
	)
}

func initNativeSocketAddressClass(gclass unsafe.Pointer, overrides NativeSocketAddressOverrides, classInitFunc func(*NativeSocketAddressClass)) {
	if classInitFunc != nil {
		class := (*NativeSocketAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNativeSocketAddress(obj *coreglib.Object) *NativeSocketAddress {
	return &NativeSocketAddress{
		SocketAddress: SocketAddress{
			Object: obj,
			SocketConnectable: SocketConnectable{
				Object: obj,
			},
		},
	}
}

func marshalNativeSocketAddress(p uintptr) (interface{}, error) {
	return wrapNativeSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNativeSocketAddress creates a new SocketAddress for native and len.
//
// The function takes the following parameters:
//
//   - native (optional) address object.
//   - len: length of native, in bytes.
//
// The function returns the following values:
//
//   - nativeSocketAddress: new SocketAddress.
//
func NewNativeSocketAddress(native unsafe.Pointer, len uint) *NativeSocketAddress {
	var _arg1 C.gpointer        // out
	var _arg2 C.gsize           // out
	var _cret *C.GSocketAddress // in

	_arg1 = (C.gpointer)(unsafe.Pointer(native))
	_arg2 = C.gsize(len)

	_cret = C.g_native_socket_address_new(_arg1, _arg2)
	runtime.KeepAlive(native)
	runtime.KeepAlive(len)

	var _nativeSocketAddress *NativeSocketAddress // out

	_nativeSocketAddress = wrapNativeSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _nativeSocketAddress
}

// NativeSocketAddressClass: instance of this type is always passed by
// reference.
type NativeSocketAddressClass struct {
	*nativeSocketAddressClass
}

// nativeSocketAddressClass is the struct that's finalized.
type nativeSocketAddressClass struct {
	native *C.GNativeSocketAddressClass
}

func (n *NativeSocketAddressClass) ParentClass() *SocketAddressClass {
	valptr := &n.native.parent_class
	var _v *SocketAddressClass // out
	_v = (*SocketAddressClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
