// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeThemedIcon returns the GType for the type ThemedIcon.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeThemedIcon() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "ThemedIcon").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalThemedIcon)
	return gtype
}

// ThemedIcon is an implementation of #GIcon that supports icon themes. Icon
// contains a list of all of the icons present in an icon theme, so that icons
// can be looked up quickly. Icon does not provide actual pixmaps for icons,
// just the icon names. Ideally something like gtk_icon_theme_choose_icon()
// should be used to resolve the list of names so that fallback icons work
// nicely with themes that inherit other themes.
type ThemedIcon struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Icon
}

var (
	_ coreglib.Objector = (*ThemedIcon)(nil)
)

func wrapThemedIcon(obj *coreglib.Object) *ThemedIcon {
	return &ThemedIcon{
		Object: obj,
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalThemedIcon(p uintptr) (interface{}, error) {
	return wrapThemedIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewThemedIcon creates a new themed icon for iconname.
//
// The function takes the following parameters:
//
//    - iconname: string containing an icon name.
//
// The function returns the following values:
//
//    - themedIcon: new Icon.
//
func NewThemedIcon(iconname string) *ThemedIcon {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(iconname)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("new_ThemedIcon", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iconname)

	var _themedIcon *ThemedIcon // out

	_themedIcon = wrapThemedIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _themedIcon
}

// NewThemedIconFromNames creates a new themed icon for iconnames.
//
// The function takes the following parameters:
//
//    - iconnames: array of strings containing icon names.
//
// The function returns the following values:
//
//    - themedIcon: new Icon.
//
func NewThemedIconFromNames(iconnames []string) *ThemedIcon {
	var _args [2]girepository.Argument

	*(*C.int)(unsafe.Pointer(&_args[1])) = (C.int)(len(iconnames))
	*(***C.void)(unsafe.Pointer(&_args[0])) = (**C.void)(C.calloc(C.size_t(len(iconnames)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_args[0]))
	{
		out := unsafe.Slice((**C.void)(*(***C.void)(unsafe.Pointer(&_args[0]))), len(iconnames))
		for i := range iconnames {
			*(**C.void)(unsafe.Pointer(&out[i])) = (*C.void)(unsafe.Pointer(C.CString(iconnames[i])))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_gret := girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("new_ThemedIcon_from_names", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iconnames)

	var _themedIcon *ThemedIcon // out

	_themedIcon = wrapThemedIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _themedIcon
}

// NewThemedIconWithDefaultFallbacks creates a new themed icon for iconname, and
// all the names that can be created by shortening iconname at '-' characters.
//
// In the following example, icon1 and icon2 are equivalent:
//
//    const char *names[] = {
//      "gnome-dev-cdrom-audio",
//      "gnome-dev-cdrom",
//      "gnome-dev",
//      "gnome"
//    };
//
//    icon1 = g_themed_icon_new_from_names (names, 4);
//    icon2 = g_themed_icon_new_with_default_fallbacks ("gnome-dev-cdrom-audio");.
//
// The function takes the following parameters:
//
//    - iconname: string containing an icon name.
//
// The function returns the following values:
//
//    - themedIcon: new Icon.
//
func NewThemedIconWithDefaultFallbacks(iconname string) *ThemedIcon {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(iconname)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("new_ThemedIcon_with_default_fallbacks", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(iconname)

	var _themedIcon *ThemedIcon // out

	_themedIcon = wrapThemedIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _themedIcon
}

// AppendName: append a name to the list of icons from within icon.
//
// Note that doing so invalidates the hash computed by prior calls to
// g_icon_hash().
//
// The function takes the following parameters:
//
//    - iconname: name of icon to append to list of icons from within icon.
//
func (icon *ThemedIcon) AppendName(iconname string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(iconname)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("append_name", _args[:], nil)

	runtime.KeepAlive(icon)
	runtime.KeepAlive(iconname)
}

// Names gets the names of icons from within icon.
//
// The function returns the following values:
//
//    - utf8s: list of icon names.
//
func (icon *ThemedIcon) Names() []string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))

	_gret := girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("get_names", _args[:], nil)
	_cret = *(***C.gchar)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)

	var _utf8s []string // out

	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// PrependName: prepend a name to the list of icons from within icon.
//
// Note that doing so invalidates the hash computed by prior calls to
// g_icon_hash().
//
// The function takes the following parameters:
//
//    - iconname: name of icon to prepend to list of icons from within icon.
//
func (icon *ThemedIcon) PrependName(iconname string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(iconname)))
	defer C.free(unsafe.Pointer(_args[1]))

	girepository.MustFind("Gio", "ThemedIcon").InvokeMethod("prepend_name", _args[:], nil)

	runtime.KeepAlive(icon)
	runtime.KeepAlive(iconname)
}
