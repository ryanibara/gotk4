// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern void _gotk4_gio2_FilenameCompleterClass_got_completion_data(void*);
// extern void _gotk4_gio2_FilenameCompleter_ConnectGotCompletionData(gpointer, guintptr);
import "C"

// glib.Type values for gfilenamecompleter.go.
var GTypeFilenameCompleter = coreglib.Type(C.g_filename_completer_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFilenameCompleter, F: marshalFilenameCompleter},
	})
}

// FilenameCompleterOverrider contains methods that are overridable.
type FilenameCompleterOverrider interface {
	GotCompletionData()
}

// FilenameCompleter completes partial file and directory names given a partial
// string by looking in the file system for clues. Can return a list of possible
// completion strings for widget implementations.
type FilenameCompleter struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FilenameCompleter)(nil)
)

func classInitFilenameCompleterer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.GFilenameCompleterClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.GFilenameCompleterClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ GotCompletionData() }); ok {
		pclass.got_completion_data = (*[0]byte)(C._gotk4_gio2_FilenameCompleterClass_got_completion_data)
	}
}

//export _gotk4_gio2_FilenameCompleterClass_got_completion_data
func _gotk4_gio2_FilenameCompleterClass_got_completion_data(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ GotCompletionData() })

	iface.GotCompletionData()
}

func wrapFilenameCompleter(obj *coreglib.Object) *FilenameCompleter {
	return &FilenameCompleter{
		Object: obj,
	}
}

func marshalFilenameCompleter(p uintptr) (interface{}, error) {
	return wrapFilenameCompleter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_FilenameCompleter_ConnectGotCompletionData
func _gotk4_gio2_FilenameCompleter_ConnectGotCompletionData(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectGotCompletionData is emitted when the file name completion information
// comes available.
func (completer *FilenameCompleter) ConnectGotCompletionData(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(completer, "got-completion-data", false, unsafe.Pointer(C._gotk4_gio2_FilenameCompleter_ConnectGotCompletionData), f)
}

// NewFilenameCompleter creates a new filename completer.
//
// The function returns the following values:
//
//    - filenameCompleter: Completer.
//
func NewFilenameCompleter() *FilenameCompleter {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gio", "FilenameCompleter").InvokeMethod("new_FilenameCompleter", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _filenameCompleter *FilenameCompleter // out

	_filenameCompleter = wrapFilenameCompleter(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _filenameCompleter
}

// CompletionSuffix obtains a completion for initial_text from completer.
//
// The function takes the following parameters:
//
//    - initialText: text to be completed.
//
// The function returns the following values:
//
//    - utf8 (optional): completed string, or NULL if no completion exists. This
//      string is not owned by GIO, so remember to g_free() it when finished.
//
func (completer *FilenameCompleter) CompletionSuffix(initialText string) string {
	var _args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(completer).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(initialText)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "FilenameCompleter").InvokeMethod("get_completion_suffix", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(completer)
	runtime.KeepAlive(initialText)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// Completions gets an array of completion strings for a given initial text.
//
// The function takes the following parameters:
//
//    - initialText: text to be completed.
//
// The function returns the following values:
//
//    - utf8s: array of strings with possible completions for initial_text. This
//      array must be freed by g_strfreev() when finished.
//
func (completer *FilenameCompleter) Completions(initialText string) []string {
	var _args [2]girepository.Argument
	var _arg0 *C.void  // out
	var _arg1 *C.void  // out
	var _cret **C.char // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(completer).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(initialText)))
	defer C.free(unsafe.Pointer(_arg1))

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(**C.void)(unsafe.Pointer(&_args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "FilenameCompleter").InvokeMethod("get_completions", _args[:], nil)
	_cret = *(***C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(completer)
	runtime.KeepAlive(initialText)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.void
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// SetDirsOnly: if dirs_only is TRUE, completer will only complete directory
// names, and not file names.
//
// The function takes the following parameters:
//
//    - dirsOnly: #gboolean.
//
func (completer *FilenameCompleter) SetDirsOnly(dirsOnly bool) {
	var _args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(completer).Native()))
	if dirsOnly {
		_arg1 = C.TRUE
	}

	*(**C.void)(unsafe.Pointer(&_args[0])) = _arg0
	*(*C.gboolean)(unsafe.Pointer(&_args[1])) = _arg1

	girepository.MustFind("Gio", "FilenameCompleter").InvokeMethod("set_dirs_only", _args[:], nil)

	runtime.KeepAlive(completer)
	runtime.KeepAlive(dirsOnly)
}
