// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// MarkBusy increases the busy count of application.
//
// Use this function to indicate that the application is busy, for instance
// while a long running operation is pending.
//
// The busy state will be exposed to other processes, so a session shell will
// use that information to indicate the state to the user (e.g. with a spinner).
//
// To cancel the busy indication, use g_application_unmark_busy().
func (application *Application) MarkBusy() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	C.g_application_mark_busy(_arg0)
	runtime.KeepAlive(application)
}

// UnmarkBusy decreases the busy count of application.
//
// When the busy count reaches zero, the new state will be propagated to other
// processes.
//
// This function must only be called to cancel the effect of a previous call to
// g_application_mark_busy().
func (application *Application) UnmarkBusy() {
	var _arg0 *C.GApplication // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	C.g_application_unmark_busy(_arg0)
	runtime.KeepAlive(application)
}
