// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// ReadLineAsync asynchronous version of g_data_input_stream_read_line(). It is
// an error to have two outstanding calls to this function.
//
// When the operation is finished, callback will be called. You can then call
// g_data_input_stream_read_line_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (stream *DataInputStream) ReadLineAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GDataInputStream   // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.gint                // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.gint(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_data_input_stream_read_line_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReadLineFinish: finish an asynchronous call started by
// g_data_input_stream_read_line_async(). Note the warning about string encoding
// in g_data_input_stream_read_line() applies here as well.
//
// The function takes the following parameters:
//
//    - result that was provided to the callback.
//
// The function returns the following values:
//
//    - length (optional) to get the length of the data read in.
//    - guint8s (optional): a NUL-terminated byte array with the line that was
//      read in (without the newlines). Set length to a #gsize to get the length
//      of the read line. On an error, it will return NULL and error will be set.
//      If there's no content to read, it will still return NULL, but error won't
//      be set.
//
func (stream *DataInputStream) ReadLineFinish(result AsyncResulter) (uint, []byte, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C.g_data_input_stream_read_line_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _length uint    // out
	var _guint8s []byte // out
	var _goerr error    // out

	_length = uint(_arg2)
	if _cret != nil {
		defer C.free(unsafe.Pointer(_cret))
		{
			var i int
			var z C.char
			for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_cret, i)
			_guint8s = make([]byte, i)
			for i := range src {
				_guint8s[i] = byte(src[i])
			}
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _guint8s, _goerr
}

// ReadUntilAsync asynchronous version of g_data_input_stream_read_until(). It
// is an error to have two outstanding calls to this function.
//
// Note that, in contrast to g_data_input_stream_read_until(), this function
// does not consume the stop character that it finds. You must read it for
// yourself.
//
// When the operation is finished, callback will be called. You can then call
// g_data_input_stream_read_until_finish() to get the result of the operation.
//
// Don't use this function in new code. Its functionality is inconsistent with
// g_data_input_stream_read_until(). Both functions will be marked as deprecated
// in a future release. Use g_data_input_stream_read_upto_async() instead.
//
// Deprecated: Use g_data_input_stream_read_upto_async() instead, which has more
// consistent behaviour regarding the stop character.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//    - stopChars characters to terminate the read.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback (optional) to call when the request is satisfied.
//
func (stream *DataInputStream) ReadUntilAsync(ctx context.Context, stopChars string, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GDataInputStream   // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.gchar              // out
	var _arg2 C.gint                // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(stopChars)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_data_input_stream_read_until_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stopChars)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReadUntilFinish: finish an asynchronous call started by
// g_data_input_stream_read_until_async().
//
// Deprecated: Use g_data_input_stream_read_upto_finish() instead, which has
// more consistent behaviour regarding the stop character.
//
// The function takes the following parameters:
//
//    - result that was provided to the callback.
//
// The function returns the following values:
//
//    - length (optional) to get the length of the data read in.
//    - utf8: string with the data that was read before encountering any of the
//      stop characters. Set length to a #gsize to get the length of the string.
//      This function will return NULL on an error.
//
func (stream *DataInputStream) ReadUntilFinish(result AsyncResulter) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C.g_data_input_stream_read_until_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _utf8, _goerr
}
