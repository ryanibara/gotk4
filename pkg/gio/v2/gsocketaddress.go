// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
// extern gssize _gotk4_gio2_SocketAddressClass_get_native_size(GSocketAddress*);
// extern gboolean _gotk4_gio2_SocketAddressClass_to_native(GSocketAddress*, gpointer, gsize, GError**);
// extern GSocketFamily _gotk4_gio2_SocketAddressClass_get_family(GSocketAddress*);
import "C"

// GType values.
var (
	GTypeSocketAddress = coreglib.Type(C.g_socket_address_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketAddress, F: marshalSocketAddress},
	})
}

// SocketAddressOverrides contains methods that are overridable.
type SocketAddressOverrides struct {
	// Family gets the socket family type of address.
	//
	// The function returns the following values:
	//
	//    - socketFamily: socket family type of address.
	//
	Family func() SocketFamily
	// NativeSize gets the size of address's native struct sockaddr. You can use
	// this to allocate memory to pass to g_socket_address_to_native().
	//
	// The function returns the following values:
	//
	//    - gssize: size of the native struct sockaddr that address represents.
	//
	NativeSize func() int
	// ToNative converts a Address to a native struct sockaddr, which can be
	// passed to low-level functions like connect() or bind().
	//
	// If not enough space is available, a G_IO_ERROR_NO_SPACE error is
	// returned. If the address type is not known on the system then a
	// G_IO_ERROR_NOT_SUPPORTED error is returned.
	//
	// The function takes the following parameters:
	//
	//    - dest (optional): pointer to a memory location that will contain the
	//      native struct sockaddr.
	//    - destlen: size of dest. Must be at least as large as
	//      g_socket_address_get_native_size().
	//
	ToNative func(dest unsafe.Pointer, destlen uint) error
}

func defaultSocketAddressOverrides(v *SocketAddress) SocketAddressOverrides {
	return SocketAddressOverrides{
		Family:     v.family,
		NativeSize: v.nativeSize,
		ToNative:   v.toNative,
	}
}

// SocketAddress is the equivalent of struct sockaddr in the BSD sockets API.
// This is an abstract class; use SocketAddress for internet sockets, or
// SocketAddress for UNIX domain sockets.
type SocketAddress struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SocketConnectable
}

var (
	_ coreglib.Objector = (*SocketAddress)(nil)
)

// SocketAddresser describes types inherited from class SocketAddress.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type SocketAddresser interface {
	coreglib.Objector
	baseSocketAddress() *SocketAddress
}

var _ SocketAddresser = (*SocketAddress)(nil)

func init() {
	coreglib.RegisterClassInfo[*SocketAddress, *SocketAddressClass, SocketAddressOverrides](
		GTypeSocketAddress,
		initSocketAddressClass,
		wrapSocketAddress,
		defaultSocketAddressOverrides,
	)
}

func initSocketAddressClass(gclass unsafe.Pointer, overrides SocketAddressOverrides, classInitFunc func(*SocketAddressClass)) {
	pclass := (*C.GSocketAddressClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeSocketAddress))))

	if overrides.Family != nil {
		pclass.get_family = (*[0]byte)(C._gotk4_gio2_SocketAddressClass_get_family)
	}

	if overrides.NativeSize != nil {
		pclass.get_native_size = (*[0]byte)(C._gotk4_gio2_SocketAddressClass_get_native_size)
	}

	if overrides.ToNative != nil {
		pclass.to_native = (*[0]byte)(C._gotk4_gio2_SocketAddressClass_to_native)
	}

	if classInitFunc != nil {
		class := (*SocketAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketAddress(obj *coreglib.Object) *SocketAddress {
	return &SocketAddress{
		Object: obj,
		SocketConnectable: SocketConnectable{
			Object: obj,
		},
	}
}

func marshalSocketAddress(p uintptr) (interface{}, error) {
	return wrapSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (address *SocketAddress) baseSocketAddress() *SocketAddress {
	return address
}

// BaseSocketAddress returns the underlying base object.
func BaseSocketAddress(obj SocketAddresser) *SocketAddress {
	return obj.baseSocketAddress()
}

// SocketAddressClass: instance of this type is always passed by reference.
type SocketAddressClass struct {
	*socketAddressClass
}

// socketAddressClass is the struct that's finalized.
type socketAddressClass struct {
	native *C.GSocketAddressClass
}
