// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// AddMainOption: add an option to be handled by application.
//
// Calling this function is the equivalent of calling
// g_application_add_main_option_entries() with a single Entry that has its
// arg_data member set to NULL.
//
// The parsed arguments will be packed into a Dict which is passed to
// #GApplication::handle-local-options. If G_APPLICATION_HANDLES_COMMAND_LINE is
// set, then it will also be sent to the primary instance. See
// g_application_add_main_option_entries() for more details.
//
// See Entry for more documentation of the arguments.
//
// The function takes the following parameters:
//
//    - longName: long name of an option used to specify it in a commandline.
//    - shortName: short name of an option.
//    - flags from Flags.
//    - arg: type of the option, as a Arg.
//    - description for the option in --help output.
//    - argDescription (optional): placeholder to use for the extra argument
//      parsed by the option in --help output.
//
func (application *Application) AddMainOption(longName string, shortName byte, flags glib.OptionFlags, arg glib.OptionArg, description, argDescription string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.char         // out
	var _arg2 C.char          // out
	var _arg3 C.GOptionFlags  // out
	var _arg4 C.GOptionArg    // out
	var _arg5 *C.char         // out
	var _arg6 *C.char         // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(longName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.char(shortName)
	_arg3 = C.GOptionFlags(flags)
	_arg4 = C.GOptionArg(arg)
	_arg5 = (*C.char)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg5))
	if argDescription != "" {
		_arg6 = (*C.char)(unsafe.Pointer(C.CString(argDescription)))
		defer C.free(unsafe.Pointer(_arg6))
	}

	C.g_application_add_main_option(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(application)
	runtime.KeepAlive(longName)
	runtime.KeepAlive(shortName)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(arg)
	runtime.KeepAlive(description)
	runtime.KeepAlive(argDescription)
}

// ResourceBasePath gets the resource base path of application.
//
// See g_application_set_resource_base_path() for more information.
//
// The function returns the following values:
//
//    - utf8 (optional): base resource path, if one is set.
//
func (application *Application) ResourceBasePath() string {
	var _arg0 *C.GApplication // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	_cret = C.g_application_get_resource_base_path(_arg0)
	runtime.KeepAlive(application)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetResourceBasePath sets (or unsets) the base resource path of application.
//
// The path is used to automatically load various [application
// resources][gresource] such as menu layouts and action descriptions. The
// various types of resources will be found at fixed names relative to the given
// base path.
//
// By default, the resource base path is determined from the application ID by
// prefixing '/' and replacing each '.' with '/'. This is done at the time that
// the #GApplication object is constructed. Changes to the application ID after
// that point will not have an impact on the resource base path.
//
// As an example, if the application has an ID of "org.example.app" then the
// default resource base path will be "/org/example/app". If this is a
// Application (and you have not manually changed the path) then Gtk will then
// search for the menus of the application at "/org/example/app/gtk/menus.ui".
//
// See #GResource for more information about adding resources to your
// application.
//
// You can disable automatic resource loading functionality by setting the path
// to NULL.
//
// Changing the resource base path once the application is running is not
// recommended. The point at which the resource path is consulted for forming
// paths for various purposes is unspecified. When writing a sub-class of
// #GApplication you should either set the #GApplication:resource-base-path
// property at construction time, or call this function during the instance
// initialization. Alternatively, you can call this function in the
// Class.startup virtual function, before chaining up to the parent
// implementation.
//
// The function takes the following parameters:
//
//    - resourcePath (optional): resource path to use.
//
func (application *Application) SetResourceBasePath(resourcePath string) {
	var _arg0 *C.GApplication // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	if resourcePath != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(resourcePath)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.g_application_set_resource_base_path(_arg0, _arg1)
	runtime.KeepAlive(application)
	runtime.KeepAlive(resourcePath)
}
