// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SendMessageWithTimeout: this behaves exactly the same as
// g_socket_send_message(), except that the choice of timeout behavior is
// determined by the timeout_us argument rather than by socket's properties.
//
// On error G_POLLABLE_RETURN_FAILED is returned and error is set accordingly,
// or if the socket is currently not writable G_POLLABLE_RETURN_WOULD_BLOCK is
// returned. bytes_written will contain 0 in both cases.
//
// The function takes the following parameters:
//
//    - ctx (optional): GCancellable or NULL.
//    - address (optional) or NULL.
//    - vectors: array of Vector structs.
//    - messages (optional): pointer to an array of ControlMessages, or NULL.
//    - flags: int containing MsgFlags flags, which may additionally contain
//      other platform specific flags
//      (http://man7.org/linux/man-pages/man2/recv.2.html).
//    - timeoutUs: maximum time (in microseconds) to wait, or -1.
//
// The function returns the following values:
//
//    - bytesWritten (optional): location to store the number of bytes that were
//      written to the socket.
//    - pollableReturn: G_POLLABLE_RETURN_OK if all data was successfully
//      written, G_POLLABLE_RETURN_WOULD_BLOCK if the socket is currently not
//      writable, or G_POLLABLE_RETURN_FAILED if an error happened and error is
//      set.
//
func (socket *Socket) SendMessageWithTimeout(ctx context.Context, address SocketAddresser, vectors []OutputVector, messages []SocketControlMessager, flags int, timeoutUs int64) (uint, PollableReturn, error) {
	var _arg0 *C.GSocket        // out
	var _arg9 *C.GCancellable   // out
	var _arg1 *C.GSocketAddress // out
	var _arg2 *C.GOutputVector  // out
	var _arg3 C.gint
	var _arg4 **C.GSocketControlMessage // out
	var _arg5 C.gint
	var _arg6 C.gint            // out
	var _arg7 C.gint64          // out
	var _arg8 C.gsize           // in
	var _cret C.GPollableReturn // in
	var _cerr *C.GError         // in

	_arg0 = (*C.GSocket)(unsafe.Pointer(coreglib.InternObject(socket).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg9 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if address != nil {
		_arg1 = (*C.GSocketAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))
	}
	_arg3 = (C.gint)(len(vectors))
	_arg2 = (*C.GOutputVector)(C.calloc(C.size_t(len(vectors)), C.size_t(C.sizeof_GOutputVector)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice((*C.GOutputVector)(_arg2), len(vectors))
		for i := range vectors {
			out[i] = *(*C.GOutputVector)(gextras.StructNative(unsafe.Pointer((&vectors[i]))))
		}
	}
	if messages != nil {
		_arg5 = (C.gint)(len(messages))
		_arg4 = (**C.GSocketControlMessage)(C.calloc(C.size_t(len(messages)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg4))
		{
			out := unsafe.Slice((**C.GSocketControlMessage)(_arg4), len(messages))
			for i := range messages {
				out[i] = (*C.GSocketControlMessage)(unsafe.Pointer(coreglib.InternObject(messages[i]).Native()))
			}
		}
	}
	_arg6 = C.gint(flags)
	_arg7 = C.gint64(timeoutUs)

	_cret = C.g_socket_send_message_with_timeout(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, &_arg8, _arg9, &_cerr)
	runtime.KeepAlive(socket)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(address)
	runtime.KeepAlive(vectors)
	runtime.KeepAlive(messages)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(timeoutUs)

	var _bytesWritten uint             // out
	var _pollableReturn PollableReturn // out
	var _goerr error                   // out

	_bytesWritten = uint(_arg8)
	_pollableReturn = PollableReturn(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _bytesWritten, _pollableReturn, _goerr
}
