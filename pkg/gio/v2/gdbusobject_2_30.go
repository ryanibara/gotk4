// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// GDBusInterface* _gotk4_gio2_DBusObject_virtual_get_interface(void* fnptr, GDBusObject* arg0, gchar* arg1) {
//   return ((GDBusInterface* (*)(GDBusObject*, gchar*))(fnptr))(arg0, arg1);
// };
// GList* _gotk4_gio2_DBusObject_virtual_get_interfaces(void* fnptr, GDBusObject* arg0) {
//   return ((GList* (*)(GDBusObject*))(fnptr))(arg0);
// };
// gchar* _gotk4_gio2_DBusObject_virtual_get_object_path(void* fnptr, GDBusObject* arg0) {
//   return ((gchar* (*)(GDBusObject*))(fnptr))(arg0);
// };
import "C"

// Interface gets the D-Bus interface with name interface_name associated with
// object, if any.
//
// The function takes the following parameters:
//
//    - interfaceName d-Bus interface name.
//
// The function returns the following values:
//
//    - dBusInterface (optional): NULL if not found, otherwise a BusInterface
//      that must be freed with g_object_unref().
//
func (object *DBusObject) Interface(interfaceName string) *DBusInterface {
	var _arg0 *C.GDBusObject    // out
	var _arg1 *C.gchar          // out
	var _cret *C.GDBusInterface // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(interfaceName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_dbus_object_get_interface(_arg0, _arg1)
	runtime.KeepAlive(object)
	runtime.KeepAlive(interfaceName)

	var _dBusInterface *DBusInterface // out

	if _cret != nil {
		_dBusInterface = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _dBusInterface
}

// Interfaces gets the D-Bus interfaces associated with object.
//
// The function returns the following values:
//
//    - list of BusInterface instances. The returned list must be freed by
//      g_list_free() after each element has been freed with g_object_unref().
//
func (object *DBusObject) Interfaces() []*DBusInterface {
	var _arg0 *C.GDBusObject // out
	var _cret *C.GList       // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_cret = C.g_dbus_object_get_interfaces(_arg0)
	runtime.KeepAlive(object)

	var _list []*DBusInterface // out

	_list = make([]*DBusInterface, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GDBusInterface)(v)
		var dst *DBusInterface // out
		dst = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// ObjectPath gets the object path for object.
//
// The function returns the following values:
//
//    - utf8: string owned by object. Do not free.
//
func (object *DBusObject) ObjectPath() string {
	var _arg0 *C.GDBusObject // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_cret = C.g_dbus_object_get_object_path(_arg0)
	runtime.KeepAlive(object)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Iface gets the D-Bus interface with name interface_name associated with
// object, if any.
//
// The function takes the following parameters:
//
//    - interfaceName d-Bus interface name.
//
// The function returns the following values:
//
//    - dBusInterface (optional): NULL if not found, otherwise a BusInterface
//      that must be freed with g_object_unref().
//
func (object *DBusObject) iface(interfaceName string) *DBusInterface {
	gclass := (*C.GDBusObjectIface)(coreglib.PeekParentClass(object))
	fnarg := gclass.get_interface

	var _arg0 *C.GDBusObject    // out
	var _arg1 *C.gchar          // out
	var _cret *C.GDBusInterface // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(interfaceName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_gio2_DBusObject_virtual_get_interface(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(object)
	runtime.KeepAlive(interfaceName)

	var _dBusInterface *DBusInterface // out

	if _cret != nil {
		_dBusInterface = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _dBusInterface
}

// Interfaces gets the D-Bus interfaces associated with object.
//
// The function returns the following values:
//
//    - list of BusInterface instances. The returned list must be freed by
//      g_list_free() after each element has been freed with g_object_unref().
//
func (object *DBusObject) interfaces() []*DBusInterface {
	gclass := (*C.GDBusObjectIface)(coreglib.PeekParentClass(object))
	fnarg := gclass.get_interfaces

	var _arg0 *C.GDBusObject // out
	var _cret *C.GList       // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_cret = C._gotk4_gio2_DBusObject_virtual_get_interfaces(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(object)

	var _list []*DBusInterface // out

	_list = make([]*DBusInterface, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GDBusInterface)(v)
		var dst *DBusInterface // out
		dst = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// objectPath gets the object path for object.
//
// The function returns the following values:
//
//    - utf8: string owned by object. Do not free.
//
func (object *DBusObject) objectPath() string {
	gclass := (*C.GDBusObjectIface)(coreglib.PeekParentClass(object))
	fnarg := gclass.get_object_path

	var _arg0 *C.GDBusObject // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_cret = C._gotk4_gio2_DBusObject_virtual_get_object_path(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(object)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DBusObjectIface: base object type for D-Bus objects.
//
// An instance of this type is always passed by reference.
type DBusObjectIface struct {
	*dBusObjectIface
}

// dBusObjectIface is the struct that's finalized.
type dBusObjectIface struct {
	native *C.GDBusObjectIface
}
