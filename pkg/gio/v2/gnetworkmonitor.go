// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_gio2_NetworkMonitorInterface_can_reach(GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**);
// extern gboolean _gotk4_gio2_NetworkMonitorInterface_can_reach_finish(GNetworkMonitor*, GAsyncResult*, GError**);
// extern void _gotk4_gio2_NetworkMonitorInterface_network_changed(GNetworkMonitor*, gboolean);
// extern void _gotk4_gio2_NetworkMonitor_ConnectNetworkChanged(gpointer, gboolean, guintptr);
import "C"

// glib.Type values for gnetworkmonitor.go.
var GTypeNetworkMonitor = coreglib.Type(C.g_network_monitor_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeNetworkMonitor, F: marshalNetworkMonitor},
	})
}

// NETWORK_MONITOR_EXTENSION_POINT_NAME: extension point for network status
// monitoring functionality. See [Extending GIO][extending-gio].
const NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor"

// NetworkMonitorOverrider contains methods that are overridable.
type NetworkMonitorOverrider interface {
	// CanReach attempts to determine whether or not the host pointed to by
	// connectable can be reached, without actually trying to connect to it.
	//
	// This may return TRUE even when Monitor:network-available is FALSE, if,
	// for example, monitor can determine that connectable refers to a host on a
	// local network.
	//
	// If monitor believes that an attempt to connect to connectable will
	// succeed, it will return TRUE. Otherwise, it will return FALSE and set
	// error to an appropriate error (such as G_IO_ERROR_HOST_UNREACHABLE).
	//
	// Note that although this does not attempt to connect to connectable, it
	// may still block for a brief period of time (eg, trying to do multicast
	// DNS on the local network), so if you do not want to block, you should use
	// g_network_monitor_can_reach_async().
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional) or NULL.
	//    - connectable: Connectable.
	//
	CanReach(ctx context.Context, connectable SocketConnectabler) error
	// CanReachFinish finishes an async network connectivity test. See
	// g_network_monitor_can_reach_async().
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	CanReachFinish(result AsyncResulter) error
	// The function takes the following parameters:
	//
	NetworkChanged(networkAvailable bool)
}

// NetworkMonitor provides an easy-to-use cross-platform API for monitoring
// network connectivity. On Linux, the available implementations are based on
// the kernel's netlink interface and on NetworkManager.
//
// There is also an implementation for use inside Flatpak sandboxes.
//
// NetworkMonitor wraps an interface. This means the user can get the
// underlying type by calling Cast().
type NetworkMonitor struct {
	_ [0]func() // equal guard
	Initable
}

var ()

// NetworkMonitorrer describes NetworkMonitor's interface methods.
type NetworkMonitorrer interface {
	coreglib.Objector

	// CanReach attempts to determine whether or not the host pointed to by
	// connectable can be reached, without actually trying to connect to it.
	CanReach(ctx context.Context, connectable SocketConnectabler) error
	// CanReachFinish finishes an async network connectivity test.
	CanReachFinish(result AsyncResulter) error
	// NetworkAvailable checks if the network is available.
	NetworkAvailable() bool
	// NetworkMetered checks if the network is metered.
	NetworkMetered() bool

	// Network-changed is emitted when the network configuration changes.
	ConnectNetworkChanged(func(networkAvailable bool)) coreglib.SignalHandle
}

var _ NetworkMonitorrer = (*NetworkMonitor)(nil)

func ifaceInitNetworkMonitorrer(gifacePtr, data C.gpointer) {
	iface := (*C.GNetworkMonitorInterface)(unsafe.Pointer(gifacePtr))
	iface.can_reach = (*[0]byte)(C._gotk4_gio2_NetworkMonitorInterface_can_reach)
	iface.can_reach_finish = (*[0]byte)(C._gotk4_gio2_NetworkMonitorInterface_can_reach_finish)
	iface.network_changed = (*[0]byte)(C._gotk4_gio2_NetworkMonitorInterface_network_changed)
}

//export _gotk4_gio2_NetworkMonitorInterface_can_reach
func _gotk4_gio2_NetworkMonitorInterface_can_reach(arg0 *C.GNetworkMonitor, arg1 *C.GSocketConnectable, arg2 *C.GCancellable, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(NetworkMonitorOverrider)

	var _cancellable context.Context    // out
	var _connectable SocketConnectabler // out

	if arg2 != nil {
		_cancellable = gcancel.NewCancellableContext(unsafe.Pointer(arg2))
	}
	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.SocketConnectabler is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SocketConnectabler)
			return ok
		})
		rv, ok := casted.(SocketConnectabler)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SocketConnectabler")
		}
		_connectable = rv
	}

	_goerr := iface.CanReach(_cancellable, _connectable)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_NetworkMonitorInterface_can_reach_finish
func _gotk4_gio2_NetworkMonitorInterface_can_reach_finish(arg0 *C.GNetworkMonitor, arg1 *C.GAsyncResult, _cerr **C.GError) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(NetworkMonitorOverrider)

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	_goerr := iface.CanReachFinish(_result)

	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_NetworkMonitorInterface_network_changed
func _gotk4_gio2_NetworkMonitorInterface_network_changed(arg0 *C.GNetworkMonitor, arg1 C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(NetworkMonitorOverrider)

	var _networkAvailable bool // out

	if arg1 != 0 {
		_networkAvailable = true
	}

	iface.NetworkChanged(_networkAvailable)
}

func wrapNetworkMonitor(obj *coreglib.Object) *NetworkMonitor {
	return &NetworkMonitor{
		Initable: Initable{
			Object: obj,
		},
	}
}

func marshalNetworkMonitor(p uintptr) (interface{}, error) {
	return wrapNetworkMonitor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_NetworkMonitor_ConnectNetworkChanged
func _gotk4_gio2_NetworkMonitor_ConnectNetworkChanged(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(networkAvailable bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(networkAvailable bool))
	}

	var _networkAvailable bool // out

	if arg1 != 0 {
		_networkAvailable = true
	}

	f(_networkAvailable)
}

// ConnectNetworkChanged is emitted when the network configuration changes.
func (monitor *NetworkMonitor) ConnectNetworkChanged(f func(networkAvailable bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(monitor, "network-changed", false, unsafe.Pointer(C._gotk4_gio2_NetworkMonitor_ConnectNetworkChanged), f)
}

// CanReach attempts to determine whether or not the host pointed to by
// connectable can be reached, without actually trying to connect to it.
//
// This may return TRUE even when Monitor:network-available is FALSE, if, for
// example, monitor can determine that connectable refers to a host on a local
// network.
//
// If monitor believes that an attempt to connect to connectable will succeed,
// it will return TRUE. Otherwise, it will return FALSE and set error to an
// appropriate error (such as G_IO_ERROR_HOST_UNREACHABLE).
//
// Note that although this does not attempt to connect to connectable, it may
// still block for a brief period of time (eg, trying to do multicast DNS on the
// local network), so if you do not want to block, you should use
// g_network_monitor_can_reach_async().
//
// The function takes the following parameters:
//
//    - ctx (optional) or NULL.
//    - connectable: Connectable.
//
func (monitor *NetworkMonitor) CanReach(ctx context.Context, connectable SocketConnectabler) error {
	var args [3]girepository.Argument
	var _arg0 *C.void // out
	var _arg2 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connectable).Native()))
	*(**NetworkMonitor)(unsafe.Pointer(&args[1])) = _arg1
	*(*context.Context)(unsafe.Pointer(&args[2])) = _arg2

	runtime.KeepAlive(monitor)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(connectable)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CanReachFinish finishes an async network connectivity test. See
// g_network_monitor_can_reach_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (monitor *NetworkMonitor) CanReachFinish(result AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	*(**NetworkMonitor)(unsafe.Pointer(&args[1])) = _arg1

	runtime.KeepAlive(monitor)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// NetworkAvailable checks if the network is available. "Available" here means
// that the system has a default route available for at least one of IPv4 or
// IPv6. It does not necessarily imply that the public Internet is reachable.
// See Monitor:network-available for more details.
//
// The function returns the following values:
//
//    - ok: whether the network is available.
//
func (monitor *NetworkMonitor) NetworkAvailable() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))
	*(**NetworkMonitor)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(monitor)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NetworkMetered checks if the network is metered. See Monitor:network-metered
// for more details.
//
// The function returns the following values:
//
//    - ok: whether the connection is metered.
//
func (monitor *NetworkMonitor) NetworkMetered() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(monitor).Native()))
	*(**NetworkMonitor)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(monitor)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NetworkMonitorGetDefault gets the default Monitor for the system.
//
// The function returns the following values:
//
//    - networkMonitor which will be a dummy object if no network monitor is
//      available.
//
func NetworkMonitorGetDefault() *NetworkMonitor {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gio", "get_default").Invoke(nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _networkMonitor *NetworkMonitor // out

	_networkMonitor = wrapNetworkMonitor(coreglib.Take(unsafe.Pointer(_cret)))

	return _networkMonitor
}
