// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_DBusObjectManager_ConnectObjectRemoved(gpointer, GDBusObject*, guintptr);
// extern void _gotk4_gio2_DBusObjectManager_ConnectObjectAdded(gpointer, GDBusObject*, guintptr);
// extern void _gotk4_gio2_DBusObjectManager_ConnectInterfaceRemoved(gpointer, GDBusObject*, GDBusInterface*, guintptr);
// extern void _gotk4_gio2_DBusObjectManager_ConnectInterfaceAdded(gpointer, GDBusObject*, GDBusInterface*, guintptr);
// void _gotk4_gio2_DBusObjectManager_virtual_interface_added(void* fnptr, GDBusObjectManager* arg0, GDBusObject* arg1, GDBusInterface* arg2) {
//   ((void (*)(GDBusObjectManager*, GDBusObject*, GDBusInterface*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gio2_DBusObjectManager_virtual_interface_removed(void* fnptr, GDBusObjectManager* arg0, GDBusObject* arg1, GDBusInterface* arg2) {
//   ((void (*)(GDBusObjectManager*, GDBusObject*, GDBusInterface*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gio2_DBusObjectManager_virtual_object_added(void* fnptr, GDBusObjectManager* arg0, GDBusObject* arg1) {
//   ((void (*)(GDBusObjectManager*, GDBusObject*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gio2_DBusObjectManager_virtual_object_removed(void* fnptr, GDBusObjectManager* arg0, GDBusObject* arg1) {
//   ((void (*)(GDBusObjectManager*, GDBusObject*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeDBusObjectManager = coreglib.Type(C.g_dbus_object_manager_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDBusObjectManager, F: marshalDBusObjectManager},
	})
}

// DBusObjectManager type is the base type for service- and client-side
// implementations of the standardized org.freedesktop.DBus.ObjectManager
// (http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
// interface.
//
// See BusObjectManagerClient for the client-side implementation and
// BusObjectManagerServer for the service-side implementation.
//
// DBusObjectManager wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DBusObjectManager struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DBusObjectManager)(nil)
)

// DBusObjectManagerer describes DBusObjectManager's interface methods.
type DBusObjectManagerer interface {
	coreglib.Objector

	// Interface gets the interface proxy for interface_name at object_path, if
	// any.
	Interface(objectPath, interfaceName string) *DBusInterface
	// GetObject gets the BusObjectProxy at object_path, if any.
	GetObject(objectPath string) *DBusObject
	// ObjectPath gets the object path that manager is for.
	ObjectPath() string
	// Objects gets all BusObject objects known to manager.
	Objects() []*DBusObject

	// Interface-added is emitted when interface is added to object.
	ConnectInterfaceAdded(func(object DBusObjector, iface DBusInterfacer)) coreglib.SignalHandle
	// Interface-removed is emitted when interface has been removed from object.
	ConnectInterfaceRemoved(func(object DBusObjector, iface DBusInterfacer)) coreglib.SignalHandle
	// Object-added is emitted when object is added to manager.
	ConnectObjectAdded(func(object DBusObjector)) coreglib.SignalHandle
	// Object-removed is emitted when object is removed from manager.
	ConnectObjectRemoved(func(object DBusObjector)) coreglib.SignalHandle
}

var _ DBusObjectManagerer = (*DBusObjectManager)(nil)

func wrapDBusObjectManager(obj *coreglib.Object) *DBusObjectManager {
	return &DBusObjectManager{
		Object: obj,
	}
}

func marshalDBusObjectManager(p uintptr) (interface{}, error) {
	return wrapDBusObjectManager(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectInterfaceAdded is emitted when interface is added to object.
//
// This signal exists purely as a convenience to avoid having to connect signals
// to all objects managed by manager.
func (manager *DBusObjectManager) ConnectInterfaceAdded(f func(object DBusObjector, iface DBusInterfacer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "interface-added", false, unsafe.Pointer(C._gotk4_gio2_DBusObjectManager_ConnectInterfaceAdded), f)
}

// ConnectInterfaceRemoved is emitted when interface has been removed from
// object.
//
// This signal exists purely as a convenience to avoid having to connect signals
// to all objects managed by manager.
func (manager *DBusObjectManager) ConnectInterfaceRemoved(f func(object DBusObjector, iface DBusInterfacer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "interface-removed", false, unsafe.Pointer(C._gotk4_gio2_DBusObjectManager_ConnectInterfaceRemoved), f)
}

// ConnectObjectAdded is emitted when object is added to manager.
func (manager *DBusObjectManager) ConnectObjectAdded(f func(object DBusObjector)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "object-added", false, unsafe.Pointer(C._gotk4_gio2_DBusObjectManager_ConnectObjectAdded), f)
}

// ConnectObjectRemoved is emitted when object is removed from manager.
func (manager *DBusObjectManager) ConnectObjectRemoved(f func(object DBusObjector)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "object-removed", false, unsafe.Pointer(C._gotk4_gio2_DBusObjectManager_ConnectObjectRemoved), f)
}

// The function takes the following parameters:
//
//    - object
//    - interface_
//
func (manager *DBusObjectManager) interfaceAdded(object DBusObjector, interface_ DBusInterfacer) {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.interface_added

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.GDBusObject        // out
	var _arg2 *C.GDBusInterface     // out

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.GDBusInterface)(unsafe.Pointer(coreglib.InternObject(interface_).Native()))

	C._gotk4_gio2_DBusObjectManager_virtual_interface_added(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
	runtime.KeepAlive(interface_)
}

// The function takes the following parameters:
//
//    - object
//    - interface_
//
func (manager *DBusObjectManager) interfaceRemoved(object DBusObjector, interface_ DBusInterfacer) {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.interface_removed

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.GDBusObject        // out
	var _arg2 *C.GDBusInterface     // out

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.GDBusInterface)(unsafe.Pointer(coreglib.InternObject(interface_).Native()))

	C._gotk4_gio2_DBusObjectManager_virtual_interface_removed(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
	runtime.KeepAlive(interface_)
}

// The function takes the following parameters:
//
func (manager *DBusObjectManager) objectAdded(object DBusObjector) {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.object_added

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.GDBusObject        // out

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	C._gotk4_gio2_DBusObjectManager_virtual_object_added(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
}

// The function takes the following parameters:
//
func (manager *DBusObjectManager) objectRemoved(object DBusObjector) {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.object_removed

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.GDBusObject        // out

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GDBusObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	C._gotk4_gio2_DBusObjectManager_virtual_object_removed(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
}
