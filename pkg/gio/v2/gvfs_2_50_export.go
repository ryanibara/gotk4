// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

//export _gotk4_gio2_VFSFileLookupFunc
func _gotk4_gio2_VFSFileLookupFunc(arg1 *C.GVfs, arg2 *C.char, arg3 C.gpointer) (cret *C.GFile) {
	var fn VFSFileLookupFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(VFSFileLookupFunc)
	}

	var _vfs *VFS          // out
	var _identifier string // out

	_vfs = wrapVFS(coreglib.Take(unsafe.Pointer(arg1)))
	_identifier = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	file := fn(_vfs, _identifier)

	var _ *File

	cret = (*C.GFile)(unsafe.Pointer(coreglib.InternObject(file).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(file).Native()))

	return cret
}
