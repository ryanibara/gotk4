// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"reflect"
	"runtime"
	"runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
// void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// void _gotk4_gio2_FileProgressCallback(goffset, goffset, gpointer);
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_get_type()), F: marshalFiler},
	})
}

// FileOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type FileOverrider interface {
	// AppendTo gets an output stream for appending data to the file. If the
	// file doesn't already exist it is created.
	//
	// By default files created are generally readable by everyone, but if you
	// pass FILE_CREATE_PRIVATE in flags the file will be made readable only to
	// the current user, to the level that is supported on the target
	// filesystem.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// Some file systems don't allow all file names, and may return an
	// G_IO_ERROR_INVALID_FILENAME error. If the file is a directory the
	// G_IO_ERROR_IS_DIRECTORY error will be returned. Other errors are possible
	// too, and depend on what kind of filesystem the file is on.
	AppendTo(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error)
	// AppendToAsync: asynchronously opens file for appending.
	//
	// For more details, see g_file_append_to() which is the synchronous version
	// of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_append_to_finish() to get the result of the operation.
	AppendToAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// AppendToFinish finishes an asynchronous file append operation started
	// with g_file_append_to_async().
	AppendToFinish(res AsyncResulter) (*FileOutputStream, error)
	// Copy copies the file source to the location specified by destination. Can
	// not handle recursive copies of directories.
	//
	// If the flag FILE_COPY_OVERWRITE is specified an already existing
	// destination file is overwritten.
	//
	// If the flag FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks will
	// be copied as symlinks, otherwise the target of the source symlink will be
	// copied.
	//
	// If the flag FILE_COPY_ALL_METADATA is specified then all the metadata
	// that is possible to copy is copied, not just the default subset (which,
	// for instance, does not include the owner, see Info).
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If progress_callback is not NULL, then the operation can be monitored by
	// setting this to a ProgressCallback function. progress_callback_data will
	// be passed to this function. It is guaranteed that this callback will be
	// called after all data has been transferred with the total number of bytes
	// copied during the operation.
	//
	// If the source file does not exist, then the G_IO_ERROR_NOT_FOUND error is
	// returned, independent on the status of the destination.
	//
	// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
	// error G_IO_ERROR_EXISTS is returned.
	//
	// If trying to overwrite a file over a directory, the
	// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
	// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
	//
	// If the source is a directory and the target does not exist, or
	// FILE_COPY_OVERWRITE is specified and the target is a file, then the
	// G_IO_ERROR_WOULD_RECURSE error is returned.
	//
	// If you are interested in copying the #GFile object itself (not the
	// on-disk file), see g_file_dup().
	Copy(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error
	// CopyFinish finishes copying the file started with g_file_copy_async().
	CopyFinish(res AsyncResulter) error
	// Create creates a new file and returns an output stream for writing to it.
	// The file must not already exist.
	//
	// By default files created are generally readable by everyone, but if you
	// pass FILE_CREATE_PRIVATE in flags the file will be made readable only to
	// the current user, to the level that is supported on the target
	// filesystem.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If a file or directory with this name already exists the
	// G_IO_ERROR_EXISTS error will be returned. Some file systems don't allow
	// all file names, and may return an G_IO_ERROR_INVALID_FILENAME error, and
	// if the name is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
	// Other errors are possible too, and depend on what kind of filesystem the
	// file is on.
	Create(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error)
	// CreateAsync: asynchronously creates a new file and returns an output
	// stream for writing to it. The file must not already exist.
	//
	// For more details, see g_file_create() which is the synchronous version of
	// this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_create_finish() to get the result of the operation.
	CreateAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// CreateFinish finishes an asynchronous file create operation started with
	// g_file_create_async().
	CreateFinish(res AsyncResulter) (*FileOutputStream, error)
	// CreateReadwrite creates a new file and returns a stream for reading and
	// writing to it. The file must not already exist.
	//
	// By default files created are generally readable by everyone, but if you
	// pass FILE_CREATE_PRIVATE in flags the file will be made readable only to
	// the current user, to the level that is supported on the target
	// filesystem.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If a file or directory with this name already exists, the
	// G_IO_ERROR_EXISTS error will be returned. Some file systems don't allow
	// all file names, and may return an G_IO_ERROR_INVALID_FILENAME error, and
	// if the name is too long, G_IO_ERROR_FILENAME_TOO_LONG will be returned.
	// Other errors are possible too, and depend on what kind of filesystem the
	// file is on.
	//
	// Note that in many non-local file cases read and write streams are not
	// supported, so make sure you really need to do read and write streaming,
	// rather than just opening for reading or writing.
	CreateReadwrite(ctx context.Context, flags FileCreateFlags) (*FileIOStream, error)
	// CreateReadwriteAsync: asynchronously creates a new file and returns a
	// stream for reading and writing to it. The file must not already exist.
	//
	// For more details, see g_file_create_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_create_readwrite_finish() to get the result of the operation.
	CreateReadwriteAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// CreateReadwriteFinish finishes an asynchronous file create operation
	// started with g_file_create_readwrite_async().
	CreateReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// DeleteFile deletes a file. If the file is a directory, it will only be
	// deleted if it is empty. This has the same semantics as g_unlink().
	//
	// If file doesnâ€™t exist, G_IO_ERROR_NOT_FOUND will be returned. This allows
	// for deletion to be implemented avoiding time-of-check to time-of-use
	// races (https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
	//
	//    g_autoptr(GError) local_error = NULL;
	//    if (!g_file_delete (my_file, my_cancellable, &local_error) &&
	//        !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
	//      {
	//        // deletion failed for some reason other than the file not existing:
	//        // so report the error
	//        g_warning ("Failed to delete s: s",
	//                   g_file_peek_path (my_file), local_error->message);
	//      }
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	DeleteFile(ctx context.Context) error
	// DeleteFileAsync: asynchronously delete a file. If the file is a
	// directory, it will only be deleted if it is empty. This has the same
	// semantics as g_unlink().
	DeleteFileAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// DeleteFileFinish finishes deleting a file started with
	// g_file_delete_async().
	DeleteFileFinish(result AsyncResulter) error
	// Dup duplicates a #GFile handle. This operation does not duplicate the
	// actual file or directory represented by the #GFile; see g_file_copy() if
	// attempting to copy a file.
	//
	// g_file_dup() is useful when a second handle is needed to the same
	// underlying file, for use in a separate thread (#GFile is not
	// thread-safe). For use within the same thread, use g_object_ref() to
	// increment the existing objectâ€™s reference count.
	//
	// This call does no blocking I/O.
	Dup() Filer
	// EjectMountable starts an asynchronous eject on a mountable. When this
	// operation has completed, callback will be called with user_user data, and
	// the operation can be finalized with g_file_eject_mountable_finish().
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// Deprecated: Use g_file_eject_mountable_with_operation() instead.
	EjectMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback)
	// EjectMountableFinish finishes an asynchronous eject operation started by
	// g_file_eject_mountable().
	//
	// Deprecated: Use g_file_eject_mountable_with_operation_finish() instead.
	EjectMountableFinish(result AsyncResulter) error
	// EjectMountableWithOperation starts an asynchronous eject on a mountable.
	// When this operation has completed, callback will be called with user_user
	// data, and the operation can be finalized with
	// g_file_eject_mountable_with_operation_finish().
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	EjectMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// EjectMountableWithOperationFinish finishes an asynchronous eject
	// operation started by g_file_eject_mountable_with_operation().
	EjectMountableWithOperationFinish(result AsyncResulter) error
	// EnumerateChildren gets the requested information about the files in a
	// directory. The result is a Enumerator object that will give out Info
	// objects for all the files in the directory.
	//
	// The attributes value is a string that specifies the file attributes that
	// should be gathered. It is not an error if it's not possible to read a
	// particular requested attribute from a file - it just won't be set.
	// attributes should be a comma-separated list of attributes or attribute
	// wildcards. The wildcard "*" means all attributes, and a wildcard like
	// "standard::*" means all attributes in the standard namespace. An example
	// attribute query be "standard::*,owner::user". The standard attributes are
	// available as defines, like FILE_ATTRIBUTE_STANDARD_NAME.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be
	// returned. If the file is not a directory, the G_IO_ERROR_NOT_DIRECTORY
	// error will be returned. Other errors are possible too.
	EnumerateChildren(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileEnumerator, error)
	// EnumerateChildrenAsync: asynchronously gets the requested information
	// about the files in a directory. The result is a Enumerator object that
	// will give out Info objects for all the files in the directory.
	//
	// For more details, see g_file_enumerate_children() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_enumerate_children_finish() to get the result of the
	// operation.
	EnumerateChildrenAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// EnumerateChildrenFinish finishes an async enumerate children operation.
	// See g_file_enumerate_children_async().
	EnumerateChildrenFinish(res AsyncResulter) (*FileEnumerator, error)
	// Equal checks if the two given #GFiles refer to the same file.
	//
	// Note that two #GFiles that differ can still refer to the same file on the
	// filesystem due to various forms of filename aliasing.
	//
	// This call does no blocking I/O.
	Equal(file2 Filer) bool
	// FindEnclosingMount gets a #GMount for the #GFile.
	//
	// #GMount is returned only for user interesting locations, see Monitor. If
	// the Iface for file does not have a #mount, error will be set to
	// G_IO_ERROR_NOT_FOUND and NULL #will be returned.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	FindEnclosingMount(ctx context.Context) (Mounter, error)
	// FindEnclosingMountAsync: asynchronously gets the mount for the file.
	//
	// For more details, see g_file_find_enclosing_mount() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_find_enclosing_mount_finish() to get the result of the
	// operation.
	FindEnclosingMountAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// FindEnclosingMountFinish finishes an asynchronous find mount request. See
	// g_file_find_enclosing_mount_async().
	FindEnclosingMountFinish(res AsyncResulter) (Mounter, error)
	// Basename gets the base name (the last component of the path) for a given
	// #GFile.
	//
	// If called for the top level of a system (such as the filesystem root or a
	// uri like sftp://host/) it will return a single directory separator (and
	// on Windows, possibly a drive letter).
	//
	// The base name is a byte string (not UTF-8). It has no defined encoding or
	// rules other than it may not contain zero bytes. If you want to use
	// filenames in a user interface you should use the display name that you
	// can get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
	// attribute with g_file_query_info().
	//
	// This call does no blocking I/O.
	Basename() string
	// ChildForDisplayName gets the child of file for a given display_name (i.e.
	// a UTF-8 version of the name). If this function fails, it returns NULL and
	// error will be set. This is very useful when constructing a #GFile for a
	// new file and the user entered the filename in the user interface, for
	// instance when you select a directory and type a filename in the file
	// selector.
	//
	// This call does no blocking I/O.
	ChildForDisplayName(displayName string) (Filer, error)
	// Parent gets the parent directory for the file. If the file represents the
	// root directory of the file system, then NULL will be returned.
	//
	// This call does no blocking I/O.
	Parent() Filer
	// ParseName gets the parse name of the file. A parse name is a UTF-8 string
	// that describes the file such that one can get the #GFile back using
	// g_file_parse_name().
	//
	// This is generally used to show the #GFile as a nice full-pathname kind of
	// string in a user interface, like in a location entry.
	//
	// For local files with names that can safely be converted to UTF-8 the
	// pathname is used, otherwise the IRI is used (a form of URI that allows
	// UTF-8 characters unescaped).
	//
	// This call does no blocking I/O.
	ParseName() string
	// Path gets the local pathname for #GFile, if one exists. If non-NULL, this
	// is guaranteed to be an absolute, canonical path. It might contain
	// symlinks.
	//
	// This call does no blocking I/O.
	Path() string
	// RelativePath gets the path for descendant relative to parent.
	//
	// This call does no blocking I/O.
	RelativePath(descendant Filer) string
	// URI gets the URI for the file.
	//
	// This call does no blocking I/O.
	URI() string
	// URIScheme gets the URI scheme for a #GFile. RFC 3986 decodes the scheme
	// as:
	//
	//    URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
	//
	// Common schemes include "file", "http", "ftp", etc.
	//
	// The scheme can be different from the one used to construct the #GFile, in
	// that it might be replaced with one that is logically equivalent to the
	// #GFile.
	//
	// This call does no blocking I/O.
	URIScheme() string
	// HasURIScheme checks to see if a #GFile has a given URI scheme.
	//
	// This call does no blocking I/O.
	HasURIScheme(uriScheme string) bool
	// Hash creates a hash value for a #GFile.
	//
	// This call does no blocking I/O.
	Hash() uint
	// IsNative checks to see if a file is native to the platform.
	//
	// A native file is one expressed in the platform-native filename format,
	// e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
	// as it might be on a locally mounted remote filesystem.
	//
	// On some systems non-native files may be available using the native
	// filesystem via a userspace filesystem (FUSE), in these cases this call
	// will return FALSE, but g_file_get_path() will still return a native path.
	//
	// This call does no blocking I/O.
	IsNative() bool
	// MakeDirectory creates a directory. Note that this will only create a
	// child directory of the immediate parent directory of the path or URI
	// given by the #GFile. To recursively create directories, see
	// g_file_make_directory_with_parents(). This function will fail if the
	// parent directory does not exist, setting error to G_IO_ERROR_NOT_FOUND.
	// If the file system doesn't support creating directories, this function
	// will fail, setting error to G_IO_ERROR_NOT_SUPPORTED.
	//
	// For a local #GFile the newly created directory will have the default
	// (current) ownership and permissions of the current process.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MakeDirectory(ctx context.Context) error
	// MakeDirectoryAsync: asynchronously creates a directory.
	MakeDirectoryAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// MakeDirectoryFinish finishes an asynchronous directory creation, started
	// with g_file_make_directory_async().
	MakeDirectoryFinish(result AsyncResulter) error
	// MakeSymbolicLink creates a symbolic link named file which contains the
	// string symlink_value.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MakeSymbolicLink(ctx context.Context, symlinkValue string) error
	// MeasureDiskUsageFinish collects the results from an earlier call to
	// g_file_measure_disk_usage_async(). See g_file_measure_disk_usage() for
	// more information.
	MeasureDiskUsageFinish(result AsyncResulter) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error)
	// MonitorDir obtains a directory monitor for the given file. This may fail
	// if directory monitoring is not supported.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// It does not make sense for flags to contain
	// G_FILE_MONITOR_WATCH_HARD_LINKS, since hard links can not be made to
	// directories. It is not possible to monitor all the files in a directory
	// for changes made via hard links; if you want to do this then you must
	// register individual watches with g_file_monitor().
	MonitorDir(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error)
	// MonitorFile obtains a file monitor for the given file. If no file
	// notification mechanism exists, then regular polling of the file is used.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If flags contains G_FILE_MONITOR_WATCH_HARD_LINKS then the monitor will
	// also attempt to report changes made to the file via another filename (ie,
	// a hard link). Without this flag, you can only rely on changes made
	// through the filename contained in file to be reported. Using this flag
	// may result in an increase in resource usage, and may not have any effect
	// depending on the Monitor backend and/or filesystem type.
	MonitorFile(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error)
	// MountEnclosingVolume starts a mount_operation, mounting the volume that
	// contains the file location.
	//
	// When this operation has completed, callback will be called with user_user
	// data, and the operation can be finalized with
	// g_file_mount_enclosing_volume_finish().
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	MountEnclosingVolume(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// MountEnclosingVolumeFinish finishes a mount operation started by
	// g_file_mount_enclosing_volume().
	MountEnclosingVolumeFinish(result AsyncResulter) error
	// MountMountable mounts a file of type G_FILE_TYPE_MOUNTABLE. Using
	// mount_operation, you can request callbacks when, for instance, passwords
	// are needed during authentication.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	MountMountable(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// MountMountableFinish finishes a mount operation. See
	// g_file_mount_mountable() for details.
	//
	// Finish an asynchronous mount operation that was started with
	// g_file_mount_mountable().
	MountMountableFinish(result AsyncResulter) (Filer, error)
	// Move tries to move the file or directory source to the location specified
	// by destination. If native move operations are supported then this is
	// used, otherwise a copy + delete fallback is used. The native
	// implementation may support moving directories (for instance on moves
	// inside the same filesystem), but the fallback code does not.
	//
	// If the flag FILE_COPY_OVERWRITE is specified an already existing
	// destination file is overwritten.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If progress_callback is not NULL, then the operation can be monitored by
	// setting this to a ProgressCallback function. progress_callback_data will
	// be passed to this function. It is guaranteed that this callback will be
	// called after all data has been transferred with the total number of bytes
	// copied during the operation.
	//
	// If the source file does not exist, then the G_IO_ERROR_NOT_FOUND error is
	// returned, independent on the status of the destination.
	//
	// If FILE_COPY_OVERWRITE is not specified and the target exists, then the
	// error G_IO_ERROR_EXISTS is returned.
	//
	// If trying to overwrite a file over a directory, the
	// G_IO_ERROR_IS_DIRECTORY error is returned. If trying to overwrite a
	// directory with a directory the G_IO_ERROR_WOULD_MERGE error is returned.
	//
	// If the source is a directory and the target does not exist, or
	// FILE_COPY_OVERWRITE is specified and the target is a file, then the
	// G_IO_ERROR_WOULD_RECURSE error may be returned (if the native move
	// operation isn't available).
	Move(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error
	// OpenReadwrite opens an existing file for reading and writing. The result
	// is a IOStream that can be used to read and write the contents of the
	// file.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be
	// returned. If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error
	// will be returned. Other errors are possible too, and depend on what kind
	// of filesystem the file is on. Note that in many non-local file cases read
	// and write streams are not supported, so make sure you really need to do
	// read and write streaming, rather than just opening for reading or
	// writing.
	OpenReadwrite(ctx context.Context) (*FileIOStream, error)
	// OpenReadwriteAsync: asynchronously opens file for reading and writing.
	//
	// For more details, see g_file_open_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_open_readwrite_finish() to get the result of the operation.
	OpenReadwriteAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// OpenReadwriteFinish finishes an asynchronous file read operation started
	// with g_file_open_readwrite_async().
	OpenReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// PollMountable polls a file of type FILE_TYPE_MOUNTABLE.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	PollMountable(ctx context.Context, callback AsyncReadyCallback)
	// PollMountableFinish finishes a poll operation. See
	// g_file_poll_mountable() for details.
	//
	// Finish an asynchronous poll operation that was polled with
	// g_file_poll_mountable().
	PollMountableFinish(result AsyncResulter) error
	// PrefixMatches checks whether file has the prefix specified by prefix.
	//
	// In other words, if the names of initial elements of file's pathname match
	// prefix. Only full pathname elements are matched, so a path like /foo is
	// not considered a prefix of /foobar, only of /foo/bar.
	//
	// A #GFile is not a prefix of itself. If you want to check for equality,
	// use g_file_equal().
	//
	// This call does no I/O, as it works purely on names. As such it can
	// sometimes return FALSE even if file is inside a prefix (from a filesystem
	// point of view), because the prefix of file is an alias of prefix.
	PrefixMatches(file Filer) bool
	// QueryFilesystemInfo: similar to g_file_query_info(), but obtains
	// information about the filesystem the file is on, rather than the file
	// itself. For instance the amount of space available and the type of the
	// filesystem.
	//
	// The attributes value is a string that specifies the attributes that
	// should be gathered. It is not an error if it's not possible to read a
	// particular requested attribute from a file - it just won't be set.
	// attributes should be a comma-separated list of attributes or attribute
	// wildcards. The wildcard "*" means all attributes, and a wildcard like
	// "filesystem::*" means all attributes in the filesystem namespace. The
	// standard namespace for filesystem attributes is "filesystem". Common
	// attributes of interest are FILE_ATTRIBUTE_FILESYSTEM_SIZE (the total size
	// of the filesystem in bytes), FILE_ATTRIBUTE_FILESYSTEM_FREE (number of
	// bytes available), and FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the
	// filesystem).
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be
	// returned. Other errors are possible too, and depend on what kind of
	// filesystem the file is on.
	QueryFilesystemInfo(ctx context.Context, attributes string) (*FileInfo, error)
	// QueryFilesystemInfoAsync: asynchronously gets the requested information
	// about the filesystem that the specified file is on. The result is a Info
	// object that contains key-value attributes (such as type or size for the
	// file).
	//
	// For more details, see g_file_query_filesystem_info() which is the
	// synchronous version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_query_info_finish() to get the result of the operation.
	QueryFilesystemInfoAsync(ctx context.Context, attributes string, ioPriority int, callback AsyncReadyCallback)
	// QueryFilesystemInfoFinish finishes an asynchronous filesystem info query.
	// See g_file_query_filesystem_info_async().
	QueryFilesystemInfoFinish(res AsyncResulter) (*FileInfo, error)
	// QueryInfo gets the requested information about specified file. The result
	// is a Info object that contains key-value attributes (such as the type or
	// size of the file).
	//
	// The attributes value is a string that specifies the file attributes that
	// should be gathered. It is not an error if it's not possible to read a
	// particular requested attribute from a file - it just won't be set.
	// attributes should be a comma-separated list of attributes or attribute
	// wildcards. The wildcard "*" means all attributes, and a wildcard like
	// "standard::*" means all attributes in the standard namespace. An example
	// attribute query be "standard::*,owner::user". The standard attributes are
	// available as defines, like FILE_ATTRIBUTE_STANDARD_NAME.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// For symlinks, normally the information about the target of the symlink is
	// returned, rather than information about the symlink itself. However if
	// you pass FILE_QUERY_INFO_NOFOLLOW_SYMLINKS in flags the information about
	// the symlink itself will be returned. Also, for symlinks that point to
	// non-existing files the information about the symlink itself will be
	// returned.
	//
	// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be
	// returned. Other errors are possible too, and depend on what kind of
	// filesystem the file is on.
	QueryInfo(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileInfo, error)
	// QueryInfoAsync: asynchronously gets the requested information about
	// specified file. The result is a Info object that contains key-value
	// attributes (such as type or size for the file).
	//
	// For more details, see g_file_query_info() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_query_info_finish() to get the result of the operation.
	QueryInfoAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// QueryInfoFinish finishes an asynchronous file info query. See
	// g_file_query_info_async().
	QueryInfoFinish(res AsyncResulter) (*FileInfo, error)
	// QuerySettableAttributes: obtain the list of settable attributes for the
	// file.
	//
	// Returns the type and full attribute name of all the attributes that can
	// be set on this file. This doesn't mean setting it will always succeed
	// though, you might get an access failure, or some specific file may not
	// support a specific attribute.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	QuerySettableAttributes(ctx context.Context) (*FileAttributeInfoList, error)
	// QueryWritableNamespaces: obtain the list of attribute namespaces where
	// new attributes can be created by a user. An example of this is extended
	// attributes (in the "xattr" namespace).
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	QueryWritableNamespaces(ctx context.Context) (*FileAttributeInfoList, error)
	// ReadAsync: asynchronously opens file for reading.
	//
	// For more details, see g_file_read() which is the synchronous version of
	// this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_read_finish() to get the result of the operation.
	ReadAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// ReadFinish finishes an asynchronous file read operation started with
	// g_file_read_async().
	ReadFinish(res AsyncResulter) (*FileInputStream, error)
	// ReadFn opens a file for reading. The result is a InputStream that can be
	// used to read the contents of the file.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be
	// returned. If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error
	// will be returned. Other errors are possible too, and depend on what kind
	// of filesystem the file is on.
	ReadFn(ctx context.Context) (*FileInputStream, error)
	// Replace returns an output stream for overwriting the file, possibly
	// creating a backup copy of the file first. If the file doesn't exist, it
	// will be created.
	//
	// This will try to replace the file in the safest way possible so that any
	// errors during the writing will not affect an already existing copy of the
	// file. For instance, for local files it may write to a temporary file and
	// then atomically rename over the destination when the stream is closed.
	//
	// By default files created are generally readable by everyone, but if you
	// pass FILE_CREATE_PRIVATE in flags the file will be made readable only to
	// the current user, to the level that is supported on the target
	// filesystem.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// If you pass in a non-NULL etag value and file already exists, then this
	// value is compared to the current entity tag of the file, and if they
	// differ an G_IO_ERROR_WRONG_ETAG error is returned. This generally means
	// that the file has been changed since you last read it. You can get the
	// new etag from g_file_output_stream_get_etag() after you've finished
	// writing and closed the OutputStream. When you load a new file you can use
	// g_file_input_stream_query_info() to get the etag of the file.
	//
	// If make_backup is TRUE, this function will attempt to make a backup of
	// the current file before overwriting it. If this fails a
	// G_IO_ERROR_CANT_CREATE_BACKUP error will be returned. If you want to
	// replace anyway, try again with make_backup set to FALSE.
	//
	// If the file is a directory the G_IO_ERROR_IS_DIRECTORY error will be
	// returned, and if the file is some other form of non-regular file then a
	// G_IO_ERROR_NOT_REGULAR_FILE error will be returned. Some file systems
	// don't allow all file names, and may return an G_IO_ERROR_INVALID_FILENAME
	// error, and if the name is to long G_IO_ERROR_FILENAME_TOO_LONG will be
	// returned. Other errors are possible too, and depend on what kind of
	// filesystem the file is on.
	Replace(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileOutputStream, error)
	// ReplaceAsync: asynchronously overwrites the file, replacing the contents,
	// possibly creating a backup copy of the file first.
	//
	// For more details, see g_file_replace() which is the synchronous version
	// of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_replace_finish() to get the result of the operation.
	ReplaceAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// ReplaceFinish finishes an asynchronous file replace operation started
	// with g_file_replace_async().
	ReplaceFinish(res AsyncResulter) (*FileOutputStream, error)
	// ReplaceReadwrite returns an output stream for overwriting the file in
	// readwrite mode, possibly creating a backup copy of the file first. If the
	// file doesn't exist, it will be created.
	//
	// For details about the behaviour, see g_file_replace() which does the same
	// thing but returns an output stream only.
	//
	// Note that in many non-local file cases read and write streams are not
	// supported, so make sure you really need to do read and write streaming,
	// rather than just opening for reading or writing.
	ReplaceReadwrite(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileIOStream, error)
	// ReplaceReadwriteAsync: asynchronously overwrites the file in read-write
	// mode, replacing the contents, possibly creating a backup copy of the file
	// first.
	//
	// For more details, see g_file_replace_readwrite() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_replace_readwrite_finish() to get the result of the
	// operation.
	ReplaceReadwriteAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// ReplaceReadwriteFinish finishes an asynchronous file replace operation
	// started with g_file_replace_readwrite_async().
	ReplaceReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// ResolveRelativePath resolves a relative path for file to an absolute
	// path.
	//
	// This call does no blocking I/O.
	ResolveRelativePath(relativePath string) Filer
	// SetAttribute sets an attribute in the file with attribute name attribute
	// to value_p.
	//
	// Some attributes can be unset by setting type to
	// G_FILE_ATTRIBUTE_TYPE_INVALID and value_p to NULL.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttribute(ctx context.Context, attribute string, typ FileAttributeType, valueP cgo.Handle, flags FileQueryInfoFlags) error
	// SetAttributesAsync: asynchronously sets the attributes of file with info.
	//
	// For more details, see g_file_set_attributes_from_info(), which is the
	// synchronous version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_set_attributes_finish() to get the result of the operation.
	SetAttributesAsync(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// SetAttributesFinish finishes setting an attribute started in
	// g_file_set_attributes_async().
	SetAttributesFinish(result AsyncResulter) (*FileInfo, error)
	// SetAttributesFromInfo tries to set all attributes in the Info on the
	// target values, not stopping on the first error.
	//
	// If there is any error during this operation then error will be set to the
	// first error. Error on particular fields are flagged by setting the
	// "status" field in the attribute value to
	// G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
	// further errors.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetAttributesFromInfo(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags) error
	// SetDisplayName renames file to the specified display name.
	//
	// The display name is converted from UTF-8 to the correct encoding for the
	// target filesystem if possible and the file is renamed to this.
	//
	// If you want to implement a rename operation in the user interface the
	// edit name (FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the
	// initial value in the rename widget, and then the result after editing
	// should be passed to g_file_set_display_name().
	//
	// On success the resulting converted filename is returned.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	SetDisplayName(ctx context.Context, displayName string) (Filer, error)
	// SetDisplayNameAsync: asynchronously sets the display name for a given
	// #GFile.
	//
	// For more details, see g_file_set_display_name() which is the synchronous
	// version of this call.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_set_display_name_finish() to get the result of the operation.
	SetDisplayNameAsync(ctx context.Context, displayName string, ioPriority int, callback AsyncReadyCallback)
	// SetDisplayNameFinish finishes setting a display name started with
	// g_file_set_display_name_async().
	SetDisplayNameFinish(res AsyncResulter) (Filer, error)
	// StartMountable starts a file of type FILE_TYPE_MOUNTABLE. Using
	// start_operation, you can request callbacks when, for instance, passwords
	// are needed during authentication.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_mount_mountable_finish() to get the result of the operation.
	StartMountable(ctx context.Context, flags DriveStartFlags, startOperation *MountOperation, callback AsyncReadyCallback)
	// StartMountableFinish finishes a start operation. See
	// g_file_start_mountable() for details.
	//
	// Finish an asynchronous start operation that was started with
	// g_file_start_mountable().
	StartMountableFinish(result AsyncResulter) error
	// StopMountable stops a file of type FILE_TYPE_MOUNTABLE.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_stop_mountable_finish() to get the result of the operation.
	StopMountable(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// StopMountableFinish finishes a stop operation, see
	// g_file_stop_mountable() for details.
	//
	// Finish an asynchronous stop operation that was started with
	// g_file_stop_mountable().
	StopMountableFinish(result AsyncResulter) error
	// Trash sends file to the "Trashcan", if possible. This is similar to
	// deleting it, but the user can recover it before emptying the trashcan.
	// Not all file systems support trashing, so this call can return the
	// G_IO_ERROR_NOT_SUPPORTED error. Since GLib 2.66, the x-gvfs-notrash unix
	// mount option can be used to disable g_file_trash() support for certain
	// mounts, the G_IO_ERROR_NOT_SUPPORTED error will be returned in that case.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	Trash(ctx context.Context) error
	// TrashAsync: asynchronously sends file to the Trash location, if possible.
	TrashAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// TrashFinish finishes an asynchronous file trashing operation, started
	// with g_file_trash_async().
	TrashFinish(result AsyncResulter) error
	// UnmountMountable unmounts a file of type G_FILE_TYPE_MOUNTABLE.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_unmount_mountable_finish() to get the result of the
	// operation.
	//
	// Deprecated: Use g_file_unmount_mountable_with_operation() instead.
	UnmountMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback)
	// UnmountMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable().
	//
	// Deprecated: Use g_file_unmount_mountable_with_operation_finish() instead.
	UnmountMountableFinish(result AsyncResulter) error
	// UnmountMountableWithOperation unmounts a file of type
	// FILE_TYPE_MOUNTABLE.
	//
	// If cancellable is not NULL, then the operation can be cancelled by
	// triggering the cancellable object from another thread. If the operation
	// was cancelled, the error G_IO_ERROR_CANCELLED will be returned.
	//
	// When the operation is finished, callback will be called. You can then
	// call g_file_unmount_mountable_finish() to get the result of the
	// operation.
	UnmountMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// UnmountMountableWithOperationFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	//
	// Finish an asynchronous unmount operation that was started with
	// g_file_unmount_mountable_with_operation().
	UnmountMountableWithOperationFinish(result AsyncResulter) error
}

// File is a high level abstraction for manipulating files on a virtual file
// system. #GFiles are lightweight, immutable objects that do no I/O upon
// creation. It is necessary to understand that #GFile objects do not represent
// files, merely an identifier for a file. All file content I/O is implemented
// as streaming operations (see Stream and Stream).
//
// To construct a #GFile, you can use:
//
// - g_file_new_for_path() if you have a path.
//
// - g_file_new_for_uri() if you have a URI.
//
// - g_file_new_for_commandline_arg() for a command line argument.
//
// - g_file_new_tmp() to create a temporary file from a template.
//
// - g_file_parse_name() from a UTF-8 string gotten from
// g_file_get_parse_name().
//
// - g_file_new_build_filename() to create a file from path elements.
//
// One way to think of a #GFile is as an abstraction of a pathname. For normal
// files the system pathname is what is stored internally, but as #GFiles are
// extensible it could also be something else that corresponds to a pathname in
// a userspace implementation of a filesystem.
//
// #GFiles make up hierarchies of directories and files that correspond to the
// files on a filesystem. You can move through the file system with #GFile using
// g_file_get_parent() to get an identifier for the parent directory,
// g_file_get_child() to get a child within a directory,
// g_file_resolve_relative_path() to resolve a relative path between two
// #GFiles. There can be multiple hierarchies, so you may not end up at the same
// root if you repeatedly call g_file_get_parent() on two different files.
//
// All #GFiles have a basename (get with g_file_get_basename()). These names are
// byte strings that are used to identify the file on the filesystem (relative
// to its parent directory) and there is no guarantees that they have any
// particular charset encoding or even make any sense at all. If you want to use
// filenames in a user interface you should use the display name that you can
// get by requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with
// g_file_query_info(). This is guaranteed to be in UTF-8 and can be used in a
// user interface. But always store the real basename or the #GFile to use to
// actually access the file, because there is no way to go from a display name
// to the actual name.
//
// Using #GFile as an identifier has the same weaknesses as using a path in that
// there may be multiple aliases for the same file. For instance, hard or soft
// links may cause two different #GFiles to refer to the same file. Other
// possible causes for aliases are: case insensitive filesystems, short and long
// names on FAT/NTFS, or bind mounts in Linux. If you want to check if two
// #GFiles point to the same file you can query for the G_FILE_ATTRIBUTE_ID_FILE
// attribute. Note that #GFile does some trivial canonicalization of pathnames
// passed in, so that trivial differences in the path string used at creation
// (duplicated slashes, slash at end of path, "." or ".." path segments, etc)
// does not create different #GFiles.
//
// Many #GFile operations have both synchronous and asynchronous versions to
// suit your application. Asynchronous versions of synchronous functions simply
// have _async() appended to their function names. The asynchronous I/O
// functions call a ReadyCallback which is then used to finalize the operation,
// producing a GAsyncResult which is then passed to the function's matching
// _finish() operation.
//
// It is highly recommended to use asynchronous calls when running within a
// shared main loop, such as in the main thread of an application. This avoids
// I/O operations blocking other sources on the main loop from being dispatched.
// Synchronous I/O operations should be performed from worker threads. See the
// [introduction to asynchronous programming section][async-programming] for
// more.
//
// Some #GFile operations almost always take a noticeable amount of time, and so
// do not have synchronous analogs. Notable cases include:
//
// - g_file_mount_mountable() to mount a mountable file.
//
// - g_file_unmount_mountable_with_operation() to unmount a mountable file.
//
// - g_file_eject_mountable_with_operation() to eject a mountable file.
//
//
// Entity Tags
//
// One notable feature of #GFiles are entity tags, or "etags" for short. Entity
// tags are somewhat like a more abstract version of the traditional mtime, and
// can be used to quickly determine if the file has been modified from the
// version on the file system. See the HTTP 1.1 specification
// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) for HTTP Etag
// headers, which are a very similar concept.
type File struct {
	*externglib.Object
}

// Filer describes File's abstract methods.
type Filer interface {
	externglib.Objector

	// AppendTo gets an output stream for appending data to the file.
	AppendTo(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error)
	// AppendToAsync: asynchronously opens file for appending.
	AppendToAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// AppendToFinish finishes an asynchronous file append operation started
	// with g_file_append_to_async().
	AppendToFinish(res AsyncResulter) (*FileOutputStream, error)
	// BuildAttributeListForCopy prepares the file attribute query string for
	// copying to file.
	BuildAttributeListForCopy(ctx context.Context, flags FileCopyFlags) (string, error)
	// Copy copies the file source to the location specified by destination.
	Copy(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error
	// CopyAttributes copies the file attributes from source to destination.
	CopyAttributes(ctx context.Context, destination Filer, flags FileCopyFlags) error
	// CopyFinish finishes copying the file started with g_file_copy_async().
	CopyFinish(res AsyncResulter) error
	// Create creates a new file and returns an output stream for writing to it.
	Create(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error)
	// CreateAsync: asynchronously creates a new file and returns an output
	// stream for writing to it.
	CreateAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// CreateFinish finishes an asynchronous file create operation started with
	// g_file_create_async().
	CreateFinish(res AsyncResulter) (*FileOutputStream, error)
	// CreateReadwrite creates a new file and returns a stream for reading and
	// writing to it.
	CreateReadwrite(ctx context.Context, flags FileCreateFlags) (*FileIOStream, error)
	// CreateReadwriteAsync: asynchronously creates a new file and returns a
	// stream for reading and writing to it.
	CreateReadwriteAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// CreateReadwriteFinish finishes an asynchronous file create operation
	// started with g_file_create_readwrite_async().
	CreateReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// Delete deletes a file.
	Delete(ctx context.Context) error
	// DeleteAsync: asynchronously delete a file.
	DeleteAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// DeleteFinish finishes deleting a file started with g_file_delete_async().
	DeleteFinish(result AsyncResulter) error
	// Dup duplicates a #GFile handle.
	Dup() Filer
	// EjectMountable starts an asynchronous eject on a mountable.
	EjectMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback)
	// EjectMountableFinish finishes an asynchronous eject operation started by
	// g_file_eject_mountable().
	EjectMountableFinish(result AsyncResulter) error
	// EjectMountableWithOperation starts an asynchronous eject on a mountable.
	EjectMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// EjectMountableWithOperationFinish finishes an asynchronous eject
	// operation started by g_file_eject_mountable_with_operation().
	EjectMountableWithOperationFinish(result AsyncResulter) error
	// EnumerateChildren gets the requested information about the files in a
	// directory.
	EnumerateChildren(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileEnumerator, error)
	// EnumerateChildrenAsync: asynchronously gets the requested information
	// about the files in a directory.
	EnumerateChildrenAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// EnumerateChildrenFinish finishes an async enumerate children operation.
	EnumerateChildrenFinish(res AsyncResulter) (*FileEnumerator, error)
	// Equal checks if the two given #GFiles refer to the same file.
	Equal(file2 Filer) bool
	// FindEnclosingMount gets a #GMount for the #GFile.
	FindEnclosingMount(ctx context.Context) (Mounter, error)
	// FindEnclosingMountAsync: asynchronously gets the mount for the file.
	FindEnclosingMountAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// FindEnclosingMountFinish finishes an asynchronous find mount request.
	FindEnclosingMountFinish(res AsyncResulter) (Mounter, error)
	// Basename gets the base name (the last component of the path) for a given
	// #GFile.
	Basename() string
	// Child gets a child of file with basename equal to name.
	Child(name string) Filer
	// ChildForDisplayName gets the child of file for a given display_name (i.e.
	ChildForDisplayName(displayName string) (Filer, error)
	// Parent gets the parent directory for the file.
	Parent() Filer
	// ParseName gets the parse name of the file.
	ParseName() string
	// Path gets the local pathname for #GFile, if one exists.
	Path() string
	// RelativePath gets the path for descendant relative to parent.
	RelativePath(descendant Filer) string
	// URI gets the URI for the file.
	URI() string
	// URIScheme gets the URI scheme for a #GFile.
	URIScheme() string
	// HasParent checks if file has a parent, and optionally, if it is parent.
	HasParent(parent Filer) bool
	// HasPrefix checks whether file has the prefix specified by prefix.
	HasPrefix(prefix Filer) bool
	// HasURIScheme checks to see if a #GFile has a given URI scheme.
	HasURIScheme(uriScheme string) bool
	// Hash creates a hash value for a #GFile.
	Hash() uint
	// IsNative checks to see if a file is native to the platform.
	IsNative() bool
	// LoadBytes loads the contents of file and returns it as #GBytes.
	LoadBytes(ctx context.Context) (string, *glib.Bytes, error)
	// LoadBytesAsync: asynchronously loads the contents of file as #GBytes.
	LoadBytesAsync(ctx context.Context, callback AsyncReadyCallback)
	// LoadBytesFinish completes an asynchronous request to
	// g_file_load_bytes_async().
	LoadBytesFinish(result AsyncResulter) (string, *glib.Bytes, error)
	// LoadContents loads the content of the file into memory.
	LoadContents(ctx context.Context) ([]byte, string, error)
	// LoadContentsAsync starts an asynchronous load of the file's contents.
	LoadContentsAsync(ctx context.Context, callback AsyncReadyCallback)
	// LoadContentsFinish finishes an asynchronous load of the file's contents.
	LoadContentsFinish(res AsyncResulter) ([]byte, string, error)
	// LoadPartialContentsFinish finishes an asynchronous partial load operation
	// that was started with g_file_load_partial_contents_async().
	LoadPartialContentsFinish(res AsyncResulter) ([]byte, string, error)
	// MakeDirectory creates a directory.
	MakeDirectory(ctx context.Context) error
	// MakeDirectoryAsync: asynchronously creates a directory.
	MakeDirectoryAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// MakeDirectoryFinish finishes an asynchronous directory creation, started
	// with g_file_make_directory_async().
	MakeDirectoryFinish(result AsyncResulter) error
	// MakeDirectoryWithParents creates a directory and any parent directories
	// that may not exist similar to 'mkdir -p'.
	MakeDirectoryWithParents(ctx context.Context) error
	// MakeSymbolicLink creates a symbolic link named file which contains the
	// string symlink_value.
	MakeSymbolicLink(ctx context.Context, symlinkValue string) error
	// MeasureDiskUsageFinish collects the results from an earlier call to
	// g_file_measure_disk_usage_async().
	MeasureDiskUsageFinish(result AsyncResulter) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error)
	// Monitor obtains a file or directory monitor for the given file, depending
	// on the type of the file.
	Monitor(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error)
	// MonitorDirectory obtains a directory monitor for the given file.
	MonitorDirectory(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error)
	// MonitorFile obtains a file monitor for the given file.
	MonitorFile(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error)
	// MountEnclosingVolume starts a mount_operation, mounting the volume that
	// contains the file location.
	MountEnclosingVolume(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// MountEnclosingVolumeFinish finishes a mount operation started by
	// g_file_mount_enclosing_volume().
	MountEnclosingVolumeFinish(result AsyncResulter) error
	// MountMountable mounts a file of type G_FILE_TYPE_MOUNTABLE.
	MountMountable(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// MountMountableFinish finishes a mount operation.
	MountMountableFinish(result AsyncResulter) (Filer, error)
	// Move tries to move the file or directory source to the location specified
	// by destination.
	Move(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error
	// OpenReadwrite opens an existing file for reading and writing.
	OpenReadwrite(ctx context.Context) (*FileIOStream, error)
	// OpenReadwriteAsync: asynchronously opens file for reading and writing.
	OpenReadwriteAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// OpenReadwriteFinish finishes an asynchronous file read operation started
	// with g_file_open_readwrite_async().
	OpenReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// PeekPath: exactly like g_file_get_path(), but caches the result via
	// g_object_set_qdata_full().
	PeekPath() string
	// PollMountable polls a file of type FILE_TYPE_MOUNTABLE.
	PollMountable(ctx context.Context, callback AsyncReadyCallback)
	// PollMountableFinish finishes a poll operation.
	PollMountableFinish(result AsyncResulter) error
	// QueryDefaultHandler returns the Info that is registered as the default
	// application to handle the file specified by file.
	QueryDefaultHandler(ctx context.Context) (AppInfor, error)
	// QueryDefaultHandlerAsync: async version of
	// g_file_query_default_handler().
	QueryDefaultHandlerAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// QueryDefaultHandlerFinish finishes a g_file_query_default_handler_async()
	// operation.
	QueryDefaultHandlerFinish(result AsyncResulter) (AppInfor, error)
	// QueryExists: utility function to check if a particular file exists.
	QueryExists(ctx context.Context) bool
	// QueryFileType: utility function to inspect the Type of a file.
	QueryFileType(ctx context.Context, flags FileQueryInfoFlags) FileType
	// QueryFilesystemInfo: similar to g_file_query_info(), but obtains
	// information about the filesystem the file is on, rather than the file
	// itself.
	QueryFilesystemInfo(ctx context.Context, attributes string) (*FileInfo, error)
	// QueryFilesystemInfoAsync: asynchronously gets the requested information
	// about the filesystem that the specified file is on.
	QueryFilesystemInfoAsync(ctx context.Context, attributes string, ioPriority int, callback AsyncReadyCallback)
	// QueryFilesystemInfoFinish finishes an asynchronous filesystem info query.
	QueryFilesystemInfoFinish(res AsyncResulter) (*FileInfo, error)
	// QueryInfo gets the requested information about specified file.
	QueryInfo(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileInfo, error)
	// QueryInfoAsync: asynchronously gets the requested information about
	// specified file.
	QueryInfoAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// QueryInfoFinish finishes an asynchronous file info query.
	QueryInfoFinish(res AsyncResulter) (*FileInfo, error)
	// QuerySettableAttributes: obtain the list of settable attributes for the
	// file.
	QuerySettableAttributes(ctx context.Context) (*FileAttributeInfoList, error)
	// QueryWritableNamespaces: obtain the list of attribute namespaces where
	// new attributes can be created by a user.
	QueryWritableNamespaces(ctx context.Context) (*FileAttributeInfoList, error)
	// Read opens a file for reading.
	Read(ctx context.Context) (*FileInputStream, error)
	// ReadAsync: asynchronously opens file for reading.
	ReadAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// ReadFinish finishes an asynchronous file read operation started with
	// g_file_read_async().
	ReadFinish(res AsyncResulter) (*FileInputStream, error)
	// Replace returns an output stream for overwriting the file, possibly
	// creating a backup copy of the file first.
	Replace(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileOutputStream, error)
	// ReplaceAsync: asynchronously overwrites the file, replacing the contents,
	// possibly creating a backup copy of the file first.
	ReplaceAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// ReplaceContents replaces the contents of file with contents of length
	// bytes.
	ReplaceContents(ctx context.Context, contents, etag string, makeBackup bool, flags FileCreateFlags) (string, error)
	// ReplaceContentsAsync starts an asynchronous replacement of file with the
	// given contents of length bytes.
	ReplaceContentsAsync(ctx context.Context, contents, etag string, makeBackup bool, flags FileCreateFlags, callback AsyncReadyCallback)
	// ReplaceContentsBytesAsync: same as g_file_replace_contents_async() but
	// takes a #GBytes input instead.
	ReplaceContentsBytesAsync(ctx context.Context, contents *glib.Bytes, etag string, makeBackup bool, flags FileCreateFlags, callback AsyncReadyCallback)
	// ReplaceContentsFinish finishes an asynchronous replace of the given file.
	ReplaceContentsFinish(res AsyncResulter) (string, error)
	// ReplaceFinish finishes an asynchronous file replace operation started
	// with g_file_replace_async().
	ReplaceFinish(res AsyncResulter) (*FileOutputStream, error)
	// ReplaceReadwrite returns an output stream for overwriting the file in
	// readwrite mode, possibly creating a backup copy of the file first.
	ReplaceReadwrite(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileIOStream, error)
	// ReplaceReadwriteAsync: asynchronously overwrites the file in read-write
	// mode, replacing the contents, possibly creating a backup copy of the file
	// first.
	ReplaceReadwriteAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback)
	// ReplaceReadwriteFinish finishes an asynchronous file replace operation
	// started with g_file_replace_readwrite_async().
	ReplaceReadwriteFinish(res AsyncResulter) (*FileIOStream, error)
	// ResolveRelativePath resolves a relative path for file to an absolute
	// path.
	ResolveRelativePath(relativePath string) Filer
	// SetAttribute sets an attribute in the file with attribute name attribute
	// to value_p.
	SetAttribute(ctx context.Context, attribute string, typ FileAttributeType, valueP cgo.Handle, flags FileQueryInfoFlags) error
	// SetAttributeByteString sets attribute of type
	// G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to value.
	SetAttributeByteString(ctx context.Context, attribute, value string, flags FileQueryInfoFlags) error
	// SetAttributeInt32 sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT32 to
	// value.
	SetAttributeInt32(ctx context.Context, attribute string, value int32, flags FileQueryInfoFlags) error
	// SetAttributeInt64 sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT64 to
	// value.
	SetAttributeInt64(ctx context.Context, attribute string, value int64, flags FileQueryInfoFlags) error
	// SetAttributeString sets attribute of type G_FILE_ATTRIBUTE_TYPE_STRING to
	// value.
	SetAttributeString(ctx context.Context, attribute, value string, flags FileQueryInfoFlags) error
	// SetAttributeUint32 sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT32 to
	// value.
	SetAttributeUint32(ctx context.Context, attribute string, value uint32, flags FileQueryInfoFlags) error
	// SetAttributeUint64 sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT64 to
	// value.
	SetAttributeUint64(ctx context.Context, attribute string, value uint64, flags FileQueryInfoFlags) error
	// SetAttributesAsync: asynchronously sets the attributes of file with info.
	SetAttributesAsync(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback)
	// SetAttributesFinish finishes setting an attribute started in
	// g_file_set_attributes_async().
	SetAttributesFinish(result AsyncResulter) (*FileInfo, error)
	// SetAttributesFromInfo tries to set all attributes in the Info on the
	// target values, not stopping on the first error.
	SetAttributesFromInfo(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags) error
	// SetDisplayName renames file to the specified display name.
	SetDisplayName(ctx context.Context, displayName string) (Filer, error)
	// SetDisplayNameAsync: asynchronously sets the display name for a given
	// #GFile.
	SetDisplayNameAsync(ctx context.Context, displayName string, ioPriority int, callback AsyncReadyCallback)
	// SetDisplayNameFinish finishes setting a display name started with
	// g_file_set_display_name_async().
	SetDisplayNameFinish(res AsyncResulter) (Filer, error)
	// StartMountable starts a file of type FILE_TYPE_MOUNTABLE.
	StartMountable(ctx context.Context, flags DriveStartFlags, startOperation *MountOperation, callback AsyncReadyCallback)
	// StartMountableFinish finishes a start operation.
	StartMountableFinish(result AsyncResulter) error
	// StopMountable stops a file of type FILE_TYPE_MOUNTABLE.
	StopMountable(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// StopMountableFinish finishes a stop operation, see
	// g_file_stop_mountable() for details.
	StopMountableFinish(result AsyncResulter) error
	// SupportsThreadContexts checks if file supports [thread-default
	// contexts][g-main-context-push-thread-default-context].
	SupportsThreadContexts() bool
	// Trash sends file to the "Trashcan", if possible.
	Trash(ctx context.Context) error
	// TrashAsync: asynchronously sends file to the Trash location, if possible.
	TrashAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback)
	// TrashFinish finishes an asynchronous file trashing operation, started
	// with g_file_trash_async().
	TrashFinish(result AsyncResulter) error
	// UnmountMountable unmounts a file of type G_FILE_TYPE_MOUNTABLE.
	UnmountMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback)
	// UnmountMountableFinish finishes an unmount operation, see
	// g_file_unmount_mountable() for details.
	UnmountMountableFinish(result AsyncResulter) error
	// UnmountMountableWithOperation unmounts a file of type
	// FILE_TYPE_MOUNTABLE.
	UnmountMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback)
	// UnmountMountableWithOperationFinish finishes an unmount operation, see
	// g_file_unmount_mountable_with_operation() for details.
	UnmountMountableWithOperationFinish(result AsyncResulter) error
}

var _ Filer = (*File)(nil)

func wrapFile(obj *externglib.Object) *File {
	return &File{
		Object: obj,
	}
}

func marshalFiler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapFile(obj), nil
}

// AppendTo gets an output stream for appending data to the file. If the file
// doesn't already exist it is created.
//
// By default files created are generally readable by everyone, but if you pass
// FILE_CREATE_PRIVATE in flags the file will be made readable only to the
// current user, to the level that is supported on the target filesystem.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// Some file systems don't allow all file names, and may return an
// G_IO_ERROR_INVALID_FILENAME error. If the file is a directory the
// G_IO_ERROR_IS_DIRECTORY error will be returned. Other errors are possible
// too, and depend on what kind of filesystem the file is on.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//
func (file *File) AppendTo(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg2 *C.GCancellable      // out
	var _arg1 C.GFileCreateFlags   // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)

	_cret = C.g_file_append_to(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// AppendToAsync: asynchronously opens file for appending.
//
// For more details, see g_file_append_to() which is the synchronous version of
// this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_append_to_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) AppendToAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_append_to_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// AppendToFinish finishes an asynchronous file append operation started with
// g_file_append_to_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) AppendToFinish(res AsyncResulter) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_append_to_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// BuildAttributeListForCopy prepares the file attribute query string for
// copying to file.
//
// This function prepares an attribute query string to be passed to
// g_file_query_info() to get a list of attributes normally copied with the file
// (see g_file_copy_attributes() for the detailed description). This function is
// used by the implementation of g_file_copy_attributes() and is useful when one
// needs to query and set the attributes in two stages (e.g., for recursive move
// of a directory).
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CopyFlags.
//
func (file *File) BuildAttributeListForCopy(ctx context.Context, flags FileCopyFlags) (string, error) {
	var _arg0 *C.GFile         // out
	var _arg2 *C.GCancellable  // out
	var _arg1 C.GFileCopyFlags // out
	var _cret *C.char          // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCopyFlags(flags)

	_cret = C.g_file_build_attribute_list_for_copy(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// Copy copies the file source to the location specified by destination. Can not
// handle recursive copies of directories.
//
// If the flag FILE_COPY_OVERWRITE is specified an already existing destination
// file is overwritten.
//
// If the flag FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks will be
// copied as symlinks, otherwise the target of the source symlink will be
// copied.
//
// If the flag FILE_COPY_ALL_METADATA is specified then all the metadata that is
// possible to copy is copied, not just the default subset (which, for instance,
// does not include the owner, see Info).
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If progress_callback is not NULL, then the operation can be monitored by
// setting this to a ProgressCallback function. progress_callback_data will be
// passed to this function. It is guaranteed that this callback will be called
// after all data has been transferred with the total number of bytes copied
// during the operation.
//
// If the source file does not exist, then the G_IO_ERROR_NOT_FOUND error is
// returned, independent on the status of the destination.
//
// If FILE_COPY_OVERWRITE is not specified and the target exists, then the error
// G_IO_ERROR_EXISTS is returned.
//
// If trying to overwrite a file over a directory, the G_IO_ERROR_IS_DIRECTORY
// error is returned. If trying to overwrite a directory with a directory the
// G_IO_ERROR_WOULD_MERGE error is returned.
//
// If the source is a directory and the target does not exist, or
// FILE_COPY_OVERWRITE is specified and the target is a file, then the
// G_IO_ERROR_WOULD_RECURSE error is returned.
//
// If you are interested in copying the #GFile object itself (not the on-disk
// file), see g_file_dup().
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - destination #GFile.
//    - flags: set of CopyFlags.
//    - progressCallback: function to callback with progress information, or
//    NULL if progress information is not needed.
//
func (source *File) Copy(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile                // out
	var _arg3 *C.GCancellable         // out
	var _arg1 *C.GFile                // out
	var _arg2 C.GFileCopyFlags        // out
	var _arg4 C.GFileProgressCallback // out
	var _arg5 C.gpointer
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(source.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	if progressCallback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_FileProgressCallback)
		_arg5 = C.gpointer(gbox.Assign(progressCallback))
		defer gbox.Delete(uintptr(_arg5))
	}

	C.g_file_copy(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(source)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(destination)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(progressCallback)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CopyAttributes copies the file attributes from source to destination.
//
// Normally only a subset of the file attributes are copied, those that are
// copies in a normal file copy operation (which for instance does not include
// e.g. owner). However if FILE_COPY_ALL_METADATA is specified in flags, then
// all the metadata that is possible to copy is copied. This is useful when
// implementing move by copy + delete source.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - destination to copy attributes to.
//    - flags: set of CopyFlags.
//
func (source *File) CopyAttributes(ctx context.Context, destination Filer, flags FileCopyFlags) error {
	var _arg0 *C.GFile         // out
	var _arg3 *C.GCancellable  // out
	var _arg1 *C.GFile         // out
	var _arg2 C.GFileCopyFlags // out
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(source.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)

	C.g_file_copy_attributes(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(source)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(destination)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CopyFinish finishes copying the file started with g_file_copy_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) CopyFinish(res AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_copy_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Create creates a new file and returns an output stream for writing to it. The
// file must not already exist.
//
// By default files created are generally readable by everyone, but if you pass
// FILE_CREATE_PRIVATE in flags the file will be made readable only to the
// current user, to the level that is supported on the target filesystem.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If a file or directory with this name already exists the G_IO_ERROR_EXISTS
// error will be returned. Some file systems don't allow all file names, and may
// return an G_IO_ERROR_INVALID_FILENAME error, and if the name is to long
// G_IO_ERROR_FILENAME_TOO_LONG will be returned. Other errors are possible too,
// and depend on what kind of filesystem the file is on.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//
func (file *File) Create(ctx context.Context, flags FileCreateFlags) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg2 *C.GCancellable      // out
	var _arg1 C.GFileCreateFlags   // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)

	_cret = C.g_file_create(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// CreateAsync: asynchronously creates a new file and returns an output stream
// for writing to it. The file must not already exist.
//
// For more details, see g_file_create() which is the synchronous version of
// this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_create_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) CreateAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_create_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// CreateFinish finishes an asynchronous file create operation started with
// g_file_create_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) CreateFinish(res AsyncResulter) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_create_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// CreateReadwrite creates a new file and returns a stream for reading and
// writing to it. The file must not already exist.
//
// By default files created are generally readable by everyone, but if you pass
// FILE_CREATE_PRIVATE in flags the file will be made readable only to the
// current user, to the level that is supported on the target filesystem.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If a file or directory with this name already exists, the G_IO_ERROR_EXISTS
// error will be returned. Some file systems don't allow all file names, and may
// return an G_IO_ERROR_INVALID_FILENAME error, and if the name is too long,
// G_IO_ERROR_FILENAME_TOO_LONG will be returned. Other errors are possible too,
// and depend on what kind of filesystem the file is on.
//
// Note that in many non-local file cases read and write streams are not
// supported, so make sure you really need to do read and write streaming,
// rather than just opening for reading or writing.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//
func (file *File) CreateReadwrite(ctx context.Context, flags FileCreateFlags) (*FileIOStream, error) {
	var _arg0 *C.GFile           // out
	var _arg2 *C.GCancellable    // out
	var _arg1 C.GFileCreateFlags // out
	var _cret *C.GFileIOStream   // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)

	_cret = C.g_file_create_readwrite(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// CreateReadwriteAsync: asynchronously creates a new file and returns a stream
// for reading and writing to it. The file must not already exist.
//
// For more details, see g_file_create_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_create_readwrite_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of CreateFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) CreateReadwriteAsync(ctx context.Context, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GFileCreateFlags    // out
	var _arg2 C.int                 // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileCreateFlags(flags)
	_arg2 = C.int(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_create_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// CreateReadwriteFinish finishes an asynchronous file create operation started
// with g_file_create_readwrite_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) CreateReadwriteFinish(res AsyncResulter) (*FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_create_readwrite_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// Delete deletes a file. If the file is a directory, it will only be deleted if
// it is empty. This has the same semantics as g_unlink().
//
// If file doesnâ€™t exist, G_IO_ERROR_NOT_FOUND will be returned. This allows for
// deletion to be implemented avoiding time-of-check to time-of-use races
// (https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use):
//
//    g_autoptr(GError) local_error = NULL;
//    if (!g_file_delete (my_file, my_cancellable, &local_error) &&
//        !g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND))
//      {
//        // deletion failed for some reason other than the file not existing:
//        // so report the error
//        g_warning ("Failed to delete s: s",
//                   g_file_peek_path (my_file), local_error->message);
//      }
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) Delete(ctx context.Context) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	C.g_file_delete(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DeleteAsync: asynchronously delete a file. If the file is a directory, it
// will only be deleted if it is empty. This has the same semantics as
// g_unlink().
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) DeleteAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_delete_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// DeleteFinish finishes deleting a file started with g_file_delete_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) DeleteFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_delete_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Dup duplicates a #GFile handle. This operation does not duplicate the actual
// file or directory represented by the #GFile; see g_file_copy() if attempting
// to copy a file.
//
// g_file_dup() is useful when a second handle is needed to the same underlying
// file, for use in a separate thread (#GFile is not thread-safe). For use
// within the same thread, use g_object_ref() to increment the existing objectâ€™s
// reference count.
//
// This call does no blocking I/O.
func (file *File) Dup() Filer {
	var _arg0 *C.GFile // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_dup(_arg0)
	runtime.KeepAlive(file)

	var _ret Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}

	return _ret
}

// EjectMountable starts an asynchronous eject on a mountable. When this
// operation has completed, callback will be called with user_user data, and the
// operation can be finalized with g_file_eject_mountable_finish().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// Deprecated: Use g_file_eject_mountable_with_operation() instead.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) EjectMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountUnmountFlags(flags)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_eject_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(callback)
}

// EjectMountableFinish finishes an asynchronous eject operation started by
// g_file_eject_mountable().
//
// Deprecated: Use g_file_eject_mountable_with_operation_finish() instead.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) EjectMountableFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_eject_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// EjectMountableWithOperation starts an asynchronous eject on a mountable. When
// this operation has completed, callback will be called with user_user data,
// and the operation can be finalized with
// g_file_eject_mountable_with_operation_finish().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - mountOperation: Operation, or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) EjectMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountUnmountFlags(flags)
	if mountOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_eject_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mountOperation)
	runtime.KeepAlive(callback)
}

// EjectMountableWithOperationFinish finishes an asynchronous eject operation
// started by g_file_eject_mountable_with_operation().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) EjectMountableWithOperationFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_eject_mountable_with_operation_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// EnumerateChildren gets the requested information about the files in a
// directory. The result is a Enumerator object that will give out Info objects
// for all the files in the directory.
//
// The attributes value is a string that specifies the file attributes that
// should be gathered. It is not an error if it's not possible to read a
// particular requested attribute from a file - it just won't be set. attributes
// should be a comma-separated list of attributes or attribute wildcards. The
// wildcard "*" means all attributes, and a wildcard like "standard::*" means
// all attributes in the standard namespace. An example attribute query be
// "standard::*,owner::user". The standard attributes are available as defines,
// like FILE_ATTRIBUTE_STANDARD_NAME.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
// If the file is not a directory, the G_IO_ERROR_NOT_DIRECTORY error will be
// returned. Other errors are possible too.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//    - flags: set of QueryInfoFlags.
//
func (file *File) EnumerateChildren(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileEnumerator, error) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _cret *C.GFileEnumerator    // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)

	_cret = C.g_file_enumerate_children(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(flags)

	var _fileEnumerator *FileEnumerator // out
	var _goerr error                    // out

	_fileEnumerator = wrapFileEnumerator(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileEnumerator, _goerr
}

// EnumerateChildrenAsync: asynchronously gets the requested information about
// the files in a directory. The result is a Enumerator object that will give
// out Info objects for all the files in the directory.
//
// For more details, see g_file_enumerate_children() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_enumerate_children_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//    - flags: set of QueryInfoFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) EnumerateChildrenAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_enumerate_children_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// EnumerateChildrenFinish finishes an async enumerate children operation. See
// g_file_enumerate_children_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) EnumerateChildrenFinish(res AsyncResulter) (*FileEnumerator, error) {
	var _arg0 *C.GFile           // out
	var _arg1 *C.GAsyncResult    // out
	var _cret *C.GFileEnumerator // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_enumerate_children_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileEnumerator *FileEnumerator // out
	var _goerr error                    // out

	_fileEnumerator = wrapFileEnumerator(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileEnumerator, _goerr
}

// Equal checks if the two given #GFiles refer to the same file.
//
// Note that two #GFiles that differ can still refer to the same file on the
// filesystem due to various forms of filename aliasing.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - file2: second #GFile.
//
func (file1 *File) Equal(file2 Filer) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file1.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(file2.Native()))

	_cret = C.g_file_equal(_arg0, _arg1)
	runtime.KeepAlive(file1)
	runtime.KeepAlive(file2)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FindEnclosingMount gets a #GMount for the #GFile.
//
// #GMount is returned only for user interesting locations, see Monitor. If the
// Iface for file does not have a #mount, error will be set to
// G_IO_ERROR_NOT_FOUND and NULL #will be returned.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) FindEnclosingMount(ctx context.Context) (Mounter, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GMount       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_find_enclosing_mount(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _mount Mounter // out
	var _goerr error   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Mounter is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Mounter)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Mounter")
		}
		_mount = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _mount, _goerr
}

// FindEnclosingMountAsync: asynchronously gets the mount for the file.
//
// For more details, see g_file_find_enclosing_mount() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_find_enclosing_mount_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) FindEnclosingMountAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_find_enclosing_mount_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// FindEnclosingMountFinish finishes an asynchronous find mount request. See
// g_file_find_enclosing_mount_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) FindEnclosingMountFinish(res AsyncResulter) (Mounter, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GMount       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_find_enclosing_mount_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _mount Mounter // out
	var _goerr error   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Mounter is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Mounter)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Mounter")
		}
		_mount = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _mount, _goerr
}

// Basename gets the base name (the last component of the path) for a given
// #GFile.
//
// If called for the top level of a system (such as the filesystem root or a uri
// like sftp://host/) it will return a single directory separator (and on
// Windows, possibly a drive letter).
//
// The base name is a byte string (not UTF-8). It has no defined encoding or
// rules other than it may not contain zero bytes. If you want to use filenames
// in a user interface you should use the display name that you can get by
// requesting the G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with
// g_file_query_info().
//
// This call does no blocking I/O.
func (file *File) Basename() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_basename(_arg0)
	runtime.KeepAlive(file)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// Child gets a child of file with basename equal to name.
//
// Note that the file with that specific name might not exist, but you can still
// have a #GFile that points to it. You can use this for instance to create that
// file.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - name: string containing the child's basename.
//
func (file *File) Child(name string) Filer {
	var _arg0 *C.GFile // out
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_get_child(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(name)

	var _ret Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}

	return _ret
}

// ChildForDisplayName gets the child of file for a given display_name (i.e. a
// UTF-8 version of the name). If this function fails, it returns NULL and error
// will be set. This is very useful when constructing a #GFile for a new file
// and the user entered the filename in the user interface, for instance when
// you select a directory and type a filename in the file selector.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - displayName: string to a possible child.
//
func (file *File) ChildForDisplayName(displayName string) (Filer, error) {
	var _arg0 *C.GFile  // out
	var _arg1 *C.char   // out
	var _cret *C.GFile  // in
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(displayName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_get_child_for_display_name(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(displayName)

	var _ret Filer   // out
	var _goerr error // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ret, _goerr
}

// Parent gets the parent directory for the file. If the file represents the
// root directory of the file system, then NULL will be returned.
//
// This call does no blocking I/O.
func (file *File) Parent() Filer {
	var _arg0 *C.GFile // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_parent(_arg0)
	runtime.KeepAlive(file)

	var _ret Filer // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.AssumeOwnership(objptr)
			rv, ok := (externglib.CastObject(object)).(Filer)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
			}
			_ret = rv
		}
	}

	return _ret
}

// ParseName gets the parse name of the file. A parse name is a UTF-8 string
// that describes the file such that one can get the #GFile back using
// g_file_parse_name().
//
// This is generally used to show the #GFile as a nice full-pathname kind of
// string in a user interface, like in a location entry.
//
// For local files with names that can safely be converted to UTF-8 the pathname
// is used, otherwise the IRI is used (a form of URI that allows UTF-8
// characters unescaped).
//
// This call does no blocking I/O.
func (file *File) ParseName() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_parse_name(_arg0)
	runtime.KeepAlive(file)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Path gets the local pathname for #GFile, if one exists. If non-NULL, this is
// guaranteed to be an absolute, canonical path. It might contain symlinks.
//
// This call does no blocking I/O.
func (file *File) Path() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_path(_arg0)
	runtime.KeepAlive(file)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// RelativePath gets the path for descendant relative to parent.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - descendant: input #GFile.
//
func (parent *File) RelativePath(descendant Filer) string {
	var _arg0 *C.GFile // out
	var _arg1 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(parent.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(descendant.Native()))

	_cret = C.g_file_get_relative_path(_arg0, _arg1)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(descendant)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _filename
}

// URI gets the URI for the file.
//
// This call does no blocking I/O.
func (file *File) URI() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_uri(_arg0)
	runtime.KeepAlive(file)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// URIScheme gets the URI scheme for a #GFile. RFC 3986 decodes the scheme as:
//
//    URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
//
// Common schemes include "file", "http", "ftp", etc.
//
// The scheme can be different from the one used to construct the #GFile, in
// that it might be replaced with one that is logically equivalent to the
// #GFile.
//
// This call does no blocking I/O.
func (file *File) URIScheme() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_get_uri_scheme(_arg0)
	runtime.KeepAlive(file)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// HasParent checks if file has a parent, and optionally, if it is parent.
//
// If parent is NULL then this function returns TRUE if file has any parent at
// all. If parent is non-NULL then TRUE is only returned if file is an immediate
// child of parent.
//
// The function takes the following parameters:
//
//    - parent to check for, or NULL.
//
func (file *File) HasParent(parent Filer) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	if parent != nil {
		_arg1 = (*C.GFile)(unsafe.Pointer(parent.Native()))
	}

	_cret = C.g_file_has_parent(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(parent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasPrefix checks whether file has the prefix specified by prefix.
//
// In other words, if the names of initial elements of file's pathname match
// prefix. Only full pathname elements are matched, so a path like /foo is not
// considered a prefix of /foobar, only of /foo/bar.
//
// A #GFile is not a prefix of itself. If you want to check for equality, use
// g_file_equal().
//
// This call does no I/O, as it works purely on names. As such it can sometimes
// return FALSE even if file is inside a prefix (from a filesystem point of
// view), because the prefix of file is an alias of prefix.
//
// The function takes the following parameters:
//
//    - prefix: input #GFile.
//
func (file *File) HasPrefix(prefix Filer) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GFile)(unsafe.Pointer(prefix.Native()))

	_cret = C.g_file_has_prefix(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(prefix)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasURIScheme checks to see if a #GFile has a given URI scheme.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - uriScheme: string containing a URI scheme.
//
func (file *File) HasURIScheme(uriScheme string) bool {
	var _arg0 *C.GFile   // out
	var _arg1 *C.char    // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uriScheme)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_has_uri_scheme(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(uriScheme)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Hash creates a hash value for a #GFile.
//
// This call does no blocking I/O.
func (file *File) Hash() uint {
	var _arg0 C.gconstpointer // out
	var _cret C.guint         // in

	_arg0 = C.gconstpointer(unsafe.Pointer(file.Native()))

	_cret = C.g_file_hash(_arg0)
	runtime.KeepAlive(file)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IsNative checks to see if a file is native to the platform.
//
// A native file is one expressed in the platform-native filename format, e.g.
// "C:\Windows" or "/usr/bin/". This does not mean the file is local, as it
// might be on a locally mounted remote filesystem.
//
// On some systems non-native files may be available using the native filesystem
// via a userspace filesystem (FUSE), in these cases this call will return
// FALSE, but g_file_get_path() will still return a native path.
//
// This call does no blocking I/O.
func (file *File) IsNative() bool {
	var _arg0 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_is_native(_arg0)
	runtime.KeepAlive(file)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadBytes loads the contents of file and returns it as #GBytes.
//
// If file is a resource:// based URI, the resulting bytes will reference the
// embedded resource instead of a copy. Otherwise, this is equivalent to calling
// g_file_load_contents() and g_bytes_new_take().
//
// For resources, etag_out will be set to NULL.
//
// The data contained in the resulting #GBytes is always zero-terminated, but
// this is not included in the #GBytes length. The resulting #GBytes should be
// freed with g_bytes_unref() when no longer in use.
//
// The function takes the following parameters:
//
//    - ctx or NULL.
//
func (file *File) LoadBytes(ctx context.Context) (string, *glib.Bytes, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _arg2 *C.gchar        // in
	var _cret *C.GBytes       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_load_bytes(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _etagOut string    // out
	var _bytes *glib.Bytes // out
	var _goerr error       // out

	if _arg2 != nil {
		_etagOut = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	_bytes = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_bytes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_bytes_unref((*C.GBytes)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _etagOut, _bytes, _goerr
}

// LoadBytesAsync: asynchronously loads the contents of file as #GBytes.
//
// If file is a resource:// based URI, the resulting bytes will reference the
// embedded resource instead of a copy. Otherwise, this is equivalent to calling
// g_file_load_contents_async() and g_bytes_new_take().
//
// callback should call g_file_load_bytes_finish() to get the result of this
// asynchronous operation.
//
// See g_file_load_bytes() for more information.
//
// The function takes the following parameters:
//
//    - ctx or NULL.
//    - callback to call when the request is satisfied.
//
func (file *File) LoadBytesAsync(ctx context.Context, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_load_bytes_async(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// LoadBytesFinish completes an asynchronous request to
// g_file_load_bytes_async().
//
// For resources, etag_out will be set to NULL.
//
// The data contained in the resulting #GBytes is always zero-terminated, but
// this is not included in the #GBytes length. The resulting #GBytes should be
// freed with g_bytes_unref() when no longer in use.
//
// See g_file_load_bytes() for more information.
//
// The function takes the following parameters:
//
//    - result provided to the callback.
//
func (file *File) LoadBytesFinish(result AsyncResulter) (string, *glib.Bytes, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.gchar        // in
	var _cret *C.GBytes       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_file_load_bytes_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _etagOut string    // out
	var _bytes *glib.Bytes // out
	var _goerr error       // out

	if _arg2 != nil {
		_etagOut = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	_bytes = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_bytes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_bytes_unref((*C.GBytes)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _etagOut, _bytes, _goerr
}

// LoadContents loads the content of the file into memory. The data is always
// zero-terminated, but this is not included in the resultant length. The
// returned contents should be freed with g_free() when no longer needed.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) LoadContents(ctx context.Context) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _arg2 *C.char         // in
	var _arg3 C.gsize         // in
	var _arg4 *C.char         // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	C.g_file_load_contents(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _contents []byte // out
	var _etagOut string  // out
	var _goerr error     // out

	defer C.free(unsafe.Pointer(_arg2))
	_contents = make([]byte, _arg3)
	copy(_contents, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	if _arg4 != nil {
		_etagOut = C.GoString((*C.gchar)(unsafe.Pointer(_arg4)))
		defer C.free(unsafe.Pointer(_arg4))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _contents, _etagOut, _goerr
}

// LoadContentsAsync starts an asynchronous load of the file's contents.
//
// For more details, see g_file_load_contents() which is the synchronous version
// of this call.
//
// When the load operation has completed, callback will be called with user
// data. To finish the operation, call g_file_load_contents_finish() with the
// Result returned by the callback.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - callback to call when the request is satisfied.
//
func (file *File) LoadContentsAsync(ctx context.Context, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_load_contents_async(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// LoadContentsFinish finishes an asynchronous load of the file's contents. The
// contents are placed in contents, and length is set to the size of the
// contents string. The contents should be freed with g_free() when no longer
// needed. If etag_out is present, it will be set to the new entity tag for the
// file.
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) LoadContentsFinish(res AsyncResulter) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char         // in
	var _arg3 C.gsize         // in
	var _arg4 *C.char         // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_load_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _contents []byte // out
	var _etagOut string  // out
	var _goerr error     // out

	defer C.free(unsafe.Pointer(_arg2))
	_contents = make([]byte, _arg3)
	copy(_contents, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	if _arg4 != nil {
		_etagOut = C.GoString((*C.gchar)(unsafe.Pointer(_arg4)))
		defer C.free(unsafe.Pointer(_arg4))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _contents, _etagOut, _goerr
}

// LoadPartialContentsFinish finishes an asynchronous partial load operation
// that was started with g_file_load_partial_contents_async(). The data is
// always zero-terminated, but this is not included in the resultant length. The
// returned contents should be freed with g_free() when no longer needed.
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) LoadPartialContentsFinish(res AsyncResulter) ([]byte, string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char         // in
	var _arg3 C.gsize         // in
	var _arg4 *C.char         // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_load_partial_contents_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _contents []byte // out
	var _etagOut string  // out
	var _goerr error     // out

	defer C.free(unsafe.Pointer(_arg2))
	_contents = make([]byte, _arg3)
	copy(_contents, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	if _arg4 != nil {
		_etagOut = C.GoString((*C.gchar)(unsafe.Pointer(_arg4)))
		defer C.free(unsafe.Pointer(_arg4))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _contents, _etagOut, _goerr
}

// MakeDirectory creates a directory. Note that this will only create a child
// directory of the immediate parent directory of the path or URI given by the
// #GFile. To recursively create directories, see
// g_file_make_directory_with_parents(). This function will fail if the parent
// directory does not exist, setting error to G_IO_ERROR_NOT_FOUND. If the file
// system doesn't support creating directories, this function will fail, setting
// error to G_IO_ERROR_NOT_SUPPORTED.
//
// For a local #GFile the newly created directory will have the default
// (current) ownership and permissions of the current process.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) MakeDirectory(ctx context.Context) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	C.g_file_make_directory(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// MakeDirectoryAsync: asynchronously creates a directory.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) MakeDirectoryAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_make_directory_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// MakeDirectoryFinish finishes an asynchronous directory creation, started with
// g_file_make_directory_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) MakeDirectoryFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_make_directory_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// MakeDirectoryWithParents creates a directory and any parent directories that
// may not exist similar to 'mkdir -p'. If the file system does not support
// creating directories, this function will fail, setting error to
// G_IO_ERROR_NOT_SUPPORTED. If the directory itself already exists, this
// function will fail setting error to G_IO_ERROR_EXISTS, unlike the similar
// g_mkdir_with_parents().
//
// For a local #GFile the newly created directories will have the default
// (current) ownership and permissions of the current process.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) MakeDirectoryWithParents(ctx context.Context) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	C.g_file_make_directory_with_parents(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// MakeSymbolicLink creates a symbolic link named file which contains the string
// symlink_value.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - symlinkValue: string with the path for the target of the new symlink.
//
func (file *File) MakeSymbolicLink(ctx context.Context, symlinkValue string) error {
	var _arg0 *C.GFile        // out
	var _arg2 *C.GCancellable // out
	var _arg1 *C.char         // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(symlinkValue)))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_file_make_symbolic_link(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(symlinkValue)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// MeasureDiskUsageFinish collects the results from an earlier call to
// g_file_measure_disk_usage_async(). See g_file_measure_disk_usage() for more
// information.
//
// The function takes the following parameters:
//
//    - result passed to your ReadyCallback.
//
func (file *File) MeasureDiskUsageFinish(result AsyncResulter) (diskUsage uint64, numDirs uint64, numFiles uint64, goerr error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 C.guint64       // in
	var _arg3 C.guint64       // in
	var _arg4 C.guint64       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_measure_disk_usage_finish(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _diskUsage uint64 // out
	var _numDirs uint64   // out
	var _numFiles uint64  // out
	var _goerr error      // out

	_diskUsage = uint64(_arg2)
	_numDirs = uint64(_arg3)
	_numFiles = uint64(_arg4)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _diskUsage, _numDirs, _numFiles, _goerr
}

// Monitor obtains a file or directory monitor for the given file, depending on
// the type of the file.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of MonitorFlags.
//
func (file *File) Monitor(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error) {
	var _arg0 *C.GFile            // out
	var _arg2 *C.GCancellable     // out
	var _arg1 C.GFileMonitorFlags // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileMonitorFlags(flags)

	_cret = C.g_file_monitor(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileMonitor FileMonitorrer // out
	var _goerr error                // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.FileMonitorrer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(FileMonitorrer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.FileMonitorrer")
		}
		_fileMonitor = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileMonitor, _goerr
}

// MonitorDirectory obtains a directory monitor for the given file. This may
// fail if directory monitoring is not supported.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// It does not make sense for flags to contain G_FILE_MONITOR_WATCH_HARD_LINKS,
// since hard links can not be made to directories. It is not possible to
// monitor all the files in a directory for changes made via hard links; if you
// want to do this then you must register individual watches with
// g_file_monitor().
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of MonitorFlags.
//
func (file *File) MonitorDirectory(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error) {
	var _arg0 *C.GFile            // out
	var _arg2 *C.GCancellable     // out
	var _arg1 C.GFileMonitorFlags // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileMonitorFlags(flags)

	_cret = C.g_file_monitor_directory(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileMonitor FileMonitorrer // out
	var _goerr error                // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.FileMonitorrer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(FileMonitorrer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.FileMonitorrer")
		}
		_fileMonitor = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileMonitor, _goerr
}

// MonitorFile obtains a file monitor for the given file. If no file
// notification mechanism exists, then regular polling of the file is used.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If flags contains G_FILE_MONITOR_WATCH_HARD_LINKS then the monitor will also
// attempt to report changes made to the file via another filename (ie, a hard
// link). Without this flag, you can only rely on changes made through the
// filename contained in file to be reported. Using this flag may result in an
// increase in resource usage, and may not have any effect depending on the
// Monitor backend and/or filesystem type.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of MonitorFlags.
//
func (file *File) MonitorFile(ctx context.Context, flags FileMonitorFlags) (FileMonitorrer, error) {
	var _arg0 *C.GFile            // out
	var _arg2 *C.GCancellable     // out
	var _arg1 C.GFileMonitorFlags // out
	var _cret *C.GFileMonitor     // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileMonitorFlags(flags)

	_cret = C.g_file_monitor_file(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileMonitor FileMonitorrer // out
	var _goerr error                // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.FileMonitorrer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(FileMonitorrer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.FileMonitorrer")
		}
		_fileMonitor = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileMonitor, _goerr
}

// MountEnclosingVolume starts a mount_operation, mounting the volume that
// contains the file location.
//
// When this operation has completed, callback will be called with user_user
// data, and the operation can be finalized with
// g_file_mount_enclosing_volume_finish().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - mountOperation: Operation or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (location *File) MountEnclosingVolume(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GMountMountFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(location.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountMountFlags(flags)
	if mountOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_mount_enclosing_volume(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(location)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mountOperation)
	runtime.KeepAlive(callback)
}

// MountEnclosingVolumeFinish finishes a mount operation started by
// g_file_mount_enclosing_volume().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (location *File) MountEnclosingVolumeFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(location.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_mount_enclosing_volume_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(location)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// MountMountable mounts a file of type G_FILE_TYPE_MOUNTABLE. Using
// mount_operation, you can request callbacks when, for instance, passwords are
// needed during authentication.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_mount_mountable_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - mountOperation: Operation, or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) MountMountable(ctx context.Context, flags MountMountFlags, mountOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GMountMountFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountMountFlags(flags)
	if mountOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_mount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mountOperation)
	runtime.KeepAlive(callback)
}

// MountMountableFinish finishes a mount operation. See g_file_mount_mountable()
// for details.
//
// Finish an asynchronous mount operation that was started with
// g_file_mount_mountable().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) MountMountableFinish(result AsyncResulter) (Filer, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_file_mount_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _ret Filer   // out
	var _goerr error // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ret, _goerr
}

// Move tries to move the file or directory source to the location specified by
// destination. If native move operations are supported then this is used,
// otherwise a copy + delete fallback is used. The native implementation may
// support moving directories (for instance on moves inside the same
// filesystem), but the fallback code does not.
//
// If the flag FILE_COPY_OVERWRITE is specified an already existing destination
// file is overwritten.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If progress_callback is not NULL, then the operation can be monitored by
// setting this to a ProgressCallback function. progress_callback_data will be
// passed to this function. It is guaranteed that this callback will be called
// after all data has been transferred with the total number of bytes copied
// during the operation.
//
// If the source file does not exist, then the G_IO_ERROR_NOT_FOUND error is
// returned, independent on the status of the destination.
//
// If FILE_COPY_OVERWRITE is not specified and the target exists, then the error
// G_IO_ERROR_EXISTS is returned.
//
// If trying to overwrite a file over a directory, the G_IO_ERROR_IS_DIRECTORY
// error is returned. If trying to overwrite a directory with a directory the
// G_IO_ERROR_WOULD_MERGE error is returned.
//
// If the source is a directory and the target does not exist, or
// FILE_COPY_OVERWRITE is specified and the target is a file, then the
// G_IO_ERROR_WOULD_RECURSE error may be returned (if the native move operation
// isn't available).
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - destination pointing to the destination location.
//    - flags: set of CopyFlags.
//    - progressCallback: ProgressCallback function for updates.
//
func (source *File) Move(ctx context.Context, destination Filer, flags FileCopyFlags, progressCallback FileProgressCallback) error {
	var _arg0 *C.GFile                // out
	var _arg3 *C.GCancellable         // out
	var _arg1 *C.GFile                // out
	var _arg2 C.GFileCopyFlags        // out
	var _arg4 C.GFileProgressCallback // out
	var _arg5 C.gpointer
	var _cerr *C.GError // in

	_arg0 = (*C.GFile)(unsafe.Pointer(source.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GFile)(unsafe.Pointer(destination.Native()))
	_arg2 = C.GFileCopyFlags(flags)
	if progressCallback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_FileProgressCallback)
		_arg5 = C.gpointer(gbox.Assign(progressCallback))
		defer gbox.Delete(uintptr(_arg5))
	}

	C.g_file_move(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(source)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(destination)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(progressCallback)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// OpenReadwrite opens an existing file for reading and writing. The result is a
// IOStream that can be used to read and write the contents of the file.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
// If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be
// returned. Other errors are possible too, and depend on what kind of
// filesystem the file is on. Note that in many non-local file cases read and
// write streams are not supported, so make sure you really need to do read and
// write streaming, rather than just opening for reading or writing.
//
// The function takes the following parameters:
//
//    - ctx: #GCancellable.
//
func (file *File) OpenReadwrite(ctx context.Context) (*FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GCancellable  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_open_readwrite(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// OpenReadwriteAsync: asynchronously opens file for reading and writing.
//
// For more details, see g_file_open_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_open_readwrite_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) OpenReadwriteAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_open_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// OpenReadwriteFinish finishes an asynchronous file read operation started with
// g_file_open_readwrite_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) OpenReadwriteFinish(res AsyncResulter) (*FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_open_readwrite_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// PeekPath: exactly like g_file_get_path(), but caches the result via
// g_object_set_qdata_full(). This is useful for example in C applications which
// mix g_file_* APIs with native ones. It also avoids an extra duplicated string
// when possible, so will be generally more efficient.
//
// This call does no blocking I/O.
func (file *File) PeekPath() string {
	var _arg0 *C.GFile // out
	var _cret *C.char  // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_peek_path(_arg0)
	runtime.KeepAlive(file)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _filename
}

// PollMountable polls a file of type FILE_TYPE_MOUNTABLE.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_mount_mountable_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) PollMountable(ctx context.Context, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg1 *C.GCancellable       // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_poll_mountable(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(callback)
}

// PollMountableFinish finishes a poll operation. See g_file_poll_mountable()
// for details.
//
// Finish an asynchronous poll operation that was polled with
// g_file_poll_mountable().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) PollMountableFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_poll_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// QueryDefaultHandler returns the Info that is registered as the default
// application to handle the file specified by file.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) QueryDefaultHandler(ctx context.Context) (AppInfor, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GAppInfo     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_query_default_handler(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _appInfo AppInfor // out
	var _goerr error      // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(AppInfor)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.AppInfor")
		}
		_appInfo = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _appInfo, _goerr
}

// QueryDefaultHandlerAsync: async version of g_file_query_default_handler().
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is done.
//
func (file *File) QueryDefaultHandlerAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_query_default_handler_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// QueryDefaultHandlerFinish finishes a g_file_query_default_handler_async()
// operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) QueryDefaultHandlerFinish(result AsyncResulter) (AppInfor, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GAppInfo     // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	_cret = C.g_file_query_default_handler_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _appInfo AppInfor // out
	var _goerr error      // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.AppInfor is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(AppInfor)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.AppInfor")
		}
		_appInfo = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _appInfo, _goerr
}

// QueryExists: utility function to check if a particular file exists. This is
// implemented using g_file_query_info() and as such does blocking I/O.
//
// Note that in many cases it is racy to first check for file existence
// (https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use) and then execute
// something based on the outcome of that, because the file might have been
// created or removed in between the operations. The general approach to
// handling that is to not check, but just do the operation and handle the
// errors as they come.
//
// As an example of race-free checking, take the case of reading a file, and if
// it doesn't exist, creating it. There are two racy versions: read it, and on
// error create it; and: check if it exists, if not create it. These can both
// result in two processes creating the file (with perhaps a partially written
// file as the result). The correct approach is to always try to create the file
// with g_file_create() which will either atomically create the file or fail
// with a G_IO_ERROR_EXISTS error.
//
// However, in many cases an existence check is useful in a user interface, for
// instance to make a menu item sensitive/insensitive, so that you don't have to
// fool users that something is possible and then just show an error dialog. If
// you do this, you should make sure to also handle the errors that can happen
// due to races when you execute the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) QueryExists(ctx context.Context) bool {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_query_exists(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryFileType: utility function to inspect the Type of a file. This is
// implemented using g_file_query_info() and as such does blocking I/O.
//
// The primary use case of this method is to check if a file is a regular file,
// directory, or symlink.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags: set of QueryInfoFlags passed to g_file_query_info().
//
func (file *File) QueryFileType(ctx context.Context, flags FileQueryInfoFlags) FileType {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.GFileQueryInfoFlags // out
	var _cret C.GFileType           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GFileQueryInfoFlags(flags)

	_cret = C.g_file_query_file_type(_arg0, _arg1, _arg2)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _fileType FileType // out

	_fileType = FileType(_cret)

	return _fileType
}

// QueryFilesystemInfo: similar to g_file_query_info(), but obtains information
// about the filesystem the file is on, rather than the file itself. For
// instance the amount of space available and the type of the filesystem.
//
// The attributes value is a string that specifies the attributes that should be
// gathered. It is not an error if it's not possible to read a particular
// requested attribute from a file - it just won't be set. attributes should be
// a comma-separated list of attributes or attribute wildcards. The wildcard "*"
// means all attributes, and a wildcard like "filesystem::*" means all
// attributes in the filesystem namespace. The standard namespace for filesystem
// attributes is "filesystem". Common attributes of interest are
// FILE_ATTRIBUTE_FILESYSTEM_SIZE (the total size of the filesystem in bytes),
// FILE_ATTRIBUTE_FILESYSTEM_FREE (number of bytes available), and
// FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
// Other errors are possible too, and depend on what kind of filesystem the file
// is on.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//
func (file *File) QueryFilesystemInfo(ctx context.Context, attributes string) (*FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg2 *C.GCancellable // out
	var _arg1 *C.char         // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_query_filesystem_info(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)

	var _fileInfo *FileInfo // out
	var _goerr error        // out

	_fileInfo = wrapFileInfo(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInfo, _goerr
}

// QueryFilesystemInfoAsync: asynchronously gets the requested information about
// the filesystem that the specified file is on. The result is a Info object
// that contains key-value attributes (such as type or size for the file).
//
// For more details, see g_file_query_filesystem_info() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_query_info_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) QueryFilesystemInfoAsync(ctx context.Context, attributes string, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.int                 // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_query_filesystem_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// QueryFilesystemInfoFinish finishes an asynchronous filesystem info query. See
// g_file_query_filesystem_info_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) QueryFilesystemInfoFinish(res AsyncResulter) (*FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_query_filesystem_info_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileInfo *FileInfo // out
	var _goerr error        // out

	_fileInfo = wrapFileInfo(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInfo, _goerr
}

// QueryInfo gets the requested information about specified file. The result is
// a Info object that contains key-value attributes (such as the type or size of
// the file).
//
// The attributes value is a string that specifies the file attributes that
// should be gathered. It is not an error if it's not possible to read a
// particular requested attribute from a file - it just won't be set. attributes
// should be a comma-separated list of attributes or attribute wildcards. The
// wildcard "*" means all attributes, and a wildcard like "standard::*" means
// all attributes in the standard namespace. An example attribute query be
// "standard::*,owner::user". The standard attributes are available as defines,
// like FILE_ATTRIBUTE_STANDARD_NAME.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// For symlinks, normally the information about the target of the symlink is
// returned, rather than information about the symlink itself. However if you
// pass FILE_QUERY_INFO_NOFOLLOW_SYMLINKS in flags the information about the
// symlink itself will be returned. Also, for symlinks that point to
// non-existing files the information about the symlink itself will be returned.
//
// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
// Other errors are possible too, and depend on what kind of filesystem the file
// is on.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//    - flags: set of QueryInfoFlags.
//
func (file *File) QueryInfo(ctx context.Context, attributes string, flags FileQueryInfoFlags) (*FileInfo, error) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _cret *C.GFileInfo          // in
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)

	_cret = C.g_file_query_info(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(flags)

	var _fileInfo *FileInfo // out
	var _goerr error        // out

	_fileInfo = wrapFileInfo(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInfo, _goerr
}

// QueryInfoAsync: asynchronously gets the requested information about specified
// file. The result is a Info object that contains key-value attributes (such as
// type or size for the file).
//
// For more details, see g_file_query_info() which is the synchronous version of
// this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_query_info_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attributes: attribute query string.
//    - flags: set of QueryInfoFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) QueryInfoAsync(ctx context.Context, attributes string, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attributes)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_query_info_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attributes)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// QueryInfoFinish finishes an asynchronous file info query. See
// g_file_query_info_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) QueryInfoFinish(res AsyncResulter) (*FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_query_info_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileInfo *FileInfo // out
	var _goerr error        // out

	_fileInfo = wrapFileInfo(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInfo, _goerr
}

// QuerySettableAttributes: obtain the list of settable attributes for the file.
//
// Returns the type and full attribute name of all the attributes that can be
// set on this file. This doesn't mean setting it will always succeed though,
// you might get an access failure, or some specific file may not support a
// specific attribute.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) QuerySettableAttributes(ctx context.Context) (*FileAttributeInfoList, error) {
	var _arg0 *C.GFile                  // out
	var _arg1 *C.GCancellable           // out
	var _cret *C.GFileAttributeInfoList // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_query_settable_attributes(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _fileAttributeInfoList *FileAttributeInfoList // out
	var _goerr error                                  // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_fileAttributeInfoList)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileAttributeInfoList, _goerr
}

// QueryWritableNamespaces: obtain the list of attribute namespaces where new
// attributes can be created by a user. An example of this is extended
// attributes (in the "xattr" namespace).
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) QueryWritableNamespaces(ctx context.Context) (*FileAttributeInfoList, error) {
	var _arg0 *C.GFile                  // out
	var _arg1 *C.GCancellable           // out
	var _cret *C.GFileAttributeInfoList // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_query_writable_namespaces(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _fileAttributeInfoList *FileAttributeInfoList // out
	var _goerr error                                  // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_fileAttributeInfoList)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileAttributeInfoList, _goerr
}

// Read opens a file for reading. The result is a InputStream that can be used
// to read the contents of the file.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
// If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be
// returned. Other errors are possible too, and depend on what kind of
// filesystem the file is on.
//
// The function takes the following parameters:
//
//    - ctx: #GCancellable.
//
func (file *File) Read(ctx context.Context) (*FileInputStream, error) {
	var _arg0 *C.GFile            // out
	var _arg1 *C.GCancellable     // out
	var _cret *C.GFileInputStream // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_file_read(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _fileInputStream *FileInputStream // out
	var _goerr error                      // out

	_fileInputStream = wrapFileInputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInputStream, _goerr
}

// ReadAsync: asynchronously opens file for reading.
//
// For more details, see g_file_read() which is the synchronous version of this
// call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_read_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) ReadAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_read_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReadFinish finishes an asynchronous file read operation started with
// g_file_read_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) ReadFinish(res AsyncResulter) (*FileInputStream, error) {
	var _arg0 *C.GFile            // out
	var _arg1 *C.GAsyncResult     // out
	var _cret *C.GFileInputStream // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_read_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileInputStream *FileInputStream // out
	var _goerr error                      // out

	_fileInputStream = wrapFileInputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileInputStream, _goerr
}

// Replace returns an output stream for overwriting the file, possibly creating
// a backup copy of the file first. If the file doesn't exist, it will be
// created.
//
// This will try to replace the file in the safest way possible so that any
// errors during the writing will not affect an already existing copy of the
// file. For instance, for local files it may write to a temporary file and then
// atomically rename over the destination when the stream is closed.
//
// By default files created are generally readable by everyone, but if you pass
// FILE_CREATE_PRIVATE in flags the file will be made readable only to the
// current user, to the level that is supported on the target filesystem.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If you pass in a non-NULL etag value and file already exists, then this value
// is compared to the current entity tag of the file, and if they differ an
// G_IO_ERROR_WRONG_ETAG error is returned. This generally means that the file
// has been changed since you last read it. You can get the new etag from
// g_file_output_stream_get_etag() after you've finished writing and closed the
// OutputStream. When you load a new file you can use
// g_file_input_stream_query_info() to get the etag of the file.
//
// If make_backup is TRUE, this function will attempt to make a backup of the
// current file before overwriting it. If this fails a
// G_IO_ERROR_CANT_CREATE_BACKUP error will be returned. If you want to replace
// anyway, try again with make_backup set to FALSE.
//
// If the file is a directory the G_IO_ERROR_IS_DIRECTORY error will be
// returned, and if the file is some other form of non-regular file then a
// G_IO_ERROR_NOT_REGULAR_FILE error will be returned. Some file systems don't
// allow all file names, and may return an G_IO_ERROR_INVALID_FILENAME error,
// and if the name is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
// Other errors are possible too, and depend on what kind of filesystem the file
// is on.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - etag: optional [entity tag][gfile-etag] for the current #GFile, or LL
//    to ignore.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//
func (file *File) Replace(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg4 *C.GCancellable      // out
	var _arg1 *C.char              // out
	var _arg2 C.gboolean           // out
	var _arg3 C.GFileCreateFlags   // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if etag != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)

	_cret = C.g_file_replace(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// ReplaceAsync: asynchronously overwrites the file, replacing the contents,
// possibly creating a backup copy of the file first.
//
// For more details, see g_file_replace() which is the synchronous version of
// this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_replace_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - etag: [entity tag][gfile-etag] for the current #GFile, or NULL to
//    ignore.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) ReplaceAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.gboolean            // out
	var _arg3 C.GFileCreateFlags    // out
	var _arg4 C.int                 // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if etag != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = C.int(ioPriority)
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_replace_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReplaceContents replaces the contents of file with contents of length bytes.
//
// If etag is specified (not NULL), any existing file must have that etag, or
// the error G_IO_ERROR_WRONG_ETAG will be returned.
//
// If make_backup is TRUE, this function will attempt to make a backup of file.
// Internally, it uses g_file_replace(), so will try to replace the file
// contents in the safest way possible. For example, atomic renames are used
// when replacing local filesâ€™ contents.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The returned new_etag can be used to verify that the file hasn't changed the
// next time it is saved over.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - contents: string containing the new contents for file.
//    - etag: old [entity-tag][gfile-etag] for the document, or NULL.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//
func (file *File) ReplaceContents(ctx context.Context, contents, etag string, makeBackup bool, flags FileCreateFlags) (string, error) {
	var _arg0 *C.GFile        // out
	var _arg7 *C.GCancellable // out
	var _arg1 *C.char         // out
	var _arg2 C.gsize
	var _arg3 *C.char            // out
	var _arg4 C.gboolean         // out
	var _arg5 C.GFileCreateFlags // out
	var _arg6 *C.char            // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg7 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg2 = (C.gsize)(len(contents))
	if contents == "" {
		_arg1 = (*C.char)(gextras.ZeroString)
	} else {
		_arg1 = (*C.char)(unsafe.Pointer((*reflect.StringHeader)(unsafe.Pointer(&contents)).Data))
	}
	if etag != "" {
		_arg3 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if makeBackup {
		_arg4 = C.TRUE
	}
	_arg5 = C.GFileCreateFlags(flags)

	C.g_file_replace_contents(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_arg6, _arg7, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(contents)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)

	var _newEtag string // out
	var _goerr error    // out

	if _arg6 != nil {
		_newEtag = C.GoString((*C.gchar)(unsafe.Pointer(_arg6)))
		defer C.free(unsafe.Pointer(_arg6))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _newEtag, _goerr
}

// ReplaceContentsAsync starts an asynchronous replacement of file with the
// given contents of length bytes. etag will replace the document's current
// entity tag.
//
// When this operation has completed, callback will be called with user_user
// data, and the operation can be finalized with
// g_file_replace_contents_finish().
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// If make_backup is TRUE, this function will attempt to make a backup of file.
//
// Note that no copy of contents will be made, so it must stay valid until
// callback is called. See g_file_replace_contents_bytes_async() for a #GBytes
// version that will automatically hold a reference to the contents (without
// copying) for the duration of the call.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - contents: string of contents to replace the file with.
//    - etag: new [entity tag][gfile-etag] for the file, or NULL.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//    - callback to call when the request is satisfied.
//
func (file *File) ReplaceContentsAsync(ctx context.Context, contents, etag string, makeBackup bool, flags FileCreateFlags, callback AsyncReadyCallback) {
	var _arg0 *C.GFile        // out
	var _arg6 *C.GCancellable // out
	var _arg1 *C.char         // out
	var _arg2 C.gsize
	var _arg3 *C.char               // out
	var _arg4 C.gboolean            // out
	var _arg5 C.GFileCreateFlags    // out
	var _arg7 C.GAsyncReadyCallback // out
	var _arg8 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg6 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg2 = (C.gsize)(len(contents))
	if contents == "" {
		_arg1 = (*C.char)(gextras.ZeroString)
	} else {
		_arg1 = (*C.char)(unsafe.Pointer((*reflect.StringHeader)(unsafe.Pointer(&contents)).Data))
	}
	if etag != "" {
		_arg3 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if makeBackup {
		_arg4 = C.TRUE
	}
	_arg5 = C.GFileCreateFlags(flags)
	if callback != nil {
		_arg7 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg8 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_replace_contents_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(contents)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(callback)
}

// ReplaceContentsBytesAsync: same as g_file_replace_contents_async() but takes
// a #GBytes input instead. This function will keep a ref on contents until the
// operation is done. Unlike g_file_replace_contents_async() this allows
// forgetting about the content without waiting for the callback.
//
// When this operation has completed, callback will be called with user_user
// data, and the operation can be finalized with
// g_file_replace_contents_finish().
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - contents: #GBytes.
//    - etag: new [entity tag][gfile-etag] for the file, or NULL.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//    - callback to call when the request is satisfied.
//
func (file *File) ReplaceContentsBytesAsync(ctx context.Context, contents *glib.Bytes, etag string, makeBackup bool, flags FileCreateFlags, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.GBytes             // out
	var _arg2 *C.char               // out
	var _arg3 C.gboolean            // out
	var _arg4 C.GFileCreateFlags    // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(contents)))
	if etag != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if makeBackup {
		_arg3 = C.TRUE
	}
	_arg4 = C.GFileCreateFlags(flags)
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_replace_contents_bytes_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(contents)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(callback)
}

// ReplaceContentsFinish finishes an asynchronous replace of the given file. See
// g_file_replace_contents_async(). Sets new_etag to the new entity tag for the
// document, if present.
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) ReplaceContentsFinish(res AsyncResulter) (string, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.char         // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	C.g_file_replace_contents_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _newEtag string // out
	var _goerr error    // out

	if _arg2 != nil {
		_newEtag = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _newEtag, _goerr
}

// ReplaceFinish finishes an asynchronous file replace operation started with
// g_file_replace_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) ReplaceFinish(res AsyncResulter) (*FileOutputStream, error) {
	var _arg0 *C.GFile             // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.GFileOutputStream // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_replace_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileOutputStream *FileOutputStream // out
	var _goerr error                        // out

	_fileOutputStream = wrapFileOutputStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileOutputStream, _goerr
}

// ReplaceReadwrite returns an output stream for overwriting the file in
// readwrite mode, possibly creating a backup copy of the file first. If the
// file doesn't exist, it will be created.
//
// For details about the behaviour, see g_file_replace() which does the same
// thing but returns an output stream only.
//
// Note that in many non-local file cases read and write streams are not
// supported, so make sure you really need to do read and write streaming,
// rather than just opening for reading or writing.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - etag: optional [entity tag][gfile-etag] for the current #GFile, or LL
//    to ignore.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//
func (file *File) ReplaceReadwrite(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags) (*FileIOStream, error) {
	var _arg0 *C.GFile           // out
	var _arg4 *C.GCancellable    // out
	var _arg1 *C.char            // out
	var _arg2 C.gboolean         // out
	var _arg3 C.GFileCreateFlags // out
	var _cret *C.GFileIOStream   // in
	var _cerr *C.GError          // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if etag != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)

	_cret = C.g_file_replace_readwrite(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// ReplaceReadwriteAsync: asynchronously overwrites the file in read-write mode,
// replacing the contents, possibly creating a backup copy of the file first.
//
// For more details, see g_file_replace_readwrite() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_replace_readwrite_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - etag: [entity tag][gfile-etag] for the current #GFile, or NULL to
//    ignore.
//    - makeBackup: TRUE if a backup should be created.
//    - flags: set of CreateFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) ReplaceReadwriteAsync(ctx context.Context, etag string, makeBackup bool, flags FileCreateFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.gboolean            // out
	var _arg3 C.GFileCreateFlags    // out
	var _arg4 C.int                 // out
	var _arg6 C.GAsyncReadyCallback // out
	var _arg7 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if etag != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(etag)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if makeBackup {
		_arg2 = C.TRUE
	}
	_arg3 = C.GFileCreateFlags(flags)
	_arg4 = C.int(ioPriority)
	if callback != nil {
		_arg6 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg7 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_replace_readwrite_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(etag)
	runtime.KeepAlive(makeBackup)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// ReplaceReadwriteFinish finishes an asynchronous file replace operation
// started with g_file_replace_readwrite_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) ReplaceReadwriteFinish(res AsyncResulter) (*FileIOStream, error) {
	var _arg0 *C.GFile         // out
	var _arg1 *C.GAsyncResult  // out
	var _cret *C.GFileIOStream // in
	var _cerr *C.GError        // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_replace_readwrite_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _fileIOStream *FileIOStream // out
	var _goerr error                // out

	_fileIOStream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fileIOStream, _goerr
}

// ResolveRelativePath resolves a relative path for file to an absolute path.
//
// This call does no blocking I/O.
//
// The function takes the following parameters:
//
//    - relativePath: given relative path string.
//
func (file *File) ResolveRelativePath(relativePath string) Filer {
	var _arg0 *C.GFile // out
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(relativePath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_resolve_relative_path(_arg0, _arg1)
	runtime.KeepAlive(file)
	runtime.KeepAlive(relativePath)

	var _ret Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}

	return _ret
}

// SetAttribute sets an attribute in the file with attribute name attribute to
// value_p.
//
// Some attributes can be unset by setting type to G_FILE_ATTRIBUTE_TYPE_INVALID
// and value_p to NULL.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - typ: type of the attribute.
//    - valueP: pointer to the value (or the pointer itself if the type is a
//    pointer type).
//    - flags: set of QueryInfoFlags.
//
func (file *File) SetAttribute(ctx context.Context, attribute string, typ FileAttributeType, valueP cgo.Handle, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg5 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.GFileAttributeType  // out
	var _arg3 C.gpointer            // out
	var _arg4 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg5 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GFileAttributeType(typ)
	_arg3 = (C.gpointer)(unsafe.Pointer(valueP))
	_arg4 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(valueP)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeByteString sets attribute of type
// G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to value. If attribute is of a different
// type, this operation will fail, returning FALSE.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value: string containing the attribute's new value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeByteString(ctx context.Context, attribute, value string, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 *C.char               // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_byte_string(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeInt32 sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT32 to
// value. If attribute is of a different type, this operation will fail.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value containing the attribute's new value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeInt32(ctx context.Context, attribute string, value int32, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.gint32              // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint32(value)
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_int32(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeInt64 sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT64 to
// value. If attribute is of a different type, this operation will fail.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value containing the attribute's new value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeInt64(ctx context.Context, attribute string, value int64, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.gint64              // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint64(value)
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_int64(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeString sets attribute of type G_FILE_ATTRIBUTE_TYPE_STRING to
// value. If attribute is of a different type, this operation will fail.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value: string containing the attribute's value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeString(ctx context.Context, attribute, value string, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 *C.char               // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_string(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeUint32 sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT32 to
// value. If attribute is of a different type, this operation will fail.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value containing the attribute's new value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeUint32(ctx context.Context, attribute string, value uint32, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.guint32             // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint32(value)
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_uint32(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeUint64 sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT64 to
// value. If attribute is of a different type, this operation will fail.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - attribute: string containing the attribute's name.
//    - value containing the attribute's new value.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributeUint64(ctx context.Context, attribute string, value uint64, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.guint64             // out
	var _arg3 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(attribute)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint64(value)
	_arg3 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attribute_uint64(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributesAsync: asynchronously sets the attributes of file with info.
//
// For more details, see g_file_set_attributes_from_info(), which is the
// synchronous version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_set_attributes_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - info: Info.
//    - flags: QueryInfoFlags.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback: ReadyCallback.
//
func (file *File) SetAttributesAsync(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg4 *C.GCancellable       // out
	var _arg1 *C.GFileInfo          // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _arg3 C.int                 // out
	var _arg5 C.GAsyncReadyCallback // out
	var _arg6 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg4 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = C.GFileQueryInfoFlags(flags)
	_arg3 = C.int(ioPriority)
	if callback != nil {
		_arg5 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg6 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_set_attributes_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(info)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// SetAttributesFinish finishes setting an attribute started in
// g_file_set_attributes_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) SetAttributesFinish(result AsyncResulter) (*FileInfo, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.GFileInfo    // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_set_attributes_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _info *FileInfo // out
	var _goerr error    // out

	_info = wrapFileInfo(externglib.AssumeOwnership(unsafe.Pointer(_arg2)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _info, _goerr
}

// SetAttributesFromInfo tries to set all attributes in the Info on the target
// values, not stopping on the first error.
//
// If there is any error during this operation then error will be set to the
// first error. Error on particular fields are flagged by setting the "status"
// field in the attribute value to G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which
// means you can also detect further errors.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - info: Info.
//    - flags: QueryInfoFlags.
//
func (file *File) SetAttributesFromInfo(ctx context.Context, info *FileInfo, flags FileQueryInfoFlags) error {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.GFileInfo          // out
	var _arg2 C.GFileQueryInfoFlags // out
	var _cerr *C.GError             // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GFileInfo)(unsafe.Pointer(info.Native()))
	_arg2 = C.GFileQueryInfoFlags(flags)

	C.g_file_set_attributes_from_info(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(info)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetDisplayName renames file to the specified display name.
//
// The display name is converted from UTF-8 to the correct encoding for the
// target filesystem if possible and the file is renamed to this.
//
// If you want to implement a rename operation in the user interface the edit
// name (FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the initial value
// in the rename widget, and then the result after editing should be passed to
// g_file_set_display_name().
//
// On success the resulting converted filename is returned.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - displayName: string.
//
func (file *File) SetDisplayName(ctx context.Context, displayName string) (Filer, error) {
	var _arg0 *C.GFile        // out
	var _arg2 *C.GCancellable // out
	var _arg1 *C.char         // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(displayName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_set_display_name(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(displayName)

	var _ret Filer   // out
	var _goerr error // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ret, _goerr
}

// SetDisplayNameAsync: asynchronously sets the display name for a given #GFile.
//
// For more details, see g_file_set_display_name() which is the synchronous
// version of this call.
//
// When the operation is finished, callback will be called. You can then call
// g_file_set_display_name_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - displayName: string.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) SetDisplayNameAsync(ctx context.Context, displayName string, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.char               // out
	var _arg2 C.int                 // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(displayName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(ioPriority)
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_set_display_name_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(displayName)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// SetDisplayNameFinish finishes setting a display name started with
// g_file_set_display_name_async().
//
// The function takes the following parameters:
//
//    - res: Result.
//
func (file *File) SetDisplayNameFinish(res AsyncResulter) (Filer, error) {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GFile        // in
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(res.Native()))

	_cret = C.g_file_set_display_name_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(res)

	var _ret Filer   // out
	var _goerr error // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_ret = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ret, _goerr
}

// StartMountable starts a file of type FILE_TYPE_MOUNTABLE. Using
// start_operation, you can request callbacks when, for instance, passwords are
// needed during authentication.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_mount_mountable_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - startOperation or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) StartMountable(ctx context.Context, flags DriveStartFlags, startOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GDriveStartFlags    // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GDriveStartFlags(flags)
	if startOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(startOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_start_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(startOperation)
	runtime.KeepAlive(callback)
}

// StartMountableFinish finishes a start operation. See g_file_start_mountable()
// for details.
//
// Finish an asynchronous start operation that was started with
// g_file_start_mountable().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) StartMountableFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_start_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// StopMountable stops a file of type FILE_TYPE_MOUNTABLE.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_stop_mountable_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - mountOperation: Operation, or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) StopMountable(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountUnmountFlags(flags)
	if mountOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_stop_mountable(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mountOperation)
	runtime.KeepAlive(callback)
}

// StopMountableFinish finishes a stop operation, see g_file_stop_mountable()
// for details.
//
// Finish an asynchronous stop operation that was started with
// g_file_stop_mountable().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) StopMountableFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_stop_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SupportsThreadContexts checks if file supports [thread-default
// contexts][g-main-context-push-thread-default-context]. If this returns FALSE,
// you cannot perform asynchronous operations on file in a thread that has a
// thread-default context.
func (file *File) SupportsThreadContexts() bool {
	var _arg0 *C.GFile   // out
	var _cret C.gboolean // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_supports_thread_contexts(_arg0)
	runtime.KeepAlive(file)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Trash sends file to the "Trashcan", if possible. This is similar to deleting
// it, but the user can recover it before emptying the trashcan. Not all file
// systems support trashing, so this call can return the
// G_IO_ERROR_NOT_SUPPORTED error. Since GLib 2.66, the x-gvfs-notrash unix
// mount option can be used to disable g_file_trash() support for certain
// mounts, the G_IO_ERROR_NOT_SUPPORTED error will be returned in that case.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//
func (file *File) Trash(ctx context.Context) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GCancellable // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	C.g_file_trash(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// TrashAsync: asynchronously sends file to the Trash location, if possible.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - ioPriority: [I/O priority][io-priority] of the request.
//    - callback to call when the request is satisfied.
//
func (file *File) TrashAsync(ctx context.Context, ioPriority int, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.int                 // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.int(ioPriority)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_trash_async(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(ioPriority)
	runtime.KeepAlive(callback)
}

// TrashFinish finishes an asynchronous file trashing operation, started with
// g_file_trash_async().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) TrashFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_trash_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// UnmountMountable unmounts a file of type G_FILE_TYPE_MOUNTABLE.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_unmount_mountable_finish() to get the result of the operation.
//
// Deprecated: Use g_file_unmount_mountable_with_operation() instead.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) UnmountMountable(ctx context.Context, flags MountUnmountFlags, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg2 *C.GCancellable       // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg3 C.GAsyncReadyCallback // out
	var _arg4 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountUnmountFlags(flags)
	if callback != nil {
		_arg3 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg4 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_unmount_mountable(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(callback)
}

// UnmountMountableFinish finishes an unmount operation, see
// g_file_unmount_mountable() for details.
//
// Finish an asynchronous unmount operation that was started with
// g_file_unmount_mountable().
//
// Deprecated: Use g_file_unmount_mountable_with_operation_finish() instead.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) UnmountMountableFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_unmount_mountable_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// UnmountMountableWithOperation unmounts a file of type FILE_TYPE_MOUNTABLE.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// When the operation is finished, callback will be called. You can then call
// g_file_unmount_mountable_finish() to get the result of the operation.
//
// The function takes the following parameters:
//
//    - ctx: optional #GCancellable object, NULL to ignore.
//    - flags affecting the operation.
//    - mountOperation: Operation, or NULL to avoid user interaction.
//    - callback to call when the request is satisfied, or NULL.
//
func (file *File) UnmountMountableWithOperation(ctx context.Context, flags MountUnmountFlags, mountOperation *MountOperation, callback AsyncReadyCallback) {
	var _arg0 *C.GFile              // out
	var _arg3 *C.GCancellable       // out
	var _arg1 C.GMountUnmountFlags  // out
	var _arg2 *C.GMountOperation    // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.GMountUnmountFlags(flags)
	if mountOperation != nil {
		_arg2 = (*C.GMountOperation)(unsafe.Pointer(mountOperation.Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_file_unmount_mountable_with_operation(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(file)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mountOperation)
	runtime.KeepAlive(callback)
}

// UnmountMountableWithOperationFinish finishes an unmount operation, see
// g_file_unmount_mountable_with_operation() for details.
//
// Finish an asynchronous unmount operation that was started with
// g_file_unmount_mountable_with_operation().
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (file *File) UnmountMountableWithOperationFinish(result AsyncResulter) error {
	var _arg0 *C.GFile        // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GFile)(unsafe.Pointer(file.Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(result.Native()))

	C.g_file_unmount_mountable_with_operation_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(file)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// NewFileForCommandlineArg creates a #GFile with the given argument from the
// command line. The value of arg can be either a URI, an absolute path or a
// relative path resolved relative to the current working directory. This
// operation never fails, but the returned object might not support any I/O
// operation if arg points to a malformed path.
//
// Note that on Windows, this function expects its argument to be in UTF-8 --
// not the system code page. This means that you should not use this function
// with string from argv as it is passed to main(). g_win32_get_command_line()
// will return a UTF-8 version of the commandline. #GApplication also uses UTF-8
// but g_application_command_line_create_file_for_arg() may be more useful for
// you there. It is also always possible to use this function with Context
// arguments of type G_OPTION_ARG_FILENAME.
//
// The function takes the following parameters:
//
//    - arg: command line string.
//
func NewFileForCommandlineArg(arg string) Filer {
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(arg)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_new_for_commandline_arg(_arg1)
	runtime.KeepAlive(arg)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}

	return _file
}

// NewFileForCommandlineArgAndCwd creates a #GFile with the given argument from
// the command line.
//
// This function is similar to g_file_new_for_commandline_arg() except that it
// allows for passing the current working directory as an argument instead of
// using the current working directory of the process.
//
// This is useful if the commandline argument was given in a context other than
// the invocation of the current process.
//
// See also g_application_command_line_create_file_for_arg().
//
// The function takes the following parameters:
//
//    - arg: command line string.
//    - cwd: current working directory of the commandline.
//
func NewFileForCommandlineArgAndCwd(arg, cwd string) Filer {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _cret *C.GFile // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(arg)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(cwd)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_file_new_for_commandline_arg_and_cwd(_arg1, _arg2)
	runtime.KeepAlive(arg)
	runtime.KeepAlive(cwd)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}

	return _file
}

// NewFileForPath constructs a #GFile for a given path. This operation never
// fails, but the returned object might not support any I/O operation if path is
// malformed.
//
// The function takes the following parameters:
//
//    - path: string containing a relative or absolute path. The string must be
//    encoded in the glib filename encoding.
//
func NewFileForPath(path string) Filer {
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_new_for_path(_arg1)
	runtime.KeepAlive(path)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}

	return _file
}

// NewFileForURI constructs a #GFile for a given URI. This operation never
// fails, but the returned object might not support any I/O operation if uri is
// malformed or if the uri type is not supported.
//
// The function takes the following parameters:
//
//    - uri: UTF-8 string containing a URI.
//
func NewFileForURI(uri string) Filer {
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_new_for_uri(_arg1)
	runtime.KeepAlive(uri)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}

	return _file
}

// NewFileTmp opens a file in the preferred directory for temporary files (as
// returned by g_get_tmp_dir()) and returns a #GFile and IOStream pointing to
// it.
//
// tmpl should be a string in the GLib file name encoding containing a sequence
// of six 'X' characters, and containing no directory components. If it is NULL,
// a default template is used.
//
// Unlike the other #GFile constructors, this will return NULL if a temporary
// file could not be created.
//
// The function takes the following parameters:
//
//    - tmpl: template for the file name, as in g_file_open_tmp(), or NULL for
//    a default template.
//
func NewFileTmp(tmpl string) (*FileIOStream, Filer, error) {
	var _arg1 *C.char          // out
	var _arg2 *C.GFileIOStream // in
	var _cret *C.GFile         // in
	var _cerr *C.GError        // in

	if tmpl != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(tmpl)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.g_file_new_tmp(_arg1, &_arg2, &_cerr)
	runtime.KeepAlive(tmpl)

	var _iostream *FileIOStream // out
	var _file Filer             // out
	var _goerr error            // out

	_iostream = wrapFileIOStream(externglib.AssumeOwnership(unsafe.Pointer(_arg2)))
	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _iostream, _file, _goerr
}

// FileParseName constructs a #GFile with the given parse_name (i.e. something
// given by g_file_get_parse_name()). This operation never fails, but the
// returned object might not support any I/O operation if the parse_name cannot
// be parsed.
//
// The function takes the following parameters:
//
//    - parseName: file name or path to be parsed.
//
func FileParseName(parseName string) Filer {
	var _arg1 *C.char  // out
	var _cret *C.GFile // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(parseName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_file_parse_name(_arg1)
	runtime.KeepAlive(parseName)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.AssumeOwnership(objptr)
		rv, ok := (externglib.CastObject(object)).(Filer)
		if !ok {
			panic("object of type " + object.TypeFromInstance().String() + " is not gio.Filer")
		}
		_file = rv
	}

	return _file
}
