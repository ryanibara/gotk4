// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeZlibCompressor returns the GType for the type ZlibCompressor.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeZlibCompressor() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "ZlibCompressor").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalZlibCompressor)
	return gtype
}

// ZlibCompressorOverrider contains methods that are overridable.
type ZlibCompressorOverrider interface {
}

// ZlibCompressor: zlib decompression.
type ZlibCompressor struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Converter
}

var (
	_ coreglib.Objector = (*ZlibCompressor)(nil)
)

func classInitZlibCompressorrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapZlibCompressor(obj *coreglib.Object) *ZlibCompressor {
	return &ZlibCompressor{
		Object: obj,
		Converter: Converter{
			Object: obj,
		},
	}
}

func marshalZlibCompressor(p uintptr) (interface{}, error) {
	return wrapZlibCompressor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FileInfo returns the Compressor:file-info property.
//
// The function returns the following values:
//
//    - fileInfo (optional) or NULL.
//
func (compressor *ZlibCompressor) FileInfo() *FileInfo {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(compressor).Native()))

	_info := girepository.MustFind("Gio", "ZlibCompressor")
	_gret := _info.InvokeClassMethod("get_file_info", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(compressor)

	var _fileInfo *FileInfo // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_fileInfo = wrapFileInfo(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _fileInfo
}

// SetFileInfo sets file_info in compressor. If non-NULL, and compressor's
// Compressor:format property is G_ZLIB_COMPRESSOR_FORMAT_GZIP, it will be used
// to set the file name and modification time in the GZIP header of the
// compressed data.
//
// Note: it is an error to call this function while a compression is in
// progress; it may only be called immediately after creation of compressor, or
// after resetting it with g_converter_reset().
//
// The function takes the following parameters:
//
//    - fileInfo (optional): Info.
//
func (compressor *ZlibCompressor) SetFileInfo(fileInfo *FileInfo) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(compressor).Native()))
	if fileInfo != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(fileInfo).Native()))
	}

	_info := girepository.MustFind("Gio", "ZlibCompressor")
	_info.InvokeClassMethod("set_file_info", _args[:], nil)

	runtime.KeepAlive(compressor)
	runtime.KeepAlive(fileInfo)
}
