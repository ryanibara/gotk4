// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SimpleAsyncResultIsValid ensures that the data passed to the _finish function
// of an async operation is consistent. Three checks are performed.
//
// First, result is checked to ensure that it is really a AsyncResult. Second,
// source is checked to ensure that it matches the source object of result.
// Third, source_tag is checked to ensure that it is equal to the source_tag
// argument given to g_simple_async_result_new() (which, by convention,
// is a pointer to the _async function corresponding to the _finish function
// from which this function is called). (Alternatively, if either source_tag or
// result's source tag is NULL, then the source tag check is skipped.)
//
// Deprecated: Use #GTask and g_task_is_valid() instead.
//
// The function takes the following parameters:
//
//   - result passed to the _finish function.
//   - source (optional) passed to the _finish function.
//   - sourceTag (optional) asynchronous function.
//
// The function returns the following values:
//
//   - ok if all checks passed or LSE if any failed.
//
func SimpleAsyncResultIsValid(result AsyncResulter, source *coreglib.Object, sourceTag unsafe.Pointer) bool {
	var _arg1 *C.GAsyncResult // out
	var _arg2 *C.GObject      // out
	var _arg3 C.gpointer      // out
	var _cret C.gboolean      // in

	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	if source != nil {
		_arg2 = (*C.GObject)(unsafe.Pointer(source.Native()))
	}
	_arg3 = (C.gpointer)(unsafe.Pointer(sourceTag))

	_cret = C.g_simple_async_result_is_valid(_arg1, _arg2, _arg3)
	runtime.KeepAlive(result)
	runtime.KeepAlive(source)
	runtime.KeepAlive(sourceTag)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
