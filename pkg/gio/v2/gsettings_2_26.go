// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SettingsListSchemas: deprecated.
//
// Deprecated: Use g_settings_schema_source_list_schemas() instead. If you used
// g_settings_list_schemas() to check for the presence of a particular schema,
// use g_settings_schema_source_lookup() instead of your whole loop.
//
// The function returns the following values:
//
//   - utf8s: list of #GSettings schemas that are available, in no defined
//     order. The list must not be modified or freed.
//
func SettingsListSchemas() []string {
	var _cret **C.gchar // in

	_cret = C.g_settings_list_schemas()

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// SettingsUnbind removes an existing binding for property on object.
//
// Note that bindings are automatically removed when the object is finalized,
// so it is rarely necessary to call this function.
//
// The function takes the following parameters:
//
//   - object: object.
//   - property whose binding is removed.
//
func SettingsUnbind(object *coreglib.Object, property string) {
	var _arg1 C.gpointer // out
	var _arg2 *C.gchar   // out

	_arg1 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_settings_unbind(_arg1, _arg2)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
}
