// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Int64 gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 64-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int64
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - gint64: 64-bit integer.
//
func (settings *Settings) Int64(key string) int64 {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.gint64     // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_int64(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// Uint64 gets the value that is stored at key in settings.
//
// A convenience variant of g_settings_get() for 64-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint64 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key to get the value for.
//
// The function returns the following values:
//
//    - guint64: 64-bit unsigned integer.
//
func (settings *Settings) Uint64(key string) uint64 {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _cret C.guint64    // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_settings_get_uint64(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// SetInt64 sets key in settings to value.
//
// A convenience variant of g_settings_set() for 64-bit integers.
//
// It is a programmer error to give a key that isn't specified as having a int64
// type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetInt64(key string, value int64) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.gint64     // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint64(value)

	_cret = C.g_settings_set_int64(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetUint64 sets key in settings to value.
//
// A convenience variant of g_settings_set() for 64-bit unsigned integers.
//
// It is a programmer error to give a key that isn't specified as having a
// uint64 type in the schema for settings.
//
// The function takes the following parameters:
//
//    - key: name of the key to set.
//    - value to set it to.
//
// The function returns the following values:
//
//    - ok: TRUE if setting the key succeeded, FALSE if the key was not writable.
//
func (settings *Settings) SetUint64(key string, value uint64) bool {
	var _arg0 *C.GSettings // out
	var _arg1 *C.gchar     // out
	var _arg2 C.guint64    // out
	var _cret C.gboolean   // in

	_arg0 = (*C.GSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint64(value)

	_cret = C.g_settings_set_uint64(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
