// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// ModificationDateTime gets the modification time of the current info and
// returns it as a Time.
//
// This requires the G_FILE_ATTRIBUTE_TIME_MODIFIED attribute. If
// G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is provided, the resulting Time will have
// microsecond precision.
//
// The function returns the following values:
//
//    - dateTime (optional): modification time, or NULL if unknown.
//
func (info *FileInfo) ModificationDateTime() *glib.DateTime {
	var _arg0 *C.GFileInfo // out
	var _cret *C.GDateTime // in

	_arg0 = (*C.GFileInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.g_file_info_get_modification_date_time(_arg0)
	runtime.KeepAlive(info)

	var _dateTime *glib.DateTime // out

	if _cret != nil {
		_dateTime = (*glib.DateTime)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_dateTime)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_date_time_unref((*C.GDateTime)(intern.C))
			},
		)
	}

	return _dateTime
}

// SetModificationDateTime sets the G_FILE_ATTRIBUTE_TIME_MODIFIED and
// G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the given
// date/time value.
//
// The function takes the following parameters:
//
//    - mtime: Time.
//
func (info *FileInfo) SetModificationDateTime(mtime *glib.DateTime) {
	var _arg0 *C.GFileInfo // out
	var _arg1 *C.GDateTime // out

	_arg0 = (*C.GFileInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	_arg1 = (*C.GDateTime)(gextras.StructNative(unsafe.Pointer(mtime)))

	C.g_file_info_set_modification_date_time(_arg0, _arg1)
	runtime.KeepAlive(info)
	runtime.KeepAlive(mtime)
}
