// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_file_icon_get_type()), F: marshalFileIconner},
	})
}

// FileIcon specifies an icon by pointing to an image file to be used as icon.
type FileIcon struct {
	_ [0]func() // equal guard
	*externglib.Object

	LoadableIcon
}

var (
	_ externglib.Objector = (*FileIcon)(nil)
)

func wrapFileIcon(obj *externglib.Object) *FileIcon {
	return &FileIcon{
		Object: obj,
		LoadableIcon: LoadableIcon{
			Icon: Icon{
				Object: obj,
			},
		},
	}
}

func marshalFileIconner(p uintptr) (interface{}, error) {
	return wrapFileIcon(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFileIcon creates a new icon for a file.
//
// The function takes the following parameters:
//
//    - file: #GFile.
//
// The function returns the following values:
//
//    - fileIcon for the given file, or NULL on error.
//
func NewFileIcon(file Filer) *FileIcon {
	var _arg1 *C.GFile // out
	var _cret *C.GIcon // in

	_arg1 = (*C.GFile)(unsafe.Pointer(file.Native()))

	_cret = C.g_file_icon_new(_arg1)
	runtime.KeepAlive(file)

	var _fileIcon *FileIcon // out

	_fileIcon = wrapFileIcon(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _fileIcon
}

// File gets the #GFile associated with the given icon.
//
// The function returns the following values:
//
//    - file: #GFile.
//
func (icon *FileIcon) File() Filer {
	var _arg0 *C.GFileIcon // out
	var _cret *C.GFile     // in

	_arg0 = (*C.GFileIcon)(unsafe.Pointer(icon.Native()))

	_cret = C.g_file_icon_get_file(_arg0)
	runtime.KeepAlive(icon)

	var _file Filer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.Filer is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(Filer)
			return ok
		})
		rv, ok := casted.(Filer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.Filer")
		}
		_file = rv
	}

	return _file
}
