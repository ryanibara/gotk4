// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gfileicon.go.
var GTypeFileIcon = coreglib.Type(C.g_file_icon_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeFileIcon, F: marshalFileIcon},
	})
}

// FileIconOverrider contains methods that are overridable.
type FileIconOverrider interface {
}

// FileIcon specifies an icon by pointing to an image file to be used as icon.
type FileIcon struct {
	_ [0]func() // equal guard
	*coreglib.Object

	LoadableIcon
}

var (
	_ coreglib.Objector = (*FileIcon)(nil)
)

func classInitFileIconner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapFileIcon(obj *coreglib.Object) *FileIcon {
	return &FileIcon{
		Object: obj,
		LoadableIcon: LoadableIcon{
			Icon: Icon{
				Object: obj,
			},
		},
	}
}

func marshalFileIcon(p uintptr) (interface{}, error) {
	return wrapFileIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewFileIcon creates a new icon for a file.
//
// The function takes the following parameters:
//
//    - file: #GFile.
//
// The function returns the following values:
//
//    - fileIcon for the given file, or NULL on error.
//
func NewFileIcon(file Filer) *FileIcon {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(file).Native()))

	_gret := girepository.MustFind("Gio", "FileIcon").InvokeMethod("new_FileIcon", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(file)

	var _fileIcon *FileIcon // out

	_fileIcon = wrapFileIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _fileIcon
}

// File gets the #GFile associated with the given icon.
//
// The function returns the following values:
//
//    - file: #GFile.
//
func (icon *FileIcon) File() *File {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))

	_gret := girepository.MustFind("Gio", "FileIcon").InvokeMethod("get_file", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)

	var _file *File // out

	_file = wrapFile(coreglib.Take(unsafe.Pointer(_cret)))

	return _file
}
