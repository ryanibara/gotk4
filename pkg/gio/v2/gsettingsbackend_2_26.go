// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SettingsBackendFlattenTree: calculate the longest common prefix of all keys
// in a tree and write out an array of the key names relative to that prefix
// and, optionally, the value to store at each of those keys.
//
// You must free the value returned in path, keys and values using g_free().
// You should not attempt to free or unref the contents of keys or values.
//
// The function takes the following parameters:
//
//   - tree containing the changes.
//
// The function returns the following values:
//
//   - path: location to save the path.
//   - keys: the location to save the relative keys.
//   - values (optional): the location to save the values, or NULL.
//
func SettingsBackendFlattenTree(tree *glib.Tree) (string, []string, []*glib.Variant) {
	var _arg1 *C.GTree     // out
	var _arg2 *C.gchar     // in
	var _arg3 **C.gchar    // in
	var _arg4 **C.GVariant // in

	_arg1 = (*C.GTree)(gextras.StructNative(unsafe.Pointer(tree)))

	C.g_settings_backend_flatten_tree(_arg1, &_arg2, &_arg3, &_arg4)
	runtime.KeepAlive(tree)

	var _path string            // out
	var _keys []string          // out
	var _values []*glib.Variant // out

	_path = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	defer C.free(unsafe.Pointer(_arg2))
	defer C.free(unsafe.Pointer(_arg3))
	{
		var i int
		var z *C.gchar
		for p := _arg3; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_arg3, i)
		_keys = make([]string, i)
		for i := range src {
			_keys[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}
	if _arg4 != nil {
		defer C.free(unsafe.Pointer(_arg4))
		{
			var i int
			var z *C.GVariant
			for p := _arg4; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_arg4, i)
			_values = make([]*glib.Variant, i)
			for i := range src {
				_values[i] = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(src[i])))
				C.g_variant_ref(src[i])
				runtime.SetFinalizer(
					gextras.StructIntern(unsafe.Pointer(_values[i])),
					func(intern *struct{ C unsafe.Pointer }) {
						C.g_variant_unref((*C.GVariant)(intern.C))
					},
				)
			}
		}
	}

	return _path, _keys, _values
}
