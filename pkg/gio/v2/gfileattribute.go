// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeFileAttributeInfoList returns the GType for the type FileAttributeInfoList.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeFileAttributeInfoList() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "FileAttributeInfoList").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalFileAttributeInfoList)
	return gtype
}

// FileAttributeInfo: information about a specific attribute.
//
// An instance of this type is always passed by reference.
type FileAttributeInfo struct {
	*fileAttributeInfo
}

// fileAttributeInfo is the struct that's finalized.
type fileAttributeInfo struct {
	native unsafe.Pointer
}

// FileAttributeInfoList acts as a lightweight registry for possible valid file
// attributes. The registry stores Key-Value pair formats as AttributeInfos.
//
// An instance of this type is always passed by reference.
type FileAttributeInfoList struct {
	*fileAttributeInfoList
}

// fileAttributeInfoList is the struct that's finalized.
type fileAttributeInfoList struct {
	native unsafe.Pointer
}

func marshalFileAttributeInfoList(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &FileAttributeInfoList{&fileAttributeInfoList{(unsafe.Pointer)(b)}}, nil
}

// NewFileAttributeInfoList constructs a struct FileAttributeInfoList.
func NewFileAttributeInfoList() *FileAttributeInfoList {
	_info := girepository.MustFind("Gio", "FileAttributeInfoList")
	_gret := _info.InvokeRecordMethod("new", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _fileAttributeInfoList *FileAttributeInfoList // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_fileAttributeInfoList)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _fileAttributeInfoList
}

// Infos: array of AttributeInfos.
func (f *FileAttributeInfoList) Infos() *FileAttributeInfo {
	offset := girepository.MustFind("Gio", "FileAttributeInfoList").StructFieldOffset("infos")
	valptr := (*uintptr)(unsafe.Add(f.native, offset))
	var v *FileAttributeInfo // out
	v = (*FileAttributeInfo)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return v
}

// NInfos: number of values in the array.
func (f *FileAttributeInfoList) NInfos() int32 {
	offset := girepository.MustFind("Gio", "FileAttributeInfoList").StructFieldOffset("n_infos")
	valptr := (*uintptr)(unsafe.Add(f.native, offset))
	var v int32 // out
	v = int32(*(*C.int)(unsafe.Pointer(&*valptr)))
	return v
}

// NInfos: number of values in the array.
func (f *FileAttributeInfoList) SetNInfos(nInfos int32) {
	offset := girepository.MustFind("Gio", "FileAttributeInfoList").StructFieldOffset("n_infos")
	valptr := (*uintptr)(unsafe.Add(f.native, offset))
	*(*C.int)(unsafe.Pointer(&*valptr)) = C.int(nInfos)
}

// Dup makes a duplicate of a file attribute info list.
//
// The function returns the following values:
//
//    - fileAttributeInfoList: copy of the given list.
//
func (list *FileAttributeInfoList) Dup() *FileAttributeInfoList {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))

	_info := girepository.MustFind("Gio", "FileAttributeInfoList")
	_gret := _info.InvokeRecordMethod("dup", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(list)

	var _fileAttributeInfoList *FileAttributeInfoList // out

	_fileAttributeInfoList = (*FileAttributeInfoList)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_fileAttributeInfoList)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _fileAttributeInfoList
}

// Lookup gets the file attribute with the name name from list.
//
// The function takes the following parameters:
//
//    - name of the attribute to look up.
//
// The function returns the following values:
//
//    - fileAttributeInfo for the name, or NULL if an attribute isn't found.
//
func (list *FileAttributeInfoList) Lookup(name string) *FileAttributeInfo {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(list)))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "FileAttributeInfoList")
	_gret := _info.InvokeRecordMethod("lookup", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(list)
	runtime.KeepAlive(name)

	var _fileAttributeInfo *FileAttributeInfo // out

	_fileAttributeInfo = (*FileAttributeInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _fileAttributeInfo
}
