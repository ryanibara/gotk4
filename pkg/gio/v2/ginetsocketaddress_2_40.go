// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewInetSocketAddressFromString creates a new SocketAddress for address and
// port.
//
// If address is an IPv6 address, it can also contain a scope ID (separated from
// the address by a %).
//
// The function takes the following parameters:
//
//    - address: string form of an IP address.
//    - port number.
//
// The function returns the following values:
//
//    - inetSocketAddress (optional): new SocketAddress, or NULL if address
//      cannot be parsed.
//
func NewInetSocketAddressFromString(address string, port uint) *InetSocketAddress {
	var _arg1 *C.char           // out
	var _arg2 C.guint           // out
	var _cret *C.GSocketAddress // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(address)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(port)

	_cret = C.g_inet_socket_address_new_from_string(_arg1, _arg2)
	runtime.KeepAlive(address)
	runtime.KeepAlive(port)

	var _inetSocketAddress *InetSocketAddress // out

	if _cret != nil {
		_inetSocketAddress = wrapInetSocketAddress(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	}

	return _inetSocketAddress
}
