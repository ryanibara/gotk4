// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// SocketSourceFunc: this is the function type of the callback used for the
// #GSource returned by g_socket_create_source().
type SocketSourceFunc func(socket *Socket, condition glib.IOCondition) (ok bool)

// InputVector: structure used for scatter/gather data input. You generally pass
// in an array of Vectors and the operation will store the read data starting in
// the first buffer, switching to the next as needed.
//
// An instance of this type is always passed by reference.
type InputVector struct {
	*inputVector
}

// inputVector is the struct that's finalized.
type inputVector struct {
	native *C.GInputVector
}

// Buffer: pointer to a buffer where data will be written.
func (i *InputVector) Buffer() unsafe.Pointer {
	valptr := &i.native.buffer
	var _v unsafe.Pointer // out
	_v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return _v
}

// Size: available size in buffer.
func (i *InputVector) Size() uint {
	valptr := &i.native.size
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Size: available size in buffer.
func (i *InputVector) SetSize(size uint) {
	valptr := &i.native.size
	*valptr = C.gsize(size)
}

// OutputVector: structure used for scatter/gather data output. You generally
// pass in an array of Vectors and the operation will use all the buffers as if
// they were one buffer.
//
// An instance of this type is always passed by reference.
type OutputVector struct {
	*outputVector
}

// outputVector is the struct that's finalized.
type outputVector struct {
	native *C.GOutputVector
}

// Buffer: pointer to a buffer of data to read.
func (o *OutputVector) Buffer() unsafe.Pointer {
	valptr := &o.native.buffer
	var _v unsafe.Pointer // out
	_v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return _v
}

// Size: size of buffer.
func (o *OutputVector) Size() uint {
	valptr := &o.native.size
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Size: size of buffer.
func (o *OutputVector) SetSize(size uint) {
	valptr := &o.native.size
	*valptr = C.gsize(size)
}
