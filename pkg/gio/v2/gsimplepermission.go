// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// NewSimplePermission creates a new #GPermission instance that represents an
// action that is either always or never allowed.
//
// The function takes the following parameters:
//
//    - allowed: TRUE if the action is allowed.
//
// The function returns the following values:
//
//    - simplePermission as a #GPermission.
//
func NewSimplePermission(allowed bool) *SimplePermission {
	var args [1]girepository.Argument
	var _arg0 C.gboolean // out
	var _cret *C.void    // in

	if allowed {
		_arg0 = C.TRUE
	}
	*(*bool)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "SimplePermission").InvokeMethod("new_SimplePermission", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(allowed)

	var _simplePermission *SimplePermission // out

	_simplePermission = wrapSimplePermission(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _simplePermission
}
