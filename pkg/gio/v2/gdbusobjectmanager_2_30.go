// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// GDBusInterface* _gotk4_gio2_DBusObjectManager_virtual_get_interface(void* fnptr, GDBusObjectManager* arg0, gchar* arg1, gchar* arg2) {
//   return ((GDBusInterface* (*)(GDBusObjectManager*, gchar*, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// GDBusObject* _gotk4_gio2_DBusObjectManager_virtual_get_object(void* fnptr, GDBusObjectManager* arg0, gchar* arg1) {
//   return ((GDBusObject* (*)(GDBusObjectManager*, gchar*))(fnptr))(arg0, arg1);
// };
// GList* _gotk4_gio2_DBusObjectManager_virtual_get_objects(void* fnptr, GDBusObjectManager* arg0) {
//   return ((GList* (*)(GDBusObjectManager*))(fnptr))(arg0);
// };
// gchar* _gotk4_gio2_DBusObjectManager_virtual_get_object_path(void* fnptr, GDBusObjectManager* arg0) {
//   return ((gchar* (*)(GDBusObjectManager*))(fnptr))(arg0);
// };
import "C"

// Interface gets the interface proxy for interface_name at object_path, if any.
//
// The function takes the following parameters:
//
//    - objectPath: object path to look up.
//    - interfaceName d-Bus interface name to look up.
//
// The function returns the following values:
//
//    - dBusInterface instance or NULL. Free with g_object_unref().
//
func (manager *DBusObjectManager) Interface(objectPath, interfaceName string) *DBusInterface {
	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.gchar              // out
	var _cret *C.GDBusInterface     // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(interfaceName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_dbus_object_manager_get_interface(_arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(objectPath)
	runtime.KeepAlive(interfaceName)

	var _dBusInterface *DBusInterface // out

	_dBusInterface = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusInterface
}

// GetObject gets the BusObjectProxy at object_path, if any.
//
// The function takes the following parameters:
//
//    - objectPath: object path to look up.
//
// The function returns the following values:
//
//    - dBusObject or NULL. Free with g_object_unref().
//
func (manager *DBusObjectManager) GetObject(objectPath string) *DBusObject {
	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.gchar              // out
	var _cret *C.GDBusObject        // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_dbus_object_manager_get_object(_arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(objectPath)

	var _dBusObject *DBusObject // out

	_dBusObject = wrapDBusObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusObject
}

// ObjectPath gets the object path that manager is for.
//
// The function returns the following values:
//
//    - utf8: string owned by manager. Do not free.
//
func (manager *DBusObjectManager) ObjectPath() string {
	var _arg0 *C.GDBusObjectManager // out
	var _cret *C.gchar              // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_cret = C.g_dbus_object_manager_get_object_path(_arg0)
	runtime.KeepAlive(manager)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Objects gets all BusObject objects known to manager.
//
// The function returns the following values:
//
//    - list of BusObject objects. The returned list should be freed with
//      g_list_free() after each element has been freed with g_object_unref().
//
func (manager *DBusObjectManager) Objects() []*DBusObject {
	var _arg0 *C.GDBusObjectManager // out
	var _cret *C.GList              // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_cret = C.g_dbus_object_manager_get_objects(_arg0)
	runtime.KeepAlive(manager)

	var _list []*DBusObject // out

	_list = make([]*DBusObject, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GDBusObject)(v)
		var dst *DBusObject // out
		dst = wrapDBusObject(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Iface gets the interface proxy for interface_name at object_path, if any.
//
// The function takes the following parameters:
//
//    - objectPath: object path to look up.
//    - interfaceName d-Bus interface name to look up.
//
// The function returns the following values:
//
//    - dBusInterface instance or NULL. Free with g_object_unref().
//
func (manager *DBusObjectManager) iface(objectPath, interfaceName string) *DBusInterface {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.get_interface

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.gchar              // out
	var _cret *C.GDBusInterface     // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(interfaceName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C._gotk4_gio2_DBusObjectManager_virtual_get_interface(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(objectPath)
	runtime.KeepAlive(interfaceName)

	var _dBusInterface *DBusInterface // out

	_dBusInterface = wrapDBusInterface(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusInterface
}

// getObject gets the BusObjectProxy at object_path, if any.
//
// The function takes the following parameters:
//
//    - objectPath: object path to look up.
//
// The function returns the following values:
//
//    - dBusObject or NULL. Free with g_object_unref().
//
func (manager *DBusObjectManager) getObject(objectPath string) *DBusObject {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.get_object

	var _arg0 *C.GDBusObjectManager // out
	var _arg1 *C.gchar              // out
	var _cret *C.GDBusObject        // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_gio2_DBusObjectManager_virtual_get_object(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(objectPath)

	var _dBusObject *DBusObject // out

	_dBusObject = wrapDBusObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusObject
}

// objectPath gets the object path that manager is for.
//
// The function returns the following values:
//
//    - utf8: string owned by manager. Do not free.
//
func (manager *DBusObjectManager) objectPath() string {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.get_object_path

	var _arg0 *C.GDBusObjectManager // out
	var _cret *C.gchar              // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_cret = C._gotk4_gio2_DBusObjectManager_virtual_get_object_path(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(manager)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Objects gets all BusObject objects known to manager.
//
// The function returns the following values:
//
//    - list of BusObject objects. The returned list should be freed with
//      g_list_free() after each element has been freed with g_object_unref().
//
func (manager *DBusObjectManager) objects() []*DBusObject {
	gclass := (*C.GDBusObjectManagerIface)(coreglib.PeekParentClass(manager))
	fnarg := gclass.get_objects

	var _arg0 *C.GDBusObjectManager // out
	var _cret *C.GList              // in

	_arg0 = (*C.GDBusObjectManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_cret = C._gotk4_gio2_DBusObjectManager_virtual_get_objects(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(manager)

	var _list []*DBusObject // out

	_list = make([]*DBusObject, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GDBusObject)(v)
		var dst *DBusObject // out
		dst = wrapDBusObject(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// DBusObjectManagerIface: base type for D-Bus object managers.
//
// An instance of this type is always passed by reference.
type DBusObjectManagerIface struct {
	*dBusObjectManagerIface
}

// dBusObjectManagerIface is the struct that's finalized.
type dBusObjectManagerIface struct {
	native *C.GDBusObjectManagerIface
}
