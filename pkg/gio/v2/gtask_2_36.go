// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
import "C"

// TaskIsValid checks that result is a #GTask, and that source_object is its
// source object (or that source_object is NULL and result has no source
// object). This can be used in g_return_if_fail() checks.
//
// The function takes the following parameters:
//
//   - result: Result.
//   - sourceObject (optional): source object expected to be associated with the
//     task.
//
// The function returns the following values:
//
//   - ok: TRUE if result and source_object are valid, FALSE if not.
//
func TaskIsValid(result AsyncResulter, sourceObject *coreglib.Object) bool {
	var _arg1 C.gpointer // out
	var _arg2 C.gpointer // out
	var _cret C.gboolean // in

	_arg1 = *(*C.gpointer)(unsafe.Pointer(coreglib.InternObject(result).Native()))
	_arg2 = C.gpointer(unsafe.Pointer(sourceObject.Native()))

	_cret = C.g_task_is_valid(_arg1, _arg2)
	runtime.KeepAlive(result)
	runtime.KeepAlive(sourceObject)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TaskReportError creates a #GTask and then immediately calls
// g_task_return_error() on it. Use this in the wrapper function of an
// asynchronous method when you want to avoid even calling the virtual method.
// You can then use g_async_result_is_tagged() in the finish method wrapper to
// check if the result there is tagged as having been created by the wrapper
// method, and deal with it appropriately if so.
//
// See also g_task_report_new_error().
//
// The function takes the following parameters:
//
//   - sourceObject (optional) that owns this task, or NULL.
//   - callback (optional): ReadyCallback.
//   - sourceTag (optional): opaque pointer indicating the source of this task.
//   - err: error to report.
//
func TaskReportError(sourceObject *coreglib.Object, callback AsyncReadyCallback, sourceTag unsafe.Pointer, err error) {
	var _arg1 C.gpointer            // out
	var _arg2 C.GAsyncReadyCallback // out
	var _arg3 C.gpointer
	var _arg4 C.gpointer // out
	var _arg5 *C.GError  // out

	_arg1 = C.gpointer(unsafe.Pointer(sourceObject.Native()))
	if callback != nil {
		_arg2 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg3 = C.gpointer(gbox.AssignOnce(callback))
	}
	_arg4 = (C.gpointer)(unsafe.Pointer(sourceTag))
	if err != nil {
		_arg5 = (*C.GError)(gerror.New(err))
	}

	C.g_task_report_error(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(sourceObject)
	runtime.KeepAlive(callback)
	runtime.KeepAlive(sourceTag)
	runtime.KeepAlive(err)
}
