// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Flowinfo gets the sin6_flowinfo field from address, which must be an IPv6
// address.
//
// The function returns the following values:
//
//    - guint32: flowinfo field.
//
func (address *InetSocketAddress) Flowinfo() uint32 {
	var _arg0 *C.GInetSocketAddress // out
	var _cret C.guint32             // in

	_arg0 = (*C.GInetSocketAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_cret = C.g_inet_socket_address_get_flowinfo(_arg0)
	runtime.KeepAlive(address)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// ScopeID gets the sin6_scope_id field from address, which must be an IPv6
// address.
//
// The function returns the following values:
//
//    - guint32: scope id field.
//
func (address *InetSocketAddress) ScopeID() uint32 {
	var _arg0 *C.GInetSocketAddress // out
	var _cret C.guint32             // in

	_arg0 = (*C.GInetSocketAddress)(unsafe.Pointer(coreglib.InternObject(address).Native()))

	_cret = C.g_inet_socket_address_get_scope_id(_arg0)
	runtime.KeepAlive(address)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}
