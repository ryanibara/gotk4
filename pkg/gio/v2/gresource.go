// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// ResourcesRegister registers the resource with the process-global set of
// resources. Once a resource is registered the files in it can be accessed with
// the global resource lookup functions like g_resources_lookup_data().
//
// The function takes the following parameters:
//
//    - resource: #GResource.
//
func ResourcesRegister(resource *Resource) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(resource)))

	girepository.MustFind("Gio", "resources_register").Invoke(_args[:], nil)

	runtime.KeepAlive(resource)
}

// ResourcesUnregister unregisters the resource from the process-global set of
// resources.
//
// The function takes the following parameters:
//
//    - resource: #GResource.
//
func ResourcesUnregister(resource *Resource) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(resource)))

	girepository.MustFind("Gio", "resources_unregister").Invoke(_args[:], nil)

	runtime.KeepAlive(resource)
}

// ResourceLoad loads a binary resource bundle and creates a #GResource
// representation of it, allowing you to query it for data.
//
// If you want to use this resource in the global resource namespace you need to
// register it with g_resources_register().
//
// If filename is empty or the data in it is corrupt, G_RESOURCE_ERROR_INTERNAL
// will be returned. If filename doesnâ€™t exist, or there is an error in reading
// it, an error from g_mapped_file_new() will be returned.
//
// The function takes the following parameters:
//
//    - filename: path of a filename to load, in the GLib filename encoding.
//
// The function returns the following values:
//
//    - resource: new #GResource, or NULL on error.
//
func ResourceLoad(filename string) (*Resource, error) {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_args[0]))

	_gret := girepository.MustFind("Gio", "load").Invoke(_args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(filename)

	var _resource *Resource // out
	var _goerr error        // out

	_resource = (*Resource)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_resource)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_resource_unref((*C.GResource)(intern.C))
		},
	)
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _resource, _goerr
}

// StaticResource is an opaque data structure and can only be accessed using the
// following functions.
//
// An instance of this type is always passed by reference.
type StaticResource struct {
	*staticResource
}

// staticResource is the struct that's finalized.
type staticResource struct {
	native unsafe.Pointer
}

// Fini: finalized a GResource initialized by g_static_resource_init().
//
// This is normally used by code generated by
// [glib-compile-resources][glib-compile-resources] and is not typically used by
// other code.
func (staticResource *StaticResource) Fini() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(staticResource)))

	runtime.KeepAlive(staticResource)
}

// Resource gets the GResource that was registered by a call to
// g_static_resource_init().
//
// This is normally used by code generated by
// [glib-compile-resources][glib-compile-resources] and is not typically used by
// other code.
//
// The function returns the following values:
//
//    - resource: #GResource.
//
func (staticResource *StaticResource) Resource() *Resource {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(staticResource)))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(staticResource)

	var _resource *Resource // out

	_resource = (*Resource)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_resource_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_resource)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_resource_unref((*C.GResource)(intern.C))
		},
	)

	return _resource
}

// Init initializes a GResource from static data using a GStaticResource.
//
// This is normally used by code generated by
// [glib-compile-resources][glib-compile-resources] and is not typically used by
// other code.
func (staticResource *StaticResource) Init() {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(gextras.StructNative(unsafe.Pointer(staticResource)))

	runtime.KeepAlive(staticResource)
}
