// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewFileForCommandlineArgAndCwd creates a #GFile with the given argument from
// the command line.
//
// This function is similar to g_file_new_for_commandline_arg() except that it
// allows for passing the current working directory as an argument instead of
// using the current working directory of the process.
//
// This is useful if the commandline argument was given in a context other than
// the invocation of the current process.
//
// See also g_application_command_line_create_file_for_arg().
//
// The function takes the following parameters:
//
//    - arg: command line string.
//    - cwd: current working directory of the commandline.
//
// The function returns the following values:
//
//    - file: new #GFile.
//
func NewFileForCommandlineArgAndCwd(arg, cwd string) *File {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _cret *C.GFile // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(arg)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(cwd)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_file_new_for_commandline_arg_and_cwd(_arg1, _arg2)
	runtime.KeepAlive(arg)
	runtime.KeepAlive(cwd)

	var _file *File // out

	_file = wrapFile(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _file
}
