// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// DBusInterfaceGetPropertyFunc: type of the get_property function in
// BusInterfaceVTable.
type DBusInterfaceGetPropertyFunc func(connection *DBusConnection, sender, objectPath, interfaceName, propertyName string) (err error, variant *glib.Variant)

//export _gotk4_gio2_DBusInterfaceGetPropertyFunc
func _gotk4_gio2_DBusInterfaceGetPropertyFunc(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 *C.gchar, arg5 *C.gchar, arg6 **C.GError, arg7 C.gpointer) (cret *C.GVariant) {
	var fn DBusInterfaceGetPropertyFunc
	{
		v := gbox.Get(uintptr(arg7))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusInterfaceGetPropertyFunc)
	}

	var _connection *DBusConnection // out
	var _sender string              // out
	var _objectPath string          // out
	var _interfaceName string       // out
	var _propertyName string        // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_sender = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_interfaceName = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))
	_propertyName = C.GoString((*C.gchar)(unsafe.Pointer(arg5)))

	err, variant := fn(_connection, _sender, _objectPath, _interfaceName, _propertyName)

	if err != nil && arg6 != nil {
		*arg6 = (*C.void)(gerror.New(err))
	}
	cret = (*C.void)(gextras.StructNative(unsafe.Pointer(variant)))

	return cret
}

// DBusInterfaceMethodCallFunc: type of the method_call function in
// BusInterfaceVTable.
type DBusInterfaceMethodCallFunc func(connection *DBusConnection, sender, objectPath, interfaceName, methodName string, parameters *glib.Variant, invocation *DBusMethodInvocation)

//export _gotk4_gio2_DBusInterfaceMethodCallFunc
func _gotk4_gio2_DBusInterfaceMethodCallFunc(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 *C.gchar, arg5 *C.gchar, arg6 *C.GVariant, arg7 *C.GDBusMethodInvocation, arg8 C.gpointer) {
	var fn DBusInterfaceMethodCallFunc
	{
		v := gbox.Get(uintptr(arg8))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusInterfaceMethodCallFunc)
	}

	var _connection *DBusConnection       // out
	var _sender string                    // out
	var _objectPath string                // out
	var _interfaceName string             // out
	var _methodName string                // out
	var _parameters *glib.Variant         // out
	var _invocation *DBusMethodInvocation // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_sender = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_interfaceName = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))
	_methodName = C.GoString((*C.gchar)(unsafe.Pointer(arg5)))
	_parameters = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg6)))
	C.g_variant_ref(arg6)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_parameters)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)
	_invocation = wrapDBusMethodInvocation(coreglib.AssumeOwnership(unsafe.Pointer(arg7)))

	fn(_connection, _sender, _objectPath, _interfaceName, _methodName, _parameters, _invocation)
}

// DBusInterfaceSetPropertyFunc: type of the set_property function in
// BusInterfaceVTable.
type DBusInterfaceSetPropertyFunc func(connection *DBusConnection, sender, objectPath, interfaceName, propertyName string, value *glib.Variant) (err error, ok bool)

//export _gotk4_gio2_DBusInterfaceSetPropertyFunc
func _gotk4_gio2_DBusInterfaceSetPropertyFunc(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 *C.gchar, arg5 *C.gchar, arg6 *C.GVariant, arg7 **C.GError, arg8 C.gpointer) (cret C.gboolean) {
	var fn DBusInterfaceSetPropertyFunc
	{
		v := gbox.Get(uintptr(arg8))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusInterfaceSetPropertyFunc)
	}

	var _connection *DBusConnection // out
	var _sender string              // out
	var _objectPath string          // out
	var _interfaceName string       // out
	var _propertyName string        // out
	var _value *glib.Variant        // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_sender = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_interfaceName = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))
	_propertyName = C.GoString((*C.gchar)(unsafe.Pointer(arg5)))
	_value = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg6)))
	C.g_variant_ref(arg6)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_value)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	err, ok := fn(_connection, _sender, _objectPath, _interfaceName, _propertyName, _value)

	if err != nil && arg7 != nil {
		*arg7 = (*C.void)(gerror.New(err))
	}
	if ok {
		cret = C.TRUE
	}

	return cret
}

// DBusMessageFilterFunction: signature for function used in
// g_dbus_connection_add_filter().
//
// A filter function is passed a BusMessage and expected to return a BusMessage
// too. Passive filter functions that don't modify the message can simply return
// the message object:
//
//    static GDBusMessage *
//    passive_filter (GDBusConnection *connection
//                    GDBusMessage    *message,
//                    gboolean         incoming,
//                    gpointer         user_data)
//    {
//      // inspect message
//      return message;
//    }
//
// Filter functions that wants to drop a message can simply return NULL:
//
//    static GDBusMessage *
//    drop_filter (GDBusConnection *connection
//                 GDBusMessage    *message,
//                 gboolean         incoming,
//                 gpointer         user_data)
//    {
//      if (should_drop_message)
//        {
//          g_object_unref (message);
//          message = NULL;
//        }
//      return message;
//    }
//
// Finally, a filter function may modify a message by copying it:
//
//    static GDBusMessage *
//    modifying_filter (GDBusConnection *connection
//                      GDBusMessage    *message,
//                      gboolean         incoming,
//                      gpointer         user_data)
//    {
//      GDBusMessage *copy;
//      GError *error;
//
//      error = NULL;
//      copy = g_dbus_message_copy (message, &error);
//      // handle error being set
//      g_object_unref (message);
//
//      // modify copy
//
//      return copy;
//    }
//
// If the returned BusMessage is different from message and cannot be sent on
// connection (it could use features, such as file descriptors, not compatible
// with connection), then a warning is logged to standard error. Applications
// can check this ahead of time using g_dbus_message_to_blob() passing a
// BusCapabilityFlags value obtained from connection.
type DBusMessageFilterFunction func(connection *DBusConnection, message *DBusMessage, incoming bool) (dBusMessage *DBusMessage)

//export _gotk4_gio2_DBusMessageFilterFunction
func _gotk4_gio2_DBusMessageFilterFunction(arg1 *C.GDBusConnection, arg2 *C.GDBusMessage, arg3 C.gboolean, arg4 C.gpointer) (cret *C.GDBusMessage) {
	var fn DBusMessageFilterFunction
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusMessageFilterFunction)
	}

	var _connection *DBusConnection // out
	var _message *DBusMessage       // out
	var _incoming bool              // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_message = wrapDBusMessage(coreglib.AssumeOwnership(unsafe.Pointer(arg2)))
	if arg3 != 0 {
		_incoming = true
	}

	dBusMessage := fn(_connection, _message, _incoming)

	if dBusMessage != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(dBusMessage).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(dBusMessage).Native()))
	}

	return cret
}

// DBusSignalCallback: signature for callback function used in
// g_dbus_connection_signal_subscribe().
type DBusSignalCallback func(connection *DBusConnection, senderName, objectPath, interfaceName, signalName string, parameters *glib.Variant)

//export _gotk4_gio2_DBusSignalCallback
func _gotk4_gio2_DBusSignalCallback(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 *C.gchar, arg5 *C.gchar, arg6 *C.GVariant, arg7 C.gpointer) {
	var fn DBusSignalCallback
	{
		v := gbox.Get(uintptr(arg7))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusSignalCallback)
	}

	var _connection *DBusConnection // out
	var _senderName string          // out
	var _objectPath string          // out
	var _interfaceName string       // out
	var _signalName string          // out
	var _parameters *glib.Variant   // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_senderName = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	}
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_interfaceName = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))
	_signalName = C.GoString((*C.gchar)(unsafe.Pointer(arg5)))
	_parameters = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(arg6)))
	C.g_variant_ref(arg6)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_parameters)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	fn(_connection, _senderName, _objectPath, _interfaceName, _signalName, _parameters)
}

// DBusSubtreeEnumerateFunc: type of the enumerate function in BusSubtreeVTable.
//
// This function is called when generating introspection data and also when
// preparing to dispatch incoming messages in the event that the
// G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is not specified
// (ie: to verify that the object path is valid).
//
// Hierarchies are not supported; the items that you return should not contain
// the / character.
//
// The return value will be freed with g_strfreev().
type DBusSubtreeEnumerateFunc func(connection *DBusConnection, sender, objectPath string) (utf8s []string)

//export _gotk4_gio2_DBusSubtreeEnumerateFunc
func _gotk4_gio2_DBusSubtreeEnumerateFunc(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 C.gpointer) (cret **C.gchar) {
	var fn DBusSubtreeEnumerateFunc
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusSubtreeEnumerateFunc)
	}

	var _connection *DBusConnection // out
	var _sender string              // out
	var _objectPath string          // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_sender = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))

	utf8s := fn(_connection, _sender, _objectPath)

	{
		cret = (**C.void)(C.calloc(C.size_t((len(utf8s) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		{
			out := unsafe.Slice(cret, len(utf8s)+1)
			var zero *C.void
			out[len(utf8s)] = zero
			for i := range utf8s {
				out[i] = (*C.void)(unsafe.Pointer(C.CString(utf8s[i])))
			}
		}
	}

	return cret
}

// DBusSubtreeIntrospectFunc: type of the introspect function in
// BusSubtreeVTable.
//
// Subtrees are flat. node, if non-NULL, is always exactly one segment of the
// object path (ie: it never contains a slash).
//
// This function should return NULL to indicate that there is no object at this
// node.
//
// If this function returns non-NULL, the return value is expected to be a
// NULL-terminated array of pointers to BusInterfaceInfo structures describing
// the interfaces implemented by node. This array will have
// g_dbus_interface_info_unref() called on each item before being freed with
// g_free().
//
// The difference between returning NULL and an array containing zero items is
// that the standard DBus interfaces will returned to the remote introspector in
// the empty array case, but not in the NULL case.
type DBusSubtreeIntrospectFunc func(connection *DBusConnection, sender, objectPath, node string) (dBusInterfaceInfos []*DBusInterfaceInfo)

//export _gotk4_gio2_DBusSubtreeIntrospectFunc
func _gotk4_gio2_DBusSubtreeIntrospectFunc(arg1 *C.GDBusConnection, arg2 *C.gchar, arg3 *C.gchar, arg4 *C.gchar, arg5 C.gpointer) (cret **C.GDBusInterfaceInfo) {
	var fn DBusSubtreeIntrospectFunc
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusSubtreeIntrospectFunc)
	}

	var _connection *DBusConnection // out
	var _sender string              // out
	var _objectPath string          // out
	var _node string                // out

	_connection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(arg1)))
	_sender = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_node = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))

	dBusInterfaceInfos := fn(_connection, _sender, _objectPath, _node)

	if dBusInterfaceInfos != nil {
		{
			cret = (**C.void)(C.calloc(C.size_t((len(dBusInterfaceInfos) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
			{
				out := unsafe.Slice(cret, len(dBusInterfaceInfos)+1)
				var zero *C.void
				out[len(dBusInterfaceInfos)] = zero
				for i := range dBusInterfaceInfos {
					out[i] = (*C.void)(gextras.StructNative(unsafe.Pointer(dBusInterfaceInfos[i])))
				}
			}
		}
	}

	return cret
}

// BusGetFinish finishes an operation started with g_bus_get().
//
// The returned object is a singleton, that is, shared with other callers of
// g_bus_get() and g_bus_get_sync() for bus_type. In the event that you need a
// private message bus connection, use g_dbus_address_get_for_bus_sync() and
// g_dbus_connection_new_for_address().
//
// Note that the returned BusConnection object will (usually) have the
// BusConnection:exit-on-close property set to TRUE.
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_bus_get().
//
// The function returns the following values:
//
//    - dBusConnection or NULL if error is set. Free with g_object_unref().
//
func BusGetFinish(res AsyncResulter) (*DBusConnection, error) {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "bus_get_finish").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(res)

	var _dBusConnection *DBusConnection // out
	var _goerr error                    // out

	_dBusConnection = wrapDBusConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _dBusConnection, _goerr
}

// NewDBusConnectionFinish finishes an operation started with
// g_dbus_connection_new().
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_dbus_connection_new().
//
// The function returns the following values:
//
//    - dBusConnection or NULL if error is set. Free with g_object_unref().
//
func NewDBusConnectionFinish(res AsyncResulter) (*DBusConnection, error) {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("new_DBusConnection_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(res)

	var _dBusConnection *DBusConnection // out
	var _goerr error                    // out

	_dBusConnection = wrapDBusConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _dBusConnection, _goerr
}

// NewDBusConnectionForAddressFinish finishes an operation started with
// g_dbus_connection_new_for_address().
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_dbus_connection_new().
//
// The function returns the following values:
//
//    - dBusConnection or NULL if error is set. Free with g_object_unref().
//
func NewDBusConnectionForAddressFinish(res AsyncResulter) (*DBusConnection, error) {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(*AsyncResulter)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("new_DBusConnection_for_address_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(res)

	var _dBusConnection *DBusConnection // out
	var _goerr error                    // out

	_dBusConnection = wrapDBusConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _dBusConnection, _goerr
}

// CallFinish finishes an operation started with g_dbus_connection_call().
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_dbus_connection_call().
//
// The function returns the following values:
//
//    - variant: NULL if error is set. Otherwise a non-floating #GVariant tuple
//      with return values. Free with g_variant_unref().
//
func (connection *DBusConnection) CallFinish(res AsyncResulter) (*glib.Variant, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("call_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)
	runtime.KeepAlive(res)

	var _variant *glib.Variant // out
	var _goerr error           // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _variant, _goerr
}

// CloseFinish finishes an operation started with g_dbus_connection_close().
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_dbus_connection_close().
//
func (connection *DBusConnection) CloseFinish(res AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("close_finish", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(res)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CloseSync: synchronously closes connection. The calling thread is blocked
// until this is done. See g_dbus_connection_close() for the asynchronous
// version of this method and more details about what it does.
//
// The function takes the following parameters:
//
//    - ctx (optional) or NULL.
//
func (connection *DBusConnection) CloseSync(ctx context.Context) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("close_sync", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// EmitSignal emits a signal.
//
// If the parameters GVariant is floating, it is consumed.
//
// This can only fail if parameters is not compatible with the D-Bus protocol
// (G_IO_ERROR_INVALID_ARGUMENT), or if connection has been closed
// (G_IO_ERROR_CLOSED).
//
// The function takes the following parameters:
//
//    - destinationBusName (optional): unique bus name for the destination for
//      the signal or NULL to emit to all listeners.
//    - objectPath: path of remote object.
//    - interfaceName d-Bus interface to emit a signal on.
//    - signalName: name of the signal to emit.
//    - parameters (optional) tuple with parameters for the signal or NULL if not
//      passing parameters.
//
func (connection *DBusConnection) EmitSignal(destinationBusName, objectPath, interfaceName, signalName string, parameters *glib.Variant) error {
	var args [6]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _arg4 *C.void // out
	var _arg5 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	if destinationBusName != "" {
		_arg1 = (*C.void)(unsafe.Pointer(C.CString(destinationBusName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.void)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.void)(unsafe.Pointer(C.CString(interfaceName)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.void)(unsafe.Pointer(C.CString(signalName)))
	defer C.free(unsafe.Pointer(_arg4))
	if parameters != nil {
		_arg5 = (*C.void)(gextras.StructNative(unsafe.Pointer(parameters)))
	}
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2
	*(*string)(unsafe.Pointer(&args[3])) = _arg3
	*(*string)(unsafe.Pointer(&args[4])) = _arg4
	*(*string)(unsafe.Pointer(&args[5])) = _arg5

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("emit_signal", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(destinationBusName)
	runtime.KeepAlive(objectPath)
	runtime.KeepAlive(interfaceName)
	runtime.KeepAlive(signalName)
	runtime.KeepAlive(parameters)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// FlushFinish finishes an operation started with g_dbus_connection_flush().
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to g_dbus_connection_flush().
//
func (connection *DBusConnection) FlushFinish(res AsyncResulter) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("flush_finish", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(res)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// FlushSync: synchronously flushes connection. The calling thread is blocked
// until this is done. See g_dbus_connection_flush() for the asynchronous
// version of this method and more details about what it does.
//
// The function takes the following parameters:
//
//    - ctx (optional) or NULL.
//
func (connection *DBusConnection) FlushSync(ctx context.Context) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.void)(unsafe.Pointer(cancellable.Native()))
	}
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("flush_sync", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(ctx)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ExitOnClose gets whether the process is terminated when connection is closed
// by the remote peer. See BusConnection:exit-on-close for more details.
//
// The function returns the following values:
//
//    - ok: whether the process is terminated when connection is closed by the
//      remote peer.
//
func (connection *DBusConnection) ExitOnClose() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_exit_on_close", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GUID of the peer performing the role of server when authenticating. See
// BusConnection:guid for more details.
//
// The function returns the following values:
//
//    - utf8: GUID. Do not free this string, it is owned by connection.
//
func (connection *DBusConnection) GUID() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_guid", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LastSerial retrieves the last serial number assigned to a BusMessage on the
// current thread. This includes messages sent via both low-level API such as
// g_dbus_connection_send_message() as well as high-level API such as
// g_dbus_connection_emit_signal(), g_dbus_connection_call() or
// g_dbus_proxy_call().
//
// The function returns the following values:
//
//    - guint32: last used serial or zero when no message has been sent within
//      the current thread.
//
func (connection *DBusConnection) LastSerial() uint32 {
	var args [1]girepository.Argument
	var _arg0 *C.void   // out
	var _cret C.guint32 // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_last_serial", args[:], nil)
	_cret = *(*C.guint32)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// PeerCredentials gets the credentials of the authenticated peer. This will
// always return NULL unless connection acted as a server (e.g.
// G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed) when set up and the
// client passed credentials as part of the authentication process.
//
// In a message bus setup, the message bus is always the server and each
// application is a client. So this method will always return NULL for message
// bus clients.
//
// The function returns the following values:
//
//    - credentials (optional) or NULL if not available. Do not free this object,
//      it is owned by connection.
//
func (connection *DBusConnection) PeerCredentials() *Credentials {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_peer_credentials", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _credentials *Credentials // out

	if _cret != nil {
		_credentials = wrapCredentials(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _credentials
}

// Stream gets the underlying stream used for IO.
//
// While the BusConnection is active, it will interact with this stream from a
// worker thread, so it is not safe to interact with the stream directly.
//
// The function returns the following values:
//
//    - ioStream: stream used for IO.
//
func (connection *DBusConnection) Stream() IOStreamer {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_stream", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _ioStream IOStreamer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(IOStreamer)
			return ok
		})
		rv, ok := casted.(IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_ioStream = rv
	}

	return _ioStream
}

// UniqueName gets the unique name of connection as assigned by the message bus.
// This can also be used to figure out if connection is a message bus
// connection.
//
// The function returns the following values:
//
//    - utf8 (optional): unique name or NULL if connection is not a message bus
//      connection. Do not free this string, it is owned by connection.
//
func (connection *DBusConnection) UniqueName() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("get_unique_name", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// IsClosed gets whether connection is closed.
//
// The function returns the following values:
//
//    - ok: TRUE if the connection is closed, FALSE otherwise.
//
func (connection *DBusConnection) IsClosed() bool {
	var args [1]girepository.Argument
	var _arg0 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("is_closed", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RegisterObject: version of g_dbus_connection_register_object() using closures
// instead of a BusInterfaceVTable for easier binding in other languages.
//
// The function takes the following parameters:
//
//    - objectPath: object path to register at.
//    - interfaceInfo: introspection data for the interface.
//    - methodCallClosure (optional) for handling incoming method calls.
//    - getPropertyClosure (optional) for getting a property.
//    - setPropertyClosure (optional) for setting a property.
//
// The function returns the following values:
//
//    - guint: 0 if error is set, otherwise a registration ID (never 0) that can
//      be used with g_dbus_connection_unregister_object() .
//
func (connection *DBusConnection) RegisterObject(objectPath string, interfaceInfo *DBusInterfaceInfo, methodCallClosure, getPropertyClosure, setPropertyClosure coreglib.AnyClosure) (uint, error) {
	var args [6]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _arg2 *C.void // out
	var _arg3 *C.void // out
	var _arg4 *C.void // out
	var _arg5 *C.void // out
	var _cret C.guint // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.void)(gextras.StructNative(unsafe.Pointer(interfaceInfo)))
	_arg3 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), methodCallClosure))
	_arg4 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), getPropertyClosure))
	_arg5 = (*C.GClosure)(coreglib.NewClosure(coreglib.InternObject(connection), setPropertyClosure))
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1
	*(*string)(unsafe.Pointer(&args[2])) = _arg2
	*(**DBusInterfaceInfo)(unsafe.Pointer(&args[3])) = _arg3
	*(*coreglib.AnyClosure)(unsafe.Pointer(&args[4])) = _arg4
	*(*coreglib.AnyClosure)(unsafe.Pointer(&args[5])) = _arg5

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("register_object_with_closures", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)
	runtime.KeepAlive(objectPath)
	runtime.KeepAlive(interfaceInfo)
	runtime.KeepAlive(methodCallClosure)
	runtime.KeepAlive(getPropertyClosure)
	runtime.KeepAlive(setPropertyClosure)

	var _guint uint  // out
	var _goerr error // out

	_guint = uint(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint, _goerr
}

// RemoveFilter removes a filter.
//
// Note that since filters run in a different thread, there is a race condition
// where it is possible that the filter will be running even after calling
// g_dbus_connection_remove_filter(), so you cannot just free data that the
// filter might be using. Instead, you should pass a Notify to
// g_dbus_connection_add_filter(), which will be called when it is guaranteed
// that the data is no longer needed.
//
// The function takes the following parameters:
//
//    - filterId: identifier obtained from g_dbus_connection_add_filter().
//
func (connection *DBusConnection) RemoveFilter(filterId uint) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = C.guint(filterId)
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("remove_filter", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(filterId)
}

// SendMessageWithReplyFinish finishes an operation started with
// g_dbus_connection_send_message_with_reply().
//
// Note that error is only set if a local in-process error occurred. That is to
// say that the returned BusMessage object may be of type
// G_DBUS_MESSAGE_TYPE_ERROR. Use g_dbus_message_to_gerror() to transcode this
// to a #GError.
//
// See this [server][gdbus-server] and [client][gdbus-unix-fd-client] for an
// example of how to use this low-level API to send and receive UNIX file
// descriptors.
//
// The function takes the following parameters:
//
//    - res obtained from the ReadyCallback passed to
//      g_dbus_connection_send_message_with_reply().
//
// The function returns the following values:
//
//    - dBusMessage: locked BusMessage or NULL if error is set.
//
func (connection *DBusConnection) SendMessageWithReplyFinish(res AsyncResulter) (*DBusMessage, error) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("send_message_with_reply_finish", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)
	runtime.KeepAlive(res)

	var _dBusMessage *DBusMessage // out
	var _goerr error              // out

	_dBusMessage = wrapDBusMessage(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _dBusMessage, _goerr
}

// SetExitOnClose sets whether the process should be terminated when connection
// is closed by the remote peer. See BusConnection:exit-on-close for more
// details.
//
// Note that this function should be used with care. Most modern UNIX desktops
// tie the notion of a user session with the session bus, and expect all of a
// user's applications to quit when their bus connection goes away. If you are
// setting exit_on_close to FALSE for the shared session bus connection, you
// should make sure that your application exits when the user session ends.
//
// The function takes the following parameters:
//
//    - exitOnClose: whether the process should be terminated when connection is
//      closed by the remote peer.
//
func (connection *DBusConnection) SetExitOnClose(exitOnClose bool) {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.gboolean // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	if exitOnClose {
		_arg1 = C.TRUE
	}
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("set_exit_on_close", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(exitOnClose)
}

// SignalUnsubscribe unsubscribes from signals.
//
// Note that there may still be D-Bus traffic to process (relating to this
// signal subscription) in the current thread-default Context after this
// function has returned. You should continue to iterate the Context until the
// Notify function passed to g_dbus_connection_signal_subscribe() is called, in
// order to avoid memory leaks through callbacks queued on the Context after
// it’s stopped being iterated.
//
// The function takes the following parameters:
//
//    - subscriptionId: subscription id obtained from
//      g_dbus_connection_signal_subscribe().
//
func (connection *DBusConnection) SignalUnsubscribe(subscriptionId uint) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 C.guint // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = C.guint(subscriptionId)
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("signal_unsubscribe", args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(subscriptionId)
}

// StartMessageProcessing: if connection was created with
// G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING, this method starts
// processing messages. Does nothing on if connection wasn't created with this
// flag or if the method has already been called.
func (connection *DBusConnection) StartMessageProcessing() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	*(**DBusConnection)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gio", "DBusConnection").InvokeMethod("start_message_processing", args[:], nil)

	runtime.KeepAlive(connection)
}

// UnregisterObject unregisters an object.
//
// The function takes the following parameters:
//
//    - registrationId: registration id obtained from
//      g_dbus_connection_register_object().
//
// The function returns the following values:
//
//    - ok: TRUE if the object was unregistered, FALSE otherwise.
//
func (connection *DBusConnection) UnregisterObject(registrationId uint) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.guint    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = C.guint(registrationId)
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("unregister_object", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)
	runtime.KeepAlive(registrationId)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnregisterSubtree unregisters a subtree.
//
// The function takes the following parameters:
//
//    - registrationId: subtree registration id obtained from
//      g_dbus_connection_register_subtree().
//
// The function returns the following values:
//
//    - ok: TRUE if the subtree was unregistered, FALSE otherwise.
//
func (connection *DBusConnection) UnregisterSubtree(registrationId uint) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 C.guint    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg1 = C.guint(registrationId)
	*(**DBusConnection)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "DBusConnection").InvokeMethod("unregister_subtree", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)
	runtime.KeepAlive(registrationId)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DBusInterfaceVTable: virtual table for handling properties and method calls
// for a D-Bus interface.
//
// Since 2.38, if you want to handle getting/setting D-Bus properties
// asynchronously, give NULL as your get_property() or set_property() function.
// The D-Bus call will be directed to your method_call function, with the
// provided interface_name set to "org.freedesktop.DBus.Properties".
//
// Ownership of the BusMethodInvocation object passed to the method_call()
// function is transferred to your handler; you must call one of the methods of
// BusMethodInvocation to return a reply (possibly empty), or an error. These
// functions also take ownership of the passed-in invocation object, so unless
// the invocation object has otherwise been referenced, it will be then be
// freed. Calling one of these functions may be done within your method_call()
// implementation but it also can be done at a later point to handle the method
// asynchronously.
//
// The usual checks on the validity of the calls is performed. For Get calls, an
// error is automatically returned if the property does not exist or the
// permissions do not allow access. The same checks are performed for Set calls,
// and the provided value is also checked for being the correct type.
//
// For both Get and Set calls, the BusMethodInvocation passed to the method_call
// handler can be queried with g_dbus_method_invocation_get_property_info() to
// get a pointer to the BusPropertyInfo of the property.
//
// If you have readable properties specified in your interface info, you must
// ensure that you either provide a non-NULL get_property() function or provide
// implementations of both the Get and GetAll methods on
// org.freedesktop.DBus.Properties interface in your method_call function. Note
// that the required return type of the Get call is (v), not the type of the
// property. GetAll expects a return value of type a{sv}.
//
// If you have writable properties specified in your interface info, you must
// ensure that you either provide a non-NULL set_property() function or provide
// an implementation of the Set call. If implementing the call, you must return
// the value of type G_VARIANT_TYPE_UNIT.
//
// An instance of this type is always passed by reference.
type DBusInterfaceVTable struct {
	*dBusInterfaceVTable
}

// dBusInterfaceVTable is the struct that's finalized.
type dBusInterfaceVTable struct {
	native *C.GDBusInterfaceVTable
}

// DBusSubtreeVTable: virtual table for handling subtrees registered with
// g_dbus_connection_register_subtree().
//
// An instance of this type is always passed by reference.
type DBusSubtreeVTable struct {
	*dBusSubtreeVTable
}

// dBusSubtreeVTable is the struct that's finalized.
type dBusSubtreeVTable struct {
	native *C.GDBusSubtreeVTable
}
