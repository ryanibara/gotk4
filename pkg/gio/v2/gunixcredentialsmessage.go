// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gio-2.0 gio-unix-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gio/gfiledescriptorbased.h>
// #include <gio/gio.h>
// #include <gio/gunixconnection.h>
// #include <gio/gunixcredentialsmessage.h>
// #include <gio/gunixfdlist.h>
// #include <gio/gunixfdmessage.h>
// #include <gio/gunixinputstream.h>
// #include <gio/gunixmounts.h>
// #include <gio/gunixoutputstream.h>
// #include <gio/gunixsocketaddress.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.g_unix_credentials_message_get_type()), F: marshalUnixCredentialsMessager},
	})
}

// UnixCredentialsMessage: this ControlMessage contains a #GCredentials
// instance. It may be sent using g_socket_send_message() and received using
// g_socket_receive_message() over UNIX sockets (ie: sockets in the
// G_SOCKET_FAMILY_UNIX family).
//
// For an easier way to send and receive credentials over stream-oriented UNIX
// sockets, see g_unix_connection_send_credentials() and
// g_unix_connection_receive_credentials(). To receive credentials of a foreign
// process connected to a socket, use g_socket_get_credentials().
type UnixCredentialsMessage struct {
	SocketControlMessage
}

func wrapUnixCredentialsMessage(obj *externglib.Object) *UnixCredentialsMessage {
	return &UnixCredentialsMessage{
		SocketControlMessage: SocketControlMessage{
			Object: obj,
		},
	}
}

func marshalUnixCredentialsMessager(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapUnixCredentialsMessage(obj), nil
}

// NewUnixCredentialsMessage creates a new CredentialsMessage with credentials
// matching the current processes.
func NewUnixCredentialsMessage() *UnixCredentialsMessage {
	var _cret *C.GSocketControlMessage // in

	_cret = C.g_unix_credentials_message_new()

	var _unixCredentialsMessage *UnixCredentialsMessage // out

	_unixCredentialsMessage = wrapUnixCredentialsMessage(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _unixCredentialsMessage
}

// NewUnixCredentialsMessageWithCredentials creates a new CredentialsMessage
// holding credentials.
//
// The function takes the following parameters:
//
//    - credentials #GCredentials object.
//
func NewUnixCredentialsMessageWithCredentials(credentials *Credentials) *UnixCredentialsMessage {
	var _arg1 *C.GCredentials          // out
	var _cret *C.GSocketControlMessage // in

	_arg1 = (*C.GCredentials)(unsafe.Pointer(credentials.Native()))

	_cret = C.g_unix_credentials_message_new_with_credentials(_arg1)
	runtime.KeepAlive(credentials)

	var _unixCredentialsMessage *UnixCredentialsMessage // out

	_unixCredentialsMessage = wrapUnixCredentialsMessage(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _unixCredentialsMessage
}

// Credentials gets the credentials stored in message.
func (message *UnixCredentialsMessage) Credentials() *Credentials {
	var _arg0 *C.GUnixCredentialsMessage // out
	var _cret *C.GCredentials            // in

	_arg0 = (*C.GUnixCredentialsMessage)(unsafe.Pointer(message.Native()))

	_cret = C.g_unix_credentials_message_get_credentials(_arg0)
	runtime.KeepAlive(message)

	var _credentials *Credentials // out

	_credentials = wrapCredentials(externglib.Take(unsafe.Pointer(_cret)))

	return _credentials
}

// UnixCredentialsMessageIsSupported checks if passing #GCredentials on a
// #GSocket is supported on this platform.
func UnixCredentialsMessageIsSupported() bool {
	var _cret C.gboolean // in

	_cret = C.g_unix_credentials_message_is_supported()

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
