// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// extern void _gotk4_gio2_AsyncReadyCallback(GObject*, GAsyncResult*, gpointer);
// gboolean _gotk4_gio2_AppInfo_virtual_launch_uris_finish(void* fnptr, GAppInfo* arg0, GAsyncResult* arg1, GError** arg2) {
//   return ((gboolean (*)(GAppInfo*, GAsyncResult*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gio2_AppInfo_virtual_launch_uris_async(void* fnptr, GAppInfo* arg0, GList* arg1, GAppLaunchContext* arg2, GCancellable* arg3, GAsyncReadyCallback arg4, gpointer arg5) {
//   ((void (*)(GAppInfo*, GList*, GAppLaunchContext*, GCancellable*, GAsyncReadyCallback, gpointer))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
import "C"

// LaunchURIsAsync: async version of g_app_info_launch_uris().
//
// The callback is invoked immediately after the application launch, but it
// waits for activation in case of D-Bus–activated applications and also
// provides extended error information for sandboxed applications, see notes for
// g_app_info_launch_default_for_uri_async().
//
// The function takes the following parameters:
//
//    - ctx (optional): #GCancellable.
//    - uris (optional) containing URIs to launch.
//    - context (optional) or NULL.
//    - callback (optional) to call when the request is done.
//
func (appinfo *AppInfo) LaunchURIsAsync(ctx context.Context, uris []string, context *AppLaunchContext, callback AsyncReadyCallback) {
	var _arg0 *C.GAppInfo           // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.GList              // out
	var _arg2 *C.GAppLaunchContext  // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if uris != nil {
		for i := len(uris) - 1; i >= 0; i-- {
			src := uris[i]
			var dst *C.gchar // out
			dst = (*C.gchar)(unsafe.Pointer(C.CString(src)))
			defer C.free(unsafe.Pointer(dst))
			_arg1 = C.g_list_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_arg1)
	}
	if context != nil {
		_arg2 = (*C.GAppLaunchContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C.g_app_info_launch_uris_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(uris)
	runtime.KeepAlive(context)
	runtime.KeepAlive(callback)
}

// LaunchURIsFinish finishes a g_app_info_launch_uris_async() operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (appinfo *AppInfo) LaunchURIsFinish(result AsyncResulter) error {
	var _arg0 *C.GAppInfo     // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	C.g_app_info_launch_uris_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// launchURIsAsync: async version of g_app_info_launch_uris().
//
// The callback is invoked immediately after the application launch, but it
// waits for activation in case of D-Bus–activated applications and also
// provides extended error information for sandboxed applications, see notes for
// g_app_info_launch_default_for_uri_async().
//
// The function takes the following parameters:
//
//    - ctx (optional): #GCancellable.
//    - uris (optional) containing URIs to launch.
//    - context (optional) or NULL.
//    - callback (optional) to call when the request is done.
//
func (appinfo *AppInfo) launchURIsAsync(ctx context.Context, uris []string, context *AppLaunchContext, callback AsyncReadyCallback) {
	gclass := (*C.GAppInfoIface)(coreglib.PeekParentClass(appinfo))
	fnarg := gclass.launch_uris_async

	var _arg0 *C.GAppInfo           // out
	var _arg3 *C.GCancellable       // out
	var _arg1 *C.GList              // out
	var _arg2 *C.GAppLaunchContext  // out
	var _arg4 C.GAsyncReadyCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	if uris != nil {
		for i := len(uris) - 1; i >= 0; i-- {
			src := uris[i]
			var dst *C.gchar // out
			dst = (*C.gchar)(unsafe.Pointer(C.CString(src)))
			defer C.free(unsafe.Pointer(dst))
			_arg1 = C.g_list_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
		}
		defer C.g_list_free(_arg1)
	}
	if context != nil {
		_arg2 = (*C.GAppLaunchContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	}
	if callback != nil {
		_arg4 = (*[0]byte)(C._gotk4_gio2_AsyncReadyCallback)
		_arg5 = C.gpointer(gbox.AssignOnce(callback))
	}

	C._gotk4_gio2_AppInfo_virtual_launch_uris_async(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(uris)
	runtime.KeepAlive(context)
	runtime.KeepAlive(callback)
}

// launchURIsFinish finishes a g_app_info_launch_uris_async() operation.
//
// The function takes the following parameters:
//
//    - result: Result.
//
func (appinfo *AppInfo) launchURIsFinish(result AsyncResulter) error {
	gclass := (*C.GAppInfoIface)(coreglib.PeekParentClass(appinfo))
	fnarg := gclass.launch_uris_finish

	var _arg0 *C.GAppInfo     // out
	var _arg1 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	C._gotk4_gio2_AppInfo_virtual_launch_uris_finish(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(appinfo)
	runtime.KeepAlive(result)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
