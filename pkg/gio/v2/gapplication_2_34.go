// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// DBusConnection gets the BusConnection being used by the application, or NULL.
//
// If #GApplication is using its D-Bus backend then this function will return
// the BusConnection being used for uniqueness and communication with the
// desktop environment and other instances of the application.
//
// If #GApplication is not using D-Bus then this function will return NULL. This
// includes the situation where the D-Bus backend would normally be in use but
// we were unable to connect to the bus.
//
// This function must not be called before the application has been registered.
// See g_application_get_is_registered().
//
// The function returns the following values:
//
//    - dBusConnection (optional) or NULL.
//
func (application *Application) DBusConnection() *DBusConnection {
	var _arg0 *C.GApplication    // out
	var _cret *C.GDBusConnection // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	_cret = C.g_application_get_dbus_connection(_arg0)
	runtime.KeepAlive(application)

	var _dBusConnection *DBusConnection // out

	if _cret != nil {
		_dBusConnection = wrapDBusConnection(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _dBusConnection
}

// DBusObjectPath gets the D-Bus object path being used by the application, or
// NULL.
//
// If #GApplication is using its D-Bus backend then this function will return
// the D-Bus object path that #GApplication is using. If the application is the
// primary instance then there is an object published at this path. If the
// application is not the primary instance then the result of this function is
// undefined.
//
// If #GApplication is not using D-Bus then this function will return NULL. This
// includes the situation where the D-Bus backend would normally be in use but
// we were unable to connect to the bus.
//
// This function must not be called before the application has been registered.
// See g_application_get_is_registered().
//
// The function returns the following values:
//
//    - utf8 (optional): object path, or NULL.
//
func (application *Application) DBusObjectPath() string {
	var _arg0 *C.GApplication // out
	var _cret *C.gchar        // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	_cret = C.g_application_get_dbus_object_path(_arg0)
	runtime.KeepAlive(application)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}
