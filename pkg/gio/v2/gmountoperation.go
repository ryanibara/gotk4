// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_MountOperationClass_aborted(void*);
// extern void _gotk4_gio2_MountOperationClass_ask_question(void*, char*, char**);
// extern void _gotk4_gio2_MountOperationClass_show_unmount_progress(void*, gchar*, gint64, gint64);
// extern void _gotk4_gio2_MountOperation_ConnectAborted(gpointer, guintptr);
// extern void _gotk4_gio2_MountOperation_ConnectAskQuestion(gpointer, gchar*, gchar**, guintptr);
// extern void _gotk4_gio2_MountOperation_ConnectShowUnmountProgress(gpointer, gchar*, gint64, gint64, guintptr);
import "C"

// GTypeMountOperation returns the GType for the type MountOperation.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeMountOperation() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "MountOperation").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalMountOperation)
	return gtype
}

// MountOperationOverrider contains methods that are overridable.
type MountOperationOverrider interface {
	Aborted()
	// AskQuestion: virtual implementation of Operation::ask-question.
	//
	// The function takes the following parameters:
	//
	//    - message: string containing a message to display to the user.
	//    - choices: array of strings for each possible choice.
	//
	AskQuestion(message string, choices []string)
	// The function takes the following parameters:
	//
	//    - message
	//    - timeLeft
	//    - bytesLeft
	//
	ShowUnmountProgress(message string, timeLeft, bytesLeft int64)
}

// MountOperation provides a mechanism for interacting with the user. It can be
// used for authenticating mountable operations, such as loop mounting files,
// hard drive partitions or server locations. It can also be used to ask the
// user questions or show a list of applications preventing unmount or eject
// operations from completing.
//
// Note that Operation is used for more than just #GMount objects – for example
// it is also used in g_drive_start() and g_drive_stop().
//
// Users should instantiate a subclass of this that implements all the various
// callbacks to show the required dialogs, such as MountOperation. If no user
// interaction is desired (for example when automounting filesystems at login
// time), usually NULL can be passed, see each method taking a Operation for
// details.
//
// The term ‘TCRYPT’ is used to mean ‘compatible with TrueCrypt and VeraCrypt’.
// TrueCrypt (https://en.wikipedia.org/wiki/TrueCrypt) is a discontinued system
// for encrypting file containers, partitions or whole disks, typically used
// with Windows. VeraCrypt (https://www.veracrypt.fr/) is a maintained fork of
// TrueCrypt with various improvements and auditing fixes.
type MountOperation struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*MountOperation)(nil)
)

func classInitMountOperationer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gio", "MountOperationClass")

	if _, ok := goval.(interface{ Aborted() }); ok {
		o := pclass.StructFieldOffset("aborted")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_MountOperationClass_aborted)
	}

	if _, ok := goval.(interface {
		AskQuestion(message string, choices []string)
	}); ok {
		o := pclass.StructFieldOffset("ask_question")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_MountOperationClass_ask_question)
	}

	if _, ok := goval.(interface {
		ShowUnmountProgress(message string, timeLeft, bytesLeft int64)
	}); ok {
		o := pclass.StructFieldOffset("show_unmount_progress")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_MountOperationClass_show_unmount_progress)
	}
}

//export _gotk4_gio2_MountOperationClass_aborted
func _gotk4_gio2_MountOperationClass_aborted(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Aborted() })

	iface.Aborted()
}

//export _gotk4_gio2_MountOperationClass_ask_question
func _gotk4_gio2_MountOperationClass_ask_question(arg0 *C.void, arg1 *C.char, arg2 **C.char) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		AskQuestion(message string, choices []string)
	})

	var _message string   // out
	var _choices []string // out

	_message = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	{
		var i int
		var z *C.char
		for p := arg2; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(arg2, i)
		_choices = make([]string, i)
		for i := range src {
			_choices[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	iface.AskQuestion(_message, _choices)
}

//export _gotk4_gio2_MountOperationClass_show_unmount_progress
func _gotk4_gio2_MountOperationClass_show_unmount_progress(arg0 *C.void, arg1 *C.gchar, arg2 C.gint64, arg3 C.gint64) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		ShowUnmountProgress(message string, timeLeft, bytesLeft int64)
	})

	var _message string  // out
	var _timeLeft int64  // out
	var _bytesLeft int64 // out

	_message = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_timeLeft = int64(arg2)
	_bytesLeft = int64(arg3)

	iface.ShowUnmountProgress(_message, _timeLeft, _bytesLeft)
}

func wrapMountOperation(obj *coreglib.Object) *MountOperation {
	return &MountOperation{
		Object: obj,
	}
}

func marshalMountOperation(p uintptr) (interface{}, error) {
	return wrapMountOperation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_gio2_MountOperation_ConnectAborted
func _gotk4_gio2_MountOperation_ConnectAborted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectAborted is emitted by the backend when e.g. a device becomes
// unavailable while a mount operation is in progress.
//
// Implementations of GMountOperation should handle this signal by dismissing
// open password dialogs.
func (op *MountOperation) ConnectAborted(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "aborted", false, unsafe.Pointer(C._gotk4_gio2_MountOperation_ConnectAborted), f)
}

//export _gotk4_gio2_MountOperation_ConnectAskQuestion
func _gotk4_gio2_MountOperation_ConnectAskQuestion(arg0 C.gpointer, arg1 *C.gchar, arg2 **C.gchar, arg3 C.guintptr) {
	var f func(message string, choices []string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message string, choices []string))
	}

	var _message string   // out
	var _choices []string // out

	_message = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	{
		var i int
		var z *C.gchar
		for p := arg2; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(arg2, i)
		_choices = make([]string, i)
		for i := range src {
			_choices[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	f(_message, _choices)
}

// ConnectAskQuestion is emitted when asking the user a question and gives a
// list of choices for the user to choose from.
//
// If the message contains a line break, the first line should be presented as a
// heading. For example, it may be used as the primary text in a MessageDialog.
func (op *MountOperation) ConnectAskQuestion(f func(message string, choices []string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "ask-question", false, unsafe.Pointer(C._gotk4_gio2_MountOperation_ConnectAskQuestion), f)
}

//export _gotk4_gio2_MountOperation_ConnectShowUnmountProgress
func _gotk4_gio2_MountOperation_ConnectShowUnmountProgress(arg0 C.gpointer, arg1 *C.gchar, arg2 C.gint64, arg3 C.gint64, arg4 C.guintptr) {
	var f func(message string, timeLeft, bytesLeft int64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message string, timeLeft, bytesLeft int64))
	}

	var _message string  // out
	var _timeLeft int64  // out
	var _bytesLeft int64 // out

	_message = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_timeLeft = int64(arg2)
	_bytesLeft = int64(arg3)

	f(_message, _timeLeft, _bytesLeft)
}

// ConnectShowUnmountProgress is emitted when an unmount operation has been busy
// for more than some time (typically 1.5 seconds).
//
// When unmounting or ejecting a volume, the kernel might need to flush pending
// data in its buffers to the volume stable storage, and this operation can take
// a considerable amount of time. This signal may be emitted several times as
// long as the unmount operation is outstanding, and then one last time when the
// operation is completed, with bytes_left set to zero.
//
// Implementations of GMountOperation should handle this signal by showing an UI
// notification, and then dismiss it, or show another notification of
// completion, when bytes_left reaches zero.
//
// If the message contains a line break, the first line should be presented as a
// heading. For example, it may be used as the primary text in a MessageDialog.
func (op *MountOperation) ConnectShowUnmountProgress(f func(message string, timeLeft, bytesLeft int64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(op, "show-unmount-progress", false, unsafe.Pointer(C._gotk4_gio2_MountOperation_ConnectShowUnmountProgress), f)
}

// NewMountOperation creates a new mount operation.
//
// The function returns the following values:
//
//    - mountOperation: Operation.
//
func NewMountOperation() *MountOperation {
	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("new_MountOperation", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _mountOperation *MountOperation // out

	_mountOperation = wrapMountOperation(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _mountOperation
}

// Anonymous: check to see whether the mount operation is being used for an
// anonymous user.
//
// The function returns the following values:
//
//    - ok: TRUE if mount operation is anonymous.
//
func (op *MountOperation) Anonymous() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_anonymous", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Choice gets a choice from the mount operation.
//
// The function returns the following values:
//
//    - gint: integer containing an index of the user's choice from the choice's
//      list, or 0.
//
func (op *MountOperation) Choice() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_choice", _args[:], nil)
	_cret := *(*C.int)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _gint int32 // out

	_gint = int32(*(*C.int)(unsafe.Pointer(&_cret)))

	return _gint
}

// Domain gets the domain of the mount operation.
//
// The function returns the following values:
//
//    - utf8 (optional): string set to the domain.
//
func (op *MountOperation) Domain() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_domain", _args[:], nil)
	_cret := *(**C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _utf8 string // out

	if *(**C.char)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_cret)))))
	}

	return _utf8
}

// IsTcryptHiddenVolume: check to see whether the mount operation is being used
// for a TCRYPT hidden volume.
//
// The function returns the following values:
//
//    - ok: TRUE if mount operation is for hidden volume.
//
func (op *MountOperation) IsTcryptHiddenVolume() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_is_tcrypt_hidden_volume", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsTcryptSystemVolume: check to see whether the mount operation is being used
// for a TCRYPT system volume.
//
// The function returns the following values:
//
//    - ok: TRUE if mount operation is for system volume.
//
func (op *MountOperation) IsTcryptSystemVolume() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_is_tcrypt_system_volume", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Password gets a password from the mount operation.
//
// The function returns the following values:
//
//    - utf8 (optional): string containing the password within op.
//
func (op *MountOperation) Password() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_password", _args[:], nil)
	_cret := *(**C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _utf8 string // out

	if *(**C.char)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_cret)))))
	}

	return _utf8
}

// Pim gets a PIM from the mount operation.
//
// The function returns the following values:
//
//    - guint: veraCrypt PIM within op.
//
func (op *MountOperation) Pim() uint32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_pim", _args[:], nil)
	_cret := *(*C.guint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _guint uint32 // out

	_guint = uint32(*(*C.guint)(unsafe.Pointer(&_cret)))

	return _guint
}

// Username: get the user name from the mount operation.
//
// The function returns the following values:
//
//    - utf8 (optional): string containing the user name.
//
func (op *MountOperation) Username() string {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))

	_info := girepository.MustFind("Gio", "MountOperation")
	_gret := _info.InvokeClassMethod("get_username", _args[:], nil)
	_cret := *(**C.char)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(op)

	var _utf8 string // out

	if *(**C.char)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_cret)))))
	}

	return _utf8
}

// SetAnonymous sets the mount operation to use an anonymous user if anonymous
// is TRUE.
//
// The function takes the following parameters:
//
//    - anonymous: boolean value.
//
func (op *MountOperation) SetAnonymous(anonymous bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if anonymous {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_anonymous", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(anonymous)
}

// SetChoice sets a default choice for the mount operation.
//
// The function takes the following parameters:
//
//    - choice: integer.
//
func (op *MountOperation) SetChoice(choice int32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	*(*C.int)(unsafe.Pointer(&_args[1])) = C.int(choice)

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_choice", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(choice)
}

// SetDomain sets the mount operation's domain.
//
// The function takes the following parameters:
//
//    - domain (optional) to set.
//
func (op *MountOperation) SetDomain(domain string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if domain != "" {
		*(**C.char)(unsafe.Pointer(&_args[1])) = (*C.char)(unsafe.Pointer(C.CString(domain)))
		defer C.free(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_args[1]))))
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_domain", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(domain)
}

// SetIsTcryptHiddenVolume sets the mount operation to use a hidden volume if
// hidden_volume is TRUE.
//
// The function takes the following parameters:
//
//    - hiddenVolume: boolean value.
//
func (op *MountOperation) SetIsTcryptHiddenVolume(hiddenVolume bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if hiddenVolume {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_is_tcrypt_hidden_volume", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(hiddenVolume)
}

// SetIsTcryptSystemVolume sets the mount operation to use a system volume if
// system_volume is TRUE.
//
// The function takes the following parameters:
//
//    - systemVolume: boolean value.
//
func (op *MountOperation) SetIsTcryptSystemVolume(systemVolume bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if systemVolume {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_is_tcrypt_system_volume", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(systemVolume)
}

// SetPassword sets the mount operation's password to password.
//
// The function takes the following parameters:
//
//    - password (optional) to set.
//
func (op *MountOperation) SetPassword(password string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if password != "" {
		*(**C.char)(unsafe.Pointer(&_args[1])) = (*C.char)(unsafe.Pointer(C.CString(password)))
		defer C.free(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_args[1]))))
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_password", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(password)
}

// SetPim sets the mount operation's PIM to pim.
//
// The function takes the following parameters:
//
//    - pim: unsigned integer.
//
func (op *MountOperation) SetPim(pim uint32) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	*(*C.guint)(unsafe.Pointer(&_args[1])) = C.guint(pim)

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_pim", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(pim)
}

// SetUsername sets the user name within op to username.
//
// The function takes the following parameters:
//
//    - username (optional): input username.
//
func (op *MountOperation) SetUsername(username string) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(op).Native()))
	if username != "" {
		*(**C.char)(unsafe.Pointer(&_args[1])) = (*C.char)(unsafe.Pointer(C.CString(username)))
		defer C.free(unsafe.Pointer(*(**C.char)(unsafe.Pointer(&_args[1]))))
	}

	_info := girepository.MustFind("Gio", "MountOperation")
	_info.InvokeClassMethod("set_username", _args[:], nil)

	runtime.KeepAlive(op)
	runtime.KeepAlive(username)
}
