// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeTCPConnection returns the GType for the type TCPConnection.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTCPConnection() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "TcpConnection").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTCPConnection)
	return gtype
}

// TCPConnectionOverrider contains methods that are overridable.
type TCPConnectionOverrider interface {
}

// TCPConnection: this is the subclass of Connection that is created for TCP/IP
// sockets.
type TCPConnection struct {
	_ [0]func() // equal guard
	SocketConnection
}

var (
	_ IOStreamer = (*TCPConnection)(nil)
)

func classInitTCPConnectioner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapTCPConnection(obj *coreglib.Object) *TCPConnection {
	return &TCPConnection{
		SocketConnection: SocketConnection{
			IOStream: IOStream{
				Object: obj,
			},
		},
	}
}

func marshalTCPConnection(p uintptr) (interface{}, error) {
	return wrapTCPConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// GracefulDisconnect checks if graceful disconnects are used. See
// g_tcp_connection_set_graceful_disconnect().
//
// The function returns the following values:
//
//    - ok: TRUE if graceful disconnect is used on close, FALSE otherwise.
//
func (connection *TCPConnection) GracefulDisconnect() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))

	_gret := girepository.MustFind("Gio", "TcpConnection").InvokeMethod("get_graceful_disconnect", _args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(connection)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetGracefulDisconnect: this enables graceful disconnects on close. A graceful
// disconnect means that we signal the receiving end that the connection is
// terminated and wait for it to close the connection before closing the
// connection.
//
// A graceful disconnect means that we can be sure that we successfully sent all
// the outstanding data to the other end, or get an error reported. However, it
// also means we have to wait for all the data to reach the other side and for
// it to acknowledge this by closing the socket, which may take a while. For
// this reason it is disabled by default.
//
// The function takes the following parameters:
//
//    - gracefulDisconnect: whether to do graceful disconnects or not.
//
func (connection *TCPConnection) SetGracefulDisconnect(gracefulDisconnect bool) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	if gracefulDisconnect {
		*(*C.gboolean)(unsafe.Pointer(&_args[1])) = C.TRUE
	}

	girepository.MustFind("Gio", "TcpConnection").InvokeMethod("set_graceful_disconnect", _args[:], nil)

	runtime.KeepAlive(connection)
	runtime.KeepAlive(gracefulDisconnect)
}
