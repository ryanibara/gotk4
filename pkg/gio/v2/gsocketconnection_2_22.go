// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketConnection = coreglib.Type(C.g_socket_connection_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketConnection, F: marshalSocketConnection},
	})
}

// ConnectionFactoryCreateConnection creates a Connection subclass of the right
// type for socket.
//
// The function returns the following values:
//
//    - socketConnection: Connection.
//
func (socket *Socket) ConnectionFactoryCreateConnection() *SocketConnection {
	var _arg0 *C.GSocket           // out
	var _cret *C.GSocketConnection // in

	_arg0 = (*C.GSocket)(unsafe.Pointer(coreglib.InternObject(socket).Native()))

	_cret = C.g_socket_connection_factory_create_connection(_arg0)
	runtime.KeepAlive(socket)

	var _socketConnection *SocketConnection // out

	_socketConnection = wrapSocketConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _socketConnection
}

// SocketConnectionOverrides contains methods that are overridable.
type SocketConnectionOverrides struct {
}

func defaultSocketConnectionOverrides(v *SocketConnection) SocketConnectionOverrides {
	return SocketConnectionOverrides{}
}

// SocketConnection is a OStream for a connected socket. They can be created
// either by Client when connecting to a host, or by Listener when accepting a
// new client.
//
// The type of the Connection object returned from these calls depends on the
// type of the underlying socket that is in use. For instance, for a TCP/IP
// connection it will be a Connection.
//
// Choosing what type of object to construct is done with the socket connection
// factory, and it is possible for 3rd parties to register custom socket
// connection types for specific combination of socket family/type/protocol
// using g_socket_connection_factory_register_type().
//
// To close a Connection, use g_io_stream_close(). Closing both substreams of
// the OStream separately will not close the underlying #GSocket.
type SocketConnection struct {
	_ [0]func() // equal guard
	IOStream
}

var (
	_ IOStreamer = (*SocketConnection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SocketConnection, *SocketConnectionClass, SocketConnectionOverrides](
		GTypeSocketConnection,
		initSocketConnectionClass,
		wrapSocketConnection,
		defaultSocketConnectionOverrides,
	)
}

func initSocketConnectionClass(gclass unsafe.Pointer, overrides SocketConnectionOverrides, classInitFunc func(*SocketConnectionClass)) {
	if classInitFunc != nil {
		class := (*SocketConnectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketConnection(obj *coreglib.Object) *SocketConnection {
	return &SocketConnection{
		IOStream: IOStream{
			Object: obj,
		},
	}
}

func marshalSocketConnection(p uintptr) (interface{}, error) {
	return wrapSocketConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LocalAddress: try to get the local address of a socket connection.
//
// The function returns the following values:
//
//    - socketAddress or NULL on error. Free the returned object with
//      g_object_unref().
//
func (connection *SocketConnection) LocalAddress() (SocketAddresser, error) {
	var _arg0 *C.GSocketConnection // out
	var _cret *C.GSocketAddress    // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketConnection)(unsafe.Pointer(coreglib.InternObject(connection).Native()))

	_cret = C.g_socket_connection_get_local_address(_arg0, &_cerr)
	runtime.KeepAlive(connection)

	var _socketAddress SocketAddresser // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.SocketAddresser is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SocketAddresser)
			return ok
		})
		rv, ok := casted.(SocketAddresser)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SocketAddresser")
		}
		_socketAddress = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _socketAddress, _goerr
}

// RemoteAddress: try to get the remote address of a socket connection.
//
// Since GLib 2.40, when used with g_socket_client_connect() or
// g_socket_client_connect_async(), during emission of
// G_SOCKET_CLIENT_CONNECTING, this function will return the remote address that
// will be used for the connection. This allows applications to print e.g.
// "Connecting to example.com (10.42.77.3)...".
//
// The function returns the following values:
//
//    - socketAddress or NULL on error. Free the returned object with
//      g_object_unref().
//
func (connection *SocketConnection) RemoteAddress() (SocketAddresser, error) {
	var _arg0 *C.GSocketConnection // out
	var _cret *C.GSocketAddress    // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GSocketConnection)(unsafe.Pointer(coreglib.InternObject(connection).Native()))

	_cret = C.g_socket_connection_get_remote_address(_arg0, &_cerr)
	runtime.KeepAlive(connection)

	var _socketAddress SocketAddresser // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.SocketAddresser is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SocketAddresser)
			return ok
		})
		rv, ok := casted.(SocketAddresser)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SocketAddresser")
		}
		_socketAddress = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _socketAddress, _goerr
}

// Socket gets the underlying #GSocket object of the connection. This can be
// useful if you want to do something unusual on it not supported by the
// Connection APIs.
//
// The function returns the following values:
//
//    - socket or NULL on error.
//
func (connection *SocketConnection) Socket() *Socket {
	var _arg0 *C.GSocketConnection // out
	var _cret *C.GSocket           // in

	_arg0 = (*C.GSocketConnection)(unsafe.Pointer(coreglib.InternObject(connection).Native()))

	_cret = C.g_socket_connection_get_socket(_arg0)
	runtime.KeepAlive(connection)

	var _socket *Socket // out

	_socket = wrapSocket(coreglib.Take(unsafe.Pointer(_cret)))

	return _socket
}

// SocketConnectionFactoryLookupType looks up the #GType to be used when
// creating socket connections on sockets with the specified family, type and
// protocol_id.
//
// If no type is registered, the Connection base type is returned.
//
// The function takes the following parameters:
//
//    - family: Family.
//    - typ: Type.
//    - protocolId: protocol id.
//
// The function returns the following values:
//
//    - gType: #GType.
//
func SocketConnectionFactoryLookupType(family SocketFamily, typ SocketType, protocolId int) coreglib.Type {
	var _arg1 C.GSocketFamily // out
	var _arg2 C.GSocketType   // out
	var _arg3 C.gint          // out
	var _cret C.GType         // in

	_arg1 = C.GSocketFamily(family)
	_arg2 = C.GSocketType(typ)
	_arg3 = C.gint(protocolId)

	_cret = C.g_socket_connection_factory_lookup_type(_arg1, _arg2, _arg3)
	runtime.KeepAlive(family)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(protocolId)

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// SocketConnectionFactoryRegisterType looks up the #GType to be used when
// creating socket connections on sockets with the specified family, type and
// protocol.
//
// If no type is registered, the Connection base type is returned.
//
// The function takes the following parameters:
//
//    - gType inheriting from G_TYPE_SOCKET_CONNECTION.
//    - family: Family.
//    - typ: Type.
//    - protocol id.
//
func SocketConnectionFactoryRegisterType(gType coreglib.Type, family SocketFamily, typ SocketType, protocol int) {
	var _arg1 C.GType         // out
	var _arg2 C.GSocketFamily // out
	var _arg3 C.GSocketType   // out
	var _arg4 C.gint          // out

	_arg1 = C.GType(gType)
	_arg2 = C.GSocketFamily(family)
	_arg3 = C.GSocketType(typ)
	_arg4 = C.gint(protocol)

	C.g_socket_connection_factory_register_type(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(gType)
	runtime.KeepAlive(family)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(protocol)
}
