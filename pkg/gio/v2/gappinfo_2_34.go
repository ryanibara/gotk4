// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// char** _gotk4_gio2_AppInfo_virtual_get_supported_types(void* fnptr, GAppInfo* arg0) {
//   return ((char** (*)(GAppInfo*))(fnptr))(arg0);
// };
import "C"

// SupportedTypes retrieves the list of content types that app_info claims to
// support. If this information is not provided by the environment, this
// function will return NULL. This function does not take in consideration
// associations added with g_app_info_add_supports_type(), but only those
// exported directly by the application.
//
// The function returns the following values:
//
//    - utf8s: a list of content types.
//
func (appinfo *AppInfo) SupportedTypes() []string {
	var _arg0 *C.GAppInfo // out
	var _cret **C.char    // in

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = C.g_app_info_get_supported_types(_arg0)
	runtime.KeepAlive(appinfo)

	var _utf8s []string // out

	{
		var i int
		var z *C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// supportedTypes retrieves the list of content types that app_info claims to
// support. If this information is not provided by the environment, this
// function will return NULL. This function does not take in consideration
// associations added with g_app_info_add_supports_type(), but only those
// exported directly by the application.
//
// The function returns the following values:
//
//    - utf8s: a list of content types.
//
func (appinfo *AppInfo) supportedTypes() []string {
	gclass := (*C.GAppInfoIface)(coreglib.PeekParentClass(appinfo))
	fnarg := gclass.get_supported_types

	var _arg0 *C.GAppInfo // out
	var _cret **C.char    // in

	_arg0 = (*C.GAppInfo)(unsafe.Pointer(coreglib.InternObject(appinfo).Native()))

	_cret = C._gotk4_gio2_AppInfo_virtual_get_supported_types(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(appinfo)

	var _utf8s []string // out

	{
		var i int
		var z *C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}
