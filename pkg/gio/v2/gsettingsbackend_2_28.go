// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewMemorySettingsBackend creates a memory-backed Backend.
//
// This backend allows changes to settings, but does not write them to any
// backing storage, so the next time you run your application, the memory
// backend will start out with the default values again.
//
// The function returns the following values:
//
//   - settingsBackend: newly created Backend.
//
func NewMemorySettingsBackend() SettingsBackender {
	var _cret *C.GSettingsBackend // in

	_cret = C.g_memory_settings_backend_new()

	var _settingsBackend SettingsBackender // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.SettingsBackender is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SettingsBackender)
			return ok
		})
		rv, ok := casted.(SettingsBackender)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SettingsBackender")
		}
		_settingsBackend = rv
	}

	return _settingsBackend
}

// NewNullSettingsBackend creates a readonly Backend.
//
// This backend does not allow changes to settings, so all settings will always
// have their default values.
//
// The function returns the following values:
//
//   - settingsBackend: newly created Backend.
//
func NewNullSettingsBackend() SettingsBackender {
	var _cret *C.GSettingsBackend // in

	_cret = C.g_null_settings_backend_new()

	var _settingsBackend SettingsBackender // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.SettingsBackender is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SettingsBackender)
			return ok
		})
		rv, ok := casted.(SettingsBackender)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SettingsBackender")
		}
		_settingsBackend = rv
	}

	return _settingsBackend
}

// SettingsBackendGetDefault returns the default Backend. It is possible to
// override the default by setting the GSETTINGS_BACKEND environment variable to
// the name of a settings backend.
//
// The user gets a reference to the backend.
//
// The function returns the following values:
//
//   - settingsBackend: default Backend, which will be a dummy (memory) settings
//     backend if no other settings backend is available.
//
func SettingsBackendGetDefault() SettingsBackender {
	var _cret *C.GSettingsBackend // in

	_cret = C.g_settings_backend_get_default()

	var _settingsBackend SettingsBackender // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.SettingsBackender is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(SettingsBackender)
			return ok
		})
		rv, ok := casted.(SettingsBackender)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SettingsBackender")
		}
		_settingsBackend = rv
	}

	return _settingsBackend
}
