// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gemblemedicon.go.
var GTypeEmblemedIcon = coreglib.Type(C.g_emblemed_icon_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeEmblemedIcon, F: marshalEmblemedIcon},
	})
}

// EmblemedIconOverrider contains methods that are overridable.
type EmblemedIconOverrider interface {
}

// EmblemedIcon is an implementation of #GIcon that supports adding an emblem to
// an icon. Adding multiple emblems to an icon is ensured via
// g_emblemed_icon_add_emblem().
//
// Note that Icon allows no control over the position of the emblems. See also
// #GEmblem for more information.
type EmblemedIcon struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Icon
}

var (
	_ coreglib.Objector = (*EmblemedIcon)(nil)
)

func classInitEmblemedIconner(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapEmblemedIcon(obj *coreglib.Object) *EmblemedIcon {
	return &EmblemedIcon{
		Object: obj,
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalEmblemedIcon(p uintptr) (interface{}, error) {
	return wrapEmblemedIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewEmblemedIcon creates a new emblemed icon for icon with the emblem emblem.
//
// The function takes the following parameters:
//
//    - icon: #GIcon.
//    - emblem (optional) or NULL.
//
// The function returns the following values:
//
//    - emblemedIcon: new #GIcon.
//
func NewEmblemedIcon(icon Iconner, emblem *Emblem) *EmblemedIcon {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	if emblem != nil {
		_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblem).Native()))
	}
	*(*Iconner)(unsafe.Pointer(&args[0])) = _arg0
	*(**Emblem)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("Gio", "EmblemedIcon").InvokeMethod("new_EmblemedIcon", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(icon)
	runtime.KeepAlive(emblem)

	var _emblemedIcon *EmblemedIcon // out

	_emblemedIcon = wrapEmblemedIcon(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _emblemedIcon
}

// AddEmblem adds emblem to the #GList of #GEmblems.
//
// The function takes the following parameters:
//
//    - emblem: #GEmblem.
//
func (emblemed *EmblemedIcon) AddEmblem(emblem *Emblem) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblemed).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblem).Native()))
	*(**EmblemedIcon)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "EmblemedIcon").InvokeMethod("add_emblem", args[:], nil)

	runtime.KeepAlive(emblemed)
	runtime.KeepAlive(emblem)
}

// ClearEmblems removes all the emblems from icon.
func (emblemed *EmblemedIcon) ClearEmblems() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblemed).Native()))
	*(**EmblemedIcon)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("Gio", "EmblemedIcon").InvokeMethod("clear_emblems", args[:], nil)

	runtime.KeepAlive(emblemed)
}

// Emblems gets the list of emblems for the icon.
//
// The function returns the following values:
//
//    - list of #GEmblems that is owned by emblemed.
//
func (emblemed *EmblemedIcon) Emblems() []*Emblem {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblemed).Native()))
	*(**EmblemedIcon)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "EmblemedIcon").InvokeMethod("get_emblems", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(emblemed)

	var _list []*Emblem // out

	_list = make([]*Emblem, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst *Emblem // out
		dst = wrapEmblem(coreglib.Take(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// GetIcon gets the main icon for emblemed.
//
// The function returns the following values:
//
//    - icon that is owned by emblemed.
//
func (emblemed *EmblemedIcon) GetIcon() *Icon {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(emblemed).Native()))
	*(**EmblemedIcon)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "EmblemedIcon").InvokeMethod("get_icon", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(emblemed)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.Take(unsafe.Pointer(_cret)))

	return _icon
}
