// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for gcredentials.go.
var GTypeCredentials = coreglib.Type(C.g_credentials_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeCredentials, F: marshalCredentials},
	})
}

// CredentialsOverrider contains methods that are overridable.
type CredentialsOverrider interface {
}

// Credentials type is a reference-counted wrapper for native credentials. This
// information is typically used for identifying, authenticating and authorizing
// other processes.
//
// Some operating systems supports looking up the credentials of the remote peer
// of a communication endpoint - see e.g. g_socket_get_credentials().
//
// Some operating systems supports securely sending and receiving credentials
// over a Unix Domain Socket, see CredentialsMessage,
// g_unix_connection_send_credentials() and
// g_unix_connection_receive_credentials() for details.
//
// On Linux, the native credential type is a struct ucred - see the unix(7) man
// page for details. This corresponds to G_CREDENTIALS_TYPE_LINUX_UCRED.
//
// On Apple operating systems (including iOS, tvOS, and macOS), the native
// credential type is a struct xucred. This corresponds to
// G_CREDENTIALS_TYPE_APPLE_XUCRED.
//
// On FreeBSD, Debian GNU/kFreeBSD, and GNU/Hurd, the native credential type is
// a struct cmsgcred. This corresponds to G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED.
//
// On NetBSD, the native credential type is a struct unpcbid. This corresponds
// to G_CREDENTIALS_TYPE_NETBSD_UNPCBID.
//
// On OpenBSD, the native credential type is a struct sockpeercred. This
// corresponds to G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED.
//
// On Solaris (including OpenSolaris and its derivatives), the native credential
// type is a ucred_t. This corresponds to G_CREDENTIALS_TYPE_SOLARIS_UCRED.
type Credentials struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Credentials)(nil)
)

func classInitCredentialser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCredentials(obj *coreglib.Object) *Credentials {
	return &Credentials{
		Object: obj,
	}
}

func marshalCredentials(p uintptr) (interface{}, error) {
	return wrapCredentials(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCredentials creates a new #GCredentials object with credentials matching
// the the current process.
//
// The function returns the following values:
//
//    - credentials Free with g_object_unref().
//
func NewCredentials() *Credentials {
	var _cret *C.void // in

	_gret := girepository.MustFind("Gio", "Credentials").InvokeMethod("new_Credentials", nil, nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	var _credentials *Credentials // out

	_credentials = wrapCredentials(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _credentials
}

// IsSameUser checks if credentials and other_credentials is the same user.
//
// This operation can fail if #GCredentials is not supported on the the OS.
//
// The function takes the following parameters:
//
//    - otherCredentials: #GCredentials.
//
func (credentials *Credentials) IsSameUser(otherCredentials *Credentials) error {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out
	var _cerr *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(credentials).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(coreglib.InternObject(otherCredentials).Native()))
	*(**Credentials)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("Gio", "Credentials").InvokeMethod("is_same_user", args[:], nil)

	runtime.KeepAlive(credentials)
	runtime.KeepAlive(otherCredentials)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// String creates a human-readable textual representation of credentials that
// can be used in logging and debug messages. The format of the returned string
// may change in future GLib release.
//
// The function returns the following values:
//
//    - utf8: string that should be freed with g_free().
//
func (credentials *Credentials) String() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(credentials).Native()))
	*(**Credentials)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Gio", "Credentials").InvokeMethod("to_string", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(credentials)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
