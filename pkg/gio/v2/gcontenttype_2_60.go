// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// ContentTypeGetMIMEDirs: get the list of directories which MIME data is loaded
// from. See g_content_type_set_mime_dirs() for details.
//
// The function returns the following values:
//
//   - utf8s: NULL-terminated list of directories to load MIME data from,
//     including any mime/ subdirectory, and with the first directory to try
//     listed first.
//
func ContentTypeGetMIMEDirs() []string {
	var _cret **C.gchar // in

	_cret = C.g_content_type_get_mime_dirs()

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// ContentTypeSetMIMEDirs: set the list of directories used by GIO to load the
// MIME database. If dirs is NULL, the directories used are the default:
//
//   - the mime subdirectory of the directory in $XDG_DATA_HOME
//   - the mime subdirectory of every directory in $XDG_DATA_DIRS
//
// This function is intended to be used when writing tests that depend on
// information stored in the MIME database, in order to control the data.
//
// Typically, in case your tests use G_TEST_OPTION_ISOLATE_DIRS, but they depend
// on the system’s MIME database, you should call this function with dirs set to
// NULL before calling g_test_init(), for instance:
//
//    // Load MIME data from the system
//    g_content_type_set_mime_dirs (NULL);
//    // Isolate the environment
//    g_test_init (&argc, &argv, G_TEST_OPTION_ISOLATE_DIRS, NULL);
//
//    …
//
//    return g_test_run ();.
//
// The function takes the following parameters:
//
//   - dirs (optional): NULL-terminated list of directories to load MIME data
//     from, including any mime/ subdirectory, and with the first directory to
//     try listed first.
//
func ContentTypeSetMIMEDirs(dirs []string) {
	var _arg1 **C.gchar // out

	{
		_arg1 = (**C.gchar)(C.calloc(C.size_t((len(dirs) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg1))
		{
			out := unsafe.Slice(_arg1, len(dirs)+1)
			var zero *C.gchar
			out[len(dirs)] = zero
			for i := range dirs {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(dirs[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	C.g_content_type_set_mime_dirs(_arg1)
	runtime.KeepAlive(dirs)
}
