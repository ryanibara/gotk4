// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// NewSimpleIOStream creates a new IOStream wrapping input_stream and
// output_stream. See also OStream.
//
// The function takes the following parameters:
//
//    - inputStream: Stream.
//    - outputStream: Stream.
//
// The function returns the following values:
//
//    - simpleIOStream: new IOStream instance.
//
func NewSimpleIOStream(inputStream InputStreamer, outputStream OutputStreamer) *SimpleIOStream {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(inputStream).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(outputStream).Native()))

	_gret := girepository.MustFind("Gio", "SimpleIOStream").InvokeMethod("new_SimpleIOStream", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(inputStream)
	runtime.KeepAlive(outputStream)

	var _simpleIOStream *SimpleIOStream // out

	_simpleIOStream = wrapSimpleIOStream(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _simpleIOStream
}
