// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Option gets the value of an integer-valued option on socket, as with
// getsockopt(). (If you need to fetch a non-integer-valued option, you will
// need to call getsockopt() directly.)
//
// The [<gio/gnetworking.h>][gio-gnetworking.h] header pulls in system headers
// that will define most of the standard/portable socket options. For unusual
// socket protocols or platform-dependent options, you may need to include
// additional headers.
//
// Note that even for socket options that are a single byte in size, value is
// still a pointer to a #gint variable, not a #guchar; g_socket_get_option()
// will handle the conversion internally.
//
// The function takes the following parameters:
//
//    - level: "API level" of the option (eg, SOL_SOCKET).
//    - optname: "name" of the option (eg, SO_BROADCAST).
//
// The function returns the following values:
//
//    - value: return location for the option value.
//
func (socket *Socket) Option(level, optname int) (int, error) {
	var _arg0 *C.GSocket // out
	var _arg1 C.gint     // out
	var _arg2 C.gint     // out
	var _arg3 C.gint     // in
	var _cerr *C.GError  // in

	_arg0 = (*C.GSocket)(unsafe.Pointer(coreglib.InternObject(socket).Native()))
	_arg1 = C.gint(level)
	_arg2 = C.gint(optname)

	C.g_socket_get_option(_arg0, _arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(socket)
	runtime.KeepAlive(level)
	runtime.KeepAlive(optname)

	var _value int   // out
	var _goerr error // out

	_value = int(_arg3)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _value, _goerr
}

// SetOption sets the value of an integer-valued option on socket, as with
// setsockopt(). (If you need to set a non-integer-valued option, you will need
// to call setsockopt() directly.)
//
// The [<gio/gnetworking.h>][gio-gnetworking.h] header pulls in system headers
// that will define most of the standard/portable socket options. For unusual
// socket protocols or platform-dependent options, you may need to include
// additional headers.
//
// The function takes the following parameters:
//
//    - level: "API level" of the option (eg, SOL_SOCKET).
//    - optname: "name" of the option (eg, SO_BROADCAST).
//    - value to set the option to.
//
func (socket *Socket) SetOption(level, optname, value int) error {
	var _arg0 *C.GSocket // out
	var _arg1 C.gint     // out
	var _arg2 C.gint     // out
	var _arg3 C.gint     // out
	var _cerr *C.GError  // in

	_arg0 = (*C.GSocket)(unsafe.Pointer(coreglib.InternObject(socket).Native()))
	_arg1 = C.gint(level)
	_arg2 = C.gint(optname)
	_arg3 = C.gint(value)

	C.g_socket_set_option(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(socket)
	runtime.KeepAlive(level)
	runtime.KeepAlive(optname)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}
