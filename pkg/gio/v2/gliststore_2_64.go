// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Find looks up the given item in the list store by looping over the items
// until the first occurrence of item. If item was not found, then position will
// not be set, and this method will return FALSE.
//
// If you need to compare the two items with a custom comparison function, use
// g_list_store_find_with_equal_func() with a custom Func instead.
//
// The function takes the following parameters:
//
//    - item: item.
//
// The function returns the following values:
//
//    - position (optional): first position of item, if it was found.
//    - ok: whether store contains item. If it was found, position will be set to
//      the position where item occurred for the first time.
//
func (store *ListStore) Find(item *coreglib.Object) (uint, bool) {
	var _arg0 *C.GListStore // out
	var _arg1 C.gpointer    // out
	var _arg2 C.guint       // in
	var _cret C.gboolean    // in

	_arg0 = (*C.GListStore)(unsafe.Pointer(coreglib.InternObject(store).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(item.Native()))

	_cret = C.g_list_store_find(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(store)
	runtime.KeepAlive(item)

	var _position uint // out
	var _ok bool       // out

	_position = uint(_arg2)
	if _cret != 0 {
		_ok = true
	}

	return _position, _ok
}
