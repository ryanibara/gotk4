// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// NewEmblem creates a new emblem for icon.
//
// The function takes the following parameters:
//
//    - icon: GIcon containing the icon.
//
// The function returns the following values:
//
//    - emblem: new #GEmblem.
//
func NewEmblem(icon Iconner) *Emblem {
	var _arg1 *C.GIcon   // out
	var _cret *C.GEmblem // in

	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))

	_cret = C.g_emblem_new(_arg1)
	runtime.KeepAlive(icon)

	var _emblem *Emblem // out

	_emblem = wrapEmblem(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _emblem
}

// NewEmblemWithOrigin creates a new emblem for icon.
//
// The function takes the following parameters:
//
//    - icon: GIcon containing the icon.
//    - origin: GEmblemOrigin enum defining the emblem's origin.
//
// The function returns the following values:
//
//    - emblem: new #GEmblem.
//
func NewEmblemWithOrigin(icon Iconner, origin EmblemOrigin) *Emblem {
	var _arg1 *C.GIcon        // out
	var _arg2 C.GEmblemOrigin // out
	var _cret *C.GEmblem      // in

	_arg1 = (*C.GIcon)(unsafe.Pointer(coreglib.InternObject(icon).Native()))
	_arg2 = C.GEmblemOrigin(origin)

	_cret = C.g_emblem_new_with_origin(_arg1, _arg2)
	runtime.KeepAlive(icon)
	runtime.KeepAlive(origin)

	var _emblem *Emblem // out

	_emblem = wrapEmblem(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _emblem
}

// GetIcon gives back the icon from emblem.
//
// The function returns the following values:
//
//    - icon The returned object belongs to the emblem and should not be modified
//      or freed.
//
func (emblem *Emblem) GetIcon() *Icon {
	var _arg0 *C.GEmblem // out
	var _cret *C.GIcon   // in

	_arg0 = (*C.GEmblem)(unsafe.Pointer(coreglib.InternObject(emblem).Native()))

	_cret = C.g_emblem_get_icon(_arg0)
	runtime.KeepAlive(emblem)

	var _icon *Icon // out

	_icon = wrapIcon(coreglib.Take(unsafe.Pointer(_cret)))

	return _icon
}

// Origin gets the origin of the emblem.
//
// The function returns the following values:
//
//    - emblemOrigin: origin of the emblem.
//
func (emblem *Emblem) Origin() EmblemOrigin {
	var _arg0 *C.GEmblem      // out
	var _cret C.GEmblemOrigin // in

	_arg0 = (*C.GEmblem)(unsafe.Pointer(coreglib.InternObject(emblem).Native()))

	_cret = C.g_emblem_get_origin(_arg0)
	runtime.KeepAlive(emblem)

	var _emblemOrigin EmblemOrigin // out

	_emblemOrigin = EmblemOrigin(_cret)

	return _emblemOrigin
}
