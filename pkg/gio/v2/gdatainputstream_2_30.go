// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// ReadLineFinishUTF8: finish an asynchronous call started by
// g_data_input_stream_read_line_async().
//
// The function takes the following parameters:
//
//    - result that was provided to the callback.
//
// The function returns the following values:
//
//    - length (optional) to get the length of the data read in.
//    - utf8 (optional): string with the line that was read in (without the
//      newlines). Set length to a #gsize to get the length of the read line. On
//      an error, it will return NULL and error will be set. For UTF-8 conversion
//      errors, the set error domain is G_CONVERT_ERROR. If there's no content to
//      read, it will still return NULL, but error won't be set.
//
func (stream *DataInputStream) ReadLineFinishUTF8(result AsyncResulter) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg1 *C.GAsyncResult     // out
	var _arg2 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C.g_data_input_stream_read_line_finish_utf8(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(result)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg2)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _utf8, _goerr
}

// ReadLineUTF8 reads a UTF-8 encoded line from the data input stream.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned.
//
// The function takes the following parameters:
//
//    - ctx (optional): optional #GCancellable object, NULL to ignore.
//
// The function returns the following values:
//
//    - length (optional) to get the length of the data read in.
//    - utf8 (optional): NUL terminated UTF-8 string with the line that was read
//      in (without the newlines). Set length to a #gsize to get the length of
//      the read line. On an error, it will return NULL and error will be set.
//      For UTF-8 conversion errors, the set error domain is G_CONVERT_ERROR. If
//      there's no content to read, it will still return NULL, but error won't be
//      set.
//
func (stream *DataInputStream) ReadLineUTF8(ctx context.Context) (uint, string, error) {
	var _arg0 *C.GDataInputStream // out
	var _arg2 *C.GCancellable     // out
	var _arg1 C.gsize             // in
	var _cret *C.char             // in
	var _cerr *C.GError           // in

	_arg0 = (*C.GDataInputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.g_data_input_stream_read_line_utf8(_arg0, &_arg1, _arg2, &_cerr)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(ctx)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg1)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _utf8, _goerr
}
