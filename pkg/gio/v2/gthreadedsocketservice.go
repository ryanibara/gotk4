// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// gboolean _gotk4_gio2_ThreadedSocketService_virtual_run(void* fnptr, GThreadedSocketService* arg0, GSocketConnection* arg1, GObject* arg2) {
//   return ((gboolean (*)(GThreadedSocketService*, GSocketConnection*, GObject*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// The function takes the following parameters:
//
//    - connection
//    - sourceObject
//
// The function returns the following values:
//
func (service *ThreadedSocketService) run(connection *SocketConnection, sourceObject *coreglib.Object) bool {
	gclass := (*C.GThreadedSocketServiceClass)(coreglib.PeekParentClass(service))
	fnarg := gclass.run

	var _arg0 *C.GThreadedSocketService // out
	var _arg1 *C.GSocketConnection      // out
	var _arg2 *C.GObject                // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GThreadedSocketService)(unsafe.Pointer(coreglib.InternObject(service).Native()))
	_arg1 = (*C.GSocketConnection)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	_arg2 = (*C.GObject)(unsafe.Pointer(sourceObject.Native()))

	_cret = C._gotk4_gio2_ThreadedSocketService_virtual_run(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(service)
	runtime.KeepAlive(connection)
	runtime.KeepAlive(sourceObject)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ThreadedSocketServiceClass: instance of this type is always passed by
// reference.
type ThreadedSocketServiceClass struct {
	*threadedSocketServiceClass
}

// threadedSocketServiceClass is the struct that's finalized.
type threadedSocketServiceClass struct {
	native *C.GThreadedSocketServiceClass
}

func (t *ThreadedSocketServiceClass) ParentClass() *SocketServiceClass {
	valptr := &t.native.parent_class
	var _v *SocketServiceClass // out
	_v = (*SocketServiceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
