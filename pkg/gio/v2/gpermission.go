// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gio2_PermissionClass_release_finish(GPermission*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_PermissionClass_release(GPermission*, GCancellable*, GError**);
// extern gboolean _gotk4_gio2_PermissionClass_acquire_finish(GPermission*, GAsyncResult*, GError**);
// extern gboolean _gotk4_gio2_PermissionClass_acquire(GPermission*, GCancellable*, GError**);
import "C"

// GType values.
var (
	GTypePermission = coreglib.Type(C.g_permission_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePermission, F: marshalPermission},
	})
}

// PermissionOverrides contains methods that are overridable.
type PermissionOverrides struct {
	// Acquire attempts to acquire the permission represented by permission.
	//
	// The precise method by which this happens depends on the permission and
	// the underlying authentication mechanism. A simple example is that a
	// dialog may appear asking the user to enter their password.
	//
	// You should check with g_permission_get_can_acquire() before calling this
	// function.
	//
	// If the permission is acquired then TRUE is returned. Otherwise, FALSE is
	// returned and error is set appropriately.
	//
	// This call is blocking, likely for a very long time (in the case that user
	// interaction is required). See g_permission_acquire_async() for the
	// non-blocking version.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional) or NULL.
	//
	Acquire func(ctx context.Context) error
	// AcquireFinish collects the result of attempting to acquire the permission
	// represented by permission.
	//
	// This is the second half of the asynchronous version of
	// g_permission_acquire().
	//
	// The function takes the following parameters:
	//
	//    - result given to the ReadyCallback.
	//
	AcquireFinish func(result AsyncResulter) error
	// Release attempts to release the permission represented by permission.
	//
	// The precise method by which this happens depends on the permission and
	// the underlying authentication mechanism. In most cases the permission
	// will be dropped immediately without further action.
	//
	// You should check with g_permission_get_can_release() before calling this
	// function.
	//
	// If the permission is released then TRUE is returned. Otherwise, FALSE is
	// returned and error is set appropriately.
	//
	// This call is blocking, likely for a very long time (in the case that user
	// interaction is required). See g_permission_release_async() for the
	// non-blocking version.
	//
	// The function takes the following parameters:
	//
	//    - ctx (optional) or NULL.
	//
	Release func(ctx context.Context) error
	// ReleaseFinish collects the result of attempting to release the permission
	// represented by permission.
	//
	// This is the second half of the asynchronous version of
	// g_permission_release().
	//
	// The function takes the following parameters:
	//
	//    - result given to the ReadyCallback.
	//
	ReleaseFinish func(result AsyncResulter) error
}

func defaultPermissionOverrides(v *Permission) PermissionOverrides {
	return PermissionOverrides{
		Acquire:       v.acquire,
		AcquireFinish: v.acquireFinish,
		Release:       v.release,
		ReleaseFinish: v.releaseFinish,
	}
}

// Permission represents the status of the caller's permission to perform a
// certain action.
//
// You can query if the action is currently allowed and if it is possible to
// acquire the permission so that the action will be allowed in the future.
//
// There is also an API to actually acquire the permission and one to release
// it.
//
// As an example, a #GPermission might represent the ability for the user to
// write to a #GSettings object. This #GPermission object could then be used to
// decide if it is appropriate to show a "Click here to unlock" button in a
// dialog and to provide the mechanism to invoke when that button is clicked.
type Permission struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Permission)(nil)
)

// Permissioner describes types inherited from class Permission.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Permissioner interface {
	coreglib.Objector
	basePermission() *Permission
}

var _ Permissioner = (*Permission)(nil)

func init() {
	coreglib.RegisterClassInfo[*Permission, *PermissionClass, PermissionOverrides](
		GTypePermission,
		initPermissionClass,
		wrapPermission,
		defaultPermissionOverrides,
	)
}

func initPermissionClass(gclass unsafe.Pointer, overrides PermissionOverrides, classInitFunc func(*PermissionClass)) {
	pclass := (*C.GPermissionClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypePermission))))

	if overrides.Acquire != nil {
		pclass.acquire = (*[0]byte)(C._gotk4_gio2_PermissionClass_acquire)
	}

	if overrides.AcquireFinish != nil {
		pclass.acquire_finish = (*[0]byte)(C._gotk4_gio2_PermissionClass_acquire_finish)
	}

	if overrides.Release != nil {
		pclass.release = (*[0]byte)(C._gotk4_gio2_PermissionClass_release)
	}

	if overrides.ReleaseFinish != nil {
		pclass.release_finish = (*[0]byte)(C._gotk4_gio2_PermissionClass_release_finish)
	}

	if classInitFunc != nil {
		class := (*PermissionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPermission(obj *coreglib.Object) *Permission {
	return &Permission{
		Object: obj,
	}
}

func marshalPermission(p uintptr) (interface{}, error) {
	return wrapPermission(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (permission *Permission) basePermission() *Permission {
	return permission
}

// BasePermission returns the underlying base object.
func BasePermission(obj Permissioner) *Permission {
	return obj.basePermission()
}

// PermissionClass: instance of this type is always passed by reference.
type PermissionClass struct {
	*permissionClass
}

// permissionClass is the struct that's finalized.
type permissionClass struct {
	native *C.GPermissionClass
}

func (p *PermissionClass) Reserved() [16]unsafe.Pointer {
	valptr := &p.native.reserved
	var _v [16]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 16; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
