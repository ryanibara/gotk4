// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// Arguments gets the list of arguments that was passed on the command line.
//
// The strings in the array may contain non-UTF-8 data on UNIX (such as
// filenames or arguments given in the system locale) but are always in UTF-8 on
// Windows.
//
// If you wish to use the return value with Context, you must use
// g_option_context_parse_strv().
//
// The return value is NULL-terminated and should be freed using g_strfreev().
//
// The function returns the following values:
//
//    - filenames: the string array containing the arguments (the argv).
//
func (cmdline *ApplicationCommandLine) Arguments() []string {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret **C.gchar                  // in
	var _arg1 C.int                      // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_arguments(_arg0, &_arg1)
	runtime.KeepAlive(cmdline)

	var _filenames []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		src := unsafe.Slice((**C.gchar)(_cret), _arg1)
		_filenames = make([]string, _arg1)
		for i := 0; i < int(_arg1); i++ {
			_filenames[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _filenames
}

// Cwd gets the working directory of the command line invocation. The string may
// contain non-utf8 data.
//
// It is possible that the remote application did not send a working directory,
// so this may be NULL.
//
// The return value should not be modified or freed and is valid for as long as
// cmdline exists.
//
// The function returns the following values:
//
//    - filename (optional): current directory, or NULL.
//
func (cmdline *ApplicationCommandLine) Cwd() string {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_cwd(_arg0)
	runtime.KeepAlive(cmdline)

	var _filename string // out

	if _cret != nil {
		_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _filename
}

// Environ gets the contents of the 'environ' variable of the command line
// invocation, as would be returned by g_get_environ(), ie as a NULL-terminated
// list of strings in the form 'NAME=VALUE'. The strings may contain non-utf8
// data.
//
// The remote application usually does not send an environment. Use
// G_APPLICATION_SEND_ENVIRONMENT to affect that. Even with this flag set it is
// possible that the environment is still not available (due to invocation
// messages from other applications).
//
// The return value should not be modified or freed and is valid for as long as
// cmdline exists.
//
// See g_application_command_line_getenv() if you are only interested in the
// value of a single environment variable.
//
// The function returns the following values:
//
//    - filenames: the environment strings, or NULL if they were not sent.
//
func (cmdline *ApplicationCommandLine) Environ() []string {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret **C.gchar                  // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_environ(_arg0)
	runtime.KeepAlive(cmdline)

	var _filenames []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_filenames = make([]string, i)
		for i := range src {
			_filenames[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _filenames
}

// ExitStatus gets the exit status of cmdline. See
// g_application_command_line_set_exit_status() for more information.
//
// The function returns the following values:
//
//    - gint: exit status.
//
func (cmdline *ApplicationCommandLine) ExitStatus() int {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret C.int                      // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_exit_status(_arg0)
	runtime.KeepAlive(cmdline)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IsRemote determines if cmdline represents a remote invocation.
//
// The function returns the following values:
//
//    - ok: TRUE if the invocation was remote.
//
func (cmdline *ApplicationCommandLine) IsRemote() bool {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret C.gboolean                 // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_is_remote(_arg0)
	runtime.KeepAlive(cmdline)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PlatformData gets the platform data associated with the invocation of
// cmdline.
//
// This is a #GVariant dictionary containing information about the context in
// which the invocation occurred. It typically contains information like the
// current working directory and the startup notification ID.
//
// For local invocation, it will be NULL.
//
// The function returns the following values:
//
//    - variant (optional): platform data, or NULL.
//
func (cmdline *ApplicationCommandLine) PlatformData() *glib.Variant {
	var _arg0 *C.GApplicationCommandLine // out
	var _cret *C.GVariant                // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))

	_cret = C.g_application_command_line_get_platform_data(_arg0)
	runtime.KeepAlive(cmdline)

	var _variant *glib.Variant // out

	if _cret != nil {
		_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_variant)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}

	return _variant
}

// Env gets the value of a particular environment variable of the command line
// invocation, as would be returned by g_getenv(). The strings may contain
// non-utf8 data.
//
// The remote application usually does not send an environment. Use
// G_APPLICATION_SEND_ENVIRONMENT to affect that. Even with this flag set it is
// possible that the environment is still not available (due to invocation
// messages from other applications).
//
// The return value should not be modified or freed and is valid for as long as
// cmdline exists.
//
// The function takes the following parameters:
//
//    - name: environment variable to get.
//
// The function returns the following values:
//
//    - utf8 (optional): value of the variable, or NULL if unset or unsent.
//
func (cmdline *ApplicationCommandLine) env(name string) string {
	var _arg0 *C.GApplicationCommandLine // out
	var _arg1 *C.gchar                   // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_application_command_line_getenv(_arg0, _arg1)
	runtime.KeepAlive(cmdline)
	runtime.KeepAlive(name)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetExitStatus sets the exit status that will be used when the invoking
// process exits.
//
// The return value of the #GApplication::command-line signal is passed to this
// function when the handler returns. This is the usual way of setting the exit
// status.
//
// In the event that you want the remote invocation to continue running and want
// to decide on the exit status in the future, you can use this call. For the
// case of a remote invocation, the remote process will typically exit when the
// last reference is dropped on cmdline. The exit status of the remote process
// will be equal to the last value that was set with this function.
//
// In the case that the commandline invocation is local, the situation is
// slightly more complicated. If the commandline invocation results in the
// mainloop running (ie: because the use-count of the application increased to a
// non-zero value) then the application is considered to have been 'successful'
// in a certain sense, and the exit status is always zero. If the application
// use count is zero, though, the exit status of the local CommandLine is used.
//
// The function takes the following parameters:
//
//    - exitStatus: exit status.
//
func (cmdline *ApplicationCommandLine) SetExitStatus(exitStatus int) {
	var _arg0 *C.GApplicationCommandLine // out
	var _arg1 C.int                      // out

	_arg0 = (*C.GApplicationCommandLine)(unsafe.Pointer(coreglib.InternObject(cmdline).Native()))
	_arg1 = C.int(exitStatus)

	C.g_application_command_line_set_exit_status(_arg0, _arg1)
	runtime.KeepAlive(cmdline)
	runtime.KeepAlive(exitStatus)
}

// ApplicationCommandLineClass private data only.
//
// An instance of this type is always passed by reference.
type ApplicationCommandLineClass struct {
	*applicationCommandLineClass
}

// applicationCommandLineClass is the struct that's finalized.
type applicationCommandLineClass struct {
	native *C.GApplicationCommandLineClass
}
