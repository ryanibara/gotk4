// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// gboolean _gotk4_gio2_AsyncResult_virtual_is_tagged(void* fnptr, GAsyncResult* arg0, gpointer arg1) {
//   return ((gboolean (*)(GAsyncResult*, gpointer))(fnptr))(arg0, arg1);
// };
import "C"

// IsTagged checks if res has the given source_tag (generally a function pointer
// indicating the function res was created by).
//
// The function takes the following parameters:
//
//    - sourceTag (optional): application-defined tag.
//
// The function returns the following values:
//
//    - ok: TRUE if res has the indicated source_tag, FALSE if not.
//
func (res *AsyncResult) IsTagged(sourceTag unsafe.Pointer) bool {
	var _arg0 *C.GAsyncResult // out
	var _arg1 C.gpointer      // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(sourceTag))

	_cret = C.g_async_result_is_tagged(_arg0, _arg1)
	runtime.KeepAlive(res)
	runtime.KeepAlive(sourceTag)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LegacyPropagateError: if res is a AsyncResult, this is equivalent to
// g_simple_async_result_propagate_error(). Otherwise it returns FALSE.
//
// This can be used for legacy error handling in async *_finish() wrapper
// functions that traditionally handled AsyncResult error returns themselves
// rather than calling into the virtual method. This should not be used in new
// code; Result errors that are set by virtual methods should also be extracted
// by virtual methods, to enable subclasses to chain up correctly.
func (res *AsyncResult) LegacyPropagateError() error {
	var _arg0 *C.GAsyncResult // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))

	C.g_async_result_legacy_propagate_error(_arg0, &_cerr)
	runtime.KeepAlive(res)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// isTagged checks if res has the given source_tag (generally a function pointer
// indicating the function res was created by).
//
// The function takes the following parameters:
//
//    - sourceTag (optional): application-defined tag.
//
// The function returns the following values:
//
//    - ok: TRUE if res has the indicated source_tag, FALSE if not.
//
func (res *AsyncResult) isTagged(sourceTag unsafe.Pointer) bool {
	gclass := (*C.GAsyncResultIface)(coreglib.PeekParentClass(res))
	fnarg := gclass.is_tagged

	var _arg0 *C.GAsyncResult // out
	var _arg1 C.gpointer      // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(res).Native()))
	_arg1 = (C.gpointer)(unsafe.Pointer(sourceTag))

	_cret = C._gotk4_gio2_AsyncResult_virtual_is_tagged(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(res)
	runtime.KeepAlive(sourceTag)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
