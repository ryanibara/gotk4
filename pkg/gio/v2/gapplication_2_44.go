// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gio/gio.h>
import "C"

// BindBusyProperty marks application as busy (see g_application_mark_busy())
// while property on object is TRUE.
//
// The binding holds a reference to application while it is active, but not to
// object. Instead, the binding is destroyed when object is finalized.
//
// The function takes the following parameters:
//
//    - object: #GObject.
//    - property: name of a boolean property of object.
//
func (application *Application) BindBusyProperty(object *coreglib.Object, property string) {
	var _arg0 *C.GApplication // out
	var _arg1 C.gpointer      // out
	var _arg2 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_application_bind_busy_property(_arg0, _arg1, _arg2)
	runtime.KeepAlive(application)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
}

// IsBusy gets the application's current busy state, as set through
// g_application_mark_busy() or g_application_bind_busy_property().
//
// The function returns the following values:
//
//    - ok: TRUE if application is currently marked as busy.
//
func (application *Application) IsBusy() bool {
	var _arg0 *C.GApplication // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))

	_cret = C.g_application_get_is_busy(_arg0)
	runtime.KeepAlive(application)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnbindBusyProperty destroys a binding between property and the busy state of
// application that was previously created with
// g_application_bind_busy_property().
//
// The function takes the following parameters:
//
//    - object: #GObject.
//    - property: name of a boolean property of object.
//
func (application *Application) UnbindBusyProperty(object *coreglib.Object, property string) {
	var _arg0 *C.GApplication // out
	var _arg1 C.gpointer      // out
	var _arg2 *C.gchar        // out

	_arg0 = (*C.GApplication)(unsafe.Pointer(coreglib.InternObject(application).Native()))
	_arg1 = C.gpointer(unsafe.Pointer(object.Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(property)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_application_unbind_busy_property(_arg0, _arg1, _arg2)
	runtime.KeepAlive(application)
	runtime.KeepAlive(object)
	runtime.KeepAlive(property)
}
