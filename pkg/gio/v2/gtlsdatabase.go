// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern GList* _gotk4_gio2_TlsDatabaseClass_lookup_certificates_issued_by_finish(void*, void*, GError**);
// extern GTlsCertificate* _gotk4_gio2_TlsDatabaseClass_lookup_certificate_for_handle_finish(void*, void*, GError**);
// extern GTlsCertificate* _gotk4_gio2_TlsDatabaseClass_lookup_certificate_issuer_finish(void*, void*, GError**);
// extern gchar* _gotk4_gio2_TlsDatabaseClass_create_certificate_handle(void*, void*);
import "C"

// GTypeTLSDatabase returns the GType for the type TLSDatabase.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeTLSDatabase() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "TlsDatabase").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalTLSDatabase)
	return gtype
}

// TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: purpose used to verify the client
// certificate in a TLS connection. Used by TLS servers.
const TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2"

// TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: purpose used to verify the server
// certificate in a TLS connection. This is the most common purpose in use. Used
// by TLS clients.
const TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1"

// TLSDatabaseOverrider contains methods that are overridable.
type TLSDatabaseOverrider interface {
	// CreateCertificateHandle: create a handle string for the certificate. The
	// database will only be able to create a handle for certificates that
	// originate from the database. In cases where the database cannot create a
	// handle for a certificate, NULL will be returned.
	//
	// This handle should be stable across various instances of the application,
	// and between applications. If a certificate is modified in the database,
	// then it is not guaranteed that this handle will continue to point to it.
	//
	// The function takes the following parameters:
	//
	//    - certificate for which to create a handle.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): newly allocated string containing the handle.
	//
	CreateCertificateHandle(certificate TLSCertificater) string
	// LookupCertificateForHandleFinish: finish an asynchronous lookup of a
	// certificate by its handle. See
	// g_tls_database_lookup_certificate_for_handle() for more information.
	//
	// If the handle is no longer valid, or does not point to a certificate in
	// this database, then NULL will be returned.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - tlsCertificate: newly allocated Certificate object. Use
	//      g_object_unref() to release the certificate.
	//
	LookupCertificateForHandleFinish(result AsyncResulter) (TLSCertificater, error)
	// LookupCertificateIssuerFinish: finish an asynchronous lookup issuer
	// operation. See g_tls_database_lookup_certificate_issuer() for more
	// information.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - tlsCertificate: newly allocated issuer Certificate, or NULL. Use
	//      g_object_unref() to release the certificate.
	//
	LookupCertificateIssuerFinish(result AsyncResulter) (TLSCertificater, error)
	// LookupCertificatesIssuedByFinish: finish an asynchronous lookup of
	// certificates. See g_tls_database_lookup_certificates_issued_by() for more
	// information.
	//
	// The function takes the following parameters:
	//
	//    - result: Result.
	//
	// The function returns the following values:
	//
	//    - list: newly allocated list of Certificate objects. Use
	//      g_object_unref() on each certificate, and g_list_free() on the
	//      release the list.
	//
	LookupCertificatesIssuedByFinish(result AsyncResulter) ([]TLSCertificater, error)
}

// TLSDatabase is used to look up certificates and other information from a
// certificate or key store. It is an abstract base class which TLS library
// specific subtypes override.
//
// A Database may be accessed from multiple threads by the TLS backend. All
// implementations are required to be fully thread-safe.
//
// Most common client applications will not directly interact with Database. It
// is used internally by Connection.
type TLSDatabase struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TLSDatabase)(nil)
)

// TLSDatabaser describes types inherited from class TLSDatabase.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type TLSDatabaser interface {
	coreglib.Objector
	baseTLSDatabase() *TLSDatabase
}

var _ TLSDatabaser = (*TLSDatabase)(nil)

func classInitTLSDatabaser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := girepository.MustFind("Gio", "TlsDatabaseClass")

	if _, ok := goval.(interface {
		CreateCertificateHandle(certificate TLSCertificater) string
	}); ok {
		o := pclass.StructFieldOffset("create_certificate_handle")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_TlsDatabaseClass_create_certificate_handle)
	}

	if _, ok := goval.(interface {
		LookupCertificateForHandleFinish(result AsyncResulter) (TLSCertificater, error)
	}); ok {
		o := pclass.StructFieldOffset("lookup_certificate_for_handle_finish")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_TlsDatabaseClass_lookup_certificate_for_handle_finish)
	}

	if _, ok := goval.(interface {
		LookupCertificateIssuerFinish(result AsyncResulter) (TLSCertificater, error)
	}); ok {
		o := pclass.StructFieldOffset("lookup_certificate_issuer_finish")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_TlsDatabaseClass_lookup_certificate_issuer_finish)
	}

	if _, ok := goval.(interface {
		LookupCertificatesIssuedByFinish(result AsyncResulter) ([]TLSCertificater, error)
	}); ok {
		o := pclass.StructFieldOffset("lookup_certificates_issued_by_finish")
		*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gclassPtr), o)) = unsafe.Pointer(C._gotk4_gio2_TlsDatabaseClass_lookup_certificates_issued_by_finish)
	}
}

//export _gotk4_gio2_TlsDatabaseClass_create_certificate_handle
func _gotk4_gio2_TlsDatabaseClass_create_certificate_handle(arg0 *C.void, arg1 *C.void) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		CreateCertificateHandle(certificate TLSCertificater) string
	})

	var _certificate TLSCertificater // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TLSCertificater)
			return ok
		})
		rv, ok := casted.(TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_certificate = rv
	}

	utf8 := iface.CreateCertificateHandle(_certificate)

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	}

	return cret
}

//export _gotk4_gio2_TlsDatabaseClass_lookup_certificate_for_handle_finish
func _gotk4_gio2_TlsDatabaseClass_lookup_certificate_for_handle_finish(arg0 *C.void, arg1 *C.void, _cerr **C.GError) (cret *C.GTlsCertificate) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		LookupCertificateForHandleFinish(result AsyncResulter) (TLSCertificater, error)
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	tlsCertificate, _goerr := iface.LookupCertificateForHandleFinish(_result)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(tlsCertificate).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(tlsCertificate).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_TlsDatabaseClass_lookup_certificate_issuer_finish
func _gotk4_gio2_TlsDatabaseClass_lookup_certificate_issuer_finish(arg0 *C.void, arg1 *C.void, _cerr **C.GError) (cret *C.GTlsCertificate) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		LookupCertificateIssuerFinish(result AsyncResulter) (TLSCertificater, error)
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	tlsCertificate, _goerr := iface.LookupCertificateIssuerFinish(_result)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(tlsCertificate).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(tlsCertificate).Native()))
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

//export _gotk4_gio2_TlsDatabaseClass_lookup_certificates_issued_by_finish
func _gotk4_gio2_TlsDatabaseClass_lookup_certificates_issued_by_finish(arg0 *C.void, arg1 *C.void, _cerr **C.GError) (cret *C.GList) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		LookupCertificatesIssuedByFinish(result AsyncResulter) ([]TLSCertificater, error)
	})

	var _result AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_result = rv
	}

	list, _goerr := iface.LookupCertificatesIssuedByFinish(_result)

	for i := len(list) - 1; i >= 0; i-- {
		src := list[i]
		var dst *C.void // out
		dst = (*C.void)(unsafe.Pointer(coreglib.InternObject(src).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(src).Native()))
		cret = C.g_list_prepend(cret, C.gpointer(unsafe.Pointer(dst)))
	}
	if _goerr != nil && _cerr != nil {
		*_cerr = (*C.void)(gerror.New(_goerr))
	}

	return cret
}

func wrapTLSDatabase(obj *coreglib.Object) *TLSDatabase {
	return &TLSDatabase{
		Object: obj,
	}
}

func marshalTLSDatabase(p uintptr) (interface{}, error) {
	return wrapTLSDatabase(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *TLSDatabase) baseTLSDatabase() *TLSDatabase {
	return self
}

// BaseTLSDatabase returns the underlying base object.
func BaseTLSDatabase(obj TLSDatabaser) *TLSDatabase {
	return obj.baseTLSDatabase()
}

// CreateCertificateHandle: create a handle string for the certificate. The
// database will only be able to create a handle for certificates that originate
// from the database. In cases where the database cannot create a handle for a
// certificate, NULL will be returned.
//
// This handle should be stable across various instances of the application, and
// between applications. If a certificate is modified in the database, then it
// is not guaranteed that this handle will continue to point to it.
//
// The function takes the following parameters:
//
//    - certificate for which to create a handle.
//
// The function returns the following values:
//
//    - utf8 (optional): newly allocated string containing the handle.
//
func (self *TLSDatabase) CreateCertificateHandle(certificate TLSCertificater) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(certificate).Native()))

	_gret := girepository.MustFind("Gio", "TlsDatabase").InvokeMethod("create_certificate_handle", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(certificate)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// LookupCertificateForHandleFinish: finish an asynchronous lookup of a
// certificate by its handle. See g_tls_database_lookup_certificate_for_handle()
// for more information.
//
// If the handle is no longer valid, or does not point to a certificate in this
// database, then NULL will be returned.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - tlsCertificate: newly allocated Certificate object. Use g_object_unref()
//      to release the certificate.
//
func (self *TLSDatabase) LookupCertificateForHandleFinish(result AsyncResulter) (TLSCertificater, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gio", "TlsDatabase").InvokeMethod("lookup_certificate_for_handle_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _tlsCertificate TLSCertificater // out
	var _goerr error                    // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TLSCertificater)
			return ok
		})
		rv, ok := casted.(TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_tlsCertificate = rv
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _tlsCertificate, _goerr
}

// LookupCertificateIssuerFinish: finish an asynchronous lookup issuer
// operation. See g_tls_database_lookup_certificate_issuer() for more
// information.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - tlsCertificate: newly allocated issuer Certificate, or NULL. Use
//      g_object_unref() to release the certificate.
//
func (self *TLSDatabase) LookupCertificateIssuerFinish(result AsyncResulter) (TLSCertificater, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gio", "TlsDatabase").InvokeMethod("lookup_certificate_issuer_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _tlsCertificate TLSCertificater // out
	var _goerr error                    // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(TLSCertificater)
			return ok
		})
		rv, ok := casted.(TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_tlsCertificate = rv
	}
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _tlsCertificate, _goerr
}

// LookupCertificatesIssuedByFinish: finish an asynchronous lookup of
// certificates. See g_tls_database_lookup_certificates_issued_by() for more
// information.
//
// The function takes the following parameters:
//
//    - result: Result.
//
// The function returns the following values:
//
//    - list: newly allocated list of Certificate objects. Use g_object_unref()
//      on each certificate, and g_list_free() on the release the list.
//
func (self *TLSDatabase) LookupCertificatesIssuedByFinish(result AsyncResulter) ([]TLSCertificater, error) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_gret := girepository.MustFind("Gio", "TlsDatabase").InvokeMethod("lookup_certificates_issued_by_finish", _args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(self)
	runtime.KeepAlive(result)

	var _list []TLSCertificater // out
	var _goerr error            // out

	_list = make([]TLSCertificater, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.void)(v)
		var dst TLSCertificater // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gio.TLSCertificater is nil")
			}

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(TLSCertificater)
				return ok
			})
			rv, ok := casted.(TLSCertificater)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})
	if *(**C.void)(unsafe.Pointer(&_cerr)) != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _list, _goerr
}
