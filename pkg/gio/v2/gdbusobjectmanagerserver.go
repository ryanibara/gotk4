// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeDBusObjectManagerServer returns the GType for the type DBusObjectManagerServer.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeDBusObjectManagerServer() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Gio", "DBusObjectManagerServer").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalDBusObjectManagerServer)
	return gtype
}

// DBusObjectManagerServerOverrider contains methods that are overridable.
type DBusObjectManagerServerOverrider interface {
}

// DBusObjectManagerServer is used to export BusObject instances using the
// standardized org.freedesktop.DBus.ObjectManager
// (http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
// interface. For example, remote D-Bus clients can get all objects and
// properties in a single call. Additionally, any change in the object hierarchy
// is broadcast using signals. This means that D-Bus clients can keep caches up
// to date by only listening to D-Bus signals.
//
// The recommended path to export an object manager at is the path form of the
// well-known name of a D-Bus service, or below. For example, if a D-Bus service
// is available at the well-known name net.example.ExampleService1, the object
// manager should typically be exported at /net/example/ExampleService1, or
// below (to allow for multiple object managers in a service).
//
// It is supported, but not recommended, to export an object manager at the root
// path, /.
//
// See BusObjectManagerClient for the client-side code that is intended to be
// used with BusObjectManagerServer or any D-Bus object implementing the
// org.freedesktop.DBus.ObjectManager interface.
type DBusObjectManagerServer struct {
	_ [0]func() // equal guard
	*coreglib.Object

	DBusObjectManager
}

var (
	_ coreglib.Objector = (*DBusObjectManagerServer)(nil)
)

func classInitDBusObjectManagerServerer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapDBusObjectManagerServer(obj *coreglib.Object) *DBusObjectManagerServer {
	return &DBusObjectManagerServer{
		Object: obj,
		DBusObjectManager: DBusObjectManager{
			Object: obj,
		},
	}
}

func marshalDBusObjectManagerServer(p uintptr) (interface{}, error) {
	return wrapDBusObjectManagerServer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewDBusObjectManagerServer creates a new BusObjectManagerServer object.
//
// The returned server isn't yet exported on any connection. To do so, use
// g_dbus_object_manager_server_set_connection(). Normally you want to export
// all of your objects before doing so to avoid InterfacesAdded
// (http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
// signals being emitted.
//
// The function takes the following parameters:
//
//    - objectPath: object path to export the manager object at.
//
// The function returns the following values:
//
//    - dBusObjectManagerServer object. Free with g_object_unref().
//
func NewDBusObjectManagerServer(objectPath string) *DBusObjectManagerServer {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_args[0]))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_gret := _info.InvokeClassMethod("new_DBusObjectManagerServer", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(objectPath)

	var _dBusObjectManagerServer *DBusObjectManagerServer // out

	_dBusObjectManagerServer = wrapDBusObjectManagerServer(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusObjectManagerServer
}

// Export exports object on manager.
//
// If there is already a BusObject exported at the object path, then the old
// object is removed.
//
// The object path for object must be in the hierarchy rooted by the object path
// for manager.
//
// Note that manager will take a reference on object for as long as it is
// exported.
//
// The function takes the following parameters:
//
//    - object: BusObjectSkeleton.
//
func (manager *DBusObjectManagerServer) Export(object *DBusObjectSkeleton) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_info.InvokeClassMethod("export", _args[:], nil)

	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
}

// ExportUniquely: like g_dbus_object_manager_server_export() but appends a
// string of the form _N (with N being a natural number) to object's object path
// if an object with the given path already exists. As such, the
// BusObjectProxy:g-object-path property of object may be modified.
//
// The function takes the following parameters:
//
//    - object: object.
//
func (manager *DBusObjectManagerServer) ExportUniquely(object *DBusObjectSkeleton) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_info.InvokeClassMethod("export_uniquely", _args[:], nil)

	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)
}

// Connection gets the BusConnection used by manager.
//
// The function returns the following values:
//
//    - dBusConnection object or NULL if manager isn't exported on a connection.
//      The returned object should be freed with g_object_unref().
//
func (manager *DBusObjectManagerServer) Connection() *DBusConnection {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_gret := _info.InvokeClassMethod("get_connection", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(manager)

	var _dBusConnection *DBusConnection // out

	_dBusConnection = wrapDBusConnection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _dBusConnection
}

// IsExported returns whether object is currently exported on manager.
//
// The function takes the following parameters:
//
//    - object: object.
//
// The function returns the following values:
//
//    - ok: TRUE if object is exported.
//
func (manager *DBusObjectManagerServer) IsExported(object *DBusObjectSkeleton) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_gret := _info.InvokeClassMethod("is_exported", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(manager)
	runtime.KeepAlive(object)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetConnection exports all objects managed by manager on connection. If
// connection is NULL, stops exporting objects.
//
// The function takes the following parameters:
//
//    - connection (optional) or NULL.
//
func (manager *DBusObjectManagerServer) SetConnection(connection *DBusConnection) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	if connection != nil {
		*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(connection).Native()))
	}

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_info.InvokeClassMethod("set_connection", _args[:], nil)

	runtime.KeepAlive(manager)
	runtime.KeepAlive(connection)
}

// Unexport: if manager has an object at path, removes the object. Otherwise
// does nothing.
//
// Note that object_path must be in the hierarchy rooted by the object path for
// manager.
//
// The function takes the following parameters:
//
//    - objectPath: object path.
//
// The function returns the following values:
//
//    - ok: TRUE if object at object_path was removed, FALSE otherwise.
//
func (manager *DBusObjectManagerServer) Unexport(objectPath string) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(C.CString(objectPath)))
	defer C.free(unsafe.Pointer(_args[1]))

	_info := girepository.MustFind("Gio", "DBusObjectManagerServer")
	_gret := _info.InvokeClassMethod("unexport", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(manager)
	runtime.KeepAlive(objectPath)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
