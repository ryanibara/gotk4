// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gio/gio.h>
// gboolean _gotk4_gio2_ActionGroup_virtual_query_action(void* fnptr, GActionGroup* arg0, gchar* arg1, gboolean* arg2, GVariantType** arg3, GVariantType** arg4, GVariant** arg5, GVariant** arg6) {
//   return ((gboolean (*)(GActionGroup*, gchar*, gboolean*, GVariantType**, GVariantType**, GVariant**, GVariant**))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
// };
import "C"

// QueryAction queries all aspects of the named action within an action_group.
//
// This function acquires the information available from
// g_action_group_has_action(), g_action_group_get_action_enabled(),
// g_action_group_get_action_parameter_type(),
// g_action_group_get_action_state_type(),
// g_action_group_get_action_state_hint() and g_action_group_get_action_state()
// with a single function call.
//
// This provides two main benefits.
//
// The first is the improvement in efficiency that comes with not having to
// perform repeated lookups of the action in order to discover different things
// about it. The second is that implementing Group can now be done by only
// overriding this one virtual function.
//
// The interface provides a default implementation of this function that calls
// the individual functions, as required, to fetch the information. The
// interface also provides default implementations of those functions that call
// this function. All implementations, therefore, must override either this
// function or all of the others.
//
// If the action exists, TRUE is returned and any of the requested fields (as
// indicated by having a non-NULL reference passed in) are filled. If the action
// doesn't exist, FALSE is returned and the fields may or may not have been
// modified.
//
// The function takes the following parameters:
//
//    - actionName: name of an action in the group.
//
// The function returns the following values:
//
//    - enabled: if the action is presently enabled.
//    - parameterType (optional): parameter type, or NULL if none needed.
//    - stateType (optional): state type, or NULL if stateless.
//    - stateHint (optional): state hint, or NULL if none.
//    - state (optional): current state, or NULL if stateless.
//    - ok: TRUE if the action exists, else FALSE.
//
func (actionGroup *ActionGroup) QueryAction(actionName string) (enabled bool, parameterType, stateType *glib.VariantType, stateHint, state *glib.Variant, ok bool) {
	var _arg0 *C.GActionGroup // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gboolean      // in
	var _arg3 *C.GVariantType // in
	var _arg4 *C.GVariantType // in
	var _arg5 *C.GVariant     // in
	var _arg6 *C.GVariant     // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GActionGroup)(unsafe.Pointer(coreglib.InternObject(actionGroup).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(actionName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_action_group_query_action(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(actionGroup)
	runtime.KeepAlive(actionName)

	var _enabled bool                    // out
	var _parameterType *glib.VariantType // out
	var _stateType *glib.VariantType     // out
	var _stateHint *glib.Variant         // out
	var _state *glib.Variant             // out
	var _ok bool                         // out

	if _arg2 != 0 {
		_enabled = true
	}
	if _arg3 != nil {
		_parameterType = (*glib.VariantType)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_parameterType)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_type_free((*C.GVariantType)(intern.C))
			},
		)
	}
	if _arg4 != nil {
		_stateType = (*glib.VariantType)(gextras.NewStructNative(unsafe.Pointer(_arg4)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_stateType)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_type_free((*C.GVariantType)(intern.C))
			},
		)
	}
	if _arg5 != nil {
		_stateHint = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_arg5)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_stateHint)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}
	if _arg6 != nil {
		_state = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_arg6)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_state)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}
	if _cret != 0 {
		_ok = true
	}

	return _enabled, _parameterType, _stateType, _stateHint, _state, _ok
}

// queryAction queries all aspects of the named action within an action_group.
//
// This function acquires the information available from
// g_action_group_has_action(), g_action_group_get_action_enabled(),
// g_action_group_get_action_parameter_type(),
// g_action_group_get_action_state_type(),
// g_action_group_get_action_state_hint() and g_action_group_get_action_state()
// with a single function call.
//
// This provides two main benefits.
//
// The first is the improvement in efficiency that comes with not having to
// perform repeated lookups of the action in order to discover different things
// about it. The second is that implementing Group can now be done by only
// overriding this one virtual function.
//
// The interface provides a default implementation of this function that calls
// the individual functions, as required, to fetch the information. The
// interface also provides default implementations of those functions that call
// this function. All implementations, therefore, must override either this
// function or all of the others.
//
// If the action exists, TRUE is returned and any of the requested fields (as
// indicated by having a non-NULL reference passed in) are filled. If the action
// doesn't exist, FALSE is returned and the fields may or may not have been
// modified.
//
// The function takes the following parameters:
//
//    - actionName: name of an action in the group.
//
// The function returns the following values:
//
//    - enabled: if the action is presently enabled.
//    - parameterType (optional): parameter type, or NULL if none needed.
//    - stateType (optional): state type, or NULL if stateless.
//    - stateHint (optional): state hint, or NULL if none.
//    - state (optional): current state, or NULL if stateless.
//    - ok: TRUE if the action exists, else FALSE.
//
func (actionGroup *ActionGroup) queryAction(actionName string) (enabled bool, parameterType, stateType *glib.VariantType, stateHint, state *glib.Variant, ok bool) {
	gclass := (*C.GActionGroupInterface)(coreglib.PeekParentClass(actionGroup))
	fnarg := gclass.query_action

	var _arg0 *C.GActionGroup // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gboolean      // in
	var _arg3 *C.GVariantType // in
	var _arg4 *C.GVariantType // in
	var _arg5 *C.GVariant     // in
	var _arg6 *C.GVariant     // in
	var _cret C.gboolean      // in

	_arg0 = (*C.GActionGroup)(unsafe.Pointer(coreglib.InternObject(actionGroup).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(actionName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_gio2_ActionGroup_virtual_query_action(unsafe.Pointer(fnarg), _arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(actionGroup)
	runtime.KeepAlive(actionName)

	var _enabled bool                    // out
	var _parameterType *glib.VariantType // out
	var _stateType *glib.VariantType     // out
	var _stateHint *glib.Variant         // out
	var _state *glib.Variant             // out
	var _ok bool                         // out

	if _arg2 != 0 {
		_enabled = true
	}
	if _arg3 != nil {
		_parameterType = (*glib.VariantType)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_parameterType)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_type_free((*C.GVariantType)(intern.C))
			},
		)
	}
	if _arg4 != nil {
		_stateType = (*glib.VariantType)(gextras.NewStructNative(unsafe.Pointer(_arg4)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_stateType)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_type_free((*C.GVariantType)(intern.C))
			},
		)
	}
	if _arg5 != nil {
		_stateHint = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_arg5)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_stateHint)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}
	if _arg6 != nil {
		_state = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_arg6)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_state)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}
	if _cret != 0 {
		_ok = true
	}

	return _enabled, _parameterType, _stateType, _stateHint, _state, _ok
}
