// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// LogWriterDefaultSetUseStderr: configure whether the built-in log
// functions (g_log_default_handler() for the old-style API, and both
// g_log_writer_default() and g_log_writer_standard_streams() for the structured
// API) will output all log messages to stderr.
//
// By default, log messages of levels G_LOG_LEVEL_INFO and G_LOG_LEVEL_DEBUG
// are sent to stdout, and other log messages are sent to stderr. This is
// problematic for applications that intend to reserve stdout for structured
// output such as JSON or XML.
//
// This function sets global state. It is not thread-aware, and should be called
// at the very start of a program, before creating any other threads or creating
// objects that could create worker threads of their own.
//
// The function takes the following parameters:
//
//   - useStderr: if TRUE, use stderr for log messages that would normally have
//     appeared on stdout.
//
func LogWriterDefaultSetUseStderr(useStderr bool) {
	var _arg1 C.gboolean // out

	if useStderr {
		_arg1 = C.TRUE
	}

	C.g_log_writer_default_set_use_stderr(_arg1)
	runtime.KeepAlive(useStderr)
}

// LogWriterDefaultWouldDrop: check whether g_log_writer_default() and
// g_log_default_handler() would ignore a message with the given domain and
// level.
//
// As with g_log_default_handler(), this function drops debug and informational
// messages unless their log domain (or all) is listed in the space-separated
// G_MESSAGES_DEBUG environment variable.
//
// This can be used when implementing log writers with the same filtering
// behaviour as the default, but a different destination or output format:
//
//    if (!g_log_writer_default_would_drop (G_LOG_LEVEL_DEBUG, G_LOG_DOMAIN))
//      {
//        gchar *result = expensive_computation (my_object);
//
//        g_debug ("my_object result: s", result);
//        g_free (result);
//      }.
//
// The function takes the following parameters:
//
//   - logLevel: log level, either from LevelFlags, or a user-defined level.
//   - logDomain (optional): log domain.
//
// The function returns the following values:
//
//   - ok: TRUE if the log message would be dropped by GLib's default log
//     handlers.
//
func LogWriterDefaultWouldDrop(logLevel LogLevelFlags, logDomain string) bool {
	var _arg1 C.GLogLevelFlags // out
	var _arg2 *C.char          // out
	var _cret C.gboolean       // in

	_arg1 = C.GLogLevelFlags(logLevel)
	if logDomain != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(logDomain)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.g_log_writer_default_would_drop(_arg1, _arg2)
	runtime.KeepAlive(logLevel)
	runtime.KeepAlive(logDomain)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
