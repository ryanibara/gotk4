// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// UTF8ValidateLen validates UTF-8 encoded text.
//
// As with g_utf8_validate(), but max_len must be set, and hence this function
// will always return FALSE if any of the bytes of str are nul.
//
// The function takes the following parameters:
//
//   - str: pointer to character data.
//
// The function returns the following values:
//
//   - end (optional): return location for end of valid data.
//   - ok: TRUE if the text was valid UTF-8.
//
func UTF8ValidateLen(str string) (string, bool) {
	var _arg1 *C.gchar // out
	var _arg2 C.gsize
	var _arg3 *C.gchar   // in
	var _cret C.gboolean // in

	_arg2 = (C.gsize)(len(str))
	_arg1 = (*C.gchar)(C.calloc(C.size_t((len(str) + 1)), C.size_t(C.sizeof_gchar)))
	copy(unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), len(str)), str)
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_utf8_validate_len(_arg1, _arg2, &_arg3)
	runtime.KeepAlive(str)

	var _end string // out
	var _ok bool    // out

	if _arg3 != nil {
		_end = C.GoString((*C.gchar)(unsafe.Pointer(_arg3)))
	}
	if _cret != 0 {
		_ok = true
	}

	return _end, _ok
}
