// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// RegexEscapeNUL escapes the nul characters in string to "\x00". It can be used
// to compile a regex with embedded nul characters.
//
// For completeness, length can be -1 for a nul-terminated string. In this case
// the output string will be of course equal to string.
//
// The function takes the following parameters:
//
//   - str: string to escape.
//   - length of string.
//
// The function returns the following values:
//
//   - utf8: newly-allocated escaped string.
//
func RegexEscapeNUL(str string, length int) string {
	var _arg1 *C.gchar // out
	var _arg2 C.gint   // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(length)

	_cret = C.g_regex_escape_nul(_arg1, _arg2)
	runtime.KeepAlive(str)
	runtime.KeepAlive(length)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
