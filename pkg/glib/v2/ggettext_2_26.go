// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// Dcgettext: this is a variant of g_dgettext() that allows specifying a
// locale category instead of always using LC_MESSAGES. See g_dgettext() for
// more information about how this functions differs from calling dcgettext()
// directly.
//
// The function takes the following parameters:
//
//   - domain (optional): translation domain to use, or NULL to use the domain
//     set with textdomain().
//   - msgid: message to translate.
//   - category: locale category.
//
// The function returns the following values:
//
//   - utf8: translated string for the given locale category.
//
func Dcgettext(domain, msgid string, category int) string {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _arg3 C.gint   // out
	var _cret *C.gchar // in

	if domain != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(domain)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint(category)

	_cret = C.g_dcgettext(_arg1, _arg2, _arg3)
	runtime.KeepAlive(domain)
	runtime.KeepAlive(msgid)
	runtime.KeepAlive(category)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
