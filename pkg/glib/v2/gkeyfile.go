// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// GTypeKeyFile returns the GType for the type KeyFile.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeKeyFile() coreglib.Type {
	gtype := coreglib.Type(C.g_key_file_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalKeyFile)
	return gtype
}

// KEY_FILE_DESKTOP_GROUP: name of the main group of a desktop entry file, as
// defined in the Desktop Entry Specification
// (http://freedesktop.org/Standards/desktop-entry-spec). Consult the
// specification for more details about the meanings of the keys below.
const KEY_FILE_DESKTOP_GROUP = "Desktop Entry"

// KEY_FILE_DESKTOP_KEY_ACTIONS: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a string list giving the available application actions.
const KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions"

// KEY_FILE_DESKTOP_KEY_CATEGORIES: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a list of strings giving the categories in which the desktop entry
// should be shown in a menu.
const KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories"

// KEY_FILE_DESKTOP_KEY_COMMENT: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a localized string giving the tooltip for the desktop entry.
const KEY_FILE_DESKTOP_KEY_COMMENT = "Comment"

// KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: key under KEY_FILE_DESKTOP_GROUP,
// whose value is a boolean set to true if the application is D-Bus activatable.
const KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable"

// KEY_FILE_DESKTOP_KEY_EXEC: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// string giving the command line to execute. It is only valid for desktop
// entries with the Application type.
const KEY_FILE_DESKTOP_KEY_EXEC = "Exec"

// KEY_FILE_DESKTOP_KEY_GENERIC_NAME: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a localized string giving the generic name of the desktop entry.
const KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName"

// KEY_FILE_DESKTOP_KEY_HIDDEN: key under KEY_FILE_DESKTOP_GROUP, whose value is
// a boolean stating whether the desktop entry has been deleted by the user.
const KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden"

// KEY_FILE_DESKTOP_KEY_ICON: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// localized string giving the name of the icon to be displayed for the desktop
// entry.
const KEY_FILE_DESKTOP_KEY_ICON = "Icon"

// KEY_FILE_DESKTOP_KEY_MIME_TYPE: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a list of strings giving the MIME types supported by this desktop entry.
const KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType"

// KEY_FILE_DESKTOP_KEY_NAME: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// localized string giving the specific name of the desktop entry.
const KEY_FILE_DESKTOP_KEY_NAME = "Name"

// KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a list of strings identifying the environments that should not
// display the desktop entry.
const KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn"

// KEY_FILE_DESKTOP_KEY_NO_DISPLAY: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a boolean stating whether the desktop entry should be shown in
// menus.
const KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay"

// KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a list of strings identifying the environments that should display
// the desktop entry.
const KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn"

// KEY_FILE_DESKTOP_KEY_PATH: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// string containing the working directory to run the program in. It is only
// valid for desktop entries with the Application type.
const KEY_FILE_DESKTOP_KEY_PATH = "Path"

// KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: key under KEY_FILE_DESKTOP_GROUP, whose
// value is a boolean stating whether the application supports the Startup
// Notification Protocol Specification
// (http://www.freedesktop.org/Standards/startup-notification-spec).
const KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify"

// KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: key under KEY_FILE_DESKTOP_GROUP,
// whose value is string identifying the WM class or name hint of a window that
// the application will create, which can be used to emulate Startup
// Notification with older applications.
const KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass"

// KEY_FILE_DESKTOP_KEY_TERMINAL: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a boolean stating whether the program should be run in a terminal window.
// It is only valid for desktop entries with the Application type.
const KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal"

// KEY_FILE_DESKTOP_KEY_TRY_EXEC: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a string giving the file name of a binary on disk used to determine if the
// program is actually installed. It is only valid for desktop entries with the
// Application type.
const KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec"

// KEY_FILE_DESKTOP_KEY_TYPE: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// string giving the type of the desktop entry. Usually
// KEY_FILE_DESKTOP_TYPE_APPLICATION, KEY_FILE_DESKTOP_TYPE_LINK, or
// KEY_FILE_DESKTOP_TYPE_DIRECTORY.
const KEY_FILE_DESKTOP_KEY_TYPE = "Type"

// KEY_FILE_DESKTOP_KEY_URL: key under KEY_FILE_DESKTOP_GROUP, whose value is a
// string giving the URL to access. It is only valid for desktop entries with
// the Link type.
const KEY_FILE_DESKTOP_KEY_URL = "URL"

// KEY_FILE_DESKTOP_KEY_VERSION: key under KEY_FILE_DESKTOP_GROUP, whose value
// is a string giving the version of the Desktop Entry Specification used for
// the desktop entry file.
const KEY_FILE_DESKTOP_KEY_VERSION = "Version"

// KEY_FILE_DESKTOP_TYPE_APPLICATION: value of the KEY_FILE_DESKTOP_KEY_TYPE,
// key for desktop entries representing applications.
const KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application"

// KEY_FILE_DESKTOP_TYPE_DIRECTORY: value of the KEY_FILE_DESKTOP_KEY_TYPE, key
// for desktop entries representing directories.
const KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory"

// KEY_FILE_DESKTOP_TYPE_LINK: value of the KEY_FILE_DESKTOP_KEY_TYPE, key for
// desktop entries representing links to documents.
const KEY_FILE_DESKTOP_TYPE_LINK = "Link"

// KeyFileError: error codes returned by key file parsing.
type KeyFileError C.gint

const (
	// KeyFileErrorUnknownEncoding: text being parsed was in an unknown
	// encoding.
	KeyFileErrorUnknownEncoding KeyFileError = iota
	// KeyFileErrorParse: document was ill-formed.
	KeyFileErrorParse
	// KeyFileErrorNotFound: file was not found.
	KeyFileErrorNotFound
	// KeyFileErrorKeyNotFound: requested key was not found.
	KeyFileErrorKeyNotFound
	// KeyFileErrorGroupNotFound: requested group was not found.
	KeyFileErrorGroupNotFound
	// KeyFileErrorInvalidValue: value could not be parsed.
	KeyFileErrorInvalidValue
)

// String returns the name in string for KeyFileError.
func (k KeyFileError) String() string {
	switch k {
	case KeyFileErrorUnknownEncoding:
		return "UnknownEncoding"
	case KeyFileErrorParse:
		return "Parse"
	case KeyFileErrorNotFound:
		return "NotFound"
	case KeyFileErrorKeyNotFound:
		return "KeyNotFound"
	case KeyFileErrorGroupNotFound:
		return "GroupNotFound"
	case KeyFileErrorInvalidValue:
		return "InvalidValue"
	default:
		return fmt.Sprintf("KeyFileError(%d)", k)
	}
}

// KeyFileFlags flags which influence the parsing.
type KeyFileFlags C.guint

const (
	// KeyFileNone: no flags, default behaviour.
	KeyFileNone KeyFileFlags = 0b0
	// KeyFileKeepComments: use this flag if you plan to write the (possibly
	// modified) contents of the key file back to a file; otherwise all comments
	// will be lost when the key file is written back.
	KeyFileKeepComments KeyFileFlags = 0b1
	// KeyFileKeepTranslations: use this flag if you plan to write the (possibly
	// modified) contents of the key file back to a file; otherwise only the
	// translations for the current language will be written back.
	KeyFileKeepTranslations KeyFileFlags = 0b10
)

// String returns the names in string for KeyFileFlags.
func (k KeyFileFlags) String() string {
	if k == 0 {
		return "KeyFileFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(55)

	for k != 0 {
		next := k & (k - 1)
		bit := k - next

		switch bit {
		case KeyFileNone:
			builder.WriteString("None|")
		case KeyFileKeepComments:
			builder.WriteString("KeepComments|")
		case KeyFileKeepTranslations:
			builder.WriteString("KeepTranslations|")
		default:
			builder.WriteString(fmt.Sprintf("KeyFileFlags(0b%b)|", bit))
		}

		k = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if k contains other.
func (k KeyFileFlags) Has(other KeyFileFlags) bool {
	return (k & other) == other
}

// KeyFile struct contains only private data and should not be accessed
// directly.
//
// An instance of this type is always passed by reference.
type KeyFile struct {
	*keyFile
}

// keyFile is the struct that's finalized.
type keyFile struct {
	native *C.GKeyFile
}

func marshalKeyFile(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &KeyFile{&keyFile{(*C.GKeyFile)(b)}}, nil
}

// NewKeyFile constructs a struct KeyFile.
func NewKeyFile() *KeyFile {
	var _cret *C.GKeyFile // in

	_cret = C.g_key_file_new()

	var _keyFile *KeyFile // out

	_keyFile = (*KeyFile)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_keyFile)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _keyFile
}

// Boolean returns the value associated with key under group_name as a boolean.
//
// If key cannot be found then FALSE is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with key
// cannot be interpreted as a boolean then FALSE is returned and error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
func (keyFile *KeyFile) Boolean(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_key_file_get_boolean(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// BooleanList returns the values associated with key under group_name as
// booleans.
//
// If key cannot be found then NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with key
// cannot be interpreted as booleans then NULL is returned and error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - oks: the values associated with the key as a list of booleans, or NULL if
//      the key was not found or could not be parsed. The returned list of
//      booleans should be freed with g_free() when no longer needed.
//
func (keyFile *KeyFile) BooleanList(groupName string, key string) ([]bool, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gboolean // in
	var _arg3 C.gsize     // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_boolean_list(_arg0, _arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _oks []bool  // out
	var _goerr error // out

	defer C.free(unsafe.Pointer(_cret))
	_oks = make([]bool, _arg3)
	copy(_oks, unsafe.Slice((*bool)(unsafe.Pointer(_cret)), _arg3))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _oks, _goerr
}

// Comment retrieves a comment above key from group_name. If key is NULL then
// comment will be read from above group_name. If both key and group_name are
// NULL, then comment will be read from above the first group in the file.
//
// Note that the returned string does not include the '#' comment markers, but
// does include any whitespace after them (on each line). It includes the line
// breaks between lines, but does not include the final line break.
//
// The function takes the following parameters:
//
//    - groupName (optional): group name, or NULL.
//    - key (optional): key.
//
// The function returns the following values:
//
//    - utf8: comment that should be freed with g_free().
//
func (keyFile *KeyFile) Comment(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if key != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.g_key_file_get_comment(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// Double returns the value associated with key under group_name as a double. If
// group_name is NULL, the start_group is used.
//
// If key cannot be found then 0.0 is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with key
// cannot be interpreted as a double then 0.0 is returned and error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - gdouble: value associated with the key as a double, or 0.0 if the key was
//      not found or could not be parsed.
//
func (keyFile *KeyFile) Double(groupName string, key string) (float64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gdouble   // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_double(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _gdouble float64 // out
	var _goerr error     // out

	_gdouble = float64(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gdouble, _goerr
}

// DoubleList returns the values associated with key under group_name as
// doubles.
//
// If key cannot be found then NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with key
// cannot be interpreted as doubles then NULL is returned and error is set to
// KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - gdoubles: the values associated with the key as a list of doubles, or
//      NULL if the key was not found or could not be parsed. The returned list
//      of doubles should be freed with g_free() when no longer needed.
//
func (keyFile *KeyFile) DoubleList(groupName string, key string) ([]float64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gdouble  // in
	var _arg3 C.gsize     // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_double_list(_arg0, _arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _gdoubles []float64 // out
	var _goerr error        // out

	defer C.free(unsafe.Pointer(_cret))
	_gdoubles = make([]float64, _arg3)
	copy(_gdoubles, unsafe.Slice((*float64)(unsafe.Pointer(_cret)), _arg3))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gdoubles, _goerr
}

// Groups returns all groups in the key file loaded with key_file. The array of
// returned groups will be NULL-terminated, so length may optionally be NULL.
//
// The function returns the following values:
//
//    - length (optional): return location for the number of returned groups, or
//      NULL.
//    - utf8s: newly-allocated NULL-terminated array of strings. Use g_strfreev()
//      to free it.
//
func (keyFile *KeyFile) Groups() (uint, []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gsize     // in
	var _cret **C.gchar   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))

	_cret = C.g_key_file_get_groups(_arg0, &_arg1)
	runtime.KeepAlive(keyFile)

	var _length uint    // out
	var _utf8s []string // out

	_length = uint(_arg1)
	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _length, _utf8s
}

// Int64 returns the value associated with key under group_name as a signed
// 64-bit integer. This is similar to g_key_file_get_integer() but can return
// 64-bit results without truncation.
//
// The function takes the following parameters:
//
//    - groupName: non-NULL group name.
//    - key: non-NULL key.
//
// The function returns the following values:
//
//    - gint64: value associated with the key as a signed 64-bit integer, or 0 if
//      the key was not found or could not be parsed.
//
func (keyFile *KeyFile) Int64(groupName string, key string) (int64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gint64    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_int64(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _gint64 int64 // out
	var _goerr error  // out

	_gint64 = int64(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gint64, _goerr
}

// Integer returns the value associated with key under group_name as an integer.
//
// If key cannot be found then 0 is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated with key
// cannot be interpreted as an integer, or is out of range for a #gint, then 0
// is returned and error is set to KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - gint: value associated with the key as an integer, or 0 if the key was
//      not found or could not be parsed.
//
func (keyFile *KeyFile) Integer(groupName string, key string) (int32, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.gint      // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_integer(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _gint int32  // out
	var _goerr error // out

	_gint = int32(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gint, _goerr
}

// IntegerList returns the values associated with key under group_name as
// integers.
//
// If key cannot be found then NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated with key
// cannot be interpreted as integers, or are out of range for #gint, then NULL
// is returned and error is set to KEY_FILE_ERROR_INVALID_VALUE.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - gints: the values associated with the key as a list of integers, or NULL
//      if the key was not found or could not be parsed. The returned list of
//      integers should be freed with g_free() when no longer needed.
//
func (keyFile *KeyFile) IntegerList(groupName string, key string) ([]int32, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gint     // in
	var _arg3 C.gsize     // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_integer_list(_arg0, _arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _gints []int32 // out
	var _goerr error   // out

	defer C.free(unsafe.Pointer(_cret))
	{
		src := unsafe.Slice((*C.gint)(_cret), _arg3)
		_gints = make([]int32, _arg3)
		for i := 0; i < int(_arg3); i++ {
			_gints[i] = int32(src[i])
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gints, _goerr
}

// Keys returns all keys for the group name group_name. The array of returned
// keys will be NULL-terminated, so length may optionally be NULL. In the event
// that the group_name cannot be found, NULL is returned and error is set to
// KEY_FILE_ERROR_GROUP_NOT_FOUND.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//
// The function returns the following values:
//
//    - length (optional): return location for the number of keys returned, or
//      NULL.
//    - utf8s: newly-allocated NULL-terminated array of strings. Use g_strfreev()
//      to free it.
//
func (keyFile *KeyFile) Keys(groupName string) (uint, []string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 C.gsize     // in
	var _cret **C.gchar   // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_key_file_get_keys(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _length uint    // out
	var _utf8s []string // out
	var _goerr error    // out

	_length = uint(_arg2)
	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _utf8s, _goerr
}

// LocaleForKey returns the actual locale which the result of
// g_key_file_get_locale_string() or g_key_file_get_locale_string_list() came
// from.
//
// If calling g_key_file_get_locale_string() or
// g_key_file_get_locale_string_list() with exactly the same key_file,
// group_name, key and locale, the result of those functions will have
// originally been tagged with the locale that is the result of this function.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - locale (optional) identifier or NULL.
//
// The function returns the following values:
//
//    - utf8 (optional): locale from the file, or NULL if the key was not found
//      or the entry in the file was was untranslated.
//
func (keyFile *KeyFile) LocaleForKey(groupName string, key string, locale string) string {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	if locale != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(locale)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	_cret = C.g_key_file_get_locale_for_key(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(locale)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// LocaleString returns the value associated with key under group_name
// translated in the given locale if available. If locale is NULL then the
// current locale is assumed.
//
// If locale is to be non-NULL, or if the current locale will change over the
// lifetime of the File, it must be loaded with G_KEY_FILE_KEEP_TRANSLATIONS in
// order to load strings for all locales.
//
// If key cannot be found then NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated with key cannot be
// interpreted or no suitable translation can be found then the untranslated
// value is returned.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - locale (optional) identifier or NULL.
//
// The function returns the following values:
//
//    - utf8: newly allocated string or NULL if the specified key cannot be
//      found.
//
func (keyFile *KeyFile) LocaleString(groupName string, key string, locale string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	if locale != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(locale)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	_cret = C.g_key_file_get_locale_string(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(locale)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// LocaleStringList returns the values associated with key under group_name
// translated in the given locale if available. If locale is NULL then the
// current locale is assumed.
//
// If locale is to be non-NULL, or if the current locale will change over the
// lifetime of the File, it must be loaded with G_KEY_FILE_KEEP_TRANSLATIONS in
// order to load strings for all locales.
//
// If key cannot be found then NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated with key cannot be
// interpreted or no suitable translations can be found then the untranslated
// values are returned. The returned array is NULL-terminated, so length may
// optionally be NULL.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - locale (optional) identifier or NULL.
//
// The function returns the following values:
//
//    - utf8s: newly allocated NULL-terminated string array or NULL if the key
//      isn't found. The string array should be freed with g_strfreev().
//
func (keyFile *KeyFile) LocaleStringList(groupName string, key string, locale string) ([]string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cret **C.gchar   // in
	var _arg4 C.gsize     // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	if locale != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(locale)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	_cret = C.g_key_file_get_locale_string_list(_arg0, _arg1, _arg2, _arg3, &_arg4, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(locale)

	var _utf8s []string // out
	var _goerr error    // out

	defer C.free(unsafe.Pointer(_cret))
	{
		src := unsafe.Slice((**C.gchar)(_cret), _arg4)
		_utf8s = make([]string, _arg4)
		for i := 0; i < int(_arg4); i++ {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8s, _goerr
}

// StartGroup returns the name of the start group of the file.
//
// The function returns the following values:
//
//    - utf8 (optional): start group of the key file.
//
func (keyFile *KeyFile) StartGroup() string {
	var _arg0 *C.GKeyFile // out
	var _cret *C.gchar    // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))

	_cret = C.g_key_file_get_start_group(_arg0)
	runtime.KeepAlive(keyFile)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// String returns the string value associated with key under group_name. Unlike
// g_key_file_get_value(), this function handles escape sequences like \s.
//
// In the event the key cannot be found, NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the group_name cannot be
// found, NULL is returned and error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - utf8: newly allocated string or NULL if the specified key cannot be
//      found.
//
func (keyFile *KeyFile) String(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_string(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// StringList returns the values associated with key under group_name.
//
// In the event the key cannot be found, NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the group_name cannot be
// found, NULL is returned and error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - utf8s: a NULL-terminated string array or NULL if the specified key cannot
//      be found. The array should be freed with g_strfreev().
//
func (keyFile *KeyFile) StringList(groupName string, key string) ([]string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret **C.gchar   // in
	var _arg3 C.gsize     // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_string_list(_arg0, _arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _utf8s []string // out
	var _goerr error    // out

	defer C.free(unsafe.Pointer(_cret))
	{
		src := unsafe.Slice((**C.gchar)(_cret), _arg3)
		_utf8s = make([]string, _arg3)
		for i := 0; i < int(_arg3); i++ {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8s, _goerr
}

// Uint64 returns the value associated with key under group_name as an unsigned
// 64-bit integer. This is similar to g_key_file_get_integer() but can return
// large positive results without truncation.
//
// The function takes the following parameters:
//
//    - groupName: non-NULL group name.
//    - key: non-NULL key.
//
// The function returns the following values:
//
//    - guint64: value associated with the key as an unsigned 64-bit integer, or
//      0 if the key was not found or could not be parsed.
//
func (keyFile *KeyFile) Uint64(groupName string, key string) (uint64, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret C.guint64   // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_uint64(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _guint64 uint64 // out
	var _goerr error    // out

	_guint64 = uint64(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint64, _goerr
}

// Value returns the raw value associated with key under group_name. Use
// g_key_file_get_string() to retrieve an unescaped UTF-8 string.
//
// In the event the key cannot be found, NULL is returned and error is set to
// KEY_FILE_ERROR_KEY_NOT_FOUND. In the event that the group_name cannot be
// found, NULL is returned and error is set to KEY_FILE_ERROR_GROUP_NOT_FOUND.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//
// The function returns the following values:
//
//    - utf8: newly allocated string or NULL if the specified key cannot be
//      found.
//
func (keyFile *KeyFile) Value(groupName string, key string) (string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.g_key_file_get_value(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// HasGroup looks whether the key file has the group group_name.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//
// The function returns the following values:
//
//    - ok: TRUE if group_name is a part of key_file, FALSE otherwise.
//
func (keyFile *KeyFile) HasGroup(groupName string) bool {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cret C.gboolean  // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_key_file_has_group(_arg0, _arg1)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadFromBytes loads a key file from the data in bytes into an empty File
// structure. If the object cannot be created then error is set to a FileError.
//
// The function takes the following parameters:
//
//    - bytes: #GBytes.
//    - flags from FileFlags.
//
func (keyFile *KeyFile) LoadFromBytes(bytes *Bytes, flags KeyFileFlags) error {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.GBytes       // out
	var _arg2 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))
	_arg2 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_bytes(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(bytes)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LoadFromData loads a key file from memory into an empty File structure. If
// the object cannot be created then error is set to a FileError.
//
// The function takes the following parameters:
//
//    - data: key file loaded in memory.
//    - length of data in bytes (or (gsize)-1 if data is nul-terminated).
//    - flags from FileFlags.
//
func (keyFile *KeyFile) LoadFromData(data string, length uint, flags KeyFileFlags) error {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 C.gsize         // out
	var _arg3 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gsize(length)
	_arg3 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_data(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(data)
	runtime.KeepAlive(length)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// LoadFromDataDirs: this function looks for a key file named file in the paths
// returned from g_get_user_data_dir() and g_get_system_data_dirs(), loads the
// file into key_file and returns the file's full path in full_path. If the file
// could not be loaded then an error is set to either a Error or FileError.
//
// The function takes the following parameters:
//
//    - file: relative path to a filename to open and parse.
//    - flags from FileFlags.
//
// The function returns the following values:
//
//    - fullPath (optional): return location for a string containing the full
//      path of the file, or NULL.
//
func (keyFile *KeyFile) LoadFromDataDirs(file string, flags KeyFileFlags) (string, error) {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 *C.gchar        // in
	var _arg3 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_data_dirs(_arg0, _arg1, &_arg2, _arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(file)
	runtime.KeepAlive(flags)

	var _fullPath string // out
	var _goerr error     // out

	if _arg2 != nil {
		_fullPath = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fullPath, _goerr
}

// LoadFromDirs: this function looks for a key file named file in the paths
// specified in search_dirs, loads the file into key_file and returns the file's
// full path in full_path.
//
// If the file could not be found in any of the search_dirs,
// G_KEY_FILE_ERROR_NOT_FOUND is returned. If the file is found but the OS
// returns an error when opening or reading the file, a G_FILE_ERROR is
// returned. If there is a problem parsing the file, a G_KEY_FILE_ERROR is
// returned.
//
// The function takes the following parameters:
//
//    - file: relative path to a filename to open and parse.
//    - searchDirs: NULL-terminated array of directories to search.
//    - flags from FileFlags.
//
// The function returns the following values:
//
//    - fullPath (optional): return location for a string containing the full
//      path of the file, or NULL.
//
func (keyFile *KeyFile) LoadFromDirs(file string, searchDirs []string, flags KeyFileFlags) (string, error) {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 **C.gchar       // out
	var _arg3 *C.gchar        // in
	var _arg4 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg1))
	{
		_arg2 = (**C.gchar)(C.calloc(C.size_t((len(searchDirs) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg2))
		{
			out := unsafe.Slice(_arg2, len(searchDirs)+1)
			var zero *C.gchar
			out[len(searchDirs)] = zero
			for i := range searchDirs {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(searchDirs[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}
	_arg4 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_dirs(_arg0, _arg1, _arg2, &_arg3, _arg4, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(file)
	runtime.KeepAlive(searchDirs)
	runtime.KeepAlive(flags)

	var _fullPath string // out
	var _goerr error     // out

	if _arg3 != nil {
		_fullPath = C.GoString((*C.gchar)(unsafe.Pointer(_arg3)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _fullPath, _goerr
}

// LoadFromFile loads a key file into an empty File structure.
//
// If the OS returns an error when opening or reading the file, a G_FILE_ERROR
// is returned. If there is a problem parsing the file, a G_KEY_FILE_ERROR is
// returned.
//
// This function will never return a G_KEY_FILE_ERROR_NOT_FOUND error. If the
// file is not found, G_FILE_ERROR_NOENT is returned.
//
// The function takes the following parameters:
//
//    - file: path of a filename to load, in the GLib filename encoding.
//    - flags from FileFlags.
//
func (keyFile *KeyFile) LoadFromFile(file string, flags KeyFileFlags) error {
	var _arg0 *C.GKeyFile     // out
	var _arg1 *C.gchar        // out
	var _arg2 C.GKeyFileFlags // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GKeyFileFlags(flags)

	C.g_key_file_load_from_file(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(file)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveComment removes a comment above key from group_name. If key is NULL
// then comment will be removed above group_name. If both key and group_name are
// NULL, then comment will be removed above the first group in the file.
//
// The function takes the following parameters:
//
//    - groupName (optional): group name, or NULL.
//    - key (optional): key.
//
func (keyFile *KeyFile) RemoveComment(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if key != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.g_key_file_remove_comment(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveGroup removes the specified group, group_name, from the key file.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//
func (keyFile *KeyFile) RemoveGroup(groupName string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_key_file_remove_group(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveKey removes key in group_name from the key file.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key name to remove.
//
func (keyFile *KeyFile) RemoveKey(groupName string, key string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))

	C.g_key_file_remove_key(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SaveToFile writes the contents of key_file to filename using
// g_file_set_contents(). If you need stricter guarantees about durability of
// the written file than are provided by g_file_set_contents(), use
// g_file_set_contents_full() with the return value of g_key_file_to_data().
//
// This function can fail for any of the reasons that g_file_set_contents() may
// fail.
//
// The function takes the following parameters:
//
//    - filename: name of the file to write to.
//
func (keyFile *KeyFile) SaveToFile(filename string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	C.g_key_file_save_to_file(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(filename)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetBoolean associates a new boolean value with key under group_name. If key
// cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: TRUE or FALSE.
//
func (keyFile *KeyFile) SetBoolean(groupName string, key string, value bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gboolean  // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	if value {
		_arg3 = C.TRUE
	}

	C.g_key_file_set_boolean(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetBooleanList associates a list of boolean values with key under group_name.
// If key cannot be found then it is created. If group_name is NULL, the
// start_group is used.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - list: array of boolean values.
//
func (keyFile *KeyFile) SetBooleanList(groupName string, key string, list []bool) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gboolean // out
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = (C.gsize)(len(list))
	if len(list) > 0 {
		_arg3 = (*C.gboolean)(unsafe.Pointer(&list[0]))
	}

	C.g_key_file_set_boolean_list(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(list)
}

// SetComment places a comment above key from group_name.
//
// If key is NULL then comment will be written above group_name. If both key and
// group_name are NULL, then comment will be written above the first group in
// the file.
//
// Note that this function prepends a '#' comment marker to each line of
// comment.
//
// The function takes the following parameters:
//
//    - groupName (optional): group name, or NULL.
//    - key (optional): key.
//    - comment: comment.
//
func (keyFile *KeyFile) SetComment(groupName string, key string, comment string) error {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	if groupName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if key != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(comment)))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_comment(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(comment)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetDouble associates a new double value with key under group_name. If key
// cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: double value.
//
func (keyFile *KeyFile) SetDouble(groupName string, key string, value float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gdouble   // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gdouble(value)

	C.g_key_file_set_double(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetDoubleList associates a list of double values with key under group_name.
// If key cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - list: array of double values.
//
func (keyFile *KeyFile) SetDoubleList(groupName string, key string, list []float64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gdouble  // out
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = (C.gsize)(len(list))
	if len(list) > 0 {
		_arg3 = (*C.gdouble)(unsafe.Pointer(&list[0]))
	}

	C.g_key_file_set_double_list(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(list)
}

// SetInt64 associates a new integer value with key under group_name. If key
// cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: integer value.
//
func (keyFile *KeyFile) SetInt64(groupName string, key string, value int64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint64    // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint64(value)

	C.g_key_file_set_int64(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetInteger associates a new integer value with key under group_name. If key
// cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: integer value.
//
func (keyFile *KeyFile) SetInteger(groupName string, key string, value int32) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.gint      // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.gint(value)

	C.g_key_file_set_integer(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetIntegerList associates a list of integer values with key under group_name.
// If key cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - list: array of integer values.
//
func (keyFile *KeyFile) SetIntegerList(groupName string, key string, list []int32) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gint     // out
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = (C.gsize)(len(list))
	_arg3 = (*C.gint)(C.calloc(C.size_t(len(list)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.gint)(_arg3), len(list))
		for i := range list {
			out[i] = C.gint(list[i])
		}
	}

	C.g_key_file_set_integer_list(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(list)
}

// SetListSeparator sets the character which is used to separate values in
// lists. Typically ';' or ',' are used as separators. The default list
// separator is ';'.
//
// The function takes the following parameters:
//
//    - separator: separator.
//
func (keyFile *KeyFile) SetListSeparator(separator byte) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gchar     // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = C.gchar(separator)

	C.g_key_file_set_list_separator(_arg0, _arg1)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(separator)
}

// SetLocaleString associates a string value for key and locale under
// group_name. If the translation for key cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - locale identifier.
//    - str: string.
//
func (keyFile *KeyFile) SetLocaleString(groupName string, key string, locale string, str string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg4))

	C.g_key_file_set_locale_string(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(locale)
	runtime.KeepAlive(str)
}

// SetLocaleStringList associates a list of string values for key and locale
// under group_name. If the translation for key cannot be found then it is
// created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - locale identifier.
//    - list: NULL-terminated array of locale string values.
//
func (keyFile *KeyFile) SetLocaleStringList(groupName string, key string, locale string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out
	var _arg4 **C.gchar   // out
	var _arg5 C.gsize

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg5 = (C.gsize)(len(list))
	_arg4 = (**C.gchar)(C.calloc(C.size_t(len(list)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice((**C.gchar)(_arg4), len(list))
		for i := range list {
			out[i] = (*C.gchar)(unsafe.Pointer(C.CString(list[i])))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_locale_string_list(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(locale)
	runtime.KeepAlive(list)
}

// SetString associates a new string value with key under group_name. If key
// cannot be found then it is created. If group_name cannot be found then it is
// created. Unlike g_key_file_set_value(), this function handles characters that
// need escaping, such as newlines.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - str: string.
//
func (keyFile *KeyFile) SetString(groupName string, key string, str string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_string(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(str)
}

// SetStringList associates a list of string values for key under group_name. If
// key cannot be found then it is created. If group_name cannot be found then it
// is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - list: array of string values.
//
func (keyFile *KeyFile) SetStringList(groupName string, key string, list []string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 **C.gchar   // out
	var _arg4 C.gsize

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg4 = (C.gsize)(len(list))
	_arg3 = (**C.gchar)(C.calloc(C.size_t(len(list)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((**C.gchar)(_arg3), len(list))
		for i := range list {
			out[i] = (*C.gchar)(unsafe.Pointer(C.CString(list[i])))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	C.g_key_file_set_string_list(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(list)
}

// SetUint64 associates a new integer value with key under group_name. If key
// cannot be found then it is created.
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: integer value.
//
func (keyFile *KeyFile) SetUint64(groupName string, key string, value uint64) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 C.guint64   // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint64(value)

	C.g_key_file_set_uint64(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// SetValue associates a new value with key under group_name.
//
// If key cannot be found then it is created. If group_name cannot be found then
// it is created. To set an UTF-8 string which may contain characters that need
// escaping (such as newlines or spaces), use g_key_file_set_string().
//
// The function takes the following parameters:
//
//    - groupName: group name.
//    - key: key.
//    - value: string.
//
func (keyFile *KeyFile) SetValue(groupName string, key string, value string) {
	var _arg0 *C.GKeyFile // out
	var _arg1 *C.gchar    // out
	var _arg2 *C.gchar    // out
	var _arg3 *C.gchar    // out

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(groupName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg3))

	C.g_key_file_set_value(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(keyFile)
	runtime.KeepAlive(groupName)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// ToData: this function outputs key_file as a string.
//
// Note that this function never reports an error, so it is safe to pass NULL as
// error.
//
// The function returns the following values:
//
//    - length (optional): return location for the length of the returned string,
//      or NULL.
//    - utf8: newly allocated string holding the contents of the File.
//
func (keyFile *KeyFile) ToData() (uint, string, error) {
	var _arg0 *C.GKeyFile // out
	var _arg1 C.gsize     // in
	var _cret *C.gchar    // in
	var _cerr *C.GError   // in

	_arg0 = (*C.GKeyFile)(gextras.StructNative(unsafe.Pointer(keyFile)))

	_cret = C.g_key_file_to_data(_arg0, &_arg1, &_cerr)
	runtime.KeepAlive(keyFile)

	var _length uint // out
	var _utf8 string // out
	var _goerr error // out

	_length = uint(_arg1)
	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _length, _utf8, _goerr
}
