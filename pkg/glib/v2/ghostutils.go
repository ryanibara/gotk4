// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib.h>
import "C"

// HostnameIsASCIIEncoded tests if hostname contains segments with an
// ASCII-compatible encoding of an Internationalized Domain Name. If this
// returns TRUE, you should decode the hostname with g_hostname_to_unicode()
// before displaying it to the user.
//
// Note that a hostname might contain a mix of encoded and unencoded segments,
// and so it is possible for g_hostname_is_non_ascii() and
// g_hostname_is_ascii_encoded() to both return TRUE for a name.
//
// The function takes the following parameters:
//
//    - hostname: hostname.
//
// The function returns the following values:
//
//    - ok: TRUE if hostname contains any ASCII-encoded segments.
//
func HostnameIsASCIIEncoded(hostname string) bool {
	var _arg1 *C.gchar   // out
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_hostname_is_ascii_encoded(_arg1)
	runtime.KeepAlive(hostname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HostnameIsIPAddress tests if hostname is the string form of an IPv4 or IPv6
// address. (Eg, "192.168.0.1".)
//
// Since 2.66, IPv6 addresses with a zone-id are accepted (RFC6874).
//
// The function takes the following parameters:
//
//    - hostname (or IP address in string form).
//
// The function returns the following values:
//
//    - ok: TRUE if hostname is an IP address.
//
func HostnameIsIPAddress(hostname string) bool {
	var _arg1 *C.gchar   // out
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_hostname_is_ip_address(_arg1)
	runtime.KeepAlive(hostname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HostnameIsNonASCII tests if hostname contains Unicode characters. If this
// returns TRUE, you need to encode the hostname with g_hostname_to_ascii()
// before using it in non-IDN-aware contexts.
//
// Note that a hostname might contain a mix of encoded and unencoded segments,
// and so it is possible for g_hostname_is_non_ascii() and
// g_hostname_is_ascii_encoded() to both return TRUE for a name.
//
// The function takes the following parameters:
//
//    - hostname: hostname.
//
// The function returns the following values:
//
//    - ok: TRUE if hostname contains any non-ASCII characters.
//
func HostnameIsNonASCII(hostname string) bool {
	var _arg1 *C.gchar   // out
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_hostname_is_non_ascii(_arg1)
	runtime.KeepAlive(hostname)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HostnameToASCII converts hostname to its canonical ASCII form; an ASCII-only
// string containing no uppercase letters and not ending with a trailing dot.
//
// The function takes the following parameters:
//
//    - hostname: valid UTF-8 or ASCII hostname.
//
// The function returns the following values:
//
//    - utf8 (optional): ASCII hostname, which must be freed, or NULL if hostname
//      is in some way invalid.
//
func HostnameToASCII(hostname string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_hostname_to_ascii(_arg1)
	runtime.KeepAlive(hostname)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// HostnameToUnicode converts hostname to its canonical presentation form; a
// UTF-8 string in Unicode normalization form C, containing no uppercase
// letters, no forbidden characters, and no ASCII-encoded segments, and not
// ending with a trailing dot.
//
// Of course if hostname is not an internationalized hostname, then the
// canonical presentation form will be entirely ASCII.
//
// The function takes the following parameters:
//
//    - hostname: valid UTF-8 or ASCII hostname.
//
// The function returns the following values:
//
//    - utf8 (optional): UTF-8 hostname, which must be freed, or NULL if hostname
//      is in some way invalid.
//
func HostnameToUnicode(hostname string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.g_hostname_to_unicode(_arg1)
	runtime.KeepAlive(hostname)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
