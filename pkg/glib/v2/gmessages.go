// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"fmt"
	"log"
	"os"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
)

// #include <stdlib.h>
// #include <glib.h>
// extern void callbackDelete(gpointer);
// extern void _gotk4_glib2_LogFunc(gchar*, GLogLevelFlags, gchar*, gpointer);
// extern GLogWriterOutput _gotk4_glib2_LogWriterFunc(GLogLevelFlags, GLogField*, gsize, gpointer);
import "C"

// LOG_DOMAIN defines the log domain. See Log Domains (#log-domains).
//
// Libraries should define this so that any messages which they log can be
// differentiated from messages from other libraries and application code. But
// be careful not to define it in any public header files.
//
// Log domains must be unique, and it is recommended that they are the
// application or library name, optionally followed by a hyphen and a sub-domain
// name. For example, bloatpad or bloatpad-io.
//
// If undefined, it defaults to the default NULL (or "") log domain; this is not
// advisable, as it cannot be filtered against using the G_MESSAGES_DEBUG
// environment variable.
//
// For example, GTK+ uses this in its Makefile.am:
//
//    AM_CPPFLAGS = -DG_LOG_DOMAIN=\"Gtk\"
//
// Applications can choose to leave it as the default NULL (or "") domain.
// However, defining the domain offers the same advantages as above.
const LOG_DOMAIN = 0

// LOG_FATAL_MASK: GLib log levels that are considered fatal by default.
//
// This is not used if structured logging is enabled; see [Using Structured
// Logging][using-structured-logging].
const LOG_FATAL_MASK = 5

// LOG_LEVEL_USER_SHIFT: log levels below 1<<G_LOG_LEVEL_USER_SHIFT are used by
// GLib. Higher bits can be used for user-defined log levels.
const LOG_LEVEL_USER_SHIFT = 8

// LogLevelFlags flags specifying the level of log messages.
//
// It is possible to change how GLib treats messages of the various levels using
// g_log_set_handler() and g_log_set_fatal_mask().
type LogLevelFlags C.guint

const (
	// LogFlagRecursion: internal flag.
	LogFlagRecursion LogLevelFlags = 0b1
	// LogFlagFatal: internal flag.
	LogFlagFatal LogLevelFlags = 0b10
	// LogLevelError: log level for errors, see g_error(). This level is also
	// used for messages produced by g_assert().
	LogLevelError LogLevelFlags = 0b100
	// LogLevelCritical: log level for critical warning messages, see
	// g_critical(). This level is also used for messages produced by
	// g_return_if_fail() and g_return_val_if_fail().
	LogLevelCritical LogLevelFlags = 0b1000
	// LogLevelWarning: log level for warnings, see g_warning().
	LogLevelWarning LogLevelFlags = 0b10000
	// LogLevelMessage: log level for messages, see g_message().
	LogLevelMessage LogLevelFlags = 0b100000
	// LogLevelInfo: log level for informational messages, see g_info().
	LogLevelInfo LogLevelFlags = 0b1000000
	// LogLevelDebug: log level for debug messages, see g_debug().
	LogLevelDebug LogLevelFlags = 0b10000000
)

// String returns the names in string for LogLevelFlags.
func (l LogLevelFlags) String() string {
	if l == 0 {
		return "LogLevelFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(119)

	for l != 0 {
		next := l & (l - 1)
		bit := l - next

		switch bit {
		case LogFlagRecursion:
			builder.WriteString("FlagRecursion|")
		case LogFlagFatal:
			builder.WriteString("FlagFatal|")
		case LogLevelError:
			builder.WriteString("LevelError|")
		case LogLevelCritical:
			builder.WriteString("LevelCritical|")
		case LogLevelWarning:
			builder.WriteString("LevelWarning|")
		case LogLevelMessage:
			builder.WriteString("LevelMessage|")
		case LogLevelInfo:
			builder.WriteString("LevelInfo|")
		case LogLevelDebug:
			builder.WriteString("LevelDebug|")
		default:
			builder.WriteString(fmt.Sprintf("LogLevelFlags(0b%b)|", bit))
		}

		l = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if l contains other.
func (l LogLevelFlags) Has(other LogLevelFlags) bool {
	return (l & other) == other
}

// LogFunc specifies the prototype of log handler functions.
//
// The default log handler, g_log_default_handler(), automatically appends a
// new-line character to message when printing it. It is advised that any custom
// log handler functions behave similarly, so that logging calls in user code do
// not need modifying to add a new-line character to the message if the log
// handler is changed.
//
// This is not used if structured logging is enabled; see [Using Structured
// Logging][using-structured-logging].
type LogFunc func(logDomain string, logLevel LogLevelFlags, message string)

// The function takes the following parameters:
//
//    - logDomain
//    - file
//    - line
//    - prettyFunction
//    - expression
//
func AssertWarning(logDomain, file string, line int, prettyFunction, expression string) {
	var _arg1 *C.char // out
	var _arg2 *C.char // out
	var _arg3 C.int   // out
	var _arg4 *C.char // out
	var _arg5 *C.char // out

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(logDomain)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.int(line)
	_arg4 = (*C.char)(unsafe.Pointer(C.CString(prettyFunction)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.char)(unsafe.Pointer(C.CString(expression)))
	defer C.free(unsafe.Pointer(_arg5))

	C.g_assert_warning(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(logDomain)
	runtime.KeepAlive(file)
	runtime.KeepAlive(line)
	runtime.KeepAlive(prettyFunction)
	runtime.KeepAlive(expression)
}

// LogDefaultHandler: default log handler set up by GLib;
// g_log_set_default_handler() allows to install an alternate default log
// handler. This is used if no log handler has been set for the particular log
// domain and log level combination. It outputs the message to stderr or stdout
// and if the log level is fatal it calls G_BREAKPOINT(). It automatically
// prints a new-line character after the message, so one does not need to be
// manually included in message.
//
// The behavior of this log handler can be influenced by a number of environment
// variables:
//
// - G_MESSAGES_PREFIXED: A :-separated list of log levels for which messages
// should be prefixed by the program name and PID of the application.
//
// - G_MESSAGES_DEBUG: A space-separated list of log domains for which debug and
// informational messages are printed. By default these messages are not
// printed.
//
// stderr is used for levels G_LOG_LEVEL_ERROR, G_LOG_LEVEL_CRITICAL,
// G_LOG_LEVEL_WARNING and G_LOG_LEVEL_MESSAGE. stdout is used for the rest,
// unless stderr was requested by g_log_writer_default_set_use_stderr().
//
// This has no effect if structured logging is enabled; see [Using Structured
// Logging][using-structured-logging].
//
// The function takes the following parameters:
//
//    - logDomain (optional): log domain of the message, or NULL for the default
//      "" application domain.
//    - logLevel: level of the message.
//    - message (optional): message.
//    - unusedData (optional): data passed from g_log() which is unused.
//
func LogDefaultHandler(logDomain string, logLevel LogLevelFlags, message string, unusedData unsafe.Pointer) {
	var _arg1 *C.gchar         // out
	var _arg2 C.GLogLevelFlags // out
	var _arg3 *C.gchar         // out
	var _arg4 C.gpointer       // out

	if logDomain != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(logDomain)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = C.GLogLevelFlags(logLevel)
	if message != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(message)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	_arg4 = (C.gpointer)(unsafe.Pointer(unusedData))

	C.g_log_default_handler(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(logDomain)
	runtime.KeepAlive(logLevel)
	runtime.KeepAlive(message)
	runtime.KeepAlive(unusedData)
}

// LogRemoveHandler removes the log handler.
//
// This has no effect if structured logging is enabled; see [Using Structured
// Logging][using-structured-logging].
//
// The function takes the following parameters:
//
//    - logDomain: log domain.
//    - handlerId: id of the handler, which was returned in g_log_set_handler().
//
func LogRemoveHandler(logDomain string, handlerId uint) {
	var _arg1 *C.gchar // out
	var _arg2 C.guint  // out

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(logDomain)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(handlerId)

	C.g_log_remove_handler(_arg1, _arg2)
	runtime.KeepAlive(logDomain)
	runtime.KeepAlive(handlerId)
}

// LogSetAlwaysFatal sets the message levels which are always fatal, in any log
// domain. When a message with any of these levels is logged the program
// terminates. You can only set the levels defined by GLib to be fatal.
// G_LOG_LEVEL_ERROR is always fatal.
//
// You can also make some message levels fatal at runtime by setting the G_DEBUG
// environment variable (see Running GLib Applications (glib-running.html)).
//
// Libraries should not call this function, as it affects all messages logged by
// a process, including those from other libraries.
//
// Structured log messages (using g_log_structured() and
// g_log_structured_array()) are fatal only if the default log writer is used;
// otherwise it is up to the writer function to determine which log messages are
// fatal. See [Using Structured Logging][using-structured-logging].
//
// The function takes the following parameters:
//
//    - fatalMask: mask containing bits set for each level of error which is to
//      be fatal.
//
// The function returns the following values:
//
//    - logLevelFlags: old fatal mask.
//
func LogSetAlwaysFatal(fatalMask LogLevelFlags) LogLevelFlags {
	var _arg1 C.GLogLevelFlags // out
	var _cret C.GLogLevelFlags // in

	_arg1 = C.GLogLevelFlags(fatalMask)

	_cret = C.g_log_set_always_fatal(_arg1)
	runtime.KeepAlive(fatalMask)

	var _logLevelFlags LogLevelFlags // out

	_logLevelFlags = LogLevelFlags(_cret)

	return _logLevelFlags
}

// LogSetFatalMask sets the log levels which are fatal in the given domain.
// G_LOG_LEVEL_ERROR is always fatal.
//
// This has no effect on structured log messages (using g_log_structured() or
// g_log_structured_array()). To change the fatal behaviour for specific log
// messages, programs must install a custom log writer function using
// g_log_set_writer_func(). See [Using Structured
// Logging][using-structured-logging].
//
// This function is mostly intended to be used with G_LOG_LEVEL_CRITICAL. You
// should typically not set G_LOG_LEVEL_WARNING, G_LOG_LEVEL_MESSAGE,
// G_LOG_LEVEL_INFO or G_LOG_LEVEL_DEBUG as fatal except inside of test
// programs.
//
// The function takes the following parameters:
//
//    - logDomain: log domain.
//    - fatalMask: new fatal mask.
//
// The function returns the following values:
//
//    - logLevelFlags: old fatal mask for the log domain.
//
func LogSetFatalMask(logDomain string, fatalMask LogLevelFlags) LogLevelFlags {
	var _arg1 *C.gchar         // out
	var _arg2 C.GLogLevelFlags // out
	var _cret C.GLogLevelFlags // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(logDomain)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GLogLevelFlags(fatalMask)

	_cret = C.g_log_set_fatal_mask(_arg1, _arg2)
	runtime.KeepAlive(logDomain)
	runtime.KeepAlive(fatalMask)

	var _logLevelFlags LogLevelFlags // out

	_logLevelFlags = LogLevelFlags(_cret)

	return _logLevelFlags
}

func init() {
	if os.Getenv("G_DEBUG") == "" {
		LogUseDefaultLogger() // see gotk4's gendata.go
	}
}

// LogSetHandler sets the handler used for GLib logging and returns the
// new handler ID. It is a wrapper around g_log_set_handler and
// g_log_set_handler_full.
//
// To detach a log handler, use LogRemoveHandler.
func LogSetHandler(domain string, level LogLevelFlags, f LogFunc) uint {
	var log_domain *C.gchar
	if domain != "" {
		log_domain = (*C.gchar)(unsafe.Pointer(C.CString(domain)))
		defer C.free(unsafe.Pointer(log_domain))
	}

	data := gbox.Assign(f)

	h := C.g_log_set_handler_full(
		log_domain,
		C.GLogLevelFlags(level),
		C.GLogFunc((*[0]byte)(C._gotk4_glib2_LogFunc)),
		C.gpointer(data),
		C.GDestroyNotify((*[0]byte)(C.callbackDelete)),
	)

	return uint(h)
}

// Value returns the field's value.
func (l *LogField) Value() string {
	if l.native.length == -1 {
		return C.GoString((*C.gchar)(unsafe.Pointer(l.native.value)))
	}
	return C.GoStringN((*C.gchar)(unsafe.Pointer(l.native.value)), C.int(l.native.length))
}

// LogSetWriter sets the log writer to the given callback, which should
// take in a list of pair of key-value strings and return true if the
// log has been successfully written. It is a wrapper around
// g_log_set_writer_func.
//
// Note that this function must ONLY be called ONCE. The GLib
// documentation states that it is an error to call it more than once.
func LogSetWriter(f LogWriterFunc) {
	data := gbox.Assign(f)
	C.g_log_set_writer_func(
		C.GLogWriterFunc((*[0]byte)(C._gotk4_glib2_LogWriterFunc)),
		C.gpointer(data),
		C.GDestroyNotify((*[0]byte)(C.callbackDelete)),
	)
}

// LogUseDefaultLogger calls LogUseLogger with Go's default standard
// logger. It is a convenient function for log.Default().
func LogUseDefaultLogger() { LogUseLogger(log.Default()) }

// LogUseLogger calls LogSetWriter with the given Go's standard logger.
// Note that either this or LogSetWriter must only be called once.
// The method will ignore all fields excet for "MESSAGE"; for more
// sophisticated, structured log writing, use LogSetWriter.
// The output format of the logs printed using this function is not
// guaranteed to not change. Users who rely on the format are better off
// using LogSetWriter.
func LogUseLogger(l *log.Logger) { LogSetWriter(LoggerHandler(l)) }

// LoggerHandler creates a new LogWriterFunc that LogUseLogger uses. For
// more information, see LogUseLogger's documentation.
func LoggerHandler(l *log.Logger) LogWriterFunc {
	// Treat Lshortfile and Llongfile the same, because we don't have
	// the full path in codeFile anyway.
	Lfile := l.Flags()&(log.Lshortfile|log.Llongfile) != 0

	// Support $G_MESSAGES_DEBUG.
	debugDomains := make(map[string]struct{})
	for _, debugDomain := range strings.Fields(os.Getenv("G_MESSAGES_DEBUG")) {
		debugDomains[debugDomain] = struct{}{}
	}

	// Special case: G_MESSAGES_DEBUG=all.
	_, debugAll := debugDomains["all"]

	return func(lvl LogLevelFlags, fields []LogField) LogWriterOutput {
		var message, codeFile, codeLine, codeFunc string
		domain := "GLib (no domain)"

		for _, field := range fields {
			if !Lfile {
				switch field.Key() {
				case "MESSAGE":
					message = field.Value()
				case "GLIB_DOMAIN":
					domain = field.Value()
				}
				// Skip setting code* if we don't have to.
				continue
			}

			switch field.Key() {
			case "MESSAGE":
				message = field.Value()
			case "CODE_FILE":
				codeFile = field.Value()
			case "CODE_LINE":
				codeLine = field.Value()
			case "CODE_FUNC":
				codeFunc = field.Value()
			case "GLIB_DOMAIN":
				domain = field.Value()
			}
		}

		if !debugAll && (lvl&LogLevelDebug != 0) && domain != "" {
			if _, ok := debugDomains[domain]; !ok {
				return LogWriterHandled
			}
		}

		f := l.Printf
		if lvl&LogFlagFatal != 0 {
			f = l.Fatalf
		}

		// Minor issue: this works badly if consts are OR'd together.
		// Probably never.
		level := strings.TrimPrefix(lvl.String(), "Level")

		if !Lfile || (codeFile == "" && codeLine == "") {
			f("%s: %s: %s", level, domain, message)
			return LogWriterHandled
		}

		if codeFunc == "" {
			f("%s: %s: %s:%s: %s", level, domain, codeFile, codeLine, message)
			return LogWriterHandled
		}

		f("%s: %s: %s:%s (%s): %s", level, domain, codeFile, codeLine, codeFunc, message)
		return LogWriterHandled
	}
}
