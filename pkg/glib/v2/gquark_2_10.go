// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// InternStaticString returns a canonical representation for string.
// Interned strings can be compared for equality by comparing the pointers,
// instead of using strcmp(). g_intern_static_string() does not copy the string,
// therefore string must not be freed or modified.
//
// This function must not be used before library constructors have finished
// running. In particular, this means it cannot be used to initialize global
// variables in C++.
//
// The function takes the following parameters:
//
//   - str (optional): static string.
//
// The function returns the following values:
//
//   - utf8: canonical representation for the string.
//
func InternStaticString(str string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	if str != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.g_intern_static_string(_arg1)
	runtime.KeepAlive(str)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// InternString returns a canonical representation for string. Interned strings
// can be compared for equality by comparing the pointers, instead of using
// strcmp().
//
// This function must not be used before library constructors have finished
// running. In particular, this means it cannot be used to initialize global
// variables in C++.
//
// The function takes the following parameters:
//
//   - str (optional): string.
//
// The function returns the following values:
//
//   - utf8: canonical representation for the string.
//
func InternString(str string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	if str != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.g_intern_string(_arg1)
	runtime.KeepAlive(str)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
