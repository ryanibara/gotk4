// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// ComputeHMACForBytes computes the HMAC for a binary data. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string() and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
//
// The function takes the following parameters:
//
//    - digestType to use for the HMAC.
//    - key to use in the HMAC.
//    - data: binary blob to compute the HMAC of.
//
// The function returns the following values:
//
//    - utf8: HMAC of the binary data as a string in hexadecimal. The returned
//      string should be freed with g_free() when done using it.
//
func ComputeHMACForBytes(digestType ChecksumType, key, data *Bytes) string {
	var _arg1 C.GChecksumType // out
	var _arg2 *C.GBytes       // out
	var _arg3 *C.GBytes       // out
	var _cret *C.gchar        // in

	_arg1 = C.GChecksumType(digestType)
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(key)))
	_arg3 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(data)))

	_cret = C.g_compute_hmac_for_bytes(_arg1, _arg2, _arg3)
	runtime.KeepAlive(digestType)
	runtime.KeepAlive(key)
	runtime.KeepAlive(data)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
