// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// IdleAdd is an alias for pkg/core/glib.IdleAdd.
func IdleAdd(f interface{}) SourceHandle {
	return externglib.IdleAdd(f)
}

// IdleAddPriority is an alias for pkg/core/glib.IdleAddPriority.
func IdleAddPriority(p Priority, f interface{}) SourceHandle {
	return externglib.IdleAddPriority(p, f)
}

// TimeoutAdd is an alias for pkg/core/glib.TimeoutAdd.
func TimeoutAdd(ms uint, f interface{}) SourceHandle {
	return externglib.TimeoutAdd(ms, f)
}

// TimeoutAddPriority is an alias for pkg/core/glib.TimeoutAddPriority.
func TimeoutAddPriority(ms uint, p Priority, f interface{}) SourceHandle {
	return externglib.TimeoutAddPriority(ms, p, f)
}

// TimeoutSecondsAdd is an alias for pkg/core/glib.TimeoutSecondsAdd.
func TimeoutSecondsAdd(s uint, f interface{}) SourceHandle {
	return externglib.TimeoutSecondsAdd(s, f)
}

// TimeoutSecondsAddPriority is an alias for pkg/core/glib.TimeoutSecondsAddPriority.
func TimeoutSecondsAddPriority(s uint, p Priority, f interface{}) SourceHandle {
	return externglib.TimeoutSecondsAddPriority(s, p, f)
}

// TypeFromName is an alias for pkg/core/glib.TypeFromName.
func TypeFromName(typeName string) Type {
	return externglib.TypeFromName(typeName)
}

// NewValue is an alias for pkg/core/glib.NewValue.
func NewValue(v interface{}) *Value {
	return externglib.NewValue(v)
}

// SourceRemove is an alias for pkg/core/glib.SourceRemove.
func SourceRemove(src SourceHandle) bool {
	return externglib.SourceRemove(src)
}

// ObjectEq is an alias for pkg/core/glib.ObjectEq.
func ObjectEq(obj1 Objector, obj2 Objector) bool {
	return externglib.ObjectEq(obj1, obj2)
}

// BaseObject is an alias for pkg/core/glib.BaseObject.
func BaseObject(obj Objector) *Object {
	return externglib.BaseObject(obj)
}

// Object is an alias for pkg/core/glib.Object.
type Object = externglib.Object

// Objector is an alias for pkg/core/glib.Objector.
type Objector = externglib.Objector

// Type is an alias for pkg/core/glib.Type.
type Type = externglib.Type

// Value is an alias for pkg/core/glib.Value.
type Value = externglib.Value

// Priority is an alias for pkg/core/glib.Priority.
type Priority = externglib.Priority

// SourceHandle is an alias for pkg/core/glib.SourceHandle.
type SourceHandle = externglib.SourceHandle

// SignalHandle is an alias for pkg/core/glib.SignalHandle.
type SignalHandle = externglib.SignalHandle

// Constant aliases from pkg/core/glib.
const (
	TypeInvalid   = externglib.TypeInvalid
	TypeNone      = externglib.TypeNone
	TypeInterface = externglib.TypeInterface
	TypeChar      = externglib.TypeChar
	TypeUchar     = externglib.TypeUchar
	TypeBoolean   = externglib.TypeBoolean
	TypeInt       = externglib.TypeInt
	TypeUint      = externglib.TypeUint
	TypeLong      = externglib.TypeLong
	TypeUlong     = externglib.TypeUlong
	TypeInt64     = externglib.TypeInt64
	TypeUint64    = externglib.TypeUint64
	TypeEnum      = externglib.TypeEnum
	TypeFlags     = externglib.TypeFlags
	TypeFloat     = externglib.TypeFloat
	TypeDouble    = externglib.TypeDouble
	TypeString    = externglib.TypeString
	TypePointer   = externglib.TypePointer
	TypeBoxed     = externglib.TypeBoxed
	TypeParam     = externglib.TypeParam
	TypeObject    = externglib.TypeObject
	TypeVariant   = externglib.TypeVariant

	PriorityHigh        = externglib.PriorityHigh
	PriorityDefault     = externglib.PriorityDefault
	PriorityHighIdle    = externglib.PriorityHighIdle
	PriorityDefaultIdle = externglib.PriorityDefaultIdle
	PriorityLow         = externglib.PriorityLow
)

// NewVariantValue creates a new GValue from a GVariant. This function
// only exists as a workaround for externglib's cyclical imports. It
// be removed in the future once externglib is merged in.
func NewVariantValue(variant *Variant) *externglib.Value {
	value := externglib.InitValue(externglib.TypeVariant)
	C.g_value_set_variant(
		(*C.GValue)(unsafe.Pointer(value.Native())),
		(*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant))),
	)
	return value
}
