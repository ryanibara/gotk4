// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// GType values.
var (
	GTypeIOCondition = coreglib.Type(C.g_io_condition_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeIOCondition, F: marshalIOCondition},
	})
}

// IOCondition: bitwise combination representing a condition to watch for on an
// event source.
type IOCondition C.guint

const (
	// IOIn: there is data to read.
	IOIn IOCondition = 0b1
	// IOOut: data can be written (without blocking).
	IOOut IOCondition = 0b100
	// IOPri: there is urgent data to read.
	IOPri IOCondition = 0b10
	// IOErr: error condition.
	IOErr IOCondition = 0b1000
	// IOHup: hung up (the connection has been broken, usually for pipes and
	// sockets).
	IOHup IOCondition = 0b10000
	// IONval: invalid request. The file descriptor is not open.
	IONval IOCondition = 0b100000
)

func marshalIOCondition(p uintptr) (interface{}, error) {
	return IOCondition(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for IOCondition.
func (i IOCondition) String() string {
	if i == 0 {
		return "IOCondition(0)"
	}

	var builder strings.Builder
	builder.Grow(35)

	for i != 0 {
		next := i & (i - 1)
		bit := i - next

		switch bit {
		case IOIn:
			builder.WriteString("In|")
		case IOOut:
			builder.WriteString("Out|")
		case IOPri:
			builder.WriteString("Pri|")
		case IOErr:
			builder.WriteString("Err|")
		case IOHup:
			builder.WriteString("Hup|")
		case IONval:
			builder.WriteString("Nval|")
		default:
			builder.WriteString(fmt.Sprintf("IOCondition(0b%b)|", bit))
		}

		i = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if i contains other.
func (i IOCondition) Has(other IOCondition) bool {
	return (i & other) == other
}

// VariantParserGetErrorQuark: same as g_variant_error_quark().
//
// Deprecated: Use g_variant_parse_error_quark() instead.
//
// The function returns the following values:
//
func VariantParserGetErrorQuark() Quark {
	var _cret C.GQuark // in

	_cret = C.g_variant_parser_get_error_quark()

	var _quark Quark // out

	_quark = uint32(_cret)

	return _quark
}
