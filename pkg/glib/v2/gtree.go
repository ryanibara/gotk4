// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// glib.Type values for gtree.go.
var GTypeTree = coreglib.Type(C.g_tree_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeTree, F: marshalTree},
	})
}

// Tree struct is an opaque data structure representing a [balanced binary
// tree][glib-Balanced-Binary-Trees]. It should be accessed only by using the
// following functions.
//
// An instance of this type is always passed by reference.
type Tree struct {
	*tree
}

// tree is the struct that's finalized.
type tree struct {
	native *C.GTree
}

func marshalTree(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Tree{&tree{(*C.GTree)(b)}}, nil
}

// Destroy removes all keys and values from the #GTree and decreases its
// reference count by one. If keys and/or values are dynamically allocated, you
// should either free them first or create the #GTree using g_tree_new_full().
// In the latter case the destroy functions you supplied will be called on all
// keys and values before destroying the #GTree.
func (tree *Tree) Destroy() {
	var _arg0 *C.GTree // out

	_arg0 = (*C.GTree)(gextras.StructNative(unsafe.Pointer(tree)))

	C.g_tree_destroy(_arg0)
	runtime.KeepAlive(tree)
}

// Height gets the height of a #GTree.
//
// If the #GTree contains no nodes, the height is 0. If the #GTree contains only
// one root node the height is 1. If the root node has children the height is 2,
// etc.
//
// The function returns the following values:
//
//    - gint: height of tree.
//
func (tree *Tree) Height() int32 {
	var _arg0 *C.GTree // out
	var _cret C.gint   // in

	_arg0 = (*C.GTree)(gextras.StructNative(unsafe.Pointer(tree)))

	_cret = C.g_tree_height(_arg0)
	runtime.KeepAlive(tree)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}

// Nnodes gets the number of nodes in a #GTree.
//
// The function returns the following values:
//
//    - gint: number of nodes in tree.
//
func (tree *Tree) Nnodes() int32 {
	var _arg0 *C.GTree // out
	var _cret C.gint   // in

	_arg0 = (*C.GTree)(gextras.StructNative(unsafe.Pointer(tree)))

	_cret = C.g_tree_nnodes(_arg0)
	runtime.KeepAlive(tree)

	var _gint int32 // out

	_gint = int32(_cret)

	return _gint
}
