// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// UTF8Strreverse reverses a UTF-8 string. str must be valid UTF-8 encoded text.
// (Use g_utf8_validate() on all text before trying to use UTF-8 utility
// functions with it.)
//
// This function is intended for programmatic uses of reversed strings. It pays
// no attention to decomposed characters, combining marks, byte order marks,
// directional indicators (LRM, LRO, etc) and similar characters which might
// need special handling when reversing a string for display purposes.
//
// Note that unlike g_strreverse(), this function returns newly-allocated
// memory, which should be freed with g_free() when no longer needed.
//
// The function takes the following parameters:
//
//   - str: UTF-8 encoded string.
//   - len: maximum length of str to use, in bytes. If len < 0, then the string
//     is nul-terminated.
//
// The function returns the following values:
//
//   - utf8: newly-allocated string which is the reverse of str.
//
func UTF8Strreverse(str string, len int) string {
	var _arg1 *C.gchar // out
	var _arg2 C.gssize // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(len)

	_cret = C.g_utf8_strreverse(_arg1, _arg2)
	runtime.KeepAlive(str)
	runtime.KeepAlive(len)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
