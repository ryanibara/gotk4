// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"fmt"
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// UserDirectory: these are logical ids for special directories
// which are defined depending on the platform used. You should use
// g_get_user_special_dir() to retrieve the full path associated to the logical
// id.
//
// The Directory enumeration can be extended at later date. Not every platform
// has a directory for every logical id in this enumeration.
type UserDirectory C.gint

const (
	// UserDirectoryDesktop user's Desktop directory.
	UserDirectoryDesktop UserDirectory = iota
	// UserDirectoryDocuments user's Documents directory.
	UserDirectoryDocuments
	// UserDirectoryDownload user's Downloads directory.
	UserDirectoryDownload
	// UserDirectoryMusic user's Music directory.
	UserDirectoryMusic
	// UserDirectoryPictures user's Pictures directory.
	UserDirectoryPictures
	// UserDirectoryPublicShare user's shared directory.
	UserDirectoryPublicShare
	// UserDirectoryTemplates user's Templates directory.
	UserDirectoryTemplates
	// UserDirectoryVideos user's Movies directory.
	UserDirectoryVideos
	// UserNDirectories: number of enum values.
	UserNDirectories
)

// String returns the name in string for UserDirectory.
func (u UserDirectory) String() string {
	switch u {
	case UserDirectoryDesktop:
		return "DirectoryDesktop"
	case UserDirectoryDocuments:
		return "DirectoryDocuments"
	case UserDirectoryDownload:
		return "DirectoryDownload"
	case UserDirectoryMusic:
		return "DirectoryMusic"
	case UserDirectoryPictures:
		return "DirectoryPictures"
	case UserDirectoryPublicShare:
		return "DirectoryPublicShare"
	case UserDirectoryTemplates:
		return "DirectoryTemplates"
	case UserDirectoryVideos:
		return "DirectoryVideos"
	case UserNDirectories:
		return "NDirectories"
	default:
		return fmt.Sprintf("UserDirectory(%d)", u)
	}
}

// GetUserSpecialDir returns the full path of a special directory using its
// logical id.
//
// On UNIX this is done using the XDG special user directories. For
// compatibility with existing practise, G_USER_DIRECTORY_DESKTOP falls back to
// $HOME/Desktop when XDG special user directories have not been set up.
//
// Depending on the platform, the user might be able to change the path of the
// special directory without requiring the session to restart; GLib will not
// reflect any change once the special directories are loaded.
//
// The function takes the following parameters:
//
//   - directory: logical id of special directory.
//
// The function returns the following values:
//
//   - filename: path to the specified special directory, or NULL if the logical
//     id was not found. The returned string is owned by GLib and should not be
//     modified or freed.
//
func GetUserSpecialDir(directory UserDirectory) string {
	var _arg1 C.GUserDirectory // out
	var _cret *C.gchar         // in

	_arg1 = C.GUserDirectory(directory)

	_cret = C.g_get_user_special_dir(_arg1)
	runtime.KeepAlive(directory)

	var _filename string // out

	_filename = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _filename
}
