// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

//export _gotk4_glib2_CompareDataFunc
func _gotk4_glib2_CompareDataFunc(arg1 C.gconstpointer, arg2 C.gconstpointer, arg3 C.gpointer) (cret C.gint) {
	var fn CompareDataFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CompareDataFunc)
	}

	var _a unsafe.Pointer // out
	var _b unsafe.Pointer // out

	_a = (unsafe.Pointer)(unsafe.Pointer(arg1))
	_b = (unsafe.Pointer)(unsafe.Pointer(arg2))

	gint := fn(_a, _b)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_glib2_Func
func _gotk4_glib2_Func(arg1 C.gpointer, arg2 C.gpointer) {
	var fn Func
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(Func)
	}

	var _data unsafe.Pointer // out

	_data = (unsafe.Pointer)(unsafe.Pointer(arg1))

	fn(_data)
}

//export _gotk4_glib2_HFunc
func _gotk4_glib2_HFunc(arg1 C.gpointer, arg2 C.gpointer, arg3 C.gpointer) {
	var fn HFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(HFunc)
	}

	var _key unsafe.Pointer   // out
	var _value unsafe.Pointer // out

	_key = (unsafe.Pointer)(unsafe.Pointer(arg1))
	_value = (unsafe.Pointer)(unsafe.Pointer(arg2))

	fn(_key, _value)
}
