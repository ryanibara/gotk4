// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <glib.h>
import "C"

// IdleAdd is an alias for pkg/core/glib.IdleAdd.
func IdleAdd(f interface{}) SourceHandle {
	return coreglib.IdleAdd(f)
}

// IdleAddPriority is an alias for pkg/core/glib.IdleAddPriority.
func IdleAddPriority(p Priority, f interface{}) SourceHandle {
	return coreglib.IdleAddPriority(p, f)
}

// TimeoutAdd is an alias for pkg/core/glib.TimeoutAdd.
func TimeoutAdd(ms uint, f interface{}) SourceHandle {
	return coreglib.TimeoutAdd(ms, f)
}

// TimeoutAddPriority is an alias for pkg/core/glib.TimeoutAddPriority.
func TimeoutAddPriority(ms uint, p Priority, f interface{}) SourceHandle {
	return coreglib.TimeoutAddPriority(ms, p, f)
}

// TimeoutSecondsAdd is an alias for pkg/core/glib.TimeoutSecondsAdd.
func TimeoutSecondsAdd(s uint, f interface{}) SourceHandle {
	return coreglib.TimeoutSecondsAdd(s, f)
}

// TimeoutSecondsAddPriority is an alias for pkg/core/glib.TimeoutSecondsAddPriority.
func TimeoutSecondsAddPriority(s uint, p Priority, f interface{}) SourceHandle {
	return coreglib.TimeoutSecondsAddPriority(s, p, f)
}

// TypeFromName is an alias for pkg/core/glib.TypeFromName.
func TypeFromName(typeName string) Type {
	return coreglib.TypeFromName(typeName)
}

// NewValue is an alias for pkg/core/glib.NewValue.
func NewValue(v interface{}) *Value {
	return coreglib.NewValue(v)
}

// SourceRemove is an alias for pkg/core/glib.SourceRemove.
func SourceRemove(src SourceHandle) bool {
	return coreglib.SourceRemove(src)
}

// ObjectEq is an alias for pkg/core/glib.ObjectEq.
func ObjectEq(obj1 Objector, obj2 Objector) bool {
	return coreglib.ObjectEq(obj1, obj2)
}

// BaseObject is an alias for pkg/core/glib.BaseObject.
func BaseObject(obj Objector) *Object {
	return coreglib.BaseObject(obj)
}

// Object is an alias for pkg/core/glib.Object.
type Object = coreglib.Object

// Objector is an alias for pkg/core/glib.Objector.
type Objector = coreglib.Objector

// Type is an alias for pkg/core/glib.Type.
type Type = coreglib.Type

// Value is an alias for pkg/core/glib.Value.
type Value = coreglib.Value

// Priority is an alias for pkg/core/glib.Priority.
type Priority = coreglib.Priority

// SourceHandle is an alias for pkg/core/glib.SourceHandle.
type SourceHandle = coreglib.SourceHandle

// SignalHandle is an alias for pkg/core/glib.SignalHandle.
type SignalHandle = coreglib.SignalHandle

// Constant aliases from pkg/core/glib.
const (
	TypeInvalid   = coreglib.TypeInvalid
	TypeNone      = coreglib.TypeNone
	TypeInterface = coreglib.TypeInterface
	TypeChar      = coreglib.TypeChar
	TypeUchar     = coreglib.TypeUchar
	TypeBoolean   = coreglib.TypeBoolean
	TypeInt       = coreglib.TypeInt
	TypeUint      = coreglib.TypeUint
	TypeLong      = coreglib.TypeLong
	TypeUlong     = coreglib.TypeUlong
	TypeInt64     = coreglib.TypeInt64
	TypeUint64    = coreglib.TypeUint64
	TypeEnum      = coreglib.TypeEnum
	TypeFlags     = coreglib.TypeFlags
	TypeFloat     = coreglib.TypeFloat
	TypeDouble    = coreglib.TypeDouble
	TypeString    = coreglib.TypeString
	TypePointer   = coreglib.TypePointer
	TypeBoxed     = coreglib.TypeBoxed
	TypeParam     = coreglib.TypeParam
	TypeObject    = coreglib.TypeObject
	TypeVariant   = coreglib.TypeVariant

	PriorityHigh        = coreglib.PriorityHigh
	PriorityDefault     = coreglib.PriorityDefault
	PriorityHighIdle    = coreglib.PriorityHighIdle
	PriorityDefaultIdle = coreglib.PriorityDefaultIdle
	PriorityLow         = coreglib.PriorityLow
)

// NewVariantValue creates a new GValue from a GVariant. This function
// only exists as a workaround for coreglib's cyclical imports. It
// be removed in the future once coreglib is merged in.
func NewVariantValue(variant *Variant) *coreglib.Value {
	value := coreglib.InitValue(coreglib.TypeVariant)
	C.g_value_set_variant(
		(*C.GValue)(unsafe.Pointer(value.Native())),
		(*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant))),
	)
	return value
}
