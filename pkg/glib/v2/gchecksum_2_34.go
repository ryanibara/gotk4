// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// ComputeChecksumForBytes computes the checksum for a binary data. This is a
// convenience wrapper for g_checksum_new(), g_checksum_get_string() and
// g_checksum_free().
//
// The hexadecimal string returned will be in lower case.
//
// The function takes the following parameters:
//
//    - checksumType: Type.
//    - data: binary blob to compute the digest of.
//
// The function returns the following values:
//
//    - utf8 (optional): digest of the binary data as a string in hexadecimal, or
//      NULL if g_checksum_new() fails for checksum_type. The returned string
//      should be freed with g_free() when done using it.
//
func ComputeChecksumForBytes(checksumType ChecksumType, data *Bytes) string {
	var _arg1 C.GChecksumType // out
	var _arg2 *C.GBytes       // out
	var _cret *C.gchar        // in

	_arg1 = C.GChecksumType(checksumType)
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(data)))

	_cret = C.g_compute_checksum_for_bytes(_arg1, _arg2)
	runtime.KeepAlive(checksumType)
	runtime.KeepAlive(data)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
