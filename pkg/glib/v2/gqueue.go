// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// Queue contains the public fields of a [Queue][glib-Double-ended-Queues].
//
// An instance of this type is always passed by reference.
type Queue struct {
	*queue
}

// queue is the struct that's finalized.
type queue struct {
	native *C.GQueue
}

// Clear removes all the elements in queue. If queue elements contain
// dynamically-allocated memory, they should be freed first.
func (queue *Queue) Clear() {
	var _arg0 *C.GQueue // out

	_arg0 = (*C.GQueue)(gextras.StructNative(unsafe.Pointer(queue)))

	C.g_queue_clear(_arg0)
	runtime.KeepAlive(queue)
}

// Length returns the number of items in queue.
//
// The function returns the following values:
//
//    - guint: number of items in queue.
//
func (queue *Queue) Length() uint {
	var _arg0 *C.GQueue // out
	var _cret C.guint   // in

	_arg0 = (*C.GQueue)(gextras.StructNative(unsafe.Pointer(queue)))

	_cret = C.g_queue_get_length(_arg0)
	runtime.KeepAlive(queue)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Init: statically-allocated #GQueue must be initialized with this function
// before it can be used. Alternatively you can initialize it with QUEUE_INIT.
// It is not necessary to initialize queues created with g_queue_new().
func (queue *Queue) Init() {
	var _arg0 *C.GQueue // out

	_arg0 = (*C.GQueue)(gextras.StructNative(unsafe.Pointer(queue)))

	C.g_queue_init(_arg0)
	runtime.KeepAlive(queue)
}

// IsEmpty returns TRUE if the queue is empty.
//
// The function returns the following values:
//
//    - ok: TRUE if the queue is empty.
//
func (queue *Queue) IsEmpty() bool {
	var _arg0 *C.GQueue  // out
	var _cret C.gboolean // in

	_arg0 = (*C.GQueue)(gextras.StructNative(unsafe.Pointer(queue)))

	_cret = C.g_queue_is_empty(_arg0)
	runtime.KeepAlive(queue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Reverse reverses the order of the items in queue.
func (queue *Queue) Reverse() {
	var _arg0 *C.GQueue // out

	_arg0 = (*C.GQueue)(gextras.StructNative(unsafe.Pointer(queue)))

	C.g_queue_reverse(_arg0)
	runtime.KeepAlive(queue)
}
