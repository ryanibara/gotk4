// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// GetCharset obtains the character set for the [current locale][setlocale];
// you might use this character set as an argument to g_convert(), to convert
// from the current locale's encoding to some other encoding. (Frequently
// g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)
//
// On Windows the character set returned by this function is the so-called
// system default ANSI code-page. That is the character set used by the "narrow"
// versions of C library and Win32 functions that handle file names. It might be
// different from the character set used by the C library's current locale.
//
// On Linux, the character set is found by consulting nl_langinfo() if
// available. If not, the environment variables LC_ALL, LC_CTYPE, LANG and
// CHARSET are queried in order.
//
// The return value is TRUE if the locale's encoding is UTF-8, in that case you
// can perhaps avoid calling g_convert().
//
// The string returned in charset is not allocated, and should not be freed.
//
// The function returns the following values:
//
//   - charset (optional): return location for character set name, or NULL.
//   - ok: TRUE if the returned charset is UTF-8.
//
func GetCharset() (string, bool) {
	var _arg1 *C.char    // in
	var _cret C.gboolean // in

	_cret = C.g_get_charset(&_arg1)

	var _charset string // out
	var _ok bool        // out

	if _arg1 != nil {
		_charset = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	}
	if _cret != 0 {
		_ok = true
	}

	return _charset, _ok
}

// GetCodeset gets the character set for the current locale.
//
// The function returns the following values:
//
//   - utf8: newly allocated string containing the name of the character set.
//     This string must be freed with g_free().
//
func GetCodeset() string {
	var _cret *C.gchar // in

	_cret = C.g_get_codeset()

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
