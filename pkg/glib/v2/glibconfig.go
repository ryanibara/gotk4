// Code generated by girgen. DO NOT EDIT.

package glib

// #cgo pkg-config: glib-2.0 gobject-introspection-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib.h>
import "C"

// DIR_SEPARATOR: directory separator character. This is '/' on UNIX machines
// and '\' under Windows.
const DIR_SEPARATOR = C.DIR_SEPARATOR

// DIR_SEPARATOR_S: directory separator as a string. This is "/" on UNIX
// machines and "\" under Windows.
const DIR_SEPARATOR_S = C.DIR_SEPARATOR_S

// GINT16_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gint16. It is a string literal, but
// doesn't include the percent-sign, such that you can add precision and length
// modifiers between percent-sign and conversion specifier.
//
//    gint16 in;
//    gint32 out;
//    sscanf ("42", "%" G_GINT16_FORMAT, &in)
//    out = in * 1000;
//    g_print ("%" G_GINT32_FORMAT, out);.
const GINT16_FORMAT = C.GINT16_FORMAT

// GINT16_MODIFIER: platform dependent length modifier for conversion specifiers
// for scanning and printing values of type #gint16 or #guint16. It is a string
// literal, but doesn't include the percent-sign, such that you can add
// precision and length modifiers between percent-sign and conversion specifier
// and append a conversion specifier.
//
// The following example prints "0x7b";
//
//    gint16 value = 123;
//    g_print ("%#" G_GINT16_MODIFIER "x", value);.
const GINT16_MODIFIER = C.GINT16_MODIFIER

// GINT32_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gint32. See also GINT16_FORMAT.
const GINT32_FORMAT = C.GINT32_FORMAT

// GINT32_MODIFIER: platform dependent length modifier for conversion specifiers
// for scanning and printing values of type #gint32 or #guint32. It is a string
// literal. See also GINT16_MODIFIER.
const GINT32_MODIFIER = C.GINT32_MODIFIER

// GINT64_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gint64. See also GINT16_FORMAT.
//
// Some platforms do not support scanning and printing 64-bit integers, even
// though the types are supported. On such platforms G_GINT64_FORMAT is not
// defined. Note that scanf() may not support 64-bit integers, even if
// G_GINT64_FORMAT is defined. Due to its weak error handling, scanf() is not
// recommended for parsing anyway; consider using g_ascii_strtoull() instead.
const GINT64_FORMAT = C.GINT64_FORMAT

// GINT64_MODIFIER: platform dependent length modifier for conversion specifiers
// for scanning and printing values of type #gint64 or #guint64. It is a string
// literal.
//
// Some platforms do not support printing 64-bit integers, even though the types
// are supported. On such platforms G_GINT64_MODIFIER is not defined.
const GINT64_MODIFIER = C.GINT64_MODIFIER

// GINTPTR_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gintptr.
const GINTPTR_FORMAT = C.GINTPTR_FORMAT

// GINTPTR_MODIFIER: platform dependent length modifier for conversion
// specifiers for scanning and printing values of type #gintptr or #guintptr. It
// is a string literal.
const GINTPTR_MODIFIER = C.GINTPTR_MODIFIER

// GSIZE_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gsize. See also GINT16_FORMAT.
const GSIZE_FORMAT = C.GSIZE_FORMAT

// GSIZE_MODIFIER: platform dependent length modifier for conversion specifiers
// for scanning and printing values of type #gsize. It is a string literal.
const GSIZE_MODIFIER = C.GSIZE_MODIFIER

// GSSIZE_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #gssize. See also GINT16_FORMAT.
const GSSIZE_FORMAT = C.GSSIZE_FORMAT

// GSSIZE_MODIFIER: platform dependent length modifier for conversion specifiers
// for scanning and printing values of type #gssize. It is a string literal.
const GSSIZE_MODIFIER = C.GSSIZE_MODIFIER

// GUINT16_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #guint16. See also GINT16_FORMAT.
const GUINT16_FORMAT = C.GUINT16_FORMAT

// GUINT32_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #guint32. See also GINT16_FORMAT.
const GUINT32_FORMAT = C.GUINT32_FORMAT

// GUINT64_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #guint64. See also GINT16_FORMAT.
//
// Some platforms do not support scanning and printing 64-bit integers, even
// though the types are supported. On such platforms G_GUINT64_FORMAT is not
// defined. Note that scanf() may not support 64-bit integers, even if
// G_GINT64_FORMAT is defined. Due to its weak error handling, scanf() is not
// recommended for parsing anyway; consider using g_ascii_strtoull() instead.
const GUINT64_FORMAT = C.GUINT64_FORMAT

// GUINTPTR_FORMAT: this is the platform dependent conversion specifier for
// scanning and printing values of type #guintptr.
const GUINTPTR_FORMAT = C.GUINTPTR_FORMAT
const HAVE_GINT64 = C.HAVE_GINT64
const HAVE_GNUC_VARARGS = C.HAVE_GNUC_VARARGS

// HAVE_GNUC_VISIBILITY: defined to 1 if gcc-style visibility handling is
// supported.
const HAVE_GNUC_VISIBILITY = C.HAVE_GNUC_VISIBILITY
const HAVE_GROWING_STACK = C.HAVE_GROWING_STACK
const HAVE_ISO_VARARGS = C.HAVE_ISO_VARARGS

// MAJOR_VERSION: major version number of the GLib library.
//
// Like #glib_major_version, but from the headers used at application compile
// time, rather than from the library linked against at application run time.
const MAJOR_VERSION = C.MAJOR_VERSION

// MICRO_VERSION: micro version number of the GLib library.
//
// Like #gtk_micro_version, but from the headers used at application compile
// time, rather than from the library linked against at application run time.
const MICRO_VERSION = C.MICRO_VERSION

// MINOR_VERSION: minor version number of the GLib library.
//
// Like #gtk_minor_version, but from the headers used at application compile
// time, rather than from the library linked against at application run time.
const MINOR_VERSION = C.MINOR_VERSION
const MODULE_SUFFIX = C.MODULE_SUFFIX

// PID_FORMAT: format specifier that can be used in printf()-style format
// strings when printing a #GPid.
const PID_FORMAT = C.PID_FORMAT

// POLLFD_FORMAT: format specifier that can be used in printf()-style format
// strings when printing the fd member of a FD.
const POLLFD_FORMAT = C.POLLFD_FORMAT

// SEARCHPATH_SEPARATOR: search path separator character. This is ':' on UNIX
// machines and ';' under Windows.
const SEARCHPATH_SEPARATOR = C.SEARCHPATH_SEPARATOR

// SEARCHPATH_SEPARATOR_S: search path separator as a string. This is ":" on
// UNIX machines and ";" under Windows.
const SEARCHPATH_SEPARATOR_S = C.SEARCHPATH_SEPARATOR_S
const SIZEOF_LONG = C.SIZEOF_LONG
const SIZEOF_SIZE_T = C.SIZEOF_SIZE_T
const SIZEOF_SSIZE_T = C.SIZEOF_SSIZE_T
const SIZEOF_VOID_P = C.SIZEOF_VOID_P
const SYSDEF_AF_INET = C.SYSDEF_AF_INET
const SYSDEF_AF_INET6 = C.SYSDEF_AF_INET6
const SYSDEF_AF_UNIX = C.SYSDEF_AF_UNIX
const SYSDEF_MSG_DONTROUTE = C.SYSDEF_MSG_DONTROUTE
const SYSDEF_MSG_OOB = C.SYSDEF_MSG_OOB
const SYSDEF_MSG_PEEK = C.SYSDEF_MSG_PEEK
const VA_COPY_AS_ARRAY = C.VA_COPY_AS_ARRAY
