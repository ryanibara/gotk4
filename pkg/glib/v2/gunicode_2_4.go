// Code generated by girgen. DO NOT EDIT.

package glib

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <glib.h>
import "C"

// UnicharGetMirrorChar: in Unicode, some characters are "mirrored". This
// means that their images are mirrored horizontally in text that is laid out
// from right to left. For instance, "(" would become its mirror image, ")",
// in right-to-left text.
//
// If ch has the Unicode mirrored property and there is another unicode
// character that typically has a glyph that is the mirror image of ch's glyph
// and mirrored_ch is set, it puts that character in the address pointed to by
// mirrored_ch. Otherwise the original character is put.
//
// The function takes the following parameters:
//
//   - ch: unicode character.
//   - mirroredCh: location to store the mirrored character.
//
// The function returns the following values:
//
//   - ok: TRUE if ch has a mirrored character, FALSE otherwise.
//
func UnicharGetMirrorChar(ch uint32, mirroredCh *uint32) bool {
	var _arg1 C.gunichar  // out
	var _arg2 *C.gunichar // out
	var _cret C.gboolean  // in

	_arg1 = C.gunichar(ch)
	_arg2 = (*C.gunichar)(unsafe.Pointer(mirroredCh))

	_cret = C.g_unichar_get_mirror_char(_arg1, _arg2)
	runtime.KeepAlive(ch)
	runtime.KeepAlive(mirroredCh)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
