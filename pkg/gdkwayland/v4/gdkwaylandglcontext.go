// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeWaylandGLContext returns the GType for the type WaylandGLContext.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeWaylandGLContext() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("GdkWayland", "WaylandGLContext").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalWaylandGLContext)
	return gtype
}

// WaylandGLContext: wayland implementation of GdkGLContext.
type WaylandGLContext struct {
	_ [0]func() // equal guard
	gdk.GLContext
}

var (
	_ gdk.GLContexter = (*WaylandGLContext)(nil)
)

func wrapWaylandGLContext(obj *coreglib.Object) *WaylandGLContext {
	return &WaylandGLContext{
		GLContext: gdk.GLContext{
			DrawContext: gdk.DrawContext{
				Object: obj,
			},
		},
	}
}

func marshalWaylandGLContext(p uintptr) (interface{}, error) {
	return wrapWaylandGLContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
