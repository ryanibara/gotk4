// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <gdk/wayland/gdkwayland.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeWaylandGLContext = coreglib.Type(C.gdk_wayland_gl_context_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWaylandGLContext, F: marshalWaylandGLContext},
	})
}

// WaylandGLContextOverrider contains methods that are overridable.
type WaylandGLContextOverrider interface {
}

// WaylandGLContext: wayland implementation of GdkGLContext.
type WaylandGLContext struct {
	_ [0]func() // equal guard
	gdk.GLContext
}

var (
	_ gdk.GLContexter = (*WaylandGLContext)(nil)
)

func classInitWaylandGLContexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapWaylandGLContext(obj *coreglib.Object) *WaylandGLContext {
	return &WaylandGLContext{
		GLContext: gdk.GLContext{
			DrawContext: gdk.DrawContext{
				Object: obj,
			},
		},
	}
}

func marshalWaylandGLContext(p uintptr) (interface{}, error) {
	return wrapWaylandGLContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
