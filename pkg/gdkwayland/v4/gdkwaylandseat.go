// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// GTypeWaylandSeat returns the GType for the type WaylandSeat.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeWaylandSeat() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("GdkWayland", "WaylandSeat").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalWaylandSeat)
	return gtype
}

// WaylandSeat: wayland implementation of GdkSeat.
//
// Beyond the regular gdk.Seat API, the Wayland implementation provides access
// to the Wayland wl_seat object with gdkwayland.WaylandSeat.GetWlSeat().
type WaylandSeat struct {
	_ [0]func() // equal guard
	gdk.Seat
}

var (
	_ gdk.Seater = (*WaylandSeat)(nil)
)

func wrapWaylandSeat(obj *coreglib.Object) *WaylandSeat {
	return &WaylandSeat{
		Seat: gdk.Seat{
			Object: obj,
		},
	}
}

func marshalWaylandSeat(p uintptr) (interface{}, error) {
	return wrapWaylandSeat(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
