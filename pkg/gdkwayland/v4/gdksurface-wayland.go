// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <gdk/wayland/gdkwayland.h>
// #include <glib-object.h>
import "C"

// GTypeWaylandPopup returns the GType for the type WaylandPopup.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeWaylandPopup() coreglib.Type {
	gtype := coreglib.Type(C.gdk_wayland_popup_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalWaylandPopup)
	return gtype
}

// GTypeWaylandSurface returns the GType for the type WaylandSurface.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeWaylandSurface() coreglib.Type {
	gtype := coreglib.Type(C.gdk_wayland_surface_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalWaylandSurface)
	return gtype
}

// GTypeWaylandToplevel returns the GType for the type WaylandToplevel.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeWaylandToplevel() coreglib.Type {
	gtype := coreglib.Type(C.gdk_wayland_toplevel_get_type())
	coreglib.RegisterGValueMarshaler(gtype, marshalWaylandToplevel)
	return gtype
}

// WaylandPopup: wayland implementation of GdkPopup.
type WaylandPopup struct {
	_ [0]func() // equal guard
	WaylandSurface

	*coreglib.Object
	gdk.Popup
	gdk.Surface
}

var (
	_ coreglib.Objector = (*WaylandPopup)(nil)
	_ gdk.Surfacer      = (*WaylandPopup)(nil)
)

func wrapWaylandPopup(obj *coreglib.Object) *WaylandPopup {
	return &WaylandPopup{
		WaylandSurface: WaylandSurface{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
		Object: obj,
		Popup: gdk.Popup{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
		Surface: gdk.Surface{
			Object: obj,
		},
	}
}

func marshalWaylandPopup(p uintptr) (interface{}, error) {
	return wrapWaylandPopup(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WaylandSurface: wayland implementation of GdkSurface.
//
// Beyond the gdk.Surface API, the Wayland implementation offers access to the
// Wayland wl_surface object with gdkwayland.WaylandSurface.GetWlSurface().
type WaylandSurface struct {
	_ [0]func() // equal guard
	gdk.Surface
}

var (
	_ gdk.Surfacer = (*WaylandSurface)(nil)
)

func wrapWaylandSurface(obj *coreglib.Object) *WaylandSurface {
	return &WaylandSurface{
		Surface: gdk.Surface{
			Object: obj,
		},
	}
}

func marshalWaylandSurface(p uintptr) (interface{}, error) {
	return wrapWaylandSurface(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WaylandToplevel: wayland implementation of GdkToplevel.
//
// Beyond the gdk.Toplevel API, the Wayland implementation has API to set up
// cross-process parent-child relationships between surfaces with
// gdkwayland.WaylandToplevel.ExportHandle() and
// gdkwayland.WaylandToplevel.SetTransientForExported().
type WaylandToplevel struct {
	_ [0]func() // equal guard
	WaylandSurface

	*coreglib.Object
	gdk.Surface
	gdk.Toplevel
}

var (
	_ coreglib.Objector = (*WaylandToplevel)(nil)
	_ gdk.Surfacer      = (*WaylandToplevel)(nil)
)

func wrapWaylandToplevel(obj *coreglib.Object) *WaylandToplevel {
	return &WaylandToplevel{
		WaylandSurface: WaylandSurface{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
		Object: obj,
		Surface: gdk.Surface{
			Object: obj,
		},
		Toplevel: gdk.Toplevel{
			Surface: gdk.Surface{
				Object: obj,
			},
		},
	}
}

func marshalWaylandToplevel(p uintptr) (interface{}, error) {
	return wrapWaylandToplevel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
