// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// WaylandToplevelExported: callback that gets called when the handle for a
// surface has been obtained from the Wayland compositor.
//
// This callback is used in gdkwayland.WaylandToplevel.ExportHandle().
//
// The handle can be passed to other processes, for the purpose of marking
// surfaces as transient for out-of-process surfaces.
type WaylandToplevelExported func(toplevel *WaylandToplevel, handle string)

//export _gotk4_gdkwayland4_WaylandToplevelExported
func _gotk4_gdkwayland4_WaylandToplevelExported(arg1 *C.GdkToplevel, arg2 *C.char, arg3 C.gpointer) {
	var fn WaylandToplevelExported
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(WaylandToplevelExported)
	}

	var _toplevel *WaylandToplevel // out
	var _handle string             // out

	_toplevel = wrapWaylandToplevel(coreglib.Take(unsafe.Pointer(arg1)))
	_handle = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	fn(_toplevel, _handle)
}

// SetApplicationID sets the application id on a GdkToplevel.
//
// The function takes the following parameters:
//
//    - applicationId: application id for the toplevel.
//
func (toplevel *WaylandToplevel) SetApplicationID(applicationId string) {
	var args [2]girepository.Argument
	var _arg0 *C.void // out
	var _arg1 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(toplevel).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(applicationId)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**WaylandToplevel)(unsafe.Pointer(&args[1])) = _arg1

	girepository.MustFind("GdkWayland", "WaylandToplevel").InvokeMethod("set_application_id", args[:], nil)

	runtime.KeepAlive(toplevel)
	runtime.KeepAlive(applicationId)
}

// SetTransientForExported marks toplevel as transient for the surface to which
// the given parent_handle_str refers.
//
// Typically, the handle will originate from a
// gdkwayland.WaylandToplevel.ExportHandle() call in another process.
//
// Note that this API depends on an unstable Wayland protocol, and thus may
// require changes in the future.
//
// The function takes the following parameters:
//
//    - parentHandleStr: exported handle for a surface.
//
// The function returns the following values:
//
//    - ok: TRUE if the surface has been marked as transient, FALSE if an error
//      occurred.
//
func (toplevel *WaylandToplevel) SetTransientForExported(parentHandleStr string) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(toplevel).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(parentHandleStr)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**WaylandToplevel)(unsafe.Pointer(&args[1])) = _arg1

	_gret := girepository.MustFind("GdkWayland", "WaylandToplevel").InvokeMethod("set_transient_for_exported", args[:], nil)
	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(toplevel)
	runtime.KeepAlive(parentHandleStr)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnexportHandle destroys the handle that was obtained with
// gdk_wayland_toplevel_export_handle().
//
// It is an error to call this function on a surface that does not have a
// handle.
//
// Note that this API depends on an unstable Wayland protocol, and thus may
// require changes in the future.
func (toplevel *WaylandToplevel) UnexportHandle() {
	var args [1]girepository.Argument
	var _arg0 *C.void // out

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(toplevel).Native()))
	*(**WaylandToplevel)(unsafe.Pointer(&args[0])) = _arg0

	girepository.MustFind("GdkWayland", "WaylandToplevel").InvokeMethod("unexport_handle", args[:], nil)

	runtime.KeepAlive(toplevel)
}
