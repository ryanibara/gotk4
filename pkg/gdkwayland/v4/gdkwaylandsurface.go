// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gtk4-wayland gtk4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <gdk/wayland/gdkwayland.h>
import "C"

// WaylandToplevelExported: callback that gets called when the handle for a
// surface has been obtained from the Wayland compositor.
//
// This callback is used in gdkwayland.WaylandToplevel.ExportHandle().
//
// The handle can be passed to other processes, for the purpose of marking
// surfaces as transient for out-of-process surfaces.
type WaylandToplevelExported func(toplevel *WaylandToplevel, handle string)

//export _gotk4_gdkwayland4_WaylandToplevelExported
func _gotk4_gdkwayland4_WaylandToplevelExported(arg0 *C.GdkToplevel, arg1 *C.char, arg2 C.gpointer) {
	v := gbox.Get(uintptr(arg2))
	if v == nil {
		panic(`callback not found`)
	}

	var toplevel *WaylandToplevel // out
	var handle string             // out

	toplevel = wrapWaylandToplevel(externglib.Take(unsafe.Pointer(arg0)))
	handle = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	fn := v.(WaylandToplevelExported)
	fn(toplevel, handle)
}
