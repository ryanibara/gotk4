// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

// glib.Type values for atknoopobjectfactory.go.
var GTypeNoOpObjectFactory = externglib.Type(C.atk_no_op_object_factory_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeNoOpObjectFactory, F: marshalNoOpObjectFactory},
	})
}

// NoOpObjectFactoryOverrider contains methods that are overridable.
type NoOpObjectFactoryOverrider interface {
	externglib.Objector
}

// WrapNoOpObjectFactoryOverrider wraps the NoOpObjectFactoryOverrider
// interface implementation to access the instance methods.
func WrapNoOpObjectFactoryOverrider(obj NoOpObjectFactoryOverrider) *NoOpObjectFactory {
	return wrapNoOpObjectFactory(externglib.BaseObject(obj))
}

// NoOpObjectFactory: atkObjectFactory which creates an AtkNoOpObject. An
// instance of this is created by an AtkRegistry if no factory type has not been
// specified to create an accessible object of a particular type.
type NoOpObjectFactory struct {
	_ [0]func() // equal guard
	ObjectFactory
}

var (
	_ externglib.Objector = (*NoOpObjectFactory)(nil)
)

func classInitNoOpObjectFactorier(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNoOpObjectFactory(obj *externglib.Object) *NoOpObjectFactory {
	return &NoOpObjectFactory{
		ObjectFactory: ObjectFactory{
			Object: obj,
		},
	}
}

func marshalNoOpObjectFactory(p uintptr) (interface{}, error) {
	return wrapNoOpObjectFactory(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNoOpObjectFactory creates an instance of an ObjectFactory which generates
// primitive (non-functioning) Objects.
//
// The function returns the following values:
//
//    - noOpObjectFactory: instance of an ObjectFactory.
//
func NewNoOpObjectFactory() *NoOpObjectFactory {
	var _cret *C.AtkObjectFactory // in

	_cret = C.atk_no_op_object_factory_new()

	var _noOpObjectFactory *NoOpObjectFactory // out

	_noOpObjectFactory = wrapNoOpObjectFactory(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _noOpObjectFactory
}
