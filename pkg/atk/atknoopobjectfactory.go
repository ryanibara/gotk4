// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"reflect"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNoOpObjectFactory = coreglib.Type(C.atk_no_op_object_factory_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNoOpObjectFactory, F: marshalNoOpObjectFactory},
	})
}

// NoOpObjectFactoryOverrider contains methods that are overridable.
type NoOpObjectFactoryOverrider interface {
}

// NoOpObjectFactory: atkObjectFactory which creates an AtkNoOpObject. An
// instance of this is created by an AtkRegistry if no factory type has not been
// specified to create an accessible object of a particular type.
type NoOpObjectFactory struct {
	_ [0]func() // equal guard
	ObjectFactory
}

var (
	_ coreglib.Objector = (*NoOpObjectFactory)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:     GTypeNoOpObjectFactory,
		GoType:    reflect.TypeOf((*NoOpObjectFactory)(nil)),
		InitClass: initClassNoOpObjectFactory,
	})
}

func initClassNoOpObjectFactory(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ InitNoOpObjectFactory(*NoOpObjectFactoryClass) }); ok {
		klass := (*NoOpObjectFactoryClass)(gextras.NewStructNative(gclass))
		goval.InitNoOpObjectFactory(klass)
	}
}

func wrapNoOpObjectFactory(obj *coreglib.Object) *NoOpObjectFactory {
	return &NoOpObjectFactory{
		ObjectFactory: ObjectFactory{
			Object: obj,
		},
	}
}

func marshalNoOpObjectFactory(p uintptr) (interface{}, error) {
	return wrapNoOpObjectFactory(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNoOpObjectFactory creates an instance of an ObjectFactory which generates
// primitive (non-functioning) Objects.
//
// The function returns the following values:
//
//    - noOpObjectFactory: instance of an ObjectFactory.
//
func NewNoOpObjectFactory() *NoOpObjectFactory {
	var _cret *C.AtkObjectFactory // in

	_cret = C.atk_no_op_object_factory_new()

	var _noOpObjectFactory *NoOpObjectFactory // out

	_noOpObjectFactory = wrapNoOpObjectFactory(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _noOpObjectFactory
}

// NoOpObjectFactoryClass: instance of this type is always passed by reference.
type NoOpObjectFactoryClass struct {
	*noOpObjectFactoryClass
}

// noOpObjectFactoryClass is the struct that's finalized.
type noOpObjectFactoryClass struct {
	native *C.AtkNoOpObjectFactoryClass
}

func (n *NoOpObjectFactoryClass) ParentClass() *ObjectFactoryClass {
	valptr := &n.native.parent_class
	var v *ObjectFactoryClass // out
	v = (*ObjectFactoryClass)(gextras.NewStructNative(unsafe.Pointer((&*valptr))))
	return v
}
