// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeNoOpObjectFactory returns the GType for the type NoOpObjectFactory.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeNoOpObjectFactory() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Atk", "NoOpObjectFactory").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalNoOpObjectFactory)
	return gtype
}

// NoOpObjectFactoryOverrider contains methods that are overridable.
type NoOpObjectFactoryOverrider interface {
}

// NoOpObjectFactory: atkObjectFactory which creates an AtkNoOpObject. An
// instance of this is created by an AtkRegistry if no factory type has not been
// specified to create an accessible object of a particular type.
type NoOpObjectFactory struct {
	_ [0]func() // equal guard
	ObjectFactory
}

var (
	_ coreglib.Objector = (*NoOpObjectFactory)(nil)
)

func classInitNoOpObjectFactorier(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapNoOpObjectFactory(obj *coreglib.Object) *NoOpObjectFactory {
	return &NoOpObjectFactory{
		ObjectFactory: ObjectFactory{
			Object: obj,
		},
	}
}

func marshalNoOpObjectFactory(p uintptr) (interface{}, error) {
	return wrapNoOpObjectFactory(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewNoOpObjectFactory creates an instance of an ObjectFactory which generates
// primitive (non-functioning) Objects.
//
// The function returns the following values:
//
//    - noOpObjectFactory: instance of an ObjectFactory.
//
func NewNoOpObjectFactory() *NoOpObjectFactory {
	_info := girepository.MustFind("Atk", "NoOpObjectFactory")
	_gret := _info.InvokeClassMethod("new_NoOpObjectFactory", nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _noOpObjectFactory *NoOpObjectFactory // out

	_noOpObjectFactory = wrapNoOpObjectFactory(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _noOpObjectFactory
}
