// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gchar* _gotk4_atk1_StreamableContent_virtual_get_uri(void* fnptr, AtkStreamableContent* arg0, gchar* arg1) {
//   return ((gchar* (*)(AtkStreamableContent*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// URI: get a string representing a URI in IETF standard format (see
// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may be
// streamed in the specified mime-type, if one is available. If mime_type is
// NULL, the URI for the default (and possibly only) mime-type is returned.
//
// Note that it is possible for get_uri to return NULL but for get_stream to
// work nonetheless, since not all GIOChannels connect to URIs.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type, or NULL to request a URI for
//      the default mime type.
//
// The function returns the following values:
//
//    - utf8 (optional) returns a string representing a URI, or NULL if no
//      corresponding URI can be constructed.
//
func (streamable *StreamableContent) URI(mimeType string) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_uri(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// urI: get a string representing a URI in IETF standard format (see
// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may be
// streamed in the specified mime-type, if one is available. If mime_type is
// NULL, the URI for the default (and possibly only) mime-type is returned.
//
// Note that it is possible for get_uri to return NULL but for get_stream to
// work nonetheless, since not all GIOChannels connect to URIs.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type, or NULL to request a URI for
//      the default mime type.
//
// The function returns the following values:
//
//    - utf8 (optional) returns a string representing a URI, or NULL if no
//      corresponding URI can be constructed.
//
func (streamable *StreamableContent) urI(mimeType string) string {
	gclass := (*C.AtkStreamableContentIface)(coreglib.PeekParentClass(streamable))
	fnarg := gclass.get_uri

	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_atk1_StreamableContent_virtual_get_uri(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}
