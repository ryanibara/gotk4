// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern AtkObject* _gotk4_atk1_TableIface_get_caption(void*);
// extern AtkObject* _gotk4_atk1_TableIface_get_column_header(void*, gint);
// extern AtkObject* _gotk4_atk1_TableIface_get_row_header(void*, gint);
// extern AtkObject* _gotk4_atk1_TableIface_get_summary(void*);
// extern AtkObject* _gotk4_atk1_TableIface_ref_at(void*, gint, gint);
// extern gboolean _gotk4_atk1_TableIface_add_column_selection(void*, gint);
// extern gboolean _gotk4_atk1_TableIface_add_row_selection(void*, gint);
// extern gboolean _gotk4_atk1_TableIface_is_column_selected(void*, gint);
// extern gboolean _gotk4_atk1_TableIface_is_row_selected(void*, gint);
// extern gboolean _gotk4_atk1_TableIface_is_selected(void*, gint, gint);
// extern gboolean _gotk4_atk1_TableIface_remove_column_selection(void*, gint);
// extern gboolean _gotk4_atk1_TableIface_remove_row_selection(void*, gint);
// extern gchar* _gotk4_atk1_TableIface_get_column_description(void*, gint);
// extern gchar* _gotk4_atk1_TableIface_get_row_description(void*, gint);
// extern gint _gotk4_atk1_TableIface_get_column_at_index(void*, gint);
// extern gint _gotk4_atk1_TableIface_get_column_extent_at(void*, gint, gint);
// extern gint _gotk4_atk1_TableIface_get_index_at(void*, gint, gint);
// extern gint _gotk4_atk1_TableIface_get_n_columns(void*);
// extern gint _gotk4_atk1_TableIface_get_n_rows(void*);
// extern gint _gotk4_atk1_TableIface_get_row_at_index(void*, gint);
// extern gint _gotk4_atk1_TableIface_get_row_extent_at(void*, gint, gint);
// extern gint _gotk4_atk1_TableIface_get_selected_columns(void*, void**);
// extern gint _gotk4_atk1_TableIface_get_selected_rows(void*, void**);
// extern void _gotk4_atk1_TableIface_column_deleted(void*, gint, gint);
// extern void _gotk4_atk1_TableIface_column_inserted(void*, gint, gint);
// extern void _gotk4_atk1_TableIface_column_reordered(void*);
// extern void _gotk4_atk1_TableIface_model_changed(void*);
// extern void _gotk4_atk1_TableIface_row_deleted(void*, gint, gint);
// extern void _gotk4_atk1_TableIface_row_inserted(void*, gint, gint);
// extern void _gotk4_atk1_TableIface_row_reordered(void*);
// extern void _gotk4_atk1_TableIface_set_caption(void*, void*);
// extern void _gotk4_atk1_TableIface_set_column_description(void*, gint, void*);
// extern void _gotk4_atk1_TableIface_set_column_header(void*, gint, void*);
// extern void _gotk4_atk1_TableIface_set_row_description(void*, gint, void*);
// extern void _gotk4_atk1_TableIface_set_row_header(void*, gint, void*);
// extern void _gotk4_atk1_TableIface_set_summary(void*, void*);
// extern void _gotk4_atk1_Table_ConnectColumnDeleted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectColumnInserted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectColumnReordered(gpointer, guintptr);
// extern void _gotk4_atk1_Table_ConnectModelChanged(gpointer, guintptr);
// extern void _gotk4_atk1_Table_ConnectRowDeleted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectRowInserted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectRowReordered(gpointer, guintptr);
import "C"

// glib.Type values for atktable.go.
var GTypeTable = coreglib.Type(C.atk_table_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeTable, F: marshalTable},
	})
}

// TableOverrider contains methods that are overridable.
type TableOverrider interface {
	// AddColumnSelection adds the specified column to the selection.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column was successfully added to the
	//      selection, or 0 if value does not implement this interface.
	//
	AddColumnSelection(column int32) bool
	// AddRowSelection adds the specified row to the selection.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if row was successfully added to selection,
	//      or 0 if value does not implement this interface.
	//
	AddRowSelection(row int32) bool
	// The function takes the following parameters:
	//
	//    - column
	//    - numDeleted
	//
	ColumnDeleted(column, numDeleted int32)
	// The function takes the following parameters:
	//
	//    - column
	//    - numInserted
	//
	ColumnInserted(column, numInserted int32)
	ColumnReordered()
	// Caption gets the caption for the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the table caption, or NULL
	//      if value does not implement this interface.
	//
	Caption() *ObjectClass
	// ColumnAtIndex gets a #gint representing the column at the specified
	// index_.
	//
	// Deprecated: Since 2.12.
	//
	// The function takes the following parameters:
	//
	//    - index_ representing an index in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the column at the specified index, or -1 if the
	//      table does not implement this method.
	//
	ColumnAtIndex(index_ int32) int32
	// ColumnDescription gets the description text of the specified column in
	// the table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - utf8: gchar* representing the column description, or NULL if value
	//      does not implement this interface.
	//
	ColumnDescription(column int32) string
	// ColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified row and column in the table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the column extent at specified position, or 0 if
	//      value does not implement this interface.
	//
	ColumnExtentAt(row, column int32) int32
	// ColumnHeader gets the column header of a specified column in an
	// accessible table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the specified column
	//      header, or NULL if value does not implement this interface.
	//
	ColumnHeader(column int32) *ObjectClass
	// IndexAt gets a #gint representing the index at the specified row and
	// column.
	//
	// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the
	// accessible that represents the cell at (row, column).
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the index at specified position. The value -1 is
	//      returned if the object at row,column is not a child of table or table
	//      does not implement this interface.
	//
	IndexAt(row, column int32) int32
	// NColumns gets the number of columns in the table.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of columns, or 0 if value does not
	//      implement this interface.
	//
	NColumns() int32
	// NRows gets the number of rows in the table.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of rows, or 0 if value does not
	//      implement this interface.
	//
	NRows() int32
	// RowAtIndex gets a #gint representing the row at the specified index_.
	//
	// Deprecated: since 2.12.
	//
	// The function takes the following parameters:
	//
	//    - index_ representing an index in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the row at the specified index, or -1 if the table
	//      does not implement this method.
	//
	RowAtIndex(index_ int32) int32
	// RowDescription gets the description text of the specified row in the
	// table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): gchar* representing the row description, or NULL if
	//      value does not implement this interface.
	//
	RowDescription(row int32) string
	// RowExtentAt gets the number of rows occupied by the accessible object at
	// a specified row and column in the table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the row extent at specified position, or 0 if value
	//      does not implement this interface.
	//
	RowExtentAt(row, column int32) int32
	// RowHeader gets the row header of a specified row in an accessible table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the specified row header,
	//      or NULL if value does not implement this interface.
	//
	RowHeader(row int32) *ObjectClass
	// SelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers. This array should be freed
	// by the caller.
	//
	// The function takes the following parameters:
	//
	//    - selected that is to contain the selected columns numbers.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of selected columns, or 0 if value does
	//      not implement this interface.
	//
	SelectedColumns(selected **int32) int32
	// SelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers. This array should be freed by
	// the caller.
	//
	// The function takes the following parameters:
	//
	//    - selected that is to contain the selected row numbers.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of selected rows, or zero if value does
	//      not implement this interface.
	//
	SelectedRows(selected **int32) int32
	// Summary gets the summary description of the table.
	//
	// The function returns the following values:
	//
	//    - object: atkObject* representing a summary description of the table,
	//      or zero if value does not implement this interface.
	//
	Summary() *ObjectClass
	// IsColumnSelected gets a boolean value indicating whether the specified
	// column is selected.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column is selected, or 0 if value
	//      does not implement this interface.
	//
	IsColumnSelected(column int32) bool
	// IsRowSelected gets a boolean value indicating whether the specified row
	// is selected.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the row is selected, or 0 if value does
	//      not implement this interface.
	//
	IsRowSelected(row int32) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified row and column is selected.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the cell is selected, or 0 if value does
	//      not implement this interface.
	//
	IsSelected(row, column int32) bool
	ModelChanged()
	// RefAt: get a reference to the table cell at row, column. This cell should
	// implement the interface TableCell.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - object representing the referred to accessible.
	//
	RefAt(row, column int32) *ObjectClass
	// RemoveColumnSelection adds the specified column to the selection.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column was successfully removed from
	//      the selection, or 0 if value does not implement this interface.
	//
	RemoveColumnSelection(column int32) bool
	// RemoveRowSelection removes the specified row from the selection.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the row was successfully removed from
	//      the selection, or 0 if value does not implement this interface.
	//
	RemoveRowSelection(row int32) bool
	// The function takes the following parameters:
	//
	//    - row
	//    - numDeleted
	//
	RowDeleted(row, numDeleted int32)
	// The function takes the following parameters:
	//
	//    - row
	//    - numInserted
	//
	RowInserted(row, numInserted int32)
	RowReordered()
	// SetCaption sets the caption for the table.
	//
	// The function takes the following parameters:
	//
	//    - caption representing the caption to set for table.
	//
	SetCaption(caption *ObjectClass)
	// SetColumnDescription sets the description text for the specified column
	// of the table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//    - description representing the description text to set for the
	//      specified column of the table.
	//
	SetColumnDescription(column int32, description string)
	// SetColumnHeader sets the specified column header to header.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//    - header: Table.
	//
	SetColumnHeader(column int32, header *ObjectClass)
	// SetRowDescription sets the description text for the specified row of
	// table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - description representing the description text to set for the
	//      specified row of table.
	//
	SetRowDescription(row int32, description string)
	// SetRowHeader sets the specified row header to header.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - header: Table.
	//
	SetRowHeader(row int32, header *ObjectClass)
	// SetSummary sets the summary description of the table.
	//
	// The function takes the following parameters:
	//
	//    - accessible representing the summary description to set for table.
	//
	SetSummary(accessible *ObjectClass)
}

// Table should be implemented by components which present elements ordered via
// rows and columns. It may also be used to present tree-structured information
// if the nodes of the trees can be said to contain multiple "columns".
// Individual elements of an Table are typically referred to as "cells". Those
// cells should implement the interface TableCell, but #Atk doesn't require them
// to be direct children of the current Table. They can be grand-children,
// grand-grand-children etc. Table provides the API needed to get a individual
// cell based on the row and column numbers.
//
// Children of Table are frequently "lightweight" objects, that is, they may not
// have backing widgets in the host UI toolkit. They are therefore often
// transient.
//
// Since tables are often very complex, Table includes provision for offering
// simplified summary information, as well as row and column headers and
// captions. Headers and captions are Objects which may implement other
// interfaces (Text, Image, etc.) as appropriate. Table summaries may themselves
// be (simplified) Tables, etc.
//
// Note for implementors: in the past, Table required that all the cells should
// be direct children of Table, and provided some index based methods to request
// the cells. The practice showed that that forcing made Table implementation
// complex, and hard to expose other kind of children, like rows or captions.
// Right now, index-based methods are deprecated.
//
// Table wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Table struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Table)(nil)
)

// Tabler describes Table's interface methods.
type Tabler interface {
	coreglib.Objector

	// AddColumnSelection adds the specified column to the selection.
	AddColumnSelection(column int32) bool
	// AddRowSelection adds the specified row to the selection.
	AddRowSelection(row int32) bool
	// Caption gets the caption for the table.
	Caption() *ObjectClass
	// ColumnAtIndex gets a #gint representing the column at the specified
	// index_.
	ColumnAtIndex(index_ int32) int32
	// ColumnDescription gets the description text of the specified column in
	// the table.
	ColumnDescription(column int32) string
	// ColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified row and column in the table.
	ColumnExtentAt(row, column int32) int32
	// ColumnHeader gets the column header of a specified column in an
	// accessible table.
	ColumnHeader(column int32) *ObjectClass
	// IndexAt gets a #gint representing the index at the specified row and
	// column.
	IndexAt(row, column int32) int32
	// NColumns gets the number of columns in the table.
	NColumns() int32
	// NRows gets the number of rows in the table.
	NRows() int32
	// RowAtIndex gets a #gint representing the row at the specified index_.
	RowAtIndex(index_ int32) int32
	// RowDescription gets the description text of the specified row in the
	// table.
	RowDescription(row int32) string
	// RowExtentAt gets the number of rows occupied by the accessible object at
	// a specified row and column in the table.
	RowExtentAt(row, column int32) int32
	// RowHeader gets the row header of a specified row in an accessible table.
	RowHeader(row int32) *ObjectClass
	// SelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers.
	SelectedColumns(selected **int32) int32
	// SelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers.
	SelectedRows(selected **int32) int32
	// Summary gets the summary description of the table.
	Summary() *ObjectClass
	// IsColumnSelected gets a boolean value indicating whether the specified
	// column is selected.
	IsColumnSelected(column int32) bool
	// IsRowSelected gets a boolean value indicating whether the specified row
	// is selected.
	IsRowSelected(row int32) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified row and column is selected.
	IsSelected(row, column int32) bool
	// RefAt: get a reference to the table cell at row, column.
	RefAt(row, column int32) *ObjectClass
	// RemoveColumnSelection adds the specified column to the selection.
	RemoveColumnSelection(column int32) bool
	// RemoveRowSelection removes the specified row from the selection.
	RemoveRowSelection(row int32) bool
	// SetCaption sets the caption for the table.
	SetCaption(caption *ObjectClass)
	// SetColumnDescription sets the description text for the specified column
	// of the table.
	SetColumnDescription(column int32, description string)
	// SetColumnHeader sets the specified column header to header.
	SetColumnHeader(column int32, header *ObjectClass)
	// SetRowDescription sets the description text for the specified row of
	// table.
	SetRowDescription(row int32, description string)
	// SetRowHeader sets the specified row header to header.
	SetRowHeader(row int32, header *ObjectClass)
	// SetSummary sets the summary description of the table.
	SetSummary(accessible *ObjectClass)

	// Column-deleted: "column-deleted" signal is emitted by an object which
	// implements the AtkTable interface when a column is deleted.
	ConnectColumnDeleted(func(arg1, arg2 int32)) coreglib.SignalHandle
	// Column-inserted: "column-inserted" signal is emitted by an object which
	// implements the AtkTable interface when a column is inserted.
	ConnectColumnInserted(func(arg1, arg2 int32)) coreglib.SignalHandle
	// Column-reordered: "column-reordered" signal is emitted by an object which
	// implements the AtkTable interface when the columns are reordered.
	ConnectColumnReordered(func()) coreglib.SignalHandle
	// Model-changed: "model-changed" signal is emitted by an object which
	// implements the AtkTable interface when the model displayed by the table
	// changes.
	ConnectModelChanged(func()) coreglib.SignalHandle
	// Row-deleted: "row-deleted" signal is emitted by an object which
	// implements the AtkTable interface when a row is deleted.
	ConnectRowDeleted(func(arg1, arg2 int32)) coreglib.SignalHandle
	// Row-inserted: "row-inserted" signal is emitted by an object which
	// implements the AtkTable interface when a row is inserted.
	ConnectRowInserted(func(arg1, arg2 int32)) coreglib.SignalHandle
	// Row-reordered: "row-reordered" signal is emitted by an object which
	// implements the AtkTable interface when the rows are reordered.
	ConnectRowReordered(func()) coreglib.SignalHandle
}

var _ Tabler = (*Table)(nil)

func ifaceInitTabler(gifacePtr, data C.gpointer) {
	iface := (*C.AtkTableIface)(unsafe.Pointer(gifacePtr))
	iface.add_column_selection = (*[0]byte)(C._gotk4_atk1_TableIface_add_column_selection)
	iface.add_row_selection = (*[0]byte)(C._gotk4_atk1_TableIface_add_row_selection)
	iface.column_deleted = (*[0]byte)(C._gotk4_atk1_TableIface_column_deleted)
	iface.column_inserted = (*[0]byte)(C._gotk4_atk1_TableIface_column_inserted)
	iface.column_reordered = (*[0]byte)(C._gotk4_atk1_TableIface_column_reordered)
	iface.get_caption = (*[0]byte)(C._gotk4_atk1_TableIface_get_caption)
	iface.get_column_at_index = (*[0]byte)(C._gotk4_atk1_TableIface_get_column_at_index)
	iface.get_column_description = (*[0]byte)(C._gotk4_atk1_TableIface_get_column_description)
	iface.get_column_extent_at = (*[0]byte)(C._gotk4_atk1_TableIface_get_column_extent_at)
	iface.get_column_header = (*[0]byte)(C._gotk4_atk1_TableIface_get_column_header)
	iface.get_index_at = (*[0]byte)(C._gotk4_atk1_TableIface_get_index_at)
	iface.get_n_columns = (*[0]byte)(C._gotk4_atk1_TableIface_get_n_columns)
	iface.get_n_rows = (*[0]byte)(C._gotk4_atk1_TableIface_get_n_rows)
	iface.get_row_at_index = (*[0]byte)(C._gotk4_atk1_TableIface_get_row_at_index)
	iface.get_row_description = (*[0]byte)(C._gotk4_atk1_TableIface_get_row_description)
	iface.get_row_extent_at = (*[0]byte)(C._gotk4_atk1_TableIface_get_row_extent_at)
	iface.get_row_header = (*[0]byte)(C._gotk4_atk1_TableIface_get_row_header)
	iface.get_selected_columns = (*[0]byte)(C._gotk4_atk1_TableIface_get_selected_columns)
	iface.get_selected_rows = (*[0]byte)(C._gotk4_atk1_TableIface_get_selected_rows)
	iface.get_summary = (*[0]byte)(C._gotk4_atk1_TableIface_get_summary)
	iface.is_column_selected = (*[0]byte)(C._gotk4_atk1_TableIface_is_column_selected)
	iface.is_row_selected = (*[0]byte)(C._gotk4_atk1_TableIface_is_row_selected)
	iface.is_selected = (*[0]byte)(C._gotk4_atk1_TableIface_is_selected)
	iface.model_changed = (*[0]byte)(C._gotk4_atk1_TableIface_model_changed)
	iface.ref_at = (*[0]byte)(C._gotk4_atk1_TableIface_ref_at)
	iface.remove_column_selection = (*[0]byte)(C._gotk4_atk1_TableIface_remove_column_selection)
	iface.remove_row_selection = (*[0]byte)(C._gotk4_atk1_TableIface_remove_row_selection)
	iface.row_deleted = (*[0]byte)(C._gotk4_atk1_TableIface_row_deleted)
	iface.row_inserted = (*[0]byte)(C._gotk4_atk1_TableIface_row_inserted)
	iface.row_reordered = (*[0]byte)(C._gotk4_atk1_TableIface_row_reordered)
	iface.set_caption = (*[0]byte)(C._gotk4_atk1_TableIface_set_caption)
	iface.set_column_description = (*[0]byte)(C._gotk4_atk1_TableIface_set_column_description)
	iface.set_column_header = (*[0]byte)(C._gotk4_atk1_TableIface_set_column_header)
	iface.set_row_description = (*[0]byte)(C._gotk4_atk1_TableIface_set_row_description)
	iface.set_row_header = (*[0]byte)(C._gotk4_atk1_TableIface_set_row_header)
	iface.set_summary = (*[0]byte)(C._gotk4_atk1_TableIface_set_summary)
}

//export _gotk4_atk1_TableIface_add_column_selection
func _gotk4_atk1_TableIface_add_column_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32 // out

	_column = int32(arg1)

	ok := iface.AddColumnSelection(_column)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_add_row_selection
func _gotk4_atk1_TableIface_add_row_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32 // out

	_row = int32(arg1)

	ok := iface.AddRowSelection(_row)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_column_deleted
func _gotk4_atk1_TableIface_column_deleted(arg0 *C.void, arg1 C.gint, arg2 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32     // out
	var _numDeleted int32 // out

	_column = int32(arg1)
	_numDeleted = int32(arg2)

	iface.ColumnDeleted(_column, _numDeleted)
}

//export _gotk4_atk1_TableIface_column_inserted
func _gotk4_atk1_TableIface_column_inserted(arg0 *C.void, arg1 C.gint, arg2 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32      // out
	var _numInserted int32 // out

	_column = int32(arg1)
	_numInserted = int32(arg2)

	iface.ColumnInserted(_column, _numInserted)
}

//export _gotk4_atk1_TableIface_column_reordered
func _gotk4_atk1_TableIface_column_reordered(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	iface.ColumnReordered()
}

//export _gotk4_atk1_TableIface_get_caption
func _gotk4_atk1_TableIface_get_caption(arg0 *C.void) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	object := iface.Caption()

	if object != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	}

	return cret
}

//export _gotk4_atk1_TableIface_get_column_at_index
func _gotk4_atk1_TableIface_get_column_at_index(arg0 *C.void, arg1 C.gint) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _index_ int32 // out

	_index_ = int32(arg1)

	gint := iface.ColumnAtIndex(_index_)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_column_description
func _gotk4_atk1_TableIface_get_column_description(arg0 *C.void, arg1 C.gint) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32 // out

	_column = int32(arg1)

	utf8 := iface.ColumnDescription(_column)

	cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	defer C.free(unsafe.Pointer(cret))

	return cret
}

//export _gotk4_atk1_TableIface_get_column_extent_at
func _gotk4_atk1_TableIface_get_column_extent_at(arg0 *C.void, arg1 C.gint, arg2 C.gint) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32    // out
	var _column int32 // out

	_row = int32(arg1)
	_column = int32(arg2)

	gint := iface.ColumnExtentAt(_row, _column)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_column_header
func _gotk4_atk1_TableIface_get_column_header(arg0 *C.void, arg1 C.gint) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32 // out

	_column = int32(arg1)

	object := iface.ColumnHeader(_column)

	if object != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	}

	return cret
}

//export _gotk4_atk1_TableIface_get_index_at
func _gotk4_atk1_TableIface_get_index_at(arg0 *C.void, arg1 C.gint, arg2 C.gint) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32    // out
	var _column int32 // out

	_row = int32(arg1)
	_column = int32(arg2)

	gint := iface.IndexAt(_row, _column)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_n_columns
func _gotk4_atk1_TableIface_get_n_columns(arg0 *C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	gint := iface.NColumns()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_n_rows
func _gotk4_atk1_TableIface_get_n_rows(arg0 *C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	gint := iface.NRows()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_row_at_index
func _gotk4_atk1_TableIface_get_row_at_index(arg0 *C.void, arg1 C.gint) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _index_ int32 // out

	_index_ = int32(arg1)

	gint := iface.RowAtIndex(_index_)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_row_description
func _gotk4_atk1_TableIface_get_row_description(arg0 *C.void, arg1 C.gint) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32 // out

	_row = int32(arg1)

	utf8 := iface.RowDescription(_row)

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
		defer C.free(unsafe.Pointer(cret))
	}

	return cret
}

//export _gotk4_atk1_TableIface_get_row_extent_at
func _gotk4_atk1_TableIface_get_row_extent_at(arg0 *C.void, arg1 C.gint, arg2 C.gint) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32    // out
	var _column int32 // out

	_row = int32(arg1)
	_column = int32(arg2)

	gint := iface.RowExtentAt(_row, _column)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_row_header
func _gotk4_atk1_TableIface_get_row_header(arg0 *C.void, arg1 C.gint) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32 // out

	_row = int32(arg1)

	object := iface.RowHeader(_row)

	if object != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	}

	return cret
}

//export _gotk4_atk1_TableIface_get_selected_columns
func _gotk4_atk1_TableIface_get_selected_columns(arg0 *C.void, arg1 **C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _selected **int32 // out

	_selected = (**int32)(unsafe.Pointer(arg1))

	gint := iface.SelectedColumns(_selected)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_selected_rows
func _gotk4_atk1_TableIface_get_selected_rows(arg0 *C.void, arg1 **C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _selected **int32 // out

	_selected = (**int32)(unsafe.Pointer(arg1))

	gint := iface.SelectedRows(_selected)

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableIface_get_summary
func _gotk4_atk1_TableIface_get_summary(arg0 *C.void) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	object := iface.Summary()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(object).Native()))

	return cret
}

//export _gotk4_atk1_TableIface_is_column_selected
func _gotk4_atk1_TableIface_is_column_selected(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32 // out

	_column = int32(arg1)

	ok := iface.IsColumnSelected(_column)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_is_row_selected
func _gotk4_atk1_TableIface_is_row_selected(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32 // out

	_row = int32(arg1)

	ok := iface.IsRowSelected(_row)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_is_selected
func _gotk4_atk1_TableIface_is_selected(arg0 *C.void, arg1 C.gint, arg2 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32    // out
	var _column int32 // out

	_row = int32(arg1)
	_column = int32(arg2)

	ok := iface.IsSelected(_row, _column)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_model_changed
func _gotk4_atk1_TableIface_model_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	iface.ModelChanged()
}

//export _gotk4_atk1_TableIface_ref_at
func _gotk4_atk1_TableIface_ref_at(arg0 *C.void, arg1 C.gint, arg2 C.gint) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32    // out
	var _column int32 // out

	_row = int32(arg1)
	_column = int32(arg2)

	object := iface.RefAt(_row, _column)

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(object).Native()))

	return cret
}

//export _gotk4_atk1_TableIface_remove_column_selection
func _gotk4_atk1_TableIface_remove_column_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32 // out

	_column = int32(arg1)

	ok := iface.RemoveColumnSelection(_column)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_remove_row_selection
func _gotk4_atk1_TableIface_remove_row_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32 // out

	_row = int32(arg1)

	ok := iface.RemoveRowSelection(_row)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_TableIface_row_deleted
func _gotk4_atk1_TableIface_row_deleted(arg0 *C.void, arg1 C.gint, arg2 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32        // out
	var _numDeleted int32 // out

	_row = int32(arg1)
	_numDeleted = int32(arg2)

	iface.RowDeleted(_row, _numDeleted)
}

//export _gotk4_atk1_TableIface_row_inserted
func _gotk4_atk1_TableIface_row_inserted(arg0 *C.void, arg1 C.gint, arg2 C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32         // out
	var _numInserted int32 // out

	_row = int32(arg1)
	_numInserted = int32(arg2)

	iface.RowInserted(_row, _numInserted)
}

//export _gotk4_atk1_TableIface_row_reordered
func _gotk4_atk1_TableIface_row_reordered(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	iface.RowReordered()
}

//export _gotk4_atk1_TableIface_set_caption
func _gotk4_atk1_TableIface_set_caption(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _caption *ObjectClass // out

	_caption = wrapObject(coreglib.Take(unsafe.Pointer(arg1)))

	iface.SetCaption(_caption)
}

//export _gotk4_atk1_TableIface_set_column_description
func _gotk4_atk1_TableIface_set_column_description(arg0 *C.void, arg1 C.gint, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32       // out
	var _description string // out

	_column = int32(arg1)
	_description = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	iface.SetColumnDescription(_column, _description)
}

//export _gotk4_atk1_TableIface_set_column_header
func _gotk4_atk1_TableIface_set_column_header(arg0 *C.void, arg1 C.gint, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _column int32        // out
	var _header *ObjectClass // out

	_column = int32(arg1)
	_header = wrapObject(coreglib.Take(unsafe.Pointer(arg2)))

	iface.SetColumnHeader(_column, _header)
}

//export _gotk4_atk1_TableIface_set_row_description
func _gotk4_atk1_TableIface_set_row_description(arg0 *C.void, arg1 C.gint, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32          // out
	var _description string // out

	_row = int32(arg1)
	_description = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	iface.SetRowDescription(_row, _description)
}

//export _gotk4_atk1_TableIface_set_row_header
func _gotk4_atk1_TableIface_set_row_header(arg0 *C.void, arg1 C.gint, arg2 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _row int32           // out
	var _header *ObjectClass // out

	_row = int32(arg1)
	_header = wrapObject(coreglib.Take(unsafe.Pointer(arg2)))

	iface.SetRowHeader(_row, _header)
}

//export _gotk4_atk1_TableIface_set_summary
func _gotk4_atk1_TableIface_set_summary(arg0 *C.void, arg1 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableOverrider)

	var _accessible *ObjectClass // out

	_accessible = wrapObject(coreglib.Take(unsafe.Pointer(arg1)))

	iface.SetSummary(_accessible)
}

func wrapTable(obj *coreglib.Object) *Table {
	return &Table{
		Object: obj,
	}
}

func marshalTable(p uintptr) (interface{}, error) {
	return wrapTable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_atk1_Table_ConnectColumnDeleted
func _gotk4_atk1_Table_ConnectColumnDeleted(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(arg1, arg2 int32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1, arg2 int32))
	}

	var _arg1 int32 // out
	var _arg2 int32 // out

	_arg1 = int32(arg1)
	_arg2 = int32(arg2)

	f(_arg1, _arg2)
}

// ConnectColumnDeleted: "column-deleted" signal is emitted by an object which
// implements the AtkTable interface when a column is deleted.
func (table *Table) ConnectColumnDeleted(f func(arg1, arg2 int32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-deleted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnDeleted), f)
}

//export _gotk4_atk1_Table_ConnectColumnInserted
func _gotk4_atk1_Table_ConnectColumnInserted(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(arg1, arg2 int32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1, arg2 int32))
	}

	var _arg1 int32 // out
	var _arg2 int32 // out

	_arg1 = int32(arg1)
	_arg2 = int32(arg2)

	f(_arg1, _arg2)
}

// ConnectColumnInserted: "column-inserted" signal is emitted by an object which
// implements the AtkTable interface when a column is inserted.
func (table *Table) ConnectColumnInserted(f func(arg1, arg2 int32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-inserted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnInserted), f)
}

//export _gotk4_atk1_Table_ConnectColumnReordered
func _gotk4_atk1_Table_ConnectColumnReordered(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectColumnReordered: "column-reordered" signal is emitted by an object
// which implements the AtkTable interface when the columns are reordered.
func (table *Table) ConnectColumnReordered(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-reordered", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnReordered), f)
}

//export _gotk4_atk1_Table_ConnectModelChanged
func _gotk4_atk1_Table_ConnectModelChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectModelChanged: "model-changed" signal is emitted by an object which
// implements the AtkTable interface when the model displayed by the table
// changes.
func (table *Table) ConnectModelChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "model-changed", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectModelChanged), f)
}

//export _gotk4_atk1_Table_ConnectRowDeleted
func _gotk4_atk1_Table_ConnectRowDeleted(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(arg1, arg2 int32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1, arg2 int32))
	}

	var _arg1 int32 // out
	var _arg2 int32 // out

	_arg1 = int32(arg1)
	_arg2 = int32(arg2)

	f(_arg1, _arg2)
}

// ConnectRowDeleted: "row-deleted" signal is emitted by an object which
// implements the AtkTable interface when a row is deleted.
func (table *Table) ConnectRowDeleted(f func(arg1, arg2 int32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-deleted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowDeleted), f)
}

//export _gotk4_atk1_Table_ConnectRowInserted
func _gotk4_atk1_Table_ConnectRowInserted(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(arg1, arg2 int32)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1, arg2 int32))
	}

	var _arg1 int32 // out
	var _arg2 int32 // out

	_arg1 = int32(arg1)
	_arg2 = int32(arg2)

	f(_arg1, _arg2)
}

// ConnectRowInserted: "row-inserted" signal is emitted by an object which
// implements the AtkTable interface when a row is inserted.
func (table *Table) ConnectRowInserted(f func(arg1, arg2 int32)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-inserted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowInserted), f)
}

//export _gotk4_atk1_Table_ConnectRowReordered
func _gotk4_atk1_Table_ConnectRowReordered(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectRowReordered: "row-reordered" signal is emitted by an object which
// implements the AtkTable interface when the rows are reordered.
func (table *Table) ConnectRowReordered(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-reordered", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowReordered), f)
}

// AddColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column was successfully added to the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) AddColumnSelection(column int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// AddRowSelection adds the specified row to the selection.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if row was successfully added to selection, or
//      0 if value does not implement this interface.
//
func (table *Table) AddRowSelection(row int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// Caption gets the caption for the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the table caption, or NULL if
//      value does not implement this interface.
//
func (table *Table) Caption() *ObjectClass {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)

	var _object *ObjectClass // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// ColumnAtIndex gets a #gint representing the column at the specified index_.
//
// Deprecated: Since 2.12.
//
// The function takes the following parameters:
//
//    - index_ representing an index in table.
//
// The function returns the following values:
//
//    - gint representing the column at the specified index, or -1 if the table
//      does not implement this method.
//
func (table *Table) ColumnAtIndex(index_ int32) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(index_)

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ColumnDescription gets the description text of the specified column in the
// table.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - utf8: gchar* representing the column description, or NULL if value does
//      not implement this interface.
//
func (table *Table) ColumnDescription(column int32) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ColumnExtentAt gets the number of columns occupied by the accessible object
// at the specified row and column in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the column extent at specified position, or 0 if value
//      does not implement this interface.
//
func (table *Table) ColumnExtentAt(row, column int32) int32 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// ColumnHeader gets the column header of a specified column in an accessible
// table.
//
// The function takes the following parameters:
//
//    - column representing a column in the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the specified column header,
//      or NULL if value does not implement this interface.
//
func (table *Table) ColumnHeader(column int32) *ObjectClass {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _object *ObjectClass // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// IndexAt gets a #gint representing the index at the specified row and column.
//
// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the accessible
// that represents the cell at (row, column).
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the index at specified position. The value -1 is
//      returned if the object at row,column is not a child of table or table
//      does not implement this interface.
//
func (table *Table) IndexAt(row, column int32) int32 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// NColumns gets the number of columns in the table.
//
// The function returns the following values:
//
//    - gint representing the number of columns, or 0 if value does not implement
//      this interface.
//
func (table *Table) NColumns() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// NRows gets the number of rows in the table.
//
// The function returns the following values:
//
//    - gint representing the number of rows, or 0 if value does not implement
//      this interface.
//
func (table *Table) NRows() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// RowAtIndex gets a #gint representing the row at the specified index_.
//
// Deprecated: since 2.12.
//
// The function takes the following parameters:
//
//    - index_ representing an index in table.
//
// The function returns the following values:
//
//    - gint representing the row at the specified index, or -1 if the table does
//      not implement this method.
//
func (table *Table) RowAtIndex(index_ int32) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(index_)

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// RowDescription gets the description text of the specified row in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - utf8 (optional): gchar* representing the row description, or NULL if
//      value does not implement this interface.
//
func (table *Table) RowDescription(row int32) string {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _utf8 string // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// RowExtentAt gets the number of rows occupied by the accessible object at a
// specified row and column in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the row extent at specified position, or 0 if value
//      does not implement this interface.
//
func (table *Table) RowExtentAt(row, column int32) int32 {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// RowHeader gets the row header of a specified row in an accessible table.
//
// The function takes the following parameters:
//
//    - row representing a row in the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the specified row header, or
//      NULL if value does not implement this interface.
//
func (table *Table) RowHeader(row int32) *ObjectClass {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _object *ObjectClass // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// SelectedColumns gets the selected columns of the table by initializing
// **selected with the selected column numbers. This array should be freed by
// the caller.
//
// The function takes the following parameters:
//
//    - selected that is to contain the selected columns numbers.
//
// The function returns the following values:
//
//    - gint representing the number of selected columns, or 0 if value does not
//      implement this interface.
//
func (table *Table) SelectedColumns(selected **int32) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(***C.void)(unsafe.Pointer(&_args[1])) = (**C.void)(unsafe.Pointer(selected))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// SelectedRows gets the selected rows of the table by initializing **selected
// with the selected row numbers. This array should be freed by the caller.
//
// The function takes the following parameters:
//
//    - selected that is to contain the selected row numbers.
//
// The function returns the following values:
//
//    - gint representing the number of selected rows, or zero if value does not
//      implement this interface.
//
func (table *Table) SelectedRows(selected **int32) int32 {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(***C.void)(unsafe.Pointer(&_args[1])) = (**C.void)(unsafe.Pointer(selected))

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// Summary gets the summary description of the table.
//
// The function returns the following values:
//
//    - object: atkObject* representing a summary description of the table, or
//      zero if value does not implement this interface.
//
func (table *Table) Summary() *ObjectClass {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)

	var _object *ObjectClass // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// IsColumnSelected gets a boolean value indicating whether the specified column
// is selected.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column is selected, or 0 if value does
//      not implement this interface.
//
func (table *Table) IsColumnSelected(column int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsRowSelected gets a boolean value indicating whether the specified row is
// selected.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the row is selected, or 0 if value does not
//      implement this interface.
//
func (table *Table) IsRowSelected(row int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// IsSelected gets a boolean value indicating whether the accessible object at
// the specified row and column is selected.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the cell is selected, or 0 if value does not
//      implement this interface.
//
func (table *Table) IsSelected(row, column int32) bool {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// RefAt: get a reference to the table cell at row, column. This cell should
// implement the interface TableCell.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - object representing the referred to accessible.
//
func (table *Table) RefAt(row, column int32) *ObjectClass {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(*C.gint)(unsafe.Pointer(&_args[2])) = C.gint(column)

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _object *ObjectClass // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// RemoveColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column was successfully removed from the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveColumnSelection(column int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// RemoveRowSelection removes the specified row from the selection.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the row was successfully removed from the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveRowSelection(row int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SetCaption sets the caption for the table.
//
// The function takes the following parameters:
//
//    - caption representing the caption to set for table.
//
func (table *Table) SetCaption(caption *ObjectClass) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(caption).Native()))

	runtime.KeepAlive(table)
	runtime.KeepAlive(caption)
}

// SetColumnDescription sets the description text for the specified column of
// the table.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//    - description representing the description text to set for the specified
//      column of the table.
//
func (table *Table) SetColumnDescription(column int32, description string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_args[2]))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(description)
}

// SetColumnHeader sets the specified column header to header.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//    - header: Table.
//
func (table *Table) SetColumnHeader(column int32, header *ObjectClass) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(column)
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(header)
}

// SetRowDescription sets the description text for the specified row of table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - description representing the description text to set for the specified
//      row of table.
//
func (table *Table) SetRowDescription(row int32, description string) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_args[2]))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(description)
}

// SetRowHeader sets the specified row header to header.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - header: Table.
//
func (table *Table) SetRowHeader(row int32, header *ObjectClass) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(row)
	*(**C.void)(unsafe.Pointer(&_args[2])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(header)
}

// SetSummary sets the summary description of the table.
//
// The function takes the following parameters:
//
//    - accessible representing the summary description to set for table.
//
func (table *Table) SetSummary(accessible *ObjectClass) {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	*(**C.void)(unsafe.Pointer(&_args[1])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	runtime.KeepAlive(table)
	runtime.KeepAlive(accessible)
}
