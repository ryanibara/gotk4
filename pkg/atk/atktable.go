// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"sync"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_table_get_type()), F: marshalTabler},
	})
}

// TableOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type TableOverrider interface {
	// AddColumnSelection adds the specified column to the selection.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column was successfully added to the
	//      selection, or 0 if value does not implement this interface.
	//
	AddColumnSelection(column int) bool
	// AddRowSelection adds the specified row to the selection.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if row was successfully added to selection,
	//      or 0 if value does not implement this interface.
	//
	AddRowSelection(row int) bool
	// The function takes the following parameters:
	//
	//    - column
	//    - numDeleted
	//
	ColumnDeleted(column, numDeleted int)
	// The function takes the following parameters:
	//
	//    - column
	//    - numInserted
	//
	ColumnInserted(column, numInserted int)
	ColumnReordered()
	// Caption gets the caption for the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the table caption, or NULL
	//      if value does not implement this interface.
	//
	Caption() *ObjectClass
	// ColumnAtIndex gets a #gint representing the column at the specified
	// index_.
	//
	// Deprecated: Since 2.12.
	//
	// The function takes the following parameters:
	//
	//    - index_ representing an index in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the column at the specified index, or -1 if the
	//      table does not implement this method.
	//
	ColumnAtIndex(index_ int) int
	// ColumnDescription gets the description text of the specified column in
	// the table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - utf8: gchar* representing the column description, or NULL if value
	//      does not implement this interface.
	//
	ColumnDescription(column int) string
	// ColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified row and column in the table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the column extent at specified position, or 0 if
	//      value does not implement this interface.
	//
	ColumnExtentAt(row, column int) int
	// ColumnHeader gets the column header of a specified column in an
	// accessible table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the specified column
	//      header, or NULL if value does not implement this interface.
	//
	ColumnHeader(column int) *ObjectClass
	// IndexAt gets a #gint representing the index at the specified row and
	// column.
	//
	// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the
	// accessible that represents the cell at (row, column).
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the index at specified position. The value -1 is
	//      returned if the object at row,column is not a child of table or table
	//      does not implement this interface.
	//
	IndexAt(row, column int) int
	// NColumns gets the number of columns in the table.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of columns, or 0 if value does not
	//      implement this interface.
	//
	NColumns() int
	// NRows gets the number of rows in the table.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of rows, or 0 if value does not
	//      implement this interface.
	//
	NRows() int
	// RowAtIndex gets a #gint representing the row at the specified index_.
	//
	// Deprecated: since 2.12.
	//
	// The function takes the following parameters:
	//
	//    - index_ representing an index in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the row at the specified index, or -1 if the table
	//      does not implement this method.
	//
	RowAtIndex(index_ int) int
	// RowDescription gets the description text of the specified row in the
	// table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): gchar* representing the row description, or NULL if
	//      value does not implement this interface.
	//
	RowDescription(row int) string
	// RowExtentAt gets the number of rows occupied by the accessible object at
	// a specified row and column in the table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - gint representing the row extent at specified position, or 0 if value
	//      does not implement this interface.
	//
	RowExtentAt(row, column int) int
	// RowHeader gets the row header of a specified row in an accessible table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in the table.
	//
	// The function returns the following values:
	//
	//    - object (optional): atkObject* representing the specified row header,
	//      or NULL if value does not implement this interface.
	//
	RowHeader(row int) *ObjectClass
	// SelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers. This array should be freed
	// by the caller.
	//
	// The function takes the following parameters:
	//
	//    - selected that is to contain the selected columns numbers.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of selected columns, or 0 if value does
	//      not implement this interface.
	//
	SelectedColumns(selected **int) int
	// SelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers. This array should be freed by
	// the caller.
	//
	// The function takes the following parameters:
	//
	//    - selected that is to contain the selected row numbers.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of selected rows, or zero if value does
	//      not implement this interface.
	//
	SelectedRows(selected **int) int
	// Summary gets the summary description of the table.
	//
	// The function returns the following values:
	//
	//    - object: atkObject* representing a summary description of the table,
	//      or zero if value does not implement this interface.
	//
	Summary() *ObjectClass
	// IsColumnSelected gets a boolean value indicating whether the specified
	// column is selected.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column is selected, or 0 if value
	//      does not implement this interface.
	//
	IsColumnSelected(column int) bool
	// IsRowSelected gets a boolean value indicating whether the specified row
	// is selected.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the row is selected, or 0 if value does
	//      not implement this interface.
	//
	IsRowSelected(row int) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified row and column is selected.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the cell is selected, or 0 if value does
	//      not implement this interface.
	//
	IsSelected(row, column int) bool
	ModelChanged()
	// RefAt: get a reference to the table cell at row, column. This cell should
	// implement the interface TableCell.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - object representing the referred to accessible.
	//
	RefAt(row, column int) *ObjectClass
	// RemoveColumnSelection adds the specified column to the selection.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the column was successfully removed from
	//      the selection, or 0 if value does not implement this interface.
	//
	RemoveColumnSelection(column int) bool
	// RemoveRowSelection removes the specified row from the selection.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing if the row was successfully removed from
	//      the selection, or 0 if value does not implement this interface.
	//
	RemoveRowSelection(row int) bool
	// The function takes the following parameters:
	//
	//    - row
	//    - numDeleted
	//
	RowDeleted(row, numDeleted int)
	// The function takes the following parameters:
	//
	//    - row
	//    - numInserted
	//
	RowInserted(row, numInserted int)
	RowReordered()
	// SetCaption sets the caption for the table.
	//
	// The function takes the following parameters:
	//
	//    - caption representing the caption to set for table.
	//
	SetCaption(caption *ObjectClass)
	// SetColumnDescription sets the description text for the specified column
	// of the table.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//    - description representing the description text to set for the
	//      specified column of the table.
	//
	SetColumnDescription(column int, description string)
	// SetColumnHeader sets the specified column header to header.
	//
	// The function takes the following parameters:
	//
	//    - column representing a column in table.
	//    - header: Table.
	//
	SetColumnHeader(column int, header *ObjectClass)
	// SetRowDescription sets the description text for the specified row of
	// table.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - description representing the description text to set for the
	//      specified row of table.
	//
	SetRowDescription(row int, description string)
	// SetRowHeader sets the specified row header to header.
	//
	// The function takes the following parameters:
	//
	//    - row representing a row in table.
	//    - header: Table.
	//
	SetRowHeader(row int, header *ObjectClass)
	// SetSummary sets the summary description of the table.
	//
	// The function takes the following parameters:
	//
	//    - accessible representing the summary description to set for table.
	//
	SetSummary(accessible *ObjectClass)
}

// Table should be implemented by components which present elements ordered via
// rows and columns. It may also be used to present tree-structured information
// if the nodes of the trees can be said to contain multiple "columns".
// Individual elements of an Table are typically referred to as "cells". Those
// cells should implement the interface TableCell, but #Atk doesn't require them
// to be direct children of the current Table. They can be grand-children,
// grand-grand-children etc. Table provides the API needed to get a individual
// cell based on the row and column numbers.
//
// Children of Table are frequently "lightweight" objects, that is, they may not
// have backing widgets in the host UI toolkit. They are therefore often
// transient.
//
// Since tables are often very complex, Table includes provision for offering
// simplified summary information, as well as row and column headers and
// captions. Headers and captions are Objects which may implement other
// interfaces (Text, Image, etc.) as appropriate. Table summaries may themselves
// be (simplified) Tables, etc.
//
// Note for implementors: in the past, Table required that all the cells should
// be direct children of Table, and provided some index based methods to request
// the cells. The practice showed that that forcing made Table implementation
// complex, and hard to expose other kind of children, like rows or captions.
// Right now, index-based methods are deprecated.
type Table struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Table)(nil)
)

// Tabler describes Table's interface methods.
type Tabler interface {
	externglib.Objector

	// AddColumnSelection adds the specified column to the selection.
	AddColumnSelection(column int) bool
	// AddRowSelection adds the specified row to the selection.
	AddRowSelection(row int) bool
	// Caption gets the caption for the table.
	Caption() *ObjectClass
	// ColumnAtIndex gets a #gint representing the column at the specified
	// index_.
	ColumnAtIndex(index_ int) int
	// ColumnDescription gets the description text of the specified column in
	// the table.
	ColumnDescription(column int) string
	// ColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified row and column in the table.
	ColumnExtentAt(row, column int) int
	// ColumnHeader gets the column header of a specified column in an
	// accessible table.
	ColumnHeader(column int) *ObjectClass
	// IndexAt gets a #gint representing the index at the specified row and
	// column.
	IndexAt(row, column int) int
	// NColumns gets the number of columns in the table.
	NColumns() int
	// NRows gets the number of rows in the table.
	NRows() int
	// RowAtIndex gets a #gint representing the row at the specified index_.
	RowAtIndex(index_ int) int
	// RowDescription gets the description text of the specified row in the
	// table.
	RowDescription(row int) string
	// RowExtentAt gets the number of rows occupied by the accessible object at
	// a specified row and column in the table.
	RowExtentAt(row, column int) int
	// RowHeader gets the row header of a specified row in an accessible table.
	RowHeader(row int) *ObjectClass
	// SelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers.
	SelectedColumns(selected **int) int
	// SelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers.
	SelectedRows(selected **int) int
	// Summary gets the summary description of the table.
	Summary() *ObjectClass
	// IsColumnSelected gets a boolean value indicating whether the specified
	// column is selected.
	IsColumnSelected(column int) bool
	// IsRowSelected gets a boolean value indicating whether the specified row
	// is selected.
	IsRowSelected(row int) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified row and column is selected.
	IsSelected(row, column int) bool
	// RefAt: get a reference to the table cell at row, column.
	RefAt(row, column int) *ObjectClass
	// RemoveColumnSelection adds the specified column to the selection.
	RemoveColumnSelection(column int) bool
	// RemoveRowSelection removes the specified row from the selection.
	RemoveRowSelection(row int) bool
	// SetCaption sets the caption for the table.
	SetCaption(caption *ObjectClass)
	// SetColumnDescription sets the description text for the specified column
	// of the table.
	SetColumnDescription(column int, description string)
	// SetColumnHeader sets the specified column header to header.
	SetColumnHeader(column int, header *ObjectClass)
	// SetRowDescription sets the description text for the specified row of
	// table.
	SetRowDescription(row int, description string)
	// SetRowHeader sets the specified row header to header.
	SetRowHeader(row int, header *ObjectClass)
	// SetSummary sets the summary description of the table.
	SetSummary(accessible *ObjectClass)
}

var _ Tabler = (*Table)(nil)

func wrapTable(obj *externglib.Object) *Table {
	return &Table{
		Object: obj,
	}
}

func marshalTabler(p uintptr) (interface{}, error) {
	return wrapTable(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectColumnDeleted: "column-deleted" signal is emitted by an object which
// implements the AtkTable interface when a column is deleted.
func (table *Table) ConnectColumnDeleted(f func(arg1, arg2 int)) externglib.SignalHandle {
	return table.Connect("column-deleted", f)
}

// ConnectColumnInserted: "column-inserted" signal is emitted by an object which
// implements the AtkTable interface when a column is inserted.
func (table *Table) ConnectColumnInserted(f func(arg1, arg2 int)) externglib.SignalHandle {
	return table.Connect("column-inserted", f)
}

// ConnectColumnReordered: "column-reordered" signal is emitted by an object
// which implements the AtkTable interface when the columns are reordered.
func (table *Table) ConnectColumnReordered(f func()) externglib.SignalHandle {
	return table.Connect("column-reordered", f)
}

// ConnectModelChanged: "model-changed" signal is emitted by an object which
// implements the AtkTable interface when the model displayed by the table
// changes.
func (table *Table) ConnectModelChanged(f func()) externglib.SignalHandle {
	return table.Connect("model-changed", f)
}

// ConnectRowDeleted: "row-deleted" signal is emitted by an object which
// implements the AtkTable interface when a row is deleted.
func (table *Table) ConnectRowDeleted(f func(arg1, arg2 int)) externglib.SignalHandle {
	return table.Connect("row-deleted", f)
}

// ConnectRowInserted: "row-inserted" signal is emitted by an object which
// implements the AtkTable interface when a row is inserted.
func (table *Table) ConnectRowInserted(f func(arg1, arg2 int)) externglib.SignalHandle {
	return table.Connect("row-inserted", f)
}

// ConnectRowReordered: "row-reordered" signal is emitted by an object which
// implements the AtkTable interface when the rows are reordered.
func (table *Table) ConnectRowReordered(f func()) externglib.SignalHandle {
	return table.Connect("row-reordered", f)
}

// AddColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column was successfully added to the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) AddColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_add_column_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddRowSelection adds the specified row to the selection.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if row was successfully added to selection, or
//      0 if value does not implement this interface.
//
func (table *Table) AddRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_add_row_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Caption gets the caption for the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the table caption, or NULL if
//      value does not implement this interface.
//
func (table *Table) Caption() *ObjectClass {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))

	_cret = C.atk_table_get_caption(_arg0)
	runtime.KeepAlive(table)

	var _object *ObjectClass // out

	if _cret != nil {
		_object = wrapObject(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// ColumnAtIndex gets a #gint representing the column at the specified index_.
//
// Deprecated: Since 2.12.
//
// The function takes the following parameters:
//
//    - index_ representing an index in table.
//
// The function returns the following values:
//
//    - gint representing the column at the specified index, or -1 if the table
//      does not implement this method.
//
func (table *Table) ColumnAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_column_at_index(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ColumnDescription gets the description text of the specified column in the
// table.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - utf8: gchar* representing the column description, or NULL if value does
//      not implement this interface.
//
func (table *Table) ColumnDescription(column int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_description(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ColumnExtentAt gets the number of columns occupied by the accessible object
// at the specified row and column in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the column extent at specified position, or 0 if value
//      does not implement this interface.
//
func (table *Table) ColumnExtentAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_column_extent_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ColumnHeader gets the column header of a specified column in an accessible
// table.
//
// The function takes the following parameters:
//
//    - column representing a column in the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the specified column header,
//      or NULL if value does not implement this interface.
//
func (table *Table) ColumnHeader(column int) *ObjectClass {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_header(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _object *ObjectClass // out

	if _cret != nil {
		_object = wrapObject(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// IndexAt gets a #gint representing the index at the specified row and column.
//
// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the accessible
// that represents the cell at (row, column).
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the index at specified position. The value -1 is
//      returned if the object at row,column is not a child of table or table
//      does not implement this interface.
//
func (table *Table) IndexAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_index_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NColumns gets the number of columns in the table.
//
// The function returns the following values:
//
//    - gint representing the number of columns, or 0 if value does not implement
//      this interface.
//
func (table *Table) NColumns() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))

	_cret = C.atk_table_get_n_columns(_arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NRows gets the number of rows in the table.
//
// The function returns the following values:
//
//    - gint representing the number of rows, or 0 if value does not implement
//      this interface.
//
func (table *Table) NRows() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))

	_cret = C.atk_table_get_n_rows(_arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowAtIndex gets a #gint representing the row at the specified index_.
//
// Deprecated: since 2.12.
//
// The function takes the following parameters:
//
//    - index_ representing an index in table.
//
// The function returns the following values:
//
//    - gint representing the row at the specified index, or -1 if the table does
//      not implement this method.
//
func (table *Table) RowAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_row_at_index(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowDescription gets the description text of the specified row in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - utf8 (optional): gchar* representing the row description, or NULL if
//      value does not implement this interface.
//
func (table *Table) RowDescription(row int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_description(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// RowExtentAt gets the number of rows occupied by the accessible object at a
// specified row and column in the table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - gint representing the row extent at specified position, or 0 if value
//      does not implement this interface.
//
func (table *Table) RowExtentAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_row_extent_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowHeader gets the row header of a specified row in an accessible table.
//
// The function takes the following parameters:
//
//    - row representing a row in the table.
//
// The function returns the following values:
//
//    - object (optional): atkObject* representing the specified row header, or
//      NULL if value does not implement this interface.
//
func (table *Table) RowHeader(row int) *ObjectClass {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_header(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _object *ObjectClass // out

	if _cret != nil {
		_object = wrapObject(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// SelectedColumns gets the selected columns of the table by initializing
// **selected with the selected column numbers. This array should be freed by
// the caller.
//
// The function takes the following parameters:
//
//    - selected that is to contain the selected columns numbers.
//
// The function returns the following values:
//
//    - gint representing the number of selected columns, or 0 if value does not
//      implement this interface.
//
func (table *Table) SelectedColumns(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_columns(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SelectedRows gets the selected rows of the table by initializing **selected
// with the selected row numbers. This array should be freed by the caller.
//
// The function takes the following parameters:
//
//    - selected that is to contain the selected row numbers.
//
// The function returns the following values:
//
//    - gint representing the number of selected rows, or zero if value does not
//      implement this interface.
//
func (table *Table) SelectedRows(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_rows(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Summary gets the summary description of the table.
//
// The function returns the following values:
//
//    - object: atkObject* representing a summary description of the table, or
//      zero if value does not implement this interface.
//
func (table *Table) Summary() *ObjectClass {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))

	_cret = C.atk_table_get_summary(_arg0)
	runtime.KeepAlive(table)

	var _object *ObjectClass // out

	_object = wrapObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// IsColumnSelected gets a boolean value indicating whether the specified column
// is selected.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column is selected, or 0 if value does
//      not implement this interface.
//
func (table *Table) IsColumnSelected(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_is_column_selected(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsRowSelected gets a boolean value indicating whether the specified row is
// selected.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the row is selected, or 0 if value does not
//      implement this interface.
//
func (table *Table) IsRowSelected(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_is_row_selected(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsSelected gets a boolean value indicating whether the accessible object at
// the specified row and column is selected.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the cell is selected, or 0 if value does not
//      implement this interface.
//
func (table *Table) IsSelected(row, column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_is_selected(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RefAt: get a reference to the table cell at row, column. This cell should
// implement the interface TableCell.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - object representing the referred to accessible.
//
func (table *Table) RefAt(row, column int) *ObjectClass {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_ref_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _object *ObjectClass // out

	_object = wrapObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// RemoveColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the column was successfully removed from the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_remove_column_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveRowSelection removes the specified row from the selection.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//
// The function returns the following values:
//
//    - ok: gboolean representing if the row was successfully removed from the
//      selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_remove_row_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCaption sets the caption for the table.
//
// The function takes the following parameters:
//
//    - caption representing the caption to set for table.
//
func (table *Table) SetCaption(caption *ObjectClass) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(caption.Native()))

	C.atk_table_set_caption(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(caption)
}

// SetColumnDescription sets the description text for the specified column of
// the table.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//    - description representing the description text to set for the specified
//      column of the table.
//
func (table *Table) SetColumnDescription(column int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_column_description(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(description)
}

// SetColumnHeader sets the specified column header to header.
//
// The function takes the following parameters:
//
//    - column representing a column in table.
//    - header: Table.
//
func (table *Table) SetColumnHeader(column int, header *ObjectClass) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(header.Native()))

	C.atk_table_set_column_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(header)
}

// SetRowDescription sets the description text for the specified row of table.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - description representing the description text to set for the specified
//      row of table.
//
func (table *Table) SetRowDescription(row int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_row_description(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(description)
}

// SetRowHeader sets the specified row header to header.
//
// The function takes the following parameters:
//
//    - row representing a row in table.
//    - header: Table.
//
func (table *Table) SetRowHeader(row int, header *ObjectClass) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(header.Native()))

	C.atk_table_set_row_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(header)
}

// SetSummary sets the summary description of the table.
//
// The function takes the following parameters:
//
//    - accessible representing the summary description to set for table.
//
func (table *Table) SetSummary(accessible *ObjectClass) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(table.Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(accessible.Native()))

	C.atk_table_set_summary(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(accessible)
}
