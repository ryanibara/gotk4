// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Table_ConnectRowReordered(gpointer, guintptr);
// extern void _gotk4_atk1_Table_ConnectRowInserted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectRowDeleted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectModelChanged(gpointer, guintptr);
// extern void _gotk4_atk1_Table_ConnectColumnReordered(gpointer, guintptr);
// extern void _gotk4_atk1_Table_ConnectColumnInserted(gpointer, gint, gint, guintptr);
// extern void _gotk4_atk1_Table_ConnectColumnDeleted(gpointer, gint, gint, guintptr);
// AtkObject* _gotk4_atk1_Table_virtual_get_caption(void* fnptr, AtkTable* arg0) {
//   return ((AtkObject* (*)(AtkTable*))(fnptr))(arg0);
// };
// AtkObject* _gotk4_atk1_Table_virtual_get_column_header(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((AtkObject* (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// AtkObject* _gotk4_atk1_Table_virtual_get_row_header(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((AtkObject* (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// AtkObject* _gotk4_atk1_Table_virtual_get_summary(void* fnptr, AtkTable* arg0) {
//   return ((AtkObject* (*)(AtkTable*))(fnptr))(arg0);
// };
// AtkObject* _gotk4_atk1_Table_virtual_ref_at(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   return ((AtkObject* (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_atk1_Table_virtual_add_column_selection(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Table_virtual_add_row_selection(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Table_virtual_is_column_selected(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Table_virtual_is_row_selected(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Table_virtual_is_selected(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   return ((gboolean (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gboolean _gotk4_atk1_Table_virtual_remove_column_selection(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Table_virtual_remove_row_selection(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gboolean (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gchar* _gotk4_atk1_Table_virtual_get_column_description(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gchar* (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gchar* _gotk4_atk1_Table_virtual_get_row_description(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gchar* (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Table_virtual_get_column_at_index(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gint (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Table_virtual_get_column_extent_at(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   return ((gint (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gint _gotk4_atk1_Table_virtual_get_index_at(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   return ((gint (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gint _gotk4_atk1_Table_virtual_get_n_columns(void* fnptr, AtkTable* arg0) {
//   return ((gint (*)(AtkTable*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Table_virtual_get_n_rows(void* fnptr, AtkTable* arg0) {
//   return ((gint (*)(AtkTable*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Table_virtual_get_row_at_index(void* fnptr, AtkTable* arg0, gint arg1) {
//   return ((gint (*)(AtkTable*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Table_virtual_get_row_extent_at(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   return ((gint (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// gint _gotk4_atk1_Table_virtual_get_selected_columns(void* fnptr, AtkTable* arg0, gint** arg1) {
//   return ((gint (*)(AtkTable*, gint**))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Table_virtual_get_selected_rows(void* fnptr, AtkTable* arg0, gint** arg1) {
//   return ((gint (*)(AtkTable*, gint**))(fnptr))(arg0, arg1);
// };
// void _gotk4_atk1_Table_virtual_column_deleted(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   ((void (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_column_inserted(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   ((void (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_column_reordered(void* fnptr, AtkTable* arg0) {
//   ((void (*)(AtkTable*))(fnptr))(arg0);
// };
// void _gotk4_atk1_Table_virtual_model_changed(void* fnptr, AtkTable* arg0) {
//   ((void (*)(AtkTable*))(fnptr))(arg0);
// };
// void _gotk4_atk1_Table_virtual_row_deleted(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   ((void (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_row_inserted(void* fnptr, AtkTable* arg0, gint arg1, gint arg2) {
//   ((void (*)(AtkTable*, gint, gint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_row_reordered(void* fnptr, AtkTable* arg0) {
//   ((void (*)(AtkTable*))(fnptr))(arg0);
// };
// void _gotk4_atk1_Table_virtual_set_caption(void* fnptr, AtkTable* arg0, AtkObject* arg1) {
//   ((void (*)(AtkTable*, AtkObject*))(fnptr))(arg0, arg1);
// };
// void _gotk4_atk1_Table_virtual_set_column_description(void* fnptr, AtkTable* arg0, gint arg1, gchar* arg2) {
//   ((void (*)(AtkTable*, gint, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_set_column_header(void* fnptr, AtkTable* arg0, gint arg1, AtkObject* arg2) {
//   ((void (*)(AtkTable*, gint, AtkObject*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_set_row_description(void* fnptr, AtkTable* arg0, gint arg1, gchar* arg2) {
//   ((void (*)(AtkTable*, gint, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_set_row_header(void* fnptr, AtkTable* arg0, gint arg1, AtkObject* arg2) {
//   ((void (*)(AtkTable*, gint, AtkObject*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_atk1_Table_virtual_set_summary(void* fnptr, AtkTable* arg0, AtkObject* arg1) {
//   ((void (*)(AtkTable*, AtkObject*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeTable = coreglib.Type(C.atk_table_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTable, F: marshalTable},
	})
}

// Table should be implemented by components which present elements ordered via
// rows and columns. It may also be used to present tree-structured information
// if the nodes of the trees can be said to contain multiple "columns".
// Individual elements of an Table are typically referred to as "cells". Those
// cells should implement the interface TableCell, but #Atk doesn't require
// them to be direct children of the current Table. They can be grand-children,
// grand-grand-children etc. Table provides the API needed to get a individual
// cell based on the row and column numbers.
//
// Children of Table are frequently "lightweight" objects, that is, they may
// not have backing widgets in the host UI toolkit. They are therefore often
// transient.
//
// Since tables are often very complex, Table includes provision for offering
// simplified summary information, as well as row and column headers and
// captions. Headers and captions are Objects which may implement other
// interfaces (Text, Image, etc.) as appropriate. Table summaries may themselves
// be (simplified) Tables, etc.
//
// Note for implementors: in the past, Table required that all the cells should
// be direct children of Table, and provided some index based methods to request
// the cells. The practice showed that that forcing made Table implementation
// complex, and hard to expose other kind of children, like rows or captions.
// Right now, index-based methods are deprecated.
//
// Table wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Table struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Table)(nil)
)

// Tabler describes Table's interface methods.
type Tabler interface {
	coreglib.Objector

	// AddColumnSelection adds the specified column to the selection.
	AddColumnSelection(column int) bool
	// AddRowSelection adds the specified row to the selection.
	AddRowSelection(row int) bool
	// Caption gets the caption for the table.
	Caption() *AtkObject
	// ColumnAtIndex gets a #gint representing the column at the specified
	// index_.
	ColumnAtIndex(index_ int) int
	// ColumnDescription gets the description text of the specified column in
	// the table.
	ColumnDescription(column int) string
	// ColumnExtentAt gets the number of columns occupied by the accessible
	// object at the specified row and column in the table.
	ColumnExtentAt(row, column int) int
	// ColumnHeader gets the column header of a specified column in an
	// accessible table.
	ColumnHeader(column int) *AtkObject
	// IndexAt gets a #gint representing the index at the specified row and
	// column.
	IndexAt(row, column int) int
	// NColumns gets the number of columns in the table.
	NColumns() int
	// NRows gets the number of rows in the table.
	NRows() int
	// RowAtIndex gets a #gint representing the row at the specified index_.
	RowAtIndex(index_ int) int
	// RowDescription gets the description text of the specified row in the
	// table.
	RowDescription(row int) string
	// RowExtentAt gets the number of rows occupied by the accessible object at
	// a specified row and column in the table.
	RowExtentAt(row, column int) int
	// RowHeader gets the row header of a specified row in an accessible table.
	RowHeader(row int) *AtkObject
	// SelectedColumns gets the selected columns of the table by initializing
	// **selected with the selected column numbers.
	SelectedColumns(selected **int) int
	// SelectedRows gets the selected rows of the table by initializing
	// **selected with the selected row numbers.
	SelectedRows(selected **int) int
	// Summary gets the summary description of the table.
	Summary() *AtkObject
	// IsColumnSelected gets a boolean value indicating whether the specified
	// column is selected.
	IsColumnSelected(column int) bool
	// IsRowSelected gets a boolean value indicating whether the specified row
	// is selected.
	IsRowSelected(row int) bool
	// IsSelected gets a boolean value indicating whether the accessible object
	// at the specified row and column is selected.
	IsSelected(row, column int) bool
	// RefAt: get a reference to the table cell at row, column.
	RefAt(row, column int) *AtkObject
	// RemoveColumnSelection adds the specified column to the selection.
	RemoveColumnSelection(column int) bool
	// RemoveRowSelection removes the specified row from the selection.
	RemoveRowSelection(row int) bool
	// SetCaption sets the caption for the table.
	SetCaption(caption *AtkObject)
	// SetColumnDescription sets the description text for the specified column
	// of the table.
	SetColumnDescription(column int, description string)
	// SetColumnHeader sets the specified column header to header.
	SetColumnHeader(column int, header *AtkObject)
	// SetRowDescription sets the description text for the specified row of
	// table.
	SetRowDescription(row int, description string)
	// SetRowHeader sets the specified row header to header.
	SetRowHeader(row int, header *AtkObject)
	// SetSummary sets the summary description of the table.
	SetSummary(accessible *AtkObject)

	// Column-deleted: "column-deleted" signal is emitted by an object which
	// implements the AtkTable interface when a column is deleted.
	ConnectColumnDeleted(func(arg1, arg2 int)) coreglib.SignalHandle
	// Column-inserted: "column-inserted" signal is emitted by an object which
	// implements the AtkTable interface when a column is inserted.
	ConnectColumnInserted(func(arg1, arg2 int)) coreglib.SignalHandle
	// Column-reordered: "column-reordered" signal is emitted by an object which
	// implements the AtkTable interface when the columns are reordered.
	ConnectColumnReordered(func()) coreglib.SignalHandle
	// Model-changed: "model-changed" signal is emitted by an object which
	// implements the AtkTable interface when the model displayed by the table
	// changes.
	ConnectModelChanged(func()) coreglib.SignalHandle
	// Row-deleted: "row-deleted" signal is emitted by an object which
	// implements the AtkTable interface when a row is deleted.
	ConnectRowDeleted(func(arg1, arg2 int)) coreglib.SignalHandle
	// Row-inserted: "row-inserted" signal is emitted by an object which
	// implements the AtkTable interface when a row is inserted.
	ConnectRowInserted(func(arg1, arg2 int)) coreglib.SignalHandle
	// Row-reordered: "row-reordered" signal is emitted by an object which
	// implements the AtkTable interface when the rows are reordered.
	ConnectRowReordered(func()) coreglib.SignalHandle
}

var _ Tabler = (*Table)(nil)

func wrapTable(obj *coreglib.Object) *Table {
	return &Table{
		Object: obj,
	}
}

func marshalTable(p uintptr) (interface{}, error) {
	return wrapTable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectColumnDeleted: "column-deleted" signal is emitted by an object which
// implements the AtkTable interface when a column is deleted.
func (table *Table) ConnectColumnDeleted(f func(arg1, arg2 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-deleted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnDeleted), f)
}

// ConnectColumnInserted: "column-inserted" signal is emitted by an object which
// implements the AtkTable interface when a column is inserted.
func (table *Table) ConnectColumnInserted(f func(arg1, arg2 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-inserted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnInserted), f)
}

// ConnectColumnReordered: "column-reordered" signal is emitted by an object
// which implements the AtkTable interface when the columns are reordered.
func (table *Table) ConnectColumnReordered(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "column-reordered", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectColumnReordered), f)
}

// ConnectModelChanged: "model-changed" signal is emitted by an object which
// implements the AtkTable interface when the model displayed by the table
// changes.
func (table *Table) ConnectModelChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "model-changed", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectModelChanged), f)
}

// ConnectRowDeleted: "row-deleted" signal is emitted by an object which
// implements the AtkTable interface when a row is deleted.
func (table *Table) ConnectRowDeleted(f func(arg1, arg2 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-deleted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowDeleted), f)
}

// ConnectRowInserted: "row-inserted" signal is emitted by an object which
// implements the AtkTable interface when a row is inserted.
func (table *Table) ConnectRowInserted(f func(arg1, arg2 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-inserted", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowInserted), f)
}

// ConnectRowReordered: "row-reordered" signal is emitted by an object which
// implements the AtkTable interface when the rows are reordered.
func (table *Table) ConnectRowReordered(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(table, "row-reordered", false, unsafe.Pointer(C._gotk4_atk1_Table_ConnectRowReordered), f)
}

// AddColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column was successfully added to the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) AddColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_add_column_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddRowSelection adds the specified row to the selection.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if row was successfully added to selection,
//     or 0 if value does not implement this interface.
//
func (table *Table) AddRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_add_row_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Caption gets the caption for the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the table caption, or NULL if
//     value does not implement this interface.
//
func (table *Table) Caption() *AtkObject {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C.atk_table_get_caption(_arg0)
	runtime.KeepAlive(table)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// ColumnAtIndex gets a #gint representing the column at the specified index_.
//
// Deprecated: Since 2.12.
//
// The function takes the following parameters:
//
//   - index_ representing an index in table.
//
// The function returns the following values:
//
//   - gint representing the column at the specified index, or -1 if the table
//     does not implement this method.
//
func (table *Table) ColumnAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_column_at_index(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ColumnDescription gets the description text of the specified column in the
// table.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - utf8: gchar* representing the column description, or NULL if value does
//     not implement this interface.
//
func (table *Table) ColumnDescription(column int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_description(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ColumnExtentAt gets the number of columns occupied by the accessible object
// at the specified row and column in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the column extent at specified position, or 0 if value
//     does not implement this interface.
//
func (table *Table) ColumnExtentAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_column_extent_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ColumnHeader gets the column header of a specified column in an accessible
// table.
//
// The function takes the following parameters:
//
//   - column representing a column in the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the specified column header,
//     or NULL if value does not implement this interface.
//
func (table *Table) ColumnHeader(column int) *AtkObject {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_get_column_header(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// IndexAt gets a #gint representing the index at the specified row and column.
//
// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the accessible
// that represents the cell at (row, column).
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the index at specified position. The value -1 is
//     returned if the object at row,column is not a child of table or table
//     does not implement this interface.
//
func (table *Table) IndexAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_index_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NColumns gets the number of columns in the table.
//
// The function returns the following values:
//
//   - gint representing the number of columns, or 0 if value does not implement
//     this interface.
//
func (table *Table) NColumns() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C.atk_table_get_n_columns(_arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NRows gets the number of rows in the table.
//
// The function returns the following values:
//
//   - gint representing the number of rows, or 0 if value does not implement
//     this interface.
//
func (table *Table) NRows() int {
	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C.atk_table_get_n_rows(_arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowAtIndex gets a #gint representing the row at the specified index_.
//
// Deprecated: since 2.12.
//
// The function takes the following parameters:
//
//   - index_ representing an index in table.
//
// The function returns the following values:
//
//   - gint representing the row at the specified index, or -1 if the table does
//     not implement this method.
//
func (table *Table) RowAtIndex(index_ int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(index_)

	_cret = C.atk_table_get_row_at_index(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowDescription gets the description text of the specified row in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - utf8 (optional): gchar* representing the row description, or NULL if
//     value does not implement this interface.
//
func (table *Table) RowDescription(row int) string {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_description(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// RowExtentAt gets the number of rows occupied by the accessible object at a
// specified row and column in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the row extent at specified position, or 0 if value
//     does not implement this interface.
//
func (table *Table) RowExtentAt(row, column int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_get_row_extent_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowHeader gets the row header of a specified row in an accessible table.
//
// The function takes the following parameters:
//
//   - row representing a row in the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the specified row header,
//     or NULL if value does not implement this interface.
//
func (table *Table) RowHeader(row int) *AtkObject {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_get_row_header(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// SelectedColumns gets the selected columns of the table by initializing
// **selected with the selected column numbers. This array should be freed by
// the caller.
//
// The function takes the following parameters:
//
//   - selected that is to contain the selected columns numbers.
//
// The function returns the following values:
//
//   - gint representing the number of selected columns, or 0 if value does not
//     implement this interface.
//
func (table *Table) SelectedColumns(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_columns(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SelectedRows gets the selected rows of the table by initializing **selected
// with the selected row numbers. This array should be freed by the caller.
//
// The function takes the following parameters:
//
//   - selected that is to contain the selected row numbers.
//
// The function returns the following values:
//
//   - gint representing the number of selected rows, or zero if value does not
//     implement this interface.
//
func (table *Table) SelectedRows(selected **int) int {
	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C.atk_table_get_selected_rows(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Summary gets the summary description of the table.
//
// The function returns the following values:
//
//   - object: atkObject* representing a summary description of the table,
//     or zero if value does not implement this interface.
//
func (table *Table) Summary() *AtkObject {
	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C.atk_table_get_summary(_arg0)
	runtime.KeepAlive(table)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// IsColumnSelected gets a boolean value indicating whether the specified column
// is selected.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column is selected, or 0 if value does
//     not implement this interface.
//
func (table *Table) IsColumnSelected(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_is_column_selected(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsRowSelected gets a boolean value indicating whether the specified row is
// selected.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the row is selected, or 0 if value does not
//     implement this interface.
//
func (table *Table) IsRowSelected(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_is_row_selected(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsSelected gets a boolean value indicating whether the accessible object at
// the specified row and column is selected.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the cell is selected, or 0 if value does not
//     implement this interface.
//
func (table *Table) IsSelected(row, column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_is_selected(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RefAt: get a reference to the table cell at row, column. This cell should
// implement the interface TableCell.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - object representing the referred to accessible.
//
func (table *Table) RefAt(row, column int) *AtkObject {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C.atk_table_ref_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// RemoveColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column was successfully removed from the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveColumnSelection(column int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C.atk_table_remove_column_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveRowSelection removes the specified row from the selection.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the row was successfully removed from the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) RemoveRowSelection(row int) bool {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C.atk_table_remove_row_selection(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetCaption sets the caption for the table.
//
// The function takes the following parameters:
//
//   - caption representing the caption to set for table.
//
func (table *Table) SetCaption(caption *AtkObject) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(caption).Native()))

	C.atk_table_set_caption(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(caption)
}

// SetColumnDescription sets the description text for the specified column of
// the table.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//   - description representing the description text to set for the specified
//     column of the table.
//
func (table *Table) SetColumnDescription(column int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_column_description(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(description)
}

// SetColumnHeader sets the specified column header to header.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//   - header: Table.
//
func (table *Table) SetColumnHeader(column int, header *AtkObject) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	C.atk_table_set_column_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(header)
}

// SetRowDescription sets the description text for the specified row of table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - description representing the description text to set for the specified
//     row of table.
//
func (table *Table) SetRowDescription(row int, description string) {
	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C.atk_table_set_row_description(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(description)
}

// SetRowHeader sets the specified row header to header.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - header: Table.
//
func (table *Table) SetRowHeader(row int, header *AtkObject) {
	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	C.atk_table_set_row_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(header)
}

// SetSummary sets the summary description of the table.
//
// The function takes the following parameters:
//
//   - accessible representing the summary description to set for table.
//
func (table *Table) SetSummary(accessible *AtkObject) {
	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	C.atk_table_set_summary(_arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(accessible)
}

// addColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column was successfully added to the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) addColumnSelection(column int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.add_column_selection

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_add_column_selection(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// addRowSelection adds the specified row to the selection.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if row was successfully added to selection,
//     or 0 if value does not implement this interface.
//
func (table *Table) addRowSelection(row int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.add_row_selection

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C._gotk4_atk1_Table_virtual_add_row_selection(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - column
//   - numDeleted
//
func (table *Table) columnDeleted(column, numDeleted int) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.column_deleted

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = C.gint(numDeleted)

	C._gotk4_atk1_Table_virtual_column_deleted(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(numDeleted)
}

// The function takes the following parameters:
//
//   - column
//   - numInserted
//
func (table *Table) columnInserted(column, numInserted int) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.column_inserted

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = C.gint(numInserted)

	C._gotk4_atk1_Table_virtual_column_inserted(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(numInserted)
}

func (table *Table) columnReordered() {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.column_reordered

	var _arg0 *C.AtkTable // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	C._gotk4_atk1_Table_virtual_column_reordered(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)
}

// Caption gets the caption for the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the table caption, or NULL if
//     value does not implement this interface.
//
func (table *Table) caption() *AtkObject {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_caption

	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C._gotk4_atk1_Table_virtual_get_caption(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// columnAtIndex gets a #gint representing the column at the specified index_.
//
// Deprecated: Since 2.12.
//
// The function takes the following parameters:
//
//   - index_ representing an index in table.
//
// The function returns the following values:
//
//   - gint representing the column at the specified index, or -1 if the table
//     does not implement this method.
//
func (table *Table) columnAtIndex(index_ int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_column_at_index

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(index_)

	_cret = C._gotk4_atk1_Table_virtual_get_column_at_index(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// columnDescription gets the description text of the specified column in the
// table.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - utf8: gchar* representing the column description, or NULL if value does
//     not implement this interface.
//
func (table *Table) columnDescription(column int) string {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_column_description

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_get_column_description(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// columnExtentAt gets the number of columns occupied by the accessible object
// at the specified row and column in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the column extent at specified position, or 0 if value
//     does not implement this interface.
//
func (table *Table) columnExtentAt(row, column int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_column_extent_at

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_get_column_extent_at(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// columnHeader gets the column header of a specified column in an accessible
// table.
//
// The function takes the following parameters:
//
//   - column representing a column in the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the specified column header,
//     or NULL if value does not implement this interface.
//
func (table *Table) columnHeader(column int) *AtkObject {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_column_header

	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_get_column_header(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// indexAt gets a #gint representing the index at the specified row and column.
//
// Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the accessible
// that represents the cell at (row, column).
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the index at specified position. The value -1 is
//     returned if the object at row,column is not a child of table or table
//     does not implement this interface.
//
func (table *Table) indexAt(row, column int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_index_at

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_get_index_at(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// nColumns gets the number of columns in the table.
//
// The function returns the following values:
//
//   - gint representing the number of columns, or 0 if value does not implement
//     this interface.
//
func (table *Table) nColumns() int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_n_columns

	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C._gotk4_atk1_Table_virtual_get_n_columns(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// nRows gets the number of rows in the table.
//
// The function returns the following values:
//
//   - gint representing the number of rows, or 0 if value does not implement
//     this interface.
//
func (table *Table) nRows() int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_n_rows

	var _arg0 *C.AtkTable // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C._gotk4_atk1_Table_virtual_get_n_rows(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// rowAtIndex gets a #gint representing the row at the specified index_.
//
// Deprecated: since 2.12.
//
// The function takes the following parameters:
//
//   - index_ representing an index in table.
//
// The function returns the following values:
//
//   - gint representing the row at the specified index, or -1 if the table does
//     not implement this method.
//
func (table *Table) rowAtIndex(index_ int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_row_at_index

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(index_)

	_cret = C._gotk4_atk1_Table_virtual_get_row_at_index(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(index_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// rowDescription gets the description text of the specified row in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - utf8 (optional): gchar* representing the row description, or NULL if
//     value does not implement this interface.
//
func (table *Table) rowDescription(row int) string {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_row_description

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret *C.gchar    // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C._gotk4_atk1_Table_virtual_get_row_description(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// rowExtentAt gets the number of rows occupied by the accessible object at a
// specified row and column in the table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - gint representing the row extent at specified position, or 0 if value
//     does not implement this interface.
//
func (table *Table) rowExtentAt(row, column int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_row_extent_at

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_get_row_extent_at(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// rowHeader gets the row header of a specified row in an accessible table.
//
// The function takes the following parameters:
//
//   - row representing a row in the table.
//
// The function returns the following values:
//
//   - object (optional): atkObject* representing the specified row header,
//     or NULL if value does not implement this interface.
//
func (table *Table) rowHeader(row int) *AtkObject {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_row_header

	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C._gotk4_atk1_Table_virtual_get_row_header(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _object *AtkObject // out

	if _cret != nil {
		_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _object
}

// selectedColumns gets the selected columns of the table by initializing
// **selected with the selected column numbers. This array should be freed by
// the caller.
//
// The function takes the following parameters:
//
//   - selected that is to contain the selected columns numbers.
//
// The function returns the following values:
//
//   - gint representing the number of selected columns, or 0 if value does not
//     implement this interface.
//
func (table *Table) selectedColumns(selected **int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_selected_columns

	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C._gotk4_atk1_Table_virtual_get_selected_columns(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// selectedRows gets the selected rows of the table by initializing **selected
// with the selected row numbers. This array should be freed by the caller.
//
// The function takes the following parameters:
//
//   - selected that is to contain the selected row numbers.
//
// The function returns the following values:
//
//   - gint representing the number of selected rows, or zero if value does not
//     implement this interface.
//
func (table *Table) selectedRows(selected **int) int {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_selected_rows

	var _arg0 *C.AtkTable // out
	var _arg1 **C.gint    // out
	var _cret C.gint      // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (**C.gint)(unsafe.Pointer(selected))

	_cret = C._gotk4_atk1_Table_virtual_get_selected_rows(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(selected)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Summary gets the summary description of the table.
//
// The function returns the following values:
//
//   - object: atkObject* representing a summary description of the table,
//     or zero if value does not implement this interface.
//
func (table *Table) summary() *AtkObject {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.get_summary

	var _arg0 *C.AtkTable  // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	_cret = C._gotk4_atk1_Table_virtual_get_summary(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// isColumnSelected gets a boolean value indicating whether the specified column
// is selected.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column is selected, or 0 if value does
//     not implement this interface.
//
func (table *Table) isColumnSelected(column int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.is_column_selected

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_is_column_selected(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// isRowSelected gets a boolean value indicating whether the specified row is
// selected.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the row is selected, or 0 if value does not
//     implement this interface.
//
func (table *Table) isRowSelected(row int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.is_row_selected

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C._gotk4_atk1_Table_virtual_is_row_selected(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// isSelected gets a boolean value indicating whether the accessible object at
// the specified row and column is selected.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the cell is selected, or 0 if value does not
//     implement this interface.
//
func (table *Table) isSelected(row, column int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.is_selected

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_is_selected(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (table *Table) modelChanged() {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.model_changed

	var _arg0 *C.AtkTable // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	C._gotk4_atk1_Table_virtual_model_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)
}

// refAt: get a reference to the table cell at row, column. This cell should
// implement the interface TableCell.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - object representing the referred to accessible.
//
func (table *Table) refAt(row, column int) *AtkObject {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.ref_at

	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 C.gint       // out
	var _cret *C.AtkObject // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_ref_at(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(column)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}

// removeColumnSelection adds the specified column to the selection.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the column was successfully removed from the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) removeColumnSelection(column int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.remove_column_selection

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)

	_cret = C._gotk4_atk1_Table_virtual_remove_column_selection(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// removeRowSelection removes the specified row from the selection.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//
// The function returns the following values:
//
//   - ok: gboolean representing if the row was successfully removed from the
//     selection, or 0 if value does not implement this interface.
//
func (table *Table) removeRowSelection(row int) bool {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.remove_row_selection

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)

	_cret = C._gotk4_atk1_Table_virtual_remove_row_selection(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - row
//   - numDeleted
//
func (table *Table) rowDeleted(row, numDeleted int) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.row_deleted

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(numDeleted)

	C._gotk4_atk1_Table_virtual_row_deleted(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(numDeleted)
}

// The function takes the following parameters:
//
//   - row
//   - numInserted
//
func (table *Table) rowInserted(row, numInserted int) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.row_inserted

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 C.gint      // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = C.gint(numInserted)

	C._gotk4_atk1_Table_virtual_row_inserted(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(numInserted)
}

func (table *Table) rowReordered() {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.row_reordered

	var _arg0 *C.AtkTable // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))

	C._gotk4_atk1_Table_virtual_row_reordered(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(table)
}

// setCaption sets the caption for the table.
//
// The function takes the following parameters:
//
//   - caption representing the caption to set for table.
//
func (table *Table) setCaption(caption *AtkObject) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_caption

	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(caption).Native()))

	C._gotk4_atk1_Table_virtual_set_caption(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(caption)
}

// setColumnDescription sets the description text for the specified column of
// the table.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//   - description representing the description text to set for the specified
//     column of the table.
//
func (table *Table) setColumnDescription(column int, description string) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_column_description

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C._gotk4_atk1_Table_virtual_set_column_description(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(description)
}

// setColumnHeader sets the specified column header to header.
//
// The function takes the following parameters:
//
//   - column representing a column in table.
//   - header: Table.
//
func (table *Table) setColumnHeader(column int, header *AtkObject) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_column_header

	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(column)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	C._gotk4_atk1_Table_virtual_set_column_header(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(column)
	runtime.KeepAlive(header)
}

// setRowDescription sets the description text for the specified row of table.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - description representing the description text to set for the specified
//     row of table.
//
func (table *Table) setRowDescription(row int, description string) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_row_description

	var _arg0 *C.AtkTable // out
	var _arg1 C.gint      // out
	var _arg2 *C.gchar    // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg2))

	C._gotk4_atk1_Table_virtual_set_row_description(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(description)
}

// setRowHeader sets the specified row header to header.
//
// The function takes the following parameters:
//
//   - row representing a row in table.
//   - header: Table.
//
func (table *Table) setRowHeader(row int, header *AtkObject) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_row_header

	var _arg0 *C.AtkTable  // out
	var _arg1 C.gint       // out
	var _arg2 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = C.gint(row)
	_arg2 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(header).Native()))

	C._gotk4_atk1_Table_virtual_set_row_header(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(table)
	runtime.KeepAlive(row)
	runtime.KeepAlive(header)
}

// setSummary sets the summary description of the table.
//
// The function takes the following parameters:
//
//   - accessible representing the summary description to set for table.
//
func (table *Table) setSummary(accessible *AtkObject) {
	gclass := (*C.AtkTableIface)(coreglib.PeekParentClass(table))
	fnarg := gclass.set_summary

	var _arg0 *C.AtkTable  // out
	var _arg1 *C.AtkObject // out

	_arg0 = (*C.AtkTable)(unsafe.Pointer(coreglib.InternObject(table).Native()))
	_arg1 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	C._gotk4_atk1_Table_virtual_set_summary(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(table)
	runtime.KeepAlive(accessible)
}

// TableIface: instance of this type is always passed by reference.
type TableIface struct {
	*tableIface
}

// tableIface is the struct that's finalized.
type tableIface struct {
	native *C.AtkTableIface
}
