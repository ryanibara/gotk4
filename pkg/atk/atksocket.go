// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_SocketClass_embed(AtkSocket*, gchar*);
import "C"

// GType values.
var (
	GTypeSocket = coreglib.Type(C.atk_socket_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocket, F: marshalSocket},
	})
}

// SocketOverrider contains methods that are overridable.
type SocketOverrider interface {
	// Embed embeds the children of an Plug as the children of the Socket. The
	// plug may be in the same process or in a different process.
	//
	// The class item used by this function should be filled in by the IPC layer
	// (usually at-spi2-atk). The implementor of the AtkSocket should call this
	// function and pass the id for the plug as returned by atk_plug_get_id().
	// It is the responsibility of the application to pass the plug id on to the
	// process implementing the Socket as needed.
	//
	// The function takes the following parameters:
	//
	//    - plugId: ID of an Plug.
	//
	Embed(plugId string)
}

// Socket: together with Plug, Socket provides the ability to embed accessibles
// from one process into another in a fashion that is transparent to assistive
// technologies. Socket works as the container of Plug, embedding it using the
// method atk_socket_embed(). Any accessible contained in the Plug will appear
// to the assistive technologies as being inside the application that created
// the Socket.
//
// The communication between a Socket and a Plug is done by the IPC layer of the
// accessibility framework, normally implemented by the D-Bus based
// implementation of AT-SPI (at-spi2). If that is the case, at-spi-atk2 is the
// responsible to implement the abstract methods atk_plug_get_id() and
// atk_socket_embed(), so an ATK implementor shouldn't reimplement them. The
// process that contains the Plug is responsible to send the ID returned by
// atk_plug_id() to the process that contains the Socket, so it could call the
// method atk_socket_embed() in order to embed it.
//
// For the same reasons, an implementor doesn't need to implement
// atk_object_get_n_accessible_children() and atk_object_ref_accessible_child().
// All the logic related to those functions will be implemented by the IPC
// layer.
type Socket struct {
	_ [0]func() // equal guard
	AtkObject

	*coreglib.Object
	Component
}

var (
	_ coreglib.Objector = (*Socket)(nil)
)

func init() {
	coreglib.RegisterClassInfo(coreglib.ClassTypeInfo{
		GType:         GTypeSocket,
		GoType:        reflect.TypeOf((*Socket)(nil)),
		InitClass:     initClassSocket,
		FinalizeClass: finalizeClassSocket,
	})
}

func initClassSocket(gclass unsafe.Pointer, goval any) {

	pclass := (*C.AtkSocketClass)(unsafe.Pointer(gclass))

	if _, ok := goval.(interface{ Embed(plugId string) }); ok {
		pclass.embed = (*[0]byte)(C._gotk4_atk1_SocketClass_embed)
	}
	if goval, ok := goval.(interface{ InitSocket(*SocketClass) }); ok {
		klass := (*SocketClass)(gextras.NewStructNative(gclass))
		goval.InitSocket(klass)
	}
}

func finalizeClassSocket(gclass unsafe.Pointer, goval any) {
	if goval, ok := goval.(interface{ FinalizeSocket(*SocketClass) }); ok {
		klass := (*SocketClass)(gextras.NewStructNative(gclass))
		goval.FinalizeSocket(klass)
	}
}

//export _gotk4_atk1_SocketClass_embed
func _gotk4_atk1_SocketClass_embed(arg0 *C.AtkSocket, arg1 *C.gchar) {
	goval := coreglib.GoObjectFromInstance(unsafe.Pointer(arg0))
	iface := goval.(interface{ Embed(plugId string) })

	var _plugId string // out

	_plugId = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	iface.Embed(_plugId)
}

func wrapSocket(obj *coreglib.Object) *Socket {
	return &Socket{
		AtkObject: AtkObject{
			Object: obj,
		},
		Object: obj,
		Component: Component{
			Object: obj,
		},
	}
}

func marshalSocket(p uintptr) (interface{}, error) {
	return wrapSocket(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSocket creates a new Socket.
//
// The function returns the following values:
//
//    - socket: newly created Socket instance.
//
func NewSocket() *Socket {
	var _cret *C.AtkObject // in

	_cret = C.atk_socket_new()

	var _socket *Socket // out

	_socket = wrapSocket(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _socket
}

// Embed embeds the children of an Plug as the children of the Socket. The plug
// may be in the same process or in a different process.
//
// The class item used by this function should be filled in by the IPC layer
// (usually at-spi2-atk). The implementor of the AtkSocket should call this
// function and pass the id for the plug as returned by atk_plug_get_id(). It is
// the responsibility of the application to pass the plug id on to the process
// implementing the Socket as needed.
//
// The function takes the following parameters:
//
//    - plugId: ID of an Plug.
//
func (obj *Socket) Embed(plugId string) {
	var _arg0 *C.AtkSocket // out
	var _arg1 *C.gchar     // out

	_arg0 = (*C.AtkSocket)(unsafe.Pointer(coreglib.InternObject(obj).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(plugId)))
	defer C.free(unsafe.Pointer(_arg1))

	C.atk_socket_embed(_arg0, _arg1)
	runtime.KeepAlive(obj)
	runtime.KeepAlive(plugId)
}

// IsOccupied determines whether or not the socket has an embedded plug.
//
// The function returns the following values:
//
//    - ok: TRUE if a plug is embedded in the socket.
//
func (obj *Socket) IsOccupied() bool {
	var _arg0 *C.AtkSocket // out
	var _cret C.gboolean   // in

	_arg0 = (*C.AtkSocket)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	_cret = C.atk_socket_is_occupied(_arg0)
	runtime.KeepAlive(obj)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SocketClass: instance of this type is always passed by reference.
type SocketClass struct {
	*socketClass
}

// socketClass is the struct that's finalized.
type socketClass struct {
	native *C.AtkSocketClass
}

func (s *SocketClass) ParentClass() *ObjectClass {
	valptr := &s.native.parent_class
	var _v *ObjectClass // out
	_v = (*ObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
