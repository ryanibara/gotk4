// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_atk1_SelectionIface_add_selection(void*, gint);
// extern gboolean _gotk4_atk1_SelectionIface_clear_selection(void*);
// extern gboolean _gotk4_atk1_SelectionIface_is_child_selected(void*, gint);
// extern gboolean _gotk4_atk1_SelectionIface_remove_selection(void*, gint);
// extern gboolean _gotk4_atk1_SelectionIface_select_all_selection(void*);
// extern gint _gotk4_atk1_SelectionIface_get_selection_count(void*);
// extern void _gotk4_atk1_SelectionIface_selection_changed(void*);
// extern void _gotk4_atk1_Selection_ConnectSelectionChanged(gpointer, guintptr);
// extern void* _gotk4_atk1_SelectionIface_ref_selection(void*, gint);
import "C"

// GTypeSelection returns the GType for the type Selection.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeSelection() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Atk", "Selection").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalSelection)
	return gtype
}

// SelectionOverrider contains methods that are overridable.
type SelectionOverrider interface {
	// AddSelection adds the specified accessible child of the object to the
	// object's selection.
	//
	// The function takes the following parameters:
	//
	//    - i specifying the child index.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if success, FALSE otherwise.
	//
	AddSelection(i int32) bool
	// ClearSelection clears the selection in the object so that no children in
	// the object are selected.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if success, FALSE otherwise.
	//
	ClearSelection() bool
	// SelectionCount gets the number of accessible children currently selected.
	// Note: callers should not rely on NULL or on a zero value for indication
	// of whether AtkSelectionIface is implemented, they should use type
	// checking/interface checking macros or the atk_get_accessible_value()
	// convenience method.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of items selected, or 0 if selection
	//      does not implement this interface.
	//
	SelectionCount() int32
	// IsChildSelected determines if the current child of this object is
	// selected Note: callers should not rely on NULL or on a zero value for
	// indication of whether AtkSelectionIface is implemented, they should use
	// type checking/interface checking macros or the atk_get_accessible_value()
	// convenience method.
	//
	// The function takes the following parameters:
	//
	//    - i specifying the child index.
	//
	// The function returns the following values:
	//
	//    - ok: gboolean representing the specified child is selected, or 0 if
	//      selection does not implement this interface.
	//
	IsChildSelected(i int32) bool
	// RefSelection gets a reference to the accessible object representing the
	// specified selected child of the object. Note: callers should not rely on
	// NULL or on a zero value for indication of whether AtkSelectionIface is
	// implemented, they should use type checking/interface checking macros or
	// the atk_get_accessible_value() convenience method.
	//
	// The function takes the following parameters:
	//
	//    - i specifying the index in the selection set. (e.g. the ith selection
	//      as opposed to the ith child).
	//
	// The function returns the following values:
	//
	//    - object (optional) representing the selected accessible, or NULL if
	//      selection does not implement this interface.
	//
	RefSelection(i int32) *ObjectClass
	// RemoveSelection removes the specified child of the object from the
	// object's selection.
	//
	// The function takes the following parameters:
	//
	//    - i specifying the index in the selection set. (e.g. the ith selection
	//      as opposed to the ith child).
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if success, FALSE otherwise.
	//
	RemoveSelection(i int32) bool
	// SelectAllSelection causes every child of the object to be selected if the
	// object supports multiple selections.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if success, FALSE otherwise.
	//
	SelectAllSelection() bool
	SelectionChanged()
}

// Selection should be implemented by UI components with children which are
// exposed by #atk_object_ref_child and #atk_object_get_n_children, if the use
// of the parent UI component ordinarily involves selection of one or more of
// the objects corresponding to those Object children - for example, selectable
// lists.
//
// Note that other types of "selection" (for instance text selection) are
// accomplished a other ATK interfaces - Selection is limited to the
// selection/deselection of children.
//
// Selection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Selection struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Selection)(nil)
)

// Selectioner describes Selection's interface methods.
type Selectioner interface {
	coreglib.Objector

	// AddSelection adds the specified accessible child of the object to the
	// object's selection.
	AddSelection(i int32) bool
	// ClearSelection clears the selection in the object so that no children in
	// the object are selected.
	ClearSelection() bool
	// SelectionCount gets the number of accessible children currently selected.
	SelectionCount() int32
	// IsChildSelected determines if the current child of this object is
	// selected Note: callers should not rely on NULL or on a zero value for
	// indication of whether AtkSelectionIface is implemented, they should use
	// type checking/interface checking macros or the atk_get_accessible_value()
	// convenience method.
	IsChildSelected(i int32) bool
	// RefSelection gets a reference to the accessible object representing the
	// specified selected child of the object.
	RefSelection(i int32) *ObjectClass
	// RemoveSelection removes the specified child of the object from the
	// object's selection.
	RemoveSelection(i int32) bool
	// SelectAllSelection causes every child of the object to be selected if the
	// object supports multiple selections.
	SelectAllSelection() bool

	// Selection-changed: "selection-changed" signal is emitted by an object
	// which implements AtkSelection interface when the selection changes.
	ConnectSelectionChanged(func()) coreglib.SignalHandle
}

var _ Selectioner = (*Selection)(nil)

func ifaceInitSelectioner(gifacePtr, data C.gpointer) {
	iface := girepository.MustFind("Atk", "SelectionIface")
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("add_selection"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_add_selection)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("clear_selection"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_clear_selection)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("get_selection_count"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_get_selection_count)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("is_child_selected"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_is_child_selected)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("ref_selection"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_ref_selection)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("remove_selection"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_remove_selection)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("select_all_selection"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_select_all_selection)
	*(*unsafe.Pointer)(unsafe.Add(unsafe.Pointer(gifacePtr), iface.StructFieldOffset("selection_changed"))) = unsafe.Pointer(C._gotk4_atk1_SelectionIface_selection_changed)
}

//export _gotk4_atk1_SelectionIface_add_selection
func _gotk4_atk1_SelectionIface_add_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	var _i int32 // out

	_i = int32(arg1)

	ok := iface.AddSelection(_i)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_clear_selection
func _gotk4_atk1_SelectionIface_clear_selection(arg0 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	ok := iface.ClearSelection()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_get_selection_count
func _gotk4_atk1_SelectionIface_get_selection_count(arg0 *C.void) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	gint := iface.SelectionCount()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_SelectionIface_is_child_selected
func _gotk4_atk1_SelectionIface_is_child_selected(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	var _i int32 // out

	_i = int32(arg1)

	ok := iface.IsChildSelected(_i)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_ref_selection
func _gotk4_atk1_SelectionIface_ref_selection(arg0 *C.void, arg1 C.gint) (cret *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	var _i int32 // out

	_i = int32(arg1)

	object := iface.RefSelection(_i)

	if object != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(object).Native()))
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_remove_selection
func _gotk4_atk1_SelectionIface_remove_selection(arg0 *C.void, arg1 C.gint) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	var _i int32 // out

	_i = int32(arg1)

	ok := iface.RemoveSelection(_i)

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_select_all_selection
func _gotk4_atk1_SelectionIface_select_all_selection(arg0 *C.void) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	ok := iface.SelectAllSelection()

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_SelectionIface_selection_changed
func _gotk4_atk1_SelectionIface_selection_changed(arg0 *C.void) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(SelectionOverrider)

	iface.SelectionChanged()
}

func wrapSelection(obj *coreglib.Object) *Selection {
	return &Selection{
		Object: obj,
	}
}

func marshalSelection(p uintptr) (interface{}, error) {
	return wrapSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_atk1_Selection_ConnectSelectionChanged
func _gotk4_atk1_Selection_ConnectSelectionChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectSelectionChanged: "selection-changed" signal is emitted by an object
// which implements AtkSelection interface when the selection changes.
func (selection *Selection) ConnectSelectionChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(selection, "selection-changed", false, unsafe.Pointer(C._gotk4_atk1_Selection_ConnectSelectionChanged), f)
}

// AddSelection adds the specified accessible child of the object to the
// object's selection.
//
// The function takes the following parameters:
//
//    - i specifying the child index.
//
// The function returns the following values:
//
//    - ok: TRUE if success, FALSE otherwise.
//
func (selection *Selection) AddSelection(i int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(i)

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("add_selection", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)
	runtime.KeepAlive(i)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// ClearSelection clears the selection in the object so that no children in the
// object are selected.
//
// The function returns the following values:
//
//    - ok: TRUE if success, FALSE otherwise.
//
func (selection *Selection) ClearSelection() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("clear_selection", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SelectionCount gets the number of accessible children currently selected.
// Note: callers should not rely on NULL or on a zero value for indication of
// whether AtkSelectionIface is implemented, they should use type
// checking/interface checking macros or the atk_get_accessible_value()
// convenience method.
//
// The function returns the following values:
//
//    - gint representing the number of items selected, or 0 if selection does
//      not implement this interface.
//
func (selection *Selection) SelectionCount() int32 {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("get_selection_count", _args[:], nil)
	_cret := *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)

	var _gint int32 // out

	_gint = int32(*(*C.gint)(unsafe.Pointer(&_cret)))

	return _gint
}

// IsChildSelected determines if the current child of this object is selected
// Note: callers should not rely on NULL or on a zero value for indication of
// whether AtkSelectionIface is implemented, they should use type
// checking/interface checking macros or the atk_get_accessible_value()
// convenience method.
//
// The function takes the following parameters:
//
//    - i specifying the child index.
//
// The function returns the following values:
//
//    - ok: gboolean representing the specified child is selected, or 0 if
//      selection does not implement this interface.
//
func (selection *Selection) IsChildSelected(i int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(i)

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("is_child_selected", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)
	runtime.KeepAlive(i)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// RefSelection gets a reference to the accessible object representing the
// specified selected child of the object. Note: callers should not rely on NULL
// or on a zero value for indication of whether AtkSelectionIface is
// implemented, they should use type checking/interface checking macros or the
// atk_get_accessible_value() convenience method.
//
// The function takes the following parameters:
//
//    - i specifying the index in the selection set. (e.g. the ith selection as
//      opposed to the ith child).
//
// The function returns the following values:
//
//    - object (optional) representing the selected accessible, or NULL if
//      selection does not implement this interface.
//
func (selection *Selection) RefSelection(i int32) *ObjectClass {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(i)

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("ref_selection", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)
	runtime.KeepAlive(i)

	var _object *ObjectClass // out

	if *(**C.void)(unsafe.Pointer(&_cret)) != nil {
		_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))
	}

	return _object
}

// RemoveSelection removes the specified child of the object from the object's
// selection.
//
// The function takes the following parameters:
//
//    - i specifying the index in the selection set. (e.g. the ith selection as
//      opposed to the ith child).
//
// The function returns the following values:
//
//    - ok: TRUE if success, FALSE otherwise.
//
func (selection *Selection) RemoveSelection(i int32) bool {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))
	*(*C.gint)(unsafe.Pointer(&_args[1])) = C.gint(i)

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("remove_selection", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)
	runtime.KeepAlive(i)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}

// SelectAllSelection causes every child of the object to be selected if the
// object supports multiple selections.
//
// The function returns the following values:
//
//    - ok: TRUE if success, FALSE otherwise.
//
func (selection *Selection) SelectAllSelection() bool {
	var _args [1]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(selection).Native()))

	_info := girepository.MustFind("Atk", "Selection")
	_gret := _info.InvokeIfaceMethod("select_all_selection", _args[:], nil)
	_cret := *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(selection)

	var _ok bool // out

	if *(*C.gboolean)(unsafe.Pointer(&_cret)) != 0 {
		_ok = true
	}

	return _ok
}
