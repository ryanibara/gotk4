// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gboolean _gotk4_atk1_Document_virtual_set_document_attribute(void* fnptr, AtkDocument* arg0, gchar* arg1, gchar* arg2) {
//   return ((gboolean (*)(AtkDocument*, gchar*, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// gchar* _gotk4_atk1_Document_virtual_get_document_attribute_value(void* fnptr, AtkDocument* arg0, gchar* arg1) {
//   return ((gchar* (*)(AtkDocument*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// AttributeValue retrieves the value of the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//    - attributeName: character string representing the name of the attribute
//      whose value is being queried.
//
// The function returns the following values:
//
//    - utf8 (optional): string value associated with the named attribute for
//      this document, or NULL if a value for attribute_name has not been
//      specified for this document.
//
func (document *Document) AttributeValue(attributeName string) string {
	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_document_get_attribute_value(_arg0, _arg1)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetAttributeValue sets the value for the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//    - attributeName: character string representing the name of the attribute
//      whose value is being set.
//    - attributeValue: string value to be associated with attribute_name.
//
// The function returns the following values:
//
//    - ok: TRUE if attribute_value is successfully associated with
//      attribute_name for this document, and FALSE if if the document does not
//      allow the attribute to be modified.
//
func (document *Document) SetAttributeValue(attributeName, attributeValue string) bool {
	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(attributeValue)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.atk_document_set_attribute_value(_arg0, _arg1, _arg2)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)
	runtime.KeepAlive(attributeValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// documentAttributeValue retrieves the value of the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//    - attributeName: character string representing the name of the attribute
//      whose value is being queried.
//
// The function returns the following values:
//
//    - utf8 (optional): string value associated with the named attribute for
//      this document, or NULL if a value for attribute_name has not been
//      specified for this document.
//
func (document *Document) documentAttributeValue(attributeName string) string {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_document_attribute_value

	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_atk1_Document_virtual_get_document_attribute_value(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// setDocumentAttribute sets the value for the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//    - attributeName: character string representing the name of the attribute
//      whose value is being set.
//    - attributeValue: string value to be associated with attribute_name.
//
// The function returns the following values:
//
//    - ok: TRUE if attribute_value is successfully associated with
//      attribute_name for this document, and FALSE if if the document does not
//      allow the attribute to be modified.
//
func (document *Document) setDocumentAttribute(attributeName, attributeValue string) bool {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.set_document_attribute

	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(attributeValue)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C._gotk4_atk1_Document_virtual_set_document_attribute(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)
	runtime.KeepAlive(attributeValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
