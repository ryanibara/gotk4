// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gboolean _gotk4_atk1_Text_virtual_scroll_substring_to(void* fnptr, AtkText* arg0, gint arg1, gint arg2, AtkScrollType arg3) {
//   return ((gboolean (*)(AtkText*, gint, gint, AtkScrollType))(fnptr))(arg0, arg1, arg2, arg3);
// };
// gboolean _gotk4_atk1_Text_virtual_scroll_substring_to_point(void* fnptr, AtkText* arg0, gint arg1, gint arg2, AtkCoordType arg3, gint arg4, gint arg5) {
//   return ((gboolean (*)(AtkText*, gint, gint, AtkCoordType, gint, gint))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
import "C"

// ScrollSubstringTo makes a substring of text visible on the screen by
// scrolling all necessary parents.
//
// The function takes the following parameters:
//
//    - startOffset: start offset in the text.
//    - endOffset: end offset in the text, or -1 for the end of the text.
//    - typ: specify where the object should be made visible.
//
// The function returns the following values:
//
//    - ok: whether scrolling was successful.
//
func (text *Text) ScrollSubstringTo(startOffset, endOffset int, typ ScrollType) bool {
	var _arg0 *C.AtkText      // out
	var _arg1 C.gint          // out
	var _arg2 C.gint          // out
	var _arg3 C.AtkScrollType // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(startOffset)
	_arg2 = C.gint(endOffset)
	_arg3 = C.AtkScrollType(typ)

	_cret = C.atk_text_scroll_substring_to(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(text)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ScrollSubstringToPoint: move the top-left of a substring of text to a given
// position of the screen by scrolling all necessary parents.
//
// The function takes the following parameters:
//
//    - startOffset: start offset in the text.
//    - endOffset: end offset in the text, or -1 for the end of the text.
//    - coords: specify whether coordinates are relative to the screen or to the
//      parent object.
//    - x: x-position where to scroll to.
//    - y: y-position where to scroll to.
//
// The function returns the following values:
//
//    - ok: whether scrolling was successful.
//
func (text *Text) ScrollSubstringToPoint(startOffset, endOffset int, coords CoordType, x, y int) bool {
	var _arg0 *C.AtkText     // out
	var _arg1 C.gint         // out
	var _arg2 C.gint         // out
	var _arg3 C.AtkCoordType // out
	var _arg4 C.gint         // out
	var _arg5 C.gint         // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(startOffset)
	_arg2 = C.gint(endOffset)
	_arg3 = C.AtkCoordType(coords)
	_arg4 = C.gint(x)
	_arg5 = C.gint(y)

	_cret = C.atk_text_scroll_substring_to_point(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(text)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)
	runtime.KeepAlive(coords)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// scrollSubstringTo makes a substring of text visible on the screen by
// scrolling all necessary parents.
//
// The function takes the following parameters:
//
//    - startOffset: start offset in the text.
//    - endOffset: end offset in the text, or -1 for the end of the text.
//    - typ: specify where the object should be made visible.
//
// The function returns the following values:
//
//    - ok: whether scrolling was successful.
//
func (text *Text) scrollSubstringTo(startOffset, endOffset int, typ ScrollType) bool {
	gclass := (*C.AtkTextIface)(coreglib.PeekParentClass(text))
	fnarg := gclass.scroll_substring_to

	var _arg0 *C.AtkText      // out
	var _arg1 C.gint          // out
	var _arg2 C.gint          // out
	var _arg3 C.AtkScrollType // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(startOffset)
	_arg2 = C.gint(endOffset)
	_arg3 = C.AtkScrollType(typ)

	_cret = C._gotk4_atk1_Text_virtual_scroll_substring_to(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(text)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// scrollSubstringToPoint: move the top-left of a substring of text to a given
// position of the screen by scrolling all necessary parents.
//
// The function takes the following parameters:
//
//    - startOffset: start offset in the text.
//    - endOffset: end offset in the text, or -1 for the end of the text.
//    - coords: specify whether coordinates are relative to the screen or to the
//      parent object.
//    - x: x-position where to scroll to.
//    - y: y-position where to scroll to.
//
// The function returns the following values:
//
//    - ok: whether scrolling was successful.
//
func (text *Text) scrollSubstringToPoint(startOffset, endOffset int, coords CoordType, x, y int) bool {
	gclass := (*C.AtkTextIface)(coreglib.PeekParentClass(text))
	fnarg := gclass.scroll_substring_to_point

	var _arg0 *C.AtkText     // out
	var _arg1 C.gint         // out
	var _arg2 C.gint         // out
	var _arg3 C.AtkCoordType // out
	var _arg4 C.gint         // out
	var _arg5 C.gint         // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(startOffset)
	_arg2 = C.gint(endOffset)
	_arg3 = C.AtkCoordType(coords)
	_arg4 = C.gint(x)
	_arg5 = C.gint(y)

	_cret = C._gotk4_atk1_Text_virtual_scroll_substring_to_point(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(text)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)
	runtime.KeepAlive(coords)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
