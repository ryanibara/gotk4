// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gdouble _gotk4_atk1_Component_virtual_get_alpha(void* fnptr, AtkComponent* arg0) {
//   return ((gdouble (*)(AtkComponent*))(fnptr))(arg0);
// };
import "C"

// Alpha returns the alpha value (i.e. the opacity) for this component, on a
// scale from 0 (fully transparent) to 1.0 (fully opaque).
//
// The function returns the following values:
//
//    - gdouble: alpha value from 0 to 1.0, inclusive.
//
func (component *Component) Alpha() float64 {
	var _arg0 *C.AtkComponent // out
	var _cret C.gdouble       // in

	_arg0 = (*C.AtkComponent)(unsafe.Pointer(coreglib.InternObject(component).Native()))

	_cret = C.atk_component_get_alpha(_arg0)
	runtime.KeepAlive(component)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Alpha returns the alpha value (i.e. the opacity) for this component, on a
// scale from 0 (fully transparent) to 1.0 (fully opaque).
//
// The function returns the following values:
//
//    - gdouble: alpha value from 0 to 1.0, inclusive.
//
func (component *Component) alpha() float64 {
	gclass := (*C.AtkComponentIface)(coreglib.PeekParentClass(component))
	fnarg := gclass.get_alpha

	var _arg0 *C.AtkComponent // out
	var _cret C.gdouble       // in

	_arg0 = (*C.AtkComponent)(unsafe.Pointer(coreglib.InternObject(component).Native()))

	_cret = C._gotk4_atk1_Component_virtual_get_alpha(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(component)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}
