// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gchar* _gotk4_atk1_Text_virtual_get_string_at_offset(void* fnptr, AtkText* arg0, gint arg1, AtkTextGranularity arg2, gint* arg3, gint* arg4) {
//   return ((gchar* (*)(AtkText*, gint, AtkTextGranularity, gint*, gint*))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
import "C"

// StringAtOffset gets a portion of the text exposed through an Text according
// to a given offset and a specific granularity, along with the start and end
// offsets defining the boundaries of such a portion of text.
//
// If granularity is ATK_TEXT_GRANULARITY_CHAR the character at the offset is
// returned.
//
// If granularity is ATK_TEXT_GRANULARITY_WORD the returned string is from the
// word start at or before the offset to the word start after the offset.
//
// The returned string will contain the word at the offset if the offset is
// inside a word and will contain the word before the offset if the offset is
// not inside a word.
//
// If granularity is ATK_TEXT_GRANULARITY_SENTENCE the returned string is from
// the sentence start at or before the offset to the sentence start after the
// offset.
//
// The returned string will contain the sentence at the offset if the offset is
// inside a sentence and will contain the sentence before the offset if the
// offset is not inside a sentence.
//
// If granularity is ATK_TEXT_GRANULARITY_LINE the returned string is from the
// line start at or before the offset to the line start after the offset.
//
// If granularity is ATK_TEXT_GRANULARITY_PARAGRAPH the returned string is from
// the start of the paragraph at or before the offset to the start of the
// following paragraph after the offset.
//
// The function takes the following parameters:
//
//    - offset: position.
//    - granularity: TextGranularity.
//
// The function returns the following values:
//
//    - startOffset: starting character offset of the returned string, or -1 in
//      the case of error (e.g. invalid offset, not implemented).
//    - endOffset: offset of the first character after the returned string, or -1
//      in the case of error (e.g. invalid offset, not implemented).
//    - utf8 (optional): newly allocated string containing the text at the offset
//      bounded by the specified granularity. Use g_free() to free the returned
//      string. Returns NULL if the offset is invalid or no implementation is
//      available.
//
func (text *Text) StringAtOffset(offset int, granularity TextGranularity) (startOffset, endOffset int, utf8 string) {
	var _arg0 *C.AtkText           // out
	var _arg1 C.gint               // out
	var _arg2 C.AtkTextGranularity // out
	var _arg3 C.gint               // in
	var _arg4 C.gint               // in
	var _cret *C.gchar             // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(offset)
	_arg2 = C.AtkTextGranularity(granularity)

	_cret = C.atk_text_get_string_at_offset(_arg0, _arg1, _arg2, &_arg3, &_arg4)
	runtime.KeepAlive(text)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(granularity)

	var _startOffset int // out
	var _endOffset int   // out
	var _utf8 string     // out

	_startOffset = int(_arg3)
	_endOffset = int(_arg4)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _startOffset, _endOffset, _utf8
}

// stringAtOffset gets a portion of the text exposed through an Text according
// to a given offset and a specific granularity, along with the start and end
// offsets defining the boundaries of such a portion of text.
//
// If granularity is ATK_TEXT_GRANULARITY_CHAR the character at the offset is
// returned.
//
// If granularity is ATK_TEXT_GRANULARITY_WORD the returned string is from the
// word start at or before the offset to the word start after the offset.
//
// The returned string will contain the word at the offset if the offset is
// inside a word and will contain the word before the offset if the offset is
// not inside a word.
//
// If granularity is ATK_TEXT_GRANULARITY_SENTENCE the returned string is from
// the sentence start at or before the offset to the sentence start after the
// offset.
//
// The returned string will contain the sentence at the offset if the offset is
// inside a sentence and will contain the sentence before the offset if the
// offset is not inside a sentence.
//
// If granularity is ATK_TEXT_GRANULARITY_LINE the returned string is from the
// line start at or before the offset to the line start after the offset.
//
// If granularity is ATK_TEXT_GRANULARITY_PARAGRAPH the returned string is from
// the start of the paragraph at or before the offset to the start of the
// following paragraph after the offset.
//
// The function takes the following parameters:
//
//    - offset: position.
//    - granularity: TextGranularity.
//
// The function returns the following values:
//
//    - startOffset: starting character offset of the returned string, or -1 in
//      the case of error (e.g. invalid offset, not implemented).
//    - endOffset: offset of the first character after the returned string, or -1
//      in the case of error (e.g. invalid offset, not implemented).
//    - utf8 (optional): newly allocated string containing the text at the offset
//      bounded by the specified granularity. Use g_free() to free the returned
//      string. Returns NULL if the offset is invalid or no implementation is
//      available.
//
func (text *Text) stringAtOffset(offset int, granularity TextGranularity) (startOffset, endOffset int, utf8 string) {
	gclass := (*C.AtkTextIface)(coreglib.PeekParentClass(text))
	fnarg := gclass.get_string_at_offset

	var _arg0 *C.AtkText           // out
	var _arg1 C.gint               // out
	var _arg2 C.AtkTextGranularity // out
	var _arg3 C.gint               // in
	var _arg4 C.gint               // in
	var _cret *C.gchar             // in

	_arg0 = (*C.AtkText)(unsafe.Pointer(coreglib.InternObject(text).Native()))
	_arg1 = C.gint(offset)
	_arg2 = C.AtkTextGranularity(granularity)

	_cret = C._gotk4_atk1_Text_virtual_get_string_at_offset(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, &_arg3, &_arg4)
	runtime.KeepAlive(text)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(granularity)

	var _startOffset int // out
	var _endOffset int   // out
	var _utf8 string     // out

	_startOffset = int(_arg3)
	_endOffset = int(_arg4)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _startOffset, _endOffset, _utf8
}
