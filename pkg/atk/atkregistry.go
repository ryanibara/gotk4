// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GTypeRegistry returns the GType for the type Registry.
//
// This function has the side effect of registering a GValue marshaler
// globally. Use this if you need that for any reason. The function is
// concurrently safe to use.
func GTypeRegistry() coreglib.Type {
	gtype := coreglib.Type(girepository.MustFind("Atk", "Registry").RegisteredGType())
	coreglib.RegisterGValueMarshaler(gtype, marshalRegistry)
	return gtype
}

// GetDefaultRegistry gets a default implementation of the ObjectFactory/type
// registry. Note: For most toolkit maintainers, this will be the correct
// registry for registering new Object factories. Following a call to this
// function, maintainers may call atk_registry_set_factory_type() to associate
// an ObjectFactory subclass with the GType of objects for whom accessibility
// information will be provided.
//
// The function returns the following values:
//
//    - registry: default implementation of the ObjectFactory/type registry.
//
func GetDefaultRegistry() *Registry {
	_info := girepository.MustFind("Atk", "get_default_registry")
	_gret := _info.InvokeFunction(nil, nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	var _registry *Registry // out

	_registry = wrapRegistry(coreglib.AssumeOwnership(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _registry
}

// RegistryOverrider contains methods that are overridable.
type RegistryOverrider interface {
}

// Registry is normally used to create appropriate ATK "peers" for user
// interface components. Application developers usually need only interact with
// the AtkRegistry by associating appropriate ATK implementation classes with
// GObject classes via the atk_registry_set_factory_type call, passing the
// appropriate GType for application custom widget classes.
type Registry struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Registry)(nil)
)

func classInitRegistrier(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapRegistry(obj *coreglib.Object) *Registry {
	return &Registry{
		Object: obj,
	}
}

func marshalRegistry(p uintptr) (interface{}, error) {
	return wrapRegistry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Factory gets an ObjectFactory appropriate for creating Objects appropriate
// for type.
//
// The function takes the following parameters:
//
//    - typ with which to look up the associated ObjectFactory.
//
// The function returns the following values:
//
//    - objectFactory appropriate for creating Objects appropriate for type.
//
func (registry *Registry) Factory(typ coreglib.Type) *ObjectFactory {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(registry).Native()))
	*(*C.GType)(unsafe.Pointer(&_args[1])) = C.GType(typ)

	_info := girepository.MustFind("Atk", "Registry")
	_gret := _info.InvokeClassMethod("get_factory", _args[:], nil)
	_cret := *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(registry)
	runtime.KeepAlive(typ)

	var _objectFactory *ObjectFactory // out

	_objectFactory = wrapObjectFactory(coreglib.Take(unsafe.Pointer(*(**C.void)(unsafe.Pointer(&_cret)))))

	return _objectFactory
}

// FactoryType provides a #GType indicating the ObjectFactory subclass
// associated with type.
//
// The function takes the following parameters:
//
//    - typ with which to look up the associated ObjectFactory subclass.
//
// The function returns the following values:
//
//    - gType associated with type type.
//
func (registry *Registry) FactoryType(typ coreglib.Type) coreglib.Type {
	var _args [2]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(registry).Native()))
	*(*C.GType)(unsafe.Pointer(&_args[1])) = C.GType(typ)

	_info := girepository.MustFind("Atk", "Registry")
	_gret := _info.InvokeClassMethod("get_factory_type", _args[:], nil)
	_cret := *(*C.GType)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(registry)
	runtime.KeepAlive(typ)

	var _gType coreglib.Type // out

	_gType = coreglib.Type(*(*C.GType)(unsafe.Pointer(&_cret)))

	return _gType
}

// SetFactoryType: associate an ObjectFactory subclass with a #GType. Note: The
// associated factory_type will thereafter be responsible for the creation of
// new Object implementations for instances appropriate for type.
//
// The function takes the following parameters:
//
//    - typ: Object type.
//    - factoryType type to associate with type. Must implement AtkObject
//      appropriate for type.
//
func (registry *Registry) SetFactoryType(typ, factoryType coreglib.Type) {
	var _args [3]girepository.Argument

	*(**C.void)(unsafe.Pointer(&_args[0])) = (*C.void)(unsafe.Pointer(coreglib.InternObject(registry).Native()))
	*(*C.GType)(unsafe.Pointer(&_args[1])) = C.GType(typ)
	*(*C.GType)(unsafe.Pointer(&_args[2])) = C.GType(factoryType)

	_info := girepository.MustFind("Atk", "Registry")
	_info.InvokeClassMethod("set_factory_type", _args[:], nil)

	runtime.KeepAlive(registry)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(factoryType)
}
