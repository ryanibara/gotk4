// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Hyperlink_ConnectLinkActivated(gpointer, guintptr);
// extern void _gotk4_atk1_HyperlinkClass_link_activated(AtkHyperlink*);
// extern guint _gotk4_atk1_HyperlinkClass_link_state(AtkHyperlink*);
// extern gint _gotk4_atk1_HyperlinkClass_get_start_index(AtkHyperlink*);
// extern gint _gotk4_atk1_HyperlinkClass_get_n_anchors(AtkHyperlink*);
// extern gint _gotk4_atk1_HyperlinkClass_get_end_index(AtkHyperlink*);
// extern gchar* _gotk4_atk1_HyperlinkClass_get_uri(AtkHyperlink*, gint);
// extern gboolean _gotk4_atk1_HyperlinkClass_is_valid(AtkHyperlink*);
// extern gboolean _gotk4_atk1_HyperlinkClass_is_selected_link(AtkHyperlink*);
// extern AtkObject* _gotk4_atk1_HyperlinkClass_get_object(AtkHyperlink*, gint);
// AtkObject* _gotk4_atk1_Hyperlink_virtual_get_object(void* fnptr, AtkHyperlink* arg0, gint arg1) {
//   return ((AtkObject* (*)(AtkHyperlink*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_atk1_Hyperlink_virtual_is_selected_link(void* fnptr, AtkHyperlink* arg0) {
//   return ((gboolean (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// gboolean _gotk4_atk1_Hyperlink_virtual_is_valid(void* fnptr, AtkHyperlink* arg0) {
//   return ((gboolean (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// gchar* _gotk4_atk1_Hyperlink_virtual_get_uri(void* fnptr, AtkHyperlink* arg0, gint arg1) {
//   return ((gchar* (*)(AtkHyperlink*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Hyperlink_virtual_get_end_index(void* fnptr, AtkHyperlink* arg0) {
//   return ((gint (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Hyperlink_virtual_get_n_anchors(void* fnptr, AtkHyperlink* arg0) {
//   return ((gint (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Hyperlink_virtual_get_start_index(void* fnptr, AtkHyperlink* arg0) {
//   return ((gint (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// guint _gotk4_atk1_Hyperlink_virtual_link_state(void* fnptr, AtkHyperlink* arg0) {
//   return ((guint (*)(AtkHyperlink*))(fnptr))(arg0);
// };
// void _gotk4_atk1_Hyperlink_virtual_link_activated(void* fnptr, AtkHyperlink* arg0) {
//   ((void (*)(AtkHyperlink*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeHyperlinkStateFlags = coreglib.Type(C.atk_hyperlink_state_flags_get_type())
	GTypeHyperlink           = coreglib.Type(C.atk_hyperlink_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHyperlinkStateFlags, F: marshalHyperlinkStateFlags},
		coreglib.TypeMarshaler{T: GTypeHyperlink, F: marshalHyperlink},
	})
}

// HyperlinkStateFlags describes the type of link.
type HyperlinkStateFlags C.guint

const (
	// HyperlinkIsInline: link is inline.
	HyperlinkIsInline HyperlinkStateFlags = 0b1
)

func marshalHyperlinkStateFlags(p uintptr) (interface{}, error) {
	return HyperlinkStateFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for HyperlinkStateFlags.
func (h HyperlinkStateFlags) String() string {
	if h == 0 {
		return "HyperlinkStateFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(17)

	for h != 0 {
		next := h & (h - 1)
		bit := h - next

		switch bit {
		case HyperlinkIsInline:
			builder.WriteString("Inline|")
		default:
			builder.WriteString(fmt.Sprintf("HyperlinkStateFlags(0b%b)|", bit))
		}

		h = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if h contains other.
func (h HyperlinkStateFlags) Has(other HyperlinkStateFlags) bool {
	return (h & other) == other
}

// HyperlinkOverrides contains methods that are overridable.
type HyperlinkOverrides struct {
	// EndIndex gets the index with the hypertext document at which this link
	// ends.
	//
	// The function returns the following values:
	//
	//    - gint: index with the hypertext document at which this link ends.
	//
	EndIndex func() int
	// NAnchors gets the number of anchors associated with this hyperlink.
	//
	// The function returns the following values:
	//
	//    - gint: number of anchors associated with this hyperlink.
	//
	NAnchors func() int
	// GetObject returns the item associated with this hyperlinks nth anchor.
	// For instance, the returned Object will implement Text if link_ is a text
	// hyperlink, Image if link_ is an image hyperlink etc.
	//
	// Multiple anchors are primarily used by client-side image maps.
	//
	// The function takes the following parameters:
	//
	//    - i: (zero-index) integer specifying the desired anchor.
	//
	// The function returns the following values:
	//
	//    - object associated with this hyperlinks i-th anchor.
	//
	GetObject func(i int) *AtkObject
	// StartIndex gets the index with the hypertext document at which this link
	// begins.
	//
	// The function returns the following values:
	//
	//    - gint: index with the hypertext document at which this link begins.
	//
	StartIndex func() int
	// URI: get a the URI associated with the anchor specified by i of link_.
	//
	// Multiple anchors are primarily used by client-side image maps.
	//
	// The function takes the following parameters:
	//
	//    - i: (zero-index) integer specifying the desired anchor.
	//
	// The function returns the following values:
	//
	//    - utf8: string specifying the URI.
	//
	URI func(i int) string
	// IsSelectedLink determines whether this AtkHyperlink is selected
	//
	// Deprecated: Please use ATK_STATE_FOCUSABLE for all links, and
	// ATK_STATE_FOCUSED for focused links.
	//
	// The function returns the following values:
	//
	//    - ok: true if the AtkHyperlink is selected, False otherwise.
	//
	IsSelectedLink func() bool
	// IsValid: since the document that a link is associated with may have
	// changed this method returns TRUE if the link is still valid (with respect
	// to the document it references) and FALSE otherwise.
	//
	// The function returns the following values:
	//
	//    - ok: whether or not this link is still valid.
	//
	IsValid       func() bool
	LinkActivated func()
	// The function returns the following values:
	//
	LinkState func() uint
}

func defaultHyperlinkOverrides(v *Hyperlink) HyperlinkOverrides {
	return HyperlinkOverrides{
		EndIndex:       v.endIndex,
		NAnchors:       v.nAnchors,
		GetObject:      v.getObject,
		StartIndex:     v.startIndex,
		URI:            v.urI,
		IsSelectedLink: v.isSelectedLink,
		IsValid:        v.isValid,
		LinkActivated:  v.linkActivated,
		LinkState:      v.linkState,
	}
}

// Hyperlink: ATK object which encapsulates a link or set of links (for instance
// in the case of client-side image maps) in a hypertext document. It may
// implement the AtkAction interface. AtkHyperlink may also be used to refer to
// inline embedded content, since it allows specification of a start and end
// offset within the host AtkHypertext object.
type Hyperlink struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Action
}

var (
	_ coreglib.Objector = (*Hyperlink)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Hyperlink, *HyperlinkClass, HyperlinkOverrides](
		GTypeHyperlink,
		initHyperlinkClass,
		wrapHyperlink,
		defaultHyperlinkOverrides,
	)
}

func initHyperlinkClass(gclass unsafe.Pointer, overrides HyperlinkOverrides, classInitFunc func(*HyperlinkClass)) {
	pclass := (*C.AtkHyperlinkClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeHyperlink))))

	if overrides.EndIndex != nil {
		pclass.get_end_index = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_get_end_index)
	}

	if overrides.NAnchors != nil {
		pclass.get_n_anchors = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_get_n_anchors)
	}

	if overrides.GetObject != nil {
		pclass.get_object = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_get_object)
	}

	if overrides.StartIndex != nil {
		pclass.get_start_index = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_get_start_index)
	}

	if overrides.URI != nil {
		pclass.get_uri = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_get_uri)
	}

	if overrides.IsSelectedLink != nil {
		pclass.is_selected_link = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_is_selected_link)
	}

	if overrides.IsValid != nil {
		pclass.is_valid = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_is_valid)
	}

	if overrides.LinkActivated != nil {
		pclass.link_activated = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_link_activated)
	}

	if overrides.LinkState != nil {
		pclass.link_state = (*[0]byte)(C._gotk4_atk1_HyperlinkClass_link_state)
	}

	if classInitFunc != nil {
		class := (*HyperlinkClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHyperlink(obj *coreglib.Object) *Hyperlink {
	return &Hyperlink{
		Object: obj,
		Action: Action{
			Object: obj,
		},
	}
}

func marshalHyperlink(p uintptr) (interface{}, error) {
	return wrapHyperlink(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectLinkActivated: signal link-activated is emitted when a link is
// activated.
func (link_ *Hyperlink) ConnectLinkActivated(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(link_, "link-activated", false, unsafe.Pointer(C._gotk4_atk1_Hyperlink_ConnectLinkActivated), f)
}

// EndIndex gets the index with the hypertext document at which this link ends.
//
// The function returns the following values:
//
//    - gint: index with the hypertext document at which this link ends.
//
func (link_ *Hyperlink) EndIndex() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_get_end_index(_arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NAnchors gets the number of anchors associated with this hyperlink.
//
// The function returns the following values:
//
//    - gint: number of anchors associated with this hyperlink.
//
func (link_ *Hyperlink) NAnchors() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_get_n_anchors(_arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// GetObject returns the item associated with this hyperlinks nth anchor. For
// instance, the returned Object will implement Text if link_ is a text
// hyperlink, Image if link_ is an image hyperlink etc.
//
// Multiple anchors are primarily used by client-side image maps.
//
// The function takes the following parameters:
//
//    - i: (zero-index) integer specifying the desired anchor.
//
// The function returns the following values:
//
//    - object associated with this hyperlinks i-th anchor.
//
func (link_ *Hyperlink) GetObject(i int) *AtkObject {
	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.AtkObject    // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_hyperlink_get_object(_arg0, _arg1)
	runtime.KeepAlive(link_)
	runtime.KeepAlive(i)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))

	return _object
}

// StartIndex gets the index with the hypertext document at which this link
// begins.
//
// The function returns the following values:
//
//    - gint: index with the hypertext document at which this link begins.
//
func (link_ *Hyperlink) StartIndex() int {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_get_start_index(_arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// URI: get a the URI associated with the anchor specified by i of link_.
//
// Multiple anchors are primarily used by client-side image maps.
//
// The function takes the following parameters:
//
//    - i: (zero-index) integer specifying the desired anchor.
//
// The function returns the following values:
//
//    - utf8: string specifying the URI.
//
func (link_ *Hyperlink) URI(i int) string {
	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.gchar        // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_hyperlink_get_uri(_arg0, _arg1)
	runtime.KeepAlive(link_)
	runtime.KeepAlive(i)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// IsInline indicates whether the link currently displays some or all of its
// content inline. Ordinary HTML links will usually return FALSE, but an inline
// &lt;src&gt; HTML element will return TRUE.
//
// The function returns the following values:
//
//    - ok: whether or not this link displays its content inline.
//
func (link_ *Hyperlink) IsInline() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_is_inline(_arg0)
	runtime.KeepAlive(link_)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsSelectedLink determines whether this AtkHyperlink is selected
//
// Deprecated: Please use ATK_STATE_FOCUSABLE for all links, and
// ATK_STATE_FOCUSED for focused links.
//
// The function returns the following values:
//
//    - ok: true if the AtkHyperlink is selected, False otherwise.
//
func (link_ *Hyperlink) IsSelectedLink() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_is_selected_link(_arg0)
	runtime.KeepAlive(link_)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsValid: since the document that a link is associated with may have changed
// this method returns TRUE if the link is still valid (with respect to the
// document it references) and FALSE otherwise.
//
// The function returns the following values:
//
//    - ok: whether or not this link is still valid.
//
func (link_ *Hyperlink) IsValid() bool {
	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C.atk_hyperlink_is_valid(_arg0)
	runtime.KeepAlive(link_)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// endIndex gets the index with the hypertext document at which this link ends.
//
// The function returns the following values:
//
//    - gint: index with the hypertext document at which this link ends.
//
func (link_ *Hyperlink) endIndex() int {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.get_end_index

	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_get_end_index(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// nAnchors gets the number of anchors associated with this hyperlink.
//
// The function returns the following values:
//
//    - gint: number of anchors associated with this hyperlink.
//
func (link_ *Hyperlink) nAnchors() int {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.get_n_anchors

	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_get_n_anchors(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// getObject returns the item associated with this hyperlinks nth anchor. For
// instance, the returned Object will implement Text if link_ is a text
// hyperlink, Image if link_ is an image hyperlink etc.
//
// Multiple anchors are primarily used by client-side image maps.
//
// The function takes the following parameters:
//
//    - i: (zero-index) integer specifying the desired anchor.
//
// The function returns the following values:
//
//    - object associated with this hyperlinks i-th anchor.
//
func (link_ *Hyperlink) getObject(i int) *AtkObject {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.get_object

	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.AtkObject    // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))
	_arg1 = C.gint(i)

	_cret = C._gotk4_atk1_Hyperlink_virtual_get_object(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(link_)
	runtime.KeepAlive(i)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))

	return _object
}

// startIndex gets the index with the hypertext document at which this link
// begins.
//
// The function returns the following values:
//
//    - gint: index with the hypertext document at which this link begins.
//
func (link_ *Hyperlink) startIndex() int {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.get_start_index

	var _arg0 *C.AtkHyperlink // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_get_start_index(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// urI: get a the URI associated with the anchor specified by i of link_.
//
// Multiple anchors are primarily used by client-side image maps.
//
// The function takes the following parameters:
//
//    - i: (zero-index) integer specifying the desired anchor.
//
// The function returns the following values:
//
//    - utf8: string specifying the URI.
//
func (link_ *Hyperlink) urI(i int) string {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.get_uri

	var _arg0 *C.AtkHyperlink // out
	var _arg1 C.gint          // out
	var _cret *C.gchar        // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))
	_arg1 = C.gint(i)

	_cret = C._gotk4_atk1_Hyperlink_virtual_get_uri(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(link_)
	runtime.KeepAlive(i)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// isSelectedLink determines whether this AtkHyperlink is selected
//
// Deprecated: Please use ATK_STATE_FOCUSABLE for all links, and
// ATK_STATE_FOCUSED for focused links.
//
// The function returns the following values:
//
//    - ok: true if the AtkHyperlink is selected, False otherwise.
//
func (link_ *Hyperlink) isSelectedLink() bool {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.is_selected_link

	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_is_selected_link(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// isValid: since the document that a link is associated with may have changed
// this method returns TRUE if the link is still valid (with respect to the
// document it references) and FALSE otherwise.
//
// The function returns the following values:
//
//    - ok: whether or not this link is still valid.
//
func (link_ *Hyperlink) isValid() bool {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.is_valid

	var _arg0 *C.AtkHyperlink // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_is_valid(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (link_ *Hyperlink) linkActivated() {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.link_activated

	var _arg0 *C.AtkHyperlink // out

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	C._gotk4_atk1_Hyperlink_virtual_link_activated(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)
}

// The function returns the following values:
//
func (link_ *Hyperlink) linkState() uint {
	gclass := (*C.AtkHyperlinkClass)(coreglib.PeekParentClass(link_))
	fnarg := gclass.link_state

	var _arg0 *C.AtkHyperlink // out
	var _cret C.guint         // in

	_arg0 = (*C.AtkHyperlink)(unsafe.Pointer(coreglib.InternObject(link_).Native()))

	_cret = C._gotk4_atk1_Hyperlink_virtual_link_state(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(link_)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// HyperlinkClass: instance of this type is always passed by reference.
type HyperlinkClass struct {
	*hyperlinkClass
}

// hyperlinkClass is the struct that's finalized.
type hyperlinkClass struct {
	native *C.AtkHyperlinkClass
}
