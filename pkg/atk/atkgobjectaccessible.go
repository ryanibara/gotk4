// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
import "C"

// glib.Type values for atkgobjectaccessible.go.
var GTypeGObjectAccessible = coreglib.Type(C.atk_gobject_accessible_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeGObjectAccessible, F: marshalGObjectAccessible},
	})
}

// GObjectAccessibleOverrider contains methods that are overridable.
type GObjectAccessibleOverrider interface {
}

// GObjectAccessible: this object class is derived from AtkObject. It can be
// used as a basis for implementing accessible objects for GObjects which are
// not derived from GtkWidget. One example of its use is in providing an
// accessible object for GnomeCanvasItem in the GAIL library.
type GObjectAccessible struct {
	_ [0]func() // equal guard
	ObjectClass
}

var (
	_ coreglib.Objector = (*GObjectAccessible)(nil)
)

func classInitGObjectAccessibler(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapGObjectAccessible(obj *coreglib.Object) *GObjectAccessible {
	return &GObjectAccessible{
		ObjectClass: ObjectClass{
			Object: obj,
		},
	}
}

func marshalGObjectAccessible(p uintptr) (interface{}, error) {
	return wrapGObjectAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Object gets the GObject for which obj is the accessible object.
//
// The function returns the following values:
//
//    - object which is the object for which obj is the accessible object.
//
func (obj *GObjectAccessible) Object() *coreglib.Object {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(obj).Native()))
	*(**GObjectAccessible)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Atk", "GObjectAccessible").InvokeMethod("get_object", args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(obj)

	var _object *coreglib.Object // out

	_object = coreglib.Take(unsafe.Pointer(_cret))

	return _object
}

// GObjectAccessibleForObject gets the accessible object for the specified obj.
//
// The function takes the following parameters:
//
//    - obj: #GObject.
//
// The function returns the following values:
//
//    - object which is the accessible object for the obj.
//
func GObjectAccessibleForObject(obj *coreglib.Object) *ObjectClass {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(obj.Native()))
	*(**coreglib.Object)(unsafe.Pointer(&args[0])) = _arg0

	_gret := girepository.MustFind("Atk", "for_object").Invoke(args[:], nil)
	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(obj)

	var _object *ObjectClass // out

	_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))

	return _object
}
