// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeGObjectAccessible = coreglib.Type(C.atk_gobject_accessible_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGObjectAccessible, F: marshalGObjectAccessible},
	})
}

// GObjectAccessibleOverrides contains methods that are overridable.
type GObjectAccessibleOverrides struct {
}

func defaultGObjectAccessibleOverrides(v *GObjectAccessible) GObjectAccessibleOverrides {
	return GObjectAccessibleOverrides{}
}

// GObjectAccessible: this object class is derived from AtkObject. It can be
// used as a basis for implementing accessible objects for GObjects which
// are not derived from GtkWidget. One example of its use is in providing an
// accessible object for GnomeCanvasItem in the GAIL library.
type GObjectAccessible struct {
	_ [0]func() // equal guard
	AtkObject
}

var (
	_ coreglib.Objector = (*GObjectAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GObjectAccessible, *GObjectAccessibleClass, GObjectAccessibleOverrides](
		GTypeGObjectAccessible,
		initGObjectAccessibleClass,
		wrapGObjectAccessible,
		defaultGObjectAccessibleOverrides,
	)
}

func initGObjectAccessibleClass(gclass unsafe.Pointer, overrides GObjectAccessibleOverrides, classInitFunc func(*GObjectAccessibleClass)) {
	if classInitFunc != nil {
		class := (*GObjectAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGObjectAccessible(obj *coreglib.Object) *GObjectAccessible {
	return &GObjectAccessible{
		AtkObject: AtkObject{
			Object: obj,
		},
	}
}

func marshalGObjectAccessible(p uintptr) (interface{}, error) {
	return wrapGObjectAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Object gets the GObject for which obj is the accessible object.
//
// The function returns the following values:
//
//   - object which is the object for which obj is the accessible object.
//
func (obj *GObjectAccessible) Object() *coreglib.Object {
	var _arg0 *C.AtkGObjectAccessible // out
	var _cret *C.GObject              // in

	_arg0 = (*C.AtkGObjectAccessible)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	_cret = C.atk_gobject_accessible_get_object(_arg0)
	runtime.KeepAlive(obj)

	var _object *coreglib.Object // out

	_object = coreglib.Take(unsafe.Pointer(_cret))

	return _object
}

// GObjectAccessibleForObject gets the accessible object for the specified obj.
//
// The function takes the following parameters:
//
//   - obj: #GObject.
//
// The function returns the following values:
//
//   - object which is the accessible object for the obj.
//
func GObjectAccessibleForObject(obj *coreglib.Object) *AtkObject {
	var _arg1 *C.GObject   // out
	var _cret *C.AtkObject // in

	_arg1 = (*C.GObject)(unsafe.Pointer(obj.Native()))

	_cret = C.atk_gobject_accessible_for_object(_arg1)
	runtime.KeepAlive(obj)

	var _object *AtkObject // out

	_object = wrapObject(coreglib.Take(unsafe.Pointer(_cret)))

	return _object
}

// GObjectAccessibleClass: instance of this type is always passed by reference.
type GObjectAccessibleClass struct {
	*gObjectAccessibleClass
}

// gObjectAccessibleClass is the struct that's finalized.
type gObjectAccessibleClass struct {
	native *C.AtkGObjectAccessibleClass
}
