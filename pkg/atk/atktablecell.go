// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern AtkObject* _gotk4_atk1_TableCellIface_get_table(AtkTableCell*);
// extern gint _gotk4_atk1_TableCellIface_get_column_span(AtkTableCell*);
// extern gint _gotk4_atk1_TableCellIface_get_row_span(AtkTableCell*);
import "C"

// glib.Type values for atktablecell.go.
var GTypeTableCell = coreglib.Type(C.atk_table_cell_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeTableCell, F: marshalTableCell},
	})
}

// TableCellOverrider contains methods that are overridable.
type TableCellOverrider interface {
	// ColumnSpan returns the number of columns occupied by this cell
	// accessible.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of columns occupied by this cell, or 0
	//      if the cell does not implement this method.
	//
	ColumnSpan() int
	// RowSpan returns the number of rows occupied by this cell accessible.
	//
	// The function returns the following values:
	//
	//    - gint representing the number of rows occupied by this cell, or 0 if
	//      the cell does not implement this method.
	//
	RowSpan() int
	// Table returns a reference to the accessible of the containing table.
	//
	// The function returns the following values:
	//
	//    - object: atk object for the containing table.
	//
	Table() *ObjectClass
}

// TableCell: being Table a component which present elements ordered via rows
// and columns, an TableCell is the interface which each of those elements, so
// "cells" should implement.
//
// See also Table.
//
// TableCell wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TableCell struct {
	_ [0]func() // equal guard
	ObjectClass
}

var (
	_ coreglib.Objector = (*TableCell)(nil)
)

// TableCeller describes TableCell's interface methods.
type TableCeller interface {
	coreglib.Objector

	// ColumnSpan returns the number of columns occupied by this cell
	// accessible.
	ColumnSpan() int
	// RowSpan returns the number of rows occupied by this cell accessible.
	RowSpan() int
	// Table returns a reference to the accessible of the containing table.
	Table() *ObjectClass
}

var _ TableCeller = (*TableCell)(nil)

func ifaceInitTableCeller(gifacePtr, data C.gpointer) {
	iface := (*C.AtkTableCellIface)(unsafe.Pointer(gifacePtr))
	iface.get_column_span = (*[0]byte)(C._gotk4_atk1_TableCellIface_get_column_span)
	iface.get_row_span = (*[0]byte)(C._gotk4_atk1_TableCellIface_get_row_span)
	iface.get_table = (*[0]byte)(C._gotk4_atk1_TableCellIface_get_table)
}

//export _gotk4_atk1_TableCellIface_get_column_span
func _gotk4_atk1_TableCellIface_get_column_span(arg0 *C.AtkTableCell) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableCellOverrider)

	gint := iface.ColumnSpan()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableCellIface_get_row_span
func _gotk4_atk1_TableCellIface_get_row_span(arg0 *C.AtkTableCell) (cret C.gint) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableCellOverrider)

	gint := iface.RowSpan()

	cret = C.gint(gint)

	return cret
}

//export _gotk4_atk1_TableCellIface_get_table
func _gotk4_atk1_TableCellIface_get_table(arg0 *C.AtkTableCell) (cret *C.AtkObject) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(TableCellOverrider)

	object := iface.Table()

	cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(object).Native()))

	return cret
}

func wrapTableCell(obj *coreglib.Object) *TableCell {
	return &TableCell{
		ObjectClass: ObjectClass{
			Object: obj,
		},
	}
}

func marshalTableCell(p uintptr) (interface{}, error) {
	return wrapTableCell(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ColumnSpan returns the number of columns occupied by this cell accessible.
//
// The function returns the following values:
//
//    - gint representing the number of columns occupied by this cell, or 0 if
//      the cell does not implement this method.
//
func (cell *TableCell) ColumnSpan() int {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.gint  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**TableCell)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(cell)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// RowSpan returns the number of rows occupied by this cell accessible.
//
// The function returns the following values:
//
//    - gint representing the number of rows occupied by this cell, or 0 if the
//      cell does not implement this method.
//
func (cell *TableCell) RowSpan() int {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret C.gint  // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**TableCell)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(*C.gint)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(cell)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Table returns a reference to the accessible of the containing table.
//
// The function returns the following values:
//
//    - object: atk object for the containing table.
//
func (cell *TableCell) Table() *ObjectClass {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(cell).Native()))
	*(**TableCell)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(cell)

	var _object *ObjectClass // out

	_object = wrapObject(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _object
}
