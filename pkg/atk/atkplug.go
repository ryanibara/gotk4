// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"reflect"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern gchar* _gotk4_atk1_PlugClass_get_object_id(AtkPlug*);
// gchar* _gotk4_atk1_Plug_virtual_get_object_id(void* fnptr, AtkPlug* arg0) {
//   return ((gchar* (*)(AtkPlug*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypePlug = coreglib.Type(C.atk_plug_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePlug, F: marshalPlug},
	})
}

// PlugOverrides contains methods that are overridable.
type PlugOverrides struct {
	// The function returns the following values:
	//
	ObjectID func() string
}

func defaultPlugOverrides(v *Plug) PlugOverrides {
	return PlugOverrides{
		ObjectID: v.objectID,
	}
}

// Plug: see Socket.
type Plug struct {
	_ [0]func() // equal guard
	AtkObject

	*coreglib.Object
	Component
}

var (
	_ coreglib.Objector = (*Plug)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Plug, *PlugClass, PlugOverrides](
		GTypePlug,
		initPlugClass,
		wrapPlug,
		defaultPlugOverrides,
	)
}

func initPlugClass(gclass unsafe.Pointer, overrides PlugOverrides, classInitFunc func(*PlugClass)) {
	pclass := (*C.AtkPlugClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypePlug))))

	if overrides.ObjectID != nil {
		pclass.get_object_id = (*[0]byte)(C._gotk4_atk1_PlugClass_get_object_id)
	}

	if classInitFunc != nil {
		class := (*PlugClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPlug(obj *coreglib.Object) *Plug {
	return &Plug{
		AtkObject: AtkObject{
			Object: obj,
		},
		Object: obj,
		Component: Component{
			Object: obj,
		},
	}
}

func marshalPlug(p uintptr) (interface{}, error) {
	return wrapPlug(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
func (obj *Plug) objectID() string {
	gclass := (*C.AtkPlugClass)(coreglib.PeekParentClass(obj))
	fnarg := gclass.get_object_id

	var _arg0 *C.AtkPlug // out
	var _cret *C.gchar   // in

	_arg0 = (*C.AtkPlug)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	_cret = C._gotk4_atk1_Plug_virtual_get_object_id(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(obj)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PlugClass: instance of this type is always passed by reference.
type PlugClass struct {
	*plugClass
}

// plugClass is the struct that's finalized.
type plugClass struct {
	native *C.AtkPlugClass
}

func (p *PlugClass) ParentClass() *ObjectClass {
	valptr := &p.native.parent_class
	var _v *ObjectClass // out
	_v = (*ObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
