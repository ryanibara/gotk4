// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// extern gboolean _gotk4_atk1_ImageIface_set_image_description(AtkImage*, gchar*);
// extern gchar* _gotk4_atk1_ImageIface_get_image_description(AtkImage*);
// extern gchar* _gotk4_atk1_ImageIface_get_image_locale(AtkImage*);
import "C"

// glib.Type values for atkimage.go.
var GTypeImage = coreglib.Type(C.atk_image_get_type())

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		{T: GTypeImage, F: marshalImage},
	})
}

// ImageOverrider contains methods that are overridable.
type ImageOverrider interface {
	// ImageDescription: get a textual description of this image.
	//
	// The function returns the following values:
	//
	//    - utf8: string representing the image description.
	//
	ImageDescription() string
	// ImageLocale retrieves the locale identifier associated to the Image.
	//
	// The function returns the following values:
	//
	//    - utf8 (optional): string corresponding to the POSIX LC_MESSAGES locale
	//      used by the image description, or NULL if the image does not specify
	//      a locale.
	//
	ImageLocale() string
	// SetImageDescription sets the textual description for this image.
	//
	// The function takes the following parameters:
	//
	//    - description: string description to set for image.
	//
	// The function returns the following values:
	//
	//    - ok: boolean TRUE, or FALSE if operation could not be completed.
	//
	SetImageDescription(description string) bool
}

// Image should be implemented by Object subtypes on behalf of components which
// display image/pixmap information onscreen, and which provide information
// (other than just widget borders, etc.) via that image content. For instance,
// icons, buttons with icons, toolbar elements, and image viewing panes
// typically should implement Image.
//
// Image primarily provides two types of information: coordinate information
// (useful for screen review mode of screenreaders, and for use by onscreen
// magnifiers), and descriptive information. The descriptive information is
// provided for alternative, text-only presentation of the most significant
// information present in the image.
//
// Image wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Image struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Image)(nil)
)

// Imager describes Image's interface methods.
type Imager interface {
	coreglib.Objector

	// ImageDescription: get a textual description of this image.
	ImageDescription() string
	// ImageLocale retrieves the locale identifier associated to the Image.
	ImageLocale() string
	// SetImageDescription sets the textual description for this image.
	SetImageDescription(description string) bool
}

var _ Imager = (*Image)(nil)

func ifaceInitImager(gifacePtr, data C.gpointer) {
	iface := (*C.AtkImageIface)(unsafe.Pointer(gifacePtr))
	iface.get_image_description = (*[0]byte)(C._gotk4_atk1_ImageIface_get_image_description)
	iface.get_image_locale = (*[0]byte)(C._gotk4_atk1_ImageIface_get_image_locale)
	iface.set_image_description = (*[0]byte)(C._gotk4_atk1_ImageIface_set_image_description)
}

//export _gotk4_atk1_ImageIface_get_image_description
func _gotk4_atk1_ImageIface_get_image_description(arg0 *C.AtkImage) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ImageOverrider)

	utf8 := iface.ImageDescription()

	cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
	defer C.free(unsafe.Pointer(cret))

	return cret
}

//export _gotk4_atk1_ImageIface_get_image_locale
func _gotk4_atk1_ImageIface_get_image_locale(arg0 *C.AtkImage) (cret *C.gchar) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ImageOverrider)

	utf8 := iface.ImageLocale()

	if utf8 != "" {
		cret = (*C.void)(unsafe.Pointer(C.CString(utf8)))
		defer C.free(unsafe.Pointer(cret))
	}

	return cret
}

//export _gotk4_atk1_ImageIface_set_image_description
func _gotk4_atk1_ImageIface_set_image_description(arg0 *C.AtkImage, arg1 *C.gchar) (cret C.gboolean) {
	goval := coreglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(ImageOverrider)

	var _description string // out

	_description = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	ok := iface.SetImageDescription(_description)

	if ok {
		cret = C.TRUE
	}

	return cret
}

func wrapImage(obj *coreglib.Object) *Image {
	return &Image{
		Object: obj,
	}
}

func marshalImage(p uintptr) (interface{}, error) {
	return wrapImage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ImageDescription: get a textual description of this image.
//
// The function returns the following values:
//
//    - utf8: string representing the image description.
//
func (image *Image) ImageDescription() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	*(**Image)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(image)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ImageLocale retrieves the locale identifier associated to the Image.
//
// The function returns the following values:
//
//    - utf8 (optional): string corresponding to the POSIX LC_MESSAGES locale
//      used by the image description, or NULL if the image does not specify a
//      locale.
//
func (image *Image) ImageLocale() string {
	var args [1]girepository.Argument
	var _arg0 *C.void // out
	var _cret *C.void // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	*(**Image)(unsafe.Pointer(&args[0])) = _arg0

	_cret = *(**C.void)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(image)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetImageDescription sets the textual description for this image.
//
// The function takes the following parameters:
//
//    - description: string description to set for image.
//
// The function returns the following values:
//
//    - ok: boolean TRUE, or FALSE if operation could not be completed.
//
func (image *Image) SetImageDescription(description string) bool {
	var args [2]girepository.Argument
	var _arg0 *C.void    // out
	var _arg1 *C.void    // out
	var _cret C.gboolean // in

	_arg0 = (*C.void)(unsafe.Pointer(coreglib.InternObject(image).Native()))
	_arg1 = (*C.void)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg1))
	*(**Image)(unsafe.Pointer(&args[1])) = _arg1

	_cret = *(*C.gboolean)(unsafe.Pointer(&_gret))

	runtime.KeepAlive(image)
	runtime.KeepAlive(description)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
