// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Document_ConnectReload(gpointer, guintptr);
// extern void _gotk4_atk1_Document_ConnectPageChanged(gpointer, gint, guintptr);
// extern void _gotk4_atk1_Document_ConnectLoadStopped(gpointer, guintptr);
// extern void _gotk4_atk1_Document_ConnectLoadComplete(gpointer, guintptr);
// gboolean _gotk4_atk1_Document_virtual_set_document_attribute(void* fnptr, AtkDocument* arg0, gchar* arg1, gchar* arg2) {
//   return ((gboolean (*)(AtkDocument*, gchar*, gchar*))(fnptr))(arg0, arg1, arg2);
// };
// gchar* _gotk4_atk1_Document_virtual_get_document_attribute_value(void* fnptr, AtkDocument* arg0, gchar* arg1) {
//   return ((gchar* (*)(AtkDocument*, gchar*))(fnptr))(arg0, arg1);
// };
// gchar* _gotk4_atk1_Document_virtual_get_document_locale(void* fnptr, AtkDocument* arg0) {
//   return ((gchar* (*)(AtkDocument*))(fnptr))(arg0);
// };
// gchar* _gotk4_atk1_Document_virtual_get_document_type(void* fnptr, AtkDocument* arg0) {
//   return ((gchar* (*)(AtkDocument*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Document_virtual_get_current_page_number(void* fnptr, AtkDocument* arg0) {
//   return ((gint (*)(AtkDocument*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Document_virtual_get_page_count(void* fnptr, AtkDocument* arg0) {
//   return ((gint (*)(AtkDocument*))(fnptr))(arg0);
// };
// gpointer _gotk4_atk1_Document_virtual_get_document(void* fnptr, AtkDocument* arg0) {
//   return ((gpointer (*)(AtkDocument*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeDocument = coreglib.Type(C.atk_document_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDocument, F: marshalDocument},
	})
}

// Document interface should be supported by any object whose content is a
// representation or view of a document. The AtkDocument interface should appear
// on the toplevel container for the document content; however AtkDocument
// instances may be nested (i.e. an AtkDocument may be a descendant of another
// AtkDocument) in those cases where one document contains "embedded content"
// which can reasonably be considered a document in its own right.
//
// Document wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Document struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Document)(nil)
)

// Documenter describes Document's interface methods.
type Documenter interface {
	coreglib.Objector

	// AttributeValue retrieves the value of the given attribute_name inside
	// document.
	AttributeValue(attributeName string) string
	// CurrentPageNumber retrieves the current page number inside document.
	CurrentPageNumber() int
	// Document gets a gpointer that points to an instance of the DOM.
	Document() unsafe.Pointer
	// DocumentType gets a string indicating the document type.
	DocumentType() string
	// Locale gets a UTF-8 string indicating the POSIX-style LC_MESSAGES locale
	// of the content of this document instance.
	Locale() string
	// PageCount retrieves the total number of pages inside document.
	PageCount() int
	// SetAttributeValue sets the value for the given attribute_name inside
	// document.
	SetAttributeValue(attributeName, attributeValue string) bool

	// Load-complete: 'load-complete' signal is emitted when a pending load of a
	// static document has completed.
	ConnectLoadComplete(func()) coreglib.SignalHandle
	// Load-stopped: 'load-stopped' signal is emitted when a pending load of
	// document contents is cancelled, paused, or otherwise interrupted by the
	// user or application logic.
	ConnectLoadStopped(func()) coreglib.SignalHandle
	// Page-changed: 'page-changed' signal is emitted when the current page of a
	// document changes, e.g.
	ConnectPageChanged(func(pageNumber int)) coreglib.SignalHandle
	// Reload: 'reload' signal is emitted when the contents of a document is
	// refreshed from its source.
	ConnectReload(func()) coreglib.SignalHandle
}

var _ Documenter = (*Document)(nil)

func wrapDocument(obj *coreglib.Object) *Document {
	return &Document{
		Object: obj,
	}
}

func marshalDocument(p uintptr) (interface{}, error) {
	return wrapDocument(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectLoadComplete: 'load-complete' signal is emitted when a pending load of
// a static document has completed. This signal is to be expected by ATK clients
// if and when AtkDocument implementors expose ATK_STATE_BUSY. If the state of
// an AtkObject which implements AtkDocument does not include ATK_STATE_BUSY, it
// should be safe for clients to assume that the AtkDocument's static contents
// are fully loaded into the container. (Dynamic document contents should be
// exposed via other signals.).
func (document *Document) ConnectLoadComplete(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(document, "load-complete", false, unsafe.Pointer(C._gotk4_atk1_Document_ConnectLoadComplete), f)
}

// ConnectLoadStopped: 'load-stopped' signal is emitted when a pending load of
// document contents is cancelled, paused, or otherwise interrupted by the user
// or application logic. It should not however be emitted while waiting for a
// resource (for instance while blocking on a file or network read) unless a
// user-significant timeout has occurred.
func (document *Document) ConnectLoadStopped(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(document, "load-stopped", false, unsafe.Pointer(C._gotk4_atk1_Document_ConnectLoadStopped), f)
}

// ConnectPageChanged: 'page-changed' signal is emitted when the current page of
// a document changes, e.g. pressing page up/down in a document viewer.
func (document *Document) ConnectPageChanged(f func(pageNumber int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(document, "page-changed", false, unsafe.Pointer(C._gotk4_atk1_Document_ConnectPageChanged), f)
}

// ConnectReload: 'reload' signal is emitted when the contents of a document
// is refreshed from its source. Once 'reload' has been emitted, a matching
// 'load-complete' or 'load-stopped' signal should follow, which clients may
// await before interrogating ATK for the latest document content.
func (document *Document) ConnectReload(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(document, "reload", false, unsafe.Pointer(C._gotk4_atk1_Document_ConnectReload), f)
}

// AttributeValue retrieves the value of the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//   - attributeName: character string representing the name of the attribute
//     whose value is being queried.
//
// The function returns the following values:
//
//   - utf8 (optional): string value associated with the named attribute
//     for this document, or NULL if a value for attribute_name has not been
//     specified for this document.
//
func (document *Document) AttributeValue(attributeName string) string {
	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_document_get_attribute_value(_arg0, _arg1)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// CurrentPageNumber retrieves the current page number inside document.
//
// The function returns the following values:
//
//   - gint: current page number inside document, or -1 if not implemented,
//     not know by the implementor, or irrelevant.
//
func (document *Document) CurrentPageNumber() int {
	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_current_page_number(_arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Document gets a gpointer that points to an instance of the DOM. It is up
// to the caller to check atk_document_get_type to determine how to cast this
// pointer.
//
// Deprecated: Since 2.12. document is already a representation of the document.
// Use it directly, or one of its children, as an instance of the DOM.
//
// The function returns the following values:
//
//   - gpointer (optional) that points to an instance of the DOM.
//
func (document *Document) Document() unsafe.Pointer {
	var _arg0 *C.AtkDocument // out
	var _cret C.gpointer     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_document(_arg0)
	runtime.KeepAlive(document)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// DocumentType gets a string indicating the document type.
//
// Deprecated: Since 2.12. Please use atk_document_get_attributes() to ask for
// the document type if it applies.
//
// The function returns the following values:
//
//   - utf8: string indicating the document type.
//
func (document *Document) DocumentType() string {
	var _arg0 *C.AtkDocument // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_document_type(_arg0)
	runtime.KeepAlive(document)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Locale gets a UTF-8 string indicating the POSIX-style LC_MESSAGES locale of
// the content of this document instance. Individual text substrings or images
// within this document may have a different locale, see atk_text_get_attributes
// and atk_image_get_image_locale.
//
// Deprecated: Please use atk_object_get_object_locale() instead.
//
// The function returns the following values:
//
//   - utf8: UTF-8 string indicating the POSIX-style LC_MESSAGES locale of the
//     document content as a whole, or NULL if the document content does not
//     specify a locale.
//
func (document *Document) Locale() string {
	var _arg0 *C.AtkDocument // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_locale(_arg0)
	runtime.KeepAlive(document)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PageCount retrieves the total number of pages inside document.
//
// The function returns the following values:
//
//   - gint: total page count of document, or -1 if not implemented, not know by
//     the implementor or irrelevant.
//
func (document *Document) PageCount() int {
	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_page_count(_arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetAttributeValue sets the value for the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//   - attributeName: character string representing the name of the attribute
//     whose value is being set.
//   - attributeValue: string value to be associated with attribute_name.
//
// The function returns the following values:
//
//   - ok: TRUE if attribute_value is successfully associated with
//     attribute_name for this document, and FALSE if if the document does not
//     allow the attribute to be modified.
//
func (document *Document) SetAttributeValue(attributeName, attributeValue string) bool {
	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(attributeValue)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.atk_document_set_attribute_value(_arg0, _arg1, _arg2)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)
	runtime.KeepAlive(attributeValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// currentPageNumber retrieves the current page number inside document.
//
// The function returns the following values:
//
//   - gint: current page number inside document, or -1 if not implemented,
//     not know by the implementor, or irrelevant.
//
func (document *Document) currentPageNumber() int {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_current_page_number

	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_current_page_number(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Document gets a gpointer that points to an instance of the DOM. It is up
// to the caller to check atk_document_get_type to determine how to cast this
// pointer.
//
// Deprecated: Since 2.12. document is already a representation of the document.
// Use it directly, or one of its children, as an instance of the DOM.
//
// The function returns the following values:
//
//   - gpointer (optional) that points to an instance of the DOM.
//
func (document *Document) document() unsafe.Pointer {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_document

	var _arg0 *C.AtkDocument // out
	var _cret C.gpointer     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_document(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// documentAttributeValue retrieves the value of the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//   - attributeName: character string representing the name of the attribute
//     whose value is being queried.
//
// The function returns the following values:
//
//   - utf8 (optional): string value associated with the named attribute
//     for this document, or NULL if a value for attribute_name has not been
//     specified for this document.
//
func (document *Document) documentAttributeValue(attributeName string) string {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_document_attribute_value

	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_atk1_Document_virtual_get_document_attribute_value(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// documentLocale gets a UTF-8 string indicating the POSIX-style LC_MESSAGES
// locale of the content of this document instance. Individual text
// substrings or images within this document may have a different locale,
// see atk_text_get_attributes and atk_image_get_image_locale.
//
// Deprecated: Please use atk_object_get_object_locale() instead.
//
// The function returns the following values:
//
//   - utf8: UTF-8 string indicating the POSIX-style LC_MESSAGES locale of the
//     document content as a whole, or NULL if the document content does not
//     specify a locale.
//
func (document *Document) documentLocale() string {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_document_locale

	var _arg0 *C.AtkDocument // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_document_locale(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// documentType gets a string indicating the document type.
//
// Deprecated: Since 2.12. Please use atk_document_get_attributes() to ask for
// the document type if it applies.
//
// The function returns the following values:
//
//   - utf8: string indicating the document type.
//
func (document *Document) documentType() string {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_document_type

	var _arg0 *C.AtkDocument // out
	var _cret *C.gchar       // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_document_type(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// pageCount retrieves the total number of pages inside document.
//
// The function returns the following values:
//
//   - gint: total page count of document, or -1 if not implemented, not know by
//     the implementor or irrelevant.
//
func (document *Document) pageCount() int {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_page_count

	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_page_count(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// setDocumentAttribute sets the value for the given attribute_name inside
// document.
//
// The function takes the following parameters:
//
//   - attributeName: character string representing the name of the attribute
//     whose value is being set.
//   - attributeValue: string value to be associated with attribute_name.
//
// The function returns the following values:
//
//   - ok: TRUE if attribute_value is successfully associated with
//     attribute_name for this document, and FALSE if if the document does not
//     allow the attribute to be modified.
//
func (document *Document) setDocumentAttribute(attributeName, attributeValue string) bool {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.set_document_attribute

	var _arg0 *C.AtkDocument // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(attributeName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(attributeValue)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C._gotk4_atk1_Document_virtual_set_document_attribute(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(document)
	runtime.KeepAlive(attributeName)
	runtime.KeepAlive(attributeValue)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DocumentIface: instance of this type is always passed by reference.
type DocumentIface struct {
	*documentIface
}

// documentIface is the struct that's finalized.
type documentIface struct {
	native *C.AtkDocumentIface
}
