// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gchar* _gotk4_atk1_AtkObject_virtual_get_object_locale(void* fnptr, AtkObject* arg0) {
//   return ((gchar* (*)(AtkObject*))(fnptr))(arg0);
// };
import "C"

// ObjectLocale gets a UTF-8 string indicating the POSIX-style LC_MESSAGES
// locale of accessible.
//
// The function returns the following values:
//
//    - utf8: UTF-8 string indicating the POSIX-style LC_MESSAGES locale of
//      accessible.
//
func (accessible *AtkObject) ObjectLocale() string {
	var _arg0 *C.AtkObject // out
	var _cret *C.gchar     // in

	_arg0 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	_cret = C.atk_object_get_object_locale(_arg0)
	runtime.KeepAlive(accessible)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// objectLocale gets a UTF-8 string indicating the POSIX-style LC_MESSAGES
// locale of accessible.
//
// The function returns the following values:
//
//    - utf8: UTF-8 string indicating the POSIX-style LC_MESSAGES locale of
//      accessible.
//
func (accessible *AtkObject) objectLocale() string {
	gclass := (*C.AtkObjectClass)(coreglib.PeekParentClass(accessible))
	fnarg := gclass.get_object_locale

	var _arg0 *C.AtkObject // out
	var _cret *C.gchar     // in

	_arg0 = (*C.AtkObject)(unsafe.Pointer(coreglib.InternObject(accessible).Native()))

	_cret = C._gotk4_atk1_AtkObject_virtual_get_object_locale(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(accessible)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
