// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// GIOChannel* _gotk4_atk1_StreamableContent_virtual_get_stream(void* fnptr, AtkStreamableContent* arg0, gchar* arg1) {
//   return ((GIOChannel* (*)(AtkStreamableContent*, gchar*))(fnptr))(arg0, arg1);
// };
// gchar* _gotk4_atk1_StreamableContent_virtual_get_mime_type(void* fnptr, AtkStreamableContent* arg0, gint arg1) {
//   return ((gchar* (*)(AtkStreamableContent*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_StreamableContent_virtual_get_n_mime_types(void* fnptr, AtkStreamableContent* arg0) {
//   return ((gint (*)(AtkStreamableContent*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeStreamableContent = coreglib.Type(C.atk_streamable_content_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStreamableContent, F: marshalStreamableContent},
	})
}

// StreamableContent: interface whereby an object allows its backing content to
// be streamed to clients. Typical implementors would be images or icons, HTML
// content, or multimedia display/rendering widgets.
//
// Negotiation of content type is allowed. Clients may examine the backing data
// and transform, convert, or parse the content in order to present it in an
// alternate form to end-users.
//
// The AtkStreamableContent interface is particularly useful for saving,
// printing, or post-processing entire documents, or for persisting alternate
// views of a document. If document content itself is being serialized, stored,
// or converted, then use of the AtkStreamableContent interface can help address
// performance issues. Unlike most ATK interfaces, this interface is not
// strongly tied to the current user-agent view of the a particular document,
// but may in some cases give access to the underlying model data.
//
// StreamableContent wraps an interface. This means the user can get the
// underlying type by calling Cast().
type StreamableContent struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*StreamableContent)(nil)
)

// StreamableContenter describes StreamableContent's interface methods.
type StreamableContenter interface {
	coreglib.Objector

	// MIMEType gets the character string of the specified mime type.
	MIMEType(i int) string
	// NMIMETypes gets the number of mime types supported by this object.
	NMIMETypes() int
	// Stream gets the content in the specified mime type.
	Stream(mimeType string) *glib.IOChannel
	// URI: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available.
	URI(mimeType string) string
}

var _ StreamableContenter = (*StreamableContent)(nil)

func wrapStreamableContent(obj *coreglib.Object) *StreamableContent {
	return &StreamableContent{
		Object: obj,
	}
}

func marshalStreamableContent(p uintptr) (interface{}, error) {
	return wrapStreamableContent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MIMEType gets the character string of the specified mime type. The first mime
// type is at position 0, the second at position 1, and so on.
//
// The function takes the following parameters:
//
//    - i: gint representing the position of the mime type starting from 0.
//
// The function returns the following values:
//
//    - utf8: gchar* representing the specified mime type; the caller should not
//      free the character string.
//
func (streamable *StreamableContent) MIMEType(i int) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 C.gint                  // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_streamable_content_get_mime_type(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(i)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NMIMETypes gets the number of mime types supported by this object.
//
// The function returns the following values:
//
//    - gint which is the number of mime types supported by the object.
//
func (streamable *StreamableContent) NMIMETypes() int {
	var _arg0 *C.AtkStreamableContent // out
	var _cret C.gint                  // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))

	_cret = C.atk_streamable_content_get_n_mime_types(_arg0)
	runtime.KeepAlive(streamable)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Stream gets the content in the specified mime type.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type.
//
// The function returns the following values:
//
//    - ioChannel which contains the content in the specified mime type.
//
func (streamable *StreamableContent) Stream(mimeType string) *glib.IOChannel {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.GIOChannel           // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_stream(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _ioChannel *glib.IOChannel // out

	_ioChannel = (*glib.IOChannel)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ioChannel)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_io_channel_unref((*C.GIOChannel)(intern.C))
		},
	)

	return _ioChannel
}

// mimeType gets the character string of the specified mime type. The first mime
// type is at position 0, the second at position 1, and so on.
//
// The function takes the following parameters:
//
//    - i: gint representing the position of the mime type starting from 0.
//
// The function returns the following values:
//
//    - utf8: gchar* representing the specified mime type; the caller should not
//      free the character string.
//
func (streamable *StreamableContent) mimeType(i int) string {
	gclass := (*C.AtkStreamableContentIface)(coreglib.PeekParentClass(streamable))
	fnarg := gclass.get_mime_type

	var _arg0 *C.AtkStreamableContent // out
	var _arg1 C.gint                  // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = C.gint(i)

	_cret = C._gotk4_atk1_StreamableContent_virtual_get_mime_type(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(i)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// nmimeTypes gets the number of mime types supported by this object.
//
// The function returns the following values:
//
//    - gint which is the number of mime types supported by the object.
//
func (streamable *StreamableContent) nmimeTypes() int {
	gclass := (*C.AtkStreamableContentIface)(coreglib.PeekParentClass(streamable))
	fnarg := gclass.get_n_mime_types

	var _arg0 *C.AtkStreamableContent // out
	var _cret C.gint                  // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))

	_cret = C._gotk4_atk1_StreamableContent_virtual_get_n_mime_types(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(streamable)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Stream gets the content in the specified mime type.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type.
//
// The function returns the following values:
//
//    - ioChannel which contains the content in the specified mime type.
//
func (streamable *StreamableContent) stream(mimeType string) *glib.IOChannel {
	gclass := (*C.AtkStreamableContentIface)(coreglib.PeekParentClass(streamable))
	fnarg := gclass.get_stream

	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.GIOChannel           // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(coreglib.InternObject(streamable).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_atk1_StreamableContent_virtual_get_stream(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _ioChannel *glib.IOChannel // out

	_ioChannel = (*glib.IOChannel)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ioChannel)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_io_channel_unref((*C.GIOChannel)(intern.C))
		},
	)

	return _ioChannel
}

// StreamableContentIface: instance of this type is always passed by reference.
type StreamableContentIface struct {
	*streamableContentIface
}

// streamableContentIface is the struct that's finalized.
type streamableContentIface struct {
	native *C.AtkStreamableContentIface
}
