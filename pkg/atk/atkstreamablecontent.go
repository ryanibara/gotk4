// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_streamable_content_get_type()), F: marshalStreamableContenter},
	})
}

// StreamableContentOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type StreamableContentOverrider interface {
	// MIMEType gets the character string of the specified mime type. The first
	// mime type is at position 0, the second at position 1, and so on.
	MIMEType(i int) string
	// NMIMETypes gets the number of mime types supported by this object.
	NMIMETypes() int
	// Stream gets the content in the specified mime type.
	Stream(mimeType string) *glib.IOChannel
	// URI: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available. If mime_type
	// is NULL, the URI for the default (and possibly only) mime-type is
	// returned.
	//
	// Note that it is possible for get_uri to return NULL but for get_stream to
	// work nonetheless, since not all GIOChannels connect to URIs.
	URI(mimeType string) string
}

// StreamableContent: interface whereby an object allows its backing content to
// be streamed to clients. Typical implementors would be images or icons, HTML
// content, or multimedia display/rendering widgets.
//
// Negotiation of content type is allowed. Clients may examine the backing data
// and transform, convert, or parse the content in order to present it in an
// alternate form to end-users.
//
// The AtkStreamableContent interface is particularly useful for saving,
// printing, or post-processing entire documents, or for persisting alternate
// views of a document. If document content itself is being serialized, stored,
// or converted, then use of the AtkStreamableContent interface can help address
// performance issues. Unlike most ATK interfaces, this interface is not
// strongly tied to the current user-agent view of the a particular document,
// but may in some cases give access to the underlying model data.
type StreamableContent struct {
	*externglib.Object
}

// StreamableContenter describes StreamableContent's interface methods.
type StreamableContenter interface {
	externglib.Objector

	// MIMEType gets the character string of the specified mime type.
	MIMEType(i int) string
	// NMIMETypes gets the number of mime types supported by this object.
	NMIMETypes() int
	// Stream gets the content in the specified mime type.
	Stream(mimeType string) *glib.IOChannel
	// URI: get a string representing a URI in IETF standard format (see
	// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may
	// be streamed in the specified mime-type, if one is available.
	URI(mimeType string) string
}

var _ StreamableContenter = (*StreamableContent)(nil)

func wrapStreamableContent(obj *externglib.Object) *StreamableContent {
	return &StreamableContent{
		Object: obj,
	}
}

func marshalStreamableContenter(p uintptr) (interface{}, error) {
	return wrapStreamableContent(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MIMEType gets the character string of the specified mime type. The first mime
// type is at position 0, the second at position 1, and so on.
//
// The function takes the following parameters:
//
//    - i: gint representing the position of the mime type starting from 0.
//
func (streamable *StreamableContent) MIMEType(i int) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 C.gint                  // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(streamable.Native()))
	_arg1 = C.gint(i)

	_cret = C.atk_streamable_content_get_mime_type(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(i)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NMIMETypes gets the number of mime types supported by this object.
func (streamable *StreamableContent) NMIMETypes() int {
	var _arg0 *C.AtkStreamableContent // out
	var _cret C.gint                  // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(streamable.Native()))

	_cret = C.atk_streamable_content_get_n_mime_types(_arg0)
	runtime.KeepAlive(streamable)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Stream gets the content in the specified mime type.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type.
//
func (streamable *StreamableContent) Stream(mimeType string) *glib.IOChannel {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.GIOChannel           // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(streamable.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_stream(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _ioChannel *glib.IOChannel // out

	_ioChannel = (*glib.IOChannel)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ioChannel)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_io_channel_unref((*C.GIOChannel)(intern.C))
		},
	)

	return _ioChannel
}

// URI: get a string representing a URI in IETF standard format (see
// http://www.ietf.org/rfc/rfc2396.txt) from which the object's content may be
// streamed in the specified mime-type, if one is available. If mime_type is
// NULL, the URI for the default (and possibly only) mime-type is returned.
//
// Note that it is possible for get_uri to return NULL but for get_stream to
// work nonetheless, since not all GIOChannels connect to URIs.
//
// The function takes the following parameters:
//
//    - mimeType: gchar* representing the mime type, or NULL to request a URI
//    for the default mime type.
//
func (streamable *StreamableContent) URI(mimeType string) string {
	var _arg0 *C.AtkStreamableContent // out
	var _arg1 *C.gchar                // out
	var _cret *C.gchar                // in

	_arg0 = (*C.AtkStreamableContent)(unsafe.Pointer(streamable.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.atk_streamable_content_get_uri(_arg0, _arg1)
	runtime.KeepAlive(streamable)
	runtime.KeepAlive(mimeType)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}
