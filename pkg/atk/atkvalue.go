// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"fmt"
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Value_ConnectValueChanged(gpointer, gdouble, gchar*, guintptr);
// gboolean _gotk4_atk1_Value_virtual_set_current_value(void* fnptr, AtkValue* arg0, GValue* arg1) {
//   return ((gboolean (*)(AtkValue*, GValue*))(fnptr))(arg0, arg1);
// };
// void _gotk4_atk1_Value_virtual_get_current_value(void* fnptr, AtkValue* arg0, GValue* arg1) {
//   ((void (*)(AtkValue*, GValue*))(fnptr))(arg0, arg1);
// };
// void _gotk4_atk1_Value_virtual_get_maximum_value(void* fnptr, AtkValue* arg0, GValue* arg1) {
//   ((void (*)(AtkValue*, GValue*))(fnptr))(arg0, arg1);
// };
// void _gotk4_atk1_Value_virtual_get_minimum_value(void* fnptr, AtkValue* arg0, GValue* arg1) {
//   ((void (*)(AtkValue*, GValue*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeValueType = coreglib.Type(C.atk_value_type_get_type())
	GTypeValue     = coreglib.Type(C.atk_value_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeValueType, F: marshalValueType},
		coreglib.TypeMarshaler{T: GTypeValue, F: marshalValue},
	})
}

// ValueType: default types for a given value. Those are defined in order to
// easily get localized strings to describe a given value or a given subrange,
// using atk_value_type_get_localized_name().
type ValueType C.gint

const (
	ValueVeryWeak ValueType = iota
	ValueWeak
	ValueAcceptable
	ValueStrong
	ValueVeryStrong
	ValueVeryLow
	ValueLow
	ValueMedium
	ValueHigh
	ValueVeryHigh
	ValueVeryBad
	ValueBad
	ValueGood
	ValueVeryGood
	ValueBest
	ValueLastDefined
)

func marshalValueType(p uintptr) (interface{}, error) {
	return ValueType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ValueType.
func (v ValueType) String() string {
	switch v {
	case ValueVeryWeak:
		return "VeryWeak"
	case ValueWeak:
		return "Weak"
	case ValueAcceptable:
		return "Acceptable"
	case ValueStrong:
		return "Strong"
	case ValueVeryStrong:
		return "VeryStrong"
	case ValueVeryLow:
		return "VeryLow"
	case ValueLow:
		return "Low"
	case ValueMedium:
		return "Medium"
	case ValueHigh:
		return "High"
	case ValueVeryHigh:
		return "VeryHigh"
	case ValueVeryBad:
		return "VeryBad"
	case ValueBad:
		return "Bad"
	case ValueGood:
		return "Good"
	case ValueVeryGood:
		return "VeryGood"
	case ValueBest:
		return "Best"
	case ValueLastDefined:
		return "LastDefined"
	default:
		return fmt.Sprintf("ValueType(%d)", v)
	}
}

// ValueTypeGetLocalizedName gets the localized description string describing
// the ValueType value_type.
//
// The function takes the following parameters:
//
//    - valueType whose localized name is required.
//
// The function returns the following values:
//
//    - utf8: localized string describing the ValueType.
//
func ValueTypeGetLocalizedName(valueType ValueType) string {
	var _arg1 C.AtkValueType // out
	var _cret *C.gchar       // in

	_arg1 = C.AtkValueType(valueType)

	_cret = C.atk_value_type_get_localized_name(_arg1)
	runtime.KeepAlive(valueType)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ValueTypeGetName gets the description string describing the ValueType
// value_type.
//
// The function takes the following parameters:
//
//    - valueType whose name is required.
//
// The function returns the following values:
//
//    - utf8: string describing the ValueType.
//
func ValueTypeGetName(valueType ValueType) string {
	var _arg1 C.AtkValueType // out
	var _cret *C.gchar       // in

	_arg1 = C.AtkValueType(valueType)

	_cret = C.atk_value_type_get_name(_arg1)
	runtime.KeepAlive(valueType)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Value should be implemented for components which either display a value from
// a bounded range, or which allow the user to specify a value from a bounded
// range, or both. For instance, most sliders and range controls, as well as
// dials, should have Object representations which implement Value on the
// component's behalf. KValues may be read-only, in which case attempts to alter
// the value return would fail.
//
// <refsect1 id="current-value-text"> <title>On the subject of current value
// text</title> <para> In addition to providing the current value, implementors
// can optionally provide an end-user-consumable textual description associated
// with this value. This description should be included when the numeric value
// fails to convey the full, on-screen representation seen by users. </para>
//
// <example> <title>Password strength</title> A password strength meter whose
// value changes as the user types their new password. Red is used for values
// less than 4.0, yellow for values between 4.0 and 7.0, and green for values
// greater than 7.0. In this instance, value text should be provided by the
// implementor. Appropriate value text would be "weak", "acceptable," and
// "strong" respectively. </example>
//
// A level bar whose value changes to reflect the battery charge. The color
// remains the same regardless of the charge and there is no on-screen text
// reflecting the fullness of the battery. In this case, because the position
// within the bar is the only indication the user has of the current charge,
// value text should not be provided by the implementor.
//
// <refsect2 id="implementor-notes"> <title>Implementor Notes</title> <para>
// Implementors should bear in mind that assistive technologies will likely
// prefer the value text provided over the numeric value when presenting a
// widget's value. As a result, strings not intended for end users should not be
// exposed in the value text, and strings which are exposed should be localized.
// In the case of widgets which display value text on screen, for instance
// through a separate label in close proximity to the value-displaying widget,
// it is still expected that implementors will expose the value text using the
// above API. </para>
//
// <para> Value should NOT be implemented for widgets whose displayed value is
// not reflective of a meaningful amount. For instance, a progress pulse
// indicator whose value alternates between 0.0 and 1.0 to indicate that some
// process is still taking place should not implement Value because the current
// value does not reflect progress towards completion. </para> </refsect2>
// </refsect1>
//
// <refsect1 id="ranges"> <title>On the subject of ranges</title> <para> In
// addition to providing the minimum and maximum values, implementors can
// optionally provide details about subranges associated with the widget. These
// details should be provided by the implementor when both of the following are
// communicated visually to the end user: </para> <itemizedlist> <listitem>The
// existence of distinct ranges such as "weak", "acceptable", and "strong"
// indicated by color, bar tick marks, and/or on-screen text.</listitem>
// <listitem>Where the current value stands within a given subrange, for
// instance illustrating progression from very "weak" towards nearly
// "acceptable" through changes in shade and/or position on the bar within the
// "weak" subrange.</listitem> </itemizedlist> <para> If both of the above do
// not apply to the widget, it should be sufficient to expose the numeric value,
// along with the value text if appropriate, to make the widget accessible.
// </para>
//
// <refsect2 id="ranges-implementor-notes"> <title>Implementor Notes</title>
// <para> If providing subrange details is deemed necessary, all possible values
// of the widget are expected to fall within one of the subranges defined by the
// implementor. </para> </refsect2> </refsect1>
//
// <refsect1 id="localization"> <title>On the subject of localization of
// end-user-consumable text values</title> <para> Because value text and
// subrange descriptors are human-consumable, implementors are expected to
// provide localized strings which can be directly presented to end users via
// their assistive technology. In order to simplify this for implementors,
// implementors can use atk_value_type_get_localized_name() with the following
// already-localized constants for commonly-needed values can be used: </para>
//
// <itemizedlist> <listitem>ATK_VALUE_VERY_WEAK</listitem>
// <listitem>ATK_VALUE_WEAK</listitem> <listitem>ATK_VALUE_ACCEPTABLE</listitem>
// <listitem>ATK_VALUE_STRONG</listitem>
// <listitem>ATK_VALUE_VERY_STRONG</listitem>
// <listitem>ATK_VALUE_VERY_LOW</listitem> <listitem>ATK_VALUE_LOW</listitem>
// <listitem>ATK_VALUE_MEDIUM</listitem> <listitem>ATK_VALUE_HIGH</listitem>
// <listitem>ATK_VALUE_VERY_HIGH</listitem>
// <listitem>ATK_VALUE_VERY_BAD</listitem> <listitem>ATK_VALUE_BAD</listitem>
// <listitem>ATK_VALUE_GOOD</listitem> <listitem>ATK_VALUE_VERY_GOOD</listitem>
// <listitem>ATK_VALUE_BEST</listitem>
// <listitem>ATK_VALUE_SUBSUBOPTIMAL</listitem>
// <listitem>ATK_VALUE_SUBOPTIMAL</listitem>
// <listitem>ATK_VALUE_OPTIMAL</listitem> </itemizedlist> <para> Proposals for
// additional constants, along with their use cases, should be submitted to the
// GNOME Accessibility Team. </para> </refsect1>
//
// <refsect1 id="changes"> <title>On the subject of changes</title> <para> Note
// that if there is a textual description associated with the new numeric value,
// that description should be included regardless of whether or not it has also
// changed. </para> </refsect1>.
//
// Value wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Value struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Value)(nil)
)

// Valueer describes Value's interface methods.
type Valueer interface {
	coreglib.Objector

	// CurrentValue gets the value of this object.
	CurrentValue() coreglib.Value
	// Increment gets the minimum increment by which the value of this object
	// may be changed.
	Increment() float64
	// MaximumValue gets the maximum value of this object.
	MaximumValue() coreglib.Value
	// MinimumIncrement gets the minimum increment by which the value of this
	// object may be changed.
	MinimumIncrement() coreglib.Value
	// MinimumValue gets the minimum value of this object.
	MinimumValue() coreglib.Value
	// Range gets the range of this object.
	Range() *Range
	// SubRanges gets the list of subranges defined for this object.
	SubRanges() []*Range
	// ValueAndText gets the current value and the human readable text
	// alternative of obj.
	ValueAndText() (float64, string)
	// SetCurrentValue sets the value of this object.
	SetCurrentValue(value *coreglib.Value) bool
	// SetValue sets the value of this object.
	SetValue(newValue float64)

	// Value-changed: 'value-changed' signal is emitted when the current value
	// that represent the object changes.
	ConnectValueChanged(func(value float64, text string)) coreglib.SignalHandle
}

var _ Valueer = (*Value)(nil)

func wrapValue(obj *coreglib.Object) *Value {
	return &Value{
		Object: obj,
	}
}

func marshalValue(p uintptr) (interface{}, error) {
	return wrapValue(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectValueChanged: 'value-changed' signal is emitted when the current value
// that represent the object changes. value is the numerical representation of
// this new value. text is the human readable text alternative of value, and can
// be NULL if it is not available. Note that if there is a textual description
// associated with the new numeric value, that description should be included
// regardless of whether or not it has also changed.
//
// Example: a password meter whose value changes as the user types their new
// password. Appropiate value text would be "weak", "acceptable" and "strong".
func (obj *Value) ConnectValueChanged(f func(value float64, text string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(obj, "value-changed", false, unsafe.Pointer(C._gotk4_atk1_Value_ConnectValueChanged), f)
}

// CurrentValue gets the value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_value_and_text() instead.
//
// The function returns the following values:
//
//    - value representing the current accessible value.
//
func (obj *Value) CurrentValue() coreglib.Value {
	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C.atk_value_get_current_value(_arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// MaximumValue gets the maximum value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_range() instead.
//
// The function returns the following values:
//
//    - value representing the maximum accessible value.
//
func (obj *Value) MaximumValue() coreglib.Value {
	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C.atk_value_get_maximum_value(_arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// MinimumValue gets the minimum value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_range() instead.
//
// The function returns the following values:
//
//    - value representing the minimum accessible value.
//
func (obj *Value) MinimumValue() coreglib.Value {
	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C.atk_value_get_minimum_value(_arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// SetCurrentValue sets the value of this object.
//
// Deprecated: Since 2.12. Use atk_value_set_value() instead.
//
// The function takes the following parameters:
//
//    - value which is the desired new accessible value.
//
// The function returns the following values:
//
//    - ok: TRUE if new value is successfully set, FALSE otherwise.
//
func (obj *Value) SetCurrentValue(value *coreglib.Value) bool {
	var _arg0 *C.AtkValue // out
	var _arg1 *C.GValue   // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.atk_value_set_current_value(_arg0, _arg1)
	runtime.KeepAlive(obj)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// currentValue gets the value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_value_and_text() instead.
//
// The function returns the following values:
//
//    - value representing the current accessible value.
//
func (obj *Value) currentValue() coreglib.Value {
	gclass := (*C.AtkValueIface)(coreglib.PeekParentClass(obj))
	fnarg := gclass.get_current_value

	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C._gotk4_atk1_Value_virtual_get_current_value(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// maximumValue gets the maximum value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_range() instead.
//
// The function returns the following values:
//
//    - value representing the maximum accessible value.
//
func (obj *Value) maximumValue() coreglib.Value {
	gclass := (*C.AtkValueIface)(coreglib.PeekParentClass(obj))
	fnarg := gclass.get_maximum_value

	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C._gotk4_atk1_Value_virtual_get_maximum_value(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// minimumValue gets the minimum value of this object.
//
// Deprecated: Since 2.12. Use atk_value_get_range() instead.
//
// The function returns the following values:
//
//    - value representing the minimum accessible value.
//
func (obj *Value) minimumValue() coreglib.Value {
	gclass := (*C.AtkValueIface)(coreglib.PeekParentClass(obj))
	fnarg := gclass.get_minimum_value

	var _arg0 *C.AtkValue // out
	var _arg1 C.GValue    // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))

	C._gotk4_atk1_Value_virtual_get_minimum_value(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(obj)

	var _value coreglib.Value // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg1)))

	return _value
}

// setCurrentValue sets the value of this object.
//
// Deprecated: Since 2.12. Use atk_value_set_value() instead.
//
// The function takes the following parameters:
//
//    - value which is the desired new accessible value.
//
// The function returns the following values:
//
//    - ok: TRUE if new value is successfully set, FALSE otherwise.
//
func (obj *Value) setCurrentValue(value *coreglib.Value) bool {
	gclass := (*C.AtkValueIface)(coreglib.PeekParentClass(obj))
	fnarg := gclass.set_current_value

	var _arg0 *C.AtkValue // out
	var _arg1 *C.GValue   // out
	var _cret C.gboolean  // in

	_arg0 = (*C.AtkValue)(unsafe.Pointer(coreglib.InternObject(obj).Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C._gotk4_atk1_Value_virtual_set_current_value(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(obj)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ValueIface: instance of this type is always passed by reference.
type ValueIface struct {
	*valueIface
}

// valueIface is the struct that's finalized.
type valueIface struct {
	native *C.AtkValueIface
}
