// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Hypertext_ConnectLinkSelected(gpointer, gint, guintptr);
// AtkHyperlink* _gotk4_atk1_Hypertext_virtual_get_link(void* fnptr, AtkHypertext* arg0, gint arg1) {
//   return ((AtkHyperlink* (*)(AtkHypertext*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Hypertext_virtual_get_link_index(void* fnptr, AtkHypertext* arg0, gint arg1) {
//   return ((gint (*)(AtkHypertext*, gint))(fnptr))(arg0, arg1);
// };
// gint _gotk4_atk1_Hypertext_virtual_get_n_links(void* fnptr, AtkHypertext* arg0) {
//   return ((gint (*)(AtkHypertext*))(fnptr))(arg0);
// };
// void _gotk4_atk1_Hypertext_virtual_link_selected(void* fnptr, AtkHypertext* arg0, gint arg1) {
//   ((void (*)(AtkHypertext*, gint))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeHypertext = coreglib.Type(C.atk_hypertext_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHypertext, F: marshalHypertext},
	})
}

// Hypertext: interface used for objects which implement linking between
// multiple resource or content locations, or multiple 'markers' within a single
// document. A Hypertext instance is associated with one or more Hyperlinks,
// which are associated with particular offsets within the Hypertext's included
// content. While this interface is derived from Text, there is no requirement
// that Hypertext instances have textual content; they may implement Image as
// well, and Hyperlinks need not have non-zero text offsets.
//
// Hypertext wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Hypertext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Hypertext)(nil)
)

// Hypertexter describes Hypertext's interface methods.
type Hypertexter interface {
	coreglib.Objector

	// Link gets the link in this hypertext document at index link_index.
	Link(linkIndex int) *Hyperlink
	// LinkIndex gets the index into the array of hyperlinks that is associated
	// with the character specified by char_index.
	LinkIndex(charIndex int) int
	// NLinks gets the number of links within this hypertext document.
	NLinks() int

	// Link-selected: "link-selected" signal is emitted by an AtkHyperText
	// object when one of the hyperlinks associated with the object is selected.
	ConnectLinkSelected(func(arg1 int)) coreglib.SignalHandle
}

var _ Hypertexter = (*Hypertext)(nil)

func wrapHypertext(obj *coreglib.Object) *Hypertext {
	return &Hypertext{
		Object: obj,
	}
}

func marshalHypertext(p uintptr) (interface{}, error) {
	return wrapHypertext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectLinkSelected: "link-selected" signal is emitted by an AtkHyperText
// object when one of the hyperlinks associated with the object is selected.
func (hypertext *Hypertext) ConnectLinkSelected(f func(arg1 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(hypertext, "link-selected", false, unsafe.Pointer(C._gotk4_atk1_Hypertext_ConnectLinkSelected), f)
}

// Link gets the link in this hypertext document at index link_index.
//
// The function takes the following parameters:
//
//   - linkIndex: integer specifying the desired link.
//
// The function returns the following values:
//
//   - hyperlink: link in this hypertext document at index link_index.
//
func (hypertext *Hypertext) Link(linkIndex int) *Hyperlink {
	var _arg0 *C.AtkHypertext // out
	var _arg1 C.gint          // out
	var _cret *C.AtkHyperlink // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))
	_arg1 = C.gint(linkIndex)

	_cret = C.atk_hypertext_get_link(_arg0, _arg1)
	runtime.KeepAlive(hypertext)
	runtime.KeepAlive(linkIndex)

	var _hyperlink *Hyperlink // out

	_hyperlink = wrapHyperlink(coreglib.Take(unsafe.Pointer(_cret)))

	return _hyperlink
}

// LinkIndex gets the index into the array of hyperlinks that is associated with
// the character specified by char_index.
//
// The function takes the following parameters:
//
//   - charIndex: character index.
//
// The function returns the following values:
//
//   - gint: index into the array of hyperlinks in hypertext, or -1 if there is
//     no hyperlink associated with this character.
//
func (hypertext *Hypertext) LinkIndex(charIndex int) int {
	var _arg0 *C.AtkHypertext // out
	var _arg1 C.gint          // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))
	_arg1 = C.gint(charIndex)

	_cret = C.atk_hypertext_get_link_index(_arg0, _arg1)
	runtime.KeepAlive(hypertext)
	runtime.KeepAlive(charIndex)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// NLinks gets the number of links within this hypertext document.
//
// The function returns the following values:
//
//   - gint: number of links within this hypertext document.
//
func (hypertext *Hypertext) NLinks() int {
	var _arg0 *C.AtkHypertext // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))

	_cret = C.atk_hypertext_get_n_links(_arg0)
	runtime.KeepAlive(hypertext)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Link gets the link in this hypertext document at index link_index.
//
// The function takes the following parameters:
//
//   - linkIndex: integer specifying the desired link.
//
// The function returns the following values:
//
//   - hyperlink: link in this hypertext document at index link_index.
//
func (hypertext *Hypertext) link(linkIndex int) *Hyperlink {
	gclass := (*C.AtkHypertextIface)(coreglib.PeekParentClass(hypertext))
	fnarg := gclass.get_link

	var _arg0 *C.AtkHypertext // out
	var _arg1 C.gint          // out
	var _cret *C.AtkHyperlink // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))
	_arg1 = C.gint(linkIndex)

	_cret = C._gotk4_atk1_Hypertext_virtual_get_link(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(hypertext)
	runtime.KeepAlive(linkIndex)

	var _hyperlink *Hyperlink // out

	_hyperlink = wrapHyperlink(coreglib.Take(unsafe.Pointer(_cret)))

	return _hyperlink
}

// linkIndex gets the index into the array of hyperlinks that is associated with
// the character specified by char_index.
//
// The function takes the following parameters:
//
//   - charIndex: character index.
//
// The function returns the following values:
//
//   - gint: index into the array of hyperlinks in hypertext, or -1 if there is
//     no hyperlink associated with this character.
//
func (hypertext *Hypertext) linkIndex(charIndex int) int {
	gclass := (*C.AtkHypertextIface)(coreglib.PeekParentClass(hypertext))
	fnarg := gclass.get_link_index

	var _arg0 *C.AtkHypertext // out
	var _arg1 C.gint          // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))
	_arg1 = C.gint(charIndex)

	_cret = C._gotk4_atk1_Hypertext_virtual_get_link_index(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(hypertext)
	runtime.KeepAlive(charIndex)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// nLinks gets the number of links within this hypertext document.
//
// The function returns the following values:
//
//   - gint: number of links within this hypertext document.
//
func (hypertext *Hypertext) nLinks() int {
	gclass := (*C.AtkHypertextIface)(coreglib.PeekParentClass(hypertext))
	fnarg := gclass.get_n_links

	var _arg0 *C.AtkHypertext // out
	var _cret C.gint          // in

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))

	_cret = C._gotk4_atk1_Hypertext_virtual_get_n_links(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(hypertext)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function takes the following parameters:
//
func (hypertext *Hypertext) linkSelected(linkIndex int) {
	gclass := (*C.AtkHypertextIface)(coreglib.PeekParentClass(hypertext))
	fnarg := gclass.link_selected

	var _arg0 *C.AtkHypertext // out
	var _arg1 C.gint          // out

	_arg0 = (*C.AtkHypertext)(unsafe.Pointer(coreglib.InternObject(hypertext).Native()))
	_arg1 = C.gint(linkIndex)

	C._gotk4_atk1_Hypertext_virtual_link_selected(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(hypertext)
	runtime.KeepAlive(linkIndex)
}

// HypertextIface: instance of this type is always passed by reference.
type HypertextIface struct {
	*hypertextIface
}

// hypertextIface is the struct that's finalized.
type hypertextIface struct {
	native *C.AtkHypertextIface
}
