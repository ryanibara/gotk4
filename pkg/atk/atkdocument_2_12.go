// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <atk/atk.h>
// gint _gotk4_atk1_Document_virtual_get_current_page_number(void* fnptr, AtkDocument* arg0) {
//   return ((gint (*)(AtkDocument*))(fnptr))(arg0);
// };
// gint _gotk4_atk1_Document_virtual_get_page_count(void* fnptr, AtkDocument* arg0) {
//   return ((gint (*)(AtkDocument*))(fnptr))(arg0);
// };
import "C"

// CurrentPageNumber retrieves the current page number inside document.
//
// The function returns the following values:
//
//    - gint: current page number inside document, or -1 if not implemented, not
//      know by the implementor, or irrelevant.
//
func (document *Document) CurrentPageNumber() int {
	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_current_page_number(_arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// PageCount retrieves the total number of pages inside document.
//
// The function returns the following values:
//
//    - gint: total page count of document, or -1 if not implemented, not know by
//      the implementor or irrelevant.
//
func (document *Document) PageCount() int {
	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C.atk_document_get_page_count(_arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// currentPageNumber retrieves the current page number inside document.
//
// The function returns the following values:
//
//    - gint: current page number inside document, or -1 if not implemented, not
//      know by the implementor, or irrelevant.
//
func (document *Document) currentPageNumber() int {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_current_page_number

	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_current_page_number(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// pageCount retrieves the total number of pages inside document.
//
// The function returns the following values:
//
//    - gint: total page count of document, or -1 if not implemented, not know by
//      the implementor or irrelevant.
//
func (document *Document) pageCount() int {
	gclass := (*C.AtkDocumentIface)(coreglib.PeekParentClass(document))
	fnarg := gclass.get_page_count

	var _arg0 *C.AtkDocument // out
	var _cret C.gint         // in

	_arg0 = (*C.AtkDocument)(unsafe.Pointer(coreglib.InternObject(document).Native()))

	_cret = C._gotk4_atk1_Document_virtual_get_page_count(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(document)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}
