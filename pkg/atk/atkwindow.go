// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: atk
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <atk/atk.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.atk_window_get_type()), F: marshalWindower},
	})
}

// Window should be implemented by the UI elements that represent a top-level
// window, such as the main window of an application or dialog.
type Window struct {
	ObjectClass
}

// Windower describes Window's abstract methods.
type Windower interface {
	externglib.Objector

	privateWindow()
}

var _ Windower = (*Window)(nil)

func wrapWindow(obj *externglib.Object) *Window {
	return &Window{
		ObjectClass: ObjectClass{
			Object: obj,
		},
	}
}

func marshalWindower(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWindow(obj), nil
}

func (*Window) privateWindow() {}

// ConnectActivate: signal Window::activate is emitted when a window becomes the
// active window of the application or session.
func (w *Window) ConnectActivate(f func()) glib.SignalHandle {
	return w.Connect("activate", f)
}

// ConnectCreate: signal Window::create is emitted when a new window is created.
func (w *Window) ConnectCreate(f func()) glib.SignalHandle {
	return w.Connect("create", f)
}

// ConnectDeactivate: signal Window::deactivate is emitted when a window is no
// longer the active window of the application or session.
func (w *Window) ConnectDeactivate(f func()) glib.SignalHandle {
	return w.Connect("deactivate", f)
}

// ConnectDestroy: signal Window::destroy is emitted when a window is destroyed.
func (w *Window) ConnectDestroy(f func()) glib.SignalHandle {
	return w.Connect("destroy", f)
}

// ConnectMaximize: signal Window::maximize is emitted when a window is
// maximized.
func (w *Window) ConnectMaximize(f func()) glib.SignalHandle {
	return w.Connect("maximize", f)
}

// ConnectMinimize: signal Window::minimize is emitted when a window is
// minimized.
func (w *Window) ConnectMinimize(f func()) glib.SignalHandle {
	return w.Connect("minimize", f)
}

// ConnectMove: signal Window::move is emitted when a window is moved.
func (w *Window) ConnectMove(f func()) glib.SignalHandle {
	return w.Connect("move", f)
}

// ConnectResize: signal Window::resize is emitted when a window is resized.
func (w *Window) ConnectResize(f func()) glib.SignalHandle {
	return w.Connect("resize", f)
}

// ConnectRestore: signal Window::restore is emitted when a window is restored.
func (w *Window) ConnectRestore(f func()) glib.SignalHandle {
	return w.Connect("restore", f)
}
